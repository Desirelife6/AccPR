1	"public void setRenderer(CategoryItemRenderer renderer){setRenderer(0,renderer,true);}"
2	"@Override public boolean remove(Object obj){return (map.remove(obj)!=null);}"
3	"@Override public void onReceive(Context context,Intent intent){System.out.println(""Starting scan"");wifiList=wifimanager.getScanResults();for(ScanResult result : wifiList){Listitem LI=new Listitem();LI.ssid=result.SSID;LI.bssid=result.BSSID;LI.strength=result.level;LI.freq=result.frequency;wlist.add(LI);System.out.println(""SSIS :  ""+LI.ssid+""\t BSSID : ""+LI.bssid);}System.out.println(""Size is : ""+wlist.size());Log.e(""fgggggggh "",wlist.toString());Toast.makeText(getApplication(),""Helel a"",Toast.LENGTH_LONG).show();System.out.println(""Done scanning"");myadapter.notifyDataSetChanged();}"
4	"@Override public boolean isDelicious(){return this.isBaked()||this.isBoiled();}"
5	"@Override protected void onPreExecute(){super.onPreExecute();}"
6	"@Override protected void onPostExecute(Integer result){if(result==1){Fragment fragment=new ShowMovieListHorizontal();Bundle bundle=new Bundle();bundle.putString(ShowMovieListHorizontal.MOVIE_LIST,response.toString());bundle.putInt(ShowMovieListHorizontal.FLAG,MovieUtils.MOVIE_RESULTS);fragment.setArguments(bundle);getFragmentManager().beginTransaction().add(R.id.similar_movies,fragment).commit();(v.findViewById(R.id.similar_movies_title)).setVisibility(View.VISIBLE);++status;}if(status==3){dialog.dismiss();}}"
7	"@Override public void clicked(){if(playServiceFlapIsOut){movingFlaps=true;Main.mainController.getLeaderboard();}}"
8	"public void run(){while(true){if(!approachingBeaconator){if(?.getLightSensor().getLightDetected()>=0.4){?.rotate(Math.PI*4/9,getColor()==OmegasAlliance.BLUE);?.driveForward(600.0);approachingBeaconator=true;}else {for(DcMotor motor : ?.getMotors()){motor.setPower(0.25);}}}else {return ;}}}"
9	"@Override public void close() throws IOException{store.close();}"
10	"@Override public int result(){return 0;}"
11	"@Override public void onCancelled(DatabaseError databaseError){Log.e(""Database"",databaseError.getMessage());}"
12	"public Object getEditableValue(){return this.table;}"
13	"@Override public void onClick(ClickEvent clickEvent){}"
14	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
15	"public void onClick(DialogInterface dialog,int which){}"
16	"public static AccumuloProperties loadStoreProperties(InputStream storePropertiesStream){return ((AccumuloProperties)StoreProperties.loadStoreProperties(storePropertiesStream));}"
17	"public void onClick(View v){switch (v.getId()){case R.id.background_input_field :String backgroundTxtStr=editText.getText().toString();Toast backgroundTxt=Toast.makeText(getBaseContext(),backgroundTxtStr,Toast.LENGTH_LONG);backgroundTxt.show();break;case R.id.bg_back_page_btn :this.finish();break;case R.id.bg_next_page_btn :Bundle prevBundle=getIntent().getExtras();Intent intent=new Intent(this,StartActivity.class);intent.putExtra(""Selected Class"",prevBundle.getString(""Selected Class""));intent.putExtra(""Selected Race"",prevBundle.getString(""Selected Race""));intent.putExtra(""Background"",editText.getText().toString());startActivity(intent);}}"
18	"public void handle(MouseEvent event){isDragDetected=true;}"
19	"@Override public void show(){super.show();Game game=getGameEngine().getGame();if(editingLevel!=null){updateGame();}Collection<Level> levelsArrayList=game.getLevels().values();createLevelsOverview(levelsArrayList);this.scrollPane.scrollToCenter(30,40,100,100);}"
20	"@Override protected boolean isConnected(ForgeDirection side){return connections.getConnectionOnSide(side)!=null;}"
21	"@Override public BigDecimal eval(BigDecimal v1,BigDecimal v2){return v1.subtract(v2);}"
22	"@Override protected void process(List<Integer> numCompleted){progress.setIndeterminate(false);progress.setValue((int)(100/(numCoals/(float)numCompleted.get(0))));}"
23	"public void onClick(DialogInterface dialog,int id){if(noteExists&&note!=null){controller.deleteNote(note);}setResult(RESULT_OK);finish();}"
24	"boolean checkTerminated(boolean d,boolean empty,Subscriber<?> a){if(cancelled){scalarQueue=null;s.cancel();unsubscribe();return true;}if(delayError){if(d&&empty){Throwable e=error;if(e!=null&&e!=Exceptions.TERMINATED){e=Exceptions.terminate(ERROR,this);a.onError(e);}else {a.onComplete();}return true;}}else {if(d){Throwable e=error;if(e!=null&&e!=Exceptions.TERMINATED){e=Exceptions.terminate(ERROR,this);scalarQueue=null;s.cancel();unsubscribe();a.onError(e);return true;}else {if(empty){a.onComplete();return true;}}}}return false;}"
25	"public void onClick(DialogInterface dialog,int which){getOwner().setIntentAndFinish(true,true);}"
26	"@Override public void onFavoriteFragmentInteraction(RealmResults<FavoriteAudio> audios,int position){audioList=convertList(audios);playAudio(position);}"
27	"@Override public Set<Contact> getContacts(int... ids){int idsSize=ids.length;int contactSize=contacts.size();Set<Contact> filteredContacts=new HashSet<Contact>();Contact[] search=(Contact[])contacts.toArray();for(int i=0;i<idsSize;i++){int toCompare=ids[i];for(int j=0;j<contactSize;j++){if(search[i].getId()==toCompare){filteredContacts.add(search[i]);}}}return filteredContacts;}"
28	"int getActiveWindowId(){return mSecurityPolicy.getActiveWindowId();}"
29	"public List<Product> parseResponse(String response) throws JSONException,ParseException{if(response.isEmpty()){return new ArrayList<>();}SimpleDateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd hh:mm:ss"");JSONArray jsonProducts=new JSONArray(response);List<Product> result=new ArrayList<>(jsonProducts.length());for(int i=0;i<jsonProducts.length();++i){JSONObject jsonProduct=jsonProducts.getJSONObject(i);String expirationStr=null;Date expirationDate=null;if(jsonProduct.has(""expiration_date"")){expirationStr=jsonProduct.getString(""expiration_date"");}if(expirationStr==null||expirationStr.equals(""null"")||expirationStr.equals(""0000-00-00 00:00:00"")){expirationDate=null;}else {expirationDate=formatter.parse(expirationStr);}Product product=new Product(Integer.parseInt(jsonProduct.getString(""product_id"")),jsonProduct.getString(""name""),jsonProduct.getString(""description""),jsonProduct.getString(""location""),resolveCategories(jsonProduct.getJSONArray(""categories"")),""SI Unit"",jsonProduct.getString(""price""),jsonProduct.getInt(""quantity""),expirationDate,Uri.parse(jsonProduct.getString(""thumb_image"")),parseAuxImages());result.add(product);}return result;}"
30	"@Override public boolean isPrimitive(){return true;}"
31	"void debugValidate(){if(focusLength>STRICT_NODE_LENGTH){throw new IllegalStateException(""focus len:""+focusLength+"" gt STRICT_NODE_LENGTH:""+STRICT_NODE_LENGTH+""\n""+this.indentedStr(0));}int sz=root.debugValidate();if(sz!=size-focusLength){throw new IllegalStateException(""Size incorrect.  Root size: ""+root.size()+"" RrbSize: ""+size+"" focusLen: ""+focusLength+""\n""+this.indentedStr(0));}if((focusStartIndex<0)||(focusStartIndex>size)){throw new IllegalStateException(""focusStartIndex out of bounds!\n""+this.indentedStr(0));}if(!root.equals(eliminateUnnecessaryAncestors(root))){throw new IllegalStateException(""Unnecessary ancestors!\n""+this.indentedStr(0));}}"
32	"@RequestMapping(""/create_comment"") public ResponseEntity<Map<String,Object>> createComment(Map<String,Object> request){Map<String,Object> respond=new HashMap<String,Object>();try{int userId=userManager.validateAccessToken(request);String body=(String)request.get(""commentBody"");String type="""";int mappingId=Util.nullInt;try{type=(String)request.get(""type"");mappingId=(int)request.get(""mappingId"");}catch(NullPointerException e){}commentManager.saveComment(body,type,mappingId,userId);respond.put(""error"","""");}catch(Exception e){respond=Util.createErrorRespondFromException(e);}return new ResponseEntity<Map<String,Object>>(respond,HttpStatus.OK);}"
33	"private void leftTurnChecker(){for(int j=0;j<shortestPath.length;j++){for(int i=1;i<shortestPath[j].length;i++){Edge firstEdge=shortestPath[j][i-1];Edge secondEdge=shortestPath[j][i];int firstEdgeV=firstEdge.either();int firstEdgeW=firstEdge.other(firstEdge.either());int secondEdgeV=secondEdge.other(secondEdge.either());double[] firstIntersection=intersectionTree.search(firstEdgeV);double[] middleIntersection=intersectionTree.search(firstEdgeW);double[] lastIntersection=intersectionTree.search(secondEdgeV);double firstIntersectionX=((firstIntersection[0]+150.52852)/5.4142E-5);double firstIntersectionY=((firstIntersection[1]-38.247154)/(-5.61075E-5));double middleIntersectionX=((middleIntersection[0]+150.52852)/5.4142E-5);double middleIntersectionY=((middleIntersection[1]-38.247154)/(-5.61075E-5));double lastIntersectionX=((lastIntersection[0]+150.52852)/5.4142E-5);double lastIntersectionY=((lastIntersection[1]-38.247154)/(-5.61075E-5));double firstEdgeAngle=-Math.toDegrees(Math.atan2((middleIntersectionY-firstIntersectionY),(middleIntersectionX-firstIntersectionX)));double secondEdgeAngle=-Math.toDegrees(Math.atan2((lastIntersectionY-middleIntersectionY),(lastIntersectionX-middleIntersectionX)));if(firstEdgeAngle<0){firstEdgeAngle+=360;}if(secondEdgeAngle<0){secondEdgeAngle+=360;}if(firstEdgeAngle>=0&&firstEdgeAngle<180){if((secondEdgeAngle>firstEdgeAngle)&&(secondEdgeAngle<(firstEdgeAngle+180))){Iterable<Edge> intersectionAdjList=graph.adj(firstEdgeW);int checkEitherCounter=1;int intersectionID=-1;double[] tempAdjIntersection;double tempAdjAngle;for(Edge adjEdge : intersectionAdjList){if(checkEitherCounter==2){intersectionID=adjEdge.either();}if(intersectionID==adjEdge.either()){tempAdjIntersection=intersectionTree.search(adjEdge.other(adjEdge.either()));double tempAdjIntersectionX=((tempAdjIntersection[0]+150.52852)/5.4142E-5);double tempAdjIntersectionY=((tempAdjIntersection[1]-38.247154)/(-5.61075E-5));tempAdjAngle=-Math.toDegrees(Math.atan2((tempAdjIntersectionY-middleIntersectionY),(tempAdjIntersectionX-middleIntersectionX)));if(tempAdjAngle<0){tempAdjAngle+=360;}if((tempAdjAngle<secondEdgeAngle)&&(tempAdjAngle>(firstEdgeAngle-20))){Edge[] threeRightTurns=rightTurnLoop(intersectionAdjList,firstEdge);displayRoute(threeRightTurns,true);}}checkEitherCounter++;}}}else {if((secondEdgeAngle>firstEdgeAngle)||((secondEdgeAngle>0)&&(secondEdgeAngle<(firstEdgeAngle-180)))){if(secondEdgeAngle>firstEdgeAngle){Iterable<Edge> intersectionAdjList=graph.adj(firstEdgeW);int checkEitherCounter=1;int intersectionID=-1;double[] tempAdjIntersection;double tempAdjAngle;for(Edge adjEdge : intersectionAdjList){if(checkEitherCounter==2){intersectionID=adjEdge.either();}if(intersectionID==adjEdge.either()){tempAdjIntersection=intersectionTree.search(adjEdge.other(adjEdge.either()));double tempAdjIntersectionX=((tempAdjIntersection[0]+150.52852)/5.4142E-5);double tempAdjIntersectionY=((tempAdjIntersection[1]-38.247154)/(-5.61075E-5));tempAdjAngle=-Math.toDegrees(Math.atan2((tempAdjIntersectionY-middleIntersectionY),(tempAdjIntersectionX-middleIntersectionX)));if(tempAdjAngle<0){tempAdjAngle+=360;}if((tempAdjAngle<secondEdgeAngle)&&(tempAdjAngle>(firstEdgeAngle-20))){Edge[] threeRightTurns=rightTurnLoop(intersectionAdjList,firstEdge);displayRoute(threeRightTurns,true);}}checkEitherCounter++;}}else {if(secondEdgeAngle<firstEdgeAngle){Iterable<Edge> intersectionAdjList=graph.adj(firstEdgeW);int checkEitherCounter=1;int intersectionID=-1;double[] tempAdjIntersection;double tempAdjAngle;for(Edge adjEdge : intersectionAdjList){if(checkEitherCounter==2){intersectionID=adjEdge.either();}if(intersectionID==adjEdge.either()){tempAdjIntersection=intersectionTree.search(adjEdge.other(adjEdge.either()));double tempAdjIntersectionX=((tempAdjIntersection[0]+150.52852)/5.4142E-5);double tempAdjIntersectionY=((tempAdjIntersection[1]-38.247154)/(-5.61075E-5));tempAdjAngle=-Math.toDegrees(Math.atan2((tempAdjIntersectionY-middleIntersectionY),(tempAdjIntersectionX-middleIntersectionX)));if(tempAdjAngle<0){tempAdjAngle+=360;}if((tempAdjAngle>=0)&&(tempAdjAngle<=secondEdgeAngle)){Edge[] threeRightTurns=rightTurnLoop(intersectionAdjList,firstEdge);displayRoute(threeRightTurns,true);}}checkEitherCounter++;}}}}}}}}"
34	"@Override public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){switch (requestCode){case RequestPermissionCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED&&grantResults[1]==PackageManager.PERMISSION_GRANTED&&grantResults[2]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}case RequestCameraCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Camera Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""Camera Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}case RequestCallCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Call Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""Call Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}case RequestExternalStorageCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""External Storage Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""External Storage Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}case RequestLocationCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Location Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""Location Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}case RequestSmsCode :{if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""SMS Permission Granted"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""SMS Permission Canceled"",Toast.LENGTH_SHORT).show();}return ;}}}"
35	"public void handle(Server.ClientHandler clientHandler,String msg){switch (msg){case ""!help"" :list(clientHandler);break;case ""!play sueca"" :clientHandler.disconnect();clientHandler.delete();clientDispatcher.addToSuecaQueue(clientHandler);break;case ""!play roulette"" :clientHandler.delete();clientHandler.disconnect();clientDispatcher.startRoulette(clientHandler);break;case ""!play president"" :clientHandler.delete();clientHandler.disconnect();clientDispatcher.addToPresidentQueue(clientHandler);break;default :defaultMsg(clientHandler);break;}}"
36	"public void setUserProfile(UserProfile userprofile){this.userprofile=userprofile;}"
37	"static long getValueFromAddress(String address){long addressValue=0;if(address!=null){String trimmedAddress=address.trim();if(trimmedAddress.startsWith(S_ASSEMBLY_ADDRESS)){trimmedAddress=trimmedAddress.substring(S_ASSEMBLY_ADDRESS.length());}addressValue=Long.parseLong(trimmedAddress,16);}return addressValue;}"
38	"void initDomaine(Domaine d){toEdit=d;tfNom.setText(d.getNom());nomLabel.setText(d.getNom());tfDomaine.setText(d.getDomaine());tfCategorie.setText(d.getCategorie());domaineLabel.setText(d.getDomaine());iconeLocation=d.getIconeLocation();ivIcone.setImage(app.imageManager.getImage(iconeLocation));taNotes.setText(d.getNotes());exists=true;ArrayList<String> completion=new ArrayList<>();for(Domaine dm : app.donneesActives.getDomaines()){completion.add(dm.getCategorie());}TextFields.bindAutoCompletion(tfCategorie,completion);Platform.runLater(() -> {  tfNom.requestFocus();  tfNom.selectAll();});}"
39	"@POST @Path(""/{id}/deactivate"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep deactivateVcenter(URI id,boolean detachStorage) throws DatabaseException{if(ComputeSystemHelper.isVcenterInUse(_dbClient,id)&&!detachStorage){throw APIException.badRequests.resourceHasActiveReferences(Vcenter.class.getSimpleName(),id);}else {Vcenter vcenter=queryObject(Vcenter.class,id,true);String taskId=UUID.randomUUID().toString();Operation op=_dbClient.createTaskOpStatus(Vcenter.class,vcenter.getId(),taskId,ResourceOperationTypeEnum.DELETE_VCENTER);ComputeSystemController controller=getController(ComputeSystemController.class,null);controller.detachVcenterStorage(vcenter.getId(),true,taskId);auditOp(OperationTypeEnum.DELETE_VCENTER,true,null,vcenter.auditParameters());return toTask(vcenter,taskId,op);}}"
40	"@Override public Object interpret(IEvaluatorContext ctx){return true;}"
41	"@SuppressWarnings(""unchecked"") public D getDiagramByPath(org.uberfire.backend.vfs.Path file){if(accepts(file)){DefinitionSetService services=getServicesByPath(file);if(null!=services){ final String defSetId=getDefinitionSetId(services); final String name=parseFileName(file,services);Metadata metadata=null;InputStream metaDataStream=loadMetadataForPath(file);if(null!=metaDataStream){try{metadata=services.getDiagramMarshaller().getMetadataMarshaller().unmarshall(metaDataStream);}catch(java.io.IOException e){LOG.error(""Cannot unmarshall metadata for diagram's path [""+file+""]"",e);}}if(null==metadata){metadata=buildMetadataInstance(file,defSetId,name);}metadata.setPath(file); final InputStream is=loadPath(file);try{Graph<DefinitionSet,?> graph=services.getDiagramMarshaller().unmarshall(metadata,is);DiagramFactory<Metadata,?> factory=factoryManager.registry().getDiagramFactory(graph.getContent().getDefinition(),getMetadataType());return (D)factory.build(name,metadata,graph);}catch(java.io.IOException e){LOG.error(""Cannot unmarshall diagram for diagram's path [""+file+""]"",e);return null;}}}throw new UnsupportedOperationException(""Diagram format not supported [""+file+""]"");}"
42	"@Override public void onViewCreated(View view,Bundle savedInstanceState){super.onViewCreated(view,savedInstanceState);}"
43	"@Override public boolean apply(Object o){return true;}"
44	"public OutlineMerger(){debugDrawer=new DebugDrawer(){  @Override public void draw(  ShapeRenderer shapeRenderer){    debugDraw(shapeRenderer);  }};}"
45	"@Override public void createBussiness(Serviceinformation BussinessInfo){}"
46	"@Override public void removeAliases(URI uri,String fabricId,String fabricWwn,List<ZoneWwnAlias> aliases,String taskId) throws ControllerException{NetworkSystem device=getDeviceObject(uri);InterProcessLock fabricLock=NetworkFabricLocker.lockFabric(fabricId,_coordinator);try{NetworkSystemDevice networkDevice=getDevice(device.getSystemType());if(networkDevice==null){throw NetworkDeviceControllerException.exceptions.removeAliasesFailedNull(device.getSystemType());}BiosCommandResult result=networkDevice.removeAliases(device,aliases,fabricId,fabricWwn);setStatus(NetworkSystem.class,device.getId(),taskId,result.isCommandSuccess(),result.getServiceCoded());_auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,OperationTypeEnum.REMOVE_ALIAS,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_END,device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL());}catch(Exception ex){ServiceError serviceError=NetworkDeviceControllerException.errors.removeAliasesFailedExc(device.getSystemType(),ex);_dbClient.error(NetworkSystem.class,device.getId(),taskId,serviceError);}finally{NetworkFabricLocker.unlockFabric(fabricId,fabricLock);}}"
47	"@Override public void actionPerformed(ActionEvent e){if(e.getSource().equals(confirmButton)){CategoriesController controller=(CategoriesController)Controllers.getInstance().getController(ControllerType.CATEGORY_CONTROLLER);RenameSubjectResponse resp=controller.renameSubject(subjectID,textField.getText());if(!resp.getOperationStatus()){JOptionPane.showMessageDialog(null,""ERROR"");}removeFromQueue();}else {if(e.getSource().equals(cancelButton)){removeFromQueue();}}}"
48	"private String getStringWithStaticColLength(Object columnValue,int length,boolean isColNumeric,boolean isFullWidth,String static_len_unit) throws DPFTRuntimeException{StringBuilder sb=new StringBuilder();if(columnValue==null){String format=""%1$-""+length+""s"";sb.append(String.format(format,"" ""));return sb.toString();}if(columnValue instanceof String){String s=(String)columnValue;if(isColNumeric){String format=""%1$0""+length;if(s.indexOf(""."")!=-1){int precision=s.length()-s.indexOf(""."")-1;format=format+"".""+precision+""f"";sb.append(String.format(format,Float.valueOf(s)));}else {format=format+""d"";sb.append(String.format(format,Long.valueOf(s)));}}else {s=(isFullWidth)?DPFTUtil.convertToFullWidth(s):s;String format=null;if(static_len_unit.equals(GlobalConstants.FILE_STATIC_LEN_UNIT_CHAR)){s=truncateCharLength(s,length);format=""%1$-""+length+""s"";}else {int adj_len=length;if(this.getFileEncoding().equals(GlobalConstants.FILE_ENCODE_UTF8)){s=truncateUTF8(s,length);adj_len=getAdjustedLengthUTF8(s,length);}else {if(this.getFileEncoding().equalsIgnoreCase(GlobalConstants.FILE_ENCODE_BIG5)){s=truncateBig5(s,length);adj_len=getAdjustedLengthBig5(s,length);}}format=""%1$-""+adj_len+""s"";}DPFTLogger.debug(this,""Format=""+format+"" String:""+s);sb.append(String.format(format,s));}}return sb.toString();}"
49	"@Override public boolean mightHaveNext(){return next!=null;}"
50	"public boolean hasMoreConformations(RCTuple queryConf){return getHeap(queryConf).size()>0;}"
51	"private void writePost(){if(UserAPI.isLoggedIn()){Intent intent=new Intent(getActivity(),ShuffleActivity.class);intent.putExtra(Consts.Extra_SubItem,subItem);startActivityForResult(intent,Code_Publish_Post);}else {((BaseActivity)getActivity()).notifyNeedLog();}}"
52	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){if(s==""""||count==0){mWarmSpotData.setMaxMethaneReading(0);}else {mWarmSpotData.setMaxMethaneReading(Double.parseDouble(s.toString()));}}"
53	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){ final View view=inflater.inflate(R.layout.fragment_saved_quotes,container,false);preferredQuotes=Utils.extractPreferredQuotes(getContext(),Strings.PREFERRED_QUOTES);if(!preferredQuotes.isEmpty()){QuoteAdapter adapter=new QuoteAdapter(getContext(),preferredQuotes);ListView mListView=view.findViewById(R.id.saved_quote_list_view);mListView.setAdapter(adapter);mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){    Utils.shareQuote(getContext(),preferredQuotes.get(position));  }});}else {TextView noSavedQuote=view.findViewById(R.id.textView2);noSavedQuote.setVisibility(View.VISIBLE);}AdView mAdView=view.findViewById(R.id.adView);AdRequest adRequest=new AdRequest.Builder().build();if(mAdView!=null){mAdView.loadAd(adRequest);}return view;}"
54	"@Override public Object getValueAt(int row,int column){switch (column){case 0 :return model.get(row).getExpression();case 1 :return model.get(row);default :return null;}}"
55	"@Override public T getHead(){assert (size>0);return (T)array[head];}"
56	"public boolean isConflicted(){return hasConflicts;}"
57	"@Override public boolean hasPermission(String permission){return this.getBukkitPlayer().hasPermission(permission);}"
58	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
59	"@Override public void onClick(View v){beforeBodyPicUploadValue=1;startActivity(new Intent(this,ImageChoose.class));}"
60	"public boolean applies(Battle b,ActivePokemon caster,ActivePokemon victim,CastSource source){return !(victim.isType(b,Type.GRASS)||victim.hasEffect(this.namesies));}"
61	"@Override public X509Certificate[] getAcceptedIssuers(){return new X509Certificate{};}"
62	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_input_event);String[] buildingsList={""CSE"",""Center"",""WLH"",""LEDDN"",""PRICE"",""York"",""Galbraith"",""Peterson"",""Cogs"",""Sequoyah"",""AP&M"",""Mandler"",""McGill"",""SOLIS""};Spinner buildings=(Spinner)findViewById(R.id.buildingLocation);adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,buildingsList);adapter.setDropDownViewResource(android.R.layout.simple_spinner_item);buildings.setAdapter(adapter);buildings.setOnItemSelectedListener(this);currEvent=ScheduleActivity.getCurrentEvent();}"
63	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){modelId=0;}"
64	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
65	"@Override public void onResponse(JSONArray response){try{Log.d("""",""displaydrama response.length() ""+response.length());for(int i=0;i<response.length();i++){DramaInfo dramaInfo=new DramaInfo();JSONObject jsonObject=null;try{jsonObject=(response.getJSONObject(i));}catch(JSONException e){e.printStackTrace();Toast.makeText(getContext(),""Error: 1 ""+e.getMessage(),Toast.LENGTH_LONG).show();}String groups=jsonObject.getString(""groups"");JSONObject jsonGroupsObject=new JSONObject(groups);int groupId=jsonGroupsObject.getInt(""id"");Log.d("""",""displaydrama jsonGroupsObject groupId ""+groupId);String group_name=jsonGroupsObject.getString(""group_name"");Log.d("""",""displaydrama jsonGroupsObject group_name ""+group_name);dramaInfo.setGroup_name(group_name);String drama=jsonObject.getString(""drama"");Log.d("""",""displaydrama drama ""+drama);JSONObject jsonDramaObject=new JSONObject(drama);int dramaId=jsonDramaObject.getInt(""id"");Log.d("""",""displaydrama jsonDramaObject dramaId ""+dramaId);dramaInfo.setId(dramaId);String date=jsonDramaObject.getString(""date"");Log.d("""",""displaydrama jsonDramaObject date ""+date);dramaInfo.setDatetime(date);String title=jsonDramaObject.getString(""title"");Log.d("""",""displaydrama jsonDramaObject title ""+title);dramaInfo.setTitle(title);String imageurl=jsonDramaObject.getString(""imageurl"");Log.d("""",""displaydrama jsonDramaObject imageurl ""+imageurl);dramaInfo.setLink_photo(imageurl);String isFav=favouritesInfoDAOImpl.findfavBy(dramaInfo.getId());dramaInfo.setIsfav(isFav);dramaInfoDAO.addDrama(dramaInfo);KalravApplication.getInstance().getPrefs().hidepDialog(getContext());}dramaInfos=(ArrayList<DramaInfo>)dramaInfoDAO.getAllDrama();if(dramaInfos!=null&&dramaInfos.size()>0){adapter=new MyAdapter(dramaInfos);myRecyclerView.setAdapter(adapter);}adapter.notifyDataSetChanged();}catch(JSONException e){e.printStackTrace();Log.d("""",""displaydrama JSonException Exception ""+e);Toast.makeText(getContext(),getString(R.string.no_data_available),Toast.LENGTH_LONG).show();}}"
66	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
67	"public boolean memorizeStone(PlayerInteractEvent event){Sign state=(Sign)event.getClickedBlock().getState();MemoryStone stone=plugin.getMemoryStoneManager().getMemoryStructureBehind(state);if(stone!=null&&stone.getSign()!=null){selected.put(event.getPlayer().getName(),stone.getName());Set<MemoryStone> set=memorized.get(event.getPlayer().getName());if(set==null){set=new TreeSet<MemoryStone>();memorized.put(event.getPlayer().getName(),set);}set.add(stone);event.getPlayer().sendMessage(Config.getColorLang(""memorize"",""name"",stone.getName()));saveLocations();return true;}return false;}"
68	"@Override public void onClick(View view){mProcessLike=true;refLike.addValueEventListener(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    if (mProcessLike) {      String userId=mAuth.getCurrentUser().getUid();      if (dataSnapshot.child(key).hasChild(""likedBy"")) {        if (dataSnapshot.child(key).child(""likedBy"").hasChild(userId)) {          refLike.child(key).child(""likedBy"").child(userId).removeValue();          refSave.child(userId).child(""likedRecipes"").child(key).removeValue();          mProcessLike=false;        } else {          refLike.child(key).child(""likedBy"").child(userId).setValue(true);          refSave.child(userId).child(""likedRecipes"").child(key).setValue(true);          sendLikeNotif(name,key,imgUrl,posterId);          mProcessLike=false;        }      } else {        refLike.child(key).child(""likedBy"").child(userId).setValue(true);        refSave.child(userId).child(""likedRecipes"").child(key).setValue(true);        sendLikeNotif(name,key,imgUrl,posterId);        mProcessLike=false;      }    }  }  @Override public void onCancelled(  DatabaseError databaseError){  }});}"
69	"public void requestPermission(Context context) throws ActivityNotFoundException{Intent intent=new Intent();intent.setFlags(FLAG_ACTIVITY_NEW_TASK);context.startActivity(intent);}"
70	"public ArrayList<PieEntry> getPieEntryList(String dateStr){HashMap<String,Long> mapType=new HashMap<>();colors=new ArrayList<>();long recordTime=0;long formerlyTime=0;long residueTime=0;long otherTime=0;for(TimeLineBean bean : TimeLineDao.getDatasFromDay(dateStr)){if(bean.endTime!=0){String name=bean.getType().name;if(mapType.containsKey(name)){mapType.put(name,mapType.get(name)+bean.getDuration());}else {mapType.put(name,bean.getDuration());}recordTime+=bean.getDuration();}}String today=DateUtils.formatYYYYMMDD(System.currentTimeMillis());if(DateUtils.isLarge(today,dateStr)){ALog.e(TAG,""?????"");formerlyTime=ONE_DAY_MILLIS;}else {if(today.equals(dateStr)){ALog.e(TAG,""???"");formerlyTime=System.currentTimeMillis()-DateUtils.getYesterdayMaxTimeMillis();}else {ALog.e(TAG,""?????"");formerlyTime=0;}}residueTime=ONE_DAY_MILLIS-formerlyTime;otherTime=formerlyTime-recordTime;ArrayList<PieEntry> entries=new ArrayList<>();for(String key : mapType.keySet()){Long time=mapType.get(key);entries.add(new PieEntry(time,key));colors.add(TypeDao.getTypeFromName(key).color);}if(residueTime>0){entries.add(new PieEntry(residueTime,""????""));colors.add(0x999e9e9e);}if(otherTime>0){entries.add(new PieEntry(otherTime,""???""));colors.add(0xff607d8b);}return entries;}"
71	"public FusedLocationService(Context context){this.context=context;mLocationRequest=LocationRequest.create();mLocationRequest.setInterval(INTERVAL);mLocationRequest.setFastestInterval(FASTEST_INTERVAL);mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);mGoogleApiClient=new GoogleApiClient.Builder(context).addApi(LocationServices.API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();dataBaseHelper=new DBAdapter_Driver(context);DistanceTravelled travelled=dataBaseHelper.getDistance();if(travelled!=null){tripDistance=travelled.getDistanceTrip();totalDistance=travelled.getDistanceTotal();freeDistance=travelled.getDistanceFree();toCustomerDistance=travelled.getDistanceToCustomer();}if(mGoogleApiClient!=null&&!mGoogleApiClient.isConnected()){mGoogleApiClient.connect();Log.e(TAG,""Fused location service is started .............."");}handler=new Handler(Looper.getMainLooper());runnable=new Runnable(){  @Override public void run(){    updateLocation();  }};handler.postDelayed(runnable,2000);}"
72	"@Override protected void renderMergedOutputModel(Map<String,Object> model,HttpServletRequest request,HttpServletResponse response){response.setContentType(""application/json"");HttpStatus code=(HttpStatus)model.get(""code"");if(code==null){code=HttpStatus.OK;}response.setStatus(code.value());try{Writer out=response.getWriter();ResourceSet rs=(ResourceSet)model.get(""entity"");JsonObject o=new JsonObject();o.addProperty(""_id"",rs.getId());o.addProperty(""user_access_policy_uri"",config.getIssuer()+""manage/resource/""+rs.getId());gson.toJson(o,out);}catch(IOException e){logger.error(""IOException in ResourceSetEntityView.java: "",e);}}"
73	"@Override public void clicked(InputEvent event,float x,float y){event.stop();if(nextButton.isDisabled()){return ;}if(game.canPurchaseLandThisTurn()==false||game.getPhase()==1){buyLandPlotBtn.setVisible(false);plotStats.setVisible(false);hideInstallRoboticon();game.nextPhase();dropDownActive=true;installRoboticonSelect.setItems(game.getPlayer().getRoboticonAmountList());textUpdate();}}"
74	"public List<Channel> execute(WinstonDatabase winston) throws UtilException{return new Channels(winston).getChannels();}"
75	"void getDataFromLocal(){Log.d(this.TAG,""getDataFromLocal"");if(this.loginStatus.matches(""true"")){getDataFromServer();}this.db_obj=new localStruct().new localDB(getApplicationContext());this.db=this.db_obj.getReadableDatabase();Log.d(this.TAG,BuildConfig.FLAVOR+this.db);int[] views=new int{R.id.ht_no,R.id.name};CustomCursorAdapter custom_adapter=new CustomCursorAdapter(this,this.db.query(mentorTable.table_name,new String{""_id"",mentorTable.column1,mentorTable.column2,mentorTable.column3,mentorTable.column4,mentorTable.column5,mentorTable.column6,mentorTable.column7,mentorTable.column8,mentorTable.column9},null,null,null,null,""isStudentFlagged DESC""));this.stdlist=(ListView)findViewById(R.id.std_list2);this.stdlist.setAdapter(custom_adapter);if(this.from_sid!=null){for(int position=0;position<this.studentCount;position++){Cursor c=(Cursor)this.stdlist.getItemAtPosition(position);if(this.from_sid.equals(c.getString(c.getColumnIndex(mentorTable.column1)))){selectStudent(c,""repeat"");}}}this.stdlist.setOnItemClickListener(new C03835());}"
76	"public Fraction(int numerator,int denominator){if(denominator==0){throw new IllegalArgumentException(""Denominator can't be zero."");}else {if((numerator<0&&denominator<0)||(denominator<0)){numerator*=-1;denominator*=-1;}}this.numerator=numerator;this.denominator=denominator;}"
77	"public T_ACTION_FEEDBACK createActionFeedbackMessage(T_FEEDBACK feedback,Publisher<T_ACTION_FEEDBACK> pubFeedback,Time t,GoalStatus gs){T_ACTION_FEEDBACK a=null;try{a=mf.newFromType(actionFeedbackMessage);std_msgs.Header header=mf.newFromType(std_msgs.Header._TYPE);String fm=feedbackMessage.replace('/','.');Method m=a.getClass().getMethod(""setHeader"",Header.class);header.setStamp(t);m.invoke(a,header);m=a.getClass().getMethod(""setFeedback"",Class.forName(fm));m.invoke(a,feedback);m=a.getClass().getMethod(""setStatus"",GoalStatus.class);m.invoke(a,gs);}catch(Exception e){System.out.println(""problem in AFM: ""+e.toString());e.printStackTrace();}return a;}"
78	"public static void OptionMenu(ProfNetwork esql,String authorisedUser,String friendUser){try{boolean optionmenu=true;while(optionmenu){System.out.println(friendUser+""'S PROFILE MENU"");System.out.println(""---------"");System.out.println(""1. Send Connection"");System.out.println(""2. Send Message"");System.out.println(""........................."");System.out.println(""3. Go Back"");switch (readChoice()){case 1 :List<String> numFriends=new ArrayList<String>();numFriends=getFriendsList(esql,authorisedUser);int numconnections=NumberConnections(esql,authorisedUser);if((numFriends.size()==0)&&(numconnections>5)&&ThreeLevels(esql,authorisedUser,friendUser)){SendConnection(esql,authorisedUser,friendUser);}else {if(numconnections<5){SendConnection(esql,authorisedUser,friendUser);}else {System.out.println(""This user is not within three levels of connection!"");}}break;case 2 :SendMessage(esql,authorisedUser,friendUser);break;case 3 :optionmenu=false;break;default :System.out.println(""Unrecognized choice!"");break;}}}catch(Exception e){System.err.println(e.getMessage());}}"
79	"@Override public void updateFacing(){if(this.isMaster&&this.linkedMinerID==null){switch (this.facing){case SOUTH :this.facing=EnumFacing.EAST;break;case EAST :this.facing=EnumFacing.WEST;break;case WEST :this.facing=EnumFacing.NORTH;break;case NORTH :this.facing=EnumFacing.SOUTH;break;}super.updateFacing();}else {TileEntityMinerBase master=this.getMaster();if(master!=null){master.updateFacing();}}if(!this.worldObj.isRemote){this.updateClient();}for(EnumFacing facing : EnumFacing.values()){BlockPos offset=this.getPos().offset(facing);TileEntity tileOffset=this.worldObj.getTileEntity(offset);if(tileOffset!=null&&!(tileOffset instanceof TileEntityMinerBase)){IBlockState state=this.worldObj.getBlockState(offset);state.getBlock().onNeighborChange(worldObj,this.getPos(),offset);worldObj.markBlockRangeForRenderUpdate(offset,offset);}}this.markDirty();}"
80	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_login);ButterKnife.bind(this);mRegisterTextView.setOnClickListener(this);mPasswordLoginButton.setOnClickListener(this);mAuth=FirebaseAuth.getInstance();SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);mEmailEditText.setText(sharedPreferences.getString(Constants.PREFERENCES_PREVIOUS_USER_KEY,""""));mPasswordEditText.requestFocus();createAuthProgressDialog();mAuthListener=new FirebaseAuth.AuthStateListener(){  @Override public void onAuthStateChanged(  @NonNull FirebaseAuth firebaseAuth){    FirebaseUser user=firebaseAuth.getCurrentUser();    if (user != null) {      Intent intent=new Intent(LoginActivity.this,MainActivity.class);      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);      startActivity(intent);      finish();    }  }};}"
81	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.user_login_activity_layout);SormasApplication application=(SormasApplication)getApplication();tracker=application.getDefaultTracker();DevicePolicyManager dpm=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);if(dpm.getStorageEncryptionStatus()==DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE||dpm.getStorageEncryptionStatus()==DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED){AlertDialog.Builder builder=new AlertDialog.Builder(this);builder.setCancelable(false);builder.setMessage(R.string.alert_encryption);AlertDialog dialog=builder.create();dialog.show();}if(ConfigProvider.getUser()!=null){Intent intent=new Intent(this,CasesActivity.class);startActivity(intent);}}"
82	"@Override public void onBindViewHolder(ListViewHolder holder,int position){ final DoctorList doctorObject=mDataList.get(position);holder.doctorName.setText(doctorObject.getDocName());holder.doctorExperience.setText(doctorObject.getExperience()+mContext.getString(R.string.space)+mContext.getString(R.string.years_experience));holder.doctorCategoryType.setText(doctorObject.getCategorySpeciality());holder.aboutDoctor.setText(doctorObject.getDegree());if(doctorObject.getCategoryName().equals(mContext.getString(R.string.my_appointments))){holder.ruppessIcon.setVisibility(View.INVISIBLE);holder.doctorFee.setVisibility(View.INVISIBLE);holder.bookAppointmentButton.setVisibility(View.INVISIBLE);holder.appointmentDate.setVisibility(View.VISIBLE);holder.tokenNo.setVisibility(View.INVISIBLE);SpannableString content=new SpannableString(CommonMethods.getFormattedDate(doctorObject.getAptDate(),RescribeConstants.DATE_PATTERN.YYYY_MM_DD,RescribeConstants.DATE_PATTERN.MMM_DD_YYYY)+"", ""+CommonMethods.getFormattedDate(doctorObject.getAptTime(),RescribeConstants.DATE_PATTERN.HH_mm_ss,RescribeConstants.DATE_PATTERN.hh_mm_a));content.setSpan(new UnderlineSpan(),0,content.length(),0);holder.appointmentDate.setText(content);if(doctorObject.getClinicDataList().size()>0){holder.doctorAddress.setText(doctorObject.getClinicDataList().get(0).getClinicAddress());holder.clinicName.setText(doctorObject.getClinicDataList().get(0).getClinicName());}}else {if(doctorObject.getCategoryName().equals(mContext.getString(R.string.sponsered_doctor))){if(doctorObject.getClinicDataList().size()==1){holder.clinicName.setVisibility(View.VISIBLE);holder.clinicName.setText(doctorObject.getClinicDataList().get(0).getClinicName());holder.doctorAddress.setText(doctorObject.getClinicDataList().get(0).getClinicAddress());}else {if(doctorObject.getClinicDataList().size()>0){SpannableString locationString=new SpannableString(doctorObject.getClinicDataList().size()+mContext.getString(R.string.space)+mContext.getString(R.string.locations));locationString.setSpan(new UnderlineSpan(),0,locationString.length(),0);holder.doctorAddress.setText(locationString);holder.clinicName.setVisibility(View.GONE);}}holder.bookAppointmentButton.setVisibility(View.VISIBLE);holder.appointmentDate.setVisibility(View.INVISIBLE);if(doctorObject.getClinicDataList().size()>0){holder.ruppessIcon.setVisibility(View.VISIBLE);holder.doctorFee.setVisibility(View.VISIBLE);holder.doctorFee.setText(""""+doctorObject.getClinicDataList().get(0).getAmount());}else {holder.doctorFee.setVisibility(View.INVISIBLE);holder.ruppessIcon.setVisibility(View.INVISIBLE);}if(doctorObject.getTokenNo().equals("""")){holder.bookAppointmentButton.setVisibility(View.VISIBLE);holder.tokenNo.setVisibility(View.INVISIBLE);}else {holder.tokenNo.setVisibility(View.VISIBLE);holder.bookAppointmentButton.setVisibility(View.INVISIBLE);}}else {if(doctorObject.getCategoryName().equals(mContext.getString(R.string.recently_visit_doctor))){if(doctorObject.getClinicDataList().size()==1){holder.clinicName.setVisibility(View.VISIBLE);holder.clinicName.setText(doctorObject.getClinicDataList().get(0).getClinicName());holder.doctorAddress.setText(doctorObject.getClinicDataList().get(0).getClinicAddress());}else {if(doctorObject.getClinicDataList().size()>0){SpannableString locationString=new SpannableString(doctorObject.getClinicDataList().size()+mContext.getString(R.string.space)+mContext.getString(R.string.locations));locationString.setSpan(new UnderlineSpan(),0,locationString.length(),0);holder.doctorAddress.setText(locationString);holder.clinicName.setVisibility(View.GONE);}}holder.bookAppointmentButton.setVisibility(View.VISIBLE);holder.appointmentDate.setVisibility(View.INVISIBLE);if(doctorObject.getClinicDataList().size()>0){holder.doctorFee.setVisibility(View.VISIBLE);holder.ruppessIcon.setVisibility(View.VISIBLE);holder.doctorFee.setText(""""+doctorObject.getClinicDataList().get(0).getAmount());}else {holder.doctorFee.setVisibility(View.INVISIBLE);holder.ruppessIcon.setVisibility(View.INVISIBLE);}if(doctorObject.getTokenNo().equals("""")){holder.bookAppointmentButton.setVisibility(View.VISIBLE);holder.tokenNo.setVisibility(View.INVISIBLE);}else {holder.tokenNo.setVisibility(View.VISIBLE);holder.bookAppointmentButton.setVisibility(View.INVISIBLE);}}}}if(doctorObject.getRating()==0){holder.ratingBar.setVisibility(View.INVISIBLE);holder.doctorRating.setVisibility(View.INVISIBLE);}else {holder.ratingBar.setVisibility(View.VISIBLE);holder.doctorRating.setVisibility(View.VISIBLE);holder.ratingBar.setRating((float)doctorObject.getRating());holder.doctorRating.setText(""""+doctorObject.getRating());}holder.doctorlistCardLinearlayout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    mOnCardOfAppointmentClickListener.onClickOfCard(doctorObject.getCategoryName());  }});holder.bookAppointmentButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent intent=new Intent(mContext,SelectSlotToBookAppointmentBaseActivity.class);    intent.putExtra(mContext.getString(R.string.clicked_item_data),doctorObject);    intent.putExtra(mContext.getString(R.string.toolbarTitle),doctorObject.getCategoryName());    mContext.startActivity(intent);  }});if(doctorObject.getFavourite()){holder.favoriteView.setImageDrawable(mContext.getResources().getDrawable(R.drawable.favourite_icon));}else {holder.favoriteView.setImageDrawable(mContext.getResources().getDrawable(R.drawable.favourite_line_icon));}holder.favoriteView.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    boolean status=doctorObject.getFavourite() ? false : true;  }});if(doctorObject.getDoctorImageUrl().equals(RescribeConstants.BLANK)){String doctorName=doctorObject.getDocName();if(doctorName.contains(""Dr. "")){doctorName=doctorName.replace(""Dr. "","""");}int color2=mColorGenerator.getColor(doctorName);TextDrawable drawable=TextDrawable.builder().beginConfig().width(Math.round(mContext.getResources().getDimension(R.dimen.dp40))).height(Math.round(mContext.getResources().getDimension(R.dimen.dp40))).endConfig().buildRound((""""+doctorName.charAt(0)).toUpperCase(),color2);holder.imageURL.setImageDrawable(drawable);}else {RequestOptions requestOptions=new RequestOptions();requestOptions.dontAnimate();requestOptions.diskCacheStrategy(DiskCacheStrategy.NONE);requestOptions.skipMemoryCache(true);requestOptions.override(mImageSize,mImageSize);Glide.with(mContext).load(doctorObject.getDoctorImageUrl()).apply(requestOptions).thumbnail(0.5).into(holder.imageURL);}}"
83	"protected Link generateLink(String paramName,String paramNameLabel,String paramValue,String paramValueLabel,String rel,String hint,boolean set,Page page){OPERATION op=set?OPERATION.SET:OPERATION.ADD;String linkIcon=""fa-plus-circle"";EldaURL pageURL=page.pageURL();String prompt=""require "";String closeQuote="""";if(pageURL.hasParameter(paramName,paramValue)){op=OPERATION.REMOVE;linkIcon=""fa-minus-circle"";prompt=""remove <em>'require "";closeQuote=""'</em>"";}return new Link(String.format(""<i class='fa %s'></i> %s%s %s %s%s"",linkIcon,prompt,paramNameLabel,rel,paramValueLabel,closeQuote),pageURL.withParameter(op,paramName,paramValue),hint);}"
84	"@Override public void onClick(View view,int i){String city_selected;if(i==0){city_selected=mCurrentCity;}else {city_selected=mCities.get(i-1);}Bundle bundle=new Bundle();bundle.putString(""city"",city_selected);Intent backIntent=new Intent();backIntent.putExtras(bundle);setResult(RESULT_OK,backIntent);finish();}"
85	"@Override boolean select(String compilerSetting){return compilerSetting==null;}"
86	"public void run(){try{_results=_srv.submitWork(_originatingClients,_tasks);}catch(IOException e){_mger.msg(""WrkSubmissionThread.run(): current ""+""worker closed connection, will retry one more time"",2);try{_results=_srv.submitWork(_originatingClients,_tasks);}catch(Exception e2){_mger.msg(""WrkSubmissionThread.run(): _srv.submitWork(_originatingClients,""+_tasks.length+"" tasks) threw exception '""+e+""'. Exiting with _results set to null"",2);_results=null;}}catch(Exception e){_mger.msg(""WrkSubmissionThread.run(): _srv.submitWork(_originatingClients,""+_tasks.length+"" tasks) threw exception '""+e+""'. Exiting with _results set to null"",2);_results=null;}}"
87	"@Override public String getText(Object element){if(element instanceof JitterIntervalList){return ((JitterIntervalList)element).getName();}else {if(element instanceof JitterIntervalNodeList){return Double.toString(((JitterIntervalNodeList)element).getJitter());}}return """";}"
88	"private void takePhoto(){Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);mTempPhoto=System.currentTimeMillis()+"".png"";File file=new File(mPhotoParam.getPath(),mTempPhoto);if(Build.VERSION.SDK_INT>=24){sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,FileProvider.getUriForFile(this,AUTHORITY,file)));intent.putExtra(MediaStore.EXTRA_OUTPUT,FileProvider.getUriForFile(this,AUTHORITY,file));}else {sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.fromFile(file)));intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(file));}startActivityForResult(intent,TAKE_PHOTO);}"
89	"@Override public boolean isItemValid(ItemStack stack){return RecipeManager.isItemValid(stack)!=null;}"
90	"@Override DTNode move(MSP430Disassembler d,int val){if(action!=null){action.execute(d);}return nodes[val];}"
91	"private boolean handleError(Tracker tracker,TrackerError error){TrackerErrorBag bag=new TrackerErrorBag();error.m_strMessage=m_defErrorHandler.handle(tracker.m_iterToken,bag);if(!bag.m_bGiveUp){{if(bag.m_bRead){tracker.m_iterToken.scan();}if(bag.m_bHalt){tracker.m_bFinished=true;}return true;}}return false;}"
92	"@Override public void onClick(View view){Report report=send(imgs);if(!report.getDescription().equals("""")){sendData(report);}}"
93	"@Override protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors,Object object){super.collectNewChildDescriptors(newChildDescriptors,object);newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,VhdlFactory.eINSTANCE.createNameList()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createAggregateExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createAllExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createAttributeExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createNameExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createOthersExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createRangeExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createStringExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createCharacterExpression()));newChildDescriptors.add(createChildParameter(VhdlPackage.Literals.MULTI_NAMED__NAME,ExpressionFactory.eINSTANCE.createIdentifierExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createAggregateExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createAllExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createAttributeExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createSubtypeIndicationExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createNameExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createOthersExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createRangeExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createStringExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createCharacterExpression()));newChildDescriptors.add(createChildParameter(TypePackage.Literals.TYPED__TYPE,ExpressionFactory.eINSTANCE.createIdentifierExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAddingExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createMultiExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAggregateExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAllExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAllocatorExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAssociationExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createValueExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createAttributeExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createBitStringExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createSubtypeIndicationExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createSubnatureIndicationExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createLogicalExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createNameExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createNullExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createMultiplyingExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createPowerExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createRelationalExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createShiftExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createSignExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createUnaryExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createOpenExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createOthersExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createRangeExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createStringExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createCharacterExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createIdentifierExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createUnitValueExpression()));newChildDescriptors.add(createChildParameter(DeclarationPackage.Literals.FREE_QUANTITY_DECLARATION__QUANTITY,ExpressionFactory.eINSTANCE.createWaveformExpression()));}"
94	"public static void main(String[] main){JenesisEngine.applicationStage=ScndGenLegends.class;Application.launch(JenesisEngine.class);}"
95	"@Override public boolean matches(ItemStack item){return true;}"
96	"public void typeCheck(Type retType){myStmtList.typeCheck(retType);}"
97	"public void executeMove(Move move) throws InvalidMove{if(isFinished()){throw new InvalidMove(""Game has finished"");}else {if(move.getPlayer()!=mTurn){throw new InvalidMove(""Not your turn!"");}else {for(GameObserver o : mObserversList){o.moveExecStart(mTurn);}move.executeMove(mBoard);mUndoStack.push(move);mLastMove=move;for(GameObserver o : mObserversList){o.moveExecFinished(mBoard,mTurn,mRules.nextTurn(mTurn,mBoard));}if(mRules.winningMove(mLastMove,mBoard)!=Counter.EMPTY){mWinner=mLastMove.getPlayer();setFinished(true);for(GameObserver o : mObserversList){o.onGameOver(mBoard,mWinner);}}else {if(mRules.isDraw(mLastMove.getPlayer(),mBoard)){mWinner=Counter.EMPTY;setFinished(true);for(GameObserver o : mObserversList){o.onGameOver(mBoard,mWinner);}}else {nextTurn();}}}}}"
98	"public void open(String parentUUID,Sorter sorter,int openIndex){Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.FILE_PARENT_UUID,parentUUID));Sublist sublist=new Sublist(openIndex,1);String localeString=LocaleInfo.getCurrentLocale().getLocaleName();boolean justActive=true;BrowserService.Util.getInstance().find(IndexedFile.class.getName(),filter,sorter,sublist,Facets.NONE,localeString,justActive,new AsyncCallback<IndexResult<IndexedFile>>(){  @Override public void onFailure(  Throwable caught){    AsyncCallbackUtils.defaultFailureTreatment(caught);  }  @Override public void onSuccess(  IndexResult<IndexedFile> result){    if (!result.getResults().isEmpty()) {      IndexedFile firstFile=result.getResults().get(0);      HistoryUtils.openBrowse(firstFile,sorter,openIndex);    } else {      Toast.showError(""No files were found"");    }  }});}"
99	"public boolean wasCancelled(){return this==CANCELLED_FROM_DISCONNECT||this==Status.CANCELLED_FROM_BLE_TURNING_OFF;}"
100	"@Override public void onClick(View view){mCurrentIndex=(mCurrentIndex+1)%mQuestionBank.length;updateQuestion();}"
101	"boolean setPassword(String password){if(pvt_key_present()){return (true);}try{int keyLength=128;byte[] keyBytes=new byte[keyLength/8];Arrays.fill(keyBytes,(byte)0x0);byte[] passwordBytes=password.getBytes(""UTF-8"");int length=passwordBytes.length<keyBytes.length?passwordBytes.length:keyBytes.length;System.arraycopy(passwordBytes,0,keyBytes,0,length);return (restorePrivateKey(new SecretKeySpec(keyBytes,AES_KEYS_TAG)));}catch(Exception e){Log.e(""setPassword"",""error restore pvt key"");}return (false);}"
102	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}JStormValueState<?,?> that=(JStormValueState<?,?>)o;return namespace.equals(that.namespace)&&id.equals(that.id)&&spec.equals(that.spec);}"
103	"private boolean applyStatusChanges(ReferenceDomain rd,ReferenceDAO refDAO){boolean anyChanges=updateStatus(Constants.WG_AP,this.getAp_status(),rd.ap_status,refDAO);anyChanges=updateStatus(Constants.WG_GO,this.getGo_status(),rd.go_status,refDAO)||anyChanges;anyChanges=updateStatus(Constants.WG_GXD,this.getGxd_status(),rd.gxd_status,refDAO)||anyChanges;anyChanges=updateStatus(Constants.WG_QTL,this.getQtl_status(),rd.qtl_status,refDAO)||anyChanges;anyChanges=updateStatus(Constants.WG_TUMOR,this.getTumor_status(),rd.tumor_status,refDAO)||anyChanges;if(anyChanges){this.workflowStatusCache=null;if(this.getJnumid()==null){boolean anyNotRouted=false;for(String workgroup : Constants.WG_ALL){String wgStatus=this.getStatus(workgroup);if((wgStatus!=null)&&!wgStatus.equals(Constants.WS_NOT_ROUTED)){anyNotRouted=true;break;}}if(anyNotRouted){AccessionID accID=new AccessionID();accID._accession_key=refDAO.getNextAccessionKey();accID._logicaldb_key=Constants.LDB_MGI;accID._mgitype_key=Constants.TYPE_REFERENCE;accID._object_key=this._refs_key;accID.is_private=Constants.PUBLIC;accID.preferred=Constants.PREFERRED;accID.prefixPart=Constants.PREFIX_JNUM;accID.accID=refDAO.getNextJnum();accID.createdByUser=refDAO.getUser(""mgd_dbo"");accID.modifiedByUser=accID.createdByUser;accID.creation_date=new Date();accID.modification_date=accID.creation_date;refDAO.persist(accID);this.accessionIDs.add(accID);}}}return anyChanges;}"
104	"@Override public double computePrice(){PriceSetterWithTargets seller=(PriceSetterWithTargets)this.getAgent();double referenceVariable=seller.getReferenceVariableForPrice();double price=seller.getPrice();double capitalValue=seller.getPassedValue(idCapitalValue,1);double capacity=seller.getPassedValue(idCapacity,1);if(capacity<=0){return price;}List<Item> loans=seller.getItemsStockMatrix(false,idLoans);double totInterests=0;for(int i=0;i<loans.size();i++){Loan loan=(Loan)loans.get(i);if(loan.getAge()>0){double iRate=loan.getInterestRate();double interests=iRate*loan.getValue();totInterests+=interests;}}double debtBurden=totInterests;double previousMarkUp;if(capacity>0){previousMarkUp=(returnRate*capitalValue+debtBurden)/(capacity*capacityUtilisation);}else {previousMarkUp=price/seller.getPriceLowerBound();}if(referenceVariable>threshold){returnRate-=(adaptiveParameter*returnRate*distribution.nextDouble());}else {returnRate+=(adaptiveParameter*returnRate*distribution.nextDouble());}if(capacity>0){markUp=(returnRate*capitalValue+debtBurden)/(capacity*capacityUtilisation);}else {markUp=price/seller.getPriceLowerBound();}if(seller.getPriceLowerBound()!=0){price=seller.getPriceLowerBound()*(1+markUp);}else {double previousLowerBound=price/(1+previousMarkUp);price=previousLowerBound*(1+markUp);return price;}if(price>seller.getPriceLowerBound()){return price;}else {return seller.getPriceLowerBound();}}"
105	"private synchronized void moveToPassiveReady(Enrollment winningEnrollment){electionMgr.reset(winningEnrollment);logger.debug(""moving to passive ready ""+state+"" ""+winningEnrollment);if(state==START_STATE){setActiveNodeID(winningEnrollment.getNodeID());state=PASSIVE_UNINITIALIZED;info(""Moved to ""+state,true);fireStateChangedOperatorEvent();stateChangeSink.addSingleThreaded(new StateChangedEvent(START_STATE,state));}else {if(state==PASSIVE_UNINITIALIZED){Assert.assertTrue(syncdTo.isNull());setActiveNodeID(winningEnrollment.getNodeID());}else {if(state==PASSIVE_SYNCING){setActiveNodeID(winningEnrollment.getNodeID());if(!syncdTo.equals(winningEnrollment.getNodeID())){logger.fatal(""Passive only partially synced when active disappeared.  Restarting"");throw new ZapDirtyDbServerNodeException(""Passive only partially synced when active disappeared.  Restarting"");}}else {if(state==ACTIVE_COORDINATOR){throw new AssertionError(""Cant move to ""+PASSIVE_UNINITIALIZED+"" from ""+ACTIVE_COORDINATOR+"" at least for now"");}else {setActiveNodeID(winningEnrollment.getNodeID());}}}}}"
106	"@Override public E pollFirst(){Object[] ret=new Object[1];theInternals.doLocked(() -> {  ret[0]=pollFirstImpl();},true,true);return (E)ret[0];}"
107	"private void insertCategory(String category){try{((VoicemeApplication)getActivity().getApplication()).getWebService().insertCategory(category).observeOn(AndroidSchedulers.mainThread()).subscribe(new BaseSubscriber<NewCategoryAdded>(){  @Override public void onNext(  NewCategoryAdded userResponse){    setCategory(userResponse.getId(),editText.getText().toString());  }});}catch(Exception e){e.printStackTrace();}}"
108	"@Override public void run(){drawingEndOfLevelUI=true;}"
109	"private static void removeReward(Quest q,Player sender,String[] args){if(args.length==5){switch (args[3].toLowerCase()){case ""item"" :q.getQuestReward().getItems().remove(Integer.parseInt(args[4]));break;case ""fp"" :q.getQuestReward().getFp().remove(Integer.parseInt(args[4]));break;}QuestEditorManager.editQuest(sender);return ;}}"
110	"private boolean check(Field field,Point currentPoint,IPointGenerator pointGenerator){ final Figure currentFigure; final Figure nextFigure; final Point nextPoint=pointGenerator.next(currentPoint);try{currentFigure=field.getFigure(currentPoint);nextFigure=field.getFigure(nextPoint);}catch(InvalidPointException e){return true;}if(currentFigure==null){return false;}if(currentFigure!=nextFigure){return false;}return check(field,nextPoint,pointGenerator);}"
111	"public void onClick(View v){if(mHotItemType==DrawingPath.DRAWING_PATH_POINT||mHotItemType==DrawingPath.DRAWING_PATH_LINE||mHotItemType==DrawingPath.DRAWING_PATH_AREA){if(mDrawingSurface.moveHotItemToNearestPoint()){modified();}else {Toast.makeText(context,R.string.failed_snap_to_point,Toast.LENGTH_SHORT).show();}}dismissPopup();}"
112	"@Override public void run(){if(null!=interceptorsIndex&&interceptorsIndex.size()>0){for(Map.Entry<Integer,Class<? extends IInterceptor>> entry : interceptorsIndex.entrySet()){Class<? extends IInterceptor> interceptorClass=entry.getValue();try{IInterceptor iInterceptor=interceptorClass.getConstructor().newInstance();iInterceptor.init(mContext);interceptors.add(iInterceptor);}catch(Exception ex){throw new HandlerException(TAG+""ARouter init interceptor error! name = [""+interceptorClass.getName()+""], reason = [""+ex.getMessage()+""]"");}}interceptorHasInit=true;logger.info(TAG,""ARouter interceptors init over."");synchronized(interceptorInitLock){interceptorInitLock.notifyAll();}}}"
113	"public Sprite backpack(Sprite spriteToEdit,boolean addToHiddenBackpack){ProjectManager.getInstance().setCurrentSprite(spriteToEdit);Sprite backPackSprite=spriteToEdit.cloneForBackPack();String newSpriteName=Utils.getUniqueSpriteName(spriteToEdit);backPackSprite.setName(newSpriteName);backPackSprite.isBackpackLookData=true;for(LookData lookData : spriteToEdit.getLookDataList()){if(!lookDataIsUsedInScript(lookData)){backPackSprite.getLookDataList().add(LookController.getInstance().backPackLook(lookData,true));}}for(SoundInfo soundInfo : spriteToEdit.getSoundList()){if(!soundInfoIsUsedInScript(soundInfo)){backPackSprite.getSoundList().add(SoundController.getInstance().backPackSound(soundInfo,true));}}List<Script> backPackedScripts=BackPackScriptController.getInstance().backpack(spriteToEdit.getName(),spriteToEdit.getListWithAllBricks(),true);if(backPackedScripts!=null&&!backPackedScripts.isEmpty()){backPackSprite.getScriptList().addAll(backPackedScripts);}if(addToHiddenBackpack){BackPackListManager.getInstance().addSpriteToHiddenBackpack(backPackSprite);}else {BackPackListManager.getInstance().addSpriteToBackPack(backPackSprite);}return backPackSprite;}"
114	"public void load(StdItem E,ByteBuffer S){E.baseGoldValue=S.getInt();}"
115	"public void closeConnection(){if(shuttleXpressDevice.isConnected()){Log.v(TAG,""Closing connection"");if(runBackground){stopForeground(true);}usbDeviceConnection.close();usbDevice=null;}shuttleXpressDevice.setDisconnected();}"
116	"@Override int getId(){return 0;}"
117	"@Override public void onConnected(Bundle connectionHint){mLocation=LocationServices.FusedLocationApi.getLastLocation(gac);if(mLocation==null){Log.d(TAG,""OH NOES"");}else {Log.d(TAG,""Latitude: ""+mLocation.getLatitude());Log.d(TAG,""Longitude: ""+mLocation.getLongitude());}}"
118	"public TxnReplication(String threadName,ZooKeeperServerListener listener,PaxosKeeperServer pk,PaxosNetwork net){super(threadName,listener);this.pk=pk;this.myid=pk.getConfig().getServerId();this.net=net;pfactory=new PaxosPacketFactory(myid(),PaxosConstants.PAXOS_CHANNEL_TXN);proposer=new TxnReplicationProposer(""txn.proposer"",listener,pk,net,pfactory);acceptor=new TxnReplicationAcceptor(""txn.acceptor"",listener,pk,net,pfactory);}"
119	"public Builder setTypeRegistry(ColumnTypeRegistry<DatastoreColumnType> typeRegistry){this.typeRegistry=typeRegistry;return this;}"
120	"public void dockGrab(dockgrabmodes mode,int x,int y){state.set(oculusPrime.State.values.dockgrabbusy,true);state.delete(oculusPrime.State.values.dockfound);if(state.getBoolean(State.values.framegrabbusy.name())||!(state.get(State.values.stream).equals(""camera"")||state.get(State.values.stream).equals(""camandmic""))){app.message(""framegrab busy or stream unavailable"",null,null);return ;}if(grabber instanceof IServiceCapableConnection){state.set(State.values.framegrabbusy.name(),true);Application.framegrabimg=null;Application.processedImage=null;IServiceCapableConnection sc=(IServiceCapableConnection)grabber;String resolution;if(lowres){resolution=""framegrabMedium"";}else {resolution=""framegrab"";}sc.invoke(resolution,new Object{});}new Thread(new Runnable(){  public void run(){    try {      int n=0;      while (state.getBoolean(State.values.framegrabbusy)) {        try {          Thread.sleep(5);        } catch (        InterruptedException e) {          e.printStackTrace();        }        n++;        if (n > 2000) {          Util.debug(""frame grab timed out"",this);          state.set(State.values.framegrabbusy,false);          break;        }      }      BufferedImage img=null;      if (Application.framegrabimg != null) {        ByteArrayInputStream in=new ByteArrayInputStream(Application.framegrabimg);        img=ImageIO.read(in);        in.close();      } else       if (Application.processedImage != null) {        img=Application.processedImage;      } else {        Util.log(""dockgrab failure"",this);        return;      }      imgwidth=img.getWidth();      imgheight=img.getHeight();      rescomp=640 / imgwidth;      float[] matrix={0.111f,0.111f,0.111f,0.111f,0.111f,0.111f,0.111f,0.111f,0.111f};      BufferedImageOp op=new ConvolveOp(new Kernel(3,3,matrix));      img=op.filter(img,new BufferedImage(imgwidth,imgheight,BufferedImage.TYPE_INT_ARGB));      int[] argb=img.getRGB(0,0,imgwidth,imgheight,null,0,imgwidth);      if (mode.equals(dockgrabmodes.calibrate)) {        String[] results=oculusImage.findBlobStart(x,y,img.getWidth(),img.getHeight(),argb);        autoDock(autodockmodes.dockgrabbed.toString() + "" "" + dockgrabmodes.calibrate.toString()+ "" ""+ results[0]+ "" ""+ results[1]+ "" ""+ results[2]+ "" ""+ results[3]+ "" ""+ results[4]+ "" ""+ results[5]+ "" ""+ results[6]+ "" ""+ results[7]+ "" ""+ results[8]);      }      if (mode.equals(dockgrabmodes.start)) {        oculusImage.lastThreshhold=-1;      }      if (mode.equals(dockgrabmodes.find) || mode.equals(dockgrabmodes.start)) {        String results[]=oculusImage.findBlobs(argb,imgwidth,imgheight);        String str=results[0] + "" "" + results[1]+ "" ""+ results[2]+ "" ""+ results[3]+ "" ""+ results[4];        int width=Integer.parseInt(results[2]);        if (width < (int)(0.02 * imgwidth) || width > (int)(0.875 * imgwidth) || results[3].equals(""0""))         state.set(State.values.dockfound,false); else         state.set(State.values.dockfound,true);        if (state.getBoolean(State.values.autodocking))         autoDock(autodockmodes.dockgrabbed.toString() + "" "" + dockgrabmodes.find.toString()+ "" ""+ str);      }      if (mode.equals(dockgrabmodes.test)) {        oculusImage.lastThreshhold=-1;        String results[]=oculusImage.findBlobs(argb,imgwidth,imgheight);        int guix=Integer.parseInt(results[0]) / (2 / rescomp);        int guiy=Integer.parseInt(results[1]) / (2 / rescomp);        int guiw=Integer.parseInt(results[2]) / (2 / rescomp);        int guih=Integer.parseInt(results[3]) / (2 / rescomp);        String str=guix + "" "" + guiy+ "" ""+ guiw+ "" ""+ guih+ "" ""+ results[4];        app.message(str,""autodocklock"",str);      }      state.set(State.values.dockgrabbusy.name(),false);    } catch (    Exception e) {      e.printStackTrace();    }  }}).start();}"
121	"public SlotType getSlotType(){return getSlotType();}"
122	"public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException{String errorMessage="""";Map<String,Object> pageVariables=new HashMap<>();;switch (request.getPathInfo()){case ""/page.html"" :String message=request.getParameter(""message"");createPageVariableMap(request,pageVariables);pageVariables.put(""message"",message==null?"""":message);if(message==null||message.isEmpty()){response.setStatus(HttpServletResponse.SC_FORBIDDEN);}else {response.setStatus(HttpServletResponse.SC_OK);}break;case ""/employees.html"" :long updateId=0;String firstName=request.getParameter(""firstName"");String lastName=request.getParameter(""lastName"");double salary=0;String dateOfBirth=request.getParameter(""dateOfBirth"");String deleteId=request.getParameter(""deleteId"");if(!deleteId.equals("""")){employeeDAO.deleteEmployee(deleteId,errorMessage);}else {if(firstName.equals("""")){errorMessage=errorMessage+""<br>[ERROR] First Name field is mandatory"";}if(lastName.equals("""")){errorMessage=errorMessage+""<br>[ERROR] Last Name field is mandatory"";}if(dateOfBirth.equals("""")){errorMessage=errorMessage+""<br>[ERROR] Date Of Birth field is mandatory"";}try{if(!request.getParameter(""updateId"").equals("""")){salary=Long.parseLong(request.getParameter(""updateId""));}}catch(NumberFormatException e){errorMessage=errorMessage+""<br>[ERROR] Invalid Employee Id: ""+request.getParameter(""updateId"")+"". Id should be numerical"";}try{salary=Double.parseDouble(request.getParameter(""salary""));}catch(NumberFormatException e){errorMessage=errorMessage+""<br>[ERROR] Invalid salary: ""+request.getParameter(""salary"")+"". Salary is mandatory and should be numerical"";}try{Date validDateOfBirth=TypesConversion.dateOfBirthToDate(dateOfBirth);}catch(ParseException e){errorMessage=errorMessage+""<br>[ERROR] Invalid date format: ""+dateOfBirth+"". Expected date format yyyy-MM-dd. Example: 1982-02-28"";}if(!errorMessage.isEmpty()){pageVariables.put(""errorMessage"",errorMessage);pageVariables.put(""employees"",employeeDAO.getAllEmployeesData());break;}if(!request.getParameter(""updateId"").equals("""")){employeeDAO.updateEmployee(updateId,firstName,lastName,salary,dateOfBirth,errorMessage);}else {employeeDAO.addEmployee(firstName,lastName,salary,dateOfBirth,errorMessage);}}pageVariables.put(""errorMessage"",errorMessage);pageVariables.put(""employees"",employeeDAO.getAllEmployeesData());break;}response.setContentType(""text/html;charset=utf-8"");response.getWriter().println(PageGenerator.getInstance().getPage(request.getPathInfo(),pageVariables));}"
123	"public static boolean isVplexVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_VOLUME.toString());return TRUE.equals(status);}"
124	"@Override public void handleMessage(Message msg){int what=msg.what;switch (what){case AddressLogic.ANDRESS_DATA_GET_SUC :{if(null!=msg.obj){sAddressData=(String)msg.obj;}break;}case AddressLogic.ANDRESS_DATA_GET_FAIL :{break;}case AddressLogic.ANDRESS_DATA_GET_EXCEPTION :{break;}case AddressLogic.NET_ERROR :{break;}default :break;}}"
125	"@Override public String toString(){return toStringBuilder(new StringBuilder(Tree.initialPrintStringBuilderSize)).toString();}"
126	"public void encryptStorage(String code,String data){boolean doEncrypt=true;try{JSONObject encryptData=new JSONObject(data);if(!encryptData.isNull(resources.getString(R.string.intent_extra_function))&&encryptData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_encrypt))){doEncrypt=true;}else {if(!encryptData.isNull(resources.getString(R.string.intent_extra_function))&&encryptData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_decrypt))){doEncrypt=false;}else {if(!encryptData.isNull(resources.getString(R.string.intent_extra_function))){doEncrypt=Boolean.parseBoolean(encryptData.get(resources.getString(R.string.intent_extra_function)).toString());}}}}catch(JSONException e){Log.e(TAG,""Invalid JSON format.""+e);}ComponentName admin=new ComponentName(context,AgentDeviceAdminReceiver.class);if(doEncrypt&&devicePolicyManager.getStorageEncryptionStatus()!=DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED&&(devicePolicyManager.getStorageEncryptionStatus()==DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE)){devicePolicyManager.setStorageEncryption(admin,doEncrypt);Intent intent=new Intent(DevicePolicyManager.ACTION_START_ENCRYPTION);intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);context.startActivity(intent);}else {if(!doEncrypt&&devicePolicyManager.getStorageEncryptionStatus()!=DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED&&(devicePolicyManager.getStorageEncryptionStatus()==DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE||devicePolicyManager.getStorageEncryptionStatus()==DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING)){devicePolicyManager.setStorageEncryption(admin,doEncrypt);}}String status;if(devicePolicyManager.getStorageEncryptionStatus()!=DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED){status=resources.getString(R.string.shared_pref_default_status);}else {status=resources.getString(R.string.shared_pref_false_status);}resultBuilder.build(code,status);}"
127	"@Override public List<String> getStringSymbolsBySource(String sourceEngineName){if(StringUtils.isEmpty(sourceEngineName)){return Collections.emptyList();}switch (sourceEngineName){case ""EMEA"" :return Arrays.asList(""GAZP"",""RTS"",""SBRF"",""VTBR"");case ""NAM"" :return Arrays.asList(""YHOO"",""GE"",""AAPL"",""T"",""MSFT"");}return Collections.emptyList();}"
128	"@Override public void tick(long time){if(handLabelStack.size()==0){return ;}if(lastSwitchTime==0){lastSwitchTime=time;}if(currentHandIndex>=timings.size()){return ;}if(startSeededTime==0){startSeededTime=time;}seededTime=time-startSeededTime;long frameTime=timings.get(currentHandIndex)-Properties.SWITCH_TIME;while(seededTime>timings.get(gestureHandIndex)-Properties.SWITCH_TIME){tpgh.changeGesture(gestureHandIndex++);}if(seededTime>frameTime){lastSwitchTime=seededTime-Properties.SWITCH_TIME;currentHands.clear();currentPositions.clear();currentRotations.clear();gestureHandIndex=currentHandIndex;frameTime=timings.get(currentHandIndex)-Properties.SWITCH_TIME;while(frameTime<seededTime){String currentHand=null;String currentPosition=null;String currentRotation=null;do {if(handLabelStack.size()>0){currentHand=handLabelStack.get(currentHandIndex);currentPosition=handLabelStack.get(currentHandIndex);currentRotation=handLabelStack.get(currentHandIndex);frameTime=timings.get(currentHandIndex++)-Properties.SWITCH_TIME;}} while(currentHand==null||currentPosition==null||currentRotation==null);if(currentHands.size()==0||!currentHands.get(currentHands.size()-1).equals(hands.get(currentHand))){currentHands.add(hands.get(currentHand));}if(currentPositions.size()==0||!currentPositions.get(currentPositions.size()-1).equals(vectors.get(currentPosition))){currentPositions.add(vectors.get(currentPosition));}if(currentRotations.size()==0||!currentRotations.get(currentRotations.size()-1).equals(rotations.get(currentRotation))){currentRotations.add(rotations.get(currentRotation));}}}currentAnimationTime=(int)(seededTime-lastSwitchTime);if(animationTime<=0){animationTime=1;}tpgh.tick(time);lastUpdate=time;}"
129	"public void requestData(String url,int method,JSONObject jsonObject,String diologTxt,VolleyCallBack successCallBack,ServerErrorCallBack errorCallBack){ final String VOLLYSTATUS=""vollyStatus""; final String VOLLYMSG=""vollymsg""; final JsonObjectRequest jsObjRequest=new JsonObjectRequest(method,url,jsonObject,new Response.Listener<JSONObject>(){  @Override public void onResponse(  JSONObject response){    AppController.getInstance().removeEequest();    Util.log(""Response "",url + ""\n"" + jsonObject.toString()+ ""\n""+ response.toString());    if (response != null) {      try {        response.put(VOLLYSTATUS,""200"");        response.put(VOLLYMSG,""Success"");        successCallBack.success(response.toString());      } catch (      JSONException e) {        e.printStackTrace();      }    } else {      Util.log("""",""Something went wrong.!>>"");      try {        response.put(VOLLYSTATUS,""300"");        response.put(VOLLYMSG,""Something went wrong.!"");        errorCallBack.error(response.toString());      } catch (      JSONException e) {        e.printStackTrace();      }    }    try {      myDialogManager.stopProcessDialog();    } catch (    IllegalArgumentException e) {    }  }},new Response.ErrorListener(){  @Override public void onErrorResponse(  VolleyError error){    AppController.getInstance().removeEequest();    String err=(error.getMessage() == null) ? ""Data Send Fail"" : error.getMessage() + ""nj error"";    NetworkResponse networkResponse=error.networkResponse;    if (networkResponse != null) {      Util.log(""Response: "",""networkResponse.!"" + networkResponse.toString() + ""::::""+ networkResponse.statusCode);    }    Util.log(""Response: "",""Something went wrong.!"" + err + "">>""+ error.toString());    JSONObject jsonObject=new JSONObject();    try {      jsonObject.put(""status"",""100"");      jsonObject.put(VOLLYSTATUS,""400"");      jsonObject.put(VOLLYMSG,cx.getString(R.string.error_retry_after_sometime));      errorCallBack.error(jsonObject.toString());    } catch (    JSONException e) {      e.printStackTrace();    }    myDialogManager.stopProcessDialog();  }}){  @Override public Map<String,String> getHeaders() throws AuthFailureError {    HashMap<String,String> headers=new HashMap<String,String>();    headers.put(""Content-type"",""application/json; charset=UTF-8"");    return headers;  }};AppController.getInstance().addToRequestQueue(jsObjRequest);}"
130	"public void run(){lblOpeningFile.setVisible(true);}"
131	"public Bitmap getRoundedShape(Bitmap scaleBitmapImage){int targetWidth=125;int targetHeight=125;Bitmap targetBitmap=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);Canvas canvas=new Canvas(targetBitmap);Path path=new Path();path.addCircle(((float)targetWidth-1)/2,((float)targetHeight-1)/2,(Math.min(((float)targetWidth),((float)targetHeight))/2),Path.Direction.CCW);canvas.clipPath(path);Bitmap sourceBitmap=scaleBitmapImage;canvas.drawBitmap(sourceBitmap,new Rect(0,0,sourceBitmap.getWidth(),sourceBitmap.getHeight()),new Rect(0,0,targetWidth,targetHeight),null);return targetBitmap;}"
132	"@Override public String getServiceName(){return CommitRealTimeService.class.getSimpleName();}"
133	"private void addConfiguration(AnalysisJob analysisJob,Map<TransformerJob,TransformerType> transformerMappings,Map<FilterJob,FilterType> filterMappings,Map<AnalyzerJob,AnalyzerType> analyzerMappings,Map<InputColumn<?>,String> columnMappings){ final StringConverter stringConverter=new StringConverter(_configuration.getInjectionManager(analysisJob));for(Entry<TransformerJob,TransformerType> entry : transformerMappings.entrySet()){TransformerJob job=entry.getKey();TransformerType elementType=entry.getValue();BeanConfiguration configuration=job.getConfiguration();Set<ConfiguredPropertyDescriptor> configuredProperties=job.getDescriptor().getConfiguredPropertiesForInput();elementType.getInput().addAll(createInputConfiguration(configuration,configuredProperties,columnMappings,stringConverter));configuredProperties=job.getDescriptor().getConfiguredProperties();elementType.setProperties(createPropertyConfiguration(configuration,configuredProperties,stringConverter));elementType.setMetadataProperties(createMetadataProperties(job.getMetadataProperties()));}for(Entry<FilterJob,FilterType> entry : filterMappings.entrySet()){FilterJob job=entry.getKey();FilterType elementType=entry.getValue();BeanConfiguration configuration=job.getConfiguration();Set<ConfiguredPropertyDescriptor> configuredProperties=job.getDescriptor().getConfiguredPropertiesForInput();elementType.getInput().addAll(createInputConfiguration(configuration,configuredProperties,columnMappings,stringConverter));configuredProperties=job.getDescriptor().getConfiguredProperties();elementType.setProperties(createPropertyConfiguration(configuration,configuredProperties,stringConverter));elementType.setMetadataProperties(createMetadataProperties(job.getMetadataProperties()));}for(Entry<AnalyzerJob,AnalyzerType> entry : analyzerMappings.entrySet()){AnalyzerJob job=entry.getKey();AnalyzerType elementType=entry.getValue();BeanConfiguration configuration=job.getConfiguration();Set<ConfiguredPropertyDescriptor> configuredProperties=job.getDescriptor().getConfiguredPropertiesForInput();elementType.getInput().addAll(createInputConfiguration(configuration,configuredProperties,columnMappings,stringConverter));configuredProperties=job.getDescriptor().getConfiguredProperties();elementType.setProperties(createPropertyConfiguration(configuration,configuredProperties,stringConverter));elementType.setMetadataProperties(createMetadataProperties(job.getMetadataProperties()));}}"
134	"@Override public boolean apply(T t){return !predicate.apply(t);}"
135	"@Override public void onClick(View v){int id=v.getId();switch (id){case R.id.iv_add_dc :if(tv_autoCompleteCity.getText().toString().equals("""")){Toast.makeText(getActivity(),""Please select city first"",Toast.LENGTH_LONG).show();}else {if(!tv_autoCompleteCity.getText().toString().equals(citiesDto.getCityName())){Toast.makeText(getActivity(),""Please select valid city"",Toast.LENGTH_LONG).show();}else {if(tv_autoCompleteRoute.getText().toString().equals("""")){Toast.makeText(getActivity(),""Please select route first"",Toast.LENGTH_LONG).show();}else {if(!tv_autoCompleteRoute.getText().toString().equals(routesDto.getRouteName())){Toast.makeText(getActivity(),""Please select valid route"",Toast.LENGTH_LONG).show();}else {MainActivity.getMainScreenActivity().replaceFragmentWithBackStack(getActivity(),new DcDetailsFragment(),TAG,MainActivity.tabHome);}}}}break;case R.id.iv_add_city :createAddCityDia(getActivity(),true);break;case R.id.iv_add_route :if(tv_autoCompleteCity.getText().toString().equals("""")){Toast.makeText(getActivity(),""Please select city first"",Toast.LENGTH_LONG).show();}else {if(tv_autoCompleteCity.getText().toString().equals(citiesDto.getCityName())){createAddCityDia(getActivity(),false);}else {Toast.makeText(getActivity(),""Please select valid city"",Toast.LENGTH_LONG).show();}}break;default :break;}}"
136	"public boolean prevent(Battle b,ActivePokemon caster,ActivePokemon victim,Stat stat){return stat==Stat.ACCURACY;}"
137	"@Override public NavigableMap<K,V> descendingMap(){return asMap(set.descendingSet(),function);}"
138	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
139	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
140	"public int compare(Player p1,Player p2){return p2.getVoteCount()-p1.getVoteCount();}"
141	"public void outAFieldMember(AFieldMember node){int modifier=0;Type type=null;String name=null;name=(String)mProductions.removeLast();type=(Type)mProductions.removeLast();modifier=processModifiers(node.getModifier());SootField f=new SootField(name,type,modifier);mSootClass.addField(f);}"
142	"@Override public Token[] getToken(){Token[] allToken=null;for(StructuralElement structuralElement : elements){allToken=new Unifier().unify(allToken,structuralElement.getToken());}return allToken;}"
143	"public boolean sendData(byte[] buffer){Output.net(""Buffer length: ""+buffer.length);Output.net(""Sending buffer...\t\t\t"");if(!connected){Output.netfail();Output.netln(""Not connected to host."");return false;}try{out.writeInt(buffer.length);out.write(buffer);out.flush();Output.netok();}catch(IOException e){Output.netfail();Output.netln(""Broken Connection"");e.printStackTrace();connected=false;return false;}return true;}"
144	"@Override public EmbeddedImage subSequence(EmbeddedImage seg,int start){return (seg==emptySeg)?emptySeg:new EmbeddedImage(seg.text.substring(start),seg.style);}"
145	"@Override public ComputeImageRestRep apply(ComputeImage ci){return ComputeMapper.map(ci);}"
146	"@Override public void onClick(View view){Log.d(TAG,""can use button: ""+canUseButton);if(canUseButton){addImagesToBothSides(R.drawable.white_circle);}}"
147	"@Override public void setHealthScale(double v) throws IllegalArgumentException{getBase().setHealthScale(v);}"
148	"private ArrayList<DiscussionsSearchResult> populateDiscussionsSearchResult(DiscussionsSearchResultWrapper parsedResults){ArrayList<DiscussionsSearchResult> resultSet=new ArrayList<DiscussionsSearchResult>();pageCount=Integer.parseInt(parsedResults.pages);for(int i=0;i<(parsedResults.discussions.length)-1;i++){DiscussionDetails details=new DiscussionDetails(parsedResults.discussions[i].id,StringEscapeUtils.unescapeXml(parsedResults.discussions[i].name),parsedResults.discussions[i].url,parsedResults.discussions[i].date,parsedResults.discussions[i].comments);User user=new User(Integer.toString(parsedResults.discussions[i].member.id),StringEscapeUtils.unescapeXml(parsedResults.discussions[i].member.name),parsedResults.discussions[i].member.url);DiscussionsSearchResult currentResult=new DiscussionsSearchResult(details,user);resultSet.add(currentResult);}return resultSet;}"
149	"@Override public boolean onLongClick(View view){deactivatePalettes();finalImage.setPickColorModeIM(true);activePalette=BLEED_EWE;bleedEweButtonBg.setSelected(true);return true;}"
150	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.login_signin);mEmailField=(EditText)findViewById(R.id.editTextUser);mPasswordField=(EditText)findViewById(R.id.editTextPass);loginbtn=(Button)findViewById(R.id.btnLogin);loginbtn.setOnClickListener(this);Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);getSupportActionBar().setHomeButtonEnabled(true);getSupportActionBar().setTitle(""Sign in"");pd=new ProgressDialog(this);mAuth=FirebaseAuth.getInstance();}"
151	"@Override public void onAnimationEnd(Animation animation){Window w=fragmentContext.getActivity().getWindow();w.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN|WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);w.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE|View.SYSTEM_UI_FLAG_FULLSCREEN|View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY|View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);}"
152	"public WritableWorkbook createWorkbook(File spreadSheetFile) throws IOException,BiffException{return Workbook.createWorkbook(spreadSheetFile);}"
153	"@RequestMapping(value=""/{clientid}/enrollments/{enrollmentid}/sexualorientations"",method=RequestMethod.POST) @APIMapping(value=""CLIENT_API_CREATE_SEXUALORIENTATION"",checkTrustedApp=true,checkSessionToken=true) public Sexualorientation createSexualorientation(UUID clientId,UUID enrollmentId,Sexualorientation sexualorientation,HttpServletRequest request) throws Exception{Session session=sessionHelper.getSession(request);serviceFactory.getClientService().getClientById(clientId);return serviceFactory.getSexualorientationService().createSexualorientation(sexualorientation,enrollmentId,session.getAccount().getUsername());}"
154	"@Override public void handle(MouseEvent event){if(event.getButton()==MouseButton.SECONDARY){HorizontalPosition coords=imageView.getCoordinateFromImagePosition(event.getX(),event.getY());GridCoordinates2D imageCoords=maskGrid.findIndexOf(coords);controller.setManualMask(imageCoords,(int)manualSetRadius.getValue(),manualMaskValue);}else {if(event.getButton()==MouseButton.MIDDLE){HorizontalPosition coords=imageView.getCoordinateFromImagePosition(event.getX(),event.getY());controller.setDataSelectedPosition(coords);}}}"
155	"@Override public Optional<CommandMapping> register(Object plugin,CommandCallable callable,List<String> aliases,Function<List<String>,List<String>> callback){checkNotNull(plugin);Optional<PluginContainer> containerOptional=this.pluginManager.fromInstance(plugin);if(!containerOptional.isPresent()){throw new IllegalArgumentException(""The provided plugin object does not have an associated plugin container ""+""(in other words, is 'plugin' actually your plugin object?"");}PluginContainer container=containerOptional.get();synchronized(this.lock){List<String> aliasesWithPrefix=new ArrayList<String>(aliases.size()*2);for(String alias : aliases){aliasesWithPrefix.add(alias);aliasesWithPrefix.add(container.getId()+"":""+alias);}Optional<CommandMapping> mapping=this.dispatcher.register(callable,aliasesWithPrefix,callback);if(mapping.isPresent()){this.owners.put(container,mapping.get());}return mapping;}}"
156	"public static List<List<Integer>> iteDiceRoll(int k){return null;}"
157	"public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
158	"public void onClick(DialogInterface dialog,int which){}"
159	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){clickSound();avatar_position=parent.getSelectedItemPosition();}"
160	"@Override public void actionPerformed(ActionEvent e){optionPane.setValue(JOptionPane.OK_OPTION);}"
161	"@Override public boolean messageThread(){return true;}"
162	"final boolean isTimeouted(){return lastTouched.getPeriodToNow().isGreaterThen(getTimeout());}"
163	"public void removeVolumes(List<URI> volumes){if(_volumes!=null){for(URI uri : volumes){_volumes.remove(uri.toString());}}}"
164	"public OutputNetwork(){Field[] allFields=OutputNetwork.class.getDeclaredFields();this.kindOfClassifier=0;try{this.kindOfClassifier=ReadConfig.Configurations.getValueClassifier();}catch(Exception e){e.printStackTrace();}if(this.kindOfClassifier==1){if(allFields.length!=outputSize+1){throw new Error(""Number of fields and variable expressing that do not correspond."");}}else {if(allFields.length!=outputSize+2){throw new Error(""Number of fields and variable expressing that do not correspond."");}}}"
165	"private synchronized void setSpeed(int s){if(s<0){speed=(byte)(-s);speed|=(1<<7);}else {speed=(byte)s;}}"
166	"@Override public void onClick(View view){Log.d(TAG,""save aliment"");saveAliment(view);}"
167	"@Override public ErrorCode getError(KvmResponseWrapper wrapper){NfsPrimaryStorageAgentResponse rsp=wrapper.getResponse(NfsPrimaryStorageAgentResponse.class);return rsp.isSuccess()?null:operr(rsp.getError());}"
168	"public void setConnectionStatus(String deviceName){if(deviceName!=null){connectionStatus.setText(""Device Connected: ""+deviceName);devicesHeader.setVisibility(View.INVISIBLE);listAdapter.clear();listAdapter.notifyDataSetChanged();}else {connectionStatus.setText(""Device Disconnected"");devicesHeader.setVisibility(View.VISIBLE);}}"
169	"private String getDataFromHbase(String tableName,String familyName,String searchWord) throws IOException{Result r=HBaseDAO.get(tableName,searchWord);Cell c=r.getColumnLatestCell(familyName.getBytes(),"""".getBytes());return new String(CellUtil.cloneValue(c));}"
170	"@PUT public Response generateSshKeys(){Response response=null;Logger.getLogger(KaramelServiceApplication.class.getName()).log(Level.INFO,"" Received request to generate ssh keys."");try{SshKeyPair sshKeypair=karamelApiHandler.generateSshKeysAndUpdateConf();karamelApiHandler.registerSshKeys(sshKeypair);response=Response.status(Response.Status.OK).entity(sshKeypair).build();}catch(KaramelException ex){ex.printStackTrace();response=Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new StatusResponseJSON(StatusResponseJSON.ERROR_STRING,ex.getMessage())).build();}return response;}"
171	"public void onClick(View v){Intent myIntent=new Intent(v.getContext(),LineupActivity.class);myIntent.putExtra(""team_id"",""""+our_manager_id);startActivityForResult(myIntent,0);}"
172	"@Override public boolean isLocked(){return locked;}"
173	"void start(int initialVelocity){if(Math.abs(initialVelocity)>mDecacheThreshold){clearScrollingCache();}int initialY=initialVelocity<0?Integer.MAX_VALUE:0;mLastFlingY=initialY;mScroller.setInterpolator(null);mScroller.fling(0,initialY,0,initialVelocity,0,Integer.MAX_VALUE,0,Integer.MAX_VALUE);mTouchMode=TOUCH_MODE_FLING;postOnAnimation(this);if(PROFILE_FLINGING){if(!mFlingProfilingStarted){Debug.startMethodTracing(""AbsListViewFling"");mFlingProfilingStarted=true;}}if(mFlingStrictSpan==null){mFlingStrictSpan=StrictMode.enterCriticalSpan(""AbsListView-fling"");}}"
174	"public boolean hasNext(){return currentNode!=null;}"
175	"@Override public void addCategory(String name) throws ServiceException{CategoryDao categoryDao=new CategoryDaoImpl();try{categoryDao.addCategory(name);}catch(DAOException e){throw new ServiceException(e);}}"
176	"public boolean isEmpty(){return timestamps.isEmpty();}"
177	"@Override public void onClick(View v){OnClickEffect.setButton(buttonEnter);ParallelLocation.eventID=textViewEventID.getText().toString();reference=database.getReference();fragmentHubEnterIDPresenter.checkEventID(ParallelLocation.eventID,reference);}"
178	"@Override public boolean canInteractWith(EntityPlayer par1EntityPlayer){return true;}"
179	"public int getIndent(){return indent;}"
180	"public String getSoTienNoFormated(){NumberFormat formatter=new DecimalFormat(""##,###,###"");return formatter.format(this.SoTienNo);}"
181	"@Override void compile(){regs[reg]=mem.readByte(rd16reg(dreg));}"
182	"@Override public void onClick(DialogInterface dialog,int which){}"
183	"@Override public boolean matches(Instance i1,Instance i2,Attribute att){return true;}"
184	"public QMUIRoundLinearLayout(Context context,AttributeSet attrs,int defStyleAttr){super(context,attrs,defStyleAttr);init(context,attrs);}"
185	"final void advance(){if(next==null){throw new NoSuchElementException();}lastReturned=next;while((next=next.next())!=null){PersistentObject x=next.value();if(x!=null&&!x.is(next)){ @SuppressWarnings(""unchecked"") V vv=(V)x;nextValue=vv;break;}}}"
186	"public String generateBunkStats(int minimumAttendance,boolean extendedStats){StringBuilder bunkStats=new StringBuilder();int attendance=(int)this.attendance;int classes=this.theoryClasses+this.labClasses;int classesPresent=this.theoryClassesPresent+this.labClassesPresent;int classesAbsent=classes-classesPresent;if(attendance<=75){bunkStats.append(""DO NOT BUNK ANY MORE CLASSES\n"");}else {for(int a=75;a<attendance;a+=5){int daysBunk=(int)((100*classesPresent/(double)a)-(double)classes);if(daysBunk>0){bunkStats.append(new Formatter().format(""Bunk %d%s %s for %d%% attendance\n"",daysBunk,classesAbsent==0?"""":"" more"",daysBunk==1?""class"":""classes"",a));}}}int nextAttendance=(attendance+4)/5*5;if(nextAttendance==attendance){nextAttendance=attendance+5;}if(nextAttendance<75){nextAttendance=75;}for(int a=nextAttendance;a<=95;a+=5){int daysNeed=(int)((a*classes-100*classesPresent)/(double)(100-a));if(daysNeed>0&&(daysNeed+classes<=50)){bunkStats.append(new Formatter().format(""Need %d more %s for %d%% attendance\n"",daysNeed,daysNeed==1?""class"":""classes"",a));}}if(bunkStats.length()!=0){bunkStats.setLength(bunkStats.length()-1);}return bunkStats.toString();}"
187	"public void fillSitePropEditText(Site site){lastSite=site;for(int i=0;i<siteGroups.size();i++){if(siteGroups.get(i).gid==site.gid&&i+1<siteGroups.size()){inputGroup.setSelection(i+1);break;}}inputTitle.setText(site.title);inputIndexUrl.setText(site.indexUrl);inputGalleryUrl.setText(site.galleryUrl);inputSearchUrl.setText(site.searchUrl);inputLoginUrl.setText(site.loginUrl);inputCookie.setText(site.cookie);inputHeader.setText(site.header);inputFlag.setText(site.flag);checkBoxDisableHProxy.post(() -> checkBoxDisableHProxy.setChecked(site.disableHProxy));checkBoxWaterfallAsList.post(() -> checkBoxWaterfallAsList.setChecked(site.hasFlag(Site.FLAG_WATERFALL_AS_LIST)));checkBoxWaterfallAsGrid.post(() -> checkBoxWaterfallAsGrid.setChecked(site.hasFlag(Site.FLAG_WATERFALL_AS_GRID)));if(site.categories!=null){categoryInputAdapter.getDataProvider().addAll(site.categories);categoryInputAdapter.notifyDataSetChanged();}if(site.indexRule!=null){if(site.indexRule.item!=null){inputIndexRuleItemSelector.setText(joinSelector(site.indexRule.item));inputIndexRuleItemRegex.setText(site.indexRule.item.regex);inputIndexRuleItemReplacement.setText(site.indexRule.item.replacement);}if(site.indexRule.idCode!=null){inputIndexRuleIdCodeSelector.setText(joinSelector(site.indexRule.idCode));inputIndexRuleIdCodeRegex.setText(site.indexRule.idCode.regex);inputIndexRuleIdCodeReplacement.setText(site.indexRule.idCode.replacement);}if(site.indexRule.title!=null){inputIndexRuleTitleSelector.setText(joinSelector(site.indexRule.title));inputIndexRuleTitleRegex.setText(site.indexRule.title.regex);inputIndexRuleTitleReplacement.setText(site.indexRule.title.replacement);}if(site.indexRule.uploader!=null){inputIndexRuleUploaderSelector.setText(joinSelector(site.indexRule.uploader));inputIndexRuleUploaderRegex.setText(site.indexRule.uploader.regex);inputIndexRuleUploaderReplacement.setText(site.indexRule.uploader.replacement);}if(site.indexRule.cover!=null){inputIndexRuleCoverSelector.setText(joinSelector(site.indexRule.cover));inputIndexRuleCoverRegex.setText(site.indexRule.cover.regex);inputIndexRuleCoverReplacement.setText(site.indexRule.cover.replacement);}if(site.indexRule.category!=null){inputIndexRuleCategorySelector.setText(joinSelector(site.indexRule.category));inputIndexRuleCategoryRegex.setText(site.indexRule.category.regex);inputIndexRuleCategoryReplacement.setText(site.indexRule.category.replacement);}if(site.indexRule.datetime!=null){inputIndexRuleDatetimeSelector.setText(joinSelector(site.indexRule.datetime));inputIndexRuleDatetimeRegex.setText(site.indexRule.datetime.regex);inputIndexRuleDatetimeReplacement.setText(site.indexRule.datetime.replacement);}if(site.indexRule.rating!=null){inputIndexRuleRatingSelector.setText(joinSelector(site.indexRule.rating));inputIndexRuleRatingRegex.setText(site.indexRule.rating.regex);inputIndexRuleRatingReplacement.setText(site.indexRule.rating.replacement);}if(site.indexRule.tags!=null){inputIndexRuleTagsSelector.setText(joinSelector(site.indexRule.tags));inputIndexRuleTagsRegex.setText(site.indexRule.tags.regex);inputIndexRuleTagsReplacement.setText(site.indexRule.tags.replacement);}}if(site.searchRule!=null){if(site.searchRule.item!=null){inputSearchRuleItemSelector.setText(joinSelector(site.searchRule.item));inputSearchRuleItemRegex.setText(site.searchRule.item.regex);inputSearchRuleItemReplacement.setText(site.searchRule.item.replacement);}if(site.searchRule.idCode!=null){inputSearchRuleIdCodeSelector.setText(joinSelector(site.searchRule.idCode));inputSearchRuleIdCodeRegex.setText(site.searchRule.idCode.regex);inputSearchRuleIdCodeReplacement.setText(site.searchRule.idCode.replacement);}if(site.searchRule.title!=null){inputSearchRuleTitleSelector.setText(joinSelector(site.searchRule.title));inputSearchRuleTitleRegex.setText(site.searchRule.title.regex);inputSearchRuleTitleReplacement.setText(site.searchRule.title.replacement);}if(site.searchRule.uploader!=null){inputSearchRuleUploaderSelector.setText(joinSelector(site.searchRule.uploader));inputSearchRuleUploaderRegex.setText(site.searchRule.uploader.regex);inputSearchRuleUploaderReplacement.setText(site.searchRule.uploader.replacement);}if(site.searchRule.cover!=null){inputSearchRuleCoverSelector.setText(joinSelector(site.searchRule.cover));inputSearchRuleCoverRegex.setText(site.searchRule.cover.regex);inputSearchRuleCoverReplacement.setText(site.searchRule.cover.replacement);}if(site.searchRule.category!=null){inputSearchRuleCategorySelector.setText(joinSelector(site.searchRule.category));inputSearchRuleCategoryRegex.setText(site.searchRule.category.regex);inputSearchRuleCategoryReplacement.setText(site.searchRule.category.replacement);}if(site.searchRule.datetime!=null){inputSearchRuleDatetimeSelector.setText(joinSelector(site.searchRule.datetime));inputSearchRuleDatetimeRegex.setText(site.searchRule.datetime.regex);inputSearchRuleDatetimeReplacement.setText(site.searchRule.datetime.replacement);}if(site.searchRule.rating!=null){inputSearchRuleRatingSelector.setText(joinSelector(site.searchRule.rating));inputSearchRuleRatingRegex.setText(site.searchRule.rating.regex);inputSearchRuleRatingReplacement.setText(site.searchRule.rating.replacement);}if(site.searchRule.tags!=null){inputSearchRuleTagsSelector.setText(joinSelector(site.searchRule.tags));inputSearchRuleTagsRegex.setText(site.searchRule.tags.regex);inputSearchRuleTagsReplacement.setText(site.searchRule.tags.replacement);}}if(site.galleryRule!=null){if(site.galleryRule.item!=null){inputGalleryRuleItemSelector.setText(joinSelector(site.galleryRule.item));inputGalleryRuleItemRegex.setText(site.galleryRule.item.regex);inputGalleryRuleItemReplacement.setText(site.galleryRule.item.replacement);}if(site.galleryRule.title!=null){inputGalleryRuleTitleSelector.setText(joinSelector(site.galleryRule.title));inputGalleryRuleTitleRegex.setText(site.galleryRule.title.regex);inputGalleryRuleTitleReplacement.setText(site.galleryRule.title.replacement);}if(site.galleryRule.uploader!=null){inputGalleryRuleUploaderSelector.setText(joinSelector(site.galleryRule.uploader));inputGalleryRuleUploaderRegex.setText(site.galleryRule.uploader.regex);inputGalleryRuleUploaderReplacement.setText(site.galleryRule.uploader.replacement);}if(site.galleryRule.cover!=null){inputGalleryRuleCoverSelector.setText(joinSelector(site.galleryRule.cover));inputGalleryRuleCoverRegex.setText(site.galleryRule.cover.regex);inputGalleryRuleCoverReplacement.setText(site.galleryRule.cover.replacement);}if(site.galleryRule.category!=null){inputGalleryRuleCategorySelector.setText(joinSelector(site.galleryRule.category));inputGalleryRuleCategoryRegex.setText(site.galleryRule.category.regex);inputGalleryRuleCategoryReplacement.setText(site.galleryRule.category.replacement);}if(site.galleryRule.datetime!=null){inputGalleryRuleDatetimeSelector.setText(joinSelector(site.galleryRule.datetime));inputGalleryRuleDatetimeRegex.setText(site.galleryRule.datetime.regex);inputGalleryRuleDatetimeReplacement.setText(site.galleryRule.datetime.replacement);}if(site.galleryRule.rating!=null){inputGalleryRuleRatingSelector.setText(joinSelector(site.galleryRule.rating));inputGalleryRuleRatingRegex.setText(site.galleryRule.rating.regex);inputGalleryRuleRatingReplacement.setText(site.galleryRule.rating.replacement);}if(site.galleryRule.description!=null){inputGalleryRuleDescriptionSelector.setText(joinSelector(site.galleryRule.description));inputGalleryRuleDescriptionRegex.setText(site.galleryRule.description.regex);inputGalleryRuleDescriptionReplacement.setText(site.galleryRule.description.replacement);}if(site.galleryRule.tags!=null){inputGalleryRuleTagsSelector.setText(joinSelector(site.galleryRule.tags));inputGalleryRuleTagsRegex.setText(site.galleryRule.tags.regex);inputGalleryRuleTagsReplacement.setText(site.galleryRule.tags.replacement);}if(site.galleryRule.pictureRule!=null){if(site.galleryRule.pictureRule.item!=null){inputGalleryRulePictureItemSelector.setText(joinSelector(site.galleryRule.pictureRule.item));inputGalleryRulePictureItemRegex.setText(site.galleryRule.pictureRule.item.regex);inputGalleryRulePictureItemReplacement.setText(site.galleryRule.pictureRule.item.replacement);}if(site.galleryRule.pictureRule.thumbnail!=null){inputGalleryRulePictureThumbnailSelector.setText(joinSelector(site.galleryRule.pictureRule.thumbnail));inputGalleryRulePictureThumbnailRegex.setText(site.galleryRule.pictureRule.thumbnail.regex);inputGalleryRulePictureThumbnailReplacement.setText(site.galleryRule.pictureRule.thumbnail.replacement);}if(site.galleryRule.pictureRule.url!=null){inputGalleryRulePictureUrlSelector.setText(joinSelector(site.galleryRule.pictureRule.url));inputGalleryRulePictureUrlRegex.setText(site.galleryRule.pictureRule.url.regex);inputGalleryRulePictureUrlReplacement.setText(site.galleryRule.pictureRule.url.replacement);}if(site.galleryRule.pictureRule.highRes!=null){inputGalleryRulePictureHighResSelector.setText(joinSelector(site.galleryRule.pictureRule.highRes));inputGalleryRulePictureHighResRegex.setText(site.galleryRule.pictureRule.highRes.regex);inputGalleryRulePictureHighResReplacement.setText(site.galleryRule.pictureRule.highRes.replacement);}}else {if(site.galleryRule.pictureThumbnail!=null){inputGalleryRulePictureThumbnailSelector.setText(joinSelector(site.galleryRule.pictureThumbnail));inputGalleryRulePictureThumbnailRegex.setText(site.galleryRule.pictureThumbnail.regex);inputGalleryRulePictureThumbnailReplacement.setText(site.galleryRule.pictureThumbnail.replacement);}if(site.galleryRule.pictureUrl!=null){inputGalleryRulePictureUrlSelector.setText(joinSelector(site.galleryRule.pictureUrl));inputGalleryRulePictureUrlRegex.setText(site.galleryRule.pictureUrl.regex);inputGalleryRulePictureUrlReplacement.setText(site.galleryRule.pictureUrl.replacement);}if(site.galleryRule.pictureHighRes!=null){inputGalleryRulePictureHighResSelector.setText(joinSelector(site.galleryRule.pictureHighRes));inputGalleryRulePictureHighResRegex.setText(site.galleryRule.pictureHighRes.regex);inputGalleryRulePictureHighResReplacement.setText(site.galleryRule.pictureHighRes.replacement);}}if(site.galleryRule.commentRule!=null){if(site.galleryRule.commentRule.item!=null){inputGalleryRuleCommentItemSelector.setText(joinSelector(site.galleryRule.commentRule.item));inputGalleryRuleCommentItemRegex.setText(site.galleryRule.commentRule.item.regex);inputGalleryRuleCommentItemReplacement.setText(site.galleryRule.commentRule.item.replacement);}if(site.galleryRule.commentRule.avatar!=null){inputGalleryRuleCommentAvatarSelector.setText(joinSelector(site.galleryRule.commentRule.avatar));inputGalleryRuleCommentAvatarRegex.setText(site.galleryRule.commentRule.avatar.regex);inputGalleryRuleCommentAvatarReplacement.setText(site.galleryRule.commentRule.avatar.replacement);}if(site.galleryRule.commentRule.author!=null){inputGalleryRuleCommentAuthorSelector.setText(joinSelector(site.galleryRule.commentRule.author));inputGalleryRuleCommentAuthorRegex.setText(site.galleryRule.commentRule.author.regex);inputGalleryRuleCommentAuthorReplacement.setText(site.galleryRule.commentRule.author.replacement);}if(site.galleryRule.commentRule.datetime!=null){inputGalleryRuleCommentDatetimeSelector.setText(joinSelector(site.galleryRule.commentRule.datetime));inputGalleryRuleCommentDatetimeRegex.setText(site.galleryRule.commentRule.datetime.regex);inputGalleryRuleCommentDatetimeReplacement.setText(site.galleryRule.commentRule.datetime.replacement);}if(site.galleryRule.commentRule.content!=null){inputGalleryRuleCommentContentSelector.setText(joinSelector(site.galleryRule.commentRule.content));inputGalleryRuleCommentContentRegex.setText(site.galleryRule.commentRule.content.regex);inputGalleryRuleCommentContentReplacement.setText(site.galleryRule.commentRule.content.replacement);}}else {if(site.galleryRule.commentItem!=null){inputGalleryRuleCommentItemSelector.setText(joinSelector(site.galleryRule.commentItem));inputGalleryRuleCommentItemRegex.setText(site.galleryRule.commentItem.regex);inputGalleryRuleCommentItemReplacement.setText(site.galleryRule.commentItem.replacement);}if(site.galleryRule.commentAvatar!=null){inputGalleryRuleCommentAvatarSelector.setText(joinSelector(site.galleryRule.commentAvatar));inputGalleryRuleCommentAvatarRegex.setText(site.galleryRule.commentAvatar.regex);inputGalleryRuleCommentAvatarReplacement.setText(site.galleryRule.commentAvatar.replacement);}if(site.galleryRule.commentAuthor!=null){inputGalleryRuleCommentAuthorSelector.setText(joinSelector(site.galleryRule.commentAuthor));inputGalleryRuleCommentAuthorRegex.setText(site.galleryRule.commentAuthor.regex);inputGalleryRuleCommentAuthorReplacement.setText(site.galleryRule.commentAuthor.replacement);}if(site.galleryRule.commentDatetime!=null){inputGalleryRuleCommentDatetimeSelector.setText(joinSelector(site.galleryRule.commentDatetime));inputGalleryRuleCommentDatetimeRegex.setText(site.galleryRule.commentDatetime.regex);inputGalleryRuleCommentDatetimeReplacement.setText(site.galleryRule.commentDatetime.replacement);}if(site.galleryRule.commentContent!=null){inputGalleryRuleCommentContentSelector.setText(joinSelector(site.galleryRule.commentContent));inputGalleryRuleCommentContentRegex.setText(site.galleryRule.commentContent.regex);inputGalleryRuleCommentContentReplacement.setText(site.galleryRule.commentContent.replacement);}}if(site.extraRule!=null){if(site.extraRule.item!=null){inputExtraRuleItemSelector.setText(joinSelector(site.extraRule.item));inputExtraRuleItemRegex.setText(site.extraRule.item.regex);inputExtraRuleItemReplacement.setText(site.extraRule.item.replacement);}if(site.extraRule.idCode!=null){inputExtraRuleIdCodeSelector.setText(joinSelector(site.extraRule.idCode));inputExtraRuleIdCodeRegex.setText(site.extraRule.idCode.regex);inputExtraRuleIdCodeReplacement.setText(site.extraRule.idCode.replacement);}if(site.extraRule.title!=null){inputExtraRuleTitleSelector.setText(joinSelector(site.extraRule.title));inputExtraRuleTitleRegex.setText(site.extraRule.title.regex);inputExtraRuleTitleReplacement.setText(site.extraRule.title.replacement);}if(site.extraRule.uploader!=null){inputExtraRuleUploaderSelector.setText(joinSelector(site.extraRule.uploader));inputExtraRuleUploaderRegex.setText(site.extraRule.uploader.regex);inputExtraRuleUploaderReplacement.setText(site.extraRule.uploader.replacement);}if(site.extraRule.cover!=null){inputExtraRuleCoverSelector.setText(joinSelector(site.extraRule.cover));inputExtraRuleCoverRegex.setText(site.extraRule.cover.regex);inputExtraRuleCoverReplacement.setText(site.extraRule.cover.replacement);}if(site.extraRule.category!=null){inputExtraRuleCategorySelector.setText(joinSelector(site.extraRule.category));inputExtraRuleCategoryRegex.setText(site.extraRule.category.regex);inputExtraRuleCategoryReplacement.setText(site.extraRule.category.replacement);}if(site.extraRule.datetime!=null){inputExtraRuleDatetimeSelector.setText(joinSelector(site.extraRule.datetime));inputExtraRuleDatetimeRegex.setText(site.extraRule.datetime.regex);inputExtraRuleDatetimeReplacement.setText(site.extraRule.datetime.replacement);}if(site.extraRule.rating!=null){inputExtraRuleRatingSelector.setText(joinSelector(site.extraRule.rating));inputExtraRuleRatingRegex.setText(site.extraRule.rating.regex);inputExtraRuleRatingReplacement.setText(site.extraRule.rating.replacement);}if(site.extraRule.description!=null){inputExtraRuleDescriptionSelector.setText(joinSelector(site.extraRule.description));inputExtraRuleDescriptionRegex.setText(site.extraRule.description.regex);inputExtraRuleDescriptionReplacement.setText(site.extraRule.description.replacement);}if(site.extraRule.tags!=null){inputExtraRuleTagsSelector.setText(joinSelector(site.extraRule.tags));inputExtraRuleTagsRegex.setText(site.extraRule.tags.regex);inputExtraRuleTagsReplacement.setText(site.extraRule.tags.replacement);}if(site.extraRule.pictureRule!=null){if(site.extraRule.pictureRule.item!=null){inputExtraRulePictureItemSelector.setText(joinSelector(site.extraRule.pictureRule.item));inputExtraRulePictureItemRegex.setText(site.extraRule.pictureRule.item.regex);inputExtraRulePictureItemReplacement.setText(site.extraRule.pictureRule.item.replacement);}if(site.extraRule.pictureRule.thumbnail!=null){inputExtraRulePictureThumbnailSelector.setText(joinSelector(site.extraRule.pictureRule.thumbnail));inputExtraRulePictureThumbnailRegex.setText(site.extraRule.pictureRule.thumbnail.regex);inputExtraRulePictureThumbnailReplacement.setText(site.extraRule.pictureRule.thumbnail.replacement);}if(site.extraRule.pictureRule.url!=null){inputExtraRulePictureUrlSelector.setText(joinSelector(site.extraRule.pictureRule.url));inputExtraRulePictureUrlRegex.setText(site.extraRule.pictureRule.url.regex);inputExtraRulePictureUrlReplacement.setText(site.extraRule.pictureRule.url.replacement);}if(site.extraRule.pictureRule.highRes!=null){inputExtraRulePictureHighResSelector.setText(joinSelector(site.extraRule.pictureRule.highRes));inputExtraRulePictureHighResRegex.setText(site.extraRule.pictureRule.highRes.regex);inputExtraRulePictureHighResReplacement.setText(site.extraRule.pictureRule.highRes.replacement);}}else {if(site.extraRule.pictureThumbnail!=null){inputExtraRulePictureThumbnailSelector.setText(joinSelector(site.extraRule.pictureThumbnail));inputExtraRulePictureThumbnailRegex.setText(site.extraRule.pictureThumbnail.regex);inputExtraRulePictureThumbnailReplacement.setText(site.extraRule.pictureThumbnail.replacement);}if(site.extraRule.pictureUrl!=null){inputExtraRulePictureUrlSelector.setText(joinSelector(site.extraRule.pictureUrl));inputExtraRulePictureUrlRegex.setText(site.extraRule.pictureUrl.regex);inputExtraRulePictureUrlReplacement.setText(site.extraRule.pictureUrl.replacement);}if(site.extraRule.pictureHighRes!=null){inputExtraRulePictureHighResSelector.setText(joinSelector(site.extraRule.pictureHighRes));inputExtraRulePictureHighResRegex.setText(site.extraRule.pictureHighRes.regex);inputExtraRulePictureHighResReplacement.setText(site.extraRule.pictureHighRes.replacement);}}if(site.extraRule.commentRule!=null){if(site.extraRule.commentRule.item!=null){inputExtraRuleCommentItemSelector.setText(joinSelector(site.extraRule.commentRule.item));inputExtraRuleCommentItemRegex.setText(site.extraRule.commentRule.item.regex);inputExtraRuleCommentItemReplacement.setText(site.extraRule.commentRule.item.replacement);}if(site.extraRule.commentRule.avatar!=null){inputExtraRuleCommentAvatarSelector.setText(joinSelector(site.extraRule.commentRule.avatar));inputExtraRuleCommentAvatarRegex.setText(site.extraRule.commentRule.avatar.regex);inputExtraRuleCommentAvatarReplacement.setText(site.extraRule.commentRule.avatar.replacement);}if(site.extraRule.commentRule.author!=null){inputExtraRuleCommentAuthorSelector.setText(joinSelector(site.extraRule.commentRule.author));inputExtraRuleCommentAuthorRegex.setText(site.extraRule.commentRule.author.regex);inputExtraRuleCommentAuthorReplacement.setText(site.extraRule.commentRule.author.replacement);}if(site.extraRule.commentRule.datetime!=null){inputExtraRuleCommentDatetimeSelector.setText(joinSelector(site.extraRule.commentRule.datetime));inputExtraRuleCommentDatetimeRegex.setText(site.extraRule.commentRule.datetime.regex);inputExtraRuleCommentDatetimeReplacement.setText(site.extraRule.commentRule.datetime.replacement);}if(site.extraRule.commentRule.content!=null){inputExtraRuleCommentContentSelector.setText(joinSelector(site.extraRule.commentRule.content));inputExtraRuleCommentContentRegex.setText(site.extraRule.commentRule.content.regex);inputExtraRuleCommentContentReplacement.setText(site.extraRule.commentRule.content.replacement);}}else {if(site.extraRule.commentItem!=null){inputExtraRuleCommentItemSelector.setText(joinSelector(site.extraRule.commentItem));inputExtraRuleCommentItemRegex.setText(site.extraRule.commentItem.regex);inputExtraRuleCommentItemReplacement.setText(site.extraRule.commentItem.replacement);}if(site.extraRule.commentAvatar!=null){inputExtraRuleCommentAvatarSelector.setText(joinSelector(site.extraRule.commentAvatar));inputExtraRuleCommentAvatarRegex.setText(site.extraRule.commentAvatar.regex);inputExtraRuleCommentAvatarReplacement.setText(site.extraRule.commentAvatar.replacement);}if(site.extraRule.commentAuthor!=null){inputExtraRuleCommentAuthorSelector.setText(joinSelector(site.extraRule.commentAuthor));inputExtraRuleCommentAuthorRegex.setText(site.extraRule.commentAuthor.regex);inputExtraRuleCommentAuthorReplacement.setText(site.extraRule.commentAuthor.replacement);}if(site.extraRule.commentDatetime!=null){inputExtraRuleCommentDatetimeSelector.setText(joinSelector(site.extraRule.commentDatetime));inputExtraRuleCommentDatetimeRegex.setText(site.extraRule.commentDatetime.regex);inputExtraRuleCommentDatetimeReplacement.setText(site.extraRule.commentDatetime.replacement);}if(site.extraRule.commentContent!=null){inputExtraRuleCommentContentSelector.setText(joinSelector(site.extraRule.commentContent));inputExtraRuleCommentContentRegex.setText(site.extraRule.commentContent.regex);inputExtraRuleCommentContentReplacement.setText(site.extraRule.commentContent.replacement);}}}}}"
188	"private List<CQIE> rewriteCC(QueryConnectedComponent cc,Function headAtom,DatalogProgram edgeDP){List<CQIE> outputRules=new LinkedList<>();String headURI=headAtom.getFunctionSymbol().getName();TreeWitnessSet tws=TreeWitnessSet.getTreeWitnesses(cc,reasoner,generators);if(cc.hasNoFreeTerms()){for(Function a : getAtomsForGenerators(tws.getGeneratorsOfDetachedCC(),getFreshVariable())){outputRules.add(fac.getCQIE(headAtom,a));}}for(TreeWitness tw : tws.getTWs()){log.debug(""TREE WITNESS: {}"",tw);List<Function> twf=new LinkedList<Function>();Iterator<Term> i=tw.getRoots().iterator();Term r0=i.next();while(i.hasNext()){twf.add(fac.getFunctionEQ(i.next(),r0));}for(Function a : tw.getRootAtoms()){Predicate predicate=a.getFunctionSymbol();twf.add((predicate.getArity()==1)?fac.getFunction(predicate,r0):fac.getFunction(predicate,r0,r0));}List<Function> genAtoms=getAtomsForGenerators(tw.getGenerators(),r0);boolean subsumes=false;List<List<Function>> twfs=new ArrayList<List<Function>>(subsumes?1:genAtoms.size());for(Function a : genAtoms){LinkedList<Function> twfa=new LinkedList<Function>(twf);twfa.add(a);twfs.add(twfa);}tw.setFormula(twfs);}if(!cc.isDegenerate()){if(tws.hasConflicts()){CompatibleTreeWitnessSetIterator iterator=tws.getIterator();while(iterator.hasNext()){Collection<TreeWitness> compatibleTWs=iterator.next();log.debug(""COMPATIBLE: {}"",compatibleTWs);LinkedList<Function> mainbody=new LinkedList<Function>();for(Edge edge : cc.getEdges()){boolean contained=false;for(TreeWitness tw : compatibleTWs){if(tw.getDomain().contains(edge.getTerm0())&&tw.getDomain().contains(edge.getTerm1())){contained=true;log.debug(""EDGE {} COVERED BY {}"",edge,tw);break;}}if(!contained){log.debug(""EDGE {} NOT COVERED BY ANY TW"",edge);mainbody.addAll(edge.getAtoms());}}for(TreeWitness tw : compatibleTWs){Function twAtom=getHeadAtom(headURI,""_TW_""+(edgeDP.getRules().size()+1),cc.getVariables());mainbody.add(twAtom);for(List<Function> twfa : tw.getFormula()){edgeDP.appendRule(fac.getCQIE(twAtom,twfa));}}mainbody.addAll(cc.getNonDLAtoms());outputRules.add(fac.getCQIE(headAtom,mainbody));}}else {LinkedList<Function> mainbody=new LinkedList<Function>();for(Edge edge : cc.getEdges()){log.debug(""EDGE {}"",edge);Function edgeAtom=null;for(TreeWitness tw : tws.getTWs()){if(tw.getDomain().contains(edge.getTerm0())&&tw.getDomain().contains(edge.getTerm1())){if(edgeAtom==null){edgeAtom=getHeadAtom(headURI,""_EDGE_""+(edgeDP.getRules().size()+1),cc.getVariables());mainbody.add(edgeAtom);LinkedList<Function> edgeAtoms=new LinkedList<Function>();edgeAtoms.addAll(edge.getAtoms());edgeDP.appendRule(fac.getCQIE(edgeAtom,edgeAtoms));}for(List<Function> twfa : tw.getFormula()){edgeDP.appendRule(fac.getCQIE(edgeAtom,twfa));}}}if(edgeAtom==null){mainbody.addAll(edge.getAtoms());}}mainbody.addAll(cc.getNonDLAtoms());outputRules.add(fac.getCQIE(headAtom,mainbody));}}else {LinkedList<Function> loopbody=new LinkedList<Function>();Loop loop=cc.getLoop();log.debug(""LOOP {}"",loop);if(loop!=null){loopbody.addAll(loop.getAtoms());}loopbody.addAll(cc.getNonDLAtoms());outputRules.add(fac.getCQIE(headAtom,loopbody));}return outputRules;}"
189	"private Hop processBuiltinFunctionExpression(BuiltinFunctionExpression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException,HopsException{Hop expr=processExpression(source.getFirstExpr(),null,hops);Hop expr2=null;if(source.getSecondExpr()!=null){expr2=processExpression(source.getSecondExpr(),null,hops);}Hop expr3=null;if(source.getThirdExpr()!=null){expr3=processExpression(source.getThirdExpr(),null,hops);}Hop currBuiltinOp=null;if(target==null){target=createTarget(source);}switch (source.getOpCode()){case COLSUM :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.Col,expr);break;case COLMAX :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.Col,expr);break;case COLMIN :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.Col,expr);break;case COLMEAN :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.Col,expr);break;case COLSD :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Col,expr);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case COLVAR :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Col,expr);break;case ROWSUM :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.Row,expr);break;case ROWMAX :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.Row,expr);break;case ROWINDEXMAX :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAXINDEX,Direction.Row,expr);break;case ROWINDEXMIN :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MININDEX,Direction.Row,expr);break;case ROWMIN :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.Row,expr);break;case ROWMEAN :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.Row,expr);break;case ROWSD :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Row,expr);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case ROWVAR :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Row,expr);break;case NROW :long nRows=expr.getDim1();if(nRows==-1){currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.NROW,expr);}else {currBuiltinOp=new LiteralOp(nRows);}break;case NCOL :long nCols=expr.getDim2();if(nCols==-1){currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.NCOL,expr);}else {currBuiltinOp=new LiteralOp(nCols);}break;case LENGTH :long nRows2=expr.getDim1();long nCols2=expr.getDim2();if((nCols2==-1)||(nRows2==-1)){currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.LENGTH,expr);}else {long lval=(nCols2*nRows2);currBuiltinOp=new LiteralOp(lval);}break;case SUM :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.RowCol,expr);break;case MEAN :if(expr2==null){currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.RowCol,expr);}else {Hop orderHop=new LiteralOp(0);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.CENTRALMOMENT,expr,expr2,orderHop);}break;case SD :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.RowCol,expr);HopRewriteUtils.setOutputParametersForScalar(currBuiltinOp);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case VAR :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.RowCol,expr);break;case MIN :if(expr2==null){currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.RowCol,expr);}else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MIN,expr,expr2);}break;case MAX :if(expr2==null){currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.RowCol,expr);}else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MAX,expr,expr2);}break;case PPRED :String sop=((StringIdentifier)source.getThirdExpr()).getValue();sop=sop.replace(""\"""","""");OpOp2 operation;if(sop.equalsIgnoreCase("">="")){operation=OpOp2.GREATEREQUAL;}else {if(sop.equalsIgnoreCase("">"")){operation=OpOp2.GREATER;}else {if(sop.equalsIgnoreCase(""<="")){operation=OpOp2.LESSEQUAL;}else {if(sop.equalsIgnoreCase(""<"")){operation=OpOp2.LESS;}else {if(sop.equalsIgnoreCase(""=="")){operation=OpOp2.EQUAL;}else {if(sop.equalsIgnoreCase(""!="")){operation=OpOp2.NOTEQUAL;}else {LOG.error(source.printErrorLocation()+""Unknown argument (""+sop+"") for PPRED."");throw new ParseException(source.printErrorLocation()+""Unknown argument (""+sop+"") for PPRED."");}}}}}}currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),operation,expr,expr2);break;case PROD :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.PROD,Direction.RowCol,expr);break;case TRACE :currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.TRACE,Direction.RowCol,expr);break;case TRANS :currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.TRANSPOSE,expr);break;case REV :currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.REV,expr);break;case CBIND :case RBIND :OpOp2 appendOp1=(source.getOpCode()==BuiltinFunctionOp.CBIND)?OpOp2.CBIND:OpOp2.RBIND;OpOpN appendOp2=(source.getOpCode()==BuiltinFunctionOp.CBIND)?OpOpN.CBIND:OpOpN.RBIND;currBuiltinOp=(source.getAllExpr().length==2)?new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),appendOp1,expr,expr2):new NaryOp(target.getName(),target.getDataType(),target.getValueType(),appendOp2,processAllExpressions(source.getAllExpr(),hops));break;case DIAG :currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.DIAG,expr);break;case TABLE :int numTableArgs=source._args.length;switch (numTableArgs){case 2 :case 4 :Hop weightHop=new LiteralOp(1.0);weightHop.setDim1(0);weightHop.setDim2(0);weightHop.setNnz(-1);weightHop.setRowsInBlock(0);weightHop.setColsInBlock(0);if(numTableArgs==2){currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,weightHop);}else {Hop outDim1=processExpression(source._args[2],null,hops);Hop outDim2=processExpression(source._args[3],null,hops);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,weightHop,outDim1,outDim2);}break;case 3 :case 5 :if(numTableArgs==3){currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,expr3);}else {Hop outDim1=processExpression(source._args[3],null,hops);Hop outDim2=processExpression(source._args[4],null,hops);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,expr3,outDim1,outDim2);}break;default :throw new ParseException(""Invalid number of arguments ""+numTableArgs+"" to table() function."");}break;case CAST_AS_SCALAR :currBuiltinOp=new UnaryOp(target.getName(),DataType.SCALAR,target.getValueType(),Hop.OpOp1.CAST_AS_SCALAR,expr);break;case CAST_AS_MATRIX :currBuiltinOp=new UnaryOp(target.getName(),DataType.MATRIX,target.getValueType(),Hop.OpOp1.CAST_AS_MATRIX,expr);break;case CAST_AS_FRAME :currBuiltinOp=new UnaryOp(target.getName(),DataType.FRAME,target.getValueType(),Hop.OpOp1.CAST_AS_FRAME,expr);break;case CAST_AS_DOUBLE :currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.DOUBLE,Hop.OpOp1.CAST_AS_DOUBLE,expr);break;case CAST_AS_INT :currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.INT,Hop.OpOp1.CAST_AS_INT,expr);break;case CAST_AS_BOOLEAN :currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.BOOLEAN,Hop.OpOp1.CAST_AS_BOOLEAN,expr);break;case XOR :Hop.OpOp2 mathOpx;mathOpx=Hop.OpOp2.XOR;break;case ABS :case SIN :case COS :case TAN :case ASIN :case ACOS :case ATAN :case SINH :case COSH :case TANH :case SIGN :case SQRT :case EXP :case ROUND :case CEIL :case FLOOR :case CUMSUM :case CUMPROD :case CUMMIN :case CUMMAX :Hop.OpOp1 mathOp1;switch (source.getOpCode()){case ABS :mathOp1=Hop.OpOp1.ABS;break;case SIN :mathOp1=Hop.OpOp1.SIN;break;case COS :mathOp1=Hop.OpOp1.COS;break;case TAN :mathOp1=Hop.OpOp1.TAN;break;case ASIN :mathOp1=Hop.OpOp1.ASIN;break;case ACOS :mathOp1=Hop.OpOp1.ACOS;break;case ATAN :mathOp1=Hop.OpOp1.ATAN;break;case SINH :mathOp1=Hop.OpOp1.SINH;break;case COSH :mathOp1=Hop.OpOp1.COSH;break;case TANH :mathOp1=Hop.OpOp1.TANH;break;case SIGN :mathOp1=Hop.OpOp1.SIGN;break;case SQRT :mathOp1=Hop.OpOp1.SQRT;break;case EXP :mathOp1=Hop.OpOp1.EXP;break;case ROUND :mathOp1=Hop.OpOp1.ROUND;break;case CEIL :mathOp1=Hop.OpOp1.CEIL;break;case FLOOR :mathOp1=Hop.OpOp1.FLOOR;break;case CUMSUM :mathOp1=Hop.OpOp1.CUMSUM;break;case CUMPROD :mathOp1=Hop.OpOp1.CUMPROD;break;case CUMMIN :mathOp1=Hop.OpOp1.CUMMIN;break;case CUMMAX :mathOp1=Hop.OpOp1.CUMMAX;break;default :LOG.error(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());throw new ParseException(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());}currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp1,expr);break;case LOG :if(expr2==null){Hop.OpOp1 mathOp2;switch (source.getOpCode()){case LOG :mathOp2=Hop.OpOp1.LOG;break;default :LOG.error(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());throw new ParseException(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());}currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp2,expr);}else {Hop.OpOp2 mathOp3;switch (source.getOpCode()){case LOG :mathOp3=Hop.OpOp2.LOG;break;default :LOG.error(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());throw new ParseException(source.printErrorLocation()+""processBuiltinFunctionExpression():: Could not find Operation type for builtin function: ""+source.getOpCode());}currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp3,expr,expr2);}break;case MOMENT :if(expr3==null){currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.CENTRALMOMENT,expr,expr2);}else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.CENTRALMOMENT,expr,expr2,expr3);}break;case COV :if(expr3==null){currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.COVARIANCE,expr,expr2);}else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.COVARIANCE,expr,expr2,expr3);}break;case QUANTILE :if(expr3==null){currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.QUANTILE,expr,expr2);}else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.QUANTILE,expr,expr2,expr3);}break;case INTERQUANTILE :if(expr3==null){currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.INTERQUANTILE,expr,expr2);}else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.INTERQUANTILE,expr,expr2,expr3);}break;case IQM :if(expr2==null){currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.IQM,expr);}else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.IQM,expr,expr2);}break;case MEDIAN :if(expr2==null){currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.MEDIAN,expr);}else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.MEDIAN,expr,expr2);}break;case SEQ :HashMap<String,Hop> randParams=new HashMap<>();randParams.put(Statement.SEQ_FROM,expr);randParams.put(Statement.SEQ_TO,expr2);randParams.put(Statement.SEQ_INCR,(expr3!=null)?expr3:new LiteralOp(1));currBuiltinOp=new DataGenOp(DataGenMethod.SEQ,target,randParams);break;case SAMPLE :{Expression[] in=source.getAllExpr();HashMap<String,Hop> tmpparams=new HashMap<>();tmpparams.put(DataExpression.RAND_MAX,expr);tmpparams.put(DataExpression.RAND_ROWS,expr2);tmpparams.put(DataExpression.RAND_COLS,new LiteralOp(1));if(in.length==4){tmpparams.put(DataExpression.RAND_PDF,expr3);Hop seed=processExpression(in[3],null,hops);tmpparams.put(DataExpression.RAND_SEED,seed);}else {if(in.length==3){if(expr3.getValueType()==ValueType.BOOLEAN){tmpparams.put(DataExpression.RAND_PDF,expr3);tmpparams.put(DataExpression.RAND_SEED,new LiteralOp(DataGenOp.UNSPECIFIED_SEED));}else {if(expr3.getValueType()==ValueType.INT){tmpparams.put(DataExpression.RAND_PDF,new LiteralOp(false));tmpparams.put(DataExpression.RAND_SEED,expr3);}else {throw new HopsException(""Invalid input type ""+expr3.getValueType()+"" in sample()."");}}}else {if(in.length==2){tmpparams.put(DataExpression.RAND_PDF,new LiteralOp(false));tmpparams.put(DataExpression.RAND_SEED,new LiteralOp(DataGenOp.UNSPECIFIED_SEED));}}}currBuiltinOp=new DataGenOp(DataGenMethod.SAMPLE,target,tmpparams);break;}case SOLVE :currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.SOLVE,expr,expr2);break;case INVERSE :currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.INVERSE,expr);break;case CHOLESKY :currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.CHOLESKY,expr);break;case OUTER :if(!(expr3 instanceof LiteralOp)){throw new HopsException(""Operator for outer builtin function must be a constant: ""+expr3);}OpOp2 op=Hop.getOpOp2ForOuterVectorOperation(((LiteralOp)expr3).getStringValue());if(op==null){throw new HopsException(""Unsupported outer vector binary operation: ""+((LiteralOp)expr3).getStringValue());}currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),op,expr,expr2);((BinaryOp)currBuiltinOp).setOuterVectorOperation(true);currBuiltinOp.refreshSizeInformation();break;case CONV2D :{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case BIAS_ADD :{ArrayList<Hop> inHops1=new ArrayList<>();inHops1.add(expr);inHops1.add(expr2);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.BIAS_ADD,inHops1);setBlockSizeAndRefreshSizeInfo(expr,currBuiltinOp);break;}case BIAS_MULTIPLY :{ArrayList<Hop> inHops1=new ArrayList<>();inHops1.add(expr);inHops1.add(expr2);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.BIAS_MULTIPLY,inHops1);setBlockSizeAndRefreshSizeInfo(expr,currBuiltinOp);break;}case AVG_POOL :case MAX_POOL :{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForPoolingForwardIM2COL(image,source,1,hops);if(source.getOpCode()==BuiltinFunctionOp.MAX_POOL){currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.MAX_POOLING,inHops1);}else {throw new HopsException(""Average pooling is not implemented"");}setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case MAX_POOL_BACKWARD :{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOpPoolingCOL2IM(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.MAX_POOLING_BACKWARD,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case CONV2D_BACKWARD_FILTER :{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D_BACKWARD_FILTER,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case CONV2D_BACKWARD_DATA :{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D_BACKWARD_DATA,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}default :throw new ParseException(""Unsupported builtin function type: ""+source.getOpCode());}if(!(source.getOpCode()==BuiltinFunctionOp.CONV2D||source.getOpCode()==BuiltinFunctionOp.CONV2D_BACKWARD_DATA||source.getOpCode()==BuiltinFunctionOp.CONV2D_BACKWARD_FILTER||source.getOpCode()==BuiltinFunctionOp.MAX_POOL||source.getOpCode()==BuiltinFunctionOp.MAX_POOL_BACKWARD)){setIdentifierParams(currBuiltinOp,source.getOutput());}currBuiltinOp.setParseInfo(source);return currBuiltinOp;}"
190	"@Override public void run(){coordnatelayout.setVisibility(View.VISIBLE);bottomRelativeLayout.setVisibility(View.VISIBLE);smileyandVerificationLayout.setVisibility(View.VISIBLE);SendRequestFragmentView.setVerificationIcon(userProfile,mobileCheckIconImageView,fbCheckIconImageView,mailCheckIconImageView);if(userProfile.getProfile().isIsFavorite()){favoriteImageView.setImageResource(R.drawable.red_favorite);Log.i(""favoriteStatus"",""initial ""+userProfile.getProfile().isIsFavorite());}if(userProfile.getProfile().isIsSmileSent()){layoutSendSmiley.setEnabled(false);emoIconImageView.setImageResource(R.drawable.red_smile);}if(userProfile.getProfile().getPersonalInformation().getAboutYourself()!=null){userProfileDescriptionTextViewTag.setVisibility(View.VISIBLE);userProfileDescriptionCardview.setVisibility(View.VISIBLE);userProfileDescriptionText.setText(userProfile.getProfile().getPersonalInformation().getAboutYourself());}if(userProfile.getProfile().getPersonalInformation().getImage()!=null){Picasso.with(this).load(Utils.Base_URL+userProfile.getProfile().getPersonalInformation().getImage().getProfilePicture()).into(userProfileImage,new Callback(){  @Override public void onSuccess(){    userProfileImage.post(new Runnable(){      @Override public void run(){        Utils.scaleImage(NewUserProfileActivity.this,2f,userProfileImage);      }    });  }  @Override public void onError(){  }});Glide.with(this).load(Utils.Base_URL+userProfile.getProfile().getPersonalInformation().getImage().getProfilePicture()).into(profileViewerPersonImageView);}else {if((userProfile.getProfile().getPersonalInformation().getImage()==null)&(userProfile.getProfile().getPersonalInformation().getGender().equals(Utils.MALE_GENDER))){userProfileImage.setImageResource(R.drawable.profile_icon_male);profileViewerPersonImageView.setImageResource(R.drawable.profile_icon_male);}else {if((userProfile.getProfile().getPersonalInformation().getImage()==null)&(userProfile.getProfile().getPersonalInformation().getGender().equals(Utils.FEMALE_GENDER))){userProfileImage.setImageResource(R.drawable.profile_icon_female);profileViewerPersonImageView.setImageResource(R.drawable.profile_icon_female);}else {}}}generalInfoTagTextview.setVisibility(View.VISIBLE);generalInfoCarView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonGeneralInfoRecylerView(getBaseContext(),userProfile,generalInfoRecyclerView);Glide.with(getBaseContext()).load(Utils.Base_URL+sharePref.get_data(""profile_picture"")).into(selfImageView);matchUserChoiceTextViewTag.setVisibility(View.VISIBLE);matchUserChoiceCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonMatchUserChoiceRecylerView(getBaseContext(),userProfile,matchUserChoiceRecyclerView);if(userProfile.getProfile().getOtherInformation()!=null){otherInfoTagTextview.setVisibility(View.VISIBLE);otherInfoCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonOtherInfoRecylerView(getBaseContext(),userProfile,otherInfoRecylerView);}if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==null)&&(userProfile.getProfile().getRequestStatus().getSender()==null)){finalResultButton.setTag(Utils.sendBiodataRequest);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted())&&(!userProfile.getProfile().getRequestStatus().isRejected())){finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setEnabled(false);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted())&&(userProfile.getProfile().getRequestStatus().isRejected())){finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setEnabled(false);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(userProfile.getProfile().getRequestStatus().isAccepted())&&(!userProfile.getProfile().getRequestStatus().isRejected())){familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);finalResultButton.setEnabled(true);finalResultButton.setVisibility(View.VISIBLE);finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setTag(Utils.sendCommunicationRequest);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted())&&(!userProfile.getProfile().getRequestStatus().isRejected())){finalResultButton.setVisibility(View.GONE);requestSendButtonsLayout.setVisibility(View.VISIBLE);acceptImageView.setTag(Utils.profileRequestAccept);cancelImageView.setTag(Utils.profileRequestCancel);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""profile request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted())&&(userProfile.getProfile().getRequestStatus().isRejected())){finalResultButton.setVisibility(View.VISIBLE);finalResultButton.setEnabled(true);finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setTag(Utils.sendBiodataRequest);}}}}}}if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getCommunicationRequestId()==null)){familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);finalResultButton.setEnabled(true);finalResultButton.setVisibility(View.VISIBLE);finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setTag(Utils.sendCommunicationRequest);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(userProfile.getProfile().getRequestStatus().isAccepted())){familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);communicationTagTextview.setVisibility(View.VISIBLE);communicationCarview.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataOnCommunincationRecylerView(getBaseContext(),userProfile,communicationInfoRecylerview);finalResultButton.setVisibility(View.GONE);requestSendButtonsLayout.setVisibility(View.VISIBLE);acceptImageView.setImageResource(R.drawable.envelope_icon);cancelImageView.setImageResource(R.drawable.phone_icon);acceptTextView.setText(""????? ?????"");cancelTextView.setText(""??? ????"");acceptImageView.setTag(Utils.sendmessage);cancelImageView.setTag(Utils.call);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(userProfile.getProfile().getRequestStatus().isRejected())){finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setEnabled(false);familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getSender()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted()&&(!userProfile.getProfile().getRequestStatus().isRejected()))){finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setEnabled(false);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(userProfile.getProfile().getRequestStatus().isAccepted())){finalResultButton.setVisibility(View.GONE);requestSendButtonsLayout.setVisibility(View.VISIBLE);acceptImageView.setImageResource(R.drawable.envelope_icon);cancelImageView.setImageResource(R.drawable.phone_icon);acceptTextView.setText(""????? ?????"");cancelTextView.setText(""??? ????"");acceptImageView.setTag(Utils.sendmessage);cancelImageView.setTag(Utils.call);familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);communicationTagTextview.setVisibility(View.VISIBLE);communicationCarview.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataOnCommunincationRecylerView(getBaseContext(),userProfile,communicationInfoRecylerview);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(userProfile.getProfile().getRequestStatus().isRejected())){familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);finalResultButton.setEnabled(true);finalResultButton.setVisibility(View.VISIBLE);finalResultButton.setText(userProfile.getProfile().getRequestStatus().getMessage());finalResultButton.setTag(Utils.sendCommunicationRequest);}else {if(userProfile.getProfile().getRequestStatus().getName().equals(""communication request"")&&(userProfile.getProfile().getRequestStatus().getReceiver()==Integer.parseInt(sharePref.get_data(""user_id"")))&&(!userProfile.getProfile().getRequestStatus().isAccepted()&&(!userProfile.getProfile().getRequestStatus().isRejected()))){familyInfoTagTextView.setVisibility(View.VISIBLE);familyCardView.setVisibility(View.VISIBLE);SendRequestFragmentView.setDataonFamilyMemberInfoRecylerView(getBaseContext(),userProfile,familyMemberInfoRecylerView);finalResultButton.setVisibility(View.GONE);requestSendButtonsLayout.setVisibility(View.VISIBLE);acceptImageView.setTag(Utils.commRequestAccept);cancelImageView.setTag(Utils.commRequestCancel);}}}}}}}if(progressDialog.isShowing()){progressDialog.dismiss();}}"
191	"public void switchFragment(int checkId){lastCheckId=checkId;currentFtName=fragmentTag+checkId;toFragment=(BaseModeFragment)getSupportFragmentManager().findFragmentByTag(currentFtName);if(mCurrentFragment!=null&&mCurrentFragment==toFragment){return ;}if(toFragment==null){if(reports!=null&&reports.size()>0){toFragment=ModularOneRootPageModeFragment.newInstance(checkId,uuid);new RootPagePresenter(RootPageImpl.getInstance(),(ModularOneRootPageModeFragment)toFragment);}}mFragmentTransaction=mFragmentManager.beginTransaction();if(mCurrentFragment==null){mFragmentTransaction.add(R.id.fl_mdetal_cont_container,toFragment,currentFtName).commit();mCurrentFragment=toFragment;}else {if(mCurrentFragment!=toFragment){if(!toFragment.isAdded()){mFragmentTransaction.hide(mCurrentFragment).add(R.id.fl_mdetal_cont_container,toFragment,currentFtName).commit();}else {mFragmentTransaction.hide(mCurrentFragment).show(toFragment).commit();}mCurrentFragment=toFragment;}}}"
192	"private void jTable4MouseClicked(java.awt.event.MouseEvent evt){}"
193	"@Override boolean shouldDrainBuffers(boolean delayable){return !delayable;}"
194	"private JFXButton getDeleteTimelineButton(){return timelineView.getDeleteTimelineButton();}"
195	"@Override public boolean apply(T t){return !predicate.apply(t);}"
196	"@Override public Fragment getItem(int position){if(position==0){return new SearchFragment();}else {if(position==1){return new AllTracksFragment();}else {if(position==2){return new SettingsFragment();}}}return null;}"
197	"public void resetFunctionTemplate(){_currentState=EVALUATING_LIST;_lastFunctionReturn=null;_instructionPointer=0;_loopIndex=0;_bindingLoopVariable=null;_bindingLoopIndex=null;_loopList=null;_maxIndex=0;_isListIteration=true;_innerEnv=null;}"
198	"public void setSubjectID(String id){this.subjectID=id;}"
199	"public void clearPath(){this.currentPath=null;pathView.getChildren().clear();parent.getMiniMapController().clearPath();}"
200	"public static Transaction addSingleSmsToTransaction(String address,String messageBody,long timestamp){Transaction transaction=null;if(TextUtils.isEmpty(address)||TextUtils.isEmpty(messageBody)){return transaction;}if(isItTransactionalSms(address)){transaction=new Transaction();int transactionType=getTransactionType(messageBody);if(UNDEFINED!=transactionType){try{transaction.setDate(new Date(timestamp));}catch(NumberFormatException e){e.printStackTrace();}transaction.setAmount(getAmount(messageBody));transaction.setType(transactionType);Transactions transactions=MyPreferenceManager.getTransactions();transactions.getTransactions().add(0,transaction);transactions.setLastChecked(System.currentTimeMillis());int month=DateUtil.getMonthFromDate(timestamp);LinkedHashMap<Integer,List<Transaction>> existingMonthlyTransactions=transactions.getMonthlyTransactions();List<Transaction> expensesOfMonth=existingMonthlyTransactions.get(month);expensesOfMonth.add(transaction);existingMonthlyTransactions.put(month,expensesOfMonth);transactions.setMonthlyTransactions(existingMonthlyTransactions);MyPreferenceManager.setTransactions(transactions);}return transaction;}return transaction;}"
201	"public static HorizontalLayoutContainer aSearchPanel(){HorizontalLayoutContainer con=new HorizontalLayoutContainer();SearchResult result=new SearchResult();con.add(new SearchClient().setResult(result),new HorizontalLayoutContainer.HorizontalLayoutData(0.5,1));con.add(result,new HorizontalLayoutContainer.HorizontalLayoutData(0.5,1));return con;}"
202	"@Override public boolean apply(ClassInfo info){return info.className.indexOf('$')==-1;}"
203	"@Override public GamaSpatialPath pathBetween(IScope scope,IShape source,IShape target){ final GamaSpatialGraph graph=(GamaSpatialGraph)getPlaces();IShape sourceN=source;IShape targetN=target;boolean targetNode=graph.getVertexMap().containsKey(target); final boolean isAgentVertex=graph.isEmpty(scope)?false:graph.getVertices().get(0) instanceof IAgent; final boolean targetNSame=isAgentVertex==target instanceof IAgent; final boolean sourceNSame=isAgentVertex==source instanceof IAgent;boolean sourceNode=graph.getVertexMap().containsKey(source);if(!sourceNSame&&!sourceNode||!targetNSame&&!targetNode){for(Object ed : graph.getVertices()){if(((IShape)ed).getLocation().equals(source.getLocation())){sourceN=(IShape)ed;sourceNode=true;}if(((IShape)ed).getLocation().equals(target.getLocation())){targetN=(IShape)ed;targetNode=true;}if(sourceNode&&targetNode){break;}}}if(sourceNode&&targetNode){return (GamaSpatialPath)graph.computeShortestPathBetween(scope,sourceN,targetN);}IShape edgeS=null,edgeT=null; final boolean optimization=graph.edgeSet().size()>1000; final double dist=optimization?Math.sqrt(scope.getSimulation().getArea())/graph.edgeSet().size()*100:-1;if(graph.isAgentEdge()){ final IAgentFilter filter=In.edgesOf(getPlaces());if(!sourceNode){edgeS=getPathEdge(scope,source);if(edgeS==null){if(optimization){ final Collection<IAgent> ags=scope.getSimulation().getAgent().getTopology().getNeighborsOf(scope,source,dist,filter);if(!ags.isEmpty()){double distMin=Double.MAX_VALUE;for(IAgent e : ags){ final double d=source.euclidianDistanceTo(e);if(d<distMin){edgeS=e;distMin=d;}}}}if(edgeS==null){edgeS=scope.getSimulation().getAgent().getTopology().getAgentClosestTo(scope,source,filter);}}if(edgeS==null){return null;}}if(!targetNode){edgeT=getPathEdge(scope,target);if(edgeT==null){if(optimization){ final Collection<IAgent> ags=scope.getSimulation().getAgent().getTopology().getNeighborsOf(scope,target,dist,filter);if(!ags.isEmpty()){double distMin=Double.MAX_VALUE;for(IAgent e : ags){ final double d=target.euclidianDistanceTo(e);if(d<distMin){edgeT=e;distMin=d;}}}}if(edgeT==null){edgeT=scope.getSimulation().getAgent().getTopology().getAgentClosestTo(scope,target,filter);}}if(edgeT==null){return null;}}}else {double distSMin=Double.MAX_VALUE;double distTMin=Double.MAX_VALUE;edgeS=getPathEdge(scope,source);if(edgeS!=null){distSMin=0;}edgeT=getPathEdge(scope,target);if(edgeT!=null){distTMin=0;}if(distSMin>0&&!sourceNode||distTMin>0&&!targetNode){for(Object e : graph.getEdges()){ final IShape edge=(IShape)e;if(!sourceNode&&distSMin>0){ final double distS=edge.euclidianDistanceTo(source);if(distS<distSMin){distSMin=distS;edgeS=edge;}}if(!targetNode&&distTMin>0){ final double distT=edge.euclidianDistanceTo(target);if(distT<distTMin){distTMin=distT;edgeT=edge;}}}}if(!sourceNode&&edgeS==null||!targetNode&&edgeT==null){return null;}}if(getPlaces().isDirected()){return pathBetweenCommonDirected(scope,edgeS,edgeT,sourceN,targetN,sourceNode,targetNode);}return pathBetweenCommon(scope,graph,edgeS,edgeT,sourceN,targetN,sourceNode,targetNode);}"
204	"@Override public void onEntityExplode(EntityExplodeEvent event){for(Block block : event.blockList()){if(plugin.settings.isUnbreakableType(block)){event.setCancelled(true);break;}if(plugin.settings.isFieldType(block)){event.setCancelled(true);break;}if(plugin.settings.isCloakableType(block)){event.setCancelled(true);break;}Field field=plugin.ffm.isExplosionProtected(block);if(field!=null){event.setCancelled(true);break;}}}"
205	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();setFocusDeferred(true);}"
206	"public void receiveEvent(String data){if((mouseActive==1)&&(propEnableMouse)){rob.mousePress(InputEvent.BUTTON3_MASK);rob.mouseRelease(InputEvent.BUTTON3_MASK);}}"
207	"public void onClick(View v){if(mHotItemType==DrawingPath.DRAWING_PATH_POINT||mHotItemType==DrawingPath.DRAWING_PATH_LINE||mHotItemType==DrawingPath.DRAWING_PATH_AREA){if(mDrawingSurface.moveHotItemToNearestPoint()){modified();}else {Toast.makeText(context,R.string.failed_snap_to_point,Toast.LENGTH_SHORT).show();}}dismissPopup();}"
208	"private JsType findClassInPck(Class<?> clazz,String pck,String name){try{ final Method m=clazz.getMethod(name); final Class<?> t=m.getReturnType(); final Routine r=m.getAnnotation(Routine.class);String suggested_name=m.getName();if(r!=null){suggested_name=r.value();if(suggested_name==null||suggested_name.length()==0){suggested_name=m.getName();}} final String import_part=this.js.register_import(pck);return new JsType(import_part,suggested_name,t);}catch(Exception e){}return null;}"
209	"public int normalize(int a){return facing.normalize(a);}"
210	"@Override public void run(){if(mLeadInCounter<mLeadInText.length){if(D){Log.d(TAG,""displaying lead in text '""+mLeadInText[mLeadInCounter-1]+""'"");}mRecordingTimeText.setText(mLeadInText[mLeadInCounter-1]);}}"
211	"@Override public boolean isVisible(){return dto.getIcon()!=null&&dto.getIcon().getObject()!=null;}"
212	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);content=this.getArguments().getString(""content"");try{JSONObject jsonObj=new JSONObject(content);entityModel=EntityModel.parse(jsonObj);((ActionBarActivity)getActivity()).getSupportActionBar().setTitle(entityModel.getTitle());if(entityModel.getLabels().length>0){String subtitle=entityModel.getLabels()[0].getValue();for(int i=1;i<entityModel.getLabels().length;i++){subtitle+="", "";subtitle+=entityModel.getLabels()[i].getValue();}((ActionBarActivity)getActivity()).getSupportActionBar().setSubtitle(subtitle);}}catch(JSONException e){e.printStackTrace();}}"
213	"@Override boolean hasValueConstraints(){return true;}"
214	"public boolean condition(MagicGame game,MagicPermanent source,MagicPermanent target){return true;}"
215	"private void selectItem(int position){currentPosition=position;Fragment fragment=null;switch (position){case 1 :if(viewFragment==null){viewFragment=new ViewFragment();fragment=viewFragment;}else {fragment=viewFragment;}break;case 2 :if(settingsFragment==null){settingsFragment=new SettingsFragment();fragment=settingsFragment;}else {fragment=settingsFragment;}break;case 3 :if(aboutFragment==null){aboutFragment=new AboutFragment();fragment=aboutFragment;}else {fragment=aboutFragment;}break;default :if(viewFragment==null){viewFragment=new ViewFragment();fragment=viewFragment;}else {fragment=viewFragment;}}FragmentTransaction ft=getFragmentManager().beginTransaction();ft.replace(R.id.content_frame,fragment);ft.addToBackStack(null);ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);ft.commit();drawerLayout.closeDrawer(drawerList);}"
216	"private int determineCurrentPosition(int startingPosition){int position=startingPosition;if(startsWithSign){if(!negative){position=position+1;}}return position;}"
217	"@Override public void onLocationChanged(Location location){}"
218	"public FramingMeetingLog getFramingPersonalDataLog(FramingMeeting framingMeeting,FramingPersonalDataView personalData,String logType){FramingMeetingLog framingMeetingLog=new FramingMeetingLog();List<FramingLogElement> lstElements=new ArrayList<>();FramingLogElement element=new FramingLogElement();element.setFieldName(""Nombre"");element.setValue(personalData.getName());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Apellido paterno"");element.setValue(personalData.getLastNameP());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Apellido materno"");element.setValue(personalData.getLastNameM());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""G&eacute;nero"");if(personalData.getGender()==1){element.setValue(""Femenino"");}else {if(personalData.getGender()==2){element.setValue(""Masculino"");}}lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Estado civil"");switch (personalData.getMaritalStatus().intValue()){case 1 :element.setValue(""Soltero"");break;case 2 :element.setValue(""Casado"");break;case 3 :element.setValue(""Divorciado"");break;case 4 :element.setValue(""Uni&oacute;n libre"");break;case 5 :element.setValue(""Viudo"");break;}lstElements.add(element);element=new FramingLogElement();element.setFieldName(""A&ntilde;os estado civil"");element.setValue(personalData.getMaritalStatusYears());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Pa&iacute;s de nacimiento"");element.setValue(countryRepository.findOne(personalData.getBirthCountryId()).getName());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Estado de nacimiento"");if(personalData.getIsMexico()==true){element.setValue(stateRepository.findOne(personalData.getBirthStateId()).getName());}else {element.setValue(personalData.getBirthState());}lstElements.add(element);element=new FramingLogElement();SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");element.setFieldName(""Fecha de nacimiento"");try{element.setValue(sdf.format(personalData.getBirthDate()));lstElements.add(element);}catch(Exception e){System.out.println(""error al convertir la fecha"");}element=new FramingLogElement();element.setFieldName(""Enfermedad / Condici&oacute;n f&iacute;sica"");element.setValue(personalData.getPhysicalCondition());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""T&eacute;lefono"");element.setValue(personalData.getPhone());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Celular"");element.setValue(personalData.getCelPhone());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Email"");element.setValue(personalData.getEmail());lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Redes sociales"");element.setValue(personalData.getSocialNetworking());lstElements.add(element);element=new FramingLogElement();element.setFieldName("""");element.setNewRow(true);lstElements.add(element);element=new FramingLogElement();element.setFieldName(""Observaciones"");element.setValue(personalData.getComments());lstElements.add(element);Gson gson=new Gson();framingMeetingLog.setTitle(""Datos personales y entorno social"");framingMeetingLog.setFramingMeeting(framingMeeting);framingMeetingLog.setSupervisor(userRepository.findOne(sharedUserService.GetLoggedUserId()));framingMeetingLog.setLogDate(CalendarExt.getToday());framingMeetingLog.setLogType(logType);framingMeetingLog.setFinalValue(gson.toJson(lstElements));return framingMeetingLog;}"
219	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
220	"public void onEnable(){PluginDescriptionFile pdfFile=this.getDescription();loadConfig();MAMessages.init(this);am=new ArenaMaster(this);am.initialize();setupPermissions();MACommands commandExecutor=new MACommands(this,am);getCommand(""ma"").setExecutor(commandExecutor);getCommand(""marena"").setExecutor(commandExecutor);getCommand(""mobarena"").setExecutor(commandExecutor);PluginManager pm=getServer().getPluginManager();PlayerListener playerListener=new MAPlayerListener(this,am);EntityListener entityListener=new MAEntityListener(am);BlockListener blockListener=new MABlockListener(am);pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_KICK,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Highest,this);pm.registerEvent(Event.Type.BLOCK_PLACE,blockListener,Priority.Highest,this);pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.Highest,this);pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Lowest,this);pm.registerEvent(Event.Type.ENTITY_REGAIN_HEALTH,entityListener,Priority.Normal,this);pm.registerEvent(Event.Type.ENTITY_EXPLODE,entityListener,Priority.Highest,this);pm.registerEvent(Event.Type.ENTITY_COMBUST,entityListener,Priority.Normal,this);pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.Normal,this);pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Priority.Highest,this);pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Monitor,this);System.out.println(""[MobArena] v""+pdfFile.getVersion()+"" enabled."");}"
221	"public void run(){if(!this.mStopStorageUpdate){this.updateMaxStorageView();}}"
222	"@Override public T get(){DataProviderRecord<T> record=getRecord();return (record!=null?record.getRecordObject():null);}"
223	"@Override public boolean openUri(Context context,String url,Bundle bundle){url=url.trim();if(!TextUtils.isEmpty(url)){if(url.indexOf(""://"")<0&&(!url.startsWith(""tel:"")||!url.startsWith(""smsto:"")||!url.startsWith(""file:""))){url=""http://""+url;}Uri uri=Uri.parse(url);return openUri(context,uri,bundle);}return true;}"
224	"public void onTick(long millisUntilFinished){}"
225	"@Override public void onComplete(FirebaseError firebaseError,boolean committed,DataSnapshot currentData){progressDialog.dismiss();startRoomActivity(roomNumber,0);}"
226	"private List<AesKeyEntity> getByIds(String orgId,String[] keyIdArray){List<Integer> list=new ArrayList<Integer>();for(String id : keyIdArray){list.add(Integer.parseInt(id));}return aesKeyCache.getListByKeyIds(orgId,list);}"
227	"private Channel createBareChannel(boolean transactional){if(!this.targetConnection.isOpen()){createConnection();}return this.targetConnection.createBareChannel(transactional);}"
228	"@Override public int compare(AppInfo o1,AppInfo o2){return o1.time>o2.time?-1:1;}"
229	"public void fitScreen(){Matrix save=fitScreenMatrixBuffer;mViewPortHandler.fitScreen(save);mViewPortHandler.refresh(save,this,false);calculateOffsets();postInvalidate();}"
230	"public void render(){for(int i=0;i<directions.length;i++){directions[i].render();}}"
231	"@Override public TodoList getTodoListById(String uuid){TodoListDAO todoListDAO=realm.where(TodoListDAO.class).equalTo(""uuid"",uuid).findFirst();return (todoListDAO!=null)?RealmConverter.convert(todoListDAO):null;}"
232	"@Override public void load(InputStream inputStream) throws IOException{ppu0control=inputStream.read();}"
233	"private synchronized static PreparedStatement buildQuery(String sql,Object... args){Log.Q(sql);PreparedStatement statement=null;try{statement=connection.prepareStatement(sql);int placeholderCount=1;for(Object o : args){statement.setObject(placeholderCount++,o);}}catch(SQLException e){e.printStackTrace();}return statement;}"
234	"@Override public void onClick(View view){Intent i=new Intent(this,model_lg_p.class);startActivity(i);}"
235	"@Override public ItemStack setTag(ItemStack itemStack,Map<String,Object> map) throws Exception{Class<?> ccitemstack=ReflectionUtils.getCBClass(""inventory.CraftItemStack"");Class<?> citemstack=ReflectionUtils.getNMSClass(""ItemStack"");Method asnmscopy=ccitemstack.getDeclaredMethod(""asNMSCopy"",ItemStack.class);asnmscopy.setAccessible(true);Method settag=citemstack.getDeclaredMethod(""setTag"");settag.setAccessible(true);Method asbukkitcopy=ccitemstack.getDeclaredMethod(""asBukkitCopy"",citemstack);asbukkitcopy.setAccessible(true);Object nitem=asnmscopy.invoke(null,itemStack);settag.invoke(nitem,NMSManager.getNMSNBT().toNBT(map));return (ItemStack)asbukkitcopy.invoke(null,nitem);}"
236	"public void update(GameContainer container,StateBasedGame sbg,int delta) throws SlickException{Input input=container.getInput();if(start){Mario.load();enemyStartos=true;marioShape=new Rectangle(Mario.x,Mario.y,mario.getWidth(),mario.getHeight());new Enemies(0,0,0,0,0,0,null,null,null,null,false).start();LoadingCoins.start();PowerUp.start();start=false;finish=false;}KeyPressed.start(input,sbg);System.out.println(""Keys: left/right = ""+keyLeft+""/""+keyRight);if(keyLeft){MarioWalkLeft.start();MarioWalkLeft.update(delta);}else {if(keyRight){MarioWalkRight.start();MarioWalkRight.update(delta);}else {MarioWalkLeft.restart();MarioWalkLeft.stop();MarioWalkRight.restart();MarioWalkRight.stop();}}Mario.x+=(int)Mario.speedX;Mario.y+=(int)Mario.speedY;marioShape.setBounds(Mario.x,Mario.y,mario.getWidth(),mario.getHeight());if(Mario.x<0){Mario.x=0;Mario.speedX=0;}if(Mario.x>X-texSize){Mario.x=X-texSize;Mario.speedX=0;}PowerUp.interaction();Enemies.intersection();if(enemyStartos){for(Enemies dra : enemyList){dra.speedMax=5;dra.speedX=1.0;enemyStartos=false;}}for(Enemies drago : enemyList){if(drago.x<0){drago.x=4;drago.speedX=1.0;}if(drago.x>X-texSize){drago.x=(X-texSize-4);drago.speedX=-1.0;}}for(Enemies drago : enemyList){drago.x+=(int)drago.speedX;drago.y+=(int)drago.speedY;}Intersection.start();if(finish){finish=false;start=true;sbg.enterState(2,new FadeOutTransition(),new FadeInTransition());}}"
237	"public void startChrono(View view){switch (view.getId()){case R.id.chronometer :if(optButton34.getText().equals(""START"")){chronometerModified.setBase(SystemClock.elapsedRealtime()+timeWhenStoppedModified);chronometerModified.start();optButton34.setText(""STOP"");}else {if(optButton34.getText().equals(""STOP"")){timeWhenStoppedModified=chronometerModified.getBase()-SystemClock.elapsedRealtime();chronometerModified.stop();optButton34.setText(""START"");}}break;case R.id.optButton34 :if(optButton34.getText().equals(""START"")){chronometerModified.setBase(SystemClock.elapsedRealtime()+timeWhenStoppedModified);chronometerModified.start();optButton34.setText(""STOP"");}else {if(optButton34.getText().equals(""STOP"")){timeWhenStoppedModified=chronometerModified.getBase()-SystemClock.elapsedRealtime();chronometerModified.stop();optButton34.setText(""START"");}}break;}}"
238	"private void requestWebservice(String request,int reqID,String url){this.mReceiver=new NetworkServiceResultReceiver(new Handler());this.mReceiver.setReceiver(this);Intent intent=new Intent(""android.intent.action.SYNC"",null,getActivity(),NetworkService.class);intent.putExtra(""url"",url);intent.putExtra(KEY_RECIVER,this.mReceiver);intent.putExtra(KEY_REQUEST_ID,String.valueOf(reqID));intent.putExtra(""request"",request);getActivity().startService(intent);}"
239	"private void processSingletons(){Method[] methods=module.getDeclaredMethods();for(Method method : methods){if(method.getDeclaredAnnotation(Singleton.class)==null){continue;}Provide provide=method.getDeclaredAnnotation(Provide.class);if(provide==null){continue;}String name=provide.value().isEmpty()?method.getName():provide.value();Object instance=findOrInstance(name,method.getReturnType());singletons.put(name,instance);}for(Class<?> component : components){if(component.getDeclaredAnnotation(Singleton.class)==null){continue;}Component c=component.getDeclaredAnnotation(Component.class);if(c==null){continue;}String name=c.value().isEmpty()?component.getSimpleName():c.value();Object instance=findOrInstance(name,component);singletons.put(name,instance);}}"
240	"@Override public boolean continueExecuting(){return super.continueExecuting()&&this.miner.getDistanceSqToEntity(this.miner.getAttackTarget())>5.0;}"
241	"private InsertionSort(Parcel in){imageIds=in.createIntArray();dataIds=in.createIntArray();data=in.createIntArray();int[] other=in.createIntArray();size=other[0];i_index=other[1];j_index=other[2];i_image=other[3];j_image=other[4];k_image=other[5];is_sorted=(other[6]==1);update_i_phase=(other[7]==1);is_swap_phase=(other[8]==1);}"
242	"@Override public View getView(int position,View convertView,ViewGroup parent){ final ViewHolder holder;if(convertView==null){convertView=infalter.inflate(R.layout.gallery_item,null);holder=new ViewHolder();holder.imgQueue=(ImageView)convertView.findViewById(R.id.imgQueue);holder.imgQueueMultiSelected=(ImageView)convertView.findViewById(R.id.imgQueueMultiSelected);if(isActionMultiplePick){holder.imgQueueMultiSelected.setVisibility(View.VISIBLE);}else {holder.imgQueueMultiSelected.setVisibility(View.GONE);}convertView.setTag(holder);}else {holder=(ViewHolder)convertView.getTag();}holder.imagePosition=position;holder.imgQueue.setTag(position);convertView.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if ((ViewHolder)v.getTag() == null) {      return;    }    int posi=((ViewHolder)v.getTag()).imagePosition;    if (data.get(posi).syncState == -1) {      return;    }    String imagePath=""file://"" + data.get(posi).sdcardPath;    Intent intent=new Intent();    intent.setAction(Intent.ACTION_VIEW);    intent.setDataAndType(Uri.parse(imagePath),""image/*"");    mContext.startActivity(intent);  }});try{imageLoader.displayImage(""file://""+data.get(position).sdcardPath,holder.imgQueue,new SimpleImageLoadingListener(){  @Override public void onLoadingStarted(  String imageUri,  View view){    holder.imgQueue.setImageResource(R.drawable.no_media);    super.onLoadingStarted(imageUri,view);  }});if(isActionMultiplePick){holder.imgQueueMultiSelected.setSelected(data.get(position).isSeleted);}if(data.get(position).syncState==1){holder.imgQueueMultiSelected.setBackgroundResource(R.drawable.ic_done_black_24dp);holder.imgQueueMultiSelected.setVisibility(View.VISIBLE);}else {if(data.get(position).syncState==0){holder.imgQueueMultiSelected.setBackgroundResource(R.drawable.ic_cached_black_24dp);holder.imgQueueMultiSelected.setVisibility(View.VISIBLE);}}}catch(Exception e){e.printStackTrace();}return convertView;}"
243	"public void flip(int direction){for(Layer layer : layers){layer.flip(direction);if(direction==FLIP_HORIZONTALLY){layer.setX(width-layer.getX()-layer.getWidth());}else {layer.setY(height-layer.getY()-layer.getHeight());}}}"
244	"private void hazInterfaz(){sistem=new JMenu(""Sistema"");agregar=new JMenuItem(""Agregar Pagina"");agregarMas=new JMenuItem(""Agregar mas..."");borrar=new JMenuItem(""Borrar Pagina"");consultar=new JMenuItem(""Consultar"");importar=new JMenuItem(""Importar"",new ImageIcon(""icon/import-icon.png""));exportar=new JMenuItem(""Exportar"",new ImageIcon(""icon/export-icon.png""));salir=new JMenuItem(""Salir"",new ImageIcon(""icon/delete-icon.png""));search=new JMenu(""Busqueda"");start=new JMenuItem(""Iniciar"",new ImageIcon(""icon/Start-2-icon.png""));stop=new JMenuItem(""Detener"",new ImageIcon(""icon/Stop-2-icon.png""));nivelDos=new JCheckBoxMenuItem(""Nivel Dos"",false);rules=new JMenu(""Reglas"");newomisas=new JMenuItem(""Agregar omision"");omisas=new JMenuItem(""Omisiones"");sistem.setMnemonic(KeyEvent.VK_S);agregar.setMnemonic(KeyEvent.VK_A);agregarMas.setMnemonic(KeyEvent.VK_M);borrar.setMnemonic(KeyEvent.VK_B);consultar.setMnemonic(KeyEvent.VK_C);importar.setMnemonic(KeyEvent.VK_I);exportar.setMnemonic(KeyEvent.VK_E);search.setMnemonic(KeyEvent.VK_D);start.setMnemonic(KeyEvent.VK_N);stop.setMnemonic(KeyEvent.VK_T);rules.setMnemonic(KeyEvent.VK_G);newomisas.setMnemonic(KeyEvent.VK_I);omisas.setMnemonic(KeyEvent.VK_O);menuBar=new JMenuBar();menuBar.add(sistem);sistem.add(agregar);sistem.add(agregarMas);sistem.add(borrar);sistem.add(consultar);sistem.addSeparator();sistem.add(importar);sistem.add(exportar);sistem.addSeparator();sistem.add(salir);menuBar.add(search);search.add(start);search.add(stop);search.addSeparator();search.add(nivelDos);menuBar.add(rules);rules.add(newomisas);rules.add(omisas);setJMenuBar(menuBar);clave=new JTextField(""siniestro"");clave.setBounds(5,15,350,25);clave.selectAll();add(clave);buscar=new JButton(""Buscar"");buscar.setBounds(475,14,80,27);add(buscar);box();barra=new barra();add(barra);Tabla=new JTable(crawl.getModel());Tabla.setRowHeight(80);Tabla.getColumnModel().getColumn(0).setMaxWidth(30);Tabla.getColumnModel().getColumn(0).setResizable(false);Tabla.getColumnModel().getColumn(1).setMaxWidth(150);Tabla.getColumnModel().getColumn(1).setResizable(false);Tabla.getColumnModel().getColumn(2).setMaxWidth(630);Tabla.getColumnModel().getColumn(2).setResizable(false);Tabla.getTableHeader().setReorderingAllowed(false);Tabla.setDefaultRenderer(String.class,new MultiLineCellRenderer());Consulta=new JScrollPane(Tabla);PanelTabla=new JPanel();PanelTabla.setLayout(new BorderLayout());PanelTabla.setBounds(5,50,785,546);PanelTabla.add(Consulta,BorderLayout.CENTER);add(PanelTabla);nuevoLink=new JTextField();nuevoLink.setLocation(10,10);nuevoLink.addFocusListener(new FocusListener(){  @Override public void focusGained(  FocusEvent e){    if (nuevoLink.getText().equals(""http://..."")) {      nuevoLink.setText("""");      nuevoLink.setForeground(Color.BLACK);    }  }  @Override public void focusLost(  FocusEvent e){    if (nuevoLink.getText().isEmpty() && frame == 1) {      nuevoLink.setForeground(Color.GRAY);      nuevoLink.setText(""http://..."");    }  }});cajaABC=new JComboBox<String>(estadosABC);cajaABC.insertItemAt(""Periodicos"",0);cajaABC.setSelectedIndex(0);cajaABC.setMaximumRowCount(13);cajaABC.setSize(120,30);modelAbc=new DefaultTableModel(){  private static final long serialVersionUID=1L;  @Override public Class<?> getColumnClass(  int col){switch (col) {case 0:      return int.class;default :    return String.class;}}@Override public boolean isCellEditable(int row,int col){return false;}};modelAbc.addColumn(""#"");modelAbc.addColumn(""Descripcion"");tablaAbc=new JTable(modelAbc);tablaAbc.setRowHeight(25);tablaAbc.getColumnModel().getColumn(0).setMaxWidth(35);tablaAbc.getColumnModel().getColumn(0).setResizable(false);tablaAbc.getColumnModel().getColumn(1).setMaxWidth(445);tablaAbc.getColumnModel().getColumn(1).setResizable(false);tablaAbc.getTableHeader().setReorderingAllowed(false);scrollAbc=new JScrollPane(tablaAbc);panelAbc=new JPanel();panelAbc.setLayout(new BorderLayout());panelAbc.setSize(470,237);panelAbc.add(scrollAbc,BorderLayout.CENTER);area=new JTextArea();area.setFont(nuevoLink.getFont());scrollInsert=new JScrollPane(area);panelInsert=new JPanel();panelInsert.setLayout(new BorderLayout());panelInsert.setBounds(10,10,470,277);panelInsert.add(scrollInsert,BorderLayout.CENTER);insert=new JButton(""Agregar"");insert.setSize(120,30);delete=new JButton(""Borrar"");delete.setBounds(490,258,120,30);sorter=new JTextField();sorter.setBounds(10,10,470,30);ad=new JDialog(this,""ABC periodicos"",true);ad.setLayout(null);ad.setSize(625,80);ad.setLocationRelativeTo(null);ad.setLocation(ad.getY()+17,ad.getX()-170);ad.setResizable(false);abrir=new JFileChooser();abrir.setDialogTitle(""Importar"");abrir.setAcceptAllFileFilterUsed(false);abrir.addChoosableFileFilter(new FileNameExtensionFilter(""SQL (*.sql)"",""sql""));SwingUtilities.updateComponentTreeUI(abrir);guardar=new JFileChooser();guardar.setDialogTitle(""Exportar"");guardar.setSelectedFile(new File(""periodicos.sql""));listeners();setIconImage(new ImageIcon(""loge.png"").getImage());setSize(800,650);setLayout(null);setLocationRelativeTo(null);setResizable(false);setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);setVisible(true);}"
245	"@Override public boolean onOptionsItemSelected(MenuItem item){int id=item.getItemId();if(id==R.id.action_settings){return true;}return super.onOptionsItemSelected(item);}"
246	"@Override protected void onPostExecute(Void result){if(!isCancelled()){heartbeatTask=null;}}"
247	"RangeNamesQueryPager(PartitionRangeReadCommand command,ConsistencyLevel consistencyLevel,boolean localQuery,PagingState state){this(command,consistencyLevel,localQuery);if(state!=null){lastReturnedKey=StorageService.getPartitioner().decorateKey(state.partitionKey);restoreState(state.remaining,state.remainingInPartition);}}"
248	"@Override public void onFailure(Call<LaunchResponse> call,Throwable t){isLaunchByDate=false;sendResult(new Result(Constants.ACTION_GET_PREV_LAUNCHES,false,call,t.getLocalizedMessage()));}"
249	"@Override public boolean onTouch(View v,MotionEvent event){if(null!=mAdapter&&(mAdapter.getDataSize()>0)){return false;}return true;}"
250	"public int hashCode(){return 0;}"
251	"@Override public RecommendViewHolder onCreateViewHolder(ViewGroup parent,int viewType){if(viewType==TYPE_BANNER){View inflate=LayoutInflater.from(getContext()).inflate(R.layout.list_item_recommend_banner,parent,false);return new RecommendViewHolder(inflate);}return super.onCreateViewHolder(parent,viewType);}"
252	"@NonNull public View getView(int position,View view,ViewGroup parent){LayoutInflater inflater=context.getLayoutInflater();View rowView=inflater.inflate(R.layout.mylist,null,true);String s="",,,"";String fixDesc=itemdesc[position].replaceAll(s,""\n\n"");fixDesc=fixDesc.replaceFirst(""\n\n"","""");if(fixDesc.contains(itemname[position])){fixDesc=fixDesc.replaceAll(itemname[position],"""");}ImageView imageView=rowView.findViewById(R.id.icon);TextView txtTitle=rowView.findViewById(R.id.itemTitle);TextView extratxt=rowView.findViewById(R.id.itemDesc);txtTitle.setTypeface(MainActivity.typeface);extratxt.setTypeface(MainActivity.typefaceBody);if(!itemname[position].isEmpty()){if(itemname[position].contains("":SCHOOLNOTICE:"")){String replaceFirst=itemname[position];String replaceNotice=replaceFirst.replaceFirst("":SCHOOLNOTICE:"","""");txtTitle.setTextColor(ContextCompat.getColor(context,R.color.colorNotice));txtTitle.setText(replaceNotice.toUpperCase());rowView.setBackgroundColor(ContextCompat.getColor(context,R.color.colorNoticeBkg));}else {txtTitle.setText(itemname[position]);}}else {txtTitle.setTextSize(0);txtTitle.setText("""");}try{Picasso.with(context).load(imgid[position]).into(imageView);}catch(IllegalArgumentException ignored){}fixDesc=fixDesc.trim();String nl=fixDesc+""\n"";extratxt.setText(nl);return rowView;}"
253	"private void itemAddedEvent(ItemAddedEvent event) throws ItemNotFoundException{String itemName=event.getItem().name;Item item=itemRegistry.getItem(itemName);for(IEventSubscriber subscriber : eventSubscribers){subscriber.itemAdded(item);}logger.debug(event.toString());}"
254	"@Override public void handle(MouseEvent event){if(event.isPrimaryButtonDown()){firing=true;}}"
255	"@Override public void mouseClicked(MouseEvent e){if(e.getSource().equals(cardicon)||e.getSource().equals(cardtext)||e.getSource().equals(icon)){if(accessible){if(e.getButton()==MouseEvent.BUTTON1){deck.getModus().open(this);}else {deck.openWithoutRemoval(this);}}}}"
256	"float valueOf(Pledge p,Actor a){if(a!=p.refers){return 0;}return a.motives.greedPriority(p.amount);}"
257	"@Override public void buildString(StringBuilder sb,int sequence,boolean yieldNumber){sb.append(prefix);if(!canYieldNumber||!yieldNumber||sequence!=0){sb.append(sequence+base);}}"
258	"public void onClick(View v){qa.dismiss();whatToDo=OBSCURE;obscureType=SOLID;imageEditor.updateDisplayImage();}"
259	"@Override public int result(){return 0;}"
260	"public void run(){if(waitForOrderRs){}}"
261	"@Override public boolean matches(char c){return table.get(c);}"
262	"private void simulate(){ball.goToNext();int reflectOpt;reflectOpt=collisionCheck();switch (reflectOpt){case 1 :ball.invertXVector();break;case 2 :ball.invertYVector();break;case 3 :ball.invertBoth();break;default :break;}}"
263	"@Override public int yAt(int x){return (int)Math.rint(yAt((double)x));}"
264	"@Override public void run(){try{InputStreamReader isr=new InputStreamReader(is);BufferedReader br=new BufferedReader(isr);String line=null;while((line=br.readLine())!=null){synchronized(output){output.append(line).append(""\n"");}}}catch(IOException ex){return ;}finally{close();}}"
265	"@Override public boolean onItemClick(View view,int position,IDrawerItem drawerItem){if(drawerItem!=null){Fragment f=null;if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_home_index))){f=ProductFragment.newInstance(mContext,mSeller);}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_profile_index))){f=ProfileFragment.newInstance(mContext,mSeller);}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_order_index))){f=OrderFragment.newInstance(mContext,mSeller);}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_add_product_index))){Intent intent=new Intent(mContext,AddProductActivity.class);mContext.startActivity(intent);}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_info_index))){f=InfoFragment.newInstance();}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_help_index))){f=HelpFragment.newInstance();}else {if(drawerItem.getIdentifier()==Integer.parseInt(mContext.getString(R.string.menu_item_exit_index))){finish();}}}}}}}if(f!=null){getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,f).addToBackStack(null).commit();}}return false;}"
266	"public void run(GeoMesaOptions options) throws InterruptedException,IOException{Map<String,String> kafkaParams=new HashMap<>();Set<String> topicsSet=new HashSet<>();kafkaParams.put(""metadata.broker.list"",""scats-1-interface:9092"");topicsSet.add(""tweets"");GeoMesaDataUtils.saveFeatureType(options,TweetsFeatureFactory.SFT);JavaStreamingContext ssc=new JavaStreamingContext(sparkConf,Durations.seconds(10));JavaPairInputDStream<String,String> directKafkaStream=KafkaUtils.createDirectStream(ssc,String.class,String.class,StringDecoder.class,StringDecoder.class,kafkaParams,topicsSet);directKafkaStream.toJavaDStream().foreachRDD(tickRDD -> {  Long nxtCluId=0L;  Long minPts=3L;  Long maxPts=100L;  Long dist_time=600000L;  Double dist_spatial=0.1D;  Double spatioTemp_ratio=0.1D / 600000;  Double epsilon=DbscanTask.get_STDistance_radian(dist_spatial,dist_time,spatioTemp_ratio);  JavaPairRDD<String,STObj> incomeRDD=tickRDD.distinct().flatMapToPair(tuple -> {    List<Tuple2<String,STObj>> flatted=new ArrayList<>();    try {      Tweet t=Tweet.fromJSON(tuple._2);      if (t != null && t.getCoordinates() != null) {        SimpleFeature sf=TweetsFeatureFactory.createFeature(t);        Date ts=(Date)sf.getAttribute(TweetsFeatureFactory.CREATED_AT);        STObj stObj=new STObj(sf,ts,null,null,t.toJSON());        flatted.add(new Tuple2<>(stObj.getObjId(),stObj));      }    } catch (    JsonSyntaxException ignored) {      logger.warn(ignored.getMessage());    }    return flatted.iterator();  });  if (incomeRDD.isEmpty())   return;  List<STObj> reducedBorderPoints=incomeRDD.aggregate(new ArrayList<STObj>(2),(list,t) -> {    if (list.isEmpty()) {      list.add(0,t._2);      list.add(1,t._2);    } else {      if (t._2.getTimestamp().getTime() < list.get(0).getTimestamp().getTime())       list.set(0,t._2);      if (t._2.getTimestamp().getTime() > list.get(1).getTimestamp().getTime())       list.set(1,t._2);    }    return list;  },(list1,list2) -> {    if (list1.isEmpty())     return list2; else     if (list2.isEmpty())     return list1; else {      if (list2.get(0).getTimestamp().getTime() < list1.get(0).getTimestamp().getTime())       list1.set(0,list2.get(0));      if (list2.get(1).getTimestamp().getTime() > list1.get(1).getTimestamp().getTime())       list1.set(1,list2.get(1));      return list1;    }  });  if (reducedBorderPoints.size() < 2 || reducedBorderPoints.get(0) == null || reducedBorderPoints.get(1) == null)   return;  Long timeMinDis=DbscanTask.covertToTimeDiff(epsilon,spatioTemp_ratio) * (minPts - 1);  Date queryStartTime=new Date(reducedBorderPoints.get(0).getTimestamp().getTime() - timeMinDis);  Date queryEndTime=new Date(reducedBorderPoints.get(1).getTimestamp().getTime() + timeMinDis);  Filter filter=null;  try {    filter=CQL.toFilter(""created_at DURING "" + (new DateTime(queryStartTime)).toString() + ""/""+ (new DateTime(queryEndTime)).toString());  } catch (  CQLException e) {    logger.warn(e.getMessage());  }  GeoMesaWriter writer=GeoMesaWriter.getThreadSingleton(options,TweetsFeatureFactory.FT_NAME);  Iterator<SimpleFeature> sfItr=writer.read(filter);  ArrayList<STObj> historyDataList=new ArrayList<>();  sfItr.forEachRemaining(sf -> {    String tweetId=TweetsFeatureFactory.getObjId(sf);    if (tweetId != null) {      Date ts=(Date)sf.getAttribute(TweetsFeatureFactory.CREATED_AT);      String clusterId=(String)sf.getAttribute(TweetsFeatureFactory.CLUSTER_ID);      String clusterLabel=(String)sf.getAttribute(TweetsFeatureFactory.CLUSTER_LABEL);      Tweet tweet=TweetsFeatureFactory.fromSFtoPojo(sf);      STObj stObj=new STObj(sf,ts,clusterId,clusterLabel,tweet.toJSON());      stObj.setNewInput(false);      historyDataList.add(stObj);    }  });  JavaPairRDD<String,STObj> historyRDD=ssc.sparkContext().parallelize(historyDataList).flatMapToPair(stObj -> {    List<Tuple2<String,STObj>> flatted=new ArrayList<>();    if (stObj != null && stObj.getObjId() != null)     flatted.add(new Tuple2<>(stObj.getObjId(),stObj));    return flatted.iterator();  });  JavaPairRDD<String,STObj> union=incomeRDD.union(historyRDD).reduceByKey((stObj1,stObj2) -> {    if (stObj1.isNewInput())     return stObj1; else     return stObj2;  });  union.persist(StorageLevel.MEMORY_AND_DISK());  List<Map.Entry<Vector<Double>,Boolean>> points=union.map(tuple -> Maps.immutableEntry(tuple._2.getSTVector(spatioTemp_ratio),tuple._2.isNewInput())).collect();  double min_t=DbscanTask.get_STDistance_radian(0d,queryStartTime.getTime(),spatioTemp_ratio);  double max_t=DbscanTask.get_STDistance_radian(0d,queryEndTime.getTime(),spatioTemp_ratio);  ReferencedEnvelope3D bbox=new ReferencedEnvelope3D(144.624,145.624,-38.03535,-37.03535,min_t,max_t,null);  ClusterCell topCell=new ClusterCell(""000"",points,bbox);  CellsPartitioner partitioner=new CellsPartitioner(topCell,2 * epsilon,maxPts,minPts,epsilon);  partitioner.doPartition();  Map<String,ClusterCell> map=partitioner.getCellsMap();  map.forEach((id,clusterCell) -> {    System.out.println(id);    System.out.println(clusterCell.getPoints());    System.out.println(clusterCell.getFinalSize());    System.out.println(clusterCell.getBbx());    System.out.println(""============================="");  });  Broadcast<Map<String,ClusterCell>> b_cellsMap=ssc.sparkContext().broadcast(map);  JavaPairRDD<String,Iterable<STObj>> shuffledPairRDD=union.flatMapToPair(tuple -> {    ArrayList<Tuple2<String,STObj>> result=new ArrayList<>();    Vector<Double> coordinate=tuple._2.getSTVector(spatioTemp_ratio);    Iterator<Map.Entry<String,ClusterCell>> cellItr=b_cellsMap.getValue().entrySet().iterator();    while (cellItr.hasNext()) {      Map.Entry<String,ClusterCell> entry=cellItr.next();      if (entry.getValue().getBbx().contains(coordinate.get(0),coordinate.get(1),coordinate.get(2))) {        result.add(new Tuple2<>(entry.getValue().getCellId(),tuple._2));      }    }    if (result.isEmpty())     result.add(new Tuple2<>(""NOISE"",tuple._2));    return result.iterator();  }).groupByKey();  JavaPairRDD<String,STObj> localClusteredRDD=shuffledPairRDD.flatMapToPair(tuple -> {    ArrayList<Tuple2<String,STObj>> result=new ArrayList<>();    Map<String,STObj> toBeUpdated;    if (!tuple._1.equals(""NOISE"")) {      toBeUpdated=DbscanTask.localDBSCAN(tuple._2,epsilon,spatioTemp_ratio,minPts);      toBeUpdated.forEach((id,STObj) -> {        result.add(new Tuple2<>(id,STObj));      });    } else {      tuple._2.forEach(stObj -> {        result.add(new Tuple2<>(""NOISE#"" + stObj.getObjId(),stObj));      });    }    return result.iterator();  });  JavaPairRDD<String,ArrayList<STObj>> objId_STObj_pair=localClusteredRDD.flatMapToPair(tuple -> {    ArrayList<Tuple2<String,STObj>> result=new ArrayList<>();    String[] ids=tuple._1.split(""#"");    if (!ids[0].equals(""NOISE"")) {      result.add(new Tuple2<>(ids[1],tuple._2));    }    return result.iterator();  }).aggregateByKey(new ArrayList<>(),(list,stObj) -> {    list.add(stObj);    return list;  },(list1,list2) -> {    list1.addAll(list2);    return list1;  });  JavaPairRDD<HashSet<String>,String> from_to_ClusterIdPair=objId_STObj_pair.flatMapToPair(tuple -> {    ArrayList<Tuple2<HashSet<String>,String>> result=new ArrayList<>();    ArrayList<STObj> stObjs=tuple._2;    STObj core=null;    HashSet<String> set=new HashSet<>();    for (    STObj stObj : stObjs) {      assert (tuple._1.equals(stObj.getObjId()));      set.add(stObj.getClusterID());      if (stObj.getClusterLabel() != null && stObj.getClusterLabel().equals(STObj.LABEL_CORE)) {        core=stObj;      }    }    if (core == null) {      if (stObjs.size() > minPts)       core=stObjs.get(0);    }    if (core != null) {      result.add(new Tuple2<>(set,core.getClusterID()));    } else {    }    return result.iterator();  });  ArrayList<Tuple2<HashSet<String>,String>> set_list=Lists.newArrayList(from_to_ClusterIdPair.collect());  HashMap<String,String> newMap=new HashMap<>();  while (set_list.size() > 0) {    Tuple2<HashSet<String>,String> seed=set_list.remove(0);    HashSet<String> seed_set=seed._1;    String seed_id=seed._2;    Iterator<Tuple2<HashSet<String>,String>> itr=set_list.iterator();    ArrayList<Tuple2<HashSet<String>,String>> toRemove=new ArrayList<>();    while (itr.hasNext()) {      Tuple2<HashSet<String>,String> candidate=itr.next();      HashSet<String> candidate_set=candidate._1;      Set<String> intersection=new HashSet<>(candidate_set);      intersection.retainAll(seed_set);      if (intersection.size() > 0) {        seed_set.addAll(candidate_set);        toRemove.add(candidate);      }    }    seed_set.forEach(oldId -> {      newMap.put(oldId,seed_id);    });    set_list.removeAll(toRemove);  }  Broadcast<HashMap<String,String>> b_mergeMap=ssc.sparkContext().broadcast(newMap);  JavaPairRDD<String,STObj> resultMap=localClusteredRDD.flatMapToPair(tuple -> {    ArrayList<Tuple2<String,STObj>> result=new ArrayList<>();    String objId=tuple._1.split(""#"")[1];    result.add(new Tuple2<>(objId,tuple._2));    return result.iterator();  }).aggregateByKey(new ArrayList<STObj>(),(list,stObj) -> {    list.add(stObj);    return list;  },(list1,list2) -> {    list1.addAll(list2);    return list1;  }).mapToPair(tuple -> {    ArrayList<STObj> stObjs=tuple._2;    STObj resultPoint=null;    STObj core=null;    for (    STObj stObj : stObjs) {      if (stObj.getClusterLabel() != null && stObj.getClusterLabel().equals(STObj.LABEL_CORE)) {        core=stObj;        break;      }    }    if (core == null && stObjs.size() > minPts) {      core=stObjs.get(0);      core.setClusterLabel(STObj.LABEL_CORE);    }    if (core == null) {      resultPoint=stObjs.get(0);    } else     resultPoint=core;    String toClusterId=b_mergeMap.getValue().get(resultPoint.getClusterID());    if (toClusterId != null)     resultPoint.setClusterID(toClusterId);    return new Tuple2<>(resultPoint.getObjId(),resultPoint);  });  JavaRDD<STObj> finalRDD=union.union(resultMap).reduceByKey((stObj1,stObj2) -> {    if (stObj1.getClusterID() != null)     return stObj1; else     return stObj2;  }).map(t -> {    return t._2;  });  JavaRDD<SimpleFeature> finalSFRDD=finalRDD.map(stObj -> {    Tweet tweet=Tweet.fromJSON(stObj.getJson());    SimpleFeature sf=TweetsFeatureFactory.createFeature(tweet);    sf.setAttribute(TweetsFeatureFactory.CLUSTER_ID,stObj.getClusterID());    sf.setAttribute(TweetsFeatureFactory.CLUSTER_LABEL,stObj.getClusterLabel());    return sf;  });  FeatureRDDToGeoMesa.save(options,finalSFRDD,ssc.sparkContext());  FeatureRDDToGeoMesa.closeFeatureWriterOnSparkExecutors(ssc.sparkContext());});ssc.sparkContext().setLogLevel(""WARN"");ssc.start();ssc.awaitTermination();}"
267	"private void setItemRects(){itemRects=new Rect[grid_rows*grid_columns];for(int i=0;i<grid_rows*grid_columns;i++){itemRects[i]=new Rect((i%grid_rows)*device_width/grid_rows,(i/grid_rows)*zControlView.getHeight()/grid_columns,(i%grid_rows+1)*device_width/grid_rows,(i/grid_rows+1)*zControlView.getHeight()/grid_columns);}}"
268	"public Path create(Path path,String name,String defSetId,Metadata metadata){ final DefinitionSetService services=getServicesById(defSetId);if(null==services){throw new IllegalStateException(""No backend Definition Set services for [""+defSetId+""]"");} final String fName=buildFileName(name,services.getResourceType()); final org.uberfire.java.nio.file.Path kiePath=Paths.convert(path).resolve(fName);try{if(ioService.exists(kiePath)){throw new FileAlreadyExistsException(kiePath.toString());} final D diagram=factoryManager.newDiagram(name,defSetId,metadata); final String[] raw=serizalize(diagram);ioService.write(kiePath,raw[0]);return Paths.convert(kiePath);}catch(Exception e){LOG.error(""Cannot create diagram in path [""+kiePath+""]"",e);}return null;}"
269	"@Override public void onClick(View v){if(mAuth.getCurrentUser()!=null){if(!mAuth.getCurrentUser().isEmailVerified()){if(mAuth.getCurrentUser().getEmail().equals(mUsernameField.getText().toString())){Toast.makeText(this,""Your email is not verified. Pleas verifiy your email."",Toast.LENGTH_LONG).show();}}else {startActivity(new Intent(this,Main.class));}}startSignIn();}"
270	"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){super.onLayout(changed,left,top,right,bottom);{buildMask();updateTipPos();}}"
271	"private void saveRecord(){Thread schedule=new Thread(new Runnable(){  @Override public void run(){    JSONObject jsonObject=null;    try {      jsonObject=new JSONObject();      jsonObject.put(""date"",date.getText().toString());      jsonObject.put(""start_time"",start_time.getText().toString() + "":00"");      jsonObject.put(""end_time"",end_time.getText().toString() + "":00"");      jsonObject.put(""break_time"",toMins(break_time.getText().toString()));      jsonObject.put(""work_time"",toMins(work_time.getText().toString()));      jsonObject.put(""is_weekend"",0);      jsonObject.put(""tid"",currentTID);      jsonObject.put(""comments"",comments.getText().toString());    } catch (    JSONException e) {      e.printStackTrace();    }    Log.d(TAG,jsonObject.toString());    Response response;    if (editMode == 1) {      response=Controller.AppEvent(Controller.Action.INSERT_RECORD,"""",jsonObject);    } else {      response=Controller.AppEvent(Controller.Action.UPDATE_RECORD,record_ID,jsonObject);    }    if (response.isSuccessful()) {      EditorActivity.this.runOnUiThread(new Runnable(){        @Override public void run(){          if (editMode == 1) {            Toast.makeText(getApplicationContext(),""New record added!"",Toast.LENGTH_LONG).show();            EditorActivity.this.finish();          } else {            Toast.makeText(getApplicationContext(),""Record upadted!"",Toast.LENGTH_LONG).show();          }        }      });    }  }});schedule.start();}"
272	"private List<Result> transformAndEvaluate(List<Sequence> sequences,PairIntArray p,PairIntArray q,float[][][] md) throws NoSuchAlgorithmException{int topK=20;if(topK>sequences.size()){topK=sequences.size();}List<Result> results=new ArrayList<Result>();for(int i=0;i<topK;++i){Sequence s=sequences.get(i);if(s.length()<7){continue;}Result result=addByTransformation(s,p,q);populateWithChordDiffs(result,md,p.getN(),q.getN());results.add(result);}if(results.isEmpty()){return null;}Collections.sort(results,new ResultComparator(results,p.getN()));return results;}"
273	"@Override public void connected(){loadPage(true,null);}"
274	"@Override public void onClick(DialogInterface dialog,int which){}"
275	"public Optional<NotificationMethod> resolveNotificationMethod(Class<?> clazz){ContainerNamespace namespace=namespaces.get(clazz);if(namespace==null){return Optional.empty();}for(Method method : clazz.getDeclaredMethods()){if(method.getAnnotation(AfterContainerStart.class)==null){continue;}ensureParameterTypes(method);List<PortRef> portReferences=new ArrayList<>(method.getParameterCount());for(Annotation[] args : method.getParameterAnnotations()){ContainerPort portRef=retrieveAnnotation(args);if(portRef==null){throw new IllegalStateException(""All parameters should be marked with @ContainerPort: ""+method);}portReferences.add(new PortRef(namespace.getDefinition(portRef.name()),portRef.port()));}return Optional.of(new NotificationMethod(namespace,method,portReferences));}return null;}"
276	"public void onResponse(Response response){OkHttpUtil.getInstance().getHandler().post(new Runnable(){  @Override public void run(){    try {      onSuccess(convertResponse(response));    } catch (    IOException e) {      e.printStackTrace();    }  }});onAfter();}"
277	"private Object retrieveEntityAttributeInternal(String entityName,Object id,String refAttributeName,EntityCollectionRequest request,Set<String> attributesSet,Map<String,Set<String>> attributeExpandSet){EntityMetaData meta=dataService.getEntityMetaData(entityName);AttributeMetaData attr=meta.getAttribute(refAttributeName);if(attr==null){throw new UnknownAttributeException(entityName+"" does not have an attribute named ""+refAttributeName);}Entity entity=dataService.findOne(entityName,id);if(entity==null){throw new UnknownEntityException(entityName+"" ""+id+"" not found"");}String attrHref=String.format(BASE_URI+""/%s/%s/%s"",meta.getName(),entity.getIdValue(),refAttributeName);switch (attr.getDataType().getEnumType()){case COMPOUND :Map<String,Object> entityHasAttributeMap=new LinkedHashMap<String,Object>();entityHasAttributeMap.put(""href"",attrHref); @SuppressWarnings(""unchecked"") Iterable<AttributeMetaData> attributeParts=(Iterable<AttributeMetaData>)entity.get(refAttributeName);for(AttributeMetaData attributeMetaData : attributeParts){String attrName=attributeMetaData.getName();entityHasAttributeMap.put(attrName,entity.get(attrName));}return entityHasAttributeMap;case CATEGORICAL_MREF :case MREF :List<Entity> mrefEntities=new ArrayList<Entity>();for(Entity e : entity.getEntities((attr.getName()))){mrefEntities.add(e);}int count=mrefEntities.size();int toIndex=request.getStart()+request.getNum();mrefEntities=mrefEntities.subList(request.getStart(),toIndex>count?count:toIndex);List<Map<String,Object>> refEntityMaps=new ArrayList<Map<String,Object>>();for(Entity refEntity : mrefEntities){Map<String,Object> refEntityMap=getEntityAsMap(refEntity,attr.getRefEntity(),attributesSet,attributeExpandSet);refEntityMaps.add(refEntityMap);}EntityPager pager=new EntityPager(request.getStart(),request.getNum(),(long)count,mrefEntities);return new EntityCollectionResponse(pager,refEntityMaps,attrHref);case XREF :Map<String,Object> entityXrefAttributeMap=getEntityAsMap((Entity)entity.get(refAttributeName),attr.getRefEntity(),attributesSet,attributeExpandSet);entityXrefAttributeMap.put(""href"",attrHref);return entityXrefAttributeMap;default :Map<String,Object> entityAttributeMap=new LinkedHashMap<String,Object>();entityAttributeMap.put(""href"",attrHref);entityAttributeMap.put(refAttributeName,entity.get(refAttributeName));return entityAttributeMap;}}"
278	"public int sentimentMapper(int i){int range=this.number_of_topic/2;return topicMapper(i)/range;}"
279	"@Override public void onClick(View view){isFromLoc=true;openAutocompleteActivity();}"
280	"@Override public void accept(DownloadEvent event) throws Exception{int flag=event.getFlag();btn.setTag(R.id.tag_apk_flag,flag);bindClick(btn,mAppBean);switch (flag){case DownloadFlag.INSTALLED :btn.setText(""??"");break;case DownloadFlag.NORMAL :btn.download();break;case DownloadFlag.STARTED :btn.setProgress((int)event.getDownloadStatus().getPercentNumber());break;case DownloadFlag.PAUSED :btn.setProgress((int)event.getDownloadStatus().getPercentNumber());btn.paused();break;case DownloadFlag.COMPLETED :btn.setText(""??"");break;case DownloadFlag.FAILED :btn.setText(""??"");break;case DownloadFlag.DELETED :break;}}"
281	"private void createApple(){Random random=new Random();int randomInt=random.nextInt()%10;if(randomInt>6){Sprite apple=new Sprite(0,0,false);apple.setBitmapAndAutoChangeWH(appleTexture);apple.setPosition(sceneWidth+apple.w,theY-appleTexture.getHeight());arrApple.add(apple);this.addChild(apple);}}"
282	"@Override public int compare(State o1,State o2){int costCValue=Short.compare(o1.cost,o2.cost);if(costCValue!=0){return costCValue;}else {if(o1.c1.cardinality()!=o2.c1.cardinality()){return Integer.compare(o2.c1.cardinality(),o1.c1.cardinality());}else {if(o1.c2.size()!=o2.c2.size()){return Integer.compare(o2.c2.size(),o1.c2.size());}}}return -1;}"
283	"@Override void updateIndex(int offset,IndexMap indexMap,int oldIndex,int newIndex){indexMap.stringIds[oldIndex]=newIndex;}"
284	"public static Boolean checkReplayComment(Comment replayComment,Message underMessage){checkIsDelete(replayComment);if(!replayComment.getUnderWhichMessage().equals(underMessage)){throw new UnderMessageNotEqualException();}return true;}"
285	"public void refreshTable(){String criteria=(String)cbSearchFilters.getSelectedItem();String filter=txtSearchFilter.getText();if(!criteria.equals(""Show all"")&&(filter.equals(null)||filter.equals(""""))){txtSearchFilter.setBackground(Color.LIGHT_GRAY);message=""Please, enter the value in search filter!"";displayMessageDialogBox();}else {if(criteria.equals(""Book title"")){if(onlyAvail.isSelected()){model=new KnjigaTableModel(primjerakServiceBean.getAllAvailableKnjigeByNaslov(filter));}else {model=new KnjigaTableModel(knjigaServiceBean.getKnjigaByNaslov(filter));}}else {if(criteria.equals(""Author"")){String[] spliter=filter.split("" "");if(spliter.length!=2){txtSearchFilter.setBackground(Color.LIGHT_GRAY);message=""Please, enter the author's first and last name!"";displayMessageDialogBox();}else {if(onlyAvail.isSelected()){model=new KnjigaTableModel(primjerakServiceBean.getAllAvailableKnjigeByAutor(spliter[0],spliter[1]));}else {model=new KnjigaTableModel(autorKnjigaServiceBean.getKnjigeByAutor(spliter[0],spliter[1]));}}}else {if(criteria.equals(""Publisher"")){if(onlyAvail.isSelected()){model=new KnjigaTableModel(primjerakServiceBean.getAllAvailableKnjigeByIzdavac(filter));}else {model=new KnjigaTableModel(knjigaServiceBean.getKnjigaByIzdavac(filter));}}else {if(criteria.equals(""Subject"")){if(onlyAvail.isSelected()){model=new KnjigaTableModel(primjerakServiceBean.getAllAvailableKnjigeByPredmet(filter));}else {model=new KnjigaTableModel(literaturaServiceBean.getLiteraturaByPredmet(filter));}}else {if(onlyAvail.isSelected()){model=new KnjigaTableModel(primjerakServiceBean.getAllAvailableKnjige());}else {model=new KnjigaTableModel(knjigaServiceBean.getAllKnjige());}}}}}table.setModel(model);if(table.getRowCount()==0){message=""No result found!"";displayMessageDialogBox();}}getContentPane().repaint();getContentPane().revalidate();}"
286	"public void invalidateStore(long storeId){storeCache.invalidate(storeId);}"
287	"public static ImageLoader getImageLoader(Context con){if(imageLoader==null){imageLoader=new ImageLoader();}context=con;CACHE_PATH=context.getFilesDir().getAbsolutePath();return imageLoader;}"
288	"@Override public String replace(Character self,String first,String second,String third){if(self!=null){return self.nameOrPossessivePronoun();}return """";}"
289	"public Table query(Condition condition){if(condition.getLeftConstant()!=null&&condition.getRightConstant()!=null){Object left=Condition.getConstant(condition.getLeftConstant());Object right=Condition.getConstant(condition.getRightConstant());boolean result=Condition.calculateResult(left,right,condition.getOperator());Table table=new ArrayListTable(""result"",mAttributeNames,mAttributeTypes,-1,-1);if(result){table.insertAll(getAllRecords());return table;}else {return table;}}else {if(condition.getLeftConstant()!=null&&condition.getRightConstant()==null){int columnIndex=condition.getRightAttributeIndex();Object right=Condition.getConstant(condition.getLeftConstant());BinaryOperator operator=Condition.reverseOperator(condition.getOperator());return query(columnIndex,right,operator);}else {if(condition.getLeftConstant()==null&&condition.getRightConstant()!=null){int columnIndex=condition.getLeftAttributeIndex();Object right=Condition.getConstant(condition.getRightConstant());BinaryOperator operator=condition.getOperator();return query(columnIndex,right,operator);}else {Table table=new ArrayListTable(""result"",mAttributeNames,mAttributeTypes,-1,-1);if(!condition.getLeftTableName().equals(condition.getRightTableName())){return table;}ArrayList<DataRecord> allRecords=getAllRecords();int leftIndex=mAttributeNames.indexOf(condition.getLeftAttribute());int rightIndex=mAttributeNames.indexOf(condition.getRightAttribute());if(leftIndex==-1||rightIndex==-1){return table;}for(DataRecord record : allRecords){if(Condition.calculateResult(record.get(leftIndex),record.get(rightIndex),condition.getOperator())){table.insert(record);}}return table;}}}}"
290	"public boolean isComplete(){return true;}"
291	"public void addingNewPart(){addPartSaveBtn.setEnabled(false);String newPartType=String.valueOf(partTypeComboBox.getSelectedItem());tableColums=currentUser.getTableColName(newPartType);ArrayList<String> dataType=currentUser.getTableData();System.out.print(tableColums+"" - ""+dataType);for(int i=0;i<labels.size();i++){addPart.remove(labels.get(i));if(i<labels.size()/2){addPart.remove(inputbox.get(i));}}labels.clear();inputbox.clear();int y=130,x=0;for(String name : tableColums){JLabel label100=new JLabel(name+"": "",SwingConstants.RIGHT);label100.setBounds(0,y,160,30);labels.add(label100);addPart.add(label100);JLabel label1000=new JLabel(dataType.get(x),SwingConstants.RIGHT);label1000.setBounds(0,y,80,30);label1000.setName(name+""Lable"");label1000.setVisible(false);labels.add(label1000);addPart.add(label1000);JTextField textField=new JTextField(10);textField.setName(name+""Input"");textField.setBounds(170,y,260,30);textField.getDocument().addDocumentListener(new DocumentListener(){  public void changedUpdate(  DocumentEvent e){    addingNewPartValidation(name);  }  public void removeUpdate(  DocumentEvent e){    addingNewPartValidation(name);  }  public void insertUpdate(  DocumentEvent e){    addingNewPartValidation(name);  }});inputbox.add(textField);addPart.add(textField);y+=40;x++;}createComponentMap();addPart.repaint();}"
292	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
293	"@Override public void onProgressUpdate(int progress,int max){Log.v(TAG,String.format(""Collected %s/%s"",progress,max));}"
294	"public static Tournee fackTournee(){Tournee res=new Tournee();int[][][] data={getTmp1(),getTmp2()};List<Trajet> trajets=new ArrayList<>();for(int i=0;i<5;i++){Trajet t=new Trajet();List<Troncon> troncons=t.getListOfTroncon();int[][] data_=data[(int)(Math.random()*data.length)];int index=(int)(Math.random()*data_.length-10);for(int j=0;j<10;j++){int[] data__=data_[index+j];troncons.add(fackTroncon(data__[0],data__[1],data__[2],data__[3]));}trajets.add(t);}res.setDeliveries(trajets);return res;}"
295	"public void onClick(DialogInterface dialog,int which){}"
296	"public Integer aggregate(){return readOps;}"
297	"@Override protected void done(){parent.jpb.setIndeterminate(false);parent.Cardframe.validate();NearestNeighbourSearch NNsearch=new NearestNeighbourSearch(parent.ALLIntersections,parent.thirdDimension,parent.fourthDimensionSize,parent.maxdistance);NNsearch.process();parent.parentgraph=NNsearch.getResult();Lineage();System.out.println(""Size of graph""+parent.parentgraph.vertexSet().size());try{get();}catch(InterruptedException e){}catch(ExecutionException e){}}"
298	"private void setupChat(){Log.d(""setupChat()"");mConversationArrayAdapter=new ArrayAdapter<String>(this,R.layout.message);mConversationView=(ListView)findViewById(R.id.in);mConversationView.setAdapter(mConversationArrayAdapter);mChatService=new BluetoothChatService(this,mHandler);}"
299	"private static int execute(){ProfileComponents comps=ProfileComponents.readIn(options.getProfilefile());if(comps==null){return 1;}RemoteInvocation rinv=config.toolconfig.designCompilerCmd;if(rinv==null){return 1;}RemoteInformation rinfo=new RemoteInformation(rinv.hostname,rinv.username,rinv.password,rinv.workingdir);VerilogParser vparser=new VerilogParser();if(!vparser.parseVerilogStructure(options.getVfile())){return 1;}EligibleModuleFinder find=new EligibleModuleFinder(comps);Map<String,DelayMatchModule> modules=find.find(vparser.getModules());if(modules==null){return 1;}logger.info(""Measure phase"");MeasureMain memain=new MeasureMain(rinfo,modules,vparser.getRootModule(),options.isFuture(),options.getSTGfile());if(!memain.measure(options.getVfile())){return 1;}logger.info(""Match phase"");MatchMain mamain=new MatchMain(rinfo,modules,memain.getTransTable());if(!mamain.match(options.getVfile())){return 1;}if(!FileHelper.getInstance().copyfile(mamain.getMatchedfilename(),options.getOutfile())){return 1;}return 0;}"
300	"private static WringGroup find(Class<? extends Kind> c){for(WringGroup $ : WringGroup.values()){if($.clazz==c){return $;}}return null;}"
301	"public TableView getArtworksSold(Profile profile){TableView<Artwork> artworksSoldTable=new TableView<>();artworksSoldTable.setEditable(false);TableColumn<Artwork,String> artworkTitleCol=new TableColumn<>(""Artwork Title"");TableColumn<Artwork,String> priceSoldCol=new TableColumn<>(""Price Sold (?)"");TableColumn<Artwork,String> WinningBidderCol=new TableColumn<>(""Winning Bidder"");artworkTitleCol.setMinWidth(200);priceSoldCol.setMinWidth(200);WinningBidderCol.setMinWidth(200);artworkTitleCol.setCellValueFactory(new PropertyValueFactory<>(""title""));priceSoldCol.setCellValueFactory(new PropertyValueFactory<>(""price""));WinningBidderCol.setCellValueFactory(new PropertyValueFactory<>(""creatorsName""));ObservableList<Artwork> allWonArtworks=FXCollections.observableArrayList();for(int i=0;i<auctionManager.getAllElements().size();i++){}artworksSoldTable.setItems(allWonArtworks);artworksSoldTable.getColumns().addAll(artworkTitleCol,priceSoldCol,WinningBidderCol);}"
302	"public CharSequence getLabelForAccessibility(Context context){return null;}"
303	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);mEncyclopediaManager=new EncyclopediaManager(this);mPlanetEntries=mEncyclopediaManager.getList();setContentView(R.layout.activity_encyclopedia);getSupportActionBar().setTitle(R.string.encyclopedia_title);getSupportActionBar().setDisplayHomeAsUpEnabled(true);EncyclopediaDetailsFragment encyclopediaDetailsFragment=(EncyclopediaDetailsFragment)getSupportFragmentManager().findFragmentById(R.id.encyclopedia_details_fragment);if(encyclopediaDetailsFragment!=null){EncyclopediaEntry planetEntry=mPlanetEntries.get(0);encyclopediaDetailsFragment.setTextViewPlanetName(planetEntry.getName());encyclopediaDetailsFragment.setImageViewPlanet(planetEntry.getImage());encyclopediaDetailsFragment.setTextViewPlanetDescription(planetEntry.getDescription());}}"
304	"public AsynCon(AsynchronousSocketChannel channel,WebSocket session,ByteBuffer buffer){this.channel=channel;this.session=session;this.buffer=buffer;isFirst=true;}"
305	"@SuppressWarnings(""unchecked"") public void addSystem(T component,Integer quantity){T componentToClone=component;for(Integer ind=0;ind<quantity;ind++){T clonedComponent=(T)ObjectCloner.xmlClone(componentToClone);systems.add(clonedComponent);}}"
306	"public int getPower(Battle b,ActivePokemon me,ActivePokemon o){return this.power;}"
307	"private static Map xml_readMap(Document doc,Element e_map){if(doc==null||e_map==null){RunGame.errOut(""xml_readMap: invalid (null) argument"");return null;}keyLinks_=new HashMap<>();try{src.model.Map ret_map;Element e_mapgrid=(Element)e_map.getElementsByTagName(SavedGame.XML_MAP_MAPGRID).item(0);Integer map_x=Integer.parseInt(e_mapgrid.getAttributes().getNamedItem(SavedGame.XML_MAP_MAPGRID_WIDTH).getNodeValue());Integer map_y=Integer.parseInt(e_mapgrid.getAttributes().getNamedItem(SavedGame.XML_MAP_MAPGRID_HEIGHT).getNodeValue());RunGame.dbgOut(""XML Parsed: map grid x = ""+map_x,4);RunGame.dbgOut(""XML Parsed: map grid y = ""+map_y,4);ret_map=new src.model.Map(map_x,map_y);HashMap<TemporaryObstacleItem,String> keyLinks=new HashMap<>();NodeList ns_tiles=e_mapgrid.getElementsByTagName(""map_tile"");int x,y;Node tn_tile,tn_data;Terrain t_terr;for(int i=0;i<ns_tiles.getLength();i++){tn_tile=ns_tiles.item(i);x=Integer.parseInt(tn_tile.getAttributes().getNamedItem(""x"").getTextContent());y=Integer.parseInt(tn_tile.getAttributes().getNamedItem(""y"").getTextContent());tn_data=xml_getNodeByString(tn_tile,""terrain"");if(tn_data==null){throw new Exception();}t_terr=xml_readTerrain(doc,tn_data);if(t_terr==null){throw new Exception();}ret_map.addTerrain(t_terr,x,y);tn_data=xml_getNodeByString(tn_tile,""entity"");if(tn_data!=null){Entity ent=xml_readEntity(doc,tn_data);ret_map.addAsEntity(ent,x,y);}Node n_itemList=xml_getNodeByString(tn_tile,""item_list"");if(n_itemList==null){continue;}LinkedList<Node> items=xml_getAllNodesByString(n_itemList,""item"");Item t_item;RunGame.dbgOut(""Tile [""+x+"", ""+y+""] has found ""+items.size()+"" items."",5);for(Node item : items){t_item=xml_readItem(doc,item);if(t_item!=null){ret_map.addItem(t_item,x,y);RunGame.dbgOut(""Added item: ""+t_item.getName()+"" to map."",4);}}}return ret_map;}catch(Exception e){RunGame.errOut(""xml_readMap: could not parse map"");return null;}}"
308	"public HistoryAdapter(Context context,List<Price> prices,Item item){this.mDataSet=prices;this.mContext=context;this.mItem=item;if(prices!=null&&prices.size()>1){buildDataSet();}}"
309	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
310	"@Override protected void handleReceivedResponse(EventResponse event){if(event.mRequest instanceof DemoRequest){Map<String,Object> data=((DemoRequest)event.mRequest).getResult();DataFrom from=event.mDataFrom;}}"
311	"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float p_149727_7_,float p_149727_8_,float p_149727_9_){TileEntityEnergy tl=(TileEntityEnergy)world.getTileEntity(x,y,z);if(!world.isRemote){if(player.getCurrentEquippedItem()!=null&&player.getCurrentEquippedItem().getItem()==TecEvolutionMain.tec_wrench){if(player.isSneaking()){switch (side){case 0 :tl.setSideOutput(TecHelper.SIDE_DOWN,true);case 1 :tl.setSideOutput(TecHelper.SIDE_UP,true);case 2 :tl.setSideOutput(TecHelper.SIDE_MZ,true);case 3 :tl.setSideOutput(TecHelper.SIDE_Z,true);case 4 :tl.setSideOutput(TecHelper.SIDE_X,true);case 5 :tl.setSideOutput(TecHelper.SIDE_MX,true);}}else {player.addChatMessage(new ChatComponentText(EnumChatFormatting.RED+""Energy: ""+tl.getMomEnergy()));}}}return true;}"
312	"public int getNumChildren(){return 0;}"
313	"public int pleasure(Character opponent,BodyPart with,BodyPart target,double magnitude,int bonus,Combat c,boolean sub,Skill skill){if(target==null){target=nonePart;}if(with==null){with=nonePart;}if(target.getType().equals(""strapon"")){return 0;}double sensitivity=target.getSensitivity(opponent,with);if(character.has(Trait.desensitized)){sensitivity-=0.5;}if(character.has(Trait.desensitized2)){sensitivity-=0.5;}if(target.isErogenous()&&character.has(Trait.hairtrigger)){sensitivity+=1;} final double moddedSensitivity=sensitivity;sensitivity+=character.status.stream().mapToDouble(status -> status.sensitivity(moddedSensitivity)).sum();double pleasure=1;if(!with.isType(""none"")){pleasure=with.getPleasure(opponent,target);}double perceptionBonus=1.0;if(opponent!=null){perceptionBonus*=opponent.body.getCharismaBonus(c,character);}double baseBonusDamage=bonus;if(opponent!=null){baseBonusDamage+=with.applyBonuses(opponent,character,target,magnitude,c);baseBonusDamage+=target.applyReceiveBonuses(character,opponent,with,magnitude,c);if(!sub){for(BodyPart p : opponent.body.getCurrentParts()){baseBonusDamage+=p.applySubBonuses(opponent,character,with,target,magnitude,c);}}if(c.getStance().sub(opponent)&&opponent.has(Trait.submissive)&&target.isErogenous()){baseBonusDamage+=baseBonusDamage+magnitude;}else {if(c.getStance().dom(opponent)&&opponent.has(Trait.submissive)&&!opponent.has(Trait.flexibleRole)&&target.isErogenous()){baseBonusDamage-=(baseBonusDamage+magnitude)*1.0/3.0;}}}if(character.has(Trait.NaturalHeat)&&character.is(Stsflag.frenzied)){baseBonusDamage-=(baseBonusDamage+magnitude)/2;}Optional<BodyFetish> fetish=getFetish(with.getType());if(fetish.isPresent()){perceptionBonus+=fetish.get().magnitude*3;character.add(c,new BodyFetish(character,opponent,with.getType(),0.05));}double base=baseBonusDamage+magnitude;double statusBonusDamage=0;for(Status s : character.status){statusBonusDamage+=s.pleasure(c,with,target,base);}if(base>0){double statusMultiplier=(base+statusBonusDamage)/base;sensitivity+=statusMultiplier-1;}boolean unsatisfied=false;if(character.has(Trait.Unsatisfied)&&(character.getArousal().percent()>=50)&&(skill==null||!skill.getTags(c).contains(SkillTag.fucking))&&!(with.isGenital()&&target.isGenital()&&c.getStance().havingSex(c))){if(c!=null&&c.getOpponent(character).human()){pleasure-=4;}else {pleasure-=0.8;}unsatisfied=true;}double multiplier=Math.max(0,1+((sensitivity-1)+(pleasure-1)+(perceptionBonus-1)));double staleness=1.0;double stageMultiplier=1.0;boolean staleMove=false;if(skill!=null){if(skill.getSelf()!=null&&c.getCombatantData(skill.getSelf())!=null){staleness=c.getCombatantData(skill.getSelf()).getMoveModifier(skill);}if(staleness<=0.51){staleMove=true;}stageMultiplier=skill.getStage().multiplierFor(character);}multiplier=Math.max(0,multiplier+stageMultiplier)*staleness;double dominance=0.0;if(character.human()&&character instanceof Player&&((Player)character).checkAddiction(AddictionType.DOMINANCE,opponent)&&c.getStance().dom(opponent)){float mag=((Player)character).getAddiction(AddictionType.DOMINANCE).get().getMagnitude();float dom=c.getStance().getDominanceOfStance(opponent);dominance=mag*(dom/5.0);}multiplier+=dominance;double damage=base*multiplier;double perceptionlessDamage=base*(multiplier-(perceptionBonus-1));int result=(int)Math.round(damage);if(character.is(Stsflag.rewired)){character.pain(c,opponent,result,false,false);return 0;}if(opponent!=null){String pleasuredBy=opponent.nameOrPossessivePronoun()+"" ""+with.describe(opponent);if(with==nonePart){pleasuredBy=opponent.subject();}String firstColor=character.human()?""<font color='rgb(150,150,255)'>"":""<font color='rgb(255,150,150)'>"";String secondColor=opponent.human()?""<font color='rgb(150,150,255)'>"":""<font color='rgb(255,150,150)'>"";String bonusString=baseBonusDamage>0?String.format("" + <font color='rgb(255,100,50)'>%.1f<font color='white'>"",baseBonusDamage):baseBonusDamage<0?String.format("" + <font color='rgb(50,100,255)'>%.1f<font color='white'>"",baseBonusDamage):"""";String stageString=skill==null?"""":String.format("" + stage:%.2f"",skill.multiplierForStage(character));String dominanceString=dominance<0.01?"""":String.format("" + dominance:%.2f"",dominance);String staleString=staleness<0.99?String.format("" x staleness: %.2f"",staleness):"""";String battleString=String.format(""%s%s %s<font color='white'> was pleasured by %s%s<font color='white'> for <font color='rgb(255,50,200)'>%d<font color='white'> ""+""base:%.1f (%.1f%s) x multiplier: %.2f (1 + sen:%.1f + ple:%.1f + per:%.1f %s %s)%s\n"",firstColor,Global.capitalizeFirstLetter(character.nameOrPossessivePronoun()),target.describe(character),secondColor,pleasuredBy,result,base,magnitude,bonusString,multiplier,sensitivity-1,pleasure-1,perceptionBonus-1,stageString,dominanceString,staleString);if(c!=null){c.writeSystemMessage(battleString);}Optional<BodyFetish> otherFetish=opponent.body.getFetish(target.getType());if(otherFetish.isPresent()){opponent.temptNoSkill(c,character,target,(int)Math.round(perceptionlessDamage));}}else {String firstColor=character.human()?""<font color='rgb(150,150,255)'>"":""<font color='rgb(255,150,150)'>"";String bonusString=baseBonusDamage>0?String.format("" + <font color='rgb(255,100,50)'>%.1f<font color='white'>"",baseBonusDamage):"""";String battleString=String.format(""%s%s %s<font color='white'> was pleasured for <font color='rgb(255,50,200)'>%d<font color='white'> ""+""base:%.1f (%.2f%s) x multiplier: %.2f (sen:%.1f + ple:%.1f + per:%.1f)\n"",firstColor,Global.capitalizeFirstLetter(character.nameOrPossessivePronoun()),target.describe(character),result,base,magnitude,bonusString,multiplier,sensitivity-1,pleasure-1,perceptionBonus-1);if(c!=null){c.writeSystemMessage(battleString);}}if(unsatisfied){c.write(character,Global.format(""Foreplay doesn't seem to do it for {self:name-do} anymore. {self:PRONOUN-ACTION:clearly need|clearly needs} to fuck!"",character,opponent));}if(staleMove&&skill.user().human()){c.write(opponent,Global.format(""This seems to be a getting bit boring for {other:direct-object}... Maybe it's time to switch it up?"",opponent,character));}double percentPleasure=100.0*result/character.getArousal().max();if(character.has(Trait.sexualDynamo)&&percentPleasure>=5&&Global.random(4)==0){c.write(character,Global.format(""Sexual pleasure seems only to feed {self:name-possessive} "",character,opponent));character.buildMojo(c,(int)Math.floor(percentPleasure));}if(character.has(Trait.showmanship)&&percentPleasure>=5&&opponent.isPet()&&((PetCharacter)opponent).getSelf().owner().equals(character)){Character voyeur=c.getOpponent(character);c.write(character,Global.format(""{self:NAME-POSSESSIVE} moans as {other:subject-action:make|makes} a show of pleasing {other:possessive} {self:master} ""+""turns %s on immensely."",character,opponent,voyeur.nameDirectObject()));voyeur.temptWithSkill(c,character,null,Math.max(Global.random(14,20),result/3),skill);}character.resolvePleasure(result,c,opponent,target,with);if(opponent!=null&&Arrays.asList(fetishParts).contains(with.getType())){if(opponent.has(Trait.fetishTrainer)&&Global.random(100)<Math.min(opponent.get(Attribute.Fetish),25)){c.write(character,character.subjectAction(""now have"",""now has"")+"" a new fetish, courtesy of ""+opponent.directObject()+""."");character.add(c,new BodyFetish(character,opponent,with.getType(),0.25));}}lastPleasuredBy=with;lastPleasured=target;return result;}"
314	"public static Optional<String> get(HttpGet request) throws IOException{int CONNECTION_TIMEOUT_MS=2*1000;RequestConfig config=RequestConfig.custom().setConnectionRequestTimeout(CONNECTION_TIMEOUT_MS).setConnectTimeout(CONNECTION_TIMEOUT_MS).setSocketTimeout(CONNECTION_TIMEOUT_MS).build();request.setConfig(config);try{CloseableHttpResponse response=httpclient.execute(request);try{if(response.getStatusLine().getStatusCode()==200){return Optional.of(new String(ByteStreams.toByteArray(response.getEntity().getContent())));}else {return Optional.absent();}}finally{response.close();}}catch(UnknownHostException|HttpHostConnectException e){logger.info(""DNS resolution error: ""+request.getURI(),e);return Optional.absent();}catch(SocketTimeoutException e){logger.info(""Timeout: ""+request.getURI(),e);return Optional.absent();}}"
315	"private boolean stepInst(){Inst inst=instReg.getInst();switch (inst.code){case NOP_ :break;case MOVE_RR :{Reg dst=(Reg)inst.opd[0];Data src=dataReg.read((Reg)inst.opd[1]);Data.vchg(dataReg.read(dst),src);}break;case MOVE_RI :{Reg dst=(Reg)inst.opd[0];Data src=(Data)inst.opd[1];Data.vchg(dataReg.read(dst),src);}break;case LOAD_RR :{Reg dst=(Reg)inst.opd[0];Reg src=(Reg)inst.opd[1];dataReg.write(dst,dataReg.read(src));}break;case LOAD_RI :{Reg dst=(Reg)inst.opd[0];Data src=(Data)inst.opd[1];dataReg.write(dst,Data.copy(src));}break;case COPY_RR :{Reg dst=(Reg)inst.opd[0];Data src=dataReg.read((Reg)inst.opd[1]);dataReg.write(dst,Data.copy(src));}break;case COPY_RI :{Reg dst=(Reg)inst.opd[0];Data src=(Data)inst.opd[1];dataReg.write(dst,Data.copy(src));}break;case GETTABLE_RRI :{Reg dst=(Reg)inst.opd[0];Reg src=(Reg)inst.opd[1];int idx=((Int)inst.opd[2]).v;dataReg.readTable(dst,src,idx);}break;case GETTABLE_RRR :{Reg dst=(Reg)inst.opd[0];Reg src=(Reg)inst.opd[1];int idx=((Int)dataReg.read((Reg)inst.opd[2])).v;dataReg.readTable(dst,src,idx);}break;case NEWTABLE_RRI :{Reg dst=(Reg)inst.opd[0];Reg src=(Reg)inst.opd[1];int dim=((Int)inst.opd[2]).v;dataReg.loadTable(dst,src,dim);}break;case JMP_I :{int dst=((Int)inst.opd[0]).v;instReg.inst+=dst;}break;case TEST_RI :{boolean cond=((Bool)dataReg.read((Reg)inst.opd[0])).v;int dst=((Int)inst.opd[1]).v;if(cond){instReg.inst+=dst;}}break;case CALL_RI :{Reg src=(Reg)inst.opd[0];String proc=((Str)dataReg.read(src)).v;switch (proc){case ""print@bool"" :System.out.print(((Bool)dataReg.data[dataReg.base+src.v+1]).v);break;case ""print@int"" :System.out.print(((Int)dataReg.data[dataReg.base+src.v+1]).v);break;case ""print@str"" :System.out.print(((Str)dataReg.data[dataReg.base+src.v+1]).v);break;case ""concat@str@str"" :{Str str1=(Str)dataReg.data[dataReg.base+src.v+1];Str str2=(Str)dataReg.data[dataReg.base+src.v+2];dataReg.write(src,Str.concat(str1,str2));}break;case ""substr@str@int@int"" :{Str str=(Str)dataReg.data[dataReg.base+src.v+1];Int from=(Int)dataReg.data[dataReg.base+src.v+2];Int to=(Int)dataReg.data[dataReg.base+src.v+3];dataReg.write(src,Str.substr(str,from,to));}break;default :{if(!callStk.push(instReg.proc,instReg.inst,dataReg.base)){throw new SimpleException(ErrorCode.StackOverflow);}instReg.proc=procMap.get(proc);instReg.inst=0;dataReg.base=src.v;}break;}}break;case RET_R :{Reg dst=new Reg(true,0);Reg src=(Reg)inst.opd[0];dataReg.write(dst,Data.copy(dataReg.read(src)));if(!callStk.pop()){return false;}instReg.proc=callStk.topPR();instReg.inst=callStk.topIR();dataReg.base=callStk.topBR();}break;case RET_I :{Reg dst=new Reg(true,0);Data src=(Data)inst.opd[0];dataReg.write(dst,Data.copy(src));if(!callStk.pop()){return false;}instReg.proc=callStk.topPR();instReg.inst=callStk.topIR();dataReg.base=callStk.topBR();}break;case RET_ :{if(!callStk.pop()){return false;}instReg.proc=callStk.topPR();instReg.inst=callStk.topIR();dataReg.base=callStk.topBR();}break;case UMN_RR :{Reg dst=(Reg)inst.opd[0];Int src=(Int)dataReg.read((Reg)inst.opd[1]);dataReg.write(dst,Int.umn(src));}break;case UMN_RI :{Reg dst=(Reg)inst.opd[0];Int src=(Int)inst.opd[1];dataReg.write(dst,Int.umn(src));}break;case NOT_RR :{Reg dst=(Reg)inst.opd[0];Bool src=(Bool)dataReg.read((Reg)inst.opd[1]);dataReg.write(dst,Bool.not(src));}break;case NOT_RI :{Reg dst=(Reg)inst.opd[0];Bool src=(Bool)inst.opd[1];dataReg.write(dst,Bool.not(src));}break;case ADD_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.add(src1,src2));}break;case ADD_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.add(src1,src2));}break;case ADD_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.add(src1,src2));}break;case ADD_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.add(src1,src2));}break;case SUB_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.sub(src1,src2));}break;case SUB_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.sub(src1,src2));}break;case SUB_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.sub(src1,src2));}break;case SUB_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.sub(src1,src2));}break;case MUL_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.mul(src1,src2));}break;case MUL_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.mul(src1,src2));}break;case MUL_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.mul(src1,src2));}break;case MUL_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.mul(src1,src2));}break;case DIV_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.div(src1,src2));}break;case DIV_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.div(src1,src2));}break;case DIV_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.div(src1,src2));}break;case DIV_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.div(src1,src2));}break;case POW_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.pow(src1,src2));}break;case POW_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.pow(src1,src2));}break;case POW_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.pow(src1,src2));}break;case POW_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.pow(src1,src2));}break;case AND_RRR :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)dataReg.read((Reg)inst.opd[1]);Bool src2=(Bool)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Bool.and(src1,src2));}break;case AND_RRI :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)dataReg.read((Reg)inst.opd[1]);Bool src2=(Bool)inst.opd[2];dataReg.write(dst,Bool.and(src1,src2));}break;case AND_RIR :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)inst.opd[1];Bool src2=(Bool)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Bool.and(src1,src2));}break;case AND_RII :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)inst.opd[1];Bool src2=(Bool)inst.opd[2];dataReg.write(dst,Bool.and(src1,src2));}break;case OR_RRR :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)dataReg.read((Reg)inst.opd[1]);Bool src2=(Bool)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Bool.or(src1,src2));}break;case OR_RRI :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)dataReg.read((Reg)inst.opd[1]);Bool src2=(Bool)inst.opd[2];dataReg.write(dst,Bool.or(src1,src2));}break;case OR_RIR :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)inst.opd[1];Bool src2=(Bool)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Bool.or(src1,src2));}break;case OR_RII :{Reg dst=(Reg)inst.opd[0];Bool src1=(Bool)inst.opd[1];Bool src2=(Bool)inst.opd[2];dataReg.write(dst,Bool.or(src1,src2));}break;case EQ_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.eq(src1,src2));}break;case EQ_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.eq(src1,src2));}break;case EQ_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.eq(src1,src2));}break;case EQ_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.eq(src1,src2));}break;case NE_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.ne(src1,src2));}break;case NE_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.ne(src1,src2));}break;case NE_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.ne(src1,src2));}break;case NE_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.ne(src1,src2));}break;case LT_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.lt(src1,src2));}break;case LT_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.lt(src1,src2));}break;case LT_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.lt(src1,src2));}break;case LT_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.lt(src1,src2));}break;case LE_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.le(src1,src2));}break;case LE_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.le(src1,src2));}break;case LE_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.le(src1,src2));}break;case LE_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.le(src1,src2));}break;case GT_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.gt(src1,src2));}break;case GT_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.gt(src1,src2));}break;case GT_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.gt(src1,src2));}break;case GT_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.gt(src1,src2));}break;case GE_RRR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.ge(src1,src2));}break;case GE_RRI :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)dataReg.read((Reg)inst.opd[1]);Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.ge(src1,src2));}break;case GE_RIR :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)dataReg.read((Reg)inst.opd[2]);dataReg.write(dst,Int.ge(src1,src2));}break;case GE_RII :{Reg dst=(Reg)inst.opd[0];Int src1=(Int)inst.opd[1];Int src2=(Int)inst.opd[2];dataReg.write(dst,Int.ge(src1,src2));}break;}return true;}"
316	"private HashMap<String,ArrayList<Image>> getImagesTemplate2(String ownerId){HashMap<String,ArrayList<Image>> quizImages=new HashMap<String,ArrayList<Image>>();ArrayList<Image> personalizedImages=new ArrayList<Image>();ArrayList<Image> correctImages=new ArrayList<Image>();ArrayList<Image> incorrectImages=new ArrayList<Image>();ArrayList<Image> images=dbTemplate.selectImagesByTemplate(2,ownerId);if(images.size()>0){personalizedImages=personalization(images,ownerId);Image correctImage=personalizedImages.get(0);correctImages.add(correctImage);ArrayList<String> optionSet=new ArrayList<String>();optionSet.add(correctImage.getPersons().get(0).getPersonRelation());for(Image incorrectImage : personalizedImages){String personRelation=incorrectImage.getPersons().get(0).getPersonRelation();if(!optionSet.contains(personRelation)){incorrectImages.add(incorrectImage);optionSet.add(personRelation);}if(incorrectImages.size()>2){break;}}}quizImages.put(KEY_CORRECT,correctImages);quizImages.put(KEY_INCORRECT,incorrectImages);return quizImages;}"
317	"@Override public void onClick(DialogInterface dialog,int which){switch (which){case DialogInterface.BUTTON_POSITIVE :if(gameType==1||gameType==2||gameType==3){cT.cancel();}finish();break;case DialogInterface.BUTTON_NEGATIVE :default :break;}}"
318	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_solve_issue);}"
319	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
320	"@Override public void run(boolean ok,String[] permissions,int[] granted){DonationManager.instance().checkPaymentStatus(CadPageApplication.getContext());}"
321	"@Override public void onDataChange(DataSnapshot dataSnapshot){Event event=dataSnapshot.getValue(Event.class);Log.d(""TESTI"",eventSnapshot.getValue().toString());if(event!=null){adapter.events.add(event);}Log.d(""testt"",String.valueOf(events));adapter.notifyDataSetChanged();}"
322	"@Override void init(){n=0;}"
323	"@Override public void run(){swipeView.setRefreshing(true);}"
324	"@Override public Element serializeElement(){Element datatypeElement=new Element(""Datatype"");if(this.datatype!=null){datatypeElement.addAttribute(new Attribute(""ID"",datatype.getId()+""""));datatypeElement.addAttribute(new Attribute(""Name"",datatype.getName()));datatypeElement.addAttribute(new Attribute(""Label"",datatype.getLabel()));datatypeElement.addAttribute(new Attribute(""Description"",datatype.getDescription()));datatypeElement.addAttribute(new Attribute(""ShowConfLength"",String.valueOf(showConfLength)));datatypeElement.addAttribute(new Attribute(""PurposeAndUse"",datatype.getPurposeAndUse()));datatypeElement.addAttribute(new Attribute(""Comment"",datatype.getComment()));datatypeElement.addAttribute(new Attribute(""Hl7Version"",datatype.getHl7Version()==null?"""":datatype.getHl7Version()));datatypeElement.addAttribute(new Attribute(""id"",datatype.getId()));for(SerializableConstraint constraint : constraints){datatypeElement.appendChild(constraint.serializeElement());}if(datatype.getValueSetBindings()!=null&&!datatype.getValueSetBindings().isEmpty()){Element valueSetBindingListElement=super.createValueSetBindingListElement(datatype.getValueSetBindings(),this.tables,datatype.getLabel());if(valueSetBindingListElement!=null){datatypeElement.appendChild(valueSetBindingListElement);}}if(datatype.getComments()!=null&&!datatype.getComments().isEmpty()){Element commentListElement=super.createCommentListElement(datatype.getComments(),datatype.getLabel());if(commentListElement!=null){datatypeElement.appendChild(commentListElement);}}if(datatype.getComponents()!=null){for(int i=0;i<datatype.getComponents().size();i++){Component component=datatype.getComponents().get(i);Element componentElement=new Element(""Component"");componentElement.addAttribute(new Attribute(""Name"",component.getName()));componentElement.addAttribute(new Attribute(""Usage"",getFullUsage(datatype,i)));boolean isComplex=false;if(component.getDatatype()!=null){Datatype datatype=componentDatatypeMap.get(component);if(datatype!=null){componentElement.addAttribute(new Attribute(""Datatype"",datatype.getLabel()));}}else {componentElement.addAttribute(new Attribute(""Datatype"",component.getDatatype()!=null?""! DEBUG: COULD NOT FIND datatype ""+component.getDatatype().getLabel():""! DEBUG: COULD NOT FIND datatype with null id""));}if(component.getDatatype()!=null){Datatype datatype=componentDatatypeMap.get(component);if(datatype!=null){if(datatype.getComponents().size()==0){componentElement.addAttribute(new Attribute(""MinLength"",""""+component.getMinLength()));if(component.getMaxLength()!=null&&!component.getMaxLength().equals("""")){componentElement.addAttribute(new Attribute(""MaxLength"",component.getMaxLength()));}if(component.getConfLength()!=null&&!component.getConfLength().equals("""")){componentElement.addAttribute(new Attribute(""ConfLength"",component.getConfLength()));}}else {isComplex=true;componentElement.addAttribute(new Attribute(""MinLength"",""""));componentElement.addAttribute(new Attribute(""MaxLength"",""""));componentElement.addAttribute(new Attribute(""ConfLength"",""""));}}}if(this.componentValueSetBindingsMap.containsKey(component)){List<ValueSetOrSingleCodeBinding> valueSetBindings=this.componentValueSetBindingsMap.get(component);if(valueSetBindings!=null&&!valueSetBindings.isEmpty()){List<String> bindingIdentifierList=new ArrayList<>();for(ValueSetOrSingleCodeBinding valueSetOrSingleCodeBinding : valueSetBindings){if(valueSetOrSingleCodeBinding!=null&&valueSetOrSingleCodeBinding.getTableId()!=null&&!valueSetOrSingleCodeBinding.getTableId().isEmpty()){Table table=super.findTable(tables,valueSetOrSingleCodeBinding.getTableId());bindingIdentifierList.add(table.getBindingIdentifier());}}String bindingIdentifier=StringUtils.join(bindingIdentifierList,"","");if(bindingIdentifier!=null&&!bindingIdentifier.isEmpty()){componentElement.addAttribute(new Attribute(""BindingIdentifier"",bindingIdentifier));}}}String comments=super.findComments(component.getPosition(),datatype.getComments());if(comments!=null&&!comments.isEmpty()){componentElement.addAttribute(new Attribute(""Comment"",comments));}componentElement.addAttribute(new Attribute(""Position"",component.getPosition().toString()));String componentText=componentTextMap.get(component);if(componentText!=null&&!componentText.isEmpty()){componentElement.appendChild(this.createTextElement(""Text"",componentText));}componentElement.addAttribute(new Attribute(""complex"",String.valueOf(isComplex)));datatypeElement.appendChild(componentElement);}if(datatype.getComponents().size()==0){Element componentElement=new Element(""Component"");componentElement.addAttribute(new Attribute(""Name"",datatype.getName()));componentElement.addAttribute(new Attribute(""Position"",""1""));datatypeElement.appendChild(componentElement);}if((datatype!=null&&(!this.defPreText.isEmpty())||!this.defPostText.isEmpty())){if(this.defPreText!=null&&!this.defPreText.isEmpty()){datatypeElement.appendChild(this.createTextElement(""DefPreText"",this.defPreText));}if(this.defPostText!=null&&!this.defPostText.isEmpty()){datatypeElement.appendChild(this.createTextElement(""DefPostText"",this.defPostText));}}if(this.usageNote!=null&&!this.usageNote.isEmpty()){datatypeElement.appendChild(this.createTextElement(""UsageNote"",this.usageNote));}}}datatypeElement.addAttribute(new Attribute(""prefix"",prefix));datatypeElement.addAttribute(new Attribute(""position"",""""));Element sectionElement=super.getSectionElement();sectionElement.appendChild(datatypeElement);return sectionElement;}"
325	"private void copyExistingEntriesFromFile(){try{Scanner scanFileToCopy=new Scanner(_original);Entry entry=new Entry();while(scanFileToCopy.hasNext()){String detail=scanFileToCopy.nextLine();if(detail.contains(MARKER_FOR_NEXT_ENTRY_IN_FILE)){_entries.add(entry);entry=new Entry();}entry.addToDetails(detail);}if(!_entries.isEmpty()){_entries.remove(INDEX_OF_EMPTY_ENTRY);}scanFileToCopy.close();}catch(FileNotFoundException e){return ;}}"
326	"@Override public boolean remove(Object obj){return (map.remove(obj)!=null);}"
327	"@Override public boolean isVisible(){return !isCatalogOidEmpty();}"
328	"private void setGridsContent(ViewDefinitionState viewDefinitionState,Entity order){setInputProductsGridContent(viewDefinitionState,order);setOutputProductsGridContent(viewDefinitionState,order);setProductionTimeTabContent(viewDefinitionState,order);}"
329	"private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt){}"
330	"@Override public int size(){return size>Integer.MAX_VALUE?Integer.MAX_VALUE:(int)size;}"
331	"private void drawDay_TourText(GC gc,Rectangle tourRect,CalendarTourData data){ final Color fg=getUI_ContentColor(data);gc.setForeground(fg);gc.setClipping(tourRect.x,tourRect.y,tourRect.width,tourRect.height); final String infoText=_tourInfoFormatter[0].format(data);if(infoText.length()>0){ final int topBorder=0; final int leftBorder=2;_textWrapPainter.drawText(gc,infoText,tourRect.x+leftBorder,tourRect.y+topBorder,tourRect.width-leftBorder,tourRect.height-topBorder,_fontHeight_DayContent,_dayDateLabelRect);}gc.setClipping(_nullRec);}"
332	"public boolean containsModifiableAliasOf(Store<?> store,Receiver other){return this.equals(other)||store.canAlias(this,other);}"
333	"public int getPercentileValue(){return -1;}"
334	"public void send(Serializable data) throws Exception{connThread.out.writeObject(data);}"
335	"public String getElementAt(int i){return (terapeutasSesion[i]).toString();}"
336	"@Override public Boolean get(){synchronized(this){return autoChangeDatabaseEncryption;}}"
337	"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException,IOException{String login=(String)req.getSession().getAttribute(""userLogin"");if(login==null){resp.sendRedirect(""/"");}UsersDao usersDao=new UsersDao();UsersEntity usersEntity=usersDao.getById(login);UserSettingsBean userBean=EntityUtil.createUserSettingsBean(usersEntity);req.setAttribute(""userBean"",userBean);getServletContext().getRequestDispatcher(""/jsp/public/settings_page.jsp"").forward(req,resp);}"
338	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
339	"@Override public void onComplete(VKResponse response){VKApiUser user=((VKList<VKApiUser>)response.parsedModel).get(0);TextView t=(TextView)findViewById(R.id.editText);t.setText(""?????? ""+user.first_name);}"
340	"@Override public boolean isItemValid(ItemStack stack){return stack!=null&&stack.getItem()==ItemLoader.itemBattery&&super.isItemValid(stack);}"
341	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return filesystem.getProtocols().contains(NFS)||filesystem.getProtocols().contains(NFSv4);}"
342	"public void authenticate() throws NexusApiException,Exception{Response resp=sendPostRequest(AUTH_PATH,new AuthRequestWrapper(userName,password));ApiResponseWrapper<AuthResponse> authResp=resp.readEntity(new GenericType<ApiResponseWrapper<AuthResponse>>(){});if(authResp.getResponse().getErrorId()==null){authToken=authResp.getResponse().getToken();}else {throw new NexusApiException(authResp.getResponse().getError(),authResp.getResponse().getErrorId());}}"
343	"@Override public boolean isSelected(){return loadout.getUpgrades().getStructure()==structureEs;}"
344	"@Override public boolean accept(File dir,String name){return !name.startsWith(DIM);}"
345	"@UiHandler(""canvasPanel"") void onMouseDown(MouseDownEvent e){isMouseDown=true;lMouseDown[X]=getMouseX(e.getX());lMouseDown[Y]=getMouseY(e.getY());lMouseMove[X]=getMouseX(e.getX());lMouseMove[Y]=getMouseY(e.getY());switch (parent.tools.currentTool){case addEdge :parent.drawing.setUILine(lMouseDown[X],lMouseDown[Y],lMouseDown[X],lMouseDown[Y]);break;case move :if(parent.selectedVertices.size()<1){parent.toggleSelectedVertexAt(lMouseDown[X],lMouseDown[Y]);}break;}parent.tooltip.hide();}"
346	"@Override public void controlChange(ShortMessage message){List<MidiTime> timePool=sequence.getTimePool();if(message.getData1()==MidiEvents.eventPlaybackControl){long currentTick=SynthManager.getSequencer().getTickPosition();if(timePool.get(0).tick>currentTick){return ;}while(timePool.get(currentPosition+1).tick<=currentTick){currentPosition++;}MP pos=timePool.get(currentPosition).mp;for(PlaybackListener listener : listeners.getAll()){listener.playbackAtMP(pos,SynthManager.getSequencer().getMicrosecondPosition()/1000L);}}else {if(message.getData1()==MidiEvents.eventPlaybackEnd){stop();for(PlaybackListener listener : listeners.getAll()){listener.playbackAtEnd();}}}}"
347	"public void onClick(DialogInterface dialog,int whichButton){}"
348	"public boolean doAction(int action){switch (action){case Constants.A_INSERT :if(doInsert()){return true;}break;case Constants.A_EDIT :if(doEdit()){return true;}break;case Constants.A_DELETE :if(doDelete()){return true;}break;case Constants.A_POST :if(doPost()){return true;}break;case Constants.A_CANCEL :if(doCancel()){return true;}break;case Constants.A_CLOSE :if(doClose()){return true;}break;}return false;}"
349	"public Master(){Scanner input=new Scanner(System.in);String temp=input.nextLine();Cargs=temp.split(""\\s+"");amb=new Ambassador();int i=Integer.parseInt(Cargs[1]);amb.init(Cargs[0],i,Cargs[2],Cargs[3],Cargs[4]);AI game1AI=new AI();AI game2AI=new AI();amb.setAI1(game1AI);amb.setAI2(game2AI);amb.init();}"
350	"@Override public int getAnchor(){return GridBagConstraints.NORTH;}"
351	"@Override public void onAnimationRepeat(Animation animation){for(int j=0;j<snow[0].length;j++){snow[0][j].setX((int)(Math.random()*(width-width/50)));snow[0][j].setY((int)(Math.random()*(height-width/50)));}}"
352	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);getSupportActionBar().setDisplayHomeAsUpEnabled(true);setContentView(R.layout.activity_folder_picker);}"
353	"public void checkSelf(){CallingClass caller=new CallingClass();System.out.println(caller.getListOfCallingClasses());}"
354	"@Override public boolean canAccess(ProposalsPermissions permissions,ProposalsContext context,PortletRequest request){return true;}"
355	"private void nextMenu(){switch (actualMenu){case FIRST_STEP :if(((ResidenceStepOneFragment)actualStep).isRequiredFieldsFilled()){shiftToStepTwo();}break;case SECOND_STEP :if(((ResidenceStepTwoFragment)actualStep).isRequiredFieldsFilled()){shiftToStepThree();}break;case THIRD_STEP :save();break;}}"
356	"@Override public boolean hasNext(){return pos<sortedTuples.length;}"
357	"@Override public void onCreate(SQLiteDatabase db){db.execSQL(""CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone TEXT)"");InputStream stream=context.getResources().openRawResource(R.raw.data);BufferedReader reader=new BufferedReader(new InputStreamReader(stream));while(true){String line;try{line=reader.readLine();}catch(IOException exception){Log.e(""StudentSQLiteOpenHelper"",""error while reading line"");break;}if(line==null){break;}String[] words=line.split(""\\|"");if(words.length!=3){Log.e(""StudentSQLiteOpenHelper"",""line with invalid format"");continue;}ContentValues values=new ContentValues();values.put(""name"",words[0]);values.put(""email"",words[1]);values.put(""phone"",words[2]);db.insert(""students"",null,values);}}"
358	"public T getValue(){return buffer.getValue();}"
359	"@Override public void onMedAlgoIndex(int value){Log.d(TAG,""NskAlgoMedAlgoIndexListener: Meditation:""+value);String medStr=""[""+value+""]""; final String finalMedStr=medStr;runOnUiThread(new Runnable(){  @Override public void run(){    medValue.setText(finalMedStr);  }});}"
360	"public synchronized Group getGroupByName(String name) throws DatabaseObjectNotFoundException,DatabaseConnectionException{if(!dbcon.isOpen()){throw new DatabaseConnectionException(""Not connected to database."");}try{ResultSet rs=dbcon.execute(""SELECT * FROM 'Group' WHERE name = '""+name+""' COLLATE NOCASE;"");if(rs.next()){int mId=rs.getInt(""modId"");Group g=new Group(rs.getInt(""id""),rs.getString(""name""),null,null);rs.close();dbcon.free();if(mId!=-1){try{g.setModerator(getUserById(mId));}catch(Exception e){}}g.setMembers(getGroupMembers(g.getID()));return g;}else {rs.close();throw new DatabaseObjectNotFoundException();}}catch(Exception e){dbcon.free();server.getLogger().addErrorToLog(e.toString());throw new DatabaseObjectNotFoundException();}}"
361	"public static void main(String args){}"
362	"private Integer getStartYear(){Matcher m=intervalPattern.matcher(seriesPage.select(""a[title=See more release dates]"").get(0).text());if(m.find()){return Integer.valueOf(m.group().substring(1,5));}else {return null;}}"
363	"public boolean containsModifiableAliasOf(Store<?> store,Receiver other){return this.equals(other)||store.canAlias(this,other);}"
364	"public void initFrame(AppProperties props){m_props=props;m_rootapp=new JRootApp();if(m_rootapp.initApp(m_props)){try{m_instmanager=new InstanceManager(this);}catch(Exception e){}jPanel1.add(m_rootapp);setTitle(AppLocal.APP_NAME+"" - ""+AppLocal.APP_VERSION);Dimension d=Toolkit.getDefaultToolkit().getScreenSize();setBounds(0,0,d.width,d.height);setVisible(true);}else {System.exit(1);}}"
365	"@Nullable @Override public Number apply(Number input){return input.intValue()-input.intValue()%10;}"
366	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
367	"private void createNewUser(Context context,long tid){ final Dialog dialog=new Dialog(context);dialog.setContentView(R.layout.new_person_dialog);dialog.setTitle(R.string.save_hint_enter_name); final Button cancelButton=(Button)dialog.findViewById(R.id.newperson_dialog_btn_cancel); final Button btnSave=(Button)dialog.findViewById(R.id.newperson_dialog_btn_save); final EditText et=(EditText)dialog.findViewById(R.id.newperson_dialog_et_name); final EditText et_personalnumber=(EditText)dialog.findViewById(R.id.newperson_dialog_et_personalnumber);btnSave.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    int personalnumber;    try {      personalnumber=Integer.parseInt(et_personalnumber.getText().toString());    } catch (    NumberFormatException ex) {      new CustomToast(context,context.getText(R.string.no_personalnumber_number).toString(),2000);      return;    }    if (String.valueOf(personalnumber).length() < 3) {      new CustomToast(context,context.getText(R.string.no_personalnumber_number).toString(),2000);      return;    }    try {      SqlAccessAPI.createUser(context.getContentResolver(),et.getText().toString(),tid,personalnumber);    } catch (    SQLiteConstraintException ex) {      new CustomToast(context,context.getText(R.string.personalnumber_in_use).toString(),Toast.LENGTH_LONG);      return;    }    new CustomToast(context,context.getText(R.string.user_created).toString(),Toast.LENGTH_LONG);    dialog.dismiss();  }});}"
368	"@Override public String getText(Object element){if(element instanceof MailParameter){return ((MailParameter)element).getMailParameter();}return Messages.getString(""UNTITLED"");}"
369	"boolean parseAtAttribute(){Marker m=enter_section_(builder);Token start=expect(tok(""@""));if(start==null){cleanup(m);return false;}if(!moreTokens()){error(""\""(\"", or identifier expected"");return false;}Token.IdType i=current().type;if(i.equals(tok(""identifier""))){if(peekIs(tok(""!""))){if(!parseNodeQ(""node.templateInstance"",""TemplateInstance"")){cleanup(m);return false;}}else {advance();}if(currentIs(tok(""(""))){advance();if(!currentIs(tok("")""))){if(!parseNodeQ(""node.argumentList"",""ArgumentList"")){cleanup(m);return false;}}expect(tok("")""));}}else {if(i.equals(tok(""(""))){advance();if(!parseNodeQ(""node.argumentList"",""ArgumentList"")){cleanup(m);return false;}expect(tok("")""));}else {error(""\""(\"", or identifier expected"");return false;}}exit_section_(builder,m,ATTRIBUTE,true);return true;}"
370	"private SearchContext getSearchContext(String axisId,String valueId) throws Exception{SearchContext context=new SearchContext();if(valueId!=null&&!valueId.startsWith(""/"")){SilverTrace.info(""Pdc"",""PdcTagUtil.getSearchContext()"",""root.MSG_GEN_PARAM_VALUE"",""axisId = ""+axisId+"", valueId = ""+valueId+"" isn't the path !"");Value value=getPdcBm().getValue(axisId,valueId);valueId=value.getFullPath();SilverTrace.info(""Pdc"",""PdcTagUtil.getSearchContext()"",""root.MSG_GEN_PARAM_VALUE"",""new valueId = ""+valueId);}SearchCriteria criteria=new SearchCriteria(new Integer(axisId).intValue(),valueId);context.addCriteria(criteria);return context;}"
371	"public void onClick(DialogInterface dialog,int whichButton){}"
372	"private boolean isValidMove(OthelloPlayer player,int x,int y,Direction direction){int gap=0;Cell cell=board.getCell(x,y);while((cell=cell.getAdjacentCell(direction))!=null){if(cell.isEmpty()){break;}Piece piece=cell.getPiece();if(!(piece instanceof Disk)){break;}Disk disk=(Disk)piece;if(disk.getColor()==player.getColor()){break;}gap++;}return gap>0;}"
373	"@Ignore public static boolean equals(long value,java.lang.Object that){if(that instanceof Integer){return value==((Integer)that).value;}else {if(that instanceof Float){return value==((Float)that).value;}else {return false;}}}"
374	"private Comment[] transformComments(Document document){Element element=document.select("".question__comments"").first();return transformComments(element);}"
375	"private boolean allButStateStoreUninstalled(){return (StateStoreUtils.isUninstalling(stateStore)||schedulerFlags.isUninstallEnabled())&&!stateStore.fetchFrameworkId().isPresent()&&ResourceCollectionUtils.getResourceIds(ResourceCollectionUtils.getAllResources(stateStore.fetchTasks())).stream().allMatch(resourceId -> resourceId.startsWith(Constants.TOMBSTONE_MARKER));}"
376	"public void goToSite(ActionEvent actionEvent){int id=new UrlEncryption().decrypt(txtShortUrl.getText());System.out.println(id);for(UrlItem urlItem1 : urlsHistoryImpl.getUrlItemList()){if(urlItem1.getId()==id){txtLongUrl.setText(urlItem1.getLongUrl());break;}}try{Desktop.getDesktop().browse(new URL(""http://"".concat(txtLongUrl.getText())).toURI());}catch(Exception e){DialogManager.showInfoDialog(""Empty URL field"",""Please fill the Short URL field"");}}"
377	"@Override public void onNavigationDrawerItemSelected(int position){android.app.Fragment objFragment=null;switch (position){case 0 :objFragment=new rechercher_fragment();break;case 1 :objFragment=new depart_fragment();break;case 2 :objFragment=new proposition_fragment();break;case 3 :objFragment=new note_fragment();break;case 4 :objFragment=new profil_fragment();break;}android.app.FragmentManager fragmentManager=getFragmentManager();fragmentManager.beginTransaction().replace(R.id.container,objFragment).commit();}"
378	"public boolean apply(AbstractProject job){return job.getTrigger(clazz)!=null;}"
379	"public boolean handleAction(MenuItem item){int id=item.getItemId();switch (id){case R.id.action_layers :activity.toggleLayersSheet();return true;case R.id.action_tool :activity.togglePropertiesDrawer();return true;case R.id.action_new_image :new OptionFileNew(activity,image).execute();return true;case R.id.action_capture_photo :new OptionFileCapturePhoto(activity,image).execute();return true;case R.id.action_open_image :new OptionFileOpen(activity,image).execute();return true;case R.id.action_save_image :new OptionFileSave(activity,image).execute();return true;case R.id.action_resize_image :new OptionImageResize(activity,image).execute();return true;case R.id.action_scale_image :new OptionImageScale(activity,image).execute();return true;case R.id.action_flip_image :new OptionImageFlip(activity,image).execute();return true;case R.id.action_rotate_image :new OptionImageRotate(activity,image).execute();return true;case R.id.action_settings :activity.showSettingsActivity();return true;}return false;}"
380	"public int compare(BPUserData ent1,BPUserData ent2){return ent2.point-ent1.point;}"
381	"@Override public boolean check(Object type){return type instanceof ItemType&&((ItemType)type).isContainedIn(invi);}"
382	"@Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()){case R.id.action_refresh :mLayout.setRefreshing(true);onRefresh();return true;}return super.onOptionsItemSelected(item);}"
383	"@Override public void onCharacteristicChanged(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic){Log.d(TAG_LOG,""onCharacteristicChanged:: ""+characteristic.getUuid().toString());byte[] packet=characteristic.getValue();switch (characteristic.getUuid().toString().toLowerCase()){case CHARACTERISTIC_BATTERY_LEVEL :batteryLevel=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,0);Log.d(TAG_LOG,""BAS    CHARACTERISTIC_BATTERY_LEVEL:: ""+batteryLevel);buildBatteryNotification();break;case CHARACTERISTIC_ENTITY_UPDATE :case CHARACTERISTIC_ENTITY_ATTRIBUTE :Log.d(TAG_LOG,""AMS    CHARACTERISTIC_ENTITY_UPDATE::"");processMediaPacket(packet,characteristic.getStringValue(3));break;case CHARACTERISTIC_DATA_SOURCE :getPacketProcessor().process(packet);if(packetProcessor.hasFinishedProcessing()){NotificationData notificationData=packetProcessor.getNotificationData();NotificationDataManager.updateData(notificationData);if(notificationData.isIncomingCall()){startCall(notificationData);}else {buildNotification(notificationData);}}break;case CHARACTERISTIC_NOTIFICATION_SOURCE :try{switch (packet[0]){case (byte)0x00 :case (byte)0x01 :getPacketProcessor().init(packet);byte[] getAttributesPacket=new byte{(byte)CommandID.GetNotificationAttributes.ordinal(),packet[4],packet[5],packet[6],packet[7],(byte)NotificationAttributeID.AppIdentifier.ordinal(),(byte)NotificationAttributeID.Title.ordinal(),(byte)0xff,(byte)0xff,(byte)NotificationAttributeID.Message.ordinal(),(byte)0xff,(byte)0xff};NotificationData notificationData=getPacketProcessor().getNotificationData();if(notificationData.hasPositiveAction()){getAttributesPacket=PacketProcessor.concat(getAttributesPacket,new byte{(byte)NotificationAttributeID.PositiveActionLabel.ordinal()});}if(notificationData.hasNegativeAction()){getAttributesPacket=PacketProcessor.concat(getAttributesPacket,new byte{(byte)NotificationAttributeID.NegativeActionLabel.ordinal()});}Command getAttributesCommand=new Command(UUID_ANCS,CHARACTERISTIC_CONTROL_POINT,getAttributesPacket);pendingCommands.add(getAttributesCommand);sendCommand();break;case (byte)0x02 :if(packet[2]==1){sendBroadcast(new Intent(PhoneActivity.ACTION_END_CALL));}else {String notificationId=new String(Arrays.copyOfRange(packet,4,8));notificationManager.cancel(notificationId,NOTIFICATION_REGULAR);}break;}}catch(Exception e){Log.d(TAG_LOG,""error"");e.printStackTrace();}break;}}"
384	"@Override public void handle(MouseEvent mouseEvent){if(getScene()!=null){getScene().setCursor(Cursor.HAND);}}"
385	"private void readVersion(Buffer.PlainBuffer buffer) throws BufferException{if(negotiateFlags.contains(NtlmNegotiateFlag.NTLMSSP_NEGOTIATE_VERSION)){buffer.skip(8);}else {buffer.skip(8);}}"
386	"public int getSubBoxesCount(){return subBoxes_.size();}"
387	"@Override public void onClick(DialogInterface dialog,int which){}"
388	"void enqueueWhisper(Content newContent){boolean isEnqueue=true;if(newContent.getOperator()==Operator.REQUEST){for(Content content : whisperList){if(content.equals(newContent)){isEnqueue=false;break;}}if(isEnqueue){whisperList.add(newContent);}return ;}Iterator<Content> it=whisperList.iterator();Topic newTopic=newContent.getTopic();switch (newTopic){case AGREE :case DISAGREE :while(it.hasNext()){if(it.next().equals(newContent)){isEnqueue=false;break;}}break;case COMINGOUT :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.COMINGOUT&&content.getTarget()==newContent.getTarget()){if(content.getRole()==newContent.getRole()){isEnqueue=false;break;}else {it.remove();}}}break;case ESTIMATE :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.ESTIMATE&&content.getTarget()==newContent.getTarget()){if(content.getRole()==newContent.getRole()){isEnqueue=false;break;}else {it.remove();}}}break;case DIVINED :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.DIVINED&&content.getTarget()==newContent.getTarget()){if(content.getResult()==newContent.getResult()){isEnqueue=false;break;}else {it.remove();}}}break;case IDENTIFIED :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.IDENTIFIED&&content.getTarget()==newContent.getTarget()){if(content.getResult()==newContent.getResult()){isEnqueue=false;break;}else {it.remove();}}}break;case VOTE :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.VOTE){if(content.getTarget()==newContent.getTarget()){isEnqueue=false;break;}else {it.remove();}}}break;case ATTACK :while(it.hasNext()){Content content=it.next();if(content.getTopic()==Topic.ATTACK){if(content.getTarget()==newContent.getTarget()){isEnqueue=false;break;}else {it.remove();}}}break;default :break;}if(isEnqueue){whisperList.add(newContent);}}"
389	"@Override public int getStartOffset(){return myBuilder.myLexStarts[myLexemeIndex];}"
390	"public void removeVolumeMountPointTag(BlockObjectRestRep volume){ExecutionUtils.execute(new RemoveBlockVolumeMachineTag(volume.getId(),getMountPointTagName()));addAffectedResource(volume.getId());}"
391	"@Override public void onCreate(SQLiteDatabase db){ final String SQL_CREATE_TABLE=""CREATE TABLE ""+DbContract.DbEntry.TABLE_NAME+""(""+DbContract.DbEntry._ID+"" INTEGER PRIMARY KEY AUTOINCREMENT , ""+DbContract.DbEntry.COLUMN_EMAIL+"" TEXT  , ""+DbContract.DbEntry.COLUMN_PASSWORD+""TEXT  ""+"");""; final String SQL_CREATE_PHR=""CREATE TABLE ""+DbContract.DbEntryPHR.TABLE_NAME+""(""+DbContract.DbEntryPHR._ID+"" INTEGER PRIMARY KEY AUTOINCREMENT , ""+DbContract.DbEntryPHR.COLUMN_NAME+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_Email+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_SEX+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_DOB+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_ADDRESS+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_PRIMARY_CONTACT+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_EMERGENCT_CONTACT+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_CARETAKER_CONTACT+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_BLOODTYPE+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_BLOOD_SIGN+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_HEIGHT_FEET+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_HEIGHT_INCHES+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_EYE_SIGN+"" TEXT , ""+DbContract.DbEntryPHR.COLUMN_EYE_SIGHT+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_WAKE_UP_TIME+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_BREAKFAST_TIME+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_LUNCH_TIME+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_GYM_TIME+"" TEXT  , ""+DbContract.DbEntryPHR.COLUMN_DINNER_TIME+"" TEXT  , ""+"");""; final String SQL_CREATE_PRESCRIPTION=""CREATE TABLE ""+DbContract.DbEntryPrescription.TABLE_NAME+""(""+DbContract.DbEntryPrescription._ID+"" INTEGER PRIMARY KEY AUTOINCREMENT , ""+DbContract.DbEntryPrescription.COLUMN_PRESCRIPTION_NAME+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_DISEASE+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_MED_NAME+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_MED_DOSE+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_MED_TYPE+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_MED_TIME+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_DURATION+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_DURATION_TYPE+"" TEXT  , ""+DbContract.DbEntryPrescription.COLUMN_MED_TOTAL+""TEXT  ""+"");"";db.execSQL(SQL_CREATE_TABLE);db.execSQL(SQL_CREATE_PRESCRIPTION);}"
392	"public double calculatePrecision(List<MetricsData> mdBase,List<MetricsData> mdTest){return this.calculatePrecision(mdBase,mdTest,-1);}"
393	"@Override public void init(){if(initDone||!com.mcmoddev.basemetals.util.Config.Options.modEnabled(Mekanism.PLUGIN_MODID)){return ;} final String[] baseNames=new String{MaterialNames.ALUMINUM,MaterialNames.CADMIUM,MaterialNames.CHROMIUM,MaterialNames.IRIDIUM,MaterialNames.MAGNESIUM,MaterialNames.MANGANESE,MaterialNames.PLUTONIUM,MaterialNames.RUTILE,MaterialNames.TANTALUM,MaterialNames.TITANIUM,MaterialNames.TUNGSTEN,MaterialNames.URANIUM,MaterialNames.ZIRCONIUM};for(int i=0;i<baseNames.length;i++){ final String materialName=baseNames[i];if(Options.materialEnabled(materialName)){addOreMultiplicationRecipes(materialName);}}initDone=true;}"
394	"@SuppressLint(""NewApi"") private void updateForegroundNotification(){ final Context context=getApplicationContext(); final NotificationCompat.Builder notifBuilder=new NotificationCompat.Builder(context).setContentTitle(""3DR Services"").setPriority(NotificationCompat.PRIORITY_MIN).setSmallIcon(R.drawable.ic_stat_notify).setContentIntent(PendingIntent.getActivity(context,0,new Intent(context,MainActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK),0)); final int connectedCount=droneApiStore.size();if(connectedCount>0){if(connectedCount==1){notifBuilder.setContentText(""1 connected app"");}else {notifBuilder.setContentText(connectedCount+"" connected apps"");}} final Notification notification=notifBuilder.build();startForeground(FOREGROUND_ID,notification);}"
395	"public void onClick(View v){}"
396	"public DataList<Question> getQuestions(){}"
397	"public boolean theAnkhMorporkSunshineDragonSanctuaryFunctionality() throws IOException{boolean success=false;for(Player objPlayer : Game.lstPlayers){boolean payed=false;if(objPlayer.getPlayer_id()!=this.getPlayer_id()){System.out.println(""Hello ""+objPlayer.getPlayer_name()+"", would you like to pay $1 to ""+this.getPlayer_name()+"" or give ""+this.getPlayer_name()+"" one of your cards"");System.out.println(""Enter '1' to pay $1 OR Enter '2' to give a Card"");String ans=PresentationUtility.GetValidAnswerFromUser("",1,2,"");if(ans.equals(""1"")){if(Game.PaymentPlayerToPlayer(this.getPlayer_id(),objPlayer.getPlayer_id(),1)){System.out.println(""Payment was successful"");payed=true;success=true;}}if(ans.equals(""2"")||!payed){System.out.println(""Enter a card ID you wish to give to ""+this.getPlayer_name());StringBuilder sbValidIDs=new StringBuilder();for(GreenCard grnCard : Game.lstGreenCards){if(grnCard.getPlayerID()==objPlayer.getPlayer_id()&&!grnCard.GetIsPlayed()){sbValidIDs.append(grnCard.GetCardID());String ActionList=Game.GetGreenCardActions(grnCard.GetCardID());System.out.printf(""%-5s%-5s%-40s%-5s%-50s%-5s%-60s\n"",grnCard.CardID,"" : "",grnCard.getName(),"" : "",ActionList,"" : "",""Scroll Action : ""+grnCard.GetActionDescription());}}String strGreenCardID=PresentationUtility.GetValidAnswerFromUser(sbValidIDs.toString());success=Game.SetGreenCardToPlayer(strGreenCardID,this.getPlayer_id());System.out.println(""Card assigned successfully!"");}}}return success;}"
398	"public static _Fields findByThriftId(int fieldId){switch (fieldId){default :return null;}}"
399	"@Override public void onItemClick(String str,int position){if(position==0){if(msg.getContentType()==ContentType.text){ final String content=((TextContent)msg.getContent()).getText();if(Build.VERSION.SDK_INT>11){ClipboardManager clipboard=(ClipboardManager)mContext.getSystemService(Context.CLIPBOARD_SERVICE);ClipData clip=ClipData.newPlainText(""Simple text"",content);clipboard.setPrimaryClip(clip);}else {android.text.ClipboardManager clip=(android.text.ClipboardManager)mContext.getSystemService(Context.CLIPBOARD_SERVICE);if(clip.hasText()){clip.getText();}}Toast.makeText(this,""???"",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""???????"",Toast.LENGTH_SHORT).show();}}else {if(position==1){Intent intent=new Intent(this,ForwardMsgActivity.class);JGApplication.forwardMsg.clear();JGApplication.forwardMsg.add(msg);startActivity(intent);}else {mConv.deleteMessage(msg.getId());mChatAdapter.removeMessage(msg);}}}"
400	"public void onClick(DialogInterface dialog,int which){Log.i(logTag,""Nothing"");}"
401	"@Override public void onClick(View v){cancel(true);}"
402	"public boolean applies(Battle b,ActivePokemon user,ActivePokemon victim){return true;}"
403	"@Override public void onMapClick(LatLng point){if(ADD_COORDINATE_MODE){dialogAddNewCoordinate(point);}if(ADD_TRACK_MODE&&count_coordinates_selected<MAX_NUM_OF_TRACK_COORDINATES){writeGenericCoordinateToDB(point);MarkerView marker=addMarkerForCoordinate(point,"""","""");IconFactory iconFactory=IconFactory.getInstance(this);Icon icon=iconFactory.fromResource(R.drawable.blue_marker);marker.setIcon(icon);track_coordinates.add(point.getLongitude());track_coordinates.add(point.getLatitude());track_markers.add(marker);count_coordinates_selected++;updateScreenCounter();}else {if(ADD_TRACK_MODE&&count_coordinates_selected>=MAX_NUM_OF_TRACK_COORDINATES){Toast.makeText(this,R.string.reached_limit_of_coordinates,Toast.LENGTH_SHORT).show();}}}"
404	"private static void fillInScoreTable(String s1,String s2){for(int i=1;i<scoreTable.length;i++){for(int j=1;j<scoreTable.length;j++){Cell cur=scoreTable[i][j];Cell cellAbove=scoreTable[i-1][j];Cell cellLeft=scoreTable[i][j-1];Cell cellAboveLeft=scoreTable[i-1][j-1];fillInCell(cur,cellAbove,cellLeft,cellAboveLeft,s1,s2);}}}"
405	"@Override public int minValue(){return 0;}"
406	"public int handValue(Dealer dealer){int total=0;for(Card card : dealer.getHand().getCards()){total+=rankValue(card);if(card.getRank()==Rank.ACE&&total>21){total-=10;}}return total;}"
407	"default void addAssignee(Ticket ticket,TicketDeveloper developer) throws NotAuthenticatedException{checkAuthenticated();ticket.addAssignee(developer);}"
408	"public static int getRequestedAmount(SemiBlockLogistics requester,ItemStack providingStack){TileEntity te=requester.getTileEntity();if(!(te instanceof IInventory)){return 0;}int requestedAmount=requester instanceof ISpecificRequester?((ISpecificRequester)requester).amountRequested(providingStack):providingStack.stackSize;if(requestedAmount==0){return 0;}providingStack=providingStack.copy();providingStack.stackSize=requestedAmount;ItemStack remainder=providingStack.copy();for(ForgeDirection d : ForgeDirection.VALID_DIRECTIONS){remainder=IOHelper.insert(te,remainder,d,true);if(remainder==null){break;}}if(remainder!=null){providingStack.stackSize-=remainder.stackSize;}return providingStack.stackSize;}"
409	"@Override public void onClick(View view){identifier=0;dif=1;createYourOwnImgBtn.setVisibility(View.INVISIBLE);curQuan.setText(String.valueOf(dif));title.setText(String.valueOf(itemHolder[1]));dish1ImgBtn.setVisibility(View.INVISIBLE);dish2ImgBtn.setVisibility(View.INVISIBLE);dish3ImgBtn.setVisibility(View.INVISIBLE);dish4ImgBtn.setVisibility(View.INVISIBLE);drinkImgBtn.setVisibility(View.INVISIBLE);text1.setVisibility(View.INVISIBLE);text2.setVisibility(View.INVISIBLE);text3.setVisibility(View.INVISIBLE);text4.setVisibility(View.INVISIBLE);text5.setVisibility(View.INVISIBLE);text6.setVisibility(View.INVISIBLE);curQuan.setVisibility(View.VISIBLE);quantityDown.setVisibility(View.VISIBLE);quantityUp.setVisibility(View.VISIBLE);oops.setVisibility(View.VISIBLE);background.setVisibility(View.VISIBLE);extra.setVisibility(View.VISIBLE);byosubmit.setVisibility(View.VISIBLE);description.setVisibility(View.VISIBLE);title.setVisibility(View.VISIBLE);description.setText(getResources().getStringArray(R.array.Descriptions)[1]);item1.setVisibility(View.VISIBLE);item2.setVisibility(View.VISIBLE);ArrayAdapter<String> myAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.Meat));myAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);item1.setAdapter(myAdapter);ArrayAdapter<String> myAdapter2=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.Veggie));myAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);item2.setAdapter(myAdapter2);}"
410	"@Override public void onClick(DialogInterface dialog,int which){ final Task task=m_adapter.getItem(pos);new AsyncTask<Object,Void,Boolean>(){  protected void onPreExecute(){    m_ProgressDialog=showProgressDialog(""Deleting"");  }  @Override protected Boolean doInBackground(  Object... params){    try {      taskBag.delete((Task)params[0]);      return true;    } catch (    Exception e) {      Log.e(TAG,e.getMessage(),e);      return false;    }  }  protected void onPostExecute(  Boolean result){    TodoTxtTouch.currentActivityPointer.dismissProgressDialog(true);    if (result) {      Util.showToastLong(TodoTxtTouch.this,""Deleted task "" + task.inFileFormat());    } else {      Util.showToastLong(TodoTxtTouch.this,""Could not delete task "" + task.inFileFormat());    }  }}.execute(task);}"
411	"@Override public void execute(Realm realm){if((mCard.getTitle()==null||mCard.getTitle().isEmpty())&&mCard.getTasks().isEmpty()){mCard.deleteFromRealm();}}"
412	"@Override public Evaluation evaluate(Path path){return _evaluate_(path,thes,AN._);}"
413	"@Override public void onClick(View v){if(((InwardMainActivity)context).MenuItemId==R.id.inward_entry){Intent intent=new Intent(v.getContext(),InwardAddEditSaleOrder2.class);intent.putExtra(""SaleOrder"",saleOrder);intent.putExtra(""InwardAction"",InwardAction.EDIT_SALE_ORDER);v.getContext().startActivity(intent);}else {if(((InwardMainActivity)context).MenuItemId==R.id.despatch_entry){Intent intent=new Intent(v.getContext(),DespatchScrapActivity.class);intent.putExtra(""SaleOrder"",saleOrder);v.getContext().startActivity(intent);}}}"
414	"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){hideKeyboard();DashboardFieldAgent clickedAgent=personsList.get(position-logbookListView.getHeaderViewsCount());((MyDashboard)getParentFragment()).addPersonDetailViewFragment(clickedAgent);}"
415	"public final void compute(){ final Action<? super K> action;if((action=this.action)!=null){for(int i=baseIndex,f,h;batch>0&&(h=((f=baseLimit)+i)>>>1)>i;){addToPendingCount(1);new ForEachKeyTask<K,V>(this,batch>>>=1,baseLimit=h,f,tab,action).fork();}for(Node<K,V> p;(p=advance())!=null;){if(p.val!=NULL_VALUE){action.apply(p.key);}}propagateCompletion();}}"
416	"@SuppressWarnings(""unchecked"") public List<Object[]> getUserJobsFromJobID(int jobId){String sql=queryDao.getQueryString(SQLQueryIds.GET_USER_JOBS_FROM_JOB_ID);Query queryObject=entityManager.createNativeQuery(sql).setParameter(""jobId"",jobId);List<Object[]> resultList=queryObject.getResultList();return resultList;}"
417	"@Override public void onServiceDisconnected(ComponentName name){Log.d(TAG,""lost connection to service ""+name);mTaskManager=null;unregisterEvents();}"
418	"public void mousePressed(MouseEvent evt){if(table.isVisible()){Component c=table.getFocusOwner();for(int i=0;i<boxes.size();i++){if(c!=null&&c.equals(boxes.get(i))){placeInBoxes=i;}}}if(evt.getSource()==copyLabel){String tmp=codeField.getText();tmp=tmp.substring(0,3)+tmp.substring(4);StringSelection ss=new StringSelection(tmp);Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);copyLabel.setForeground(this.darkred);}else {if(evt.getSource()==nextLabel){this.shownextcode=!this.shownextcode;if(this.shownextcode){nextLabel.setForeground(this.darkred);}else {nextLabel.setForeground(Color.black);}this.currcode=null;}else {if(evt.getSource()==editButton){editPasswordCheck();if(checkPass){checkPass=false;}}else {if(evt.getSource()==nextButton){updateName(1);}else {if(evt.getSource()==enterButton){String passTry=pass.getText();if(passTry.equals(password)){checkPass=true;frame.dispose();edit();}}else {if(evt.getSource()==addButton){addRow();}else {if(evt.getSource()==saveButton){save();table.dispose();}else {if(evt.getSource()==enterButton2){if(!newPass.getText().equals("""")&&!newPass.getText().equals("" "")){password=newPass.getText();firstFrame.dispose();this.setVisible(true);edit();}}else {if(evt.getSource()==minusButton){deleteRow();}}}}}}}}}}"
419	"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){ResidenceCommandEvent cevent=new ResidenceCommandEvent(command.getName(),args,sender);server.getPluginManager().callEvent(cevent);if(cevent.isCancelled()){return true;}if(command.getName().equals(""resreload"")&&args.length==0){if(sender instanceof Player){Player player=(Player)sender;if(gmanager.isResidenceAdmin(player)){this.setEnabled(false);this.setEnabled(true);System.out.println(""[Residence] Reloaded by ""+player.getName()+""."");}}else {if(sender instanceof ConsoleCommandSender){this.setEnabled(false);this.setEnabled(true);System.out.println(""[Residence] Reloaded by console."");}}return true;}if(command.getName().equals(""resload"")){if(sender instanceof ConsoleCommandSender||(sender instanceof Player&&gmanager.isResidenceAdmin((Player)sender))){try{this.loadYMLSave(ymlSaveLoc);sender.sendMessage(""?a[Residence] Reloaded save file..."");}catch(Exception ex){sender.sendMessage(""?c[Residence] Unable to reload the save file, exception occured!"");sender.sendMessage(""?c""+ex.getMessage());Logger.getLogger(Residence.class.getName()).log(Level.SEVERE,null,ex);}}return true;}else {if(command.getName().equals(""rc"")){if(sender instanceof Player){Player player=(Player)sender;String pname=player.getName();if(cmanager.chatEnabled()){if(args.length==0){plistener.tooglePlayerResidenceChat(player);}else {String area=plistener.getLastAreaName(pname);if(area!=null){ChatChannel channel=chatmanager.getChannel(area);if(channel!=null){String message="""";for(String arg : args){message=message+"" ""+arg;}channel.chat(pname,message);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidChannel""));}}else {player.sendMessage(""?c""+language.getPhrase(""NotInResidence""));}}}else {player.sendMessage(""?c""+language.getPhrase(""ChatDisabled""));}}return true;}else {if(command.getName().equals(""res"")||command.getName().equals(""residence"")||command.getName().equals(""resadmin"")){if((args.length>0&&args[args.length-1].equalsIgnoreCase(""?""))||(args.length>1&&args[args.length-2].equals(""?""))){if(helppages!=null){String helppath=""res"";for(int i=0;i<args.length;i++){if(args[i].equalsIgnoreCase(""?"")){break;}helppath=helppath+"".""+args[i];}int page=1;if(!args[args.length-1].equalsIgnoreCase(""?"")){try{page=Integer.parseInt(args[args.length-1]);}catch(Exception ex){sender.sendMessage(""?c""+language.getPhrase(""InvalidHelp""));}}if(helppages.containesEntry(helppath)){helppages.printHelp(sender,page,helppath);return true;}}}if(sender instanceof Player){Player player=(Player)sender;PermissionGroup group=Residence.getPermissionManager().getGroup(player);String pname=player.getName();boolean resadmin=false;if(command.getName().equals(""resadmin"")){resadmin=gmanager.isResidenceAdmin(player);if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""NonAdmin""));return true;}}if(cmanager.allowAdminsOnly()){if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""AdminOnly""));return true;}}if(args.length==0){return false;}if(args.length==0){args=new String[1];args[0]=""?"";}if(args[0].equals(""select"")){if(!group.selectCommandAccess()&&!resadmin){player.sendMessage(""?c""+language.getPhrase(""SelectDiabled""));return true;}if(!group.canCreateResidences()&&group.getMaxSubzoneDepth()<=0&&!resadmin){player.sendMessage(""?c""+language.getPhrase(""SelectDiabled""));return true;}if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?aselect ?6[x] [y] [z]?3 - select in x,y,z radius"");player.sendMessage(""?aselect ?6vert?3 - expands selection from highest to lowest allowed"");player.sendMessage(""?aselect ?6sky?3 - expands selection to highest allowed"");player.sendMessage(""?aselect ?6bedrock?3 - expands selection to lowest allowed"");player.sendMessage(""?aselect ?6size?3 - get size of selection."");player.sendMessage(""?aselect ?6coords?3 - get selected coords."");player.sendMessage(""?aselect ?6expand <size>?3 - expand selection the direction your looking."");player.sendMessage(""?aselect ?6shift <distance>?3 - shift selection the direction your looking."");player.sendMessage(""?aselect ?6chunk?3 - select the current chunk your in."");player.sendMessage(""?aselect ?6residence <ResidenceName> <AreaID>?3 - select existing area."");player.sendMessage(""?9You can use a ""+Material.getMaterial(cmanager.getSelectionTooldID()).name()+"" tool to select."");return true;}else {if(args.length==2){if(args[1].equals(""size"")||args[1].equals(""cost"")){if(smanager.hasPlacedBoth(pname)){try{smanager.showSelectionInfo(player);return true;}catch(Exception ex){Logger.getLogger(Residence.class.getName()).log(Level.SEVERE,null,ex);return true;}}}else {if(args[1].equals(""vert"")){smanager.vert(player,resadmin);return true;}else {if(args[1].equals(""sky"")){smanager.sky(player,resadmin);return true;}else {if(args[1].equals(""bedrock"")){smanager.bedrock(player,resadmin);return true;}else {if(args[1].equals(""coords"")){player.sendMessage(""?aSelections:"");Location playerLoc1=smanager.getPlayerLoc1(pname);if(playerLoc1!=null){player.sendMessage(""?a""+language.getPhrase(""Primary.Selection"")+"":?b (""+playerLoc1.getBlockX()+"", ""+playerLoc1.getBlockY()+"", ""+playerLoc1.getBlockZ()+"")"");}Location playerLoc2=smanager.getPlayerLoc2(pname);if(playerLoc2!=null){player.sendMessage(""?a""+language.getPhrase(""Secondary.Selection"")+"":?b (""+playerLoc2.getBlockX()+"", ""+playerLoc2.getBlockY()+"", ""+playerLoc2.getBlockZ()+"")"");}return true;}else {if(args[1].equals(""chunk"")){smanager.selectChunk(player);return true;}}}}}}}else {if(args.length==3){if(args[1].equals(""expand"")){int amount;try{amount=Integer.parseInt(args[2]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidAmount""));return true;}smanager.modify(player,false,amount);return true;}else {if(args[1].equals(""shift"")){int amount;try{amount=Integer.parseInt(args[2]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidAmount""));return true;}smanager.modify(player,true,amount);return true;}}}}}if(args[1].equals(""residence"")){ClaimedResidence res=rmanager.getByName(args[2]);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}CuboidArea area=res.getArea(args[3]);if(area!=null){smanager.placeLoc1(pname,area.getHighLoc());smanager.placeLoc2(pname,area.getLowLoc());player.sendMessage(""?a""+language.getPhrase(""SelectionArea"",""?6""+args[3]+""?a.?6""+args[2]+""?a""));}else {player.sendMessage(""?c""+language.getPhrase(""AreaNonExist""));}return true;}else {try{smanager.selectBySize(player,Integer.parseInt(args[1]),Integer.parseInt(args[2]),Integer.parseInt(args[3]));return true;}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""SelectionFail""));return true;}}}else {if(args[0].equals(""create"")){if(args.length!=2){return false;}if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?acreate ?6<ResidenceName>?3"");return true;}if(smanager.hasPlacedBoth(pname)){rmanager.addResidence(player,args[1],smanager.getPlayerLoc1(pname),smanager.getPlayerLoc2(pname),resadmin);return true;}else {player.sendMessage(""?c""+language.getPhrase(""SelectPoints""));return true;}}else {if(args[0].equals(""subzone"")||args[0].equals(""sz"")){if(args.length!=2&&args.length!=3){return false;}if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?asubzone / sz ?6<ParentZoneName> [SubZoneName]?3"");return true;}String zname;String parent;if(args.length==2){parent=rmanager.getNameByLoc(player.getLocation());zname=args[1];}else {parent=args[1];zname=args[2];}if(smanager.hasPlacedBoth(pname)){ClaimedResidence res=rmanager.getByName(parent);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}res.addSubzone(player,smanager.getPlayerLoc1(pname),smanager.getPlayerLoc2(pname),zname,resadmin);return true;}else {player.sendMessage(""?c""+language.getPhrase(""SelectPoints""));return true;}}else {if(args[0].equals(""remove"")||args[0].equals(""delete"")){if(args.length==1){String area=rmanager.getNameByLoc(player.getLocation());if(area!=null){rmanager.removeResidence(player,area,resadmin);return true;}return false;}if(args.length!=2){return false;}rmanager.removeResidence(player,args[1],resadmin);return true;}else {if(args[0].equals(""area"")){if(args.length==4){if(args[1].equals(""remove"")){ClaimedResidence res=rmanager.getByName(args[2]);if(res!=null){res.removeArea(player,args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args[1].equals(""add"")){if(smanager.hasPlacedBoth(pname)){ClaimedResidence res=rmanager.getByName(args[2]);if(res!=null){res.addArea(player,new CuboidArea(smanager.getPlayerLoc1(pname),smanager.getPlayerLoc2(pname)),args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}}else {player.sendMessage(""?c""+language.getPhrase(""SelectPoints""));}return true;}else {if(args[1].equals(""replace"")){if(smanager.hasPlacedBoth(pname)){ClaimedResidence res=rmanager.getByName(args[2]);if(res!=null){res.replaceArea(player,new CuboidArea(smanager.getPlayerLoc1(pname),smanager.getPlayerLoc2(pname)),args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}}else {player.sendMessage(""?c""+language.getPhrase(""SelectPoints""));}return true;}}}}else {player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?barea ?6<add/remove/replace> <residence> <areaID>?3 - Allows physical areas to be added, removed, or replaced, on a residence.  You must select an area first."");return true;}}else {if(args[0].equals(""lists"")){if(args.length==2){if(args[1].equals(""list"")){pmanager.printLists(player);return true;}}else {if(args.length==3){if(args[1].equals(""view"")){pmanager.printList(player,args[2]);return true;}else {if(args[1].equals(""remove"")){pmanager.removeList(player,args[2]);return true;}else {if(args[1].equals(""add"")){pmanager.makeList(player,args[2]);return true;}}}}else {if(args.length==4){if(args[1].equals(""apply"")){pmanager.applyListToResidence(player,args[2],args[3],resadmin);return true;}}else {if(args.length==5){if(args[1].equals(""set"")){pmanager.getList(pname,args[2]).setFlag(args[3],FlagPermissions.stringToFlagState(args[4]));player.sendMessage(""?a""+language.getPhrase(""FlagSet""));return true;}}else {if(args.length==6){if(args[1].equals(""gset"")){pmanager.getList(pname,args[2]).setGroupFlag(args[3],args[4],FlagPermissions.stringToFlagState(args[5]));player.sendMessage(""?a""+language.getPhrase(""FlagSet""));return true;}else {if(args[1].equals(""pset"")){pmanager.getList(pname,args[2]).setPlayerFlag(args[3],args[4],FlagPermissions.stringToFlagState(args[5]));player.sendMessage(""?a""+language.getPhrase(""FlagSet""));return true;}}}else {player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?9/res lists ?3- Manage predefined permission lists."");player.sendMessage(""?badd ?6<listname>?3 - Add a permission list."");player.sendMessage(""?bremove ?6<listname>?3 - Add a permission list."");player.sendMessage(""?blist ?3 - Display your lists."");player.sendMessage(""?bapply ?6<listname> <residence>?3 - Apply list to residence."");player.sendMessage(""?bset ?6<listname> <flag> <value>?3 - Set residence flags."");player.sendMessage(""?bpset / gset ?6<listname> <player/group> <flag> <value>?3 - Set group/player flags."");player.sendMessage(""?bview ?6<listname>?3 - View list."");return true;}}}}}}else {if(args[0].equals(""default"")){if(args.length==2){ClaimedResidence res=rmanager.getByName(args[1]);res.getPermissions().applyDefaultFlags(player,resadmin);return true;}}else {if(args[0].equals(""limits"")){if(args.length==1){gmanager.getGroup(player).printLimits(player);return true;}}else {if(args[0].equals(""info"")){if(args.length==1){String area=rmanager.getNameByLoc(player.getLocation());if(area!=null){rmanager.printAreaInfo(area,player);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args.length==2){rmanager.printAreaInfo(args[1],player);return true;}}}else {if(args[0].equals(""check"")){if(args.length==3||args.length==4){if(args.length==4){pname=args[3];}ClaimedResidence res=rmanager.getByName(args[1]);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}if(!res.getPermissions().hasApplicableFlag(pname,args[2])){player.sendMessage(language.getPhrase(""FlagCheckFalse"",""?e""+args[2]+""?c.?e""+pname+""?c.?e""+args[1]+""?c""));}else {player.sendMessage(language.getPhrase(""FlagCheckTrue"",""?a""+args[2]+""?e.?a""+pname+""?e.?e""+args[1]+""?c.""+(res.getPermissions().playerHas(pname,res.getPermissions().getWorld(),args[2],false)?""?aTRUE"":""?cFALSE"")));}return true;}}else {if(args[0].equals(""current"")){if(args.length!=1){return false;}String res=rmanager.getNameByLoc(player.getLocation());if(res==null){player.sendMessage(""?c""+language.getPhrase(""NotInResidence""));}else {player.sendMessage(""?a""+language.getPhrase(""InResidence"")+""?e""+res+""?a"");}return true;}else {if(args[0].equals(""set"")){if(args.length==3){String area=rmanager.getNameByLoc(player.getLocation());if(area!=null){rmanager.getByName(area).getPermissions().setFlag(player,args[1],args[2],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args.length==4){ClaimedResidence area=rmanager.getByName(args[1]);if(area!=null){area.getPermissions().setFlag(player,args[2],args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}}if(args.length==2){if(args[1].equals(""?"")){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?bset ?6<residence> [flag] [true/false/remove]"");player.sendMessage(""?2These are general flags can be true/false or neither."");player.sendMessage(""?cFlags:?a move,build,use,pvp,fire,damage,explosions,monsters,flow,tp"");player.sendMessage(""?amove?3 - globally allow everyone move rights"");player.sendMessage(""?abuild?3 - globally allow everyone build rights"");player.sendMessage(""?ause?3 - globally allow everyone use rights"");player.sendMessage(""?acontainer?3 - allows / disallows container access."");player.sendMessage(""?apvp?3 - allows or dissallows pvp."");player.sendMessage(""?aignite?3 - allows / disallows fire starting."");player.sendMessage(""?asubzone?3 - allows / disallows subzoning."");player.sendMessage(""?afirespread?3 - allows / disallows fire spread."");player.sendMessage(""?adamage?3 - allows / disallows damage while in zone."");player.sendMessage(""?atnt / creeper?3 - allows / disallows tnt or creeper explosions."");player.sendMessage(""?amonsters?3 - allows / disallows monster spawns."");player.sendMessage(""?aflow?3 - allows / disallows liquid movement in zone."");player.sendMessage(""?atp?3 - allows / disallows teleports to your residence."");player.sendMessage(""?9<residence> can be ommited, it will use the residence your in."");return true;}}player.sendMessage(""?c/res set ? for more info."");return true;}else {if(args[0].equals(""pset"")){if(args.length==4){ClaimedResidence area=rmanager.getByLoc(player.getLocation());if(area!=null){area.getPermissions().setPlayerFlag(player,args[1],args[2],args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args.length==5){ClaimedResidence area=rmanager.getByName(args[1]);if(area!=null){area.getPermissions().setPlayerFlag(player,args[2],args[3],args[4],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}}if(args.length==2){if(args[1].equals(""?"")||args[1].equals(""help"")){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?bpset ?6<residence> [player] [flag] [true/false/remove]"");player.sendMessage(""?2These are command for allowing / denying player permissions."");player.sendMessage(""?cFlags:?a move, build, use, tp, admin"");player.sendMessage(""?amove?3 - allows movement when area set to private."");player.sendMessage(""?abuild?3 - allows building / destroying blocks."");player.sendMessage(""?ause?3 - allows using lever, doors, chests."");player.sendMessage(""?acontainer?3 - allows / disallows container access."");player.sendMessage(""?aadmin?3 - allows user to give / remove area flags."");player.sendMessage(""?asubzone?3 - allows / disallows subzoning."");player.sendMessage(""?atp?3 - allows / disallows player to tp to your residence."");player.sendMessage(""?9<residence> can be ommited, it will use the residence your in."");return true;}}player.sendMessage(""?c/res pset ? for more info."");return true;}else {if(args[0].equals(""gset"")){if(args.length==4){ClaimedResidence area=rmanager.getByLoc(player.getLocation());if(area!=null){area.getPermissions().setGroupFlag(player,args[1],args[2],args[3],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidArea""));}return true;}else {if(args.length==5){ClaimedResidence area=rmanager.getByName(args[1]);if(area!=null){area.getPermissions().setGroupFlag(player,args[2],args[3],args[4],resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}}if(args.length==2){if(args[1].equals(""?"")||args[1].equals(""help"")){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?bgset ?6<residence> [group] [flag] [true/false/remove]"");player.sendMessage(""?9gset follows the same rules and flags as pset, except it works for groups.  type /res pset ? for more info."");return true;}}player.sendMessage(""?c/res pset ? for more info."");return true;}else {if(args[0].equals(""lset"")){ClaimedResidence res=null;Material mat=null;String listtype=null;boolean showinfo=false;if(args.length==1){player.sendMessage(""?eUsage: ?3/res lset ?6<residence> [blacklist/ignorelist] [material]"");player.sendMessage(""?eUsage: ?3/res lset ?6<residence> info"");return true;}if(args.length==2&&args[1].equals(""info"")){res=rmanager.getByLoc(player.getLocation());showinfo=true;}else {if(args.length==3&&args[2].equals(""info"")){res=rmanager.getByName(args[1]);showinfo=true;}}if(showinfo){if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}player.sendMessage(""?cBlacklist:"");res.getItemBlacklist().printList(player);player.sendMessage(""?aIgnorelist:"");res.getItemIgnoreList().printList(player);return true;}else {if(args.length==4){res=rmanager.getByName(args[1]);listtype=args[2];try{mat=Material.valueOf(args[3].toUpperCase());}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidMaterial""));return true;}}else {if(args.length==3){res=rmanager.getByLoc(player.getLocation());listtype=args[1];try{mat=Material.valueOf(args[2].toUpperCase());}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidMaterial""));return true;}}}}if(res!=null){if(listtype.equalsIgnoreCase(""blacklist"")){res.getItemBlacklist().playerListChange(player,mat,resadmin);}else {if(listtype.equalsIgnoreCase(""ignorelist"")){res.getItemIgnoreList().playerListChange(player,mat,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidList""));}}return true;}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}}else {if(args[0].equals(""list"")){rmanager.listResidences(player);return true;}else {if(args[0].equals(""?"")||args[0].equals(""help"")){if(resadmin){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?b/resadmin?3 - additional admin residence commands."");player.sendMessage(""?alease set ?6[residence] [#days/infinite]?3 - set a lease."");player.sendMessage(""?asetowner ?6[residence] [player]?3 - change residence owner."");player.sendMessage(""?aserver ?6[residence]?3 - change residence owner to server owned."");player.sendMessage(""?3Admins also have access to all the normal /res commands for any residence by replacing /res with /resadmin.  Admins are also immune to deny flags."");}else {player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?aselect ?6[x] [y] [z]?3 - /res select ?"");player.sendMessage(""?acreate ?6[name]?3 - create residence [name] after selection."");player.sendMessage(""?asubzone ?6<residence> [name]?3 - create subzone [name]."");player.sendMessage(""?ainfo ?6<residence>?3 - view info on residence."");player.sendMessage(""?aset / pset / gset?3 - sets flags, /res set ? for details"");player.sendMessage(""?alist / listall ?3- list your/all residences."");player.sendMessage(""?lset ?3- blacklist/ignorelist control, /res lset ? for details."");player.sendMessage(""?alimits ?3- view global residence limits."");player.sendMessage(""?aunstuck ?3- attempt to move out of the residence your in."");player.sendMessage(""?atp ?6<residence> ?3/ ?atpset ?3- tp to a residence / set tp loc."");player.sendMessage(""?amessage ?6<residence> [enter/leave] [message]?3 - area message."");player.sendMessage(""?amirror ?6[source] [target]?3 - clone residence permissions."");player.sendMessage(""?amarket?3 - buy / sell residence /res market ? for details."");player.sendMessage(""?alease?3 - lease management /res lease ? for details."");player.sendMessage(""?alists?3 - predefined permission lists /res lists ? for details."");player.sendMessage(""?aarea?3 - Add/Remove physical areas to the residence."");player.sendMessage(""?arename / renamearea?3 - rename a residence or area."");player.sendMessage(""?aversion?3 - show version."");}return true;}else {if(args[0].equals(""rename"")){if(args.length==3){rmanager.renameResidence(player,args[1],args[2],resadmin);return true;}if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?arename ?6<FullOldName> <NewName>?3 - Renames a residence."");return true;}}else {if(args[0].equals(""renamearea"")){if(args.length==4){ClaimedResidence res=rmanager.getByName(args[1]);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}res.renameArea(player,args[2],args[3],resadmin);return true;}if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?arenamearea ?6<ResidenceName> <OldAreaName> <NewAreaName>?3 - renames a area in a residence."");return true;}}else {if(args[0].equals(""unstuck"")){if(args.length!=1){return false;}group=gmanager.getGroup(player);if(!group.hasUnstuckAccess()){player.sendMessage(""?c""+language.getPhrase(""NoPermission""));return true;}ClaimedResidence res=rmanager.getByLoc(player.getLocation());if(res==null){player.sendMessage(""?c""+language.getPhrase(""NotInResidence""));}else {player.sendMessage(""?e""+language.getPhrase(""Moved"")+""..."");player.teleport(res.getOutsideFreeLoc(player.getLocation()));}return true;}else {if(args[0].equals(""mirror"")){if(args.length!=3){return false;}rmanager.mirrorPerms(player,args[1],args[2],resadmin);if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?amirror ?6<SourceResidence> <TargetResidence>?3 - mirrors permissions."");return true;}return true;}else {if(args[0].equals(""listall"")){if(args.length==1){rmanager.listAllResidences(player,1);}else {if(args.length==2){try{int page=Integer.parseInt(args[1]);rmanager.listAllResidences(player,page);}catch(Exception ex){}}else {return false;}}return true;}else {if(args[0].equals(""version"")){player.sendMessage(""?7------------------------------------"");player.sendMessage(""?cThis server running ?6Residence?c version: ?9""+this.getDescription().getVersion());player.sendMessage(""?aCreated by: ?ebekvon"");player.sendMessage(""?3For a command list, and help, see the wiki:"");player.sendMessage(""?ahttp://residencebukkitmod.wikispaces.com/"");player.sendMessage(""?bVisit the Residence thread at:"");player.sendMessage(""?9http://forums.bukkit.org/"");player.sendMessage(""?7------------------------------------"");return true;}else {if(args[0].equals(""material"")){if(args.length!=2){return false;}try{player.sendMessage(""?a""+language.getPhrase(""GetMaterial"",""?6""+args[1]+""?a.?c""+Material.getMaterial(Integer.parseInt(args[1])).name()+""?a""));}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidMaterial""));}return true;}else {if(args[0].equals(""tpset"")){ClaimedResidence res=rmanager.getByLoc(player.getLocation());if(res!=null){res.setTpLoc(player,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args[0].equals(""tp"")){if(args.length!=2){return false;}ClaimedResidence res=rmanager.getByName(args[1]);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}res.tpToResidence(player,player,resadmin);return true;}else {if(args[0].equals(""lease"")){if(args.length==1||args.length==2){if(args.length==1||args[1].equals(""?"")){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?b/res lease?3 - residence lease commands."");player.sendMessage(""?arenew ?6[residence]?3 - renew residence."");player.sendMessage(""?acost ?6[residence]?3 - get cost of renewal."");return true;}}if(args.length==2||args.length==3){if(args[1].equals(""renew"")){if(args.length==3){leasemanager.renewArea(args[2],player);}else {leasemanager.renewArea(rmanager.getNameByLoc(player.getLocation()),player);}return true;}else {if(args[1].equals(""cost"")){if(args.length==3){ClaimedResidence res=Residence.getResidenceManger().getByName(args[2]);if(res==null||leasemanager.leaseExpires(args[2])){int cost=leasemanager.getRenewCost(res);player.sendMessage(""?e""+language.getPhrase(""LeaseRenewalCost"",""?c""+args[2]+""?e.?c""+cost+""?e""));}else {player.sendMessage(""?c""+language.getPhrase(""LeaseNotExpire""));}return true;}else {String area=rmanager.getNameByLoc(player.getLocation());ClaimedResidence res=rmanager.getByName(area);if(area==null||res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidArea""));return true;}if(leasemanager.leaseExpires(area)){int cost=leasemanager.getRenewCost(res);player.sendMessage(""?e""+language.getPhrase(""LeaseRenewalCost"",""?c""+area+""?e.?c""+cost+""?e""));}else {player.sendMessage(""?c""+language.getPhrase(""LeaseNotExpire""));}return true;}}}}else {if(args.length==4){if(args[1].equals(""set"")){if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""NoPermission""));return true;}if(args[3].equals(""infinite"")){if(leasemanager.leaseExpires(args[2])){leasemanager.removeExpireTime(args[2]);player.sendMessage(""?a""+language.getPhrase(""LeaseInfinite""));}else {player.sendMessage(""?c""+language.getPhrase(""LeaseNotExpire""));}return true;}else {int days;try{days=Integer.parseInt(args[3]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidDays""));return true;}leasemanager.setExpireTime(player,args[2],days);return true;}}}}return false;}else {if(args[0].equals(""bank"")){if(args.length!=3){return false;}ClaimedResidence res=rmanager.getByName(plistener.getLastAreaName(pname));if(res==null){player.sendMessage(""?c""+language.getPhrase(""NotInResidence""));return true;}int amount=0;try{amount=Integer.parseInt(args[2]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidAmount""));return true;}if(args[1].equals(""deposit"")){res.getBank().deposit(player,amount,resadmin);}else {if(args[1].equals(""withdraw"")){res.getBank().withdraw(player,amount,resadmin);}else {return false;}}return true;}else {if(args[0].equals(""market"")){if(args.length==1||args.length==2){if(args.length==1||args[1].equals(""?"")){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?b/res market?3 - residence market commands."");player.sendMessage(""?abuy ?6[residence]?3 - buy a residence"");player.sendMessage(""?alist ?6[residence]?3 - list rentable and for sale residence."");player.sendMessage(""?asell ?6[residence] [amount]?3 - set residence for sale."");player.sendMessage(""?aunsell ?6[residence]?3 - stop selling residence."");player.sendMessage(""?ainfo ?6[residence]?3 - view market info for residence."");player.sendMessage(""?arent ?6[residence] <repeat:t/f>?3 - rent a residence."");player.sendMessage(""?arentable ?6[residence] [cost] [days] <repeat:t/f>?3 - make a residence you own for rent."");player.sendMessage(""?arelease ?6[residence]?3 - release a residence you've rented, or made rentable."");player.sendMessage(""?aautorenew ?6[residence] [true(t)/false(f)]?3 - make a rent or rentable automatically renew at expiration."");return true;}}if(args[1].equals(""list"")){if(!cmanager.enableEconomy()){player.sendMessage(""?c""+language.getPhrase(""MarketDisabled""));return true;}player.sendMessage(""?9---""+language.getPhrase(""MarketList"")+""---"");tmanager.printForSaleResidences(player);if(cmanager.enabledRentSystem()){rentmanager.printRentableResidences(player);}return true;}else {if(args[1].equals(""autorenew"")){if(!cmanager.enableEconomy()){player.sendMessage(""?c""+language.getPhrase(""MarketDisabled""));return true;}if(args.length!=4){return false;}boolean value;if(args[3].equalsIgnoreCase(""true"")||args[3].equalsIgnoreCase(""t"")){value=true;}else {if(args[3].equalsIgnoreCase(""false"")||args[3].equalsIgnoreCase(""f"")){value=false;}else {player.sendMessage(""?c""+language.getPhrase(""InvalidBoolean""));return true;}}if(rentmanager.isRented(args[2])&&rentmanager.getRentingPlayer(args[2]).equalsIgnoreCase(pname)){rentmanager.setRentedRepeatable(player,args[2],value,resadmin);}else {if(rentmanager.isForRent(args[2])){rentmanager.setRentRepeatable(player,args[2],value,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""RentReleaseInvalid"",""?e""+args[2]+""?c""));}}return true;}else {if(args[1].equals(""rentable"")){if(args.length<5||args.length>6){return false;}if(!cmanager.enabledRentSystem()){player.sendMessage(""?c""+language.getPhrase(""RentDisabled""));return true;}int days;int cost;try{cost=Integer.parseInt(args[3]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidCost""));return true;}try{days=Integer.parseInt(args[4]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidDays""));return true;}boolean repeat=false;if(args.length==6){if(args[5].equalsIgnoreCase(""t"")||args[5].equalsIgnoreCase(""true"")){repeat=true;}else {if(!args[5].equalsIgnoreCase(""f"")&&!args[5].equalsIgnoreCase(""false"")){player.sendMessage(""?c""+language.getPhrase(""InvalidBoolean""));return true;}}}rentmanager.setForRent(player,args[2],cost,days,repeat,resadmin);return true;}else {if(args[1].equals(""rent"")){if(args.length<3||args.length>4){return false;}boolean repeat=false;if(args.length==4){if(args[3].equalsIgnoreCase(""t"")||args[3].equalsIgnoreCase(""true"")){repeat=true;}else {if(!args[3].equalsIgnoreCase(""f"")&&!args[3].equalsIgnoreCase(""false"")){player.sendMessage(""?c""+language.getPhrase(""InvalidBoolean""));return true;}}}rentmanager.rent(player,args[2],repeat,resadmin);return true;}else {if(args[1].equals(""release"")){if(args.length!=3){return false;}if(rentmanager.isRented(args[2])){rentmanager.removeFromForRent(player,args[2],resadmin);}else {rentmanager.unrent(player,args[2],resadmin);}return true;}else {if(args.length==2){if(args[1].equals(""info"")){String areaname=rmanager.getNameByLoc(player.getLocation());tmanager.viewSaleInfo(areaname,player);if(cmanager.enabledRentSystem()&&rentmanager.isForRent(areaname)){rentmanager.printRentInfo(player,areaname);}return true;}}else {if(args.length==3){if(args[1].equals(""buy"")){tmanager.buyPlot(args[2],player,resadmin);return true;}else {if(args[1].equals(""info"")){tmanager.viewSaleInfo(args[2],player);if(cmanager.enabledRentSystem()&&rentmanager.isForRent(args[2])){rentmanager.printRentInfo(player,args[2]);}return true;}else {if(args[1].equals(""unsell"")){tmanager.removeFromSale(player,args[2],resadmin);return true;}}}}else {if(args.length==4){if(args[1].equals(""sell"")){int amount;try{amount=Integer.parseInt(args[3]);}catch(Exception ex){player.sendMessage(""?c""+language.getPhrase(""InvalidAmount""));return true;}tmanager.putForSale(args[2],player,amount,resadmin);return true;}}}}}}}}}return false;}else {if(args[0].equals(""message"")){if(args.length==1||(args.length==2&&args[1].equals(""?""))){player.sendMessage(""?d----------Command Help:----------"");player.sendMessage(""?amessage ?6<ResidenceName> <enter/leave> <message>?3 - Set a enter or leave message."");player.sendMessage(""?amessage ?6<ResidenceName> <remove> <enter/leave>?3 - Remove a enter or leave message."");player.sendMessage(""?cMessage Variables?3 - Variables you can use in a message."");player.sendMessage(""?6 %player?3 - Name of the player who entered / left."");player.sendMessage(""?6 %owner?3 - Residence owner."");player.sendMessage(""?6 %residence?3 - Name of the residence."");return true;}if(args.length<3){player.sendMessage(""?c/res message <residence> [enter/leave] [message]"");return true;}ClaimedResidence res=null;int start=0;boolean enter=false;if(args[1].equals(""enter"")){enter=true;res=rmanager.getByLoc(player.getLocation());start=2;}else {if(args[1].equals(""leave"")){res=rmanager.getByLoc(player.getLocation());start=2;}else {if(args[2].equals(""enter"")){enter=true;res=rmanager.getByName(args[1]);start=3;}else {if(args[2].equals(""leave"")){res=rmanager.getByName(args[1]);start=3;}else {if(args[1].equals(""remove"")){if(args[2].equals(""enter"")){res=rmanager.getByLoc(player.getLocation());if(res!=null){res.setEnterLeaveMessage(player,null,true,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args[2].equals(""leave"")){res=rmanager.getByLoc(player.getLocation());if(res!=null){res.setEnterLeaveMessage(player,null,false,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}}player.sendMessage(""?c""+language.getPhrase(""InvalidMessageType""));return true;}else {if(args[2].equals(""remove"")){res=rmanager.getByName(args[1]);if(args.length!=4){return false;}if(args[3].equals(""enter"")){if(res!=null){res.setEnterLeaveMessage(player,null,true,resadmin);}return true;}else {if(args[3].equals(""leave"")){if(res!=null){res.setEnterLeaveMessage(player,null,false,resadmin);}return true;}}player.sendMessage(""?c""+language.getPhrase(""InvalidMessageType""));return true;}else {player.sendMessage(""?c""+language.getPhrase(""InvalidMessageType""));return true;}}}}}}String message="""";for(int i=start;i<args.length;i++){message=message+args[i]+"" "";}if(res!=null){res.setEnterLeaveMessage(player,message,enter,resadmin);}else {player.sendMessage(""?c""+language.getPhrase(""InvalidArea""));}return true;}else {if(args[0].equals(""give"")){if(args.length!=3){player.sendMessage(""?cUsage: /res give <residence> <player>"");return true;}rmanager.giveResidence(player,args[2],args[1],resadmin);return true;}else {if(args[0].equals(""setowner"")){if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""NoPermission""));return true;}ClaimedResidence area=rmanager.getByName(args[1]);if(area!=null){area.getPermissions().setOwner(args[2],true);player.sendMessage(""?a""+language.getPhrase(""ResidenceOwnerChange"",""?e ""+args[1]+"" ?a.?e""+args[2]+""?a""));}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args[0].equals(""server"")){if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""NoPermission""));return true;}if(args.length==2){ClaimedResidence res=rmanager.getByName(args[1]);if(res==null){player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));return true;}res.getPermissions().setOwner(""Server Land"",false);player.sendMessage(""?a""+language.getPhrase(""ResidenceOwnerChange"",""?e ""+args[1]+"" ?a.?eServer Land?a""));}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}}else {if(args[0].equals(""clearflags"")){if(!resadmin){player.sendMessage(""?c""+language.getPhrase(""NoPermission""));return true;}ClaimedResidence area=rmanager.getByName(args[1]);if(area!=null){area.getPermissions().clearFlags();player.sendMessage(""?a""+language.getPhrase(""FlagsCleared""));}else {player.sendMessage(""?c""+language.getPhrase(""InvalidResidence""));}return true;}else {if(args[0].equals(""tool"")){player.sendMessage(""?e""+language.getPhrase(""SelectionTool"")+"":?a""+Material.getMaterial(cmanager.getSelectionTooldID()));player.sendMessage(""?e""+language.getPhrase(""InfoTool"")+"": ?a""+Material.getMaterial(cmanager.getInfoToolID()));return true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}player.sendMessage(""?c/res ? for more info."");}return true;}}}return super.onCommand(sender,command,label,args);}"
420	"public void onError(Exception e){byte msgType=org.apache.thrift.protocol.TMessageType.REPLY;org.apache.thrift.TBase msg;getAllHostNames_result result=new getAllHostNames_result();{msgType=org.apache.thrift.protocol.TMessageType.EXCEPTION;msg=(org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR,e.getMessage());}try{fcall.sendResponse(fb,msg,msgType,seqid);return ;}catch(Exception ex){LOGGER.error(""Exception writing to internal frame buffer"",ex);}fb.close();}"
421	"@Override public void run(){Log.v(TAG,imagePath);NetResult res=getHashCode(bitmap);Message msg=Message.obtain();Bundle data=new Bundle();if(runForSearch){for(int i=0;i<res.topK.length;i++){Log.v(TAG,String.valueOf(res.topK[i]));}try(InputStream hc=new FileInputStream(Environment.getExternalStorageDirectory()+""/imageRetrieval/hashCode.hc"");InputStream imageInfo=new FileInputStream(Environment.getExternalStorageDirectory()+""/imageRetrieval/imageInfo.csv"")){InputStreamReader infoReader=new InputStreamReader(imageInfo);BufferedReader bfr=new BufferedReader(infoReader);int imageNum=hc.available()/192;Log.v(TAG,""hashcode available:""+String.valueOf(imageNum));SortedPair mpair=new SortedPair(10);byte[] temp=new byte[192];byte comRes;String fileName;int[] topk=new int[20];for(int i=0;i<imageNum;i++){fileName=bfr.readLine();String[] info=fileName.split("","");if(info.length!=21){continue;}fileName=info[0];for(int j=1;j<21;j++){topk[j-1]=Integer.valueOf(info[j].trim());}if(hc.read(temp)<192){Log.v(TAG,""??????"");break;}else {boolean check=false;for(int topi=0;topi<topk.length;topi++){check=false;for(int topj=0;topj<res.topK.length;topj++){if(topk[topi]==res.topK[topj]){check=true;break;}}if(check){break;}}if(check){int dist=0;for(int j=0;j<192;j++){comRes=(byte)(res.hashCode[j]^temp[j]);for(int k=0;k<8;k++){dist+=(comRes&0x01);comRes=(byte)(comRes>>1);}}mpair.push(dist,fileName);}}}Log.v(TAG,""????"");msg.what=MainActivity.HASHCODERESULT;String[] similarImages=mpair.getTopK();data.putStringArray(SEARCH_RESULT,similarImages);data.putString(IMAGEPATH,imagePath);}catch(IOException e){Log.v(TAG,""read image error"");e.printStackTrace();}}else {msg.what=MainActivity.IMAGEINFORESULT;data.putSerializable(NET_RESULT,res);data.putString(IMAGEPATH,imagePath);}msg.setData(data);mhandler.sendMessage(msg);}"
422	"public Object get(ResultSet rs,String colName) throws SQLException{File f=this.createTempFile();Files.write(f,rs.getBlob(colName).getBinaryStream());return new SimpleBlob(f);}"
423	"private void deleteAlbum(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException,SQLException{String albumId=request.getParameter(""Album_ID"");System.out.println(albumId);AlbumDAO dao=new AlbumDAO();dao.deleteAlbum(albumId);listAlbums(request,response);}"
424	"@Override public boolean equals(Object other){return other.getClass().isInstance(FeasiblePath.class)&&this.getPath().equals(((FeasiblePath)other).getPath());}"
425	"public static void annotateAlteration(Alteration alteration,String proteinChange){String consequence=""NA"";String ref=null;String var=null;Integer start=-1;Integer end=100000;if(alteration==null){return ;}if(proteinChange==null){proteinChange="""";}if(proteinChange.startsWith(""p."")){proteinChange=proteinChange.substring(2);}if(proteinChange.indexOf(""["")!=-1){proteinChange=proteinChange.substring(0,proteinChange.indexOf(""[""));}proteinChange=proteinChange.trim();Pattern p=Pattern.compile(""([A-Z\\*])([0-9]+)([A-Z\\*]?)"");Matcher m=p.matcher(proteinChange);if(m.matches()){ref=m.group(1);start=Integer.valueOf(m.group(2));end=start;var=m.group(3);if(ref.equals(var)){consequence=""synonymous_variant"";}else {if(ref.equals(""*"")){consequence=""stop_lost"";}else {if(var.equals(""*"")){consequence=""stop_gained"";}else {if(start==1){consequence=""initiator_codon_variant"";}else {consequence=""missense_variant"";}}}}}else {p=Pattern.compile(""[A-Z]?([0-9]+)(_[A-Z]?([0-9]+))?delins([A-Z]+)"");m=p.matcher(proteinChange);if(m.matches()){start=Integer.valueOf(m.group(1));if(m.group(3)!=null){end=Integer.valueOf(m.group(3));}else {end=start;}Integer deletion=end-start+1;Integer insertion=m.group(4).length();if(insertion-deletion>0){consequence=""inframe_insertion"";}else {if(insertion-deletion==0){consequence=""missense_variant"";}else {consequence=""inframe_deletion"";}}}else {p=Pattern.compile(""[A-Z]?([0-9]+)(_[A-Z]?([0-9]+))?(_)?splice"");m=p.matcher(proteinChange);if(m.matches()){start=Integer.valueOf(m.group(1));if(m.group(3)!=null){end=Integer.valueOf(m.group(3));}else {end=start;}consequence=""splice_region_variant"";}else {p=Pattern.compile(""[A-Z]?([0-9]+)_[A-Z]?([0-9]+)(.+)"");m=p.matcher(proteinChange);if(m.matches()){start=Integer.valueOf(m.group(1));end=Integer.valueOf(m.group(2));String v=m.group(3);switch (v){case ""mis"" :consequence=""missense_variant"";break;case ""ins"" :consequence=""inframe_insertion"";break;case ""del"" :consequence=""inframe_deletion"";break;case ""fs"" :consequence=""frameshift_variant"";break;case ""trunc"" :consequence=""feature_truncation"";break;case ""mut"" :consequence=""any"";}}else {p=Pattern.compile(""([A-Z\\*])([0-9]+)[A-Z]?fs.*"");m=p.matcher(proteinChange);if(m.matches()){ref=m.group(1);start=Integer.valueOf(m.group(2));end=start;consequence=""frameshift_variant"";}else {p=Pattern.compile(""([A-Z]+)?([0-9]+)((ins)|(del))"");m=p.matcher(proteinChange);if(m.matches()){ref=m.group(1);start=Integer.valueOf(m.group(2));end=start;String v=m.group(3);switch (v){case ""ins"" :consequence=""inframe_insertion"";break;case ""del"" :consequence=""inframe_deletion"";break;}}}}}}}if(proteinChange.toLowerCase().matches(""truncating mutations?"")){consequence=""feature_truncation"";}VariantConsequence variantConsequence=VariantConsequenceUtils.findVariantConsequenceByTerm(consequence);if(variantConsequence==null){variantConsequence=new VariantConsequence(consequence,null,false);}if(alteration.getRefResidues()==null&&ref!=null&&!ref.isEmpty()){alteration.setRefResidues(ref);}if(alteration.getVariantResidues()==null&&var!=null&&!var.isEmpty()){alteration.setVariantResidues(var);}if(alteration.getProteinStart()==null&&start!=null){alteration.setProteinStart(start);}if(alteration.getProteinEnd()==null&&end!=null){alteration.setProteinEnd(end);}if(alteration.getConsequence()==null&&variantConsequence!=null){alteration.setConsequence(variantConsequence);}}"
426	"public Map<String,Object> createInventoryItem(Map<String,Object> map){Long client_no=(Long)map.get(""client_no"");String auth_key=(String)map.get(""auth_key"");Long item_type=(Long)map.get(""item_type"");String item_name=(String)map.get(""item_name"");String item_desc=(String)map.get(""item_desc"");Long service_no=(Long)map.get(""service_no"");com.aria.common.shared.admin.ServiceArray service=(com.aria.common.shared.admin.ServiceArray)map.get(""service"");String client_sku=(String)map.get(""client_sku"");String currency_cd=(String)map.get(""currency_cd"");String item_price=(String)map.get(""item_price"");String client_item_id=(String)map.get(""client_item_id"");Long active_ind=(Long)map.get(""active_ind"");String client_service_id=(String)map.get(""client_service_id"");String tax_inclusive_ind=(String)map.get(""tax_inclusive_ind"");String modify_price_ind=(String)map.get(""modify_price_ind"");Long subunit_qty=(Long)map.get(""subunit_qty"");String subunit_label=(String)map.get(""subunit_label"");Long queued_active_ind=(Long)map.get(""queued_active_ind"");String queued_active_date=(String)map.get(""queued_active_date"");String do_auto_create_service_credit=(String)map.get(""do_auto_create_service_credit"");Long days_to_expiry=(Long)map.get(""days_to_expiry"");String resource_type_no=(String)map.get(""resource_type_no"");String resource_units=(String)map.get(""resource_units"");Long stock_level_track=(Long)map.get(""stock_level_track"");Double stock_level_adjust=(Double)map.get(""stock_level_adjust"");com.aria.common.shared.admin.ImageArray image=(com.aria.common.shared.admin.ImageArray)map.get(""image"");com.aria.common.shared.admin.ParentClassArray parent_class=(com.aria.common.shared.admin.ParentClassArray)map.get(""parent_class"");com.aria.common.shared.admin.SupplementalObjFieldArray supplemental_obj_field=(com.aria.common.shared.admin.SupplementalObjFieldArray)map.get(""supplemental_obj_field"");return createInventoryItem(client_no,auth_key,item_type,item_name,item_desc,service_no,service,client_sku,currency_cd,item_price,client_item_id,active_ind,client_service_id,tax_inclusive_ind,modify_price_ind,subunit_qty,subunit_label,queued_active_ind,queued_active_date,do_auto_create_service_credit,days_to_expiry,resource_type_no,resource_units,stock_level_track,stock_level_adjust,image,parent_class,supplemental_obj_field);}"
427	"@Override public void call(){loadUsersInProgress=true;mPresenter.showUserLoadingProgress();}"
428	"private static HashMap<Integer,ArrayList<Integer>> constructGraph(Block[][] g,Stack<Block> S,int w,int h){HashMap<Integer,ArrayList<Integer>> pps=new HashMap<Integer,ArrayList<Integer>>();for(Block b : S){System.out.println(""checking b:""+b.getCoordinates());ArrayList<Integer> pathPairs=new ArrayList<Integer>();if(b.getX()>1&&g[b.getX()-1][b.getY()].getType()!=0){System.out.println(""checking norths"");for(int i=b.getX()-1;i>=0;--i){if(g[i][b.getY()].getType()==0){System.out.println(""found block ""+g[i][b.getY()].getCoordinates());pathPairs.add(g[i+1][b.getY()].getId());break;}}}if(b.getX()<h-2&&g[b.getX()+1][b.getY()].getType()!=0){System.out.println(""checking south"");for(int i=b.getX()+1;i<h;++i){if(g[i][b.getY()].getType()==0){System.out.println(""found block ""+g[i][b.getY()].getCoordinates());pathPairs.add(g[i-1][b.getY()].getId());break;}}}if(b.getY()<w-2&&g[b.getX()][b.getY()+1].getType()!=0){System.out.println(""checking east"");for(int i=b.getY()+1;i<w;++i){if(g[b.getX()][i].getType()==0){System.out.println(""found block ""+g[b.getX()][i].getCoordinates());pathPairs.add(g[b.getX()][i-1].getId());break;}}}if(b.getY()>1&&g[b.getX()][b.getY()-1].getType()!=0){System.out.println(""checking west"");for(int i=b.getY()-1;i>=0;--i){if(g[b.getX()][i].getType()==0){System.out.println(""found block ""+g[b.getX()][i].getCoordinates());pathPairs.add(g[b.getX()][i+1].getId());break;}}}System.out.println(""storing block ""+b.getId()+"" with ""+pathPairs.size()+"" block pairs into pps"");if(pathPairs.size()==1){pathPairs.add(pathPairs.get(0));}pps.put(b.getId(),pathPairs);}System.out.println(""Returning pps with a size of ""+pps.size());return pps;}"
429	"public boolean b(OBlock var1){if(var1.bA.i()){return true;}else {OItemStack var2=this.d_(this.c);return var2!=null?var2.b(var1):false;}}"
430	"@Override public void deleteCurrentAttributes(InstanceIdentifier<Config> id,Config dataBefore,WriteContext writeContext) throws WriteFailedException{}"
431	"public void resetTaskType(){if(time.isRange()||date.isRange()){type.setValue(TaskType.TASK_TYPE_EVENT);if(time.getStartTime().equals("""")){time.setStartTime(LocalTime.parse(""00:00""));}if(date.getStartDate().equals("""")){date.setStartDate(LocalDate.now());}if(time.getEndTime().equals("""")){time.setEndTime(LocalTime.parse(""23:59""));}if(date.getEndDate().equals("""")){date.setEndDate(LocalDate.now());}}else {if(time.isFloating()&&date.isFloating()){type.setValue(TaskType.TASK_TYPE_FLOATING);}else {type.setValue(TaskType.TASK_TYPE_DEADLINE);if(time.getStartTime().equals("""")){time.setStartTime(LocalTime.parse(""23:59""));}if(date.getStartDate().equals("""")){date.setStartDate(LocalDate.now());}}}}"
432	"@Override public LockToken readAs(org.thryft.protocol.InputProtocol iprot,org.thryft.protocol.Type type) throws InputProtocolException{return LockToken.readAs(iprot,type);}"
433	"public void onClick(DialogInterface dialog,int whichButton){replaceText=input.getText().toString().trim();item.setChecked(true);}"
434	"private void getConnectedDevices(){if(mBluetoothLeService!=null){for(String address : mBluetoothLeService.mConnectedAddresses){if(mPairedDevicesMap.containsKey(address)){mAdapter.notifyDeviceFounded(address);}}}}"
435	"@Override public int hashCode(){return baseHashCode()^fThreadId.hashCode();}"
436	"@Override public void visit(SetOperationList setOpList){notSupported=true;setOpList.getPlainSelects().get(0).accept(this);}"
437	"@SuppressWarnings(""unused"") @Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);ctx=this;Log.d(""thong"",""PhimpMe - onCreate()"");new Thread(new Runnable(){  @Override public void run(){    initLibrary(ctx);  }}).start();camera_use=0;if(IdList==null){IdList=new ArrayList<Integer>();}Ask.on(this).forPermissions(Manifest.permission.ACCESS_FINE_LOCATION,Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.CAMERA,Manifest.permission.READ_PHONE_STATE).go();setContentView(R.layout.main);setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);add_account_upload=false;add_account_setting=false;cache=CacheStore.getInstance();cachetask=new CacheTask();String[] str=null;cachetask.execute(str);Display display=getWindowManager().getDefaultDisplay();width=display.getWidth()/3;height=width;SharedPreferences setting=getSharedPreferences(PREFS_NAME,0);FEEDS_GOOGLE_ADMOB=setting.getBoolean(""Google Admob"",true);File file=getBaseContext().getFileStreamPath(""google_admob.txt"");if(file.exists()){try{FileInputStream Rfile=openFileInput(""google_admob.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_GOOGLE_ADMOB=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}Log.i(""PhimpMe"",""feed_google_admob : ""+FEEDS_GOOGLE_ADMOB);File file0=getBaseContext().getFileStreamPath(""local_gallery.txt"");if(file0.exists()){try{FileInputStream Rfile=openFileInput(""local_gallery.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LOCAL_GALLERY=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file1=getBaseContext().getFileStreamPath(""flickr_public.txt"");if(file1.exists()){try{FileInputStream Rfile=openFileInput(""flickr_public.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_FLICKR_PUBLIC=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file2=getBaseContext().getFileStreamPath(""flickr_recent.txt"");if(file2.exists()){try{FileInputStream Rfile=openFileInput(""flickr_recent.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_FLICKR_RECENT=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file3=getBaseContext().getFileStreamPath(""google_news.txt"");if(file3.exists()){try{FileInputStream Rfile=openFileInput(""google_news.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_GOOGLE_NEWS=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file4=getBaseContext().getFileStreamPath(""public_picasa.txt"");if(file4.exists()){try{FileInputStream Rfile=openFileInput(""public_picasa.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_GOOGLE_PICASA_PUBLIC=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file5=getBaseContext().getFileStreamPath(""yahoo_news.txt"");if(file5.exists()){try{FileInputStream Rfile=openFileInput(""yahoo_news.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_YAHOO_NEWS=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file6=getBaseContext().getFileStreamPath(""deviant_public.txt"");if(file6.exists()){try{FileInputStream Rfile=openFileInput(""deviant_public.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_DEVIANTART_PUBLIC=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file7=getBaseContext().getFileStreamPath(""flick_private.txt"");if(file7.exists()){try{FileInputStream Rfile=openFileInput(""flick_private.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_FLICKR_PRIVATE=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file8=getBaseContext().getFileStreamPath(""picasa_private.txt"");if(file8.exists()){try{FileInputStream Rfile=openFileInput(""picasa_private.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_GOOGLE_PICASA_PRIVATE=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file9=getBaseContext().getFileStreamPath(""deviant_private.txt"");if(file9.exists()){try{FileInputStream Rfile=openFileInput(""deviant_private.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_DEVIANTART_PRIVITE=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file10=getBaseContext().getFileStreamPath(""vk.txt"");if(file10.exists()){try{FileInputStream Rfile=openFileInput(""vk.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_VK=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file11=getBaseContext().getFileStreamPath(""facebook.txt"");if(file11.exists()){try{FileInputStream Rfile=openFileInput(""facebook.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_FACEBOOK_PRIVATE=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file12=getBaseContext().getFileStreamPath(""tumblr_private.txt"");if(file12.exists()){try{FileInputStream Rfile=openFileInput(""tumblr_private.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_TUMBLR_PRIVATE=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file13=getBaseContext().getFileStreamPath(""imgur_personal.txt"");if(file13.exists()){try{FileInputStream Rfile=openFileInput(""imgur_personal.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_IMGUR_PERSONAL=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}File file14=getBaseContext().getFileStreamPath(""sohu_personal.txt"");if(file14.exists()){try{FileInputStream Rfile=openFileInput(""sohu_personal.txt"");InputStreamReader einputreader=new InputStreamReader(Rfile);BufferedReader ebuffreader=new BufferedReader(einputreader);Boolean tmp=Boolean.valueOf(ebuffreader.readLine());PhimpMe.FEEDS_LIST_SOHU_PERSONAL=tmp;}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}if(check_export=true){}TabSpec ts;View tbview;Intent intent;SharedPreferences settings=getSharedPreferences(PREFS_NAME,0);MAX_DISPLAY_PHOTOS=settings.getInt(""gallery_max_display_photos"",getResources().getInteger(R.integer.gallery_max_display_photos));MAX_FILESIZE_DOWNLOAD=settings.getInt(""max_filesize_download"",getResources().getInteger(R.integer.max_filesize_download));FEEDS_LOCAL_GALLERY=settings.getBoolean(FEEDS_LOCAL_GALLERY_TAG,true);try{DataDirectory=new File(Commons.getDataDirectory(ctx).getAbsolutePath()+""/""+DATA_DIRECTORY_NAME);if(!DataDirectory.exists()){if(!DataDirectory.mkdirs()){Commons.AlertLog(ctx,""Cannot create Data Directory ""+DataDirectory.getAbsolutePath(),""OK"").show();}else {}}else {}}catch(Exception e){e.printStackTrace();Toast.makeText(getApplicationContext(),""Error: ""+e.toString(),Toast.LENGTH_LONG).show();}File folder=new File(DataDirectory+""/PhimpMe_Photo_Effect"");folder.mkdirs();File folder_take_photo=new File(DataDirectory+""/take_photo"");folder_take_photo.mkdirs();phimp_me_tmp=folder+""/tmp.jpg"";phimp_me_img_uri_temporary=Uri.fromFile(new File(phimp_me_tmp));File database_file=getDatabasePath(DATABASE_NAME);if(!database_file.exists()){AccountDBAdapter db=new AccountDBAdapter(ctx);db.open();db.close();TumblrDBAdapter db2=new TumblrDBAdapter(ctx);db2.open();db2.close();db=null;db2=null;}try{mBottomNav=(BottomNavigationView)findViewById(R.id.navigation_view);}catch(Exception e){}mBottomNav.setOnNavigationItemSelectedListener(this);mBottomNav.getMenu().getItem(0).setChecked(true);if(findViewById(R.id.fragment_container)!=null){newGallery frag=new newGallery();getSupportFragmentManager().beginTransaction().add(R.id.fragment_container,frag).commit();}}"
438	"public void addToDatabase(){training.open();Training t=new Training();t.duration=(distance.getText().toString());t.start=String.valueOf(startTime);t.typeOfTraining=""Bieganie"";training.addTraining(t);training.close();}"
439	"public void runGamepadCommands(){dpaddownStatus.recordNewValue(myGamepad2.dpad_down);dpadupStatus.recordNewValue(myGamepad2.dpad_up);double rotation=myGamepad1.right_stick_x;if(rotation!=0){Log.e(TAG,""Rotation is 0"");directionLock=-1;}else {Log.e(TAG,""Checking dpad"");if(myGamepad1.dpad_up){Log.e(TAG,""Up dpad pressed"");directionLock=0;}else {if(myGamepad1.dpad_right){Log.e(TAG,""Right dpad pressed"");directionLock=90;}else {if(myGamepad1.dpad_down){Log.e(TAG,""down dpad pressed"");directionLock=180;}else {if(myGamepad1.dpad_left){Log.e(TAG,""Left dpad pressed"");directionLock=270;}}}}}mySwerveController.steerSwerve(true,myGamepad1.left_stick_x,myGamepad1.left_stick_y*-1,rotation,directionLock);mySwerveController.moveRobot();if(myGamepad1.right_trigger>0){myIntakeController.runIntakeOut();}else {if(myGamepad1.right_bumper){myIntakeController.runIntakeIn();}else {myIntakeController.intakeOff();}}myCubeTray.updateFromGamepad();if(dpadupStatus.isJustOn()){armState=!armState;}if(dpaddownStatus.isJustOn()){grabState=!grabState;}myRelicSystem.runSequence(myGamepad2.left_stick_y*-0.95+0.05,armState,grabState);ButtonStatus leftBumperStatus=new ButtonStatus();leftBumperStatus.recordNewValue(myGamepad2.left_bumper);if(leftBumperStatus.isJustOn()){time=System.currentTimeMillis();myIntakeController.lowerIntake(true);}if(System.currentTimeMillis()-500>time){myIntakeController.lowerIntake(false);}}"
440	"@Override public void onClick(DialogInterface dialog,int which){new LocalIndexOperationTask(getDownloadActivity(),listAdapter,LocalIndexOperationTask.CLEAR_TILES_OPERATION).execute(info);}"
441	"@Override public String getConversationId(){return getBeanStoreRetrievalStrategy().getConversationId();}"
442	"@Override Data parseRecurEventsToString(){Data table=new Data();int numAccounts=bankAccountList.size();DataRow row=new DataRow();for(Enum<?> element : Schema.AccountDataColumn.values()){row.add(element.toString());}table.add(row);for(int col=0;col<numAccounts;col++){row=new DataRow();row.add(bankAccountList.get(col).getName());row.add(bankAccountList.get(col).getAccountCode());row.add(Double.toString(bankAccountList.get(col).getBalance()));row.add(Double.toString(bankAccountList.get(col).getPendingBalance()));row.add(bankAccountList.get(col).getAmountNextStatementString());row.add(Double.toString(bankAccountList.get(col).getPoints()));row.add(bankAccountList.get(col).getStatementDateString());row.add(bankAccountList.get(col).getFirstDateString());row.add(bankAccountList.get(col).getAccountType().toString());row.add(bankAccountList.get(col).getLastFourDigits());for(int paymentDateIndex=0;paymentDateIndex<bankAccountList.get(col).getPaymentDateList().size();paymentDateIndex++){row.add(DateTypeUtils.dateToString(bankAccountList.get(col).getPaymentDateList().get(paymentDateIndex)));}table.add(row);}return table;}"
443	"@Override public long getYieldPeriod(TimeUnit timeUnit){return FormatUtils.getTimeDuration(getYieldPeriod(),timeUnit==null?DEFAULT_TIME_UNIT:timeUnit);}"
444	"public Iterator reverseIterator(){return new IntSetIterator(){  @Override protected Iterator getIt(  Segment segment){    return segment.reverseIterator();  }};}"
445	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return filesystem.getProtocols().contains(NFS)||filesystem.getProtocols().contains(NFSv4);}"
446	"@Override public boolean onPreferenceChange(Preference preference,Object newValue){mAppPrefs.setPhoneMode((boolean)newValue);ChangePreferences();return true;}"
447	"public void release(){if(blueManager!=null){blueManager.close();blueManager=null;}if(bAdapter.isDiscovering()){bAdapter.cancelDiscovery();}connectListener=null;scanListener=null;readerCallback=null;unregisterReceiver();BlueStateObserver.getInstance().destroy();}"
448	"@Override public HandlerResult handle(ProcessState state,ProcessInstance process){if(process.getName().equalsIgnoreCase(InstanceConstants.PROCESS_ERROR)){Instance instance=(Instance)state.getResource();if(instance.getServiceId()==null&&instance.getDeploymentUnitId()!=null){svcDataMgr.leaveDeploymentUnit(instance);return null;}}List<DeploymentUnit> units=new ArrayList<>();if(state.getResource() instanceof DeploymentUnit){units.add((DeploymentUnit)state.getResource());}else {for(DeploymentUnitLookup lookup : deploymentUnitLookups){Collection<? extends DeploymentUnit> lookupDUs=lookup.getDeploymentUnits(state.getResource());if(lookupDUs!=null){units.addAll(lookupDUs);}}}for(DeploymentUnit unit : units){if(CLEANUP_PROCESSES.contains(process.getName())){objectManager.setFields(unit,ServiceConstants.FIELD_DEPLOYMENT_UNIT_CLEANUP,true);}duMgr.scheduleReconcile(unit);}return null;}"
449	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
450	"@Override public void onNext(NetMessageVO o){Task task=ParseJsonUtils.getObjectFromJson(o.data,Task.class);_assignId=task.getAssignId();updateView(task);_dataHasLayout.setVisibility(View.VISIBLE);_emptyDataLayout.setVisibility(View.GONE);}"
451	"public void sendString(String str,InetSocketAddress addr){if(isConnect()){future.channel().writeAndFlush(new DatagramPacket(Unpooled.copiedBuffer(str.getBytes()),addr));}}"
452	"public void estimateAnswers(HashMap<String,String> questionIDsAndAnswersOfUser){}"
453	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_maps);setUpMapIfNeeded();mMap.setOnMapLongClickListener(new GoogleMap.OnMapLongClickListener(){  @Override public void onMapLongClick(  LatLng latLng){    mMap.clear();    mMap.addMarker(new MarkerOptions().position(latLng).title(""Marker""));    mMap.animateCamera(CameraUpdateFactory.newLatLng(latLng));    position=latLng;  }});}"
454	"public boolean execute(){Main.dbg.printDebug(3,""EXECUTING ""+command+"" ""+arg1+"" ""+arg2);switch (command.toUpperCase()){case ""POWER"" :powerOn=powerOn?false:true;if(powerOn){Main.dbg.printDebug(1,""ChronoTimer switched on!"");}else {Main.dbg.printDebug(1,""ChronoTimer switched off!"");}break;case ""EXIT"" :System.exit(0);break;case ""RESET"" :powerOn=false;try{Thread.sleep(1100);}catch(InterruptedException e){e.printStackTrace();}powerOn=true;break;case ""TIME"" :Main.dbg.printDebug(3,""INPUT TO TIME COMMAND: ""+arg1);int hour,min;double sec;String[] input=arg1.split("":"");try{if(input.length!=3){System.out.println(""Inproper formatting! Proper Usage is HOUR:MIN:SEC, ie 3:00:00.1"");break;}if(input.length==2){min=Integer.valueOf(input[0]);sec=Double.valueOf(input[1]);Time.setTime(0,min,sec);Main.dbg.printDebug(3,""MIN: ""+min+""  SEC: ""+sec);}else {if(input.length==3){hour=Integer.valueOf(input[0]);min=Integer.valueOf(input[1]);sec=Double.valueOf(input[2]);Main.dbg.printDebug(3,""HOUR: ""+hour+""  MIN: ""+min+""  SEC: ""+sec);Time.setTime(hour,min,sec);}else {System.out.println(""Inproper formatting! Proper Usage is HOUR:MIN:SEC, ie 3:00:00.1"");}}}catch(NumberFormatException e){System.out.println(""Inproper formatting! Proper Usage is HOUR:MIN:SEC, ie 3:00:00.1"");break;}break;case ""TOG"" :int c=Integer.parseInt(arg1);if(channels[c-1]!=null){channels[c-1].toggle();String state=channels[c-1].getState()?""on"":""off"";Main.dbg.printDebug(1,""Channel ""+Integer.toString(c)+"" is now toggled ""+state);}else {Main.dbg.printDebug(0,""You need to initialize channnels"");}break;case ""CONN"" :int sensorNum=Integer.parseInt(arg2);Sensor s;if(arg1.equals(""GateSensor"")){s=new PadSensor(channels[sensorNum-1]);}else {if(arg1.equalsIgnoreCase(""EyeSensor"")){s=new EyeSensor(channels[sensorNum-1]);}else {if(arg1.equalsIgnoreCase(""PadSensor"")){s=new PadSensor(channels[sensorNum-1]);}else {Main.dbg.printDebug(0,""[ERR] Invalid sensor type."");break;}}}channels[sensorNum-1].setSensor(s);break;case ""DISC"" :break;case ""EVENT"" :if(arg1==null||arg1==""""){Main.dbg.printDebug(0,""[ERR] Please specify a race type. See 'HELP'."");break;}switch (arg1.toUpperCase()){case ""IND"" :raceType=RaceType.IND;Main.dbg.printDebug(1,""Event set to IND"");channels[0]=new Channel(this);channels[1]=new Channel(this);if(currentRace!=null){currentRace.currentRaceType=(RaceType.IND);}break;case ""PARIND"" :raceType=RaceType.PARIND;Main.dbg.printDebug(1,""Event set to PARIND"");channels[0]=new Channel(this);channels[1]=new Channel(this);channels[2]=new Channel(this);channels[3]=new Channel(this);if(currentRace!=null){currentRace.currentRaceType=(RaceType.PARIND);}break;case ""GRP"" :raceType=RaceType.GRP;Main.dbg.printDebug(1,""Event set to GRP"");channels[0]=new Channel(this);channels[1]=new Channel(this);if(currentRace!=null){currentRace.currentRaceType=(RaceType.GRP);}break;default :Main.dbg.printDebug(0,""[ERR] Unspported race type '""+arg1+""'. Use the HELP command."");break;}break;case ""NEWRUN"" :if(raceType==null){Main.dbg.printDebug(0,""[ERR] Chronotimer racetype is null."");break;}else {if(currentRace!=null&&currentRace.raceEnded==false){Main.dbg.printDebug(0,""Race is not ended. Use ENDRUN to end the race."");break;}else {if(currentRace!=null){raceList.add(currentRace);}}}if(raceType==RaceType.IND){currentRace=new Race(raceType);Main.dbg.printDebug(1,""New IND race created: ""+currentRace.hashCode()+"", race #""+currentRace.raceNum);}else {if(raceType==RaceType.PARIND){currentRace=new Race(raceType);Main.dbg.printDebug(1,""New PARIND race created"");}else {if(raceType==RaceType.GRP){currentRace=new Race(raceType);Main.dbg.printDebug(1,""New GRP race created"");}else {if(raceType==RaceType.PARGRP){currentRace=new Race(raceType);Main.dbg.printDebug(0,""[ERR] PARGRP not implimented yet!"");}}}}break;case ""ENDRUN"" :if(currentRace==null){Main.dbg.printDebug(0,""[ERR] no race to end."");break;}currentRace.raceEnded=true;Main.dbg.printDebug(1,String.format(""Race %d was set to finished."",currentRace.raceNum));Gson gson=new Gson();String json=gson.toJson(currentRace);try(PrintStream out=new PrintStream(new FileOutputStream(""RUN""+currentRace.raceNum+"".txt""))){out.print(json);out.flush();out.close();}catch(FileNotFoundException e){e.printStackTrace();}break;case ""PRINT"" :try{for(Racer r : currentRace.finishRace){long time=r.t.runTime();if(time==Long.MAX_VALUE){Main.dbg.printDebug(0,""Racer ""+r.bib+"" DNF"");}else {Main.dbg.printDebug(0,""Racer ""+r.bib+"" ""+(r.t.runTime())/1000.0+"" seconds"");}}}catch(NullPointerException ex){Main.dbg.printDebug(0,""[ERR] NPE at Print function. Did you initialize the racers?"");}break;case ""EXPORT"" :break;case ""NUM"" :if(currentRace.currentRaceType==null){Main.dbg.printDebug(0,""[ERR] No race type selected. Define events with 'EVENT' first, or see 'HELP'"");}else {if(currentRace.currentRaceType==RaceType.IND||currentRace.currentRaceType==RaceType.PARIND){int bib=Integer.parseInt(arg1);try{currentRace.toRace.add(new Racer(bib));Main.dbg.printDebug(1,""Racer ""+bib+"" added"");}catch(Exception ex){Main.dbg.printDebug(0,""[ERR] Not a valid number, or race was incorrectly created."");}}else {if(currentRace.currentRaceType==RaceType.GRP){if(currentRace.raceEnded==false){Main.dbg.printDebug(0,""[ERR] End run before numbering contestants. in GRP races."");}else {currentRace.giveBib(Integer.parseInt(arg1));}}}}break;case ""CLR"" :break;case ""SWAP"" :if(currentRace.currentRaceType==RaceType.IND||currentRace.currentRaceType==RaceType.PARIND){ArrayList<Racer> list=new ArrayList<Racer>(currentRace.inRace);Collections.swap(list,0,1);Deque<Racer> newQ=new ArrayDeque<Racer>();for(Racer r : list){newQ.push(r);}currentRace.inRace=newQ;}else {Main.dbg.printDebug(0,""[ERR] Only works during IND races."");}break;case ""DNF"" :if(currentRace.currentRaceType!=RaceType.GRP){currentRace.finishRace.add(currentRace.inRace.pollFirst());}break;case ""CANCEL"" :if(currentRace.currentRaceType!=RaceType.GRP){currentRace.toRace.push(currentRace.inRace.pollLast());}break;case ""TRIG"" :int chan=Integer.parseInt(arg1);if(chan==1||chan==2||chan==3||chan==4){channels[(chan-1)].trigger();Main.dbg.printDebug(1,""Channel ""+(chan)+"" tripped!"");}else {System.out.printf(""Channel %f out of scope\n"",chan);}break;case ""START"" :if(currentRace.currentRaceType==RaceType.IND){channels[0].trigger();}else {if(currentRace.currentRaceType==RaceType.PARIND){if(channels[0]!=null&&channels[0].getState()){channels[0].trigger();}if(channels[2]!=null&&channels[2].getState()){channels[2].trigger();}}}break;case ""FINISH"" :if(currentRace.currentRaceType==RaceType.IND||currentRace.currentRaceType==RaceType.GRP){channels[1].trigger();}else {if(currentRace.currentRaceType==RaceType.PARIND){if(channels[1]!=null&&channels[1].getState()){channels[1].trigger();}if(channels[3]!=null&&channels[3].getState()){channels[3].trigger();}}}break;case ""DEBUG"" :Main.MAX_VERBOSITY=Integer.parseInt(arg1);for(int i=0;i<=3;i++){Main.dbg.printDebug(i,""MAX_VERBOSITY CHANGED -- Debug level [""+i+""] messages active"");}break;case ""LIST"" :if(currentRace!=null){Main.dbg.printDebug(0,currentRace.toString());}else {Main.dbg.printDebug(0,""Race hasn't started yet."");}break;case ""HELP"" :System.out.println("">>> COMMANDS:\n""+""POWER	Turn on and enter idle state or turn system off but stay in simulator\n""+""EXIT	Exit the simulaton\n""+""RESET	Resets the System to initial state\n""+""TIME	Set the current time 						FORMAT: <hour>:<min>:<sec>\n""+""TOG	toggle state of channel 					FORMAT: <channel>\n""+""CONN	connect a type of sensor to channel <num>			FORMAT: <sensor> <num>\n""+""DISC 	disconnect sensor from channel <num>				FORMAT: <num>\n""+""EVENT	type of event (IND, PARIND, GRP, PARGRP)			FORMAT: <eventcode>\n""+""NEWRUN	creates a new run\n""+""ENDRUN	done with a run\n""+""PRINT	Prints the run on stdout\n""+""EXPORT	Exports the run in XML to file RUN<RUN>				FORMAT: <run>\n""+""NUM	Set <num> as the next competitor to start			FORMAT: <num>\n""+""LR	Clear competitor number <num>					FORMAT: <num>\n""+""SWAP	Exchange next to compentitors to finish in IND\n""+""DNF 	Next competitor to finish will not finish\n""+""TRIG	Trigger channel <num>						FORMAT: <num>\n""+""CONN	Attaches channel <num> to a style of sensor <sensortype>		FORMAT: <sensortype> <num>\n""+""DISC	Disconnects sensor <num> connected with CONN.		FORMAT: <num>\n""+""START	Start trigger channel 1 -- macro for TRIG 1\n""+""FINISH	Finish trigger channel 2 -- macro for TRIG 2\n""+""DEBUG	Change the debug output's verbosity.				FORMAT: <1...3>\n""+""LIST	Show the current race, their queues, and racers.\n"");break;default :Main.dbg.printDebug(0,""UNSUPPORTED COMMAND: ""+this);}return true;}"
455	"private void injectParameters(Form form,Object instance) throws MissingArgumentException,InstantiationException,IllegalAccessException{ final List<RestFieldValue<?>> fields=RestFieldFactory.createRestFieldValues(instance);for(RestFieldValue f : fields){Object objValue=null;if(List.class.isAssignableFrom(f.getType())){ final String[] parameters=getFieldValues(form,f.getName());objValue=Arrays.asList(parameters);}else { final String strValue=getFieldValue(form,f.getName());if(strValue!=null){if(Long.class.isAssignableFrom(f.getType())){objValue=Long.valueOf(strValue);}else {if(Integer.class.isAssignableFrom(f.getType())||int.class.isAssignableFrom(f.getType())){objValue=Integer.valueOf(strValue);}else {if(Short.class.isAssignableFrom(f.getType())||short.class.isAssignableFrom(f.getType())){objValue=Short.valueOf(strValue);}else {if(Byte.class.isAssignableFrom(f.getType())||byte.class.isAssignableFrom(f.getType())){objValue=Byte.valueOf(strValue);}else {if(Double.class.isAssignableFrom(f.getType())||double.class.isAssignableFrom(f.getType())){objValue=Double.valueOf(strValue);}else {if(Float.class.isAssignableFrom(f.getType())||float.class.isAssignableFrom(f.getType())){objValue=Float.valueOf(strValue);}else {if(Boolean.class.isAssignableFrom(f.getType())||boolean.class.isAssignableFrom(f.getType())){objValue=Boolean.valueOf(strValue);}else {if(String.class.isAssignableFrom(f.getType())){objValue=strValue;}else {if(Enum.class.isAssignableFrom(f.getType())){objValue=Enum.valueOf((Class<Enum>)f.getType(),strValue);}else {if(FilterParameter.class.isAssignableFrom(f.getType())){objValue=new ConvertCQLStrToFilterConverter().convert(strValue);}else {throw new RuntimeException(""Unsupported format on field ""+f.getType());}}}}}}}}}}}}if(objValue!=null){f.setValue(objValue);}else {if(f.isRequired()){throw new MissingArgumentException(f.getName());}}}}"
456	"public ImmutableVector(Vec3d vec){this.x=vec.xCoord;this.y=vec.yCoord;this.z=vec.zCoord;}"
457	"@Override protected void onRestoreInstanceState(Parcelable state){if(!(state instanceof SavedState)){super.onRestoreInstanceState(state);return ;}SavedState ss=(SavedState)state;super.onRestoreInstanceState(ss.getSuperState());setFacing(ss.facing);setAspectRatio(ss.ratio);setAutoFocus(ss.autoFocus);setFlash(ss.flash);}"
458	"@RequestMapping(value=""/posts"",method=RequestMethod.POST) public String login(Map<String,String> params,ModelMap model){String email=params.get(""login_email"");String password=params.get(""login_password"");boolean verification=s.verifyLoginRequest(email,password);if(verification){return ""posts"";}else {model.addAttribute(""invalid_input"",""Rangt netfang e?a lykilor?"");return ""login"";}}"
459	"public void onClick(DialogInterface dialog,int which){}"
460	"@Override public Observable<CacheResult<T>> call(Observable<T> tObservable){return strategy.execute(this,getMD5MessageDigest(key),tObservable);}"
461	"@Override public boolean compareTo(Object key1,Object key2){return (int)key1-(int)key2<0;}"
462	"@Override public E set(int index,E element){N node=getNodeAt(index);E old=node.getValue();node.replace(createNode(element));return old;}"
463	"private static boolean isObjectArrayRangeWrite(Node node){return node instanceof ArrayRangeWriteNode&&((ArrayRangeWriteNode)node).isObjectArray();}"
464	"int excessNanos(long d,long m){return (int)((d*C1)-(m*C2));}"
465	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();setFocusDeferred(true);}"
466	"private void createZoningInfo(){zoningInfo=new int[hierarchy[0].length];IntArrayList groupInfo=new IntArrayList(hierarchy.length*2);for(int level=0;level<hierarchy[0].length;level++){int currentPointer=0;int groupStart=0;while(currentPointer<hierarchy.length){int groupingItem=hierarchy[currentPointer][level];while(currentPointer<hierarchy.length-1&&groupingItem==hierarchy[currentPointer+1][level]){currentPointer++;}groupInfo.add(groupingItem,groupStart,currentPointer);groupStart=++currentPointer;}zoningInfo[level]=groupInfo.toArray();groupInfo.clear();}}"
467	"public void addMessage(String roomID,String from,String message){rooms.get(roomID).newMessage(from,message);}"
468	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){}"
469	"@Override public String replace(Character self,String first,String second,String third){if(self!=null){return self.nameOrPossessivePronoun();}return """";}"
470	"public void removeVerticalSeam(int[] seam){Picture newPic=new Picture(pic.width()-1,pic.height());for(int y=0;y<pic.height();y++){int diff=0;for(int x=0;x<pic.width();x++){if(x==seam[y]){diff=1;}else {newPic.set(x-diff,y,pic.get(x,y));}}}pic=newPic;if(!rightSide){System.out.println(""dimensions""+pic.width()+"", ""+pic.height());tempPic=new Picture(transposeImage(pic));}else {tempPic=new Picture(pic);tempEnergyGrid=generateEnergy(tempPic);}}"
471	"private double getLowestPossibleScore(){if(Grader.getCurve().getGradeBelow(grade)!=null){return Grader.getCurve().getGradeBelow(grade).value()+1;}return 0;}"
472	"public void actionPerformed(ActionEvent e){newBoardDialog.setVisible(true);}"
473	"private static int handleSimpleReferenceType(ASTSimpleReferenceType simpleReferenceType,int index){if(simpleReferenceType.getTypeArguments().isPresent()){int counter=0;for(ASTTypeArgument astTypeArgument : simpleReferenceType.getTypeArguments().get().getTypeArguments()){int result=handleSimpleReferenceType(astTypeArgument,index,counter);if(result!=-1){return result;}}}return -1;}"
474	"@Override public void onClick(View v){Log.i(LOG_TAG,""Button Pressed for ""+v.getId());switch (v.getId()){case R.id.disconnect_call :{Gen.toast(""Disconnecting the call....."");callActivity.startRatingsActivity();break;}case R.id.camera_cycle_button :{Gen.toast(""Flipping the camera....."");if(callActivity.publisher!=null){callActivity.publisher.cycleCamera();}break;}case R.id.camera_onoff_button :{if(callActivity.publisher.getPublishVideo()){Gen.toast(""Deactivating Camera"");callActivity.mCameraOnOffButton.setImageResource(R.mipmap.camera_off);callActivity.publisher.setPublishVideo(false);}else {Gen.toast(""Activating Camera"");callActivity.mCameraOnOffButton.setImageResource(R.mipmap.camera_on);callActivity.publisher.setPublishVideo(true);}break;}case R.id.mic_onoff_button :{if(callActivity.publisher.getPublishAudio()){Gen.toast(""Deactivating Mic"");callActivity.mMicOnOffButton.setImageResource(R.mipmap.mic_off);callActivity.publisher.setPublishAudio(false);}else {Gen.toast(""Activating Mic"");callActivity.mMicOnOffButton.setImageResource(R.mipmap.mic_onn);callActivity.publisher.setPublishAudio(true);}break;}}}"
475	"@Override public void handle(AtmosphereFramework framework,Class<WebSocketHandler> annotatedClass){try{WebSocketHandlerService m=annotatedClass.getAnnotation(WebSocketHandlerService.class);atmosphereConfig(m.atmosphereConfig(),framework);framework.addAtmosphereHandler(m.path(),AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER).initWebSocket();framework.setDefaultBroadcasterClassName(m.broadcaster().getName());filters(m.broadcastFilters(),framework); final LinkedList<AtmosphereInterceptor> l=new LinkedList<AtmosphereInterceptor>();AtmosphereInterceptor aa=listeners(m.listeners(),framework);if(aa!=null){l.add(aa);}AnnotationUtil.interceptors(framework,m.interceptors(),l);framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());WebSocketProcessor p=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);p.registerWebSocketHandler(m.path(),new WebSocketProcessor.WebSocketHandlerProxy(broadcasterClass(framework,m.broadcaster()),framework.newClassInstance(WebSocketHandler.class,annotatedClass),l));framework.getAtmosphereConfig().startupHook(new AtmosphereConfig.StartupHook(){  @Override public void started(  AtmosphereFramework framework){    framework.initHandlerInterceptors(l);  }});}catch(Throwable e){logger.warn("""",e);}}"
476	"@Override public void onClick(View v){int tmp=MainActivity.positionArr[0];MainActivity.positionArr[0]=MainActivity.positionArr[2];MainActivity.positionArr[2]=tmp;setInfo();}"
477	"@Override public void onClick(View view){if(mFloatingActionMenu.isOpened()){mFloatingActionMenu.close(true);}else {mFloatingActionMenu.open(true);}}"
478	"@Override public void handle(MouseEvent mouseEvent){if(getScene()!=null){getScene().setCursor(Cursor.HAND);}}"
479	"@SuppressLint(""LongLogTag"") @Override protected void onResume(){super.onResume();if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){enableProximitySensor();}notes_area1.removeAllViews();head_area2.removeAllViews();count_area_i.removeAllViews();head_area3.removeAllViews();count_area_e.removeAllViews();notes_area2.removeAllViews();notes_area3.removeAllViews();sectionDataSource.open();countDataSource.open();alertDataSource.open();if(MyDebug.LOG){Log.d(TAG,""Section ID: ""+String.valueOf(section_id));}try{section=sectionDataSource.getSection(section_id);}catch(CursorIndexOutOfBoundsException e){if(MyDebug.LOG){Log.e(TAG,""Problem loading section: ""+e.toString());}Toast.makeText(this,getString(R.string.getHelp),Toast.LENGTH_LONG).show();finish();}try{getSupportActionBar().setTitle(section.name);}catch(NullPointerException e){if(MyDebug.LOG){Log.e(TAG,""Problem setting title bar: ""+e.toString());}}switch (sortPref){case ""names_alpha"" :idArray=countDataSource.getAllIdsForSectionSrtName(section.id);nameArray=countDataSource.getAllStringsForSectionSrtName(section.id,""name"");codeArray=countDataSource.getAllStringsForSectionSrtName(section.id,""code"");imageArray=countDataSource.getAllImagesForSectionSrtName(section.id);break;case ""codes"" :idArray=countDataSource.getAllIdsForSectionSrtCode(section.id);nameArray=countDataSource.getAllStringsForSectionSrtCode(section.id,""name"");codeArray=countDataSource.getAllStringsForSectionSrtCode(section.id,""code"");imageArray=countDataSource.getAllImagesForSectionSrtCode(section.id);break;default :idArray=countDataSource.getAllIdsForSection(section.id);nameArray=countDataSource.getAllStringsForSection(section.id,""name"");codeArray=countDataSource.getAllStringsForSection(section.id,""code"");imageArray=countDataSource.getAllImagesForSection(section.id);break;}countingWidgets_i=new ArrayList<>();countingWidgets_e=new ArrayList<>();countingWidgetsLH_i=new ArrayList<>();countingWidgetsLH_e=new ArrayList<>();if(section.notes!=null){if(!section.notes.isEmpty()){NotesWidget section_notes=new NotesWidget(this,null);section_notes.setNotes(section.notes);section_notes.setFont(fontPref);notes_area1.addView(section_notes);}}if(lhandPref){spinner=(Spinner)findViewById(R.id.countHead1SpinnerLH);}else {spinner=(Spinner)findViewById(R.id.countHead1Spinner);}CountingWidget_head1 adapter=new CountingWidget_head1(this,R.layout.widget_counting_head1,idArray,nameArray,codeArray,imageArray);spinner.setAdapter(adapter);spinner.setSelection(itemPosition);spinnerListener();if(awakePref){getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}}"
480	"@Override public void perform(Run<?,?> build,FilePath workspace,Launcher launcher,TaskListener listener) throws InterruptedException,IOException{Result threshold=onlyStable?Result.SUCCESS:Result.UNSTABLE;if(build.getResult()!=null&&build.getResult().isWorseThan(threshold)){listener.getLogger().println(""Skipping Cobertura coverage report as build was not ""+threshold.toString()+"" or better ..."");return ;}listener.getLogger().println(""[Cobertura] Publishing Cobertura coverage report...""); final File buildCoberturaDir=build.getRootDir();FilePath buildTarget=new FilePath(buildCoberturaDir);FilePath[] reports=new FilePath[0];try{reports=workspace.act(new ParseReportCallable(coberturaReportFile));if(build.getResult()!=null&&build.getResult().isWorseOrEqualTo(Result.FAILURE)&&reports.length==0){return ;}}catch(IOException e){Util.displayIOException(e,listener);e.printStackTrace(listener.fatalError(""Unable to find coverage results""));throw new AbortException(""Unable to find coverage results"");}if(reports.length==0){String msg=""[Cobertura] No coverage results were found using the pattern '""+coberturaReportFile+""' relative to '""+workspace.getRemote()+""'.""+""  Did you enter a pattern relative to the correct directory?""+""  Did you generate the XML report(s) for Cobertura?"";listener.getLogger().println(msg);if(failNoReports){throw new AbortException(msg);}else {listener.getLogger().println(""[Cobertura] Skipped cobertura reports."");}return ;}for(int i=0;i<reports.length;i++){ final FilePath targetPath=new FilePath(buildTarget,""coverage""+(i==0?"""":i)+"".xml"");try{reports[i].copyTo(targetPath);}catch(IOException e){Util.displayIOException(e,listener);String msg=""Unable to copy coverage from ""+reports[i]+"" to ""+buildTarget;e.printStackTrace(listener.fatalError(msg));throw new AbortException(msg);}}listener.getLogger().println(""Publishing Cobertura coverage results..."");Set<String> sourcePaths=new HashSet<String>();CoverageResult result=null;for(File coberturaXmlReport : getCoberturaReports(build)){try{result=CoberturaCoverageParser.parse(coberturaXmlReport,result,sourcePaths);}catch(IOException e){Util.displayIOException(e,listener);e.printStackTrace(listener.fatalError(""Unable to parse ""+coberturaXmlReport));throw new AbortException(""Unable to parse ""+coberturaXmlReport);}}if(result!=null){listener.getLogger().println(""Cobertura coverage report found."");result.setOwner(build); final FilePath paintedSourcesPath=new FilePath(new File(build.getParent().getRootDir(),""cobertura""));paintedSourcesPath.mkdirs();if(sourcePaths.contains(""."")){sourcePaths.remove(""."");for(FilePath f : reports){FilePath p=f.getParent();if(p!=null&&p.isDirectory()){sourcePaths.add(p.getRemote());}}}SourceCodePainter painter=new SourceCodePainter(paintedSourcesPath,sourcePaths,result.getPaintedSources(),listener,getSourceEncoding());workspace.act(painter); final CoberturaBuildAction action=CoberturaBuildAction.load(result,healthyTarget,unhealthyTarget,getOnlyStable(),getFailUnhealthy(),getFailUnstable(),getAutoUpdateHealth(),getAutoUpdateStability(),getZoomCoverageChart(),getMaxNumberOfBuilds());build.addAction(action);Set<CoverageMetric> failingMetrics=failingTarget.getFailingMetrics(result);if(!failingMetrics.isEmpty()){listener.getLogger().println(""Code coverage enforcement failed for the following metrics:"");float oldStabilityPercent;float setStabilityPercent;for(CoverageMetric metric : failingMetrics){oldStabilityPercent=failingTarget.getObservedPercent(result,metric);setStabilityPercent=failingTarget.getSetPercent(result,metric);listener.getLogger().println(""    ""+metric.getName()+""'s stability is ""+roundDecimalFloat(oldStabilityPercent*100.0)+"" and set mininum stability is ""+roundDecimalFloat(setStabilityPercent*100.0)+""."");}if(!getFailUnstable()){listener.getLogger().println(""Setting Build to unstable."");build.setResult(Result.UNSTABLE);}else {throw new AbortException(""Failing build due to unstability."");}}if(getFailUnhealthy()){Set<CoverageMetric> unhealthyMetrics=unhealthyTarget.getFailingMetrics(result);if(!unhealthyMetrics.isEmpty()){listener.getLogger().println(""Unhealthy for the following metrics:"");float oldHealthyPercent;float setHealthyPercent;for(CoverageMetric metric : unhealthyMetrics){oldHealthyPercent=unhealthyTarget.getObservedPercent(result,metric);setHealthyPercent=unhealthyTarget.getSetPercent(result,metric);listener.getLogger().println(""    ""+metric.getName()+""'s health is ""+roundDecimalFloat(oldHealthyPercent*100.0)+"" and set minimum health is ""+roundDecimalFloat(setHealthyPercent*100.0)+""."");}throw new AbortException(""Failing build because it is unhealthy."");}}if(build.getResult()==null||build.getResult()==Result.SUCCESS){if(getAutoUpdateHealth()){setNewPercentages(result,true,listener);}if(getAutoUpdateStability()){setNewPercentages(result,false,listener);}}}else {throw new AbortException(""No coverage results were successfully parsed.  Did you generate ""+""the XML report(s) for Cobertura?"");}}"
481	"public void transformDTOToUser(User user,UserDTO userDTO){log.debug(""Transforming user DTO to user : {}"",userDTO);user.setFirstName(userDTO.getFirstName());user.setLastName(userDTO.getLastName());user.setLogin(userDTO.getLogin());user.setAuthority(authorityRepository.findOne(userDTO.getAuthority()));user.setEmail(userDTO.getEmail());user.setPhoneNumber(userDTO.getPhoneNumber());user.setNotes(userDTO.getNotes());if(!isAddressEmpty(userDTO)||!CollectionUtils.isEmpty(user.getAddresses())){Address address=(CollectionUtils.isEmpty(user.getAddresses())?new Address():user.getAddresses().get(0));address.setStreetAddress1(userDTO.getStreetAddress1());address.setStreetAddress2(userDTO.getStreetAddress2());address.setCity(userDTO.getCity());address.setState(State.valueOf(userDTO.getState()));address.setPostalCode(userDTO.getPostalCode());address.setUser(user);addressRepository.save(address);}}"
482	"public ProductSalesResponse(){super();this.sales_id=0L;this.sales_upc="""";this.dollar_volume=0.0;this.sales_year=0;this.nielsen_category="""";this.sales_source="""";}"
483	"public void deleteVmfsDatastore(Collection<VolumeRestRep> volumes,URI hostOrClusterId,Datastore datastore){List<HostSystem> hosts=getHostsForDatastore(datastore);if(hosts.isEmpty()){throw new IllegalStateException(""Datastore is not mounted by any hosts"");}enterMaintenanceMode(datastore);execute(new DeleteDatastore(hosts.get(0),datastore));removeVmfsDatastoreTag(volumes,hostOrClusterId);}"
484	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);if(getArguments()!=null){arenaID=getArguments().getString(ARG_Arena_ID);}mArenaTable=((MainActivity)this.getActivity()).mClient.getTable(Arena.class);mArenaTable.where().field(""id"").eq(arenaID).execute(new TableQueryCallback<Arena>(){  public void onCompleted(  List<Arena> result,  int count,  Exception exception,  ServiceFilterResponse response){    if (exception == null && !result.isEmpty()) {      currentArena=result.get(0);      ((TextView)currentView.findViewById(R.id.textView_name_value)).setText(currentArena.name);      ((TextView)currentView.findViewById(R.id.textView_address_value)).setText(currentArena.address);      ((TextView)currentView.findViewById(R.id.textView_basket_count_value)).setText(((Integer)currentArena.basketCount).toString());    } else {      if (exception != null) {        messageDialog(exception.getMessage());      } else {        messageDialog(""Arena cannot be found"");      }    }  }});mCheckInTable=((MainActivity)this.getActivity()).mClient.getTable(Checkin.class);String playerID=((MainActivity)this.getActivity()).localPlayerID;checkinButton=(Button)this.getActivity().findViewById(R.id.button_check_in);mCheckInTable.execute(new TableQueryCallback<Checkin>(){  public void onCompleted(  List<Checkin> result,  int count,  Exception exception,  ServiceFilterResponse response){    if (exception == null && !result.isEmpty()) {      Checkin latest=result.get(0);      Date now=new Date();      Date compare=new Date(now.getTime() - 1 * 60 * 60* 1000);      if (latest.checkinTime.after(compare)) {        isCheckedIn=true;        checkinButton.setText(""Checked In"");        checkinButton.setEnabled(false);      }    } else {      if (exception != null) {        messageDialog(exception.getMessage());      } else {        isCheckedIn=false;        checkinButton.setText(""Check In"");        checkinButton.setEnabled(true);      }    }  }});}"
485	"@Override public void onErrorResponse(VolleyError error){Log.e(TAG,error.toString());NetworkResponse resp=error.networkResponse;if(resp.statusCode==401){invalidateAccessToken();getAuthToken();}else {Toast.makeText(mContext,""Unable to Sync. Check your Internet Connection."",Toast.LENGTH_SHORT).show();}refreshLayout2.setRefreshing(false);}"
486	"@Override public void received(StreamSizeNotification notification,NotificationContext notificationContext){cancelPollingAndScheduleNext();if(lastNotification==null||notification.getTimestamp()>lastNotification.getTimestamp()){lastNotification=notification;sendNotificationToActiveTasks(notification);}}"
487	"@Override public int size(){return size>Integer.MAX_VALUE?Integer.MAX_VALUE:(int)size;}"
488	"@Override public void run() throws Exception{VMConfig vmConfig=getVM().getDescriptor().getVmConfig();dataflowRegistryPath=vmConfig.getProperties().get(""dataflow.registry.path"");election=new LeaderElection(getVM().getVMRegistry().getRegistry(),dataflowRegistryPath+""/master/leader"");election.setListener(new MasterLeaderElectionListener());election.start();try{waitForTerminate();System.err.println(""finish waitForShutdown()"");}catch(InterruptedException ex){}finally{appContainer.getInstance(CloseableInjector.class).close();if(election!=null&&election.getLeaderId()!=null){election.stop();}}}"
489	"public Fusion(SpimData2 spimData,List<ViewId> viewIdsToProcess){this.spimData=spimData;this.viewIdsToProcess=viewIdsToProcess;this.timepointsToProcess=SpimData2.getAllTimePointsSorted(spimData,viewIdsToProcess);this.channelsToProcess=SpimData2.getAllChannelsSorted(spimData,viewIdsToProcess);if(spimData==null){avgPixels=0;maxNumViews=0;}else {avgPixels=computeAvgImageSize();maxNumViews=computeMaxNumViews();}}"
490	"public boolean canModifyStat(Battle b,ActivePokemon p,ActivePokemon opp){return b.getWeather().namesies()==EffectNamesies.SUNNY;}"
491	"@Override public void onClick(View v){if(uiState==UI_STATE_RUNNING_TESTS){Toast.makeText(getContext(),""Tests already running."",Toast.LENGTH_SHORT).show();return ;}if(mListener!=null){if(uiState==UI_STATE_INIT_AND_READY){setBwTestState(BW_TEST_INITIATED);showStatusMessageAsync(""Fetching server configuration ..."");DobbyLog.v(""WifiDoc: Issued command for starting bw tests"");sendSwitchStateMessage(UI_STATE_RUNNING_TESTS);}mListener.onMainButtonClick();}resetData();}"
492	"@Override public Functor<deque> functor(){return Instances.functor();}"
493	"@Override public void run(){swipeRefreshLayout.setRefreshing(true);}"
494	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
495	"@RequestMapping(""goodsDetail"") public String goodsDetail(HttpServletRequest request,HttpServletResponse response) throws IOException{CategoryVo category=new CategoryVo();category.setStatus(ShoppingContants.CATEGORY_ATTR_STATUS_NORMAL);category.setPid(0l);ServiceResponse<List<CategoryVo>> resp=categoryService.listCategory(category);if(ShoppingContants.RESP_CODE_SUCESS.equals(resp.getCode())){List<CategoryVo> categoryList=resp.getData();request.setAttribute(""categoryList"",categoryList);}else {return erroPage(request,resp.getCode());}GoodsVo param=new GoodsVo();param.setGid(Long.valueOf(request.getParameter(""gid"")));ServiceResponse<GoodsVo> goodsResp=goodsService.queryGoods(param);if(ShoppingContants.RESP_CODE_SUCESS.equals(goodsResp.getCode())){GoodsVo goodsVo=goodsResp.getData();request.setAttribute(""goods"",goodsVo);request.setAttribute(""attrs"",initAttr(goodsVo));return webPage(""goods/goodsDetail"");}else {return erroPage(request,goodsResp.getCode());}}"
496	"public static boolean topTenShow(Player player){if(Settings.displayIslandTopTenInChat){Util.sendMessage(player,ChatColor.GOLD+plugin.myLocale(player.getUniqueId()).topTenheader);if(topTenList==null){topTenCreate();}topTenList=MapUtil.sortByValue(topTenList);int i=1;Iterator<Entry<UUID,Integer>> it=topTenList.entrySet().iterator();while(it.hasNext()){Map.Entry<UUID,Integer> m=it.next();UUID playerUUID=m.getKey();Player entry=plugin.getServer().getPlayer(playerUUID);boolean show=true;if(entry!=null){if(!entry.hasPermission(Settings.PERMPREFIX+""intopten"")){it.remove();show=false;}}if(show){if(plugin.getPlayers().inTeam(playerUUID)){ final List<UUID> pMembers=plugin.getPlayers().getMembers(playerUUID);String memberList="""";for(UUID members : pMembers){memberList+=plugin.getPlayers().getName(members)+"", "";}if(memberList.length()>2){memberList=memberList.substring(0,memberList.length()-2);}Util.sendMessage(player,ChatColor.AQUA+""#""+i+"": ""+plugin.getGrid().getIslandName(playerUUID)+ChatColor.AQUA+"" (""+memberList+"") - ""+plugin.myLocale(player.getUniqueId()).levelislandLevel+"" ""+m.getValue());}else {Util.sendMessage(player,ChatColor.AQUA+""#""+i+"": ""+plugin.getGrid().getIslandName(playerUUID)+ChatColor.AQUA+"" - ""+plugin.myLocale(player.getUniqueId()).levelislandLevel+"" ""+m.getValue());}if(i++==10){break;}}}}else {if(topTenList==null){topTenCreate();}topTenList=MapUtil.sortByValue(topTenList);if(gui==null){gui=Bukkit.createInventory(null,GUISIZE,plugin.myLocale().topTenGuiTitle);}gui.clear();int i=1;Iterator<Entry<UUID,Integer>> it=topTenList.entrySet().iterator();while(it.hasNext()){Map.Entry<UUID,Integer> m=it.next();UUID playerUUID=m.getKey();Player entry=plugin.getServer().getPlayer(playerUUID);boolean show=true;if(entry!=null){if(!entry.hasPermission(Settings.PERMPREFIX+""intopten"")){it.remove();show=false;}}if(show){gui.setItem(SLOTS[i-1],getSkull(i,m.getValue(),playerUUID));if(i++==10){break;}}}player.openInventory(gui);}return true;}"
497	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
498	"public void a(OWorld var1,int var2,int var3,int var4,Random var5){if(var1.f(var2,var3+1,var4)){int var6;for(var6=1;var1.a(var2,var3-var6,var4)==this.bn;++var6){;}if(var6<3){int var7=var1.c(var2,var3,var4);if(var7==15){var1.e(var2,var3+1,var4,this.bn);var1.c(var2,var3,var4,0);}else {var1.c(var2,var3,var4,var7+1);}}}}"
499	"private boolean lookup(Node node,int data){if(node==null){return (false);}if(data==node.data){return (true);}else {if(data<node.data){return (lookup(node.left,data));}else {return (lookup(node.right,data));}}}"
500	"@Override public int result(){return 0;}"
501	"public boolean visit(SQLNumberExpr x){if(this.parameterized&&ParameterizedOutputVisitorUtils.checkParameterize(x)){print('?');incrementReplaceCunt();if(this instanceof ExportParameterVisitor){ExportParameterVisitorUtils.exportParameter((this).getParameters(),x);}return false;}return SQLASTOutputVisitorUtils.visit(this,x);}"
502	"public void run(){IS_RUNNING=true;System.out.println(""ClientNotifier started."");try{while(IS_RUNNING){mSocket.receive(packet);if(byteToString(packetData).equals(SERVER_STRING)){System.out.println(""Multicast packet recieved from client."");System.out.println(""Clients address: ""+packet.getAddress());stringToByte((SERVER_STRING+roomName),packetData);packet=new DatagramPacket(packetData,packetData.length,packet.getAddress(),CLIENT_PORT);mSocket.send(packet);System.out.println(""Back datagram packet sent to client;"");}else {System.out.println(""Unknown packet intercepted."");System.out.println(""Sender's address: ""+packet.getAddress());System.out.println(""Packet data: ""+byteToString(packetData));}sleep(1000);}}catch(IOException|InterruptedException e){System.out.println(""Exception thrown in run() method."");System.out.println(""Thread ""+getName());e.printStackTrace();}finally{close();}}"
503	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
504	"@EventHandler public void onCreativeInventoryModify(InventoryClickEvent event){String itemflag=""inventory-modify""; final Player player=(Player)event.getWhoClicked();Initialize(player);if(PlayerHandler.isCreativeMode(player)){ItemStack item=null;if(cooldown.get(player.getName())==1){cooldown.put(player.getName(),1);event.setCancelled(true);player.getInventory().clear();player.getInventory().setHelmet(null);player.getInventory().setChestplate(null);player.getInventory().setLeggings(null);player.getInventory().setBoots(null);if(ServerHandler.hasCombatUpdate()){player.getInventory().setItemInOffHand(null);}ItemStack readd=new ItemStack(event.getCursor());restoreInventory(player,readd);PlayerHandler.delayUpdateInventory(player,5L);}else {if(cooldown.get(player.getName())!=1){if(ItemHandler.containsIgnoreCase(event.getAction().name(),""HOTBAR"")){item=event.getView().getBottomInventory().getItem(event.getHotbarButton());if(item==null&&event.getCursor()!=null&&event.getCursor().getType()!=Material.AIR){item=event.getCursor();}else {if(event.getCursor()==null){item=event.getCurrentItem();}}}else {if(event.getCursor()!=null&&event.getCursor().getType()!=Material.AIR){item=event.getCursor();}else {item=event.getCurrentItem();}}if(event.getCurrentItem()!=null&&event.getCursor()!=null&&event.getCursor().getType()!=Material.AIR&&event.getCurrentItem().getType()!=Material.AIR&&!hasItem(player,event.getCursor())){isGlitchSwap.put(player.getName(),true);}if(cooldown.get(player.getName())!=1&&ItemHandler.isAllowedItem(player,item,itemflag)){saveInventory(player);}if(!ItemHandler.isAllowedItem(player,item,itemflag)||event.getCurrentItem()!=null&&event.getCursor()!=null&&!hasItem(player,event.getCursor())&&!ItemHandler.isAllowedItem(player,event.getCurrentItem(),itemflag)){cooldown.put(player.getName(),1);event.setCancelled(true);player.getInventory().clear();player.getInventory().setHelmet(null);player.getInventory().setChestplate(null);player.getInventory().setLeggings(null);player.getInventory().setBoots(null);if(ServerHandler.hasCombatUpdate()){player.getInventory().setItemInOffHand(null);}ItemStack readd=new ItemStack(event.getCursor());restoreInventory(player,readd);PlayerHandler.delayUpdateInventory(player,5L);}}}}}"
505	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
506	"protected void performEndGameActions(){sendMessageToAllPlayers(ChatColor.RED+""Game over! ""+ChatColor.WHITE+getNumPlayersDead()+""/""+getNumCounselors()+"" counselors killed.""+"" Thanks for playing Friday the 13th."");Iterator it=getPlayers().entrySet().iterator();while(it.hasNext()){Map.Entry entry=(Map.Entry)it.next();Player player=(Player)entry.getValue();it.remove();performPlayerCleanupActions(player.getUniqueId().toString());}}"
507	"private boolean isCFDCacheValid(){long currentHash=cfd.longHash(EnumSet.of(FeatureSetElement.CANONICIZERS,FeatureSetElement.EVENT_DRIVERS,FeatureSetElement.NORMALIZATION));File cacheDir=new File(JSANConstants.JSAN_CACHE+cfd.getName());File cacheFile=new File(cacheDir,""cfdHash.txt"");BufferedReader reader=null;try{reader=new BufferedReader(new FileReader(cacheFile));}catch(FileNotFoundException e){return false;}long cachedHash=0;try{cachedHash=Long.parseLong(reader.readLine());reader.close();}catch(NumberFormatException|IOException e){e.printStackTrace();return false;}if(cachedHash==currentHash){return true;}else {deleteRecursive(cacheDir);cacheDir.mkdir();BufferedWriter writer=null;try{writer=new BufferedWriter(new FileWriter(cacheFile));writer.write(currentHash+""\n"");writer.close();}catch(IOException e){e.printStackTrace();}return false;}}"
508	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){context=getActivity().getApplicationContext();provider=new CognitoUserPoolsSignInProvider(context);return inflater.inflate(R.layout.fragment_demo_home,container,false);}"
509	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_step_detail);Intent intent=getIntent();mRecipe=intent.getParcelableExtra(getString(R.string.key_recipe));mStepPosition=intent.getIntExtra(getString(R.string.key_step_position),0);setActionBarTitle();setFragment();}"
510	"@Override public void requestFailed(boolean status,int code,String errorMessage){super.requestFailed(status,code,errorMessage);hideLoading();ToastUtil.show(errorMessage==null?Constant.REQUEST_FAILED_STR:errorMessage);}"
511	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.home);getActionBar().setDisplayHomeAsUpEnabled(true);bpay=(Button)findViewById(R.id.btncard);bhand=(Button)findViewById(R.id.btnhand);tcnum=(TextView)findViewById(R.id.tcardnum);SharedPrefSingleton shpref;shpref=SharedPrefSingleton.getInstance();shpref.init(getApplicationContext());umail=shpref.getLoggedInUserPreference(""email"");bhand.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    AlertDialog.Builder builder=new AlertDialog.Builder(MyBills.this);    builder.setTitle(""CafeBeside Info"");    builder.setMessage(""Thank you,\nPlease give the cash to bearer or directly to the counter."");    builder.setPositiveButton(""OK"",new DialogInterface.OnClickListener(){      public void onClick(      DialogInterface dialog,      int which){        Log.e(""info"",""OK"");        Intent home_intent=new Intent(getApplicationContext(),HomeActivity.class);        startActivity(home_intent);        finish();      }    });    builder.show();  }});bpay.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    cnum=tcnum.getText().toString();    if (cnum.trim().equals("""")) {      Toast.makeText(getApplicationContext(),""Please enter the card details first!"",Toast.LENGTH_LONG).show();    } else {      try {        JSONObject mObject=new JSONObject();        mObject.put(""email"",umail);        mObject.put(""odate"",""2015-03-27"");        mObject.put(""cardnumber"",cnum);        mObject.put(""amount"",""100"");        Log.d(""JSON CARD INFO :"",mObject.toString());        mAsync=new AsyncWorker(v.getContext());        mAsync.delegate=MyBills.this;        mAsync.execute(ServerConnector.POST_CARDINFO,mObject.toString());      } catch (      Exception ex) {        Log.d(""Exception"",""Exception occur "" + ex);      }    }  }});}"
512	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
513	"public final Mono<T> single(T defaultValue){if(this instanceof Callable){if(this instanceof Fuseable.ScalarCallable){ @SuppressWarnings(""unchecked"") Fuseable.ScalarCallable<T> scalarCallable=(Fuseable.ScalarCallable<T>)this;T v=scalarCallable.call();if(v==null){return Mono.just(defaultValue);}return Mono.just(v);} @SuppressWarnings(""unchecked"") Callable<T> thiz=(Callable<T>)this;return Mono.onAssembly(new MonoCallable<>(thiz));}return Mono.onAssembly(new MonoSingle<>(this,defaultValue,false));}"
514	"@Override public boolean is(Object... args){Object ttile=args[0];if(ttile instanceof MiniTile){MiniTile miniTile=(MiniTile)ttile;return (miniTile.AreaId().intValue()>0);}else {throw new IllegalArgumentException();}}"
515	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
516	"@Override public void onClick(View v){File from=new File(audioFileName);if(!from.exists()){finish();return ;}String languages=userDefinedLanguages.getText().toString();if(languages.equals("""")){userDefinedLanguages.requestFocus();View view=getCurrentFocus();if(view!=null){InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);imm.showSoftInput(view,0);}return ;}else {recordingLanguages.add(languages);}String speakers=userDefinedSpeakers.getText().toString();if(speakers.equals("""")){userDefinedSpeakers.requestFocus();View view=getCurrentFocus();if(view!=null){InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);imm.showSoftInput(view,0);}return ;}else {recordingSpeaker.add(speakers);}String description=userDefinedDescription.getText().toString();recordingDescription=description.equals("""")?null:description;String title=userDefinedName.getText().toString();recordingTitle=title.equals("""")?Recording.defaultRecordingTitle:title;recordingName.setText(recordingTitle);int numDup;String recordingFileName;if(recordingTitle.matches(Recording.defaultRecordingTitle+"" [0-9]+$"")){numDup=checkDuplication(Recording.defaultRecordingTitle);recordingFileName=numDup==0?Recording.defaultRecordingTitle:Recording.defaultRecordingTitle+"" ""+numDup;}else {numDup=checkDuplication(recordingTitle);recordingFileName=numDup==0?recordingTitle:recordingTitle+"" ""+numDup;}File to=new File(audioInternalFileDir,recordingFileName+Recording.defaultAudioFormat);audioFileName=to.getAbsolutePath();boolean success=from.renameTo(to);if(success){MediaMetadataRetriever mmr=new MediaMetadataRetriever();mmr.setDataSource(audioFileName);String durationStr=mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);long duration=Long.parseLong(durationStr);recording=new Recording();recording.setRecordingID();recording.setDuration(duration);recording.setTitle(recordingTitle);recording.setDate(recordingDate.getText().toString());recording.setDescription(""nmb"");recording.setLanguage(recordingLanguages);recording.setSpeakers(recordingSpeaker);recording.setLatitude(latitude);recording.setLongitude(longitude);recording.setLocation(location);recording.setUploader(new User(""franktest@gmail.com"",""passwd"",""frankie""));recording.setFilePath(audioFileName);RecordingDataSource dataSource=new RecordingDataSource(this);dataSource.open();dataSource.insertRecording(recording);dataSource.close();Markers.AddLatitude(latitude);Markers.AddLongitude(longitude);ArrayList<Double> du=Markers.getLatitudes();ArrayList<Double> du1=Markers.getLongitudes();for(double i : du){Log.d(""cf"",Double.toString(i));}for(double i : du1){Log.d(""cf"",Double.toString(i));}Intent intent=new Intent(this,MyRecordingsActivity.class);startActivity(intent);}else {if(!canPlay){stopPlaying();}}}"
517	"@Override public void onClick(DialogInterface dialog,int which){}"
518	"@Override protected T executeWithTimeout(Callable<T> action,ExecutorService executor,boolean do_timeout) throws Exception{ final Future<T> task=executor.submit(action);try{if(do_timeout){return task.get(timeout.getLength(),timeout.getTimeUnit());}else {return task.get();}}catch(ExecutionException e){throw launderThrowable(e.getCause());}finally{task.cancel(true);}}"
519	"public boolean start(int serverport){String received;boolean connected=true;server=new JavaCPN();System.out.println(""Connecting to server on port ""+serverport);try{server.connect(""localhost"",serverport);}catch(UnknownHostException e){System.err.println(""Unknown host"");}catch(IOException e){System.err.println(""IO Exception"");}finally{connected=false;}try{received=EncodeDecode.decodeString(server.receive());System.out.println(""Server version number: ""+received);}catch(SocketException e){System.err.println(""Socket Exception"");connected=false;}return connected;}"
520	"public void input(PayloadEnclosing request){Payload oldContent=request.getPayload();Payload wiredPayload=newPayload(input(oldContent.getInput()));copyPayloadMetadata(oldContent,wiredPayload);request.setPayload(wiredPayload);}"
521	"public void SaveFavourite(Item item){SaveFavouriteEvent event=new SaveFavouriteEvent();event.setItem(item);try{repository.addFavourite(item);bus.post(event);}catch(Exception e){event.setThrowable(e);bus.post(event);}}"
522	"@Override protected void processFiltered(File file,List<String> lines) throws CheckstyleException{ final String fileName=file.getPath(); final long timestamp=file.lastModified();if(cache!=null&&(cache.isInCache(fileName,timestamp)||!CommonUtils.matchesFileExtension(file,getFileExtensions()))){return ;} final String msg=""%s occurred during the analysis of file %s."";try{ final FileText text=FileText.fromLines(file,lines); final FileContents contents=new FileContents(text); final DetailAST rootAST=parse(contents);getMessageCollector().reset();walk(rootAST,contents,AstState.ORDINARY); final DetailAST astWithComments=appendHiddenCommentNodes(rootAST);walk(astWithComments,contents,AstState.WITH_COMMENTS);}catch(TokenStreamRecognitionException tre){ final String exceptionMsg=String.format(msg,""TokenStreamRecognitionException"",fileName);throw new CheckstyleException(exceptionMsg,tre);}catch(RecognitionException|TokenStreamException ex){ final String exceptionMsg=String.format(msg,ex.getClass().getSimpleName(),fileName);throw new CheckstyleException(exceptionMsg,ex);}if(cache!=null&&getMessageCollector().size()==0){cache.put(fileName,timestamp);}}"
523	"public void remove(){mFlightPlan.remove(mAircraft);mAircraft.isFinished(true);}"
524	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
525	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);addPreferencesFromResource(R.xml.abc_other_settings);PreferenceScreen prefScreen=getPreferenceScreen();ContentResolver resolver=getActivity().getContentResolver();PreferenceCategory appsSecCategory=(PreferenceCategory)findPreference(APPS_SECURITY);mSmsCount=(ListPreference)findPreference(SMS_OUTGOING_CHECK_MAX_COUNT);mSmsCountValue=Settings.Global.getInt(resolver,Settings.Global.SMS_OUTGOING_CHECK_MAX_COUNT,30);mSmsCount.setValue(Integer.toString(mSmsCountValue));mSmsCount.setSummary(mSmsCount.getEntry());mSmsCount.setOnPreferenceChangeListener(this);if(!Utils.isVoiceCapable(getActivity())){appsSecCategory.removePreference(mSmsCount);prefScreen.removePreference(appsSecCategory);}mScreenshotDelay=(CustomSeekBarPreference)findPreference(SCREENSHOT_DELAY);int screenshotDelay=Settings.System.getIntForUser(resolver,Settings.System.SCREENSHOT_DELAY,1000,UserHandle.USER_CURRENT);mScreenshotDelay.setValue(screenshotDelay/1);mScreenshotDelay.setOnPreferenceChangeListener(this);mMsob=(ListPreference)prefSet.findPreference(PREF_MEDIA_SCANNER_ON_BOOT);mMsob.setOnPreferenceChangeListener(this);mMsob.setValue(Integer.toString(Settings.System.getInt(getActivity().getContentResolver(),Settings.System.MEDIA_SCANNER_ON_BOOT,0)));mMsob.setSummary(mMsob.getEntry());}"
526	"@Override public EvaluationOutcome evaluate(MesosResourcePool mesosResourcePool,PodInfoBuilder podInfoBuilder){String detailsClause=resourceId.isPresent()?""previously reserved "":"""";List<OfferRecommendation> offerRecommendations=new ArrayList<>();Resource resource; final MesosResource mesosResource;if(taskName==null&&useDefaultExecutor&&resourceId.isPresent()){podInfoBuilder.setExecutorVolume(volumeSpec);return pass(this,null,Collections.emptyList(),""Satisfied requirements for %s volume '%s'"",volumeSpec,resourceId,persistenceId);}if(volumeSpec.getType().equals(VolumeSpec.Type.ROOT)){OfferEvaluationUtils.ReserveEvaluationOutcome reserveEvaluationOutcome=OfferEvaluationUtils.evaluateSimpleResource(this,volumeSpec,resourceId,mesosResourcePool);EvaluationOutcome evaluationOutcome=reserveEvaluationOutcome.getEvaluationOutcome();if(!evaluationOutcome.isPassing()){return evaluationOutcome;}resourceId=reserveEvaluationOutcome.getResourceId();offerRecommendations.addAll(evaluationOutcome.getOfferRecommendations());mesosResource=evaluationOutcome.getMesosResource().get();resource=ResourceBuilder.fromSpec(volumeSpec,resourceId,persistenceId,Optional.empty()).setMesosResource(mesosResource).build();}else {Optional<MesosResource> mesosResourceOptional;if(!resourceId.isPresent()){mesosResourceOptional=mesosResourcePool.consumeAtomic(Constants.DISK_RESOURCE_TYPE,volumeSpec.getValue());}else {mesosResourceOptional=mesosResourcePool.getReservedResourceById(resourceId.get());}if(!mesosResourceOptional.isPresent()){return fail(this,""Failed to find MOUNT volume for '%s'."",volumeSpec).build();}mesosResource=mesosResourceOptional.get();resource=ResourceBuilder.fromSpec(volumeSpec,resourceId,persistenceId,Optional.of(mesosResource.getResource().getDisk().getSource().getMount().getRoot())).setValue(mesosResource.getValue()).setMesosResource(mesosResource).build();if(!resourceId.isPresent()){logger.info(""    Resource '{}' requires a RESERVE operation"",volumeSpec.getName());offerRecommendations.add(new ReserveOfferRecommendation(mesosResourcePool.getOffer(),resource));}}if(createsVolume()){logger.info(""    Resource '{}' requires a CREATE operation"",volumeSpec.getName());offerRecommendations.add(new CreateOfferRecommendation(mesosResourcePool.getOffer(),resource));if(taskName==null){podInfoBuilder.setExecutorVolume(volumeSpec);}}logger.info(""  Generated '{}' resource for task: [{}]"",volumeSpec.getName(),TextFormat.shortDebugString(resource));OfferEvaluationUtils.setProtos(podInfoBuilder,resource,getTaskName());return pass(this,offerRecommendations,""Offer contains sufficient %s'disk': for resource: '%s' with resourceId: '%s' and persistenceId: '%s'"",detailsClause,volumeSpec,resourceId,persistenceId).mesosResource(mesosResource).build();}"
527	"public int getNumChildren(){return 0;}"
528	"public CachedWorldBorder(WorldProperties properties){super(properties);this.center=properties.getWorldBorderCenter();this.diameter=properties.getWorldBorderDiameter();this.damageAmount=properties.getWorldBorderDamageAmount();this.damageThreshold=properties.getWorldBorderDamageThreshold();this.newDiameter=properties.getWorldBorderTargetDiameter();this.timeRemaining=properties.getWorldBorderTimeRemaining();this.warningDistance=properties.getWorldBorderWarningDistance();this.warningTime=properties.getWorldBorderWarningTime();}"
529	"public static CQLDataType typeToCQL(StatementManagerImpl mgr,String type){if(type.startsWith(""org.apache.cassandra.db.marshal.FrozenType("")){type=type.substring(43,type.length()-1);}return DataTypeParser.toCQL(mgr,DataTypeClassNameParser.parseOne(type,mgr.getProtocolVersion(),mgr.getCodecRegistry()));}"
530	"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{}"
531	"@Override public boolean onCommand(CommandSender sender,Command cmnd,String label,String[] args){if(!(sender instanceof Player)){return true;}if(!sender.hasPermission(""authme.""+label.toLowerCase())){sender.sendMessage(m._(""no_perm""));return true;}Player player=(Player)sender;String name=player.getName().toLowerCase();String ip=player.getAddress().getAddress().getHostAddress();if(PlayerCache.getInstance().isAuthenticated(name)){player.sendMessage(m._(""logged_in""));return true;}if(args.length==0){player.sendMessage(m._(""usage_log""));return true;}if(!database.isAuthAvailable(player.getName().toLowerCase())){player.sendMessage(m._(""user_unknown""));return true;}String hash=database.getAuth(name).getHash();try{if(PasswordSecurity.comparePasswordWithHash(args[0],hash)){PlayerAuth auth=new PlayerAuth(name,hash,ip,new Date().getTime());database.updateSession(auth);PlayerCache.getInstance().addPlayer(auth);LimboPlayer limbo=LimboCache.getInstance().getLimboPlayer(name);if(limbo!=null){player.getInventory().setContents(limbo.getInventory());player.getInventory().setArmorContents(limbo.getArmour());player.setGameMode(GameMode.getByValue(limbo.getGameMode()));if(settings.isTeleportToSpawnEnabled()){player.teleport(limbo.getLoc());}sender.getServer().getScheduler().cancelTask(limbo.getTimeoutTaskId());LimboCache.getInstance().deleteLimboPlayer(name);}player.sendMessage(m._(""login""));ConsoleLogger.info(player.getDisplayName()+"" logged in!"");}else {ConsoleLogger.info(player.getDisplayName()+"" used the wrong password"");if(settings.isKickOnWrongPasswordEnabled()){player.kickPlayer(m._(""wrong_pwd""));}else {player.sendMessage(m._(""wrong_pwd""));}}}catch(NoSuchAlgorithmException ex){ConsoleLogger.showError(ex.getMessage());sender.sendMessage(m._(""error""));}return true;}"
532	"@Override public void run(){while(this.running){synchronized(lock){while(running&&i<score.length){playerWatcher.onTick(i);if(score[i]=='\n'){if(newlineaspause){score[i]=' ';}else {i++;continue;}}int pos=alphabet.indexOf(score[i]);frequency=basefrequency*Math.pow(ROOT12OF2,pos);try{Thread.sleep((long)(1000.0*noteValue/tempo));}catch(InterruptedException e){e.printStackTrace();}i++;}if(loop){i=0;continue;}if(running){stopThread();}try{lock.wait();}catch(InterruptedException e){e.printStackTrace();}}}}"
533	"@Override public void onClick(View v){checkAnswer(true);}"
534	"public void actionPerformed(ActionEvent arg0){wpPressed=true;}"
535	"@Override public void onClick(DialogInterface dialog,int which){}"
536	"private static long stJoin(Path inputPath,Path outputPath,OperationsParams params) throws IOException,Exception,InterruptedException{JobConf conf=new JobConf(new Configuration(),STJoin.class);Job job=Job.getInstance(conf);FileSystem outfs=outputPath.getFileSystem(conf);outfs.delete(outputPath,true);conf.setJobName(""STJoin Query"");conf.setOutputKeyClass(Shape.class);conf.setMapOutputKeyClass(Shape.class);conf.setOutputValueClass(Text.class);conf.setMapperClass(STJoinMap.class);conf.setReducerClass(STJoinReduce.class);conf.setCombinerClass(STJoinReduce.class);conf.setBoolean(""mapreduce.input.fileinputformat.input.dir.recursive"",true);conf.setInputFormat(TextInputFormat.class);conf.setOutputFormat(TextOutputFormat.class);FileInputFormat.setInputPaths(conf,inputPath);FileOutputFormat.setOutputPath(conf,outputPath);GridInfo gridInfo=new GridInfo(-Double.MAX_VALUE,-Double.MAX_VALUE,Double.MAX_VALUE,Double.MAX_VALUE);gridInfo.calculateCellDimensions(20);OperationsParams.setShape(conf,""PartitionGrid"",gridInfo);JobClient.runJob(conf).waitForCompletion();;System.out.println(""Job1 finish"");return 0;}"
537	"public EditableDoctorPersonalInfo(){super();specializationLabel=new JLabel(Const.PERSONAL_INFO_PROFESSION);specializationValue=new JTextField();add(specializationLabel,new GridBagConstraints(2,2,1,1,0.2,1,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,5),0,0));add(specializationValue,new GridBagConstraints(3,2,1,1,1,1,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));}"
538	"@Override public boolean apply(Game game,Ability source){Permanent permanent=game.getPermanent(source.getSourceId());if(permanent==null){if(permanent==null&&source.getAbilityType()==AbilityType.STATIC){permanent=game.getPermanentEntering(source.getSourceId());}}if(permanent!=null){SpellAbility spellAbility=(SpellAbility)getValue(EntersBattlefieldEffect.SOURCE_CAST_SPELL_ABILITY);if(spellAbility!=null&&spellAbility.getSourceId().equals(source.getSourceId())&&permanent.getZoneChangeCounter(game)==spellAbility.getSourceObjectZoneChangeCounter()){if(spellAbility.getSourceId().equals(source.getSourceId())){int amount=spellAbility.getManaCostsToPay().getX();if(amount>0){Counter counterToAdd=counter.copy();counterToAdd.add(amount-counter.getCount());permanent.addCounters(counterToAdd,source,game);}}}}return true;}"
539	"@Override protected boolean isConnected(ForgeDirection side){return connections.getConnectionOnSide(side)!=null;}"
540	"@Override public InputStream toBinaryStream(OptimizedElementArray row,int columnPosition,LobService lobService) throws SQLException{return new ByteArrayInputStream(toBytes(row,columnPosition,lobService));}"
541	"public IntBagIterator(IntBag intBag,int indexBegin){this.intBag=intBag;assert (indexBegin>=0);this.index=indexBegin-1;this.size=intBag!=null?intBag.size():0;assert (this.size>=0);this.state=State.INIT;}"
542	"@Override public void onClick(View v){Log.i(TAG,""Pause clicked"");controller.pauseAction.doAction();}"
543	"public final int getBlockTypeId(int x,int y,int z){return 0;}"
544	"public void applySolution(int solutionIndex){System.out.println(""Applying correction"");System.out.println(""node: ""+node);System.out.println(""addition: ""+addition);System.out.println(""links: ""+links);System.out.println(""pathTriple: ""+pathTriple);System.out.println(""anyChildren: ""+anyChildren);System.out.println(""pathSoFar: ""+pathSoFar);if(solutionIndex==-1){node.datamap.openInEditor();return ;}if(!anyChildren){if(pathTriple.getNodeType()==NodeType.STRING){if(solutionIndex==0){DatamapNode child=node.addChild(pathTriple.attribute,NodeType.ENUMERATION);child.values.add(pathTriple.value);}else {node.addChild(pathTriple.attribute,NodeType.STRING);}}else {if(pathTriple.getNodeType()==NodeType.SOAR_ID){NodeType type=NodeType.values()[solutionIndex];node.addChild(pathTriple.attribute,type);}else {node.addChild(pathTriple.attribute,pathTriple.getNodeType());}}}else {NodeType childType=pathTriple.getNodeType();if(childType==NodeType.STRING){List<DatamapNode> enumNodes=node.getChildren(pathTriple.attribute,NodeType.ENUMERATION);if(enumNodes!=null&&enumNodes.size()>0){enumNodes.get(0).values.add(pathTriple.value);node.datamap.contentChanged(node);}}}}"
545	"public void setAlarm(Context context){alarmMgr=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);Intent intent=new Intent(context,SampleAlarmReceiver.class);alarmIntent=PendingIntent.getBroadcast(context,0,intent,0);Calendar calendar=Calendar.getInstance();calendar.setTimeInMillis(System.currentTimeMillis());calendar.set(Calendar.HOUR_OF_DAY,21);alarmMgr.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,alarmIntent);ComponentName receiver=new ComponentName(context,SampleBootReceiver.class);PackageManager pm=context.getPackageManager();pm.setComponentEnabledSetting(receiver,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP);}"
546	"@Override public CommandResult execute(){Scene scene=MainWindow.getScene();if(scene.getStylesheets().contains(DARK_MODE)){scene.getStylesheets().remove(DARK_MODE);scene.getStylesheets().add(LIGHT_MODE);}else {scene.getStylesheets().remove(LIGHT_MODE);scene.getStylesheets().add(DARK_MODE);}return new CommandResult(MESSAGE_SUCCESS);}"
547	"public static Map<String,Object> CreateCondition(PeopleVo peoplevo){Map<String,Object> condition=Maps.newHashMap();if(StringUtils.isNoneBlank(peoplevo.getName())){condition.put(""name"",peoplevo.getName());}if(peoplevo.getSex()!=null){condition.put(""sex"",peoplevo.getSex());}if(StringUtils.isNoneBlank(peoplevo.getNationalIdList())){condition.put(""nationalIdList"",peoplevo.getNationalIdList());}if(StringUtils.isNoneBlank(peoplevo.getBirthdayMin())){condition.put(""birthdayMin"",peoplevo.getBirthdayMin());}if(StringUtils.isNoneBlank(peoplevo.getBirthdayMax())){condition.put(""birthdayMax"",peoplevo.getBirthdayMax());}if(StringUtils.isNoneBlank(peoplevo.getPoliticalName())){condition.put(""politicalName"",peoplevo.getPoliticalName());}if(StringUtils.isNoneBlank(peoplevo.getEducationName())){condition.put(""educationName"",peoplevo.getEducationName());}if(peoplevo.getDegreeId()!=null){condition.put(""degreeId"",peoplevo.getDegreeId());}if(StringUtils.isNoneBlank(peoplevo.getPartyDateMin())){condition.put(""partyDateMin"",peoplevo.getPartyDateMin());}if(StringUtils.isNoneBlank(peoplevo.getPartyDateMax())){condition.put(""partyDateMax"",peoplevo.getPartyDateMax());}if(StringUtils.isNoneBlank(peoplevo.getWorkDateMin())){condition.put(""workDateMin"",peoplevo.getWorkDateMin());}if(StringUtils.isNoneBlank(peoplevo.getWorkDateMax())){condition.put(""workDateMax"",peoplevo.getWorkDateMax());}if(StringUtils.isNoneBlank(peoplevo.getSchoolDateMin())){condition.put(""schoolDateMin"",peoplevo.getSchoolDateMin());}if(StringUtils.isNoneBlank(peoplevo.getSchoolDateMax())){condition.put(""schoolDateMax"",peoplevo.getSchoolDateMax());}if(StringUtils.isNoneBlank(peoplevo.getJobName())){condition.put(""jobName"",peoplevo.getJobName());}if(StringUtils.isNoneBlank(peoplevo.getJobCategory())){condition.put(""jobCategory"",peoplevo.getJobCategory());}if(peoplevo.getJobLevelId()!=null){condition.put(""jobLevelId"",peoplevo.getJobLevelId());}if(StringUtils.isNoneBlank(peoplevo.getJobDateMin())){condition.put(""jobDateMin"",peoplevo.getJobDateMin());}if(StringUtils.isNoneBlank(peoplevo.getJobDateMax())){condition.put(""jobDateMax"",peoplevo.getJobDateMax());}if(StringUtils.isNoneBlank(peoplevo.getJobLevelDateMin())){condition.put(""jobLevelDateMin"",peoplevo.getJobLevelDateMin());}if(StringUtils.isNoneBlank(peoplevo.getJobLevelDateMax())){condition.put(""jobLevelDateMax"",peoplevo.getJobLevelDateMax());}return condition;}"
548	"@Override public int getHorizontalDirectionAsInt(){return 0;}"
549	"@Override public int result(){return 0;}"
550	"public void disableReadAccess(Book book,User user){readAccessRepository.deleteByBookAndUser(book,user);}"
551	"@Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{HttpSession session=request.getSession();String type=request.getParameter(""type"");ConnectionB connectionB=new ConnectionB();if(type!=null){if(type.equals(""logout"")){session.invalidate();doGet(request,response);return ;}String email=request.getParameter(""mail"");String pass=request.getParameter(""pass"");String username=request.getParameter(""username"");try{switch (type){case ""signin"" :{int retour;connectionB.setResult((retour=checkUser(email,pass))==0?ConnectionResult.SUCCES:ConnectionResult.FAIL);switch (retour){case 1 :connectionB.setField(ErrorField.PASSWORD);connectionB.setErrorMessage(""Le mot de passe entr? est incorrect"");break;case 2 :connectionB.setField(ErrorField.EMAIL);connectionB.setErrorMessage(""L'adresse mail entr?e n'existe pas"");break;}connectionB.setPlace(Form.LOGIN);}break;case ""signup"" :if(Sgbd.InsertUser(username,pass,email)){connectionB.setResult(ConnectionResult.SUCCES);User=username;}else {connectionB.setResult(ConnectionResult.FAIL);}connectionB.setPlace(Form.SIGNIN);break;}}catch(SQLException e){request.setAttribute(""Exception"",e);request.getRequestDispatcher(""/error.jsp"").forward(request,response);return ;}if(connectionB.getResult()==ConnectionResult.SUCCES){connectionB.setPlace(null);}session.setAttribute(""Result"",connectionB);session.setAttribute(""user"",User);session.setAttribute(""mail"",request.getParameter(""mail""));doGet(request,response);}}"
552	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.recent_locations_activity);NavigationAdapter.setUpNavDrawerActivity(this);recyclerView=(RecyclerView)findViewById(R.id.recent_locations_recycler_view);}"
553	"public void readJson(String fileName){ObjectMapper objectMapper=new ObjectMapper();String path=this.getClass().getClassLoader().getResource(fileName).getPath();lastLogon logon=null;LastLogonFlat logonFlat=null;try{logon=objectMapper.readValue(new File(path),lastLogon.class);}catch(IOException e){e.printStackTrace();}try{BeanUtils.copyProperties(logonFlat,logon);}catch(IllegalAccessException e){e.printStackTrace();}catch(InvocationTargetException e){e.printStackTrace();}}"
554	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
555	"@Override public boolean equals(Object o){if(!(o instanceof Append)){return false;}Append tmp=(Append)o;return true&&tmp.dataTarget.equals(this.dataTarget)&&tmp.statement.equals(this.statement);}"
556	"@Subscribe(threadMode=ThreadMode.ASYNC) @Override public void onAction(Action action){IAction actionType=action.getType();if(!(actionType instanceof ThemeAction)){return ;}switch ((ThemeAction)actionType){case FETCH_WP_COM_THEMES :fetchWpThemes();break;case FETCHED_WP_COM_THEMES :handleWpThemesFetched((FetchedThemesPayload)action.getPayload());break;case FETCH_INSTALLED_THEMES :fetchInstalledThemes((SiteModel)action.getPayload());break;case FETCHED_INSTALLED_THEMES :handleInstalledThemesFetched((FetchedThemesPayload)action.getPayload());break;case FETCH_CURRENT_THEME :fetchCurrentTheme((SiteModel)action.getPayload());break;case FETCHED_CURRENT_THEME :handleCurrentThemeFetched((FetchedCurrentThemePayload)action.getPayload());break;case ACTIVATE_THEME :activateTheme((ActivateThemePayload)action.getPayload());break;case ACTIVATED_THEME :handleThemeActivated((ActivateThemePayload)action.getPayload());break;case INSTALL_THEME :installTheme((ActivateThemePayload)action.getPayload());break;case INSTALLED_THEME :handleThemeInstalled((ActivateThemePayload)action.getPayload());break;}}"
557	"@Override public boolean apply(T t){return !predicate.apply(t);}"
558	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);ButterKnife.bind(this);mRecipesAdapter=new RecipesAdapter(this);getApiData();mRecyclerView.setHasFixedSize(true);mRecyclerView.setLayoutManager(new LinearLayoutManager(this));mRecyclerView.setAdapter(mRecipesAdapter);}"
559	"@Override public void onSuccess(int statusCode,Header[] headers,JSONArray response){prgDialog.hide();try{JSONArray responseMedicineNames=response.getJSONArray(1);JSONArray rxcuis=response.getJSONObject(2).getJSONArray(""RXCUIS"");adapter.clear();for(int i=0;i<responseMedicineNames.length();i++){Medicine med=new Medicine();med.setName(responseMedicineNames.getString(i));med.setRxcui(rxcuis.getJSONArray(i).getString(0));adapter.add(med.getName());autoCompleteMedicines.add(med);}autoCompleteTextView.showDropDown();}catch(JSONException e){Toast.makeText(getContext(),""Error Occured [Server's JSON response might be invalid]!"",Toast.LENGTH_SHORT).show();e.printStackTrace();}catch(Exception e){Toast.makeText(getContext(),""Error Occured"",Toast.LENGTH_SHORT).show();e.printStackTrace();}}"
560	"@Override public void handle(ClassicHttpRequest incomingRequest,ClassicHttpResponse outgoingResponse,HttpContext serverContext) throws HttpException,IOException{ final HttpCoreContext clientContext=HttpCoreContext.create(); final ClassicHttpRequest outgoingRequest=new BasicClassicHttpRequest(incomingRequest.getMethod(),incomingRequest.getPath());for(Iterator<Header> it=incomingRequest.headerIterator();it.hasNext();){Header header=it.next();if(!HOP_BY_HOP.contains(header.getName().toLowerCase(Locale.ROOT))){outgoingRequest.addHeader(header);}} final ClassicHttpResponse incomingResponse=requester.execute(targetHost,outgoingRequest,Timeout.ofMinutes(1),clientContext);outgoingResponse.setCode(incomingResponse.getCode());for(Iterator<Header> it=incomingResponse.headerIterator();it.hasNext();){Header header=it.next();if(!HOP_BY_HOP.contains(header.getName().toLowerCase(Locale.ROOT))){outgoingResponse.addHeader(header);}}outgoingResponse.setEntity(incomingResponse.getEntity());}"
561	"public List<GitlabProject> findProjects(GitLabProjectSelector selector,GitLabProjectVisibility visibility,String searchPattern){LOGGER.fine(""finding projects for ""+selector+"", ""+visibility+"", ""+searchPattern+""..."");return delegate.retrieve().getAll(projectUrl(selector,visibility,searchPattern),GitlabProject[].class);}"
562	"private HoldsAtBetween holdsAtBetweenSelected(boolean isHolding){try{LoadContextRelation loadContextRelations=new LoadContextRelation();ElementListSelectionDialog showContextRelationsDialog=new ElementListSelectionDialog(null,new LabelProvider());String[] contextRelationsNameArray=new String[loadContextRelations.getEnvironment().getContextRelations().size()];for(int i=0;i<loadContextRelations.getEnvironment().getContextRelations().size();i++){contextRelationsNameArray[i]=loadContextRelations.getEnvironment().getContextRelations().get(i).getName();}showContextRelationsDialog.setElements(contextRelationsNameArray);showContextRelationsDialog.setMultipleSelection(false);showContextRelationsDialog.setTitle(""Select a Context Relation"");if(showContextRelationsDialog.open()!=Window.OK){return null;}String contextRelationSelected=(String)showContextRelationsDialog.getResult()[0];System.out.println(""CR selected: ""+contextRelationSelected);int[] timeSelectedArray=createMultipleTimeInstantsDialog();Command cmd=editor.createAndExecuteShapeRequestCommand(behavDesc.model.diagram.providers.ModelElementTypes.HoldsAtBetween_2004,editor.getDiagramEditPart());editor.getDiagramEditPart().getDiagramEditDomain().getDiagramCommandStack();Collection<?> results=DiagramCommandStack.getReturnValues(cmd);Iterator<?> iter=results.iterator();HoldsAtBetween newHoldsAtBetween=new HoldsAtBetweenImpl();while(iter.hasNext()){Object obj=iter.next();if(obj instanceof CreateElementRequestAdapter){CreateElementRequestAdapter cra=(CreateElementRequestAdapter)obj;newHoldsAtBetween=(HoldsAtBetweenImpl)cra.resolve();SetRequest setRequestHoldsAtBetween=new SetRequest(editor.getEditingDomain(),view.getElement(),ModelPackage.eINSTANCE.getBehaviouralDescription_HoldsAtBetweens(),newHoldsAtBetween);SetValueCommand behavDescOperation=new SetValueCommand(setRequestHoldsAtBetween);editor.getDiagramEditDomain().getDiagramCommandStack().execute(new ICommandProxy(behavDescOperation));SetRequest setRequestTimeInstant1=new SetRequest(editor.getEditingDomain(),newHoldsAtBetween,ModelPackage.eINSTANCE.getHoldsAtBetween_InitialTime(),timeSelectedArray[0]);SetRequest setRequestTimeInstant2=new SetRequest(editor.getEditingDomain(),newHoldsAtBetween,ModelPackage.eINSTANCE.getHoldsAtBetween_EndingTime(),timeSelectedArray[1]);SetRequest setRequestIsHolding=new SetRequest(editor.getEditingDomain(),newHoldsAtBetween,ModelPackage.eINSTANCE.getHoldsAtBetween_IsHolding(),isHolding);SetValueCommand operation1=new SetValueCommand(setRequestTimeInstant1);SetValueCommand operation2=new SetValueCommand(setRequestTimeInstant2);SetValueCommand operation3=new SetValueCommand(setRequestIsHolding);editor.getDiagramEditDomain().getDiagramCommandStack().execute(new ICommandProxy(operation1));editor.getDiagramEditDomain().getDiagramCommandStack().execute(new ICommandProxy(operation2));editor.getDiagramEditDomain().getDiagramCommandStack().execute(new ICommandProxy(operation3));}}for(int i=0;i<loadContextRelations.getEnvironment().getContextRelations().size();i++){if(contextRelationSelected.equals(loadContextRelations.getEnvironment().getContextRelations().get(i).getName())){SetRequest setRequestContextRelation=new SetRequest(editor.getEditingDomain(),newHoldsAtBetween,ModelPackage.eINSTANCE.getHoldsAtBetween_ContextRelation(),loadContextRelations.getEnvironment().getContextRelations().get(i));SetValueCommand operation=new SetValueCommand(setRequestContextRelation);editor.getDiagramEditDomain().getDiagramCommandStack().execute(new ICommandProxy(operation));}}return newHoldsAtBetween;}catch(IOException e){e.printStackTrace();}return null;}"
563	"private void addDataSet(PieChart chart){ArrayList<PieEntry> pieEntries=new ArrayList<PieEntry>();ArrayList<String> labels=new ArrayList<String>();int l=0;for(Map.Entry<String,Double> entry : currentWeeksBudget.costOfAllCategories.entrySet()){BigDecimal number=new BigDecimal(entry.getValue());int myInt=number.intValue();float myFloat=number.floatValue();if(myFloat!=0.0){pieEntries.add(new PieEntry(myFloat,l));labels.add(entry.getKey());System.out.println(entry.getKey());l++;}}PieDataSet dataSet=new PieDataSet(pieEntries,""Category"");dataSet.setSliceSpace(2);dataSet.setValueTextSize(12);ArrayList<Integer> colors=new ArrayList<>();dataSet.setColors(ColorTemplate.COLORFUL_COLORS);dataSet.setValueFormatter(new MonetaryDisplay());Legend legend=pieChart.getLegend();legend.setForm(Legend.LegendForm.CIRCLE);legend.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);legend.setOrientation(Legend.LegendOrientation.VERTICAL);PieData pieData=new PieData(dataSet);pieChart.setData(pieData);pieChart.invalidate();}"
564	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.menu);}"
565	"public void editRequest(int userOneID,int userTwoID,int newStatus,int userPerformed) throws SQLException{query=""UPDATE `relationship` SET `status` = ?, `action_user_id` = ? ""+""WHERE (`user_one_id` = ? OR `user_two_id` = ?) AND (`user_two_id` = ? OR `user_one_id` = ?);"";PreparedStatement preparedStatement=conn.prepareStatement(query);preparedStatement.setInt(1,newStatus);preparedStatement.setInt(2,userPerformed);preparedStatement.setInt(3,userOneID);preparedStatement.setInt(4,userOneID);preparedStatement.setInt(5,userTwoID);preparedStatement.setInt(6,userTwoID);preparedStatement.execute();}"
566	"public boolean evaluateIndex(IndexLevel level){return true;}"
567	"@Override public void cleanAllJobExecutorCount(String nns) throws Exception{RegistryCenterClient registryCenterClient=registryCenterService.connect(nns);CuratorFramework curatorClient=registryCenterClient.getCuratorClient();CuratorFrameworkOp curatorFrameworkOp=curatorRepository.newCuratorFrameworkOp(curatorClient);List<String> jobs=jobDimensionService.getAllUnSystemJobs(curatorFrameworkOp);for(String job : jobs){resetOneJobExecutorCount(job,curatorClient);updateResetValue(curatorClient,job,ResetCountType.RESET_SERVERS);}asyncForceRefreshStatistics();}"
568	"@Override public void visit(BlockStmt blockStmt){Statement[] stmts=blockStmt.getStatements();for(Statement stmt : stmts){if(returnedOrReplied||isBreakCalled||isAbortCalled){break;}stmt.execute(this);}}"
569	"@SuppressWarnings(""PrivateMemberAccessBetweenOuterAndInnerClass"") @Override public void onClick(View view){mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_BUTTON_CLICK);ActivityUtils.hideKeyboard(getActivity().getCurrentFocus());if(NetworkUtils.checkConnection(getActivity())){mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);isSocialLogin=true;mLoginListener.showGoogleLoginScreen(this);}}"
570	"protected boolean swapChunkExcept(Grids_AbstractGrid g){Iterator<Grids_AbstractGrid> ite=Grids.iterator();Grids_AbstractGrid bg;while(ite.hasNext()){bg=ite.next();if(bg!=g){if(bg.swapChunk_Account(HandleOutOfMemoryErrorFalse)>0){return true;}}}return false;}"
571	"@Override public OffsetDateTime deserialize(ObjectReader reader,Context ctx) throws Exception{return OffsetDateTime.parse(reader.valueAsString(),formatter);}"
572	"@Override public int compare(PoEntry o1,PoEntry o2){return (int)(o1.getKey()-o2.getKey());}"
573	"public ChangeQuestion(){ final JFrame changeQuestion=new JFrame(Const.PROGRAM_NAME+"" ChangeAnswer"");changeQuestion.add(panel);changeQuestion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);changeQuestion.setSize(800,800);changeQuestion.setVisible(true);rightAnswerBox.addItem(""1"");rightAnswerBox.addItem(""2"");rightAnswerBox.addItem(""3"");rightAnswerBox.addItem(""4"");Accept.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    try {      applyingChanges();      JOptionPane.showMessageDialog(null,""?????? ???????!"");      changeQuestion.dispose();      TeacherMainFrame teacherMainFrame=new TeacherMainFrame();    } catch (    SQLException e1) {      e1.printStackTrace();    }catch (    ClassNotFoundException e1) {      e1.printStackTrace();    }  }});Cancel.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    try {      new TeacherMainFrame();      changeQuestion.dispose();    } catch (    SQLException e1) {      e1.printStackTrace();    }catch (    ClassNotFoundException e1) {      e1.printStackTrace();    }  }});}"
574	"@Override public int compare(CompressedDecklistInfo card1,CompressedDecklistInfo card2){if(card1.mCmc==card2.mCmc){return 0;}else {if(card1.mCmc>card2.mCmc){return 1;}}return -1;}"
575	"@Override public void call(Subscriber<? super T> subscriber){subscriber.add(Subscriptions.create(new Action0(){  @Override public void call(){    if (selection.choice.get() != null) {      selection.choice.get().unsubscribe();    }    if (!selection.ambSubscribers.isEmpty()) {      for (      AmbSubscriber<T> other : selection.ambSubscribers) {        other.unsubscribe();      }      selection.ambSubscribers.clear();    }  }}));subscriber.setProducer(new Producer(){  @Override public void request(  long n){    if (selection.choice.get() != null) {      selection.choice.get().requestMore(n);    } else {      for (      Observable<? extends T> source : sources) {        if (subscriber.isUnsubscribed()) {          break;        }        AmbSubscriber<T> ambSubscriber=new AmbSubscriber<T>(n,subscriber,selection);        selection.ambSubscribers.add(ambSubscriber);        if (selection.choice.get() != null) {          selection.unsubscribeOthers(selection.choice.get());          break;        }        source.unsafeSubscribe(ambSubscriber);      }    }  }});}"
576	"@Override public void onClick(View v){buttonDoseValue=(buttonDoseValue+1)%MAX_UNITS_PER_DOSE;if(buttonDoseValue==0||buttonDoseValue==1){buttonDoseValue=1;buttonUnit.setText(buttonDoseValue+"" Unit"");}else {buttonUnit.setText(buttonDoseValue+"" Units"");}}"
577	"@Override public String generateReport(String fileName,List<ReportEntity> reportEntityList){String generatedFileName=null;List<OngoingAccessionReportRecord> ongoingAccessionReportRecordList=new ArrayList<>();OngoingAccessionReportGenerator ongoingAccessionReportGenerator=new OngoingAccessionReportGenerator();for(ReportEntity reportEntity : reportEntityList){List<OngoingAccessionReportRecord> ongoingAccessionReportRecords=ongoingAccessionReportGenerator.prepareOngoingAccessionReportRecord(reportEntity);ongoingAccessionReportRecordList.addAll(ongoingAccessionReportRecords);}producerTemplate.sendBodyAndHeader(RecapConstants.FS_ONGOING_ACCESSION_REPORT_Q,ongoingAccessionReportRecordList,""fileName"",fileName);DateFormat df=new SimpleDateFormat(RecapConstants.DATE_FORMAT_FOR_FILE_NAME);generatedFileName=fileName+""-""+df.format(new Date())+"".csv"";return generatedFileName;}"
578	"@Override public int getItemCount(){return videoData.length;}"
579	"@Override public int getValue(){return controller.hasDynmap?1:0;}"
580	"@Override public void changed(ObservableValue<? extends EditItem> observable,EditItem oldValue,EditItem newValue){if(oldValue!=null&&newValue!=null&&!oldValue.equals(newValue)){loadTextFileToEditor(oldValue,newValue);}if(oldValue==null&&newValue!=null&&app.getEditItems().size()==1){loadTextFileToEditor(newValue);}}"
581	"public void onClick(DialogInterface dialog,int whichButton){}"
582	"private void doReportViolation() throws IOException{PrintWriter out=new PrintWriter(mSocket.getOutputStream(),true);BufferedReader in=new BufferedReader(new InputStreamReader(mSocket.getInputStream()));StringBuilder payload=new StringBuilder(mReqType).append(DELIMITER);payload.append(joinStrs(mPayLoad,DELIMITER)).append(""\n"");logger.d(this,""Sending:""+payload.toString());out.write(payload.toString());out.flush();String result=in.readLine();logger.d(this,""Received:""+result);if(result.startsWith(RESPONSE_REACTION)){String[] reaction=result.split(DELIMITER);if(reaction.length>1){if(reaction[1].equals(REACTION_DELETE)){String fileName=reaction[2];File file=new File(mHomeDirectory+""/""+fileName);file.delete();}else {if(reaction[1].equals(REACTION_RESTORE)){String fileName=reaction[2];Path filePath=Paths.get(mHomeDirectory+""/""+fileName);byte[] fileContent=StaticUtil.base64ToBytes(reaction[4]);FileInfo info=sql.getFileInfo(filePath);sql.updateFileInfo(filePath,info.getExpiresOnStr(),info.getType(),SHA256Helper.getHashStringFromBytes(fileContent),FileInfo.UNLOCK);Files.write(filePath,fileContent);}else {if(reaction[1].equals(REACTION_ALLOW)){String fileName=reaction[2];Path filePath=Paths.get(mHomeDirectory+""/""+fileName);FileInfo info=sql.getFileInfo(filePath);sql.updateFileInfo(filePath,info.getExpiresOnStr(),info.getType(),SHA256Helper.getHashStringFromFile(filePath),FileInfo.UNLOCK);}else {logger.d(this,result);}}}}}else {logger.d(this,result);}}"
583	"protected void setup(){super.setup();root=doc.createElement(this.getLocalName());path=new File(""./log/""+this.getLocalName()+""_hist.xml"").getAbsolutePath();doc.appendChild(root);this.service=new String[1];this.service[0]=""ServiceAggregation"";this.serviceName=""Aggregator"";this.registerAtDF();gui=new MainWindow(this);addBehaviour(new ServiceReceiverBehaviour(this));}"
584	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_search);mApp=(Common)getApplicationContext();mContext=getApplicationContext();mSearchResults=new ArrayList<>();mImageButtonClear=(ImageButton)findViewById(R.id.image_button_cross);mBackImageButton=(ImageButton)findViewById(R.id.image_back_button);mBackImageButton.setOnClickListener(v -> finish());mFragments=new ArrayList<>();mMainParent=(RelativeLayout)findViewById(R.id.main_parent);mRelativeLayout=(RelativeLayout)findViewById(R.id.best_matches);RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mRelativeLayout.getLayoutParams();params.topMargin=Common.getStatusBarHeight(this);mRelativeLayout.setLayoutParams(params);mImm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);mSearchEditText=(EditText)findViewById(R.id.edit_text_search);mSearchEditText.setTypeface(TypefaceHelper.getTypeface(getApplicationContext().getApplicationContext(),TypefaceHelper.FUTURA_BOOK));mImageButtonClear.setOnClickListener(v -> mSearchEditText.setText(""""));mRecyclerView=(RecyclerView)findViewById(R.id.recyclerview);GridLayoutManager gridLayoutManager=new GridLayoutManager(this,3);gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup(){  @Override public int getSpanSize(  int position){    Logger.log("""" + mAdapter.getItemViewType(position));    if (mAdapter.getItemViewType(position) == 0 || mAdapter.getItemViewType(position) == 2) {      return 3;    } else {      return 1;    }  }});mRecyclerView.setLayoutManager(gridLayoutManager);mAdapter=new SearchAdapter(this);mRecyclerView.setAdapter(mAdapter);RxTextView.textChangeEvents(mSearchEditText).debounce(175,TimeUnit.MILLISECONDS).observeOn(AndroidSchedulers.mainThread()).subscribeWith(getSearchObserver());}"
585	"@Override public View getView(int position,View convertView,ViewGroup parent){NewsItemViewHolder viewHolder;if(convertView==null){convertView=mLayoutInflater.inflate(R.layout.news_list_item,parent,false);viewHolder=new NewsItemViewHolder();viewHolder.newsImageView=(ImageView)convertView.findViewById(R.id.news_image);viewHolder.newsHeadline=(TextView)convertView.findViewById(R.id.headline_label);viewHolder.newsSectionTextView=(TextView)convertView.findViewById(R.id.section_label);viewHolder.newsTimestampTextView=(TextView)convertView.findViewById(R.id.time_label);viewHolder.newsReadTimeTextView=(TextView)convertView.findViewById(R.id.read_label);convertView.setTag(viewHolder);}else {viewHolder=(NewsItemViewHolder)convertView.getTag();}Articles.Article article=mArticles[position];try{String encodedString=new String(article.long_headline.getBytes(""ISO-8859-1""),""UTF-8"");viewHolder.newsHeadline.setText(Html.fromHtml(encodedString));}catch(UnsupportedEncodingException e){viewHolder.newsHeadline.setText(article.long_headline);e.printStackTrace();}viewHolder.newsHeadline.setTypeface(mHeadlineTypeface);viewHolder.newsSectionTextView.setText(article.section.name);viewHolder.newsSectionTextView.setTypeface(mMetaTypeface);viewHolder.newsTimestampTextView.setText(DateUtils.getProperDateString(article.published_at));viewHolder.newsTimestampTextView.setTypeface(mMetaTypeface);viewHolder.newsReadTimeTextView.setTypeface(mMetaTypeface);if(article.importance>3&&position!=0){viewHolder.newsImageView.setVisibility(View.VISIBLE);Picasso.with(mContext).load(article.featured_image.url).fit().centerCrop().into(viewHolder.newsImageView);}else {viewHolder.newsImageView.setVisibility(View.GONE);}return convertView;}"
586	"public static void equipBackpackFromKeybinding(EntityPlayer player){ItemStack backpack=PlayerWearingBackpackCapabilities.getEquippedBackpack(player);if(backpack!=null){boolean hasEmptyHotbarSlot=false;boolean hasEmptyOffhand=false;boolean hasEmptyInventorySlot=false;for(int i=0;i<9;i++){if(player.inventory.getStackInSlot(i)==null){hasEmptyHotbarSlot=true;}}if(hasEmptyHotbarSlot){if(player.getHeldItemMainhand()==null){player.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,backpack);}else {player.inventory.addItemStackToInventory(backpack);}}else {if(player.getHeldItemOffhand()==null){hasEmptyOffhand=true;}if(hasEmptyOffhand){ItemStack selected=player.getHeldItem(EnumHand.MAIN_HAND);player.setItemStackToSlot(EntityEquipmentSlot.OFFHAND,selected);player.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,backpack);}else {for(int i=9;i<player.inventory.getSizeInventory()-5;i++){if(player.inventory.getStackInSlot(i)==null){hasEmptyInventorySlot=true;}}if(hasEmptyInventorySlot){ItemStack selected=player.getHeldItem(EnumHand.MAIN_HAND).copy();player.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,backpack);player.inventory.addItemStackToInventory(selected);}}}if(hasEmptyHotbarSlot||hasEmptyOffhand||hasEmptyInventorySlot){PlayerWearingBackpackCapabilities.setEquippedBackpack(player,null);NetworkingHandler.network.sendTo(new ClientEquippedPackMessage(null),(EntityPlayerMP)player);EntityTracker tracker=((EntityPlayerMP)player).worldObj.getMinecraftServer().worldServerForDimension(player.dimension).getEntityTracker();tracker.sendToAllTrackingEntity(player,NetworkingHandler.network.getPacketFrom(new ClientEquippedPackPlayerSensitiveMessage(player.getEntityId(),null)));}}else {if(!ConfigHandler.disableEquipping&&player.getHeldItemMainhand()!=null&&player.getHeldItemMainhand().getItem() instanceof IBackpack){ItemStack backpackStack=player.getHeldItemMainhand();NBTUtils.setUUID(backpackStack);PlayerWearingBackpackCapabilities.setEquippedBackpack(player,backpackStack);NetworkingHandler.network.sendTo(new ClientEquippedPackMessage(backpackStack),(EntityPlayerMP)player);player.inventory.setInventorySlotContents(player.inventory.currentItem,null);EntityTracker tracker=((EntityPlayerMP)player).worldObj.getMinecraftServer().worldServerForDimension(player.dimension).getEntityTracker();tracker.sendToAllTrackingEntity(player,NetworkingHandler.network.getPacketFrom(new ClientEquippedPackPlayerSensitiveMessage(player.getEntityId(),backpackStack)));}}}"
587	"@Override public boolean hasNext(){return hasNext;}"
588	"@Override public boolean msgDelivered(Topic topic,long messageDbId,Date timestamp,int seq){return MessageDb.delivered(mDbh.getWritableDatabase(),topic,messageDbId,timestamp,seq);}"
589	"public static double getAccuracyOnaSetWithAmmendedManager(List<PojoRow> list,AmmendManager ammendedClassifier){}"
590	"@Override public BasicBlock suxAt(int index){assert (index>=0&&index<getNumOfSuccessors());return (BasicBlock)operand(index);}"
591	"private void showImage(){labelUnderMap.setVisible(false);Image img=imgService.getValue();imgView.setImage(img);if(img==null&&!isTraceInProgress.get()){labelUnderMap.setText(noHopsSelectedLabelText);placeLabelUnderMap();labelUnderMap.setVisible(true);}if(semaphore.availablePermits()==0){semaphore.release();}}"
592	"@Override public void update(){super.update();if(this.hasCO2==-1){this.hasCO2=this.getAirProducts();}if(!this.worldObj.isRemote){if(this.hasCO2==0&&this.gasTank2.getFluidAmount()>0){this.gasTank2.drain(this.gasTank2.getFluidAmount(),true);}ItemStack inputCanister=this.containingItems[2];if(inputCanister!=null){if(inputCanister.getItem() instanceof ItemAtmosphericValve&&this.hasCO2>0){if(this.gasTank2.getFluidAmount()<this.gasTank2.getCapacity()){IBlockState stateAbove=this.worldObj.getBlockState(this.getPos().up());Block blockAbove=stateAbove.getBlock();if(blockAbove!=null&&blockAbove.getMaterial(stateAbove)==Material.AIR&&blockAbove!=GCBlocks.breatheableAir&&blockAbove!=GCBlocks.brightBreatheableAir){if(!OxygenUtil.inOxygenBubble(this.worldObj,this.getPos().getX()+0.5,this.getPos().getY()+1.0,this.getPos().getZ()+0.5)){FluidStack gcAtmosphere=FluidRegistry.getFluidStack(""carbondioxide"",4);this.gasTank2.fill(gcAtmosphere,true);}}}}}checkFluidTankTransfer(4,this.liquidTank);if(this.hasEnoughEnergyToRun&&this.canProcess()){if(this.tierGC==2){this.processTimeRequired=(this.poweredByTierGC==2)?2:3;}if(this.processTicks<=0){this.processTicks=this.processTimeRequired;}else {if(--this.processTicks<=0){this.doLiquefaction();this.processTicks=this.canProcess()?this.processTimeRequired:0;}}}else {if(this.processTicks>0){this.processTicks=0;}else {if(--this.processTicks<=-8){this.processTicks=-8;}}}}}"
593	"public void mod(DefaultBind E,MOB M){E.bindType=CMLib.genEd().intPrompt(M,""""+E.bindType);}"
594	"@Override public void skipTo(int v){short segIdx=(short)(v>>SEGMENT_SHIFT_BITS);short segVal=(short)(v&(SEGMENT_SIZE-1));if(segIdx==idx){it.skipTo(segVal);return ;}segIter.skipTo(segIdx);advance();it.skipTo(segVal);}"
595	"@Override public void onReceive(Context context,Intent intent){if(!isServiceRunning(GPSTracker.class,context)){Log.e(SensorRestarterBroadcastReceiver.class.getSimpleName(),""GPSTracker Service Stops! Oooooooooooooppppssssss!!!!"");context.startService(new Intent(context,GPSTracker.class));}if(!isServiceRunning(MobileNotificationService.class,context)){Log.e(SensorRestarterBroadcastReceiver.class.getSimpleName(),""MobileNotificationService Service Stops! Oooooooooooooppppssssss!!!!"");context.startService(new Intent(context,MobileNotificationService.class));}if(!isServiceRunning(UpdateNotificationService.class,context)){Log.e(SensorRestarterBroadcastReceiver.class.getSimpleName(),""UpdateNotificationService Service Stops! Oooooooooooooppppssssss!!!!"");context.startService(new Intent(context,UpdateNotificationService.class));}}"
596	"protected void updateUI(int errorCode,String in){if(errorCode==0){mTextCharge.setTextSize(TypedValue.COMPLEX_UNIT_SP,56);mTextChargeTitle.setText(getText(R.string.charge));}else {mTextCharge.setTextSize(TypedValue.COMPLEX_UNIT_SP,20);mTextChargeTitle.setText("""");}switch (errorCode){case 0 :String[] dataSet=in.split("","");int batteryLevel=Integer.parseInt(dataSet[0]);if(batteryLevel<0){batteryLevel+=256;}int batteryHealth=Integer.parseInt(dataSet[1]);if(batteryHealth<0){batteryHealth+=256;}int current=((int)((Long.parseLong(dataSet[4])<<8)&0xff00))+(int)Long.parseLong(dataSet[5]);int TTEorF=((int)((Long.parseLong(dataSet[2])<<8)&0xff00))+(int)Long.parseLong(dataSet[3]);if((current>>15)==1){current=current-65535;}if(current<=0){if(TTEorF>60){mTextTTE.setText(String.valueOf(TTEorF/60)+"" hr left"");}else {mTextTTE.setText(String.valueOf(TTEorF)+"" min left"");}}else {if(TTEorF>60){mTextTTE.setText(String.valueOf(TTEorF/60)+"" hr to full"");}else {mTextTTE.setText(String.valueOf(TTEorF)+"" min to full"");}}Log.d(TAG,""@updateUI, level is ""+batteryLevel+"" health is ""+batteryHealth+"" TTE/F is ""+TTEorF+"" current is ""+current);mCharge.setData(batteryLevel);mHealth.setData(batteryHealth);mTextCharge.setText(bound(Integer.toString(batteryLevel)));mTextHealth.setText(bound(Integer.toString(batteryHealth)));break;case 1 :mCharge.setData(0);mHealth.setData(0);mTextCharge.setText(getText(R.string.wrong_device));mTextHealth.setText("""");mTextTTE.setText(R.string.TTE_Default);break;case 2 :mCharge.setData(0);mHealth.setData(0);mTextCharge.setText(getText(R.string.no_connection));mTextHealth.setText("""");mTextTTE.setText(R.string.TTE_Default);break;case 3 :mCharge.setData(0);mHealth.setData(0);mTextCharge.setText(getText(R.string.connected));mTextHealth.setText("""");mTextTTE.setText(R.string.TTE_Default);break;default :break;}}"
597	"public void setThreadCount(int threadCount){this.threadCount=Runtime.getRuntime().availableProcessors()+threadCount;}"
598	"@Override public void onClick(View view){view.requestFocusFromTouch();int clickedPosition=getAdapterPosition();onClickListener.onListItemClick(clickedPosition);if(isSubstackActivity()){((CheckedTextView)stackTextView).toggle();}}"
599	"public int linkRelationships(int startingFromType){assert (startingFromType>=0):startingFromType;RelationshipTypeDistribution relationshipTypeDistribution=getState(RelationshipTypeDistribution.class);int upToType=nextSetOfTypesThatFitInMemory(relationshipTypeDistribution,startingFromType,availableMemoryForLinking,nodeRelationshipCache.getNumberOfDenseNodes());Collection<Object> typesToLinkThisRound=relationshipTypeDistribution.types(startingFromType,upToType);int typesImported=typesToLinkThisRound.size();boolean thisIsTheFirstRound=startingFromType==0;boolean thisIsTheOnlyRound=thisIsTheFirstRound&&upToType==relationshipTypeDistribution.getNumberOfRelationshipTypes();Configuration relationshipConfig=configWithRecordsPerPageBasedBatchSize(config,neoStore.getRelationshipStore());Configuration nodeConfig=configWithRecordsPerPageBasedBatchSize(config,neoStore.getNodeStore());Configuration groupConfig=configWithRecordsPerPageBasedBatchSize(config,neoStore.getRelationshipGroupStore());nodeRelationshipCache.setForwardScan(true,true);String range=typesToLinkThisRound.size()==1?String.valueOf(oneBased(startingFromType)):oneBased(startingFromType)+""-""+(startingFromType+typesImported);String topic="" ""+range+""/""+relationshipTypeDistribution.getNumberOfRelationshipTypes();int nodeTypes=thisIsTheFirstRound?NodeType.NODE_TYPE_ALL:NodeType.NODE_TYPE_DENSE;Predicate<RelationshipRecord> readFilter=thisIsTheFirstRound?null:typeIdFilter(typesToLinkThisRound,neoStore.getRelationshipTypeRepository());Predicate<RelationshipRecord> denseChangeFilter=thisIsTheOnlyRound?null:typeIdFilter(typesToLinkThisRound,neoStore.getRelationshipTypeRepository());RelationshipLinkforwardStage linkForwardStage=new RelationshipLinkforwardStage(topic,relationshipConfig,neoStore.getRelationshipStore(),nodeRelationshipCache,readFilter,denseChangeFilter,nodeTypes,new RelationshipLinkingProgress(),memoryUsageStats);executeStage(linkForwardStage);executeStage(new RelationshipGroupStage(topic,groupConfig,neoStore.getTemporaryRelationshipGroupStore(),nodeRelationshipCache));if(thisIsTheFirstRound){executeStage(new SparseNodeFirstRelationshipStage(nodeConfig,neoStore.getNodeStore(),nodeRelationshipCache));}nodeRelationshipCache.setForwardScan(false,true);executeStage(new RelationshipLinkbackStage(topic,relationshipConfig,neoStore.getRelationshipStore(),nodeRelationshipCache,readFilter,denseChangeFilter,nodeTypes,new RelationshipLinkingProgress(),memoryUsageStats));updatePeakMemoryUsage();if(upToType==relationshipTypeDistribution.getNumberOfRelationshipTypes()){nodeRelationshipCache.close();nodeRelationshipCache=null;return -1;}return upToType;}"
600	"public void updateDataset(List<PerPersonValue> data){mDataSet=data;}"
601	"public List<String> getActions(){return Collections.unmodifiableList(this.actions);}"
602	"public Vec4 getDistanceToCollission(WorldObject obj){float cx,cy;cx=obj.position.x+obj.bounds.x/2;cy=obj.position.y+obj.bounds.y/2;Vec4 output=new Vec4(0,0,10000000,10000000);List<KdTreeNode<WorldObject>> nodes=kdTree.getKNN(new Point2D.Double(cx,cy),100);for(KdTreeNode<WorldObject> node : nodes){Vec2 a=new Vec2(0,-1);Vec2 b=new Vec2(-1,0);Vec2 c=new Vec2(0,1);Vec2 d=new Vec2(1,0);Vec2 oCornerA,oCornerB,oCornerC,oCornerD;oCornerA=obj.position.clone();oCornerB=Vec2.add(obj.position,new Vec2(0,obj.bounds.y));oCornerC=Vec2.add(obj.position,obj.bounds);oCornerD=Vec2.add(obj.position,new Vec2(obj.bounds.x,0));Vec2 tCornerA,tCornerB,tCornerC,tCornerD;tCornerA=node.data.position.clone();tCornerB=Vec2.add(node.data.position,new Vec2(0,node.data.bounds.y));tCornerC=Vec2.add(node.data.position,node.data.bounds);tCornerD=Vec2.add(node.data.position,new Vec2(node.data.bounds.x,0));oCornerA.add(new Vec2(0.5,0.5));oCornerB.add(new Vec2(0.5,-0.5));oCornerC.add(new Vec2(-0.5,-0.5));oCornerD.add(new Vec2(-0.5,0.5));float aLen=Vec2.dotProduct(a,tCornerC).sub(Vec2.dotProduct(a,oCornerA)).y;float bLen=Vec2.dotProduct(b,tCornerC).sub(Vec2.dotProduct(b,oCornerA)).x;float cLen=Vec2.dotProduct(c,tCornerA).sub(Vec2.dotProduct(c,oCornerC)).y;float dLen=Vec2.dotProduct(d,tCornerA).sub(Vec2.dotProduct(d,oCornerC)).x;if(pointBetweenHorizontal(oCornerA,tCornerA,oCornerD)||pointBetweenHorizontal(oCornerA,tCornerD,oCornerC)||pointBetweenHorizontal(tCornerA,oCornerA,tCornerD)||pointBetweenHorizontal(tCornerA,oCornerD,tCornerD)){if(aLen>0){output.x=Math.max(output.x,tCornerC.y);}if(cLen>0){output.z=Math.min(output.z,tCornerA.y);}}if(pointBetweenVertical(oCornerA,tCornerA,oCornerB)||pointBetweenVertical(oCornerA,tCornerB,oCornerB)||pointBetweenVertical(tCornerA,oCornerA,tCornerB)||pointBetweenVertical(tCornerA,oCornerB,tCornerB)){if(bLen>0){output.y=Math.max(output.y,tCornerC.x);}if(dLen>0){output.w=Math.min(output.w,tCornerA.x);}}}return output;}"
603	"private void populatePatientInfo(PatientInfo patientInfo,Integer demographicNo,boolean useClinicInfoForOrganizationId){Demographic demographic=demographicDao.getDemographicById(demographicNo);if(demographic==null){logger.warn(""cannot find demographic!"");}patientInfo.setUniqueVendorIDSequence(demographicNo.toString());patientInfo.setFirstName(demographic.getFirstName());patientInfo.setLastName(demographic.getLastName());patientInfo.setDOB(new XmlCalendar(demographic.getBirthDayAsString()));if(""M"".equals(demographic.getSex())){patientInfo.setGender(Gender.M);}else {if(""F"".equals(demographic.getSex())){patientInfo.setGender(Gender.F);}else {patientInfo.setGender(Gender.U);}}patientInfo.setChartNumber(String.valueOf(demographic.getDemographicNo()));if(StringUtils.filled(demographic.getHin())){patientInfo.setHealthCardNum(demographic.getHin());}else {patientInfo.setHealthCardNum(""0"");}patientInfo.setHealthCardType(0);if(StringUtils.filled(demographic.getHcType())){if(demographic.getHcType().equals(""ON"")){patientInfo.setHealthCardType(1);}if(demographic.getHcType().equals(""QC"")){patientInfo.setHealthCardType(2);}}patientInfo.setOrganizationID(OscarProperties.getInstance().getProperty(""born_orgcode""));if(useClinicInfoForOrganizationId){ClinicInfoDao clinicInfoDao=SpringUtils.getBean(ClinicInfoDao.class);ClinicInfoDataObject clinicInfo=clinicInfoDao.getClinic();patientInfo.setOrganizationID(clinicInfo.getFacilityName());}}"
604	"public void setWhiteDataStyleBorderBoxAlignCenterBold(HSSFSheet sheet,HSSFCell cell){cell.setCellStyle(getSeriesStyle(sheet.getWorkbook(),HSSFCellStyle.BORDER_THIN,HSSFCellStyle.BORDER_THIN,HSSFCellStyle.ALIGN_CENTER,Font.BOLDWEIGHT_BOLD));}"
605	"private CompilerError doWrite(){CompilerError error=CompilerError.NONE();mCurrentToken=mTokenList.getTokenFromBuffer();if(mCurrentToken!=null&&mCurrentToken.getSymbol()==Symbols.SABRE_PARENTESES){mCurrentToken=mTokenList.getTokenFromBuffer();if(mCurrentToken!=null&&mCurrentToken.getSymbol()==Symbols.SIDENTIFICADOR){if(mLabel==3){mCurrentToken=mTokenList.getTokenFromBuffer();if(mCurrentToken!=null&&mCurrentToken.getSymbol()==Symbols.SFECHA_PARENTESES){mCurrentToken=mTokenList.getTokenFromBuffer();}else {int line=mCurrentToken==null?0:mCurrentToken.getTokenLine();int col=mCurrentToken==null?0:mCurrentToken.getTokenEndColumn();error=CompilerError.instantiateError(CompilerError.ILLEGAL_END_EXPRESSION,line,col,this);}}else {}}else {}}else {}return error;}"
606	"public void cutPublication(String pubId) throws ClipboardException,RemoteException{PublicationDetail pub=getPublicationDetail(pubId);PublicationSelection pubSelect=new PublicationSelection(pub);pubSelect.setCutted(true);SilverTrace.info(""kmelia"",""KmeliaSessionController.cutPublication()"",""root.MSG_GEN_PARAM_VALUE"",""clipboard = ""+getClipboardName()+""' count=""+getClipboardCount());addClipboardSelection(pubSelect);}"
607	"private boolean moveOrCopyCollection(XmldbURI collUri,XmldbURI destUri,XmldbURI newName,boolean move) throws EXistException,PermissionDeniedException{return withDb((broker,transaction) -> this.<Boolean>withCollection(move ? LockMode.WRITE_LOCK : LockMode.READ_LOCK,broker,transaction,collUri).apply((source,broker1,transaction1) -> this.<Boolean>writeCollection(broker1,transaction1,destUri).apply((destination,broker2,transaction2) -> {  if (move) {    broker2.moveCollection(transaction2,source,destination,newName);  } else {    broker2.copyCollection(transaction2,source,destination,newName);  }  return true;})));}"
608	"@Override public boolean isViewReferenced(){return true;}"
609	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
610	"@Override protected void action(){ShortPoint2D position=super.getPos();if(!super.isValidPosition(position)){if(searchesCounter>120){super.getMovable().kill();return ;}if(super.preSearchPath(true,position.x,position.y,Constants.MOVABLE_FLEE_TO_VALID_POSITION_RADIUS,ESearchType.VALID_FREE_POSITION)){super.followPresearchedPath();}else {EDirection currentDirection=super.getMovable().getDirection();EDirection newDirection;if(turnNextTime||RandomSingleton.nextF()<0.1){turnNextTime=false;newDirection=currentDirection.getNeighbor(RandomSingleton.getInt(-1,1));}else {newDirection=currentDirection;}ShortPoint2D newPos=newDirection.getNextHexPoint(position);if(super.getStrategyGrid().isFreePosition(newPos)){super.goInDirection(newDirection);}else {super.lookInDirection(newDirection);turnNextTime=true;}}searchesCounter++;}else {super.convertTo(super.getMovable().getMovableType());}}"
611	"private void Download(int position){ final String SongName=result.get(position).getSongName(); final String SongID=result.get(position).getSongId(); final String Artist=result.get(position).getArtistName(); final String SqUrl=result.get(position).getSqUrl(); final String HqUrl=result.get(position).getHqUrl(); final String LqUrl=result.get(position).getLqUrl(); final String flacUrl=result.get(position).getFlacUrl();String mvUrl=result.get(position).getMvHdUrl().isEmpty()?result.get(position).getMvLdUrl():result.get(position).getMvHdUrl();List<String> arrayList=new ArrayList(); final List<String> songs=new ArrayList<>(); final List<String> format=new ArrayList<>();if(!TextUtils.isEmpty(LqUrl)){arrayList.add(""??"");songs.add(LqUrl);format.add(""-L"");}if(!TextUtils.isEmpty(HqUrl)){arrayList.add(""?"");songs.add(HqUrl);format.add(""-H"");}if(!TextUtils.isEmpty(SqUrl)){arrayList.add(""??"");songs.add(SqUrl);format.add(""-S"");}if(!TextUtils.isEmpty(flacUrl)){songs.add(flacUrl);arrayList.add(""??"");format.add(""-F"");}if(!TextUtils.isEmpty(mvUrl)){arrayList.add(""MV"");songs.add(mvUrl);format.add(""-Video"");}String[] types=arrayList.toArray(new String[arrayList.size()]);AlertDialog.Builder dialog=new AlertDialog.Builder(this);dialog.setItems(types,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialogInterface,  int i){    String name=SongName + ""-"" + Artist+ format.get(i);    String url=songs.get(i);    download(name,url,SongID);  }});dialog.show();}"
612	"@Override protected CalendarDiff getCalendarDiff(){return new CalendarDiff(Calendar.MONTH,1);}"
613	"@Override public void run(){mMenuOpened=true;if(mToggleListener!=null){mToggleListener.onMenuToggle(true);}}"
614	"@Override public void onClick(View view){mProcessLike=true;refLike.addValueEventListener(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    if (mProcessLike) {      String userId=mAuth.getCurrentUser().getUid();      if (dataSnapshot.child(key).hasChild(""likedBy"")) {        if (dataSnapshot.child(key).child(""likedBy"").hasChild(userId)) {          refLike.child(key).child(""likedBy"").child(userId).removeValue();          refSave.child(userId).child(""likedPosts"").child(key).removeValue();          mProcessLike=false;        } else {          refLike.child(key).child(""likedBy"").child(userId).setValue(true);          refSave.child(userId).child(""likedPosts"").child(key).setValue(true);          sendLikeNotif(name,key,posterId);          mProcessLike=false;        }      } else {        refLike.child(key).child(""likedBy"").child(userId).setValue(true);        refSave.child(userId).child(""likedPosts"").child(key).setValue(true);        sendLikeNotif(name,key,posterId);        mProcessLike=false;      }    }  }  @Override public void onCancelled(  DatabaseError databaseError){  }});}"
615	"private void ghinuoc(String BT){if(ContextCompat.checkSelfPermission(con,android.Manifest.permission.ACCESS_FINE_LOCATION)!=PackageManager.PERMISSION_GRANTED&&ActivityCompat.checkSelfPermission(con,android.Manifest.permission.ACCESS_COARSE_LOCATION)!=PackageManager.PERMISSION_GRANTED){Toast.makeText(con,""GHI NUOC:You need have granted permission......."",Toast.LENGTH_SHORT).show();ActivityCompat.requestPermissions(this,new String{android.Manifest.permission.ACCESS_FINE_LOCATION},1);}else {gps=new GPSTracker(con,this);if(gps.canGetLocation()){String maKH=MaKH.getText().toString().trim();String Chiso=ChiSoMoi.getText().toString().trim();String m3=m3moi.getText().toString().trim();String Chisocon=ChiSoMoiCon.getText().toString().trim();String m3con=m3conmoi.getText().toString().trim();String Dienthoai=DienThoai.getText().toString().trim();String ghichu=GhiChu.getText().toString().trim();latitude=gps.getLatitude();longitude=gps.getLongitude();vido=String.valueOf(latitude);kinhdo=String.valueOf(longitude);Log.e(""Toa do"",vido+""-""+kinhdo);String nhanvien=spdata.getDataNhanVienTrongSP();String thoigian=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").format(Calendar.getInstance().getTime());Log.e(""Thoi gian"",thoigian);String trangthaiTLK=TinhTrangTLK.getText().toString().trim();if(khachhangDAO.updateKhachHang(maKH,Chiso,Chisocon,Dienthoai,ghichu,vido,kinhdo,nhanvien,m3,m3con,thoigian,trangthaiTLK,BT)){Toast.makeText(con,""Ghi n??c th?nh c?ng"",Toast.LENGTH_SHORT).show();Bien.bienghi=spdata.getDataFlagGhiTrongSP();Bien.bienghi=Bien.bienghi+1;spdata.luuDataFlagGhiTrongSP(Bien.bienghi);Bien.bienghi=spdata.getDataFlagGhiTrongSP();flagDangGhi=false;LichSuDTO ls=new LichSuDTO();ls.setNoiDungLS(""Ghi n??c ???ng ""+tenduong+"", kh?ch h?ng c? danh b? ""+DanhBo.getText().toString().trim());ls.setMaLenh(""GN"");String thoigian1=new SimpleDateFormat(""dd-MM-yyyy HH:mm:ss"").format(Calendar.getInstance().getTime());ls.setThoiGianLS(thoigian1);lichsudao.addTable_History(ls);if(khachhangDAO.countKhachHangChuaGhiTheoDuong(maduong_nhan)>0){String sothutu="""";if(Bien.bienkieughi==1){sothutu=khachhangDAO.getSTTChuaGhiNhoNhatLonHonHienTai(maduong_nhan,STT_HienTai);}else {sothutu=khachhangDAO.getSTTChuaGhiLonNhatNhoHonHienTai(maduong_nhan,STT_HienTai);}Log.e(""Ghi nuoc, stt"",sothutu);if(!sothutu.equals(""0"")){STT_HienTai=sothutu;setDataForView(sothutu,maduong_nhan);spdata.luuDataDuongVaSTTDangGhiTrongSP(maduong_nhan,sothutu);}else {AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);alertDialogBuilder.setMessage(""V?n c?n kh?ch h?ng b?n ch?a ghi n??c, b?n c? mu?n ghi n??c kh?ch h?ng n?y kh?ng"");alertDialogBuilder.setPositiveButton(""C?"",new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();    String sothutukhConLai=khachhangDAO.getSTTChuaGhiNhoNhat(maduong_nhan);    if (!sothutukhConLai.equals("""")) {      STT_HienTai=sothutukhConLai;      setDataForView(sothutukhConLai,maduong_nhan);      spdata.luuDataDuongVaSTTDangGhiTrongSP(maduong_nhan,sothutukhConLai);    }  }});alertDialogBuilder.setNegativeButton(""Kh?ng"",new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();    MainActivity.this.finish();  }});AlertDialog alertDialog=alertDialogBuilder.create();alertDialog.setCanceledOnTouchOutside(false);alertDialog.show();}}else {if(duongDAO.updateDuongDaGhi(maduong_nhan)){AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);if(duongDAO.countDuongChuaGhi()>0){alertDialogBuilder.setMessage(R.string.main_ghinuoc_duongdaghixong);}else {alertDialogBuilder.setMessage(R.string.main_ghinuoc_duongdaghixongtatca);}alertDialogBuilder.setNegativeButton(""OK"",new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();    MainActivity.this.finish();  }});AlertDialog alertDialog=alertDialogBuilder.create();alertDialog.setCanceledOnTouchOutside(false);alertDialog.show();}}hideKeyboard(this);}else {Toast.makeText(con,""Ghi n??c th?t b?i"",Toast.LENGTH_SHORT).show();}}else {gps.showSettingsAlert();}}}"
616	"@Override public boolean apply(Object o){return true;}"
617	"@Override public void tryFirst(KdcRequest kdcRequest,PluginRequestContext requestContext,PaData outPadata) throws KrbException{int nonce=kdcRequest.getChosenNonce();long now=System.currentTimeMillis();Calendar calendar=Calendar.getInstance();calendar.setTime(new Date(now));int cusec=calendar.get(Calendar.SECOND);KerberosTime ctime=new KerberosTime(now);CheckSum checkSum=null;try{checkSum=CheckSumUtil.makeCheckSum(CheckSumType.NIST_SHA,kdcRequest.getKdcReq().getReqBody().encode());}catch(KrbException e){throw new KrbException(""Fail to encode checksum."",e);}PaPkAsReq paPkAsReq=makePaPkAsReq(kdcRequest,(PkinitRequestContext)requestContext,cusec,ctime,nonce,checkSum);outPadata.addElement(makeEntry(paPkAsReq));}"
618	"@Override public void buttonClick(ClickEvent event){setRearranging(true);}"
619	"public static String getVplexClusterForExportMask(ExportMask exportMask,URI vplexStorageSystemUri,DbClient dbClient){String vplexCluster=CLUSTER_UNKNOWN;List<URI> storagePortUris=URIUtil.toURIList(exportMask.getStoragePorts());for(URI uri : storagePortUris){StoragePort storagePort=dbClient.queryObject(StoragePort.class,uri);if((storagePort!=null)&&DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(storagePort.getCompatibilityStatus())&&(RegistrationStatus.REGISTERED.toString().equals(storagePort.getRegistrationStatus()))&&DiscoveryStatus.VISIBLE.toString().equals(storagePort.getDiscoveryStatus())){if(storagePort.getStorageDevice().equals(vplexStorageSystemUri)){vplexCluster=getVplexClusterOfPort(storagePort);break;}}}return vplexCluster;}"
620	"public TaxonNode getAncestorOfRank(Rank rank){Taxon taxon=CdmBase.deproxy(this.getTaxon());if(taxon==null){return null;}TaxonName name=CdmBase.deproxy(taxon.getName());if(name.getRank().isHigher(rank)){return null;}if(name.getRank().equals(rank)){return this;}if(this.getParent()!=null){TaxonNode parent=CdmBase.deproxy(this.getParent());return parent.getAncestorOfRank(rank);}return null;}"
621	"public void createVirtualVolumes(URI vplexURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException{List<List<VolumeInfo>> rollbackData=new ArrayList<List<VolumeInfo>>();List<URI> createdVplexVolumeURIs=new ArrayList<URI>();try{WorkflowStepCompleter.stepExecuting(stepId);StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);Map<URI,StorageSystem> storageMap=new HashMap<URI,StorageSystem>();Map<Volume,List<Volume>> volumeMap=new HashMap<Volume,List<Volume>>();StringBuffer volumeLabels=new StringBuffer();List<String> storageSystemGuids=new ArrayList<String>();for(URI vplexVolumeURI : vplexVolumeURIs){Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);volumeLabels.append(vplexVolume.getLabel()).append("" "");volumeMap.put(vplexVolume,new ArrayList<Volume>());for(String associatedVolume : vplexVolume.getAssociatedVolumes()){Volume storageVolume=getDataObject(Volume.class,new URI(associatedVolume),_dbClient);URI storageSystemId=storageVolume.getStorageController();if(storageMap.containsKey(storageSystemId)==false){StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageSystemId);storageMap.put(storageSystemId,storage);if(!storageSystemGuids.contains(storage.getNativeGuid())){storageSystemGuids.add(storage.getNativeGuid());}}volumeMap.get(vplexVolume).add(storageVolume);}}_log.info(String.format(""Request to create: %s virtual volume(s) %s"",volumeMap.size(),volumeLabels));long startTime=System.currentTimeMillis();client.rediscoverStorageSystems(storageSystemGuids);StringBuilder buf=new StringBuilder();buf.append(""Vplex: ""+vplexURI+"" created virtual volume(s): "");List<VPlexVirtualVolumeInfo> virtualVolumeInfos=new ArrayList<VPlexVirtualVolumeInfo>();Map<String,Volume> vplexVolumeNameMap=new HashMap<String,Volume>();List<VPlexClusterInfo> clusterInfoList=null;for(Volume vplexVolume : volumeMap.keySet()){URI vplexVolumeId=vplexVolume.getId();_log.info(String.format(""Creating virtual volume: %s (%s)"",vplexVolume.getLabel(),vplexVolumeId));URI vplexVolumeVarrayURI=vplexVolume.getVirtualArray();String clusterId=ConnectivityUtil.getVplexClusterForVarray(vplexVolumeVarrayURI,vplexVolume.getStorageController(),_dbClient);List<VolumeInfo> vinfos=new ArrayList<VolumeInfo>();for(Volume storageVolume : volumeMap.get(vplexVolume)){StorageSystem storage=storageMap.get(storageVolume.getStorageController());List<String> itls=VPlexControllerUtils.getVolumeITLs(storageVolume);VolumeInfo info=new VolumeInfo(storage.getNativeGuid(),storage.getSystemType(),storageVolume.getWWN().toUpperCase().replaceAll("":"",""""),storageVolume.getNativeId(),storageVolume.getThinlyProvisioned().booleanValue(),itls);if(storageVolume.getVirtualArray().equals(vplexVolumeVarrayURI)){vinfos.add(0,info);}else {vinfos.add(info);}}rollbackData.add(vinfos);_workflowService.storeStepData(stepId,rollbackData);if(null==clusterInfoList){boolean isItlFetch=VPlexApiUtils.isITLBasedSearch(vinfos.get(0));clusterInfoList=client.getClusterInfo(false,isItlFetch);}boolean isDistributed=(vinfos.size()>=2);VPlexVirtualVolumeInfo vvInfo=client.createVirtualVolume(vinfos,isDistributed,false,false,clusterId,clusterInfoList);if(vvInfo==null){VPlexApiException ex=VPlexApiException.exceptions.cantFindRequestedVolume(vplexVolume.getLabel());throw ex;}vplexVolumeNameMap.put(vvInfo.getName(),vplexVolume);virtualVolumeInfos.add(vvInfo);}Map<String,VPlexVirtualVolumeInfo> foundVirtualVolumes=client.findVirtualVolumes(clusterInfoList,virtualVolumeInfos);if(!foundVirtualVolumes.isEmpty()){for(Entry<String,Volume> entry : vplexVolumeNameMap.entrySet()){Volume vplexVolume=entry.getValue();VPlexVirtualVolumeInfo vvInfo=foundVirtualVolumes.get(entry.getKey());buf.append(vvInfo.getName()+"" "");_log.info(String.format(""Created virtual volume: %s path: %s"",vvInfo.getName(),vvInfo.getPath()));vplexVolume.setNativeId(vvInfo.getPath());vplexVolume.setNativeGuid(vvInfo.getPath());vplexVolume.setDeviceLabel(vvInfo.getName());vplexVolume.setAllocatedCapacity(vvInfo.getCapacityBytes());vplexVolume.setProvisionedCapacity(vvInfo.getCapacityBytes());_dbClient.persistObject(vplexVolume);createdVplexVolumeURIs.add(vplexVolume.getId());recordBourneVolumeEvent(vplexVolume.getId(),OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(true),Operation.Status.ready,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());}}if(foundVirtualVolumes.size()!=vplexVolumeNameMap.size()){VPlexApiException ex=VPlexApiException.exceptions.cantFindAllRequestedVolume();throw ex;}long elapsed=System.currentTimeMillis()-startTime;_log.info(String.format(""TIMER: %s virtual volume(s) %s create took %f seconds"",volumeMap.size(),volumeLabels.toString(),(double)elapsed/(double)1000));WorkflowStepCompleter.stepSucceded(stepId);}catch(VPlexApiException vae){_log.error(""Exception creating Vplex Virtual Volume: ""+vae.getMessage(),vae);for(URI vplexVolumeURI : vplexVolumeURIs){if(!createdVplexVolumeURIs.contains(vplexVolumeURI)){recordBourneVolumeEvent(vplexVolumeURI,OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());}}WorkflowStepCompleter.stepFailed(stepId,vae);}catch(Exception ex){_log.error(""Exception creating Vplex Virtual Volume: ""+ex.getMessage(),ex);for(URI vplexVolumeURI : vplexVolumeURIs){if(!createdVplexVolumeURIs.contains(vplexVolumeURI)){recordBourneVolumeEvent(vplexVolumeURI,OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());}}String opName=ResourceOperationTypeEnum.CREATE_VIRTUAL_VOLUME.getName();ServiceError serviceError=VPlexApiException.errors.createVirtualVolumesFailed(opName,ex);WorkflowStepCompleter.stepFailed(stepId,serviceError);}}"
622	"@Override public void onClick(View view){operType=OPER_RUNSTOP;new Thread(new ClientThread()).start();}"
623	"private void speakViaSDK(String textualMessage){String modifiedTextualMessage=textualMessage.replace(""\r\n"","""").replace("" "",""+"").replace(""++"",""+"");String url=""https://speech.kore.ai/tts/cgi-bin/speech?voice=salli&lang=en_us&text=""+modifiedTextualMessage;if(mediaPlayer==null){mediaPlayer=new MediaPlayer();mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);mediaPlayer.setOnPreparedListener(mediaPlayerOnPreparedListener);}try{stopTextToSpeechSDK();mediaPlayer.reset();mediaPlayer.setDataSource(url);mediaPlayer.prepareAsync();mediaPlayer.start();}catch(IOException e){e.printStackTrace();}}"
624	"void prioritizeJob(Path manifestPath) throws AutoIngestManagerException{if(state!=State.RUNNING){return ;}int maxPriority=0;AutoIngestJob prioritizedJob=null;synchronized(jobsLock){for(AutoIngestJob job : pendingJobs){if(job.getPriority()>maxPriority){maxPriority=job.getPriority();}if(job.getManifest().getFilePath().equals(manifestPath)){prioritizedJob=job;}}if(null!=prioritizedJob){++maxPriority;try{this.updateCoordinationServiceNode(prioritizedJob);}catch(CoordinationServiceException|InterruptedException ex){throw new AutoIngestManagerException(""Error updating job priority"",ex);}prioritizedJob.setPriority(maxPriority);}Collections.sort(pendingJobs,new AutoIngestJob.PriorityComparator());}if(null!=prioritizedJob){ final String caseName=prioritizedJob.getManifest().getCaseName();new Thread(() -> {  eventPublisher.publishRemotely(new AutoIngestCasePrioritizedEvent(LOCAL_HOST_NAME,caseName));}).start();}}"
625	"@Override public Boolean get(){ModuleSelectionInfo info=moduleList.getSelection();return info!=null&&info.isPresent()&&(info.isSelected()||info.isValidToSelect());}"
626	"public void keyPressed(KeyEvent e){int key=e.getKeyCode();switch (key){case KeyEvent.VK_LEFT :if(head.dir!=Direction.R){head.dir=Direction.L;}break;case KeyEvent.VK_UP :if(head.dir!=Direction.D){head.dir=Direction.U;}break;case KeyEvent.VK_RIGHT :if(head.dir!=Direction.L){head.dir=Direction.R;}break;case KeyEvent.VK_DOWN :if(head.dir!=Direction.U){head.dir=Direction.D;}break;}}"
627	"public boolean interact(Level level,int xt,int yt,Player player,Item item,int attackDir){if(item instanceof ToolItem){ToolItem tool=(ToolItem)item;if(tool.type==ToolType.Pickaxe){if(player.payStamina(4-tool.level)){level.setTile(xt,yt,Tiles.get(""hole""));Sound.monsterHurt.play();return true;}}}return false;}"
628	"@Override public int compare(Inter i1,Inter i2){return Integer.compare(i1.getCenter().x,i2.getCenter().x);}"
629	"private static void OtherAlert(Context context,String type,String message,int notificatioId,boolean addDeleteIntent,long reraiseSec){SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);String otherAlertsSound=prefs.getString(type+""_sound"",prefs.getString(""other_alerts_sound"",""content://settings/system/notification_sound""));Boolean otherAlertsOverrideSilent=prefs.getBoolean(""other_alerts_override_silent"",false);Log.d(TAG,""OtherAlert called ""+type+"" ""+message+"" reraiseSec = ""+reraiseSec);UserNotification userNotification=UserNotification.GetNotificationByType(type);if((userNotification==null)||userNotification.timestamp<=new Date().getTime()){if(userNotification!=null){try{userNotification.delete();}catch(NullPointerException e){}Log.d(TAG,""Delete"");}UserNotification.create(message,type,new Date().getTime()+reraiseSec*1000);boolean localOnly=false;if(notificatioId==persistentHighAlertNotificationId){localOnly=(Home.get_forced_wear()&&Home.getPreferencesBooleanDefaultFalse(""bg_notifications_watch"")&&Home.getPreferencesBooleanDefaultFalse(""persistent_high_alert_enabled_watch""));}Log.d(TAG,""OtherAlert forced_wear localOnly=""+localOnly);Intent intent=new Intent(context,Home.class);NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_launcher).setContentTitle(message).setContentText(message).setLocalOnly(localOnly).setContentIntent(PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT));if(addDeleteIntent){Intent deleteIntent=new Intent(context,SnoozeOnNotificationDismissService.class);deleteIntent.putExtra(""alertType"",type);mBuilder.setDeleteIntent(PendingIntent.getService(context,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT));}mBuilder.setVibrate(vibratePattern);mBuilder.setLights(0xff00ff00,300,1000);if(AlertPlayer.notSilencedDueToCall()){if(otherAlertsOverrideSilent){mBuilder.setSound(Uri.parse(otherAlertsSound),AudioAttributes.USAGE_ALARM);}else {mBuilder.setSound(Uri.parse(otherAlertsSound));}}NotificationManager mNotifyMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);Log.ueh(""Other Alert"",message);mNotifyMgr.notify(notificatioId,mBuilder.build());}}"
630	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){if(!tagSpinner.isFocusable()){tagSpinner.setFocusable(true);Log.d(""onqbook"",""????"");}else {if(position==0){if(MainActivity.viewFlag==2){MyApplication.bundle.putString(""answerStr"",ifNullReplace(String.valueOf(answerInput.getText())));MyApplication.bundle.putString(""questionStr"",ifNullReplace(String.valueOf(et_question.getText())));MainActivity.viewFlag=3;Log.d(""onqbook"",""2 -> 3"");} final CustomizedDialog_questionbook dialog=new CustomizedDialog_questionbook();dialog.show(getFragmentManager(),""tagInputDialog"");Log.d(""onqbook"",""???????"");}else {MyApplication.bundle.putString(""str_tag_name"",tagArray[position-1]);}tagSpinnerAdapter.notifyDataSetChanged();}}"
631	"public ContextualCall(Context context,String capability,String methodName,Class<T> returnType,Parameter... parameters){this.context=Objects.requireNonNull(context);this.capability=Objects.requireNonNull(capability);this.methodName=Objects.requireNonNull(methodName);this.returnType=Objects.requireNonNull(returnType);this.parameters=Objects.requireNonNull(parameters);}"
632	"public void onClick(View v){if(mHotItemType==DrawingPath.DRAWING_PATH_POINT||mHotItemType==DrawingPath.DRAWING_PATH_LINE||mHotItemType==DrawingPath.DRAWING_PATH_AREA){if(mDrawingSurface.moveHotItemToNearestPoint()){modified();}else {Toast.makeText(context,R.string.failed_snap_to_point,Toast.LENGTH_SHORT).show();}}dismissPopup();}"
633	"protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_login);Button login=(Button)findViewById(R.id.login);Button register=(Button)findViewById(R.id.register);register.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Intent intent=new Intent(Login.this,Register.class);    startActivity(intent);  }});login.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Boolean error=false;    EditText username=(EditText)findViewById(R.id.name);    EditText password=(EditText)findViewById(R.id.pass);    Model model=Model.getInstance();    User lookup=model.getUserByUsername(username.getText().toString());    if (lookup != null) {      if (lookup.getLockoutStatus()) {        error=true;        Toast.makeText(Login.this,""Bad Login: Account Locked"",Toast.LENGTH_SHORT).show();      }    }    if (username.getText().toString().equals(lookup.getUsername()) && password.getText().toString().equals(lookup.getPassword()) & !error) {      model.setCurrentUser(model.getUserByUsername(username.getText().toString()));      Intent intent=new Intent(Login.this,Application.class);      startActivity(intent);    } else     if (username.getText().toString().equals(""user"") && password.getText().toString().equals(""pass"")) {      User defaultUser=(new User(""user"",""Default"",""User"",""pass"",""defaultUser@gatech.edu"",""000000000"",""Admin""));      model.addUser(defaultUser);      model.setCurrentUser(defaultUser);      Intent intent=new Intent(Login.this,Application.class);      startActivity(intent);    } else {      Toast.makeText(Login.this,""Bad Login: Wrong Credentials"",Toast.LENGTH_SHORT).show();    }  }});}"
634	"@Override public View getView(int position,View convertView,ViewGroup parent){if(convertView==null){LayoutInflater inflater=LayoutInflater.from(getContext());convertView=inflater.inflate(R.layout.new_single_file_view,parent,false);}else {NewViewUtils.returnToDefault(convertView,Color.WHITE,R.id.new_file_img);} final RestfulFile file=checkInFiles.get(position);TextView fileNumberView=(TextView)convertView.findViewById(R.id.new_file_FileNumber);fileNumberView.setText(file.getFileNumber());TextView patientNumberView=(TextView)convertView.findViewById(R.id.new_file_PatientNumber);patientNumberView.setText(file.getPatientNumber());TextView patientNameView=(TextView)convertView.findViewById(R.id.new_file_PatientName);patientNameView.setText(file.getPatientName());TextView batchNumberView=(TextView)convertView.findViewById(R.id.new_file_BatchNumber);batchNumberView.setText(file.getBatchRequestNumber());TextView docNameView=(TextView)convertView.findViewById(R.id.new_file_RequestingDocName);docNameView.setText(file.getClinicDocName());TextView clinicNameView=(TextView)convertView.findViewById(R.id.new_file_RequestingClinic);clinicNameView.setText(file.getClinicName());TextView clinicCodeView=(TextView)convertView.findViewById(R.id.new_file_RequestingClinicCode);clinicCodeView.setText(file.getClinicCode());TextView cabinetIdView=(TextView)convertView.findViewById(R.id.new_file_cabinetId);cabinetIdView.setText(file.getCabinetId());TextView shelfIdView=(TextView)convertView.findViewById(R.id.new_file_ShelfId);shelfIdView.setText(file.getShelfId());TextView columnIdView=(TextView)convertView.findViewById(R.id.new_file_FileColumnId);columnIdView.setText(file.getColumnId());if(file.getSelected()>0){ImageView fileImgView=(ImageView)convertView.findViewById(R.id.new_file_img);if(fileImgView!=null){fileImgView.setImageResource(R.drawable.complete);}convertView.setBackgroundColor(Color.CYAN);}else {ImageView fileImgView=(ImageView)convertView.findViewById(R.id.new_file_img);if(fileImgView!=null){if(file.isInpatient()){fileImgView.setImageDrawable(getContext().getResources().getDrawable(R.drawable.inpatient));}else {fileImgView.setImageResource(R.drawable.patient_file);}}convertView.setBackgroundColor(Color.WHITE);}ImageView imgView=(ImageView)convertView.findViewById(R.id.new_file_status_img);if(file.getState()!=null&&file.getState().equalsIgnoreCase(FileModelStates.MISSING.toString())){imgView.setImageDrawable(getContext().getResources().getDrawable(R.drawable.missing));}else {if(file.getState()!=null&&file.getState().equalsIgnoreCase(FileModelStates.NEW.toString())){imgView.setImageDrawable(getContext().getResources().getDrawable(R.drawable.newrequests));}else {if(file.getReadyFile()!=0&&file.getTemporaryCabinetId()!=null&&file.getTemporaryCabinetId().length()>=0){imgView.setImageDrawable(getContext().getResources().getDrawable(R.drawable.complete));}else {imgView.setImageDrawable(getContext().getResources().getDrawable(R.drawable.preview));}}}convertView.setOnLongClickListener(new View.OnLongClickListener(){  @Override public boolean onLongClick(  View view){    final AlertDialog choiceDlg=new AlertDialog.Builder(getContext()).setTitle(R.string.SINGLE_CHOICE_DLG_TITLE).setItems(new String[]{""Mark File as Missing...""},new DialogInterface.OnClickListener(){      @Override public void onClick(      DialogInterface dialogInterface,      int i){        if (i == 0) {          try {            DBStorageUtils storageUtils=new DBStorageUtils(getContext());            storageUtils.operateOnFile(file,FileModelStates.MISSING.toString(),RestfulFile.READY_FILE);            SoundUtils.playSound(getContext());            KeeperCheckInAdapter.this.notifyDataSetChanged();          } catch (          Exception s) {            Log.w(""FilesArrayAdapter"",s.getMessage());          } finally {            dialogInterface.dismiss();          }        }      }    }).create();    choiceDlg.show();    return true;  }});return convertView;}"
635	"@Override protected void setData(View view,int position){TextView shortName=(TextView)view.findViewById(R.id.short_name); final ObaRoute route=mArray.get(position);shortName.setText(UIHelp.getRouteDisplayName(route));view.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View view){    mRouteId=route.getId();    mStopsController.setCurrentRequest(StopsController.requestFromView(mMapView,mRouteId),true);  }});}"
636	"public boolean prevent(Battle b,ActivePokemon caster,ActivePokemon victim,Stat stat){return stat==Stat.ACCURACY;}"
637	"@Override protected boolean word(int base,int u3,long[] a3,long[] b3,long mask){return (a3[u3]&=b3[u3]|~mask)==0L;}"
638	"public int indexOf(){return 0;}"
639	"public void onComplete(JSONObject response,ShopGunError error){}"
640	"public void cancelTask(int taskId){if(taskId<=0){return ;}cancelTask(runners.get(taskId));}"
641	"private void searchItem(){String input=JOptionPane.showInputDialog(""Enter item ID number or a phrase"");if(input!=null){controller.searchItem(input.trim());}}"
642	"@Override public boolean apply(Object o){return true;}"
643	"public int getProbabilityType(){return MISSING;}"
644	"@Override public boolean check(TokenStackElement left,TokenStackElement right){return !EQ.check(left,right);}"
645	"protected boolean conditionIsMet(Result overallResult){return true;}"
646	"@Override public void copyLift(int position){makeLiftCopy(current_workout_lifts.get(position));}"
647	"@Override boolean hasValueConstraints(){return true;}"
648	"public TurnAction isMovementVerified(Area targetArea,Card targetCard,Card flyCard,Area sourceArea,Card targetStageCard,Enums.Player player){boolean movementVerified=false;TurnAction turnAction=TurnAction.none;if(player==activePlayer&&getPlayerName(flyCard.getId())==player){if(sourceArea!=targetArea){if(sourceArea==Area.bench||sourceArea==Area.hand){if(targetArea==Area.active||targetArea==Area.bench){if(targetCard!=null){switch (targetCard.getCategory()){case pokemon :switch (flyCard.getCategory()){case pokemon :if(((PokemonCard)targetCard).getLevel().equals(""basic"")){if(targetStageCard==null){if(!((PokemonCard)flyCard).getLevel().equals(""basic"")){movementVerified=true;if(targetArea==Area.active){turnAction=TurnAction.attachStage1CardToActive;}else {if(targetArea==Area.bench){turnAction=TurnAction.attachStage1CardToBench;}}}}}break;case trainer :break;case energy :movementVerified=true;if(targetArea==Area.active){turnAction=TurnAction.attachEnergyOnActive;}else {if(targetArea==Area.bench){turnAction=TurnAction.attachEnergyOnBench;}}break;}break;case trainer :break;case energy :break;}}else {switch (flyCard.getCategory()){case pokemon :movementVerified=true;if(targetArea==Area.active){turnAction=TurnAction.pokemonToActive;}else {if(targetArea==Area.bench){turnAction=TurnAction.pokemonToBench;}}break;case trainer :break;case energy :break;}}}}}}return turnAction;}"
649	"public void draw(Graphics g){super.draw(g);map.draw(g);turtleBoss.draw(g);for(int i=0;i<missles.size();i++){missles.get(i).draw(g);}chest.draw(g);}"
650	"@Override public boolean canWrite(){return true;}"
651	"@Override public void run(){if(serviceComplete){startService(mServiceIntent);}timerHandler.postDelayed(this,SERVICE_DELAY);}"
652	"int getConstantValue(ConstPool cp,CtClass type){return 0;}"
653	"@Override public int getInt(int index){return ((Number)get(index)).intValue();}"
654	"@Override public boolean isEnabled(){return debugTarget!=null&&(debugTarget instanceof IStep&&((IStep)debugTarget).canStepOver());}"
655	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
656	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
657	"private boolean build(RootDoc rootDoc){this.readOptions(rootDoc.options());ClassDoc[] classes=rootDoc.classes();for(int i=0;i<classes.length;++i){ClassDoc classDoc=classes[i];PSItemDoc itemDoc=PSItemDoc.build(classDoc);if(itemDoc!=null){this.psItems.add(itemDoc);}PSOperatorWrapperDoc operatorWrapperDoc=PSOperatorWrapperDoc.build(classDoc);if(operatorWrapperDoc!=null){this.psOperatorWrappers.add(operatorWrapperDoc);}}this.dump();return true;}"
658	"@Override public long length(){return 0;}"
659	"@Override public void onClick(View view){status=0;updateTapButtons();}"
660	"@Override public CanUseResp canUse(CommandSender sender){if(!(sender instanceof Player)){return new CanUseResp(getLocale(sender).get(""general.errors.use-in-game""));}if(!VaultHelper.hasPerm(player,Settings.PERMPREFIX+""island.create"")){return new CanUseResp(getLocale(sender).get(""general.errors.no-permission""));}return new CanUseResp(true);}"
661	"private void setProfileContent(){Log.d(""******"",""set profile content: ""+mUser.getUserGender());editUsername.setText(mUser.getUserName());editEmail.setText(mUser.getUserEmail());editPhone.setText(mUser.getUserPhoNum());((RadioButton)editGender.getChildAt(mUser.getUserGender())).setChecked(true);editBio.setText(mUser.getUserBio());}"
662	"public void a(int i){this.b=i;}"
663	"@Override public void onResult(DJIGroundStationFlyingInfo djiGroundStationFlyingInfo){Log.d(""GROUND STATION"",djiGroundStationFlyingInfo.flightMode.name());if(taskDoneCallback!=null&&djiGroundStationFlyingInfo.flightMode==DJIGroundStationTypeDef.GroundStationFlightMode.GS_Mode_Pause_1){GroundStation.taskDoneCallback.run();taskDoneCallback=null;}DroneState.flightMode=djiGroundStationFlyingInfo.flightMode;}"
664	"public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
665	"@Override public boolean isValidBlock(IBlockState block){return true;}"
666	"@Override public int compare(AppInfo o1,AppInfo o2){return o1.time>o2.time?-1:1;}"
667	"public void addToFV(View v){userFV=!userFV;if(userFV){changeButtonColours(buttonFV,""#50BF0B"");}else {changeButtonColours(buttonFV,""#DB2F09"");}}"
668	"@Override protected boolean isFinished(){}"
669	"@Override public void loadUsageRecipes(ItemStack ingredient){ final Iterator it=CraftingManager.getInstance().getRecipeList().iterator();while(it.hasNext()){ final IRecipe irecipe=(IRecipe)it.next();Shaped4x4RecipeHandler.CachedShapedRecipe recipe=null;if(irecipe instanceof RecipeShapedOreLarge){recipe=new CachedShapedRecipe((RecipeShapedOreLarge)irecipe);}if(recipe!=null&&recipe.contains(recipe.ingredients,ingredient.getItem())){recipe.computeVisuals();if(recipe.contains(recipe.ingredients,ingredient)){recipe.setIngredientPermutation(recipe.ingredients,ingredient);this.arecipes.add(recipe);}}}}"
670	"@Override public Type infer() throws Exception{return TypeConcrete.TypeInt;}"
671	"@Override public void onSuccess(int apiMethodCode){new GetActions().execute(params);}"
672	"@Override public void onClick(View view){optionalMsg(sxReplies[0]);sendButton(sCat,sxCaptions[0],sxPoints[0]);}"
673	"public ScheduleReport(IProject project,IUserSession session,int iteration){this.project=project;this.session=session;this.iteration=iteration;}"
674	"@Override public void onClick(View v){getCustomActionBar().refreshing(true);}"
675	"public int getId(){return collectionId;}"
676	"@Override protected void onPostExecute(Boolean result){if(dataMessage.getMessageId()==null){builderNoMessage=new AlertDialog.Builder(getActivity());builderNoMessage.setTitle(""Message not found"");builderNoMessage.setMessage(""Unfortunately, this message was deleted by his author, so it doesn't exist anymore. It will be removed from your favorite messages."").setCancelable(false);builderNoMessage.setPositiveButton(""Ok"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    db.delete(idMessage);    getActivity().finish();  }});alertNoMessage=builderNoMessage.create();alertNoMessage.show();}else {swipeContainer.setRefreshing(false);LoadCardItems(dataMessage);if(tabletSize){drawMarkerMessage(myLocation);}}}"
677	"@Override public void onClick(View v){Log.d(""My"",suitableInvestData.size()+""size"");DatabaseReference reference=FirebaseDatabase.getInstance().getReference(""allRequests"");for(int i=0;i<suitableInvestData.size();i++){String bigId=reference.push().getKey();AllRequestData data=new AllRequestData(bigId,suitableInvestData.get(i).id,FirebaseAuth.getInstance().getCurrentUser().getUid(),0,borrowerAmount.getText().toString());reference.child(bigId).setValue(data.toMapAllRequestData());}suitableInvestData.clear();Toast.makeText(getActivity(),""???? ?????? ??????? ??????????"",Toast.LENGTH_SHORT).show();borrowerAmount.setText("""");borrowerTime.setText("""");getBorrow.setVisibility(View.VISIBLE);suitableVariantLayout.setVisibility(View.GONE);borrowButtonsLayout.setVisibility(View.GONE);}"
678	"public User(String id,String f_name,String l_name,String address,int failed_attempts,boolean isAccountLocked,SIGN_ON_STATUS signOnStatus){super(id,f_name,l_name,address);this.failed_attempts=failed_attempts;this.isAccountLocked=isAccountLocked;this.signOnStatus=signOnStatus;}"
679	"public XListHelper exitMultiSelectMode(){adapter.setEnabledMultiSelect(false);return this;}"
680	"@Override public void onCreate(){super.onCreate();Log.d(TAG,""Service was created!"");connection=XMPPConfiguration.connectionInstance(serviceController=new ConnectionServiceController(this));serviceController.startLogThread();}"
681	"@Override public void onClick(View v){gr2.clearCheck();c=c1+c3+c4+c5;c2=0;tvamount.setText(String.valueOf(c));}"
682	"public static TimetableEvent createTimetableEvent(NodeList nc,HashMap<String,VersionControlEntity> assetList) throws Exception{TimetableEvent newTTE;HashMap<String,XMLcontroller.NodeReturn> tteValues=xmlTools.getSchemaValues(nc,HubFile.SCHEMA_TIMETABLE_EVENT);String linkedRoom=tteValues.get(""room"").getString();String linkedLecturer=tteValues.get(""lecturer"").getString();String linkedTTET=tteValues.get(""timetableEventType"").getString();Room tRoom=DataController.inList(assetList,linkedRoom);Person tLecturer=DataController.inList(assetList,linkedLecturer);TimeTableEventType tTTET=DataController.inList(assetList,linkedTTET);newTTE=new TimetableEvent(tteValues.get(""date"").getString(),tRoom,tLecturer,tTTET,tteValues.get(""duration"").getInt());DataController.addVCEproperties(newTTE,tteValues);return newTTE;}"
683	"public static void assignNamesAndRaces(String name,HorseAndRaceField[] horseNamesAndRaces,GPField[] fieldGP){RelativeHorse[] population=load(name);for(int i=0;i<population.length;i++){if(population[i]!=null){horseNamesAndRaces[i].setName(population[i].getName());horseNamesAndRaces[i].setCaretPosition(0);horseNamesAndRaces[i].setSelectedItem(population[i].getRace());if(fieldGP!=null&&i<fieldGP.length){fieldGP[i].setGP(population[i].getCompletePotential());}}else {horseNamesAndRaces[i].setName(""nicht in DB"");horseNamesAndRaces[i].setSelectedItem("" Unbekannt"");if(fieldGP!=null&&i<fieldGP.length){fieldGP[i].setGP(-1);}}}}"
684	"public GUIGame(){super();Player player=new Player(Game.SCREEN_WIDTH/2,Game.SCREEN_HEIGHT*7/8,5);player.setMaxX(Game.SCREEN_WIDTH);player.setMaxY(Game.SCREEN_HEIGHT);player.setStep(5);super.setPlayer(player);}"
685	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
686	"public RequestTraceServlet(Configuration configuration,long requestTimeout){RequestMonitor.addRequestTraceReporter(this);this.requestTimeout=requestTimeout;this.configuration=configuration;this.webPlugin=configuration.getConfig(WebPlugin.class);oldRequestTracesRemoverPool.schedule(new OldRequestTraceRemover(),MAX_REQUEST_TRACE_BUFFERING_TIME,TimeUnit.MILLISECONDS);}"
687	"@Override public void run(){textChoice=0;}"
688	"public int current(){return (int)cursor.toEpochSecond(ZoneOffset.UTC);}"
689	"public ComponentsFactory(){loadFonts();this.scale=1.0;}"
690	"public static void main(String... args){Logs.log(Beam.class,""start Beam.core"");initApplication();setJVMShutdownHook();Logs.log(Beam.class,""Beam.core started successfully"");}"
691	"@Override TemplateModel calculateResult(TemplateSequenceModel tsm) throws TemplateModelException{return new BIMethod(tsm);}"
692	"@Override public void run(){isSmallWindowVideoLayoutClickEnable=true;}"
693	"@Override public void onDataChange(DataSnapshot dataSnapshot){initializePhotoList=true;addPhotosToArrayList(dataSnapshot);}"
694	"@Override public void run(){if(Config.enableSSP==1){fetchSplashAD(this,mAdContainer,mSkipView,Config.SSP_APPID,Config.SSP_POS_FULLSCREEN,mAdListener,5000);}else {mSkipView.setVisibility(View.INVISIBLE);timeSatisfied=false;startCountdown();}}"
695	"@Override public void onClick(View v){redScore=redScore+2;}"
696	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();setFocusDeferred(true);}"
697	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
698	"@Override public void initialize(){Configuration configuration=getConfig();if(configuration.get(CONFIG_DMX_ID)!=null){channels.clear();DmxBridgeHandler bridgeHandler=(DmxBridgeHandler)getBridge().getHandler();List<BaseChannel> configChannels=BaseChannel.fromString((String)configuration.get(CONFIG_DMX_ID),bridgeHandler.getUniverseId());logger.trace(""found {} channels in {}"",configChannels.size(),this.thing.getUID());for(BaseChannel channel : configChannels){channels.add(bridgeHandler.getDmxChannel(channel,this.thing));}if(configuration.get(CONFIG_CHASER_STEPS)!=null){if(parseChaserConfig((String)configuration.get(CONFIG_CHASER_STEPS))){updateStatus(ThingStatus.ONLINE);}else {updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""Chase configuration malformed in ""+this.thing.getUID());}}else {updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""Chase configuration missing in ""+this.thing.getUID());}if(configuration.get(CONFIG_CHASER_RESUME_AFTER)!=null){resumeAfter=(Boolean)configuration.get(CONFIG_CHASER_RESUME_AFTER);logger.trace(""set resumeAfter to {} in thing {}"",resumeAfter,this.thing.getUID());}}else {updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""DMX channel configuration missing in ""+this.thing.getUID());}}"
699	"@GET @Path(""timesheets/{timesheetID}/entries"") public Response getTimesheetEntries(HttpServletRequest request,int timesheetID){Timesheet sheet;UserProfile user;try{user=permissionService.checkIfUserExists(request);sheet=sheetService.getTimesheetByID(timesheetID);}catch(NotAuthorizedException e){return Response.status(Response.Status.FORBIDDEN).entity(e.getMessage()).build();}if(sheet==null||!permissionService.userCanViewTimesheet(user,sheet)){return Response.status(Response.Status.UNAUTHORIZED).build();}TimesheetEntry[] entries=entryService.getEntriesBySheet(sheet);List<JsonTimesheetEntry> jsonEntries=new ArrayList<JsonTimesheetEntry>(entries.length);for(TimesheetEntry entry : entries){jsonEntries.add(new JsonTimesheetEntry(entry.getID(),entry.getBeginDate(),entry.getEndDate(),entry.getPauseMinutes(),entry.getDescription(),entry.getTeam().getID(),entry.getCategory().getID()));}return Response.ok(jsonEntries).build();}"
700	"@ApiMethod(name=""addFile"") public Groups addFile(String groupName,FilesEntity file){Groups group=OfyService.ofy().load().type(Groups.class).id(groupName).now();group.addFile(file);OfyService.ofy().save().entity(group).now();return group;}"
701	"private ArrayList<NodeEntry> realInsert(NodeEntry ne,Node node,boolean reCalcMBR){if(node.isLeaf()){boolean inserted=node.insert(ne);ArrayList<NodeEntry> newEntries;if(!inserted){newEntries=nodeSplitter.split(ne,node);if(this.root.isLeaf()){newRoot(newEntries);}}else {newEntries=new ArrayList<NodeEntry>(1);if(reCalcMBR){newEntries.add(newUpdatedNodeEntry(node));}}return newEntries;}ArrayList<NodeEntry> nodeData=node.getData();double minAreaGrowth=Double.MAX_VALUE;ArrayList<NodeEntry> candidates=new ArrayList<NodeEntry>();double areaGrowth;for(NodeEntry entry : nodeData){areaGrowth=entry.calculateEnlargement(ne);if(minAreaGrowth>areaGrowth){candidates.clear();candidates.add(entry);}else {if(minAreaGrowth==areaGrowth){candidates.add(entry);}}}NodeEntry minEnlargement=getMinEnlargement(candidates);Node child=(Node)Node.readFromDisk(minEnlargement.getChild());ArrayList<NodeEntry> newEntries=realInsert(ne,child,!(minAreaGrowth==0));if(!(newEntries.isEmpty())){node.replace(minEnlargement,newEntries.get(0));ArrayList<NodeEntry> possibleNewEntries;try{boolean inserted=node.insert(newEntries.get(1));if(!inserted){possibleNewEntries=nodeSplitter.split(newEntries.get(1),node);Node child0=Node.readFromDisk(possibleNewEntries.get(0).getChild());Node child1=Node.readFromDisk(possibleNewEntries.get(1).getChild());child0.setIsLeaf(false);child1.setIsLeaf(false);child1.writeToDisk();child0.writeToDisk();if(node.equals(this.root)){newRoot(possibleNewEntries);}return possibleNewEntries;}}catch(IndexOutOfBoundsException exception){}finally{newEntries.clear();if(reCalcMBR){newEntries.add(newUpdatedNodeEntry(node));}return newEntries;}}else {return new ArrayList<NodeEntry>(0);}}"
702	"@Override public boolean vote(ParaObject votable,String userid,VoteValue upDown){if(StringUtils.isBlank(userid)||votable==null||votable.getId()==null||upDown==null){return false;}if(userid.equals(votable.getCreatorid())||userid.equals(votable.getId())){return false;}Vote v=new Vote(userid,votable.getId(),upDown);Vote saved=getDao().read(votable.getAppid(),v.getId());boolean done=false;if(saved!=null){boolean isUpvote=upDown.equals(VoteValue.UP);boolean wasUpvote=saved.isUpvote();boolean voteHasChanged=isUpvote^wasUpvote;if(saved.isExpired()){done=getDao().create(votable.getAppid(),v)!=null;}else {if(saved.isAmendable()&&voteHasChanged){getDao().delete(votable.getAppid(),saved);done=true;}}}else {done=getDao().create(votable.getAppid(),v)!=null;}if(done){synchronized(votable){votable.setVotes(votable.getVotes()+upDown.getValue());}}return done;}"
703	"public List<BlockTag> mergeList(List<BlockTag> tagList){ final HashMap<BlockTag,BlockTag> tagSet=new HashMap<>();for(BlockTag newTag : tagList){newTag=adaptBlockTag(newTag);if(newTag!=null){ final BlockTag oldTag=tagSet.get(newTag);if(oldTag==null){tagSet.put(newTag,newTag);}else { final int comp=oldTag.getPriority()-newTag.getPriority();if(comp<0){tagSet.put(newTag,newTag);}else {if(comp==0){switch (getRuleForCommentPart(newTag)){case RULE_MERGE :if(!oldTag.getDesc().isEmpty()){oldTag.setDesc(newTag.getDesc()+(""</br>""+newTag.getDesc()));}else {oldTag.setDesc(newTag.getDesc());}break;case RULE_OVERRIDE :tagSet.put(newTag,newTag);break;}}}}}}return new ArrayList<BlockTag>(tagSet.values());}"
704	"@SuppressWarnings({""rawtypes"",""unchecked""}) private void mergeResponsesNamedList(NamedList<Object> mainResponse,NamedList<Object> shardResponse) throws IOException{Iterator<Entry<String,Object>> it=shardResponse.iterator();while(it.hasNext()){Entry<String,Object> entry=it.next();String name=entry.getKey();Object shardValue=entry.getValue();int originalId=mainResponse.indexOf(name,0);if(originalId<0){mainResponse.add(name,adjustablePartsCloned(shardValue));}else {Object original=mainResponse.getVal(originalId);if(original==null){original=adjustablePartsCloned(shardValue);}else {if(shardValue!=null&&original.getClass().equals(shardValue.getClass())){if(original instanceof ArrayList){ArrayList originalList=(ArrayList)original;ArrayList shardList=(ArrayList)shardValue;mergeResponsesArrayList(originalList,shardList);}else {if(original instanceof NamedList<?>){mergeResponsesNamedList((NamedList<Object>)original,(NamedList<Object>)shardValue);}else {if(original instanceof SortedSet<?>){mergeResponsesSortedSet((SortedSet<Object>)original,(SortedSet<Object>)shardValue);}else {if(original instanceof MtasSolrMtasResult){MtasSolrMtasResult originalComponentResult=(MtasSolrMtasResult)original;originalComponentResult.merge((MtasSolrMtasResult)shardValue);}else {if(original instanceof MtasSolrJoinResult){MtasSolrJoinResult originalComponentResult=(MtasSolrJoinResult)original;originalComponentResult.merge((MtasSolrJoinResult)shardValue);}else {if(original instanceof String){}else {if(original instanceof Integer){original=(Integer)original+((Integer)shardValue);}else {if(original instanceof Long){original=(Long)original+((Long)shardValue);}else {}}}}}}}}mainResponse.setVal(originalId,original);}else {}}}}}"
705	"public Set<AccountMeta> getAccountsByCollective(AccountLocation collective){Validate.notNull(collective);Set<AccountMeta> results=Sets.newHashSet();for(AccountMeta meta : accounts.toSet()){if(meta.getCollective()==collective){results.add(meta);}}return results;}"
706	"@Override public boolean isHosting(Environment env){return ofNullable(env.getProperty(""ELEPHANTSQL_URI"")).isPresent()||ofNullable(env.getProperty(""VCAP_SERVICES"")).filter(s -> s.contains(""elephantsql"")).isPresent();}"
707	"public Card getRandomCard(){Random rnd=ThreadLocalRandom.current();int index=rnd.nextInt(cardDeck.size());return cardDeck.remove(index);}"
708	"@Override public List<VolumeDescriptor> getDescriptorsForVolumesToBeDeleted(URI systemURI,List<URI> volumeURIs,String deletionType){List<VolumeDescriptor> volumeDescriptors=_rpHelper.getDescriptorsForVolumesToBeDeleted(systemURI,volumeURIs,deletionType,null);List<VolumeDescriptor> filteredDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type{VolumeDescriptor.Type.BLOCK_DATA,VolumeDescriptor.Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type{});for(VolumeDescriptor descriptor : filteredDescriptors){URI volumeURI=descriptor.getDeviceURI();Volume volume=_dbClient.queryObject(Volume.class,volumeURI);if(volume!=null&&!volume.getInactive()){if(VolumeDescriptor.Type.BLOCK_DATA==descriptor.getType()){addDescriptorsForMirrors(volumeDescriptors,volume);}else {if(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME==descriptor.getType()){vplexBlockServiceApiImpl.addDescriptorsForVplexMirrors(volumeDescriptors,volume);}}}}return volumeDescriptors;}"
709	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_income_calculator);}"
710	"@Override public boolean canGeneratePassively(){boolean rain=supertile.getWorldObj().getWorldChunkManager().getBiomeGenAt(supertile.xCoord,supertile.zCoord).getIntRainfall()>0&&(supertile.getWorldObj().isRaining()||supertile.getWorldObj().isThundering());return supertile.getWorldObj().isDaytime()&&!rain&&supertile.getWorldObj().canBlockSeeTheSky(supertile.xCoord,supertile.yCoord+1,supertile.zCoord);}"
711	"@Override public void draw(Batch batch,float parentAlpha){super.draw(batch,parentAlpha);Texture texture=textures.get(stance,defaultTexture);int x=(enemyType==EnemyEnum.HARPY&&stance==Stance.FELLATIO)?150:(enemyType==EnemyEnum.GOBLIN&&stance==Stance.FACE_SITTING||stance==Stance.SIXTY_NINE)?400:600;int y=(enemyType==EnemyEnum.HARPY&&stance!=Stance.FELLATIO)?105:(enemyType==EnemyEnum.GOBLIN&&stance==Stance.FACE_SITTING||stance==Stance.SIXTY_NINE)?0:20;int width=(enemyType==EnemyEnum.GOBLIN&&stance==Stance.FACE_SITTING||stance==Stance.SIXTY_NINE)?(int)(texture.getWidth()/(texture.getHeight()/1080.0)):(int)(texture.getWidth()/(texture.getHeight()/975.0));int height=(enemyType==EnemyEnum.GOBLIN&&stance==Stance.FACE_SITTING||stance==Stance.SIXTY_NINE)?1080:975;if(animation==null||(enemyType==EnemyEnum.HARPY&&stance==Stance.FELLATIO)||(enemyType==EnemyEnum.BRIGAND&&!(stance==Stance.DOGGY||stance==Stance.STANDING))){batch.draw(texture,x,y,width,height);if(animation!=null){animation.addAction(Actions.hide());}}else {animation.addAction(Actions.show());animation.draw(batch,parentAlpha);}}"
712	"@Override public void onClick(View v){dialog.cancel();}"
713	"public static String[] getMethodParamNames(Method m) throws IOException{ final String[] paramNames=new String[m.getParameterTypes().length]; final String n=m.getDeclaringClass().getName();ClassReader cr=null;try{cr=new ClassReader(n);}catch(IOException e){return null;}cr.accept(new ClassVisitor(Opcodes.ASM5){  @Override public MethodVisitor visitMethod(  final int access,  final String name,  final String desc,  final String signature,  final String[] exceptions){    final Type[] args=Type.getArgumentTypes(desc);    if (!name.equals(m.getName()) || !sameType(args,m.getParameterTypes())) {      return super.visitMethod(access,name,desc,signature,exceptions);    }    MethodVisitor v=super.visitMethod(access,name,desc,signature,exceptions);    return new MethodVisitor(Opcodes.ASM5,v){      @Override public void visitLocalVariable(      String name,      String desc,      String signature,      Label start,      Label end,      int index){        int i=index - 1;        if (Modifier.isStatic(m.getModifiers())) {          i=index;        }        if (i >= 0 && i < paramNames.length) {          paramNames[i]=name;        }        super.visitLocalVariable(name,desc,signature,start,end,index);      }    };  }},0);return paramNames;}"
714	"public static void persist(UserPreferences prefs,File file){String xml=xstream.toXML(prefs);BufferedWriter writer=null;try{writer=new BufferedWriter(new FileWriter(file));writer.write(xml);}catch(IOException e){logger.log(Level.SEVERE,""Exception occoured when writing preferences file"",e);}finally{try{writer.close();}catch(IOException e){logger.log(Level.SEVERE,""Exception occoured when closing preferences file"",e);}}}"
715	"@Override public Object value(Attributes attributes,Object bonus){return 0+(int)bonus;}"
716	"private CssSelector createBodySelector(XmapStyles styles){Style automaticMapStyle=styles.getAutomaticStyles().getStyles().stream().filter(s -> s.getType().equals(""map"")).findFirst().get();String bgColorHex=styles.getStyles().getStyles().stream().filter(s -> s.getType().equals(""map"")).findFirst().orElse(automaticMapStyle).getMapProperties().getFill();CssSelector body=new CssSelector();body.setName(""body"");body.getProperties().put(""background-color"",bgColorHex);return body;}"
717	"@Override public boolean equals(Object obj){if(obj==null){return false;}if(obj==this){return true;}if(obj instanceof PersistentIndexed){return equalToIteration((Iterable)obj);}return false;}"
718	"@Override public void run(){if(this.getScreen()!=null){this.getScreen().dispose();}int level=0;if(gameID.contains(""Level=1"")){level=1;}else {if(gameID.contains(""Level=2"")){level=2;}else {level=3;}}GlobalColosseumController.super.setScreen(new ArkanoidStart(this,level));}"
719	"protected void goToNavDrawerItem(int item){switch (item){case R.id.nav_item_cek_resi :startActivity(new Intent(this,PacketCheckActivity.class));break;}}"
720	"@Override public boolean remove(Object obj){return (local.remove(obj)!=null);}"
721	"public final Response getResponse(NoCacheResponse noCacheResponse) throws AppException{Client restClient=null;try{restClient=ClientBuilder.newClient();WrappedResponse<C> resp=responseBlueprint(restClient);if(resp.getWebResponse().getStatus()==200){return extractSuccess(resp,noCacheResponse);}else {return extractFailure.extractFailure(resp.getWebResponse(),noCacheResponse);}}finally{if(restClient!=null){restClient.close();}}}"
722	"@Override public void onViewCreated(View view,Bundle savedInstanceState){super.onViewCreated(view,savedInstanceState);}"
723	"public String getName(){return uri.getName();}"
724	"@Override public Future<BackupResult> backupSession(String sessionId,boolean sessionIdChanged,String requestId){if(!_enabled.get()){return new SimpleFuture<BackupResult>(BackupResult.SKIPPED);} final MemcachedBackupSession msmSession=_manager.getSessionInternal(sessionId);if(msmSession==null){if(_log.isDebugEnabled()){_log.debug(""No session found in session map for ""+sessionId);}if(!_sticky){_lockingStrategy.onBackupWithoutLoadedSession(sessionId,requestId,_backupSessionService);}return new SimpleFuture<BackupResult>(BackupResult.SKIPPED);}if(!msmSession.isValidInternal()){if(_log.isDebugEnabled()){_log.debug(""Non valid session found in session map for ""+sessionId);}return new SimpleFuture<BackupResult>(BackupResult.SKIPPED);}if(!_sticky){synchronized(_manager.getSessionsInternal()){if(msmSession.releaseReference()>0){if(_log.isDebugEnabled()){_log.debug(""Session ""+sessionId+"" is still used by another request, skipping backup and (optional) lock handling/release."");}return new SimpleFuture<BackupResult>(BackupResult.SKIPPED);}msmSession.passivate();_manager.removeInternal(msmSession,false);}} final boolean force=sessionIdChanged||msmSession.isSessionIdChanged()||!_sticky&&(msmSession.getSecondsSinceLastBackup()>=msmSession.getMaxInactiveInterval()); final Future<BackupResult> result=_backupSessionService.backupSession(msmSession,force);if(!_sticky){_lockingStrategy.onAfterBackupSession(msmSession,force,result,requestId,_backupSessionService);}return result;}"
725	"@Override public void onSuccess(String result){}"
726	"@Override public int result(){return 0;}"
727	"public void update(EventBean[] newData,EventBean[] oldData){ToDelete td=(ToDelete)newData[0].getUnderlying();int lowest=td.getContestantNumber();if(dc instanceof VoltDBConnector){boolean success=((VoltDBConnector)dc).runSP3(td);}else {long numContestants=dc.getNumRemainingContestants();if(numContestants<=1){System.out.println(""Not enough contestants to remove"");return ;}dc.removeVotes(lowest);dc.removeContestant(lowest);if(newData.length<1){return ;}}dc.stats.addStat(VoterConstants.DELETE_KEY,td);}"
728	"@Override protected void bulkIndex(String indexName,String type,Collection<String> sources){Bulk.Builder builder=new Bulk.Builder();for(String source : sources){builder.addAction(buildIndex(indexName,type,source));}Bulk bulk=builder.build();execute(bulk);}"
729	"public void doOnSupplied(Handler<T,E> handler) throws InterruptedException,E{doOnSupplied(handler,pool,nrImmediateRetries,retryWaitMillis,timeout);}"
730	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
731	"@RequestMapping(""/commit/{id}"") public AlfredCommit getCommit(Long id){AlfredCommit commit=alfredCommitDao.findOne(id);if(commit==null){throw new ResourceNotFoundRuntimeException();}return commit;}"
732	"private void saveAction(){if(!TableValidator.isValid(table)){return ;}try{CourierSystem.Employees=new HashMap<String,Employee>();for(Employee emp : employeeTable.employees){if(emp.userName==""""&&emp.role==EmployeeRole.Courier){emp.userName=""courier""+emp.id;}CourierSystem.Employees.put(emp.name,emp);}CourierSystem.UpdateEmployees();}catch(Exception e1){e1.printStackTrace();}finally{employeeTable.refresh();}}"
733	"public void onEntityDamageByProjectile(EntityDamageByProjectileEvent event){Entity defender=event.getEntity();Entity attacker=event.getDamager();if(defender instanceof Player){Player player=(Player)defender;ConfigurationManager cfg=plugin.getGlobalConfiguration();WorldConfiguration wcfg=cfg.get(player.getWorld());if(cfg.hasGodMode(player)){event.setCancelled(true);return ;}if(attacker!=null&&attacker instanceof Player){if(wcfg.useRegions){Vector pt=toVector(defender.getLocation());RegionManager mgr=plugin.getGlobalRegionManager().get(player.getWorld());if(!mgr.getApplicableRegions(pt).allows(DefaultFlag.PVP)){((Player)attacker).sendMessage(ChatColor.DARK_RED+""You are in a no-PvP area."");event.setCancelled(true);return ;}}}if(attacker!=null&&attacker instanceof Skeleton){if(wcfg.useRegions){Vector pt=toVector(defender.getLocation());RegionManager mgr=plugin.getGlobalRegionManager().get(player.getWorld());if(!mgr.getApplicableRegions(pt).allows(DefaultFlag.MOB_DAMAGE)){event.setCancelled(true);return ;}}}}}"
734	"@Override public boolean accept(BlockSnapshotRestRep snapshot){return !isInConsistencyGroup(snapshot);}"
735	"@Override public void visit(BasicBlock block){if(blockProcessed.contains(block)){return ;}blockProcessed.add(block);for(BasicBlock.Node it=block.getHead();it!=block.tail;it=it.getSucc()){if(it.instruction instanceof HeapAllocate){Number number;if(((HeapAllocate)it.instruction).getNumber() instanceof Immediate){number=new Immediate(((HeapAllocate)it.instruction).getSize()*((Immediate)((HeapAllocate)it.instruction).getNumber()).value+4,((HeapAllocate)it.instruction).getNumber().getNumberSize());}else {number=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((HeapAllocate)it.instruction).getNumber().getNumberSize());it.prepend(new Move((Register)number,((HeapAllocate)it.instruction).getNumber()));it.prepend(new BinaryArithmetic(BinaryArithmetic.Types.MUL,(Register)number,new Immediate(((HeapAllocate)it.instruction).getSize(),((HeapAllocate)it.instruction).getNumber().getNumberSize())));it.prepend(new BinaryArithmetic(BinaryArithmetic.Types.ADD,(Register)number,new Immediate(4,((HeapAllocate)it.instruction).getNumber().getNumberSize())));}((HeapAllocate)it.instruction).setSize(1);((HeapAllocate)it.instruction).setNumber(number);}else {if(it.instruction instanceof UnaryBranch){if(((UnaryBranch)it.instruction).getExpression() instanceof Immediate){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((UnaryBranch)it.instruction).getExpression().getNumberSize());it.prepend(new Move(register,((UnaryBranch)(it.instruction)).getExpression()));((UnaryBranch)it.instruction).setExpression(register);}it.append(new Jump(((UnaryBranch)it.instruction).branchFalse));}else {if(it.instruction instanceof BinaryBranch){if((((BinaryBranch)it.instruction).getExpressionA() instanceof IndirectRegister&&((BinaryBranch)it.instruction).getExpressionB() instanceof IndirectRegister)){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((IndirectRegister)((BinaryBranch)it.instruction).getExpressionA()).size);it.prepend(new Move(register,((BinaryBranch)it.instruction).getExpressionA()));((BinaryBranch)it.instruction).setExpressionA(register);}if((((BinaryBranch)it.instruction).getExpressionA() instanceof Immediate&&((BinaryBranch)it.instruction).getExpressionB() instanceof Immediate)){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((IndirectRegister)((BinaryBranch)it.instruction).getExpressionA()).size);it.prepend(new Move(register,((BinaryBranch)it.instruction).getExpressionA()));((BinaryBranch)it.instruction).setExpressionA(register);}it.append(new Jump(((BinaryBranch)it.instruction).branchFalse));}else {if(it.instruction instanceof Compare){if((((Compare)it.instruction).getSourceA() instanceof IndirectRegister&&((Compare)it.instruction).getSourceB() instanceof IndirectRegister)){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((IndirectRegister)((Compare)it.instruction).getSourceA()).size);it.prepend(new Move(register,((Compare)it.instruction).getSourceA()));((Compare)it.instruction).setSourceA(register);}if((((Compare)it.instruction).getSourceA() instanceof Immediate&&((Compare)it.instruction).getSourceB() instanceof Immediate)){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((Immediate)((Compare)it.instruction).getSourceA()).size);it.prepend(new Move(register,((Compare)it.instruction).getSourceA()));((Compare)it.instruction).setSourceA(register);}}else {if(it.instruction instanceof BinaryArithmetic){if((((BinaryArithmetic)it.instruction).operator.equals(BinaryArithmetic.Types.DIV)||((BinaryArithmetic)it.instruction).operator.equals(BinaryArithmetic.Types.MOD))&&((BinaryArithmetic)it.instruction).getSource() instanceof Immediate){VirtualRegister register=new VirtualRegister("".aux""+String.valueOf(countTmpVars++),((Immediate)((BinaryArithmetic)it.instruction).getSource()).size);it.prepend(new Move(register,((BinaryArithmetic)it.instruction).getSource()));((BinaryArithmetic)it.instruction).setSource(register);}}else {if(it.instruction instanceof Call){if(((Call)it.instruction).getSelfRegister()!=null){((Call)it.instruction).parameters.add(0,((Call)it.instruction).getSelfRegister());((Call)it.instruction).setSelfRegister(null);}}}}}}}}block.getSuccBasicBlock().forEach(element -> element.accept(this));}"
736	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);mPrefs=getApplicationContext().getSharedPreferences(NOTIFICATION_PREF_NAME,MODE_PRIVATE);ImageView ivtest=new ImageView(this);ivtest.setImageDrawable(getResources().getDrawable(R.drawable.logo));Gson gson=new Gson();for(int i=0;i<getNotId();i++){Log.i(""Notification"","" alan For'un i?ine girdim"");String json=mPrefs.getString(""Notification""+i,"""");Notification not=gson.fromJson(json,Notification.class);notifications.add(not);}rvNotifications=(RecyclerView)findViewById(R.id.rvNotifications);tvWelcome=(TextView)findViewById(R.id.tvWelcome);bRelease=(Button)findViewById(R.id.bRelease);bRelease.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){  }});rvNotifications.setHasFixedSize(true);mLayoutManager=new LinearLayoutManager(this);rvNotifications.setLayoutManager(mLayoutManager);mAdapter=new NotificationsAdapter(notifications,getApplicationContext(),new NotificationsAdapter.OnItemClickListener(){  @Override public void onItemClick(  Notification notification){    Intent launchIntent=getPackageManager().getLaunchIntentForPackage(notification.getPackagename());    startActivity(launchIntent);    notifications.remove(notification);    mAdapter.notifyDataSetChanged();  }});rvNotifications.setAdapter(mAdapter);BottomNavigationView navigation=(BottomNavigationView)findViewById(R.id.navigation);navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);LocalBroadcastManager.getInstance(this).registerReceiver(onNotice,new IntentFilter(""Msg""));}"
737	"@Override public boolean isApplicable(ModelAnnotationGroup modelAnnotations,ModelAnnotation modelAnnotation,ValueMetaInterface valueMeta){return true;}"
738	"private void internalSetUserPassword(SUser user,String newPassword) throws TException{BouncyCastleUtil.ensureInitialized();byte[] newSalt=new byte[SALT_LENGTH_BYTES];try{SecureRandom.getInstanceStrong().nextBytes(newSalt);}catch(NoSuchAlgorithmException e){logger.error(""Internal error when calculating new salt for new password"",e);throw new TException(""Internal error."",e);}PKCS5S2ParametersGenerator pbkdf2sha256=new PKCS5S2ParametersGenerator(new SHA256Digest());pbkdf2sha256.init(newPassword.getBytes(Charset.forName(""UTF-8"")),newSalt,PBKDF2_ITERATIONS);byte[] newHash=((KeyParameter)pbkdf2sha256.generateDerivedParameters(HASH_LENGTH_BYTES*8)).getKey();user.getPassword().setHash(newHash);user.getPassword().setSalt(newSalt);}"
739	"public Map<Attribute,Float> getAttributeModifiers(GameCharacter target){return target.getPotionAttributes();}"
740	"@Override public int getSqlType(){return Types.CHAR;}"
741	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
742	"private static IsMasterReply unmarshall(BsonDocument bson) throws TypesMismatchException,NoSuchKeyException,FailedToParseException{boolean master=BsonReaderTool.getBoolean(bson,IS_MASTER_FIELD);boolean secondary=BsonReaderTool.getBoolean(bson,SECONDARY_FIELD);if(bson.containsKey(INFO_FIELD.getFieldName())){if(master||secondary||!bson.containsKey(IS_REPLICA_SET_FIELD.getFieldName())||!bson.get(IS_REPLICA_SET_FIELD.getFieldName()).isBoolean()||!bson.get(IS_REPLICA_SET_FIELD.getFieldName()).asBoolean().getValue()){throw new FailedToParseException(""Expected presence of \""""+INFO_FIELD+""\"" field to indicate no valid ""+""config loaded, but other fields weren't as we ""+""expected"");}return NOT_CONFIGURED;}else {if(bson.containsKey(IS_REPLICA_SET_FIELD.getFieldName())){throw new FailedToParseException(""Found \""""+IS_REPLICA_SET_FIELD+""\"" field which should indicate that no valid config ""+""is loaded, but we didn't also have an \""""+INFO_FIELD+""\"" field as we expected"");}}String setName=BsonReaderTool.getString(bson,SET_NAME_FIELD);int setVersion=BsonReaderTool.getNumeric(bson,SET_VERSION_FIELD).intValue();ImmutableList<HostAndPort> hosts=fromBsonArray(bson,HOSTS_FIELD);ImmutableList<HostAndPort> passives=fromBsonArray(bson,PASSIVES_FIELD);ImmutableList<HostAndPort> arbiters=fromBsonArray(bson,ARBITERS_FIELD);HostAndPort primary=BsonReaderTool.getHostAndPort(bson,PRIMARY_FIELD,null);boolean arbiterOnly=BsonReaderTool.getBoolean(bson,ARBITER_ONLY_FIELD,false);boolean passive=BsonReaderTool.getBoolean(bson,PASSIVE_FIELD,false);boolean hidden=BsonReaderTool.getBoolean(bson,HIDDEN_FIELD,false);boolean buildIndexes=BsonReaderTool.getBoolean(bson,BUILD_INDEXES_FIELD,false);UnsignedInteger slaveDelay=UnsignedInteger.fromIntBits(BsonReaderTool.getNumeric(bson,SLAVE_DELAY_FIELD,DefaultBsonValues.INT32_ZERO).intValue()); final ImmutableMap<String,String> tags;if(!bson.containsKey(TAGS_FIELD.getFieldName())){tags=ImmutableMap.of();}else {ImmutableMap.Builder<String,String> tagsBuilder=ImmutableMap.builder();BsonDocument uncastedTags=BsonReaderTool.getDocument(bson,TAGS_FIELD);for(Entry<?> entry : uncastedTags){if(!entry.getValue().isString()){throw new TypesMismatchException(entry.getKey(),""string"",entry.getValue().getType(),""Elements in \""""+TAGS_FIELD+""\"" obj of ""+""isMaster response must be of type string ""+"" but found type ""+entry.getValue().getType().toString().toLowerCase(Locale.ROOT));}String tagValue=uncastedTags.get(entry.getKey()).asString().getValue();tagsBuilder.put(entry.getKey(),tagValue);}tags=tagsBuilder.build();}BsonObjectId electionId=BsonReaderTool.getObjectId(bson,ELECTION_ID_FIELD,null);HostAndPort me=BsonReaderTool.getHostAndPort(bson,ME_FIELD,null);return new IsMasterReply(master,secondary,setName,setVersion,hosts,passives,arbiters,primary,arbiterOnly,passive,hidden,buildIndexes,slaveDelay,tags,me,electionId,BsonReaderTool.getInteger(bson,MAX_BSON_OBJECT_SIZE),BsonReaderTool.getInteger(bson,MAX_MESSAGE_SIZE_BYTES),BsonReaderTool.getInteger(bson,MAX_WRITE_BATCH_SIZE),BsonReaderTool.getInstant(bson,LOCAL_TIME),BsonReaderTool.getInteger(bson,MAX_WIRE_VERSION),BsonReaderTool.getInteger(bson,MIN_WIRE_VERSION));}"
743	"@Override protected void onResume(){super.onResume();mDbHelper=DBHelper.getInstance(this);mStudents=mDbHelper.queryChildList(mDbHelper.getReadableDatabase());SharedPreferences sp=getSharedPreferences(Def.SHARE_PREFERENCE,Context.MODE_PRIVATE);mCurrnetStudentIdx=sp.getInt(Def.SP_CURRENT_STUDENT,0);setupWatchSurface();}"
744	"@Override public String get(Pokemon p){return PokeColumn.NICKNAME.get(p).toString();}"
745	"@Override public String toString(){return generateKey();}"
746	"public void seed(){HibernateUtil.makeOperation((session) -> {  for (  Object record : recordsToSeed)   session.save(record);});}"
747	"public void onClick(DialogInterface dialog,int whichButton){}"
748	"private boolean touchUp2Phase(int screenX,int screenY,int pointer,int button){int vCard_index=-1;if(screenY>=Resolution.getGameWorldHeightPortrait()/2.0){for(VCard vCard : model.getPhase().getBoard().getVCards()){++vCard_index;if(vCard_index==9){model.setScrollPyramide(true);}if(vCard.getOrientation()==VCard.CardOrientation.BACK){vCard.setOrientation(VCard.CardOrientation.FACE);activeCard=new Card(vCard.getCardIndex(),Card.CardSize.SMALL);model.firstPlayer();do {Player player=model.getPlayer();for(VCard playerVCard : player.getVCards()){Card playerCard=new Card(playerVCard.getCardIndex(),Card.CardSize.SMALL);if(activeCard.equals(playerCard)){if(vCard_index<5){playerVCard.setCredit(1);}else {if(vCard_index<9){playerVCard.setCredit(2);}else {if(vCard_index<12){playerVCard.setCredit(3);}else {if(vCard_index<14){playerVCard.setCredit(4);}else {if(vCard_index==14){playerVCard.setCredit(5);}}}}}}else {playerVCard.setCredit(0);}}} while(model.nextPlayer());break;}}}else {if(screenX>=getScreen().getTextBox().getX()&&screenX<=getScreen().getTextBox().getX()+getScreen().getTextBox().getWidth()&&Resolution.getGameWorldHeightPortrait()-screenY>=getScreen().getTextBox().getY()&&Resolution.getGameWorldHeightPortrait()-screenY<=getScreen().getTextBox().getY()+getScreen().getTextBox().getHeight()){if(activeCard!=null){model.firstPlayer();outer: do {  Player player=model.getPlayer();  for (  VCard playerVCard : player.getVCards()) {    Card playerCard=new Card(playerVCard.getCardIndex(),Card.CardSize.SMALL);    if (activeCard.getValue() == playerCard.getValue()) {      player.removeVCard(playerVCard);      break outer;    }  }} while (model.nextPlayer());}}else {model.reset();setScreenLockForPhase(model.getPhase().getName());flag=false;activeCard=null;}}return true;}"
749	"@Override public boolean isPaymentTypeApplicableforDisbursementCharge(){ final String propertyName=""paymenttype-applicable-for-disbursement-charges""; final GlobalConfigurationProperty property=this.globalConfigurationRepository.findOneByNameWithNotFoundDetection(propertyName);return property.isEnabled();}"
750	"@Override public DOCUMENT_STATUS mapSDocument(){init();if(getSDocument()==null){throw new PepperModuleDataException(this,""No document delivered to be converted."");}ByteArrayOutputStream outStream=new ByteArrayOutputStream();XMLOutputFactory factory=XMLOutputFactory.newFactory();for(STextualDS sTextualDS : getSDocument().getSDocumentGraph().getSTextualDSs()){XMLStreamWriter w;try{w=TCFs.push(factory.createXMLStreamWriter(outStream));w.writeStartDocument();w.writeStartElement(TCFDictionary.NS_WL,TCFDictionary.TAG_WL_D_SPIN,TCFDictionary.NS_VALUE_WL);w.writeNamespace(NS_ED,NS_VALUE_ED);w.writeNamespace(NS_LX,NS_VALUE_LX);w.writeNamespace(NS_MD,NS_VALUE_MD);w.writeNamespace(NS_TC,NS_VALUE_TC);w.writeNamespace(NS_WL,NS_VALUE_WL);w.writeAttribute(ATT_VERSION,""0.4"");w.writeStartElement(NS_MD,TAG_MD_METADATA,NS_VALUE_MD);w.writeEndElement();w.writeStartElement(NS_TC,TAG_TC_TEXTCORPUS,NS_VALUE_TC);w.writeAttribute(ATT_LANG,getLanguage());mapSTextualDS(sTextualDS);mapTokenization(getSDocument().getSDocumentGraph().getSortedSTokenByText());mapSentences();mapPOSAnnotations();mapLemmaAnnotations();mapLayoutAnnotations();w.writeEndElement();w.writeEndDocument();w.writeEndDocument();}catch(XMLStreamException e){}File file=null;while(!TCFs.isEmpty()){w=TCFs.pop();file=new File(getResourceURI().toFileString());file.getParentFile().mkdirs();PrintWriter p;try{p=new PrintWriter(file);p.println(outStream.toString());p.close();}catch(FileNotFoundException e){logger.error(""Could not write TCF ""+getResourceURI(),e);}}w=null;}return DOCUMENT_STATUS.COMPLETED;}"
751	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
752	"public Texture getBackgroundTexture(String facePath,TextureEnum textureEnum){assetsManager.load(textureAssets.getTexturePath(TextureEnum.BACKGROUND+""_""+facePath+""_""+textureEnum),Texture.class);assetsManager.finishLoading();return assetsManager.get(textureAssets.getTexturePath(TextureEnum.BACKGROUND+""_""+facePath+""_""+textureEnum),Texture.class);}"
753	"public TemplateContext create(ServletContext servletContext,Properties properties){String home=properties.getProperty(""home"");String sourcePattern=properties.getProperty(""sourcePattern"");String jspWork=properties.getProperty(""jspWork"");String classPath=properties.getProperty(""classPath"");String ignoreJspTag=properties.getProperty(""ignoreJspTag"");String templateFactoryClass=properties.getProperty(""templateFactoryClass"");String expressionFactoryClass=properties.getProperty(""expressionFactoryClass"");if(home==null){throw new NullPointerException(""'home' must be not null."");}if(home.startsWith(""contextPath:"")){home=servletContext.getRealPath(home.substring(12).trim());}if(sourcePattern==null){sourcePattern=""jsp,jspx"";}if(jspWork!=null&&jspWork.startsWith(""contextPath:"")){jspWork=servletContext.getRealPath(jspWork.substring(12).trim());}if(classPath==null){classPath=WebUtil.getClassPath();}if(ignoreJspTag==null){ignoreJspTag=System.getProperty(""ayada.compile.ignore-jsptag"");}if(ignoreJspTag==null){ignoreJspTag=String.valueOf(TemplateConfig.getIgnoreJspTag());}if(templateFactoryClass==null){templateFactoryClass=TemplateFactory.class.getName();}if(expressionFactoryClass==null){expressionFactoryClass=DefaultExpressionFactory.class.getName();}if(logger.isInfoEnabled()){logger.info(""home: {}"",home);logger.info(""sourcePattern: {}"",sourcePattern);logger.info(""jspWork: {}"",jspWork);logger.info(""ignoreJspTag: {}"",ignoreJspTag);logger.info(""classPath: {}"",classPath);logger.info(""templateFactoryClass: {}"",templateFactoryClass);logger.info(""expressionFactoryClass: {}"",expressionFactoryClass);}try{DefaultSourceFactory sourceFactory=new DefaultSourceFactory();TemplateFactory templateFactory=getTemplateFactory(templateFactoryClass,jspWork,classPath,ignoreJspTag);ExpressionFactory expressionFactory=getExpressionFactory(expressionFactoryClass);sourceFactory.setHome(home);sourceFactory.setSourcePattern(sourcePattern);if(logger.isInfoEnabled()){logger.info(""sourceFactory: ""+sourceFactory.getClass().getName());logger.info(""templateFactory: ""+templateFactory.getClass().getName());logger.info(""expressionFactory: ""+expressionFactory.getClass().getName());}TemplateContext templateContext=new DefaultTemplateContext();templateContext.setSourceFactory(sourceFactory);templateContext.setTemplateFactory(templateFactory);templateContext.setExpressionFactory(expressionFactory);TemplateManager.add(templateContext);return templateContext;}catch(Exception e){logger.error(e.getMessage(),e);}return null;}"
754	"public AlleleFractionSegmentCollection findSegmentation(int maxNumChangepointsPerChromosome,double kernelVariance,int kernelApproximationDimension,List<Integer> windowSizes,double numChangepointsPenaltyLinearFactor,double numChangepointsPenaltyLogLinearFactor){ParamUtils.isPositiveOrZero(maxNumChangepointsPerChromosome,""Maximum number of changepoints must be non-negative."");ParamUtils.isPositiveOrZero(kernelVariance,""Variance of Gaussian kernel must be non-negative (if zero, a linear kernel will be used)."");ParamUtils.isPositive(kernelApproximationDimension,""Dimension of kernel approximation must be positive."");Utils.validateArg(windowSizes.stream().allMatch(ws -> ws > 0),""Window sizes must all be positive."");Utils.validateArg(new HashSet<>(windowSizes).size()==windowSizes.size(),""Window sizes must all be unique."");ParamUtils.isPositiveOrZero(numChangepointsPenaltyLinearFactor,""Linear factor for the penalty on the number of changepoints per chromosome must be non-negative."");ParamUtils.isPositiveOrZero(numChangepointsPenaltyLogLinearFactor,""Log-linear factor for the penalty on the number of changepoints per chromosome must be non-negative."");logger.info(String.format(""Finding changepoints in %d data points and %d chromosomes..."",allelicCounts.getRecords().size(),alternateAlleleFractionsPerChromosome.size())); final List<AlleleFractionSegment> segments=new ArrayList<>();for(String chromosome : alternateAlleleFractionsPerChromosome.keySet()){ final List<AllelicCount> allelicCountsInChromosome=allelicCountsPerChromosome.get(chromosome); final List<Double> alternateAlleleFractionsInChromosome=alternateAlleleFractionsPerChromosome.get(chromosome); final int numAllelicCountsInChromosome=allelicCountsInChromosome.size();logger.info(String.format(""Finding changepoints in %d data points in chromosome %s..."",numAllelicCountsInChromosome,chromosome));if(numAllelicCountsInChromosome<MIN_NUM_POINTS_REQUIRED_PER_CHROMOSOME){logger.warn(String.format(""Number of points in chromosome %s (%d) is less than that required (%d), skipping segmentation..."",chromosome,numAllelicCountsInChromosome,MIN_NUM_POINTS_REQUIRED_PER_CHROMOSOME)); final int start=allelicCountsInChromosome.get(0).getStart(); final int end=allelicCountsInChromosome.get(numAllelicCountsInChromosome-1).getEnd();segments.add(new AlleleFractionSegment(new SimpleInterval(chromosome,start,end),numAllelicCountsInChromosome));} final List<Integer> changepoints=new ArrayList<>(new KernelSegmenter<>(alternateAlleleFractionsInChromosome).findChangepoints(maxNumChangepointsPerChromosome,KERNEL.apply(kernelVariance),kernelApproximationDimension,windowSizes,numChangepointsPenaltyLinearFactor,numChangepointsPenaltyLogLinearFactor,KernelSegmenter.ChangepointSortOrder.INDEX));if(!changepoints.contains(numAllelicCountsInChromosome)){changepoints.add(numAllelicCountsInChromosome-1);}int previousChangepoint=-1;for(int changepoint : changepoints){ final int start=intervalsPerChromosome.get(chromosome).get(previousChangepoint+1).getStart(); final int end=intervalsPerChromosome.get(chromosome).get(changepoint).getEnd(); final List<AllelicCount> allelicCountsInSegment=allelicCountsInChromosome.subList(previousChangepoint+1,changepoint+1);segments.add(new AlleleFractionSegment(new SimpleInterval(chromosome,start,end),allelicCountsInSegment));previousChangepoint=changepoint;}}logger.info(String.format(""Found %d segments in %d chromosomes."",segments.size(),alternateAlleleFractionsPerChromosome.keySet().size()));return new AlleleFractionSegmentCollection(allelicCounts.getSampleMetadata(),segments);}"
755	"@Override public boolean test(Object first,Object second){return null==first?null==second:(first instanceof Number&&second instanceof Number&&!first.getClass().equals(second.getClass())?((Number)first).doubleValue()==((Number)second).doubleValue():first.equals(second));}"
756	"@Override public void handle(ActionEvent e){LOGGER.info(""Start export incoming..."");DirectoryChooser directoryChooser=new DirectoryChooser();File selectedDirectory=directoryChooser.showDialog(primaryStage);if(selectedDirectory==null){LOGGER.error(""Selected directory is null."");return ;}else {if(LOGGER.isDebugEnabled()){LOGGER.debug(""Selected path is {}"",selectedDirectory.getAbsolutePath());}}AeInspectDTO selectedAaeinspDto=AeInspectionHolder.aeinspectMap.get(AeInspectionHolder.SELECTED_AEEDORG_NO);BsWorkcoming detail=selectedAaeinspDto.getBsWorkcoming();Map<String,String> map=new HashMap<String,String>();map.put(""FILED1"",AeInspectionHolder.SELECTED_AEEDORG_NAME);map.put(""FILED2"",detail.getFiled2());map.put(""FILED3"",detail.getFiled3());map.put(""FILED5"",detail.getFiled5());map.put(""PCB_BANK"",detail.getAeorgnm());InputStream fis=null;FileOutputStream fos=null;try{fis=new FileInputStream(""word_templates/jcjl.doc"");fos=new FileOutputStream(selectedDirectory.getAbsolutePath()+""/???????.doc"");WordGenerator.replaceDoc(fis,map,fos);Alert alert=new Alert(AlertType.INFORMATION);alert.setTitle(""???"");alert.setHeaderText(null);alert.setContentText(getTabName()+""???????!"");alert.showAndWait();}catch(FileNotFoundException e1){LOGGER.error(""Generate word error"",e1);Alert alert=new Alert(AlertType.INFORMATION);alert.setTitle(""???"");alert.setHeaderText(null);alert.setContentText(""????????""+e1.getMessage());alert.showAndWait();}finally{IOUtils.closeQuietly(fis);IOUtils.closeQuietly(fos);}}"
757	"public boolean accept(File folder){return (folder.isDirectory()&&LocalContribution.isDeletionFlagged(folder));}"
758	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
759	"private void relaxResources(Boolean release){if(codec!=null){if(release){codec.stop();codec.release();codec=null;}}if(audioTrack!=null){audioTrack.flush();audioTrack.release();audioTrack=null;}}"
760	"@Override public void onReceive(Context context,Intent intent){Intent startIntent=new Intent(context,UshahidiService.class);context.startService(startIntent);}"
761	"@Override void updateIndex(int offset,IndexMap indexMap,int oldIndex,int newIndex){indexMap.stringIds[oldIndex]=newIndex;}"
762	"@Override public Object getFromScope(String name,FacesContext context){return context.getExternalContext().getRequestMap().get(name);}"
763	"@Override public int getXpThreshold(){return 0;}"
764	"private void updateNow(HashMap<Integer,Sensor> sysMap){if(view==viewer.getCurrentView()){for(Map.Entry<Integer,Sensor> entry : sysMap.entrySet()){sensors.get(entry.getKey()).setText(entry.getValue().getCalibValue());}}}"
765	"public void actionPerformed(ActionEvent e){int vehicleType=vehicleTypeComboBox.getSelectedIndex();boolean automatic;if(gearTypeComboBox.getSelectedIndex()==0){automatic=false;}else {automatic=true;}String fromDate=dateFromField.getText();String toDate=dateToField.getText();if(vehicleTypeComboBox.getSelectedIndex()!=-1||gearTypeComboBox.getSelectedIndex()!=-1||dateFromValid==false||dateToValid==false){vehicleType=vehicleTypeComboBox.getSelectedIndex()+1;if(Controller.findAvailableVehicle(vehicleType,automatic,fromDate,toDate)!=null){Vehicle v=Controller.findAvailableVehicle(vehicleType,automatic,fromDate,toDate);vehicleText.setText(v.getMake()+"" ""+v.getModel()+"" (""+v.getID()+"")""+""   Fuel: ""+v.getFuelName()+""   Automatic: ""+v.isAutomatic());vehicleID=v.getID();okButton.setEnabled(true);}else {vehicleText.setText(""(no vehicle available with specified parameters)"");okButton.setEnabled(false);}}else {vehicleText.setText(""(please set all parameters)"");okButton.setEnabled(false);}}"
766	"private void fulfill(Button button){}"
767	"public void deployViews(Reader xml){lock.readLock().lock();try{checkInitialized();}finally{lock.readLock().unlock();}SAXReader reader=new SAXReader();Document doc;try{doc=reader.read(xml);}catch(DocumentException e){throw new RuntimeException(e);}Element rootElem=doc.getRootElement();for(Element includeElem : Dom4j.elements(rootElem,""include"")){String file=includeElem.attributeValue(""file"");if(!StringUtils.isBlank(file)){deployViews(file);}}for(Element viewElem : Dom4j.elements(rootElem,""view"")){deployView(rootElem,viewElem);}}"
768	"@Override public int onStartCommand(Intent intent,int flags,int startId){if(intent!=null&&intent.getBooleanExtra(ALWAYS_SHOW_NOTIFICATION,false)){mNotificationAlwaysVisible=true;}VpnStatus.addStateListener(this);VpnStatus.addByteCountListener(this);guiHandler=new Handler(getMainLooper());if(intent!=null&&PAUSE_VPN.equals(intent.getAction())){if(mDeviceStateReceiver!=null){mDeviceStateReceiver.userPause(true);}return START_NOT_STICKY;}if(intent!=null&&RESUME_VPN.equals(intent.getAction())){if(mDeviceStateReceiver!=null){mDeviceStateReceiver.userPause(false);}return START_NOT_STICKY;}if(intent!=null&&START_SERVICE.equals(intent.getAction())){return START_NOT_STICKY;}if(intent!=null&&START_SERVICE_STICKY.equals(intent.getAction())){return START_REDELIVER_INTENT;}if(intent!=null&&intent.hasExtra(getPackageName()+"".profileUUID"")){String profileUUID=intent.getStringExtra(getPackageName()+"".profileUUID"");int profileVersion=intent.getIntExtra(getPackageName()+"".profileVersion"",0);mProfile=ProfileManager.get(this,profileUUID,profileVersion,100);if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.N_MR1){updateShortCutUsage(mProfile);}}else {mProfile=ProfileManager.getLastConnectedProfile(this);VpnStatus.logInfo(R.string.service_restarted);if(mProfile==null){Log.d(""OpenVPN"",""Got no last connected profile on null intent. Assuming always on."");mProfile=ProfileManager.getAlwaysOnVPN(this);if(mProfile==null){stopSelf(startId);return START_NOT_STICKY;}}mProfile.checkForRestart(this);}new Thread(new Runnable(){  @Override public void run(){    startOpenVPN();  }}).start();ProfileManager.setConnectedVpnProfile(this,mProfile);VpnStatus.setConnectedVPNProfile(mProfile.getUUIDString());return START_STICKY;}"
769	"@SuppressWarnings(""unchecked"") public ArrayList<StatElement> getNetworkUsageStats(Context context,int iStatType) throws Exception{boolean validTypes=BatteryStatsTypes.assertValidStatType(iStatType);if(!validTypes){Log.e(TAG,""Invalid WakeType or StatType"");throw new Exception(""Invalid StatType"");}ArrayList<StatElement> myStats=new ArrayList<StatElement>();this.collectUidStats();if(m_uidStats!=null){try{ClassLoader cl=context.getClassLoader(); @SuppressWarnings(""rawtypes"") Class iBatteryStatsUid=cl.loadClass(""com.android.internal.os.BatteryStatsImpl$Uid"");int NU=m_uidStats.size();for(int iu=0;iu<NU;iu++){Object myUid=m_uidStats.valueAt(iu);Long bytesReceived=0L;Long bytesSent=0L;Long bytesReceivedWifi=0L;Long bytesReceivedMobile=0L;Long bytesSentWifi=0L;Long bytesSentMobile=0L;if(Build.VERSION.SDK_INT<19){ @SuppressWarnings(""rawtypes"") Class[] paramTypesGetTcpBytesXxx=new Class[1];paramTypesGetTcpBytesXxx[0]=int.class;Method methodGetTcpBytesReceived=iBatteryStatsUid.getMethod(""getTcpBytesReceived"",paramTypesGetTcpBytesXxx);Method methodGetTcpBytesSent=iBatteryStatsUid.getMethod(""getTcpBytesSent"",paramTypesGetTcpBytesXxx);Object[] paramGetTcpBytesXxx=new Object[1];paramGetTcpBytesXxx[0]=new Integer(iStatType);bytesReceived=(Long)methodGetTcpBytesReceived.invoke(myUid,paramGetTcpBytesXxx);bytesSent=(Long)methodGetTcpBytesSent.invoke(myUid,paramGetTcpBytesXxx);}else {if(Build.VERSION.SDK_INT<=21){ @SuppressWarnings(""rawtypes"") Class[] paramTypesGetNetworkActivity=new Class{int.class,int.class};Method methodGetNetworkActivity=iBatteryStatsUid.getMethod(""getNetworkActivityCount"",paramTypesGetNetworkActivity);Object paramGetNetworkActivityCount[]={NETWORK_MOBILE_RX_BYTES,iStatType};bytesReceivedMobile=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_WIFI_RX_BYTES;bytesReceivedWifi=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_MOBILE_TX_BYTES;bytesSentMobile=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_WIFI_TX_BYTES;bytesSentWifi=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);}else { @SuppressWarnings(""rawtypes"") Class[] paramTypesGetNetworkActivity=new Class{int.class,int.class};Method methodGetNetworkActivity=iBatteryStatsUid.getMethod(""getNetworkActivityBytes"",paramTypesGetNetworkActivity);Object paramGetNetworkActivityCount[]={NETWORK_MOBILE_RX_BYTES,iStatType};bytesReceivedMobile=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_WIFI_RX_BYTES;bytesReceivedWifi=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_MOBILE_TX_BYTES;bytesSentMobile=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);paramGetNetworkActivityCount[0]=NETWORK_WIFI_TX_BYTES;bytesSentWifi=(Long)methodGetNetworkActivity.invoke(myUid,paramGetNetworkActivityCount);}}Method methodGetUid=iBatteryStatsUid.getMethod(""getUid"");Integer uid=(Integer)methodGetUid.invoke(myUid);if(CommonLogSettings.DEBUG){Log.d(TAG,""Uid = ""+uid+"": received:""+bytesReceived+"", sent: ""+bytesSent);}NetworkUsage myData=null;if(Build.VERSION.SDK_INT>=19){myData=new NetworkUsage(uid,""Wifi"",bytesReceivedWifi,bytesSentWifi);UidInfo myInfo=UidNameResolver.getInstance().getNameForUid(uid);myData.setUidInfo(myInfo);myStats.add(myData);myData=new NetworkUsage(uid,""Mobile"",bytesReceivedMobile,bytesSentMobile);myData.setUidInfo(myInfo);myStats.add(myData);}{myData=new NetworkUsage(uid,bytesReceived,bytesSent);UidInfo myInfo=UidNameResolver.getInstance().getNameForUid(uid);myData.setUidInfo(myInfo);myStats.add(myData);}}}catch(Exception e){throw e;}}return myStats;}"
770	"@Override public void onClick(View v){if(currentActivity.getTaskEndTime()>System.currentTimeMillis()+10000){dbHelper.updateStatus(currentActivity.getTaskId(),""running"");updateView();}else {Toast.makeText(getActivity(),""Sorry activity will end in 10sec "",Toast.LENGTH_SHORT).show();}if(currentActivity.getTaskType().equals(""Eat"")&&currentActivity.isAiFlag()==true){try{if(isConnected()){Intent i=new Intent(getActivity().getApplicationContext(),MapsActivity.class);startActivity(i);}else {}}catch(InterruptedException|IOException e){e.printStackTrace();}}}"
771	"public void switchContent(int id,Fragment fragment){FragmentTransaction ft=getSupportFragmentManager().beginTransaction();ft.replace(id,fragment);ft.addToBackStack(null);ft.commit();}"
772	"public void infer(int index,Code.NewRecord code,Block.Entry entry,Env environment){HashMap<String,Value> values=new HashMap<String,Value>();ArrayList<String> keys=new ArrayList<String>(code.type.keys());Collections.sort(keys);Collections.reverse(keys);boolean isValue=true;for(String key : keys){Value val=environment.pop();if(val instanceof Value){values.put(key,val);}else {isValue=false;}}Value result=null;if(isValue){result=Value.V_RECORD(values);entry=new Block.Entry(Code.Const(result),entry.attributes());rewrites.put(index,new Rewrite(entry,keys.size()));}environment.push(result);}"
773	"public static void edit(String id){try{addReferenceData();ComputeSystemRestRep computeSystem=ComputeSystemUtils.getComputeSystem(id);if(computeSystem!=null){if(computeSystem.getVlans()!=null){List<StringOption> vlanOptions=new ArrayList<StringOption>();vlanOptions.add(VlanListTypes.option(VlanListTypes.NO_OSINSTALL_NONE));List<String> vlanList=new ArrayList<String>(Arrays.asList(computeSystem.getVlans().split("","")));for(String vlan : vlanList){vlanOptions.add(VlanListTypes.option(vlan));}renderArgs.put(""computeSystemVlanList"",vlanOptions);}ComputeSystemForm computeSystems=new ComputeSystemForm(computeSystem);render(""@edit"",computeSystems);}else {flash.error(MessagesUtils.get(UNKNOWN,id));list();}}catch(Exception e){flashException(e);list();}}"
774	"@Override public void touchUp(InputEvent event,float x,float y,int pointer,int button){super.touchUp(event,x,y,pointer,button);if(!justSelected&&selectedItem!=null){selectedLabel.getStyle().background=null;selectedItem=null;selectedLabel=null;}else {justSelected=false;}}"
775	"@Override public boolean visit(FieldDeclaration ?){return !hidden()&&!declaredIn(?);}"
776	"public static NetworkState readFromBuf(ByteBuf buf){return new NetworkState(buf.readLong(),buf.readLong(),buf.readInt(),buf.readInt(),buf.readInt(),RedstoneControlMode.values()[buf.readShort()],RedstoneControlMode.values()[buf.readShort()],buf.readBoolean()?BlockCoord.readFromBuf(buf):null,buf.readFloat(),buf.readFloat());}"
777	"@Override public void destroy(){this.channel=null;this.delegate=null;this.activated=false;this.loggedIn=false;this.readBytes=0L;this.writtenBytes=0L;this.connectionType=null;if(locks!=null){this.locks.clear();}if(properties!=null){this.properties.clear();}if(packetQueue!=null){this.packetQueue.clear();}if(sessionTicketsQueue!=null){this.sessionTicketsQueue.remove(this);}this.locks=null;this.properties=null;this.packetQueue=null;this.dataDecoderGroup=null;this.sessionTicketsQueue=null;this.immediateDataSender=null;}"
778	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
779	"public boolean setVariable(String var,String complete,String newVal,Object actual) throws NoSuchFieldException,IllegalArgumentException,IllegalAccessException{String[] fs=var.split(Pattern.quote(""/""));if(fs.length==1){if(var.contains(""["")){String index=var.substring(var.indexOf(""["")+1,var.indexOf(""]""));Field f=actual.getClass().getField(var.substring(0,var.lastIndexOf(""["")));ParameterizedType pt=(ParameterizedType)f.getGenericType();Class<?> itemType=(Class<?>)pt.getActualTypeArguments()[0];if(List.class.isAssignableFrom(f.getType())){if(f.get(actual)==null){try{List<Object> l=(f.getType().isInterface())?new ArrayList<>():(List)f.getType().newInstance();l.add((new Gson()).fromJson(newVal,itemType));f.set(actual,l);}catch(InstantiationException ex){Logger.getLogger(StateListenerNew.class.getName()).log(Level.SEVERE,null,ex);log.info(ex.getMessage());}}else {if(index.matches("""")){((List)f.get(actual)).add((new Gson()).fromJson(newVal,itemType));}else {String listName=complete.substring(0,complete.length()-index.length()-1);listName=generalIndexes(listName)+""[]"";listName+=""]"";if(lists.containsKey(listName)){Object toChange=null;String indice=lists.get(listName);List<Object> l=(List)f.get(actual);for(Object item : l){if(item.getClass().getField(indice).get(item).toString().equals(index)){toChange=item;break;}}if(toChange!=null){l.add((new Gson()).fromJson(newVal,itemType));l.remove(toChange);}}}}}else {if(Map.class.isAssignableFrom(f.getType())){if(f.get(actual)==null){try{Map<Object,Object> m=(f.getType().isInterface())?new HashMap<>():(Map)f.getType().newInstance();Class<?> valueType=(Class<?>)pt.getActualTypeArguments()[1];ObjectNode node=(ObjectNode)mapper.readTree(newVal);JsonNode kNode=node.get(""{key}"");node.remove(""{key}"");Object k=(Number.class.isAssignableFrom(itemType))?kNode.asLong():kNode.asText();Object value=valueType.newInstance();Iterator<String> fields=node.fieldNames();while(fields.hasNext()){String fieldName=fields.next();JsonNode v=node.get(fieldName);Field fV=value.getClass().getField(fieldName);if(Number.class.isAssignableFrom(fV.getType())){fV.set(value,v.asDouble());}else {fV.set(value,v.asText());}}m.put(k,value);f.set(actual,m);}catch(InstantiationException ex){Logger.getLogger(StateListenerNew.class.getName()).log(Level.SEVERE,null,ex);}catch(IOException ex){Logger.getLogger(StateListenerNew.class.getName()).log(Level.SEVERE,null,ex);}}else {if(index.matches("""")){try{Class<?> valueType=(Class<?>)pt.getActualTypeArguments()[1];ObjectNode node=(ObjectNode)mapper.readTree(newVal);JsonNode kNode=node.get(""{key}"");node.remove(""{key}"");Object k=(Number.class.isAssignableFrom(itemType))?kNode.asLong():kNode.asText();Object value=valueType.newInstance();Iterator<String> fields=node.fieldNames();while(fields.hasNext()){String fieldName=fields.next();JsonNode v=node.get(fieldName);Field fV=value.getClass().getField(fieldName);if(Number.class.isAssignableFrom(fV.getType())){fV.set(value,v.asDouble());}else {fV.set(value,v.asText());}}((Map)f.get(actual)).put(k,value);}catch(IOException ex){Logger.getLogger(StateListenerNew.class.getName()).log(Level.SEVERE,null,ex);log.info(ex.getMessage());}catch(InstantiationException ex){Logger.getLogger(StateListenerNew.class.getName()).log(Level.SEVERE,null,ex);log.info(ex.getMessage());}}else {String listName=complete.substring(0,complete.length()-index.length()-1);listName=generalIndexes(listName)+""[]"";listName+=""]"";if(lists.containsKey(listName)){Object toChange=null;String indice=lists.get(listName);if(List.class.isAssignableFrom(f.getType())){List<Object> l=(List)f.get(actual);for(Object item : l){if(item.getClass().getField(indice).get(item).toString().equals(index)){toChange=item;break;}}if(toChange!=null){l.add((new Gson()).fromJson(newVal,itemType));l.remove(toChange);}}else {if(Map.class.isAssignableFrom(f.getType())){Map<Object,Object> l=(Map)f.get(actual);for(Object item : l.keySet()){if(item.toString().equals(index)){toChange=item;break;}}if(toChange!=null){l.remove(toChange);}}}}}}}}}else {Field f=actual.getClass().getField(var);f.set(actual,(new Gson()).fromJson(newVal,f.getGenericType()));}}else {if(fs[0].contains(""["")){String listName=complete.substring(0,complete.length()-var.length()+fs[0].length());String idItem=listName.substring(listName.lastIndexOf(""["")+1,listName.lastIndexOf(""]""));listName=listName.substring(0,listName.length()-idItem.length()-2)+""[]"";listName=generalIndexes(listName)+""[]"";String indice=null;if(lists.containsKey(listName)){indice=lists.get(listName);}actual=actual.getClass().getField(fs[0].substring(0,fs[0].length()-idItem.length()-2)).get(actual);if(List.class.isAssignableFrom(actual.getClass())){for(Object litem : (List)actual){boolean correct=litem.getClass().getField(indice).get(litem).toString().equals(idItem);if(correct){setVariable(var.substring(fs[0].length()+1),complete,newVal,litem);}}}else {if(Map.class.isAssignableFrom(actual.getClass())){for(Object litem : ((Map)actual).keySet()){boolean correct=litem.toString().equals(idItem);if(correct){setVariable(var.substring(fs[0].length()+1),complete,newVal,((Map)actual).get(litem));}}}}}else {Field f=actual.getClass().getField(fs[0]);actual=f.get(actual);setVariable(var.substring(fs[0].length()+1),complete,newVal,actual);}}return false;}"
780	"public void setCurso(Curso cursos){this.cursos=cursos;}"
781	"@Override public void kick(String message) throws InvocationTargetException{ProtocolManager protocolManager=ProtocolLibrary.getProtocolManager();PacketContainer kickPacket=protocolManager.createPacket(DISCONNECT);kickPacket.getChatComponents().write(0,WrappedChatComponent.fromText(message));try{protocolManager.sendServerPacket(player,kickPacket);}finally{player.kickPlayer(""Disconnect"");}}"
782	"void setUsers(User user,boolean addSetToTarget){this.users=user;if(user!=null&&addSetToTarget){user.addTransactions(this,false);}}"
783	"protected void putCached(String keySpace,String columnFamily,String key,Map<String,Object> encodedProperties,boolean probablyNew) throws StorageClientException{removeFromCache(keySpace,columnFamily,key);client.insert(keySpace,columnFamily,key,encodedProperties,probablyNew);}"
784	"@Override public boolean onCreateOptionsMenu(Menu menu){return super.onCreateOptionsMenu(menu);}"
785	"@Override public boolean visit(MethodDeclaration node){List<SingleVariableDeclaration> parameters=node.parameters();Type receiverType=node.getReceiverType();if(!parameters.isEmpty()||receiverType!=null){if(receiverType!=null){this.wrapIndexes.add(this.tm.firstIndexIn(receiverType,-1));}int wrappingOption=node.isConstructor()?this.options.alignment_for_parameters_in_constructor_declaration:this.options.alignment_for_parameters_in_method_declaration;this.wrapGroupEnd=this.tm.lastIndexIn(parameters.isEmpty()?receiverType:parameters.get(parameters.size()-1),-1);handleArguments(parameters,wrappingOption);}List<Type> exceptionTypes=node.thrownExceptionTypes();if(!exceptionTypes.isEmpty()){this.wrapParentIndex=this.tm.firstIndexBefore(exceptionTypes.get(0),TokenNameRPAREN);this.wrapGroupEnd=this.tm.lastIndexIn(exceptionTypes.get(exceptionTypes.size()-1),-1);int wrappingOption=node.isConstructor()?this.options.alignment_for_throws_clause_in_constructor_declaration:this.options.alignment_for_throws_clause_in_method_declaration;for(Type exceptionType : exceptionTypes){this.wrapIndexes.add(this.tm.firstIndexIn(exceptionType,-1));}this.wrapIndexes.set(0,this.tm.firstIndexBefore(exceptionTypes.get(0),TokenNamethrows));handleWrap(wrappingOption,0.5);}if(!node.isConstructor()){List<TypeParameter> typeParameters=node.typeParameters();if(!typeParameters.isEmpty()){this.wrapIndexes.add(this.tm.firstIndexIn(typeParameters.get(0),-1));}if(node.getReturnType2()!=null){this.wrapIndexes.add(this.tm.firstIndexIn(node.getReturnType2(),-1));}this.wrapIndexes.add(this.tm.firstIndexIn(node.getName(),-1));this.wrapParentIndex=this.tm.findFirstTokenInLine(this.tm.firstIndexIn(node.getName(),-1));this.wrapGroupEnd=this.tm.lastIndexIn(node.getName(),-1);handleWrap(this.options.alignment_for_method_declaration);}return true;}"
786	"private ImmutableList<Production> convertProductions(ListNode<name.martingeisse.mapag.input.psi.Production> psiProductions){List<Production> productions=new ArrayList<>();for(name.martingeisse.mapag.input.psi.Production psiProduction : psiProductions.getAll()){Production convertedProduction;if(psiProduction instanceof Production_SingleUnnamed){Production_SingleUnnamed typed=(Production_SingleUnnamed)psiProduction;String nonterminal=getText(typed.getNonterminalName());Alternative alternative=convertAlternative(typed.getRightHandSide(),null,typed.getRightHandSide());convertedProduction=new Production(nonterminal,ImmutableList.of(alternative));}else {if(psiProduction instanceof Production_SingleNamed){Production_SingleNamed typed=(Production_SingleNamed)psiProduction;String nonterminal=getText(typed.getNonterminalName());String alternativeName=getText(typed.getAlternativeName());Alternative alternative=convertAlternative(typed.getRightHandSide(),alternativeName,typed.getRightHandSide());convertedProduction=new Production(nonterminal,ImmutableList.of(alternative));}else {if(psiProduction instanceof Production_Multi){Production_Multi typed=(Production_Multi)psiProduction;String nonterminal=getText(typed.getNonterminalName());List<Alternative> alternatives=new ArrayList<>();for(Production_Multi_Alternatives element : typed.getAlternatives().getAll()){if(element instanceof Production_Multi_Alternatives_Unnamed){Production_Multi_Alternatives_Unnamed typedElement=(Production_Multi_Alternatives_Unnamed)element;alternatives.add(convertAlternative(typedElement,null,typedElement.getUnnamed().getRightHandSide()));}else {if(element instanceof Production_Multi_Alternatives_Named){Production_Multi_Alternatives_Named typedElement=(Production_Multi_Alternatives_Named)element;alternatives.add(convertAlternative(typedElement,getText(typedElement.getNamed().getAlternativeName()),typedElement.getNamed().getRightHandSide()));}else {if(failOnErrors){throw new RuntimeException(""unknown multi-alternative production element node: ""+element);}}}}convertedProduction=new Production(nonterminal,ImmutableList.copyOf(alternatives));}else {if(psiProduction instanceof Production_ErrorWithNonterminalNameWithSemicolon||psiProduction instanceof Production_ErrorWithNonterminalNameWithClosingCurlyBrace||psiProduction instanceof Production_ErrorWithNonterminalNameAtEof||psiProduction instanceof Production_ErrorWithoutNonterminalNameWithSemicolon||psiProduction instanceof Production_ErrorWithoutNonterminalNameWithClosingCurlyBrace||psiProduction instanceof Production_ErrorWithoutNonterminalNameAtEof){if(failOnErrors){throw new UserMessageException(""grammar contains errors"");}else {continue;}}else {if(failOnErrors){throw new RuntimeException(""unknown production PSI node: ""+psiProduction);}else {continue;}}}}}productions.add(convertedProduction);backMap.productions.put(convertedProduction,psiProduction);}return ImmutableList.copyOf(productions);}"
787	"@Override public List<Book> getBooksFromReadingList(boolean inList){List<Book> books=new ArrayList<>();long userId=MyLibPreference.getUserId();try{QueryBuilder<Book,Integer> queryBuilder=mDao.queryBuilder();queryBuilder.where().eq(""in_list"",inList).eq(""user_id"",userId);books.addAll(queryBuilder.query());}catch(SQLException e){e.printStackTrace();}return books;}"
788	"@OnItemClick(R.id.prescription_list_view) void onItemClick(int position){String diseaseName=mPresenter.getText(position);if(diseaseName!=null){Intent intent=new Intent(this,PrescriptionDetailActivity.class);intent.putExtra(""disease"",diseaseName);startActivity(intent);}}"
789	"private boolean updateEquilibrium(CommandSender sender,String[] args){if(!sender.isOp()){sender.sendMessage(""You do not have permission to do this!"");return false;}ItemStack stack=CommandUtil.parseItemStack(args[2]);if(stack==null){sender.sendMessage(""Item not in the shop!"");return false;}int equilibrium;try{equilibrium=Integer.parseInt(args[3]);}catch(Exception e){sender.sendMessage(""Parameter not recognized!"");return false;}ItemListing listing=listingDao.findItemListing(stack);listing.setEquilibrium(equilibrium);listingDao.updateItemListing(listing);return true;}"
790	"protected @NotNull VP merge(TypeApi effectiveType,boolean normalizeTags,List<VP> mergedTails,List<VP> varProjections,ProjectionReferenceName defaultReferenceName){if(varProjections.isEmpty()){throw new IllegalArgumentException(""empty list of projections to merge"");} final @NotNull Map<String,TagApi> tags=collectTags(varProjections); final @NotNull Map<String,TP> mergedTags=mergeTags(effectiveType,normalizeTags,tags,varProjections);boolean mergedParenthesized=mergeParenthesized(varProjections,mergedTags); final ProjectionReferenceName mergedRefName=defaultReferenceName==null?buildReferenceName(varProjections,varProjections.get(0).location()):defaultReferenceName;VP res=merge(effectiveType,varProjections,mergedTags,mergedParenthesized,mergedTails);if(mergedRefName!=null){res.setReferenceName(mergedRefName);}return res;}"
791	"@Override public int getFill(){return GridBagConstraints.NONE;}"
792	"private void otherstuff(){saveData=PreferenceManager.getDefaultSharedPreferences(this);audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);autoPhoneState=saveData.getBoolean(PREF_AUTO_PAUSE,false);checkTelephonyState();headsetState();if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){mediaLockscreen();}restoreState();atkey=Helper.getATEKey(this);coloraccent=Config.accentColor(this,atkey);Intent i=new Intent(this,AudioEffects.class);i.setAction(OPEN_EFFECTS);i.putExtra(AUDIO_ID,MediaPlayerSingleton.getInstance().getMediaPlayer().getAudioSessionId());sendBroadcast(i);}"
793	"@Override public void onConnected(Bundle bundle){Location currLocation;if(PermitionsHelper.checkLocationPermitions(this)){currLocation=LocationServices.FusedLocationApi.getLastLocation(client);currCoords=new LatLng(currLocation.getLatitude(),currLocation.getLongitude());LatLng toCoords=new LatLng(currentOrder.getFromCoords().getLatitude(),currentOrder.getFromCoords().getLongitude());getRouteResponse(currCoords,toCoords,R.color.color_route_from_me_to_start_points);}}"
794	"@Override public void sendError(int sc) throws IOException{if(commited){throw new IllegalStateException(""sendError() invoked on a commited response."");}}"
795	"@Override public int getXpThreshold(){return 0;}"
796	"@Override public boolean onNavigationItemSelected(MenuItem menuItem){if(menuItem.getItemId()==R.id.navigation_spinner){}return false;}"
797	"@Override public boolean apply(Object o){return true;}"
798	"@Override public void run(){AnalysisResultView view=(AnalysisResultView)ViewUtils.getViewPart(AnalysisResultView.class.getName());File modelCheckingResultFile=new File(finalOutputFolder+""output.xml"");if(modelCheckingResultFile.exists()&&modelCheckingResultFile.length()>0){try{JAXBContext jaxbContext;jaxbContext=JAXBContext.newInstance(ModelCheckingReport.class.getPackage().getName());Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();ModelCheckingReport modelCheckingReport=(ModelCheckingReport)unmarshaller.unmarshal(modelCheckingResultFile);view.setReport(modelCheckingReport);if(modelCheckingReport!=null){if(!modelCheckingReport.getCheckedProperty().getResult().equals(""satisfied"")){ViewUtils.counterExampleVisible(true);CounterExampleGraphView ceView=(CounterExampleGraphView)ViewUtils.getViewPart(CounterExampleGraphView.class.getName());ceView.update(finalOutputFolder+""output.xml"");}else {ViewUtils.counterExampleVisible(false);}}}catch(JAXBException|IOException e){e.printStackTrace();}}view.update();}"
799	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
800	"@Override public void onAnimationEnd(Animator animation){isAnimHeadToRefresh=false;}"
801	"public ModelNotFoundExceptionCommon(AbstractModel entity){this.entity=entity;this.id=entity.getId();}"
802	"@Override public boolean shouldDecorate(CalendarDay day){return today.equals(day);}"
803	"@Override public int result(){return 0;}"
804	"public boolean isNotSpecified(){return locationUnitConfig==null;}"
805	"@Override public void onClick(View view){if(openPage!=MAP){openPage=MAP;if(EventsFragment.flag==1){Fragment f=new MapFragment();FragmentManager fragmentManager=getSupportFragmentManager();fragmentManager.beginTransaction().replace(R.id.flMiddle,f).commit();UpadateButtonStatus();}}}"
806	"void back(){Intent intent=new Intent(this,MainScreenActivity.class);startActivity(intent);}"
807	"public static void main(String[] args) throws IOException{RedBlackTree<Word> tree=new RedBlackTree<>();tree.setOnDuplicateKeyAction((elem,node) -> node.getValue().addIndex(elem.getFirstLineNumber()));URL url=Lab10.class.getClassLoader().getResource(""text"");File file=new File(url.getPath());WordReader reader=new WordReader(file);reader.readLines().forEach(line -> {  line.getWords().forEach(tree::add);});tree.printInOrder();}"
808	"public void setSelectedContainer(IContainer container){lastSelectedFile=null;PyCoveragePreferences.setLastChosenDir(container);updateErrorMessages();viewer.setInput(container.getLocation().toFile());ProgressOperation.startAction(getSite().getShell(),refreshAction,true);}"
809	"@Override public void resultInfoNotOk(String message){if(isEmpty){mView.showNoData();}}"
810	"@Override public void onBindViewHolder(ViewHolder holder,int position){holder.workoutTitle.setText(workouts.get(position).getWorkoutTitle());holder.workoutDate.setText(workouts.get(position).getDateCompleted());holder.totalTime.setText(workouts.get(position).getTotalTime());holder.minTemp.setText(""min: ""+String.valueOf(workouts.get(position).getMinTemp()));holder.maxTemp.setText(""max: ""+String.valueOf(workouts.get(position).getMaxTemp()));holder.caloriesBurned.setText(String.valueOf(workouts.get(position).getCaloriesBurned()));String enjoyment=workouts.get(position).getEnjoyment();if(!TextUtils.isEmpty(enjoyment)){holder.enjoyment.setText(enjoyment);switch (enjoyment){case WorkoutUtilities.AMAZING :case WorkoutUtilities.GREAT :holder.faceImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.ic_smilie_happy));break;case WorkoutUtilities.GOOD :holder.faceImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.ic_smilie_satisfied));break;case WorkoutUtilities.BAD :holder.faceImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.ic_smilie_sad));break;default :holder.faceImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.ic_smilie_happy));}}String location=workouts.get(position).getLocation();if(!TextUtils.isEmpty(location)){holder.location.setText(location);switch (location){case WorkoutUtilities.AT_HOME :holder.locationImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.account_home));case WorkoutUtilities.AT_WORK :holder.locationImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.account_work));break;case WorkoutUtilities.TRAVELING :holder.locationImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.account_traveling));break;case WorkoutUtilities.ON_THE_GO :holder.locationImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.account_on_the_go));break;default :holder.locationImage.setImageDrawable(getContext().getResources().getDrawable(R.drawable.account_home));}}}"
811	"public static double[][] getData(String symbol,double interval,String period,String market,String columns){try{String url=getUrl(symbol,interval,period,market,columns);String bodyText=Jsoup.connect(url).get().text();String[] bodyTextLines=bodyText.split("" "");String exchange=bodyTextLines[0].replace(""EXCHANGE"","""");double marketOpenMinute=Double.parseDouble(bodyTextLines[1].replace(""MARKET_OPEN_MINUTE="",""""));double marketCloseMinute=Double.parseDouble(bodyTextLines[2].replace(""MARKET_CLOSE_MINUTE="",""""));double timeInterval=Double.parseDouble(bodyTextLines[3].replace(""INTERVAL="",""""));String[] dataColumns=bodyTextLines[4].replace(""COLUMNS="","""").split("","");String dataLog=bodyTextLines[5].replace(""DATA"","""");double timezoneOffset=Double.parseDouble(bodyTextLines[6].replace(""TIMEZONE_OFFSET="",""""));double[][] data=new double[dataColumns.length][bodyTextLines.length-7];String[] dataStringHeader=bodyTextLines[7].split("","");double firstTimeStamp=Double.parseDouble(dataStringHeader[0].replace(""a"",""""));data[0][0]=firstTimeStamp;for(int i=1;i<dataStringHeader.length;++i){data[i][0]=Double.parseDouble(dataStringHeader[i]);}for(int j=1;j<data[0].length;++j){String[] dataString=bodyTextLines[j+7].split("","");data[0][j]=firstTimeStamp+timeInterval*Double.parseDouble(dataString[0]);for(int i=1;i<data.length;++i){data[i][j]=Double.parseDouble(dataString[i]);}}return data;}catch(IOException e){e.printStackTrace();return null;}}"
812	"@Override void load(Transaction tran){if(tran!=null){addString(tran.getMemo());}}"
813	"@Override public Message reply(Message request){Message reponse=new Message();TransactionTOU Tou=new TransactionTOU();ArrayList<String> requeteBody;switch (request.getSubject()){case SYNC :return Server.MESSAGE_SERVICE.receive((String)request.getBody());case P2P :Server.MESSAGE_SERVICE.send(request.getTo(),request);return new Message();case CONNECT :System.out.println(""Connection debut"");reponse.setSubject(Message.Subject.CONNECT);requeteBody=(ArrayList<String>)request.getBody();try{boolean success=Server.DATABASE.connection(requeteBody.get(0),requeteBody.get(1));if(success){User user=Server.DATABASE.recupererUser(requeteBody.get(0));reponse.setBody(Server.DATABASE.recupererCouple(user));}else {reponse.setBody(null);}return reponse;}catch(Exception e){System.out.println(""Connection impossible"");}break;case ACTIONS :reponse.setSubject(Message.Subject.ACTIONS);reponse.setBody(Server.DATABASE.getActionDescList());System.out.println(Server.DATABASE.getActionDescList());return reponse;case ADD_AR :reponse.setSubject(Message.Subject.CONNECT);requeteBody=(ArrayList<String>)request.getBody();try{Server.DATABASE.addActionReal(requeteBody.get(0),requeteBody.get(1),Server.DATABASE.recupererIdAction(requeteBody.get(2)));}catch(Exception e){System.out.println(""Connection impossible"");}break;case TOU_REQUEST :int step=(int)request.getBody();return Tou.run(step);case TOU_HEY :if(Tou.hey()){return Tou.run();}else {return new Message(Message.Subject.TOU_NOTHING);}case TOU_MYPOSITION :ArrayList latlng=(ArrayList)request.getBody();return Tou.run();}return null;}"
814	"@Override public boolean isConditionRespected(){return interaction.getSrcPoint()!=null&&interaction.getEndPt()!=null&&interaction.getSrcObject().isPresent()&&interaction.getSrcObject().get() instanceof MovePtHandler;}"
815	"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){if(isChecked==true){f1.setVisibility(View.VISIBLE);bp1.setVisibility(View.VISIBLE);rt.setVisibility(View.VISIBLE);ch1.setVisibility(View.VISIBLE);ch1.setBase(SystemClock.elapsedRealtime());ch1.start();b1.setEnabled(false);}else {f1.setVisibility(View.INVISIBLE);bp1.setVisibility(View.INVISIBLE);rt.setVisibility(View.INVISIBLE);ch1.setVisibility(View.INVISIBLE);ch1.stop();ch1.setBase(SystemClock.elapsedRealtime());}}"
816	"private void initialiseDao(){ApplicationContext context=ApplicationContextProvider.getContext();if(getPrimePointageFPDao()==null){setPrimePointageFPDao(new PrimePointageFPDao((SirhDao)context.getBean(""sirhDao"")));}if(getCadreEmploiDao()==null){setCadreEmploiDao(new CadreEmploiDao((SirhDao)context.getBean(""sirhDao"")));}if(getNatureAvantageDao()==null){setNatureAvantageDao(new NatureAvantageDao((SirhDao)context.getBean(""sirhDao"")));}if(getSpecialiteDiplomeDao()==null){setSpecialiteDiplomeDao(new SpecialiteDiplomeDao((SirhDao)context.getBean(""sirhDao"")));}if(getTitreDiplomeDao()==null){setTitreDiplomeDao(new TitreDiplomeDao((SirhDao)context.getBean(""sirhDao"")));}if(getTypeAvantageDao()==null){setTypeAvantageDao(new TypeAvantageDao((SirhDao)context.getBean(""sirhDao"")));}if(getTypeDelegationDao()==null){setTypeDelegationDao(new TypeDelegationDao((SirhDao)context.getBean(""sirhDao"")));}if(getTypeRegIndemnDao()==null){setTypeRegIndemnDao(new TypeRegIndemnDao((SirhDao)context.getBean(""sirhDao"")));}if(getAvantageNatureDao()==null){setAvantageNatureDao(new AvantageNatureDao((SirhDao)context.getBean(""sirhDao"")));}if(getDelegationDao()==null){setDelegationDao(new DelegationDao((SirhDao)context.getBean(""sirhDao"")));}if(getRegIndemnDao()==null){setRegIndemnDao(new RegIndemnDao((SirhDao)context.getBean(""sirhDao"")));}if(getTypeCompetenceDao()==null){setTypeCompetenceDao(new TypeCompetenceDao((SirhDao)context.getBean(""sirhDao"")));}if(getDiplomeAgentDao()==null){setDiplomeAgentDao(new DiplomeAgentDao((SirhDao)context.getBean(""sirhDao"")));}if(getTitrePosteDao()==null){setTitrePosteDao(new TitrePosteDao((SirhDao)context.getBean(""sirhDao"")));}if(getStatutFPDao()==null){setStatutFPDao(new StatutFPDao((SirhDao)context.getBean(""sirhDao"")));}if(getBudgetDao()==null){setBudgetDao(new BudgetDao((SirhDao)context.getBean(""sirhDao"")));}if(getCompetenceDao()==null){setCompetenceDao(new CompetenceDao((SirhDao)context.getBean(""sirhDao"")));}if(getCompetenceFPDao()==null){setCompetenceFPDao(new CompetenceFPDao((SirhDao)context.getBean(""sirhDao"")));}if(getActiviteDao()==null){setActiviteDao(new ActiviteDao((SirhDao)context.getBean(""sirhDao"")));}if(getActiviteFPDao()==null){setActiviteFPDao(new ActiviteFPDao((SirhDao)context.getBean(""sirhDao"")));}if(getFichePosteDao()==null){setFichePosteDao(new FichePosteDao((SirhDao)context.getBean(""sirhDao"")));}if(getAffectationDao()==null){setAffectationDao(new AffectationDao((SirhDao)context.getBean(""sirhDao"")));}if(getAgentDao()==null){setAgentDao(new AgentDao((SirhDao)context.getBean(""sirhDao"")));}if(null==adsService){adsService=(AdsService)context.getBean(""adsService"");}if(null==ptgService){ptgService=(PtgService)context.getBean(""ptgService"");}if(null==sirhService){sirhService=(ISirhService)context.getBean(""sirhService"");}}"
817	"public static float[] algo(float[] data_in,int rank,int left){int size_of_data=data_in.length;float[] data_out=new float[size_of_data];data_out=data_in;System.out.println(size_of_data);System.out.println(""rank est ""+rank);System.out.println(""rank""+size_of_data/(2*rank));for(int i=0;i<(size_of_data/(2*rank));i++){data_out[i]=(float)0.5*(data_in[2*i]+data_in[2*i+1]);}int j=0;for(int i=size_of_data/(2*rank);i<size_of_data/rank;i++){data_out[i]=(float)0.5*(data_in[2*j]-data_in[2*j+1]);j++;}if(left==1){return data_out;}else {rank=rank+1;left=left-1;return (algo(data_out,rank,left));}}"
818	"private boolean processFile(HttpServletRequest request,HttpServletResponse response) throws IOException{String url=request.getRequestURI();url=url.substring(Math.min(url.length(),contextLength+1));String acceptedEncodings=request.getHeader(""accept-encoding"");boolean gzip=acceptedEncodings!=null&&acceptedEncodings.indexOf(""gzip"")!=-1;if(gzip&&NOGZIP_PATTERN.matcher(url.toLowerCase()).find()){gzip=false;}String gzipExt="""";if(!hasAttachment(url)){gzipExt="".gz"";if(!gzip||!hasAttachment(url+gzipExt)){return false;}gzip=false;response.setHeader(""Content-Encoding"",""gzip"");}InputStream is=DatabaseBean.getAttachment(url+gzipExt);if(is!=null){response.setContentType(URLConnection.guessContentTypeFromName(url));OutputStream os=response.getOutputStream();GZIPOutputStream gzos=null;try{byte data[]=new byte[1024*1024];int len=0;while((len=is.read(data,0,data.length))>0){if(gzip&&gzos==null&&data.length>=860){response.setHeader(""Content-Encoding"",""gzip"");gzos=new GZIPOutputStream(os);}(gzos!=null?gzos:os).write(data,0,len);}if(gzos!=null){gzos.finish();gzos.close();}else {os.flush();}}catch(Exception e){e.printStackTrace();response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);}finally{is.close();os.close();}return true;}return false;}"
819	"@Override public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
820	"@Override public void visit(IfElseBranch node){Type retType=null;Command condition=(Command)node.condition();check(condition);Type t=getType(condition);if(t instanceof AddressType){t=((AddressType)t).base();}BoolType bt=new BoolType();if(!bt.equivalent(t)){put(node,new ErrorType(""IfElseBranch requires bool condition not ""+t+"".""));}StatementList then_block=node.thenBlock();StatementList else_block=node.elseBlock();check(then_block);if(else_block.size()>0){check(else_block);if(getType(then_block) instanceof VoidType){retType=getType(then_block);}else {if(getType(else_block) instanceof VoidType){retType=getType(else_block);}else {retType=getType(then_block);}}}else {retType=getType(then_block) instanceof VoidType?getType(then_block):new VoidType();}put(node,retType);}"
821	"@Override public void run(){System.out.println(""Listening to Mars..."");Map<String,Integer> topicCountMap=new HashMap<String,Integer>();topicCountMap.put(TOPIC,new Integer(1));Map<String,List<KafkaStream<byte[],byte[]>>> consumerMap=consumerConnector.createMessageStreams(topicCountMap);KafkaStream<byte[],byte[]> stream=consumerMap.get(TOPIC).get(0);ConsumerIterator<byte[],byte[]> it=stream.iterator();int messageCount=0;while(it.hasNext()){System.out.println(""======================== MESSAGE ================================== ""+messageCount);try{RoverStatusOuterClass.RoverStatus received=(RoverStatusOuterClass.RoverStatus.parseFrom(it.next().message()));System.out.println(received);if(received.getModuleReporting()==Module.SCIENCE.getValue()){SpectrometerScan scan=SpectrometerScan.parseFrom(received.getModuleMessage());System.out.println(scan);}else {if(received.getModuleReporting()==Module.CAMERA_SENSOR.getValue()){byte[] imageBytes=received.getModuleMessage().toByteArray();if(imageBytes!=null){try{BufferedImage imag=ImageIO.read(new ByteArrayInputStream(imageBytes));JFrame frame=new JFrame();frame.setBounds(0,0,1000,1000);frame.getContentPane().add(new ImageUtil(imag));frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);frame.setVisible(true);}catch(IOException e){e.printStackTrace();}}}else {if(received.getModuleReporting()==Module.DIAGNOSTICS.getValue()){HeartBeatOuterClass.HeartBeat heartBeat=HeartBeatOuterClass.HeartBeat.parseFrom(received.getModuleMessage().toByteArray());System.out.println(heartBeat);}}}System.out.println(""ERT = ""+System.currentTimeMillis());System.out.println(""OWLT = ""+(System.currentTimeMillis()-received.getSCET()));}catch(InvalidProtocolBufferException e){e.printStackTrace();}messageCount++;}}"
822	"@Override public void run(){instance.setPlaying(true);}"
823	"@Override public void exportGroupRemoveVolumes(URI vplexURI,URI exportURI,List<URI> volumeURIs,String opId) throws ControllerException{String volListStr="""";ExportRemoveVolumeCompleter completer=null;boolean hasSteps=false;try{_log.info(""entering export group remove volumes"");WorkflowStepCompleter.stepExecuting(opId);completer=new ExportRemoveVolumeCompleter(exportURI,volumeURIs,opId);volListStr=Joiner.on(',').join(volumeURIs);validator.volumeURIs(volumeURIs,false,false,ValCk.ID);Workflow workflow=_workflowService.getNewWorkflow(this,EXPORT_GROUP_REMOVE_VOLUMES,false,opId);StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);ExportGroup exportGroup=getDataObject(ExportGroup.class,exportURI,_dbClient);List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,vplex.getId());StringBuffer errorMessages=new StringBuffer();boolean isValidationNeeded=validatorConfig.isValidationEnabled();_log.info(""Orchestration level validation needed : {}"",isValidationNeeded);VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);String previousStep=null;for(ExportMask exportMask : exportMasks){if(exportMask.getInactive()){_log.info(String.format(""ExportMask %s (%s) is inactive, skipping"",exportMask.getMaskName(),exportMask.getId()));continue;}String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);Map<String,String> targetPortToPwwnMap=VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName);VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());_log.info(""Refreshing ExportMask {}"",exportMask.getMaskName());VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,targetPortToPwwnMap,_networkDeviceController);List<URI> volumeURIList=new ArrayList<URI>();List<URI> remainingVolumesInMask=new ArrayList<URI>();if(exportMask.getVolumes()!=null&&!exportMask.getVolumes().isEmpty()){List<ExportGroup> otherExportGroups=ExportUtils.getOtherExportGroups(exportGroup,exportMask,_dbClient);if(otherExportGroups!=null&&!otherExportGroups.isEmpty()){volumeURIList=getVolumeListDiff(exportGroup,exportMask,otherExportGroups,volumeURIs);}else {volumeURIList=volumeURIs;}Map<URI,BlockObject> blockObjectMap=VPlexUtil.translateRPSnapshots(_dbClient,volumeURIList);volumeURIList.clear();volumeURIList.addAll(blockObjectMap.keySet());volumeURIList=ExportMaskUtils.filterVolumesByExportMask(volumeURIList,exportMask);for(String volumeURI : exportMask.getVolumes().keySet()){remainingVolumesInMask.add(URI.create(volumeURI));}remainingVolumesInMask.removeAll(volumeURIList);}_log.info(String.format(""exportGroupRemove: mask %s volumes to process: %s"",exportMask.getMaskName(),volumeURIList.toString()));exportMask=_dbClient.queryObject(ExportMask.class,exportMask.getId());boolean existingVolumes=exportMask.hasAnyExistingVolumes();boolean existingInitiators=exportMask.hasAnyExistingInitiators();boolean canMaskBeDeleted=remainingVolumesInMask.isEmpty()&&!existingInitiators&&!existingVolumes;if(!canMaskBeDeleted){_log.info(""this mask is not empty, so just updating: ""+exportMask.getMaskName());completer.addExportMaskToRemovedVolumeMapping(exportMask.getId(),volumeURIList);Workflow.Method storageViewRemoveVolume=storageViewRemoveVolumesMethod(vplex.getId(),exportMask,volumeURIList,opId,completer,null);previousStep=workflow.createStep(""removeVolumes"",String.format(""Removing volumes from export on storage array %s (%s) for export mask %s (%s)"",vplex.getNativeGuid(),vplex.getId().toString(),exportMask.getMaskName(),exportMask.getId()),previousStep,vplex.getId(),vplex.getSystemType(),this.getClass(),storageViewRemoveVolume,rollbackMethodNullMethod(),null);List<NetworkZoningParam> zoningParam=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),Collections.singletonList(exportMask.getId()),_dbClient);Workflow.Method zoneRemoveVolumesMethod=_networkDeviceController.zoneExportRemoveVolumesMethod(zoningParam,volumeURIList);previousStep=workflow.createStep(null,""Zone remove volumes mask: ""+exportMask.getMaskName(),previousStep,nullURI,""network-system"",_networkDeviceController.getClass(),zoneRemoveVolumesMethod,_networkDeviceController.zoneNullRollbackMethod(),null);hasSteps=true;}else {_log.info(""this mask is empty of ViPR-managed volumes, and there are no existing volumes or initiators, so deleting: ""+exportMask.getMaskName());List<NetworkZoningParam> zoningParams=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportURI,Collections.singletonList(exportMask.getId()),_dbClient);hasSteps=true;String exportMaskDeleteStep=workflow.createStepId();Workflow.Method deleteStorageView=deleteStorageViewMethod(vplexURI,exportURI,exportMask.getId());previousStep=workflow.createStep(DELETE_STORAGE_VIEW,String.format(""Deleting storage view: %s (%s)"",exportMask.getMaskName(),exportMask.getId()),previousStep,vplexURI,vplex.getSystemType(),this.getClass(),deleteStorageView,null,exportMaskDeleteStep);previousStep=workflow.createStep(ZONING_STEP,""Zoning subtask for export-group: ""+exportURI,previousStep,NullColumnValueGetter.getNullURI(),""network-system"",_networkDeviceController.getClass(),_networkDeviceController.zoneExportRemoveVolumesMethod(zoningParams,volumeURIs),null,workflow.createStepId());}}if(hasSteps){String message=errorMessages.toString();if(isValidationNeeded&&!message.isEmpty()){_log.error(""Error Message {}"",errorMessages);List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeURIs);String volumesForDisplay=Joiner.on("", "").join(Collections2.transform(volumes,CommonTransformerFunctions.fctnDataObjectToForDisplay()));throw DeviceControllerException.exceptions.removeVolumesValidationError(volumesForDisplay,vplex.forDisplay(),message);}workflow.executePlan(completer,String.format(""Sucessfully removed volumes or deleted Storage View: %s (%s)"",exportGroup.getLabel(),exportGroup.getId()));}else {completer.ready(_dbClient);}}catch(VPlexApiException vae){String message=String.format(""Failed to remove Volume %s from ExportGroup %s"",volListStr,exportURI);_log.error(message,vae);failStep(completer,opId,vae);}catch(Exception ex){String message=String.format(""Failed to remove Volume %s from ExportGroup %s"",volListStr,exportURI);_log.error(message,ex);String opName=ResourceOperationTypeEnum.DELETE_EXPORT_VOLUME.getName();ServiceError serviceError=VPlexApiException.errors.exportGroupRemoveVolumesFailed(volListStr,exportURI.toString(),opName,ex);failStep(completer,opId,serviceError);}}"
824	"public static void main(String[] args) throws IOException{ERPMock erp=new ERPMock(args[0]);new Thread(new Runnable(){  @Override public void run(){    while (true) {      try {        ServerSocket serv=new ServerSocket(9000);        System.out.println(""lausche"");        Socket sock=serv.accept();        BufferedReader read=new BufferedReader(new InputStreamReader(sock.getInputStream()));        String s="""";        String buff=read.readLine();        while (buff != null) {          buff=read.readLine();          if (buff != null && !buff.equals(""null"")) {            s=s + buff;          }        }        erp.send(s);        read.close();        serv.close();      } catch (      Exception e) {        e.printStackTrace();      }    }  }}).start();}"
825	"public static void grade(HttpServletRequest request,Study study,GradeGroup group,User user){String query=""INSERT INTO ""+group.getGrade_name()+"" "";Photo photo=new Photo(study,request.getParameter(""photo""));String parameters=""(grader"";String values=""VALUES ('""+user.getName();for(int i=0;i<group.groupBySize();i++){String key=group.getGroupBy(i).getPhoto_attribute();parameters+="", ""+key;values+=""', '""+photo.getField(key);}for(int i=0;i<group.questionSize();i++){parameters+="", ""+group.getQuestion(i).getLabel();values+=""', '""+getAnswer(request,group.getQuestion(i));}parameters+="") "";values+=""')"";Query.update(query+parameters+values);}"
826	"@Override protected boolean word(int base,int u3,long[] a3,long[] b3,long mask){return (a3[u3]&=~(b3[u3]&mask))==0L;}"
827	"@Override public boolean isContinue(Result result){return true;}"
828	"@Override public Map<String,Integer> getSksDiperoleh(Mahasiswa mahasiswa,List<PengelompokanKurikulum> listkelompok){Map<String,Integer> sksDiperoleh=new HashMap<String,Integer>();List<PengambilanMataKuliah> listPengambilan=getTranskripMahasiswa(mahasiswa);for(PengelompokanKurikulum kelompok : listkelompok){sksDiperoleh.put(kelompok.getKelompokmatakuliah().getKode_kelompok(),0);}for(PengambilanMataKuliah pengambilan : listPengambilan){for(PengelompokanKurikulum kelompok : listkelompok){List<MataKuliah> listMatkulKelompok=kelompok.getKelompokmatakuliah().getMatkulkelompok();if(listMatkulKelompok.contains(pengambilan.getMata_kuliah())){String kodeKelompok=kelompok.getKelompokmatakuliah().getKode_kelompok();int target=sksDiperoleh.get(kelompok.getKelompokmatakuliah().getKode_kelompok())+pengambilan.getBobot();sksDiperoleh.put(kodeKelompok,target);break;}}}if(sksDiperoleh!=null){return sksDiperoleh;}return null;}"
829	"@Override public double apply(double... args){return 0;}"
830	"private static boolean determineRPSourceJournalMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,List<RPVPlexMigration> potentialMigrations,StringBuffer notSuppReasonBuff,DbClient dbClient){boolean invalidMigration=false;String currentSourceJournalVarrayId=NullColumnValueGetter.getStringValue(currentVpool.getJournalVarray());String currentSourceJournalVpoolId=NullColumnValueGetter.getStringValue(currentVpool.getJournalVpool());String newSourceJournalVarrayId=NullColumnValueGetter.getStringValue(newVpool.getJournalVarray());String newSourceJournalVpoolId=NullColumnValueGetter.getStringValue(newVpool.getJournalVpool());if(currentSourceJournalVarrayId.equals(NullColumnValueGetter.getNullStr())){currentSourceJournalVarrayId=volume.getVirtualArray().toString();}if(currentSourceJournalVpoolId.equals(NullColumnValueGetter.getNullStr())){currentSourceJournalVpoolId=currentVpool.getId().toString();}if(newSourceJournalVarrayId.equals(NullColumnValueGetter.getNullStr())){newSourceJournalVarrayId=volume.getVirtualArray().toString();}if(newSourceJournalVpoolId.equals(NullColumnValueGetter.getNullStr())){newSourceJournalVpoolId=newVpool.getId().toString();}VirtualPool currentSourceJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(currentSourceJournalVpoolId));VirtualPool newSourceJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(newSourceJournalVpoolId));if(!currentSourceJournalVpoolId.equals(newSourceJournalVpoolId)){if(currentSourceJournalVarrayId.equals(newSourceJournalVarrayId)&&VirtualPool.vPoolSpecifiesHighAvailability(currentSourceJournalVpool)&&VirtualPool.vPoolSpecifiesHighAvailability(newSourceJournalVpool)){potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.METADATA,Volume.PersonalityTypes.SOURCE,URI.create(currentSourceJournalVarrayId),currentSourceJournalVpool,newSourceJournalVpool));}else {notSuppReasonBuff.append(""Not valid for migration due to changes in RP Source Journal virtual pool / virtual array."");invalidMigration=true;}}return invalidMigration;}"
831	"@Override public boolean isTopicTracker(){return WAComponent.getByName(getName()).get().isTopicTracker();}"
832	"@Override public int compare(MessageInfoHolder object1,MessageInfoHolder object2){return (object1.flagged?0:1)-(object2.flagged?0:1);}"
833	"@Override public void loadKB(String kb){try{if(m_engine.isShutingDown()){m_engine=new XSBSubprocessEngine(m_xsbBinPath);}try(PrintWriter writer=new PrintWriter(m_transKBFile)){writer.println("":- table(memterm/2)."");writer.println("":- table(sloterm/3)."");writer.println("":- table(prdsloterm/4)."");for(int i=2;i<11;i++){writer.println("":- table(tupterm/""+i+"")."");writer.println("":- table(prdtupterm/""+(i+1)+"")."");}writer.println("":- set_prolog_flag(unknown,fail)."");writer.print(kb);}}catch(FileNotFoundException e){throw new PSOATransRunException(e);}if(m_engine.consultAbsolute(m_transKBFile)){String path=m_transKBFile.getPath();path=path.substring(0,path.length()-2).concat(""xwam"");File xwamFile=new File(path);if(xwamFile.exists()){xwamFile.deleteOnExit();}}else {m_engine.interrupt();throw new PSOATransRunException(""Failed to load KB"");}}"
834	"@Override public boolean onPressed(){showingGUI=!showingGUI;return false;}"
835	"@Override public void onFailure(Call<LaunchResponse> call,Throwable t){isLaunchByDate=false;dataSaver.sendResult(new Result(Constants.ACTION_GET_PREV_LAUNCHES,false,call,t.getLocalizedMessage()));}"
836	"@Override public boolean onOptionsItemSelected(MenuItem item){int id=item.getItemId();return super.onOptionsItemSelected(item);}"
837	"@Override protected void onPostExecute(JSONObject result){super.onPostExecute(result);mProgressDialog.dismiss();try{if(result!=null&&result.getString(""STATUS"").equalsIgnoreCase(""SUCCESS"")){JSONArray addressJsonArray=result.getJSONArray(""DATA"");mAddresstList=new ArrayList<Address>();for(int i=0;i<addressJsonArray.length();i++){Address addressItem=new Address();addressItem.setAddId(addressJsonArray.getJSONObject(i).getString(""add_id""));addressItem.setAddUserId(addressJsonArray.getJSONObject(i).getString(""add_usr_id""));addressItem.setAddFullName(addressJsonArray.getJSONObject(i).getString(""add_fullname""));addressItem.setAddPhone(addressJsonArray.getJSONObject(i).getString(""add_phone""));addressItem.setAddAddress1(addressJsonArray.getJSONObject(i).getString(""add_address1""));addressItem.setAddAddress2(addressJsonArray.getJSONObject(i).getString(""add_address2""));addressItem.setAddLandmark(addressJsonArray.getJSONObject(i).getString(""add_landmark""));addressItem.setAddCity(addressJsonArray.getJSONObject(i).getString(""add_city""));addressItem.setAddZipCodeName(addressJsonArray.getJSONObject(i).getString(""zip_code""));addressItem.setAddZipCode(addressJsonArray.getJSONObject(i).getString(""add_zipcode""));addressItem.setAddCreatedDate(addressJsonArray.getJSONObject(i).getString(""add_createddate""));addressItem.setAddUpdatedDate(addressJsonArray.getJSONObject(i).getString(""add_updateddate""));addressItem.setAddStatus(addressJsonArray.getJSONObject(i).getString(""add_status""));mAddresstList.add(addressItem);}if(mAddresstList.size()>0){llEmptyAddress.setVisibility(View.GONE);addressListView.setVisibility(View.VISIBLE);addressListView.setAdapter(new AddressAdapter(this,mAddresstList));}else {llEmptyAddress.setVisibility(View.VISIBLE);addressListView.setVisibility(View.GONE);}}}catch(JSONException e){e.printStackTrace();}}"
838	"public boolean update(Pose2d robotPose,long timestamp){double time=(timestamp-pathStartTimestamp)/1000.0;if(time>path.duration()){drive.setVelocity(new Vector2d(0,0),0);return false;}Pose2d pose=path.getPose(time);Pose2d poseVelocity=path.getPoseVelocity(time);Pose2d poseAcceleration=path.getPoseAcceleration(time);MotionState headingState=new MotionState(pose.heading(),poseVelocity.heading(),poseAcceleration.heading(),0,0);headingController.setSetpoint(headingState);double headingError=headingController.getPositionError(robotPose.heading());double headingUpdate=headingController.update(headingError,time);Vector2d fieldError=robotPose.pos().added(pose.pos().negated());Vector2d robotError=fieldError.rotated(robotPose.heading());double axialError=robotError.x();double lateralError=robotError.y();MotionState axialState=new MotionState(pose.x(),poseVelocity.x(),poseAcceleration.x(),0,0);axialController.setSetpoint(axialState);double axialUpdate=axialController.update(axialError,time);lateralController.setSetpoint(pose.y());double lateralUpdate=lateralController.update(lateralError,time);drive.setVelocity(new Vector2d(axialUpdate,lateralUpdate),headingUpdate);return false;}"
839	"@Override public void onProgressUpdate(DeckTask.TaskData... values){}"
840	"@Override public void onResponse(ShardUpsertResponse shardUpsertResponse){processResponse(shardUpsertResponse);}"
841	"@Override @SideOnly(Side.CLIENT) public SubGui getGui(EntityPlayer player,NBTTagCompound nbt,LittleTile tile){if(tile.isStructureBlock&&tile.structure instanceof LittleStorage){return new SubGuiStorage((LittleStorage)tile.structure);}return null;}"
842	"private ViewGroup addRightView(RnrFormItem item,boolean isHeaderView){ViewGroup inflate=inflateRightView();TextView tvIssuedUnit=(TextView)inflate.findViewById(R.id.tv_issued_unit);TextView tvInitialAmount=(TextView)inflate.findViewById(R.id.tv_initial_amount);TextView tvReceived=(TextView)inflate.findViewById(R.id.tv_received);TextView tvIssued=(TextView)inflate.findViewById(R.id.tv_issued);TextView tvAdjustment=(TextView)inflate.findViewById(R.id.tv_adjustment);TextView tvInventory=(TextView)inflate.findViewById(R.id.tv_inventory);TextView tvValidate=(TextView)inflate.findViewById(R.id.tv_validate);if(isHeaderView){tvIssuedUnit.setText(R.string.label_issued_unit);tvInitialAmount.setText(R.string.label_initial_amount);tvReceived.setText(R.string.label_received_mmia);tvIssued.setText(R.string.label_issued_mmia);tvAdjustment.setText(R.string.label_adjustment);tvInventory.setText(R.string.label_inventory);tvValidate.setText(R.string.label_validate);inflate.setBackgroundResource(R.color.color_mmia_info_name);}else {tvIssuedUnit.setText(item.getProduct().getStrength());tvInitialAmount.setText(String.valueOf(item.getInitialAmount()));tvReceived.setText(String.valueOf(item.getReceived()));tvIssued.setText(String.valueOf(item.getIssued()));tvAdjustment.setText(String.valueOf(item.getAdjustment()));tvInventory.setText(String.valueOf(item.getInventory()));try{if(item.getValidate()!=null){tvValidate.setText(DateUtil.convertDate(item.getValidate(),""dd/MM/yyyy"",""MMM yyyy""));}}catch(ParseException e){e.printStackTrace();}}rightViewGroup.addView(inflate);return inflate;}"
843	"@Override public boolean apply(MetadataReference t){return t.reference_scope.equalsIgnoreCase(ReferenceScope.GeoPackage.toString())&&t.column_name!=null;}"
844	"private void fireTimers(long newWatermark){TimerInternals.TimerData timerData;while((timerData=eventTimeTimersQueue.peek())!=null&&timerData.getTimestamp().getMillis()<=newWatermark){for(Pair<DoFnExecutor,Object> keyedExecutor : timerDataToKeyedExecutors.get(timerData)){keyedExecutor.getFirst().onTimer(keyedExecutor.getSecond(),timerData);}eventTimeTimersQueue.remove();timerDataToKeyedExecutors.remove(timerData);}}"
845	"public ControlRoomGUI(String x){this();name=x;ControlRoomName.setText(""Welcome Employees of ""+x.toUpperCase()+"" Control Room"");query=""Select * from ""+name;query2=""UPDATE ""+name+"" SET `signal`='0' WHERE `signal`='1' "";String trainNo="""",Signals="""";try{int count=0;ResultSet rs;Class.forName(""com.mysql.jdbc.Driver"");conn=DriverManager.getConnection(""jdbc:mysql://sql12.freesqldatabase.com:3306/sql12169908?"",""sql12169908"",""4sBAijYEGl"");java.sql.PreparedStatement pst=conn.prepareStatement(query);rs=pst.executeQuery();while(rs.next()){String r,q,s;r=rs.getString(""train_no"");q=rs.getString(""signal"");int t=rs.getInt(""speed_limit"");if(q.compareTo(""0"")==0){s=""RED"";}else {s=""GREEN"";}trainNo=trainNo+r+""+""+q+""+""+t+"" "";count++;trainList.addElement(new CustomTrainArrayList(r,s));}}catch(Exception e){e.printStackTrace();}JList<CustomTrainArrayList> TrainTableData=new JList<CustomTrainArrayList>(trainList);jScrollPane1.setViewportView(TrainTableData);TrainTableData.setCellRenderer(new TrainDataRenderer(name));}"
846	"@Override public int getHireAddUp(){return 0;}"
847	"@Override public void handleIncomingData(AbstractData serverData){if(!(serverData instanceof DataLightConnections)){return ;}for(String dimStr : ((DataLightConnections)serverData).clientReadBuffer.getKeySet()){int dimId=Integer.parseInt(dimStr);NBTTagList list=((DataLightConnections)serverData).clientReadBuffer.getTagList(dimStr,10);Map<BlockPos,List<BlockPos>> connectionMap=clientPosBuffer.get(dimId);if(connectionMap==null){connectionMap=new HashMap<>();clientPosBuffer.put(dimId,connectionMap);}for(int i=0;i<list.tagCount();i++){NBTTagCompound connection=list.getCompoundTagAt(i);if(connection.hasKey(""clear"")){clientPosBuffer.remove(dimId);break;}BlockPos start=BlockPos.fromLong(connection.getLong(""sta""));BlockPos end=BlockPos.fromLong(connection.getLong(""end""));boolean set=connection.getBoolean(""s"");List<BlockPos> to=connectionMap.get(start);if(set){if(to==null){to=new LinkedList<>();connectionMap.put(start,to);}to.add(end);}else {if(to!=null){to.remove(end);if(to.isEmpty()){connectionMap.remove(start);}}}}if(connectionMap.isEmpty()){clientPosBuffer.remove(dimId);}}}"
848	"public void a(OEntityLightningBolt var1){if((Boolean)manager.callHook(PluginLoader.Hook.DAMAGE,PluginLoader.DamageType.LIGHTNING,null,entity,5)){return ;}this.a(5);++this.by;if(this.by==0){this.by=300;}}"
849	"@Override public void write(int c) throws IOException{if(firstChar){out.write(counter+++""\t""+c);}else {out.write(c);}}"
850	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
851	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();setFocusDeferred(true);}"
852	"@Override public void onClick(View v){int position=(Integer)v.getTag();ParseObject movie=mMovies.get(position);VoteHelper.vote(getActivity(),movie,true,mMovieRatings);mRecyclerView.getAdapter().notifyItemChanged(position);}"
853	"public void onClick(View v){BaseNavDrawerActivity activity=(BaseNavDrawerActivity)mContext;switch (getLayoutPosition()){case 1 :activity.openSettings();break;case 2 :activity.logout();break;default :throw new IllegalArgumentException();}}"
854	"@Override public void run(){while(true){getOnlineMove();Log.d(""THREAD"",""IS MY TURN: ""+isMyTurn);try{Thread.sleep(2000);}catch(InterruptedException e){e.printStackTrace();}}}"
855	"@Override public void onInit(){super.onInit();mExposureLocation=GLES20.glGetUniformLocation(getProgram(),""exposure"");}"
856	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
857	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
858	"@Override public void onClick(View view){gender=true;gender_man.setVisibility(View.VISIBLE);noSelectGender_man.setVisibility(View.INVISIBLE);if(gender_woman.getVisibility()==View.VISIBLE){gender_woman.setVisibility(View.INVISIBLE);noSelectGender_woman.setVisibility(View.VISIBLE);}}"
859	"public static int asInt(String intString,int defaultVal){try{return Integer.parseInt(intString);}catch(NumberFormatException|NullPointerException e){LOG.info(e.getMessage());return defaultVal;}}"
860	"public VerifierOptions(){this(true,true,true,true);}"
861	"public void perform(){if(type!=null){System.out.println();ShopHandler.buy(type);}}"
862	"@Override public void run(){button2.setPressed(true);}"
863	"@Override public void onClick(DialogInterface dialog,int which){}"
864	"public boolean getFileNameFromContentUrl(JSONArray data,CallbackContext context){}"
865	"@Override public int getCode(){return E.INVALID_SESSION_ID;}"
866	"public void launch(){try{windowicons=new ByteBuffer{Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_16x16.png""))),Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_32x32.png""))),Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_48x48.png""))),Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_64x64.png""))),Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_128x128.png""))),Resources.importImageToByteBuffer(ImageIO.read(Game.class.getResource(Resources.dirRes+""icon_256x256.png"")))};}catch(IOException e){}setupOpenGLDisplay(name,windowicons,isFullscreen,isVSync);try{Display.create();Keyboard.create();Controllers.create();}catch(LWJGLException e){}setupOpenGLContext();Resources.init();room=new BETAgamestate();controllers.add(new VC_Keyboard(Keyboard.KEY_LEFT,Keyboard.KEY_RIGHT,Keyboard.KEY_UP,Keyboard.KEY_DOWN,Keyboard.KEY_C,Keyboard.KEY_X,Keyboard.KEY_Z));int rot=0;while(running){{{Mouse.poll();if(Keyboard.isKeyDown(Keyboard.KEY_W)){betaVec=new Vector3f(betaVec.x,betaVec.y+betaVecMoveSpeed,betaVec.z);}if(Keyboard.isKeyDown(Keyboard.KEY_A)){betaVec=new Vector3f(betaVec.x-betaVecMoveSpeed,betaVec.y,betaVec.z);}if(Keyboard.isKeyDown(Keyboard.KEY_S)){betaVec=new Vector3f(betaVec.x,betaVec.y-betaVecMoveSpeed,betaVec.z);}if(Keyboard.isKeyDown(Keyboard.KEY_D)){betaVec=new Vector3f(betaVec.x+betaVecMoveSpeed,betaVec.y,betaVec.z);}if(Keyboard.isKeyDown(Keyboard.KEY_Q)){betaVec=new Vector3f(betaVec.x,betaVec.y,betaVec.z-betaVecMoveSpeed);}if(Keyboard.isKeyDown(Keyboard.KEY_E)){betaVec=new Vector3f(betaVec.x,betaVec.y,betaVec.z+betaVecMoveSpeed);}for(VirtualController controller : controllers){controller.pumpInput();}Resources.mainCamera.setAngle(new Vector3f(0,rot,0));}{Resources.mainCamera.updateCamera();Resources.updateResources();room.update();}{glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);glLoadIdentity();glPushMatrix();{glLight(GL_LIGHT0,GL_POSITION,Resources.asFloatBuffer(new float{Display.getWidth()/2,Display.getHeight()/2,100,1}));System.out.println(betaVec);glTranslatef(-Resources.mainCamera.getPosition().x,-Resources.mainCamera.getPosition().y,0);{glRotatef(Resources.mainCamera.getAngle().x,1,0,0);glRotatef(Resources.mainCamera.getAngle().y,0,1,0);glRotatef(Resources.mainCamera.getAngle().z,0,0,1);room.render();}glAccum(GL_MULT,0.5);glAccum(GL_ACCUM,0.5);glAccum(GL_RETURN,1.0);}glPopMatrix();}}if(Display.isCloseRequested()){running=false;}if(displayWidth!=Display.getWidth()||displayHeight!=Display.getHeight()){setupOpenGLContext();}Display.update();Display.sync((int)fps);}Display.destroy();Keyboard.destroy();Controllers.destroy();}"
867	"private String processOutgoingPath0(Path p){return p!=null?toAbsolutePath(p).toString():null;}"
868	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_album_display);gridView=(GridView)findViewById(R.id.displayAlbumGrid);albumId=getIntent().getExtras().get(AlbumActivity.ALBUM_ID).toString();cb=(CheckBox)findViewById(R.id.privacyCheckBox);addPhotoButton=(Button)findViewById(R.id.add_photo_btn);updateAlbumButton=(Button)findViewById(R.id.update_album);deleteAlbum=(Button)findViewById(R.id.delete_album);ParseQuery<ParseObject> query=ParseQuery.getQuery(""Picture"");Log.d(""demo"",""album id: ""+albumId);query.whereEqualTo(""albumId"",albumId);query.findInBackground(new FindCallback<ParseObject>(){  @Override public void done(  List<ParseObject> list,  ParseException e){    Log.d(""demo"",""received "" + list.size() + "" pictures"");    pictures=list;    setupData();    ParseACL acl=pictures.get(0).getACL();    String albumName=pictures.get(0).get(""albumName"").toString();    setTitle(albumName);    if (acl.getWriteAccess(ParseUser.getCurrentUser())) {      cb.setChecked(!acl.getPublicReadAccess());      cb.setVisibility(View.VISIBLE);      addPhotoButton.setVisibility(View.VISIBLE);      updateAlbumButton.setVisibility(View.VISIBLE);      deleteAlbum.setVisibility(View.VISIBLE);    } else {      TextView tv=(TextView)findViewById(R.id.privacyTextBox);      String privacySetting=acl.getPublicReadAccess() ? ""Public"" : ""Private"";      tv.setText(privacySetting);      tv.setVisibility(View.VISIBLE);    }  }});}"
869	"@Override public void onUnexpectedError(Exception e){onError();}"
870	"@Override public void onSingleManifest(HlsPlaylist playlist){LoadControl loadControl=new DefaultLoadControl(new DefaultAllocator(BUFFER_SEGMENT_SIZE));DefaultBandwidthMeter bandwidthMeter=new DefaultBandwidthMeter(player.getMainHandler(),player);int[] variantIndices=null;if(playlist instanceof HlsMasterPlaylist){HlsMasterPlaylist masterPlaylist=(HlsMasterPlaylist)playlist;try{variantIndices=VideoFormatSelectorUtil.selectVideoFormatsForDefaultDisplay(context,masterPlaylist.variants,null,false);}catch(MediaCodecUtil.DecoderQueryException e){callback.onRenderersError(e);return ;}}DataSource dataSource=new DefaultUriDataSource(context,bandwidthMeter,userAgent);HlsChunkSource chunkSource=new HlsChunkSource(dataSource,uri,playlist,bandwidthMeter,variantIndices,HlsChunkSource.ADAPTIVE_MODE_SPLICE,audioCapabilities);HlsSampleSource sampleSource=new HlsSampleSource(chunkSource,loadControl,BUFFER_SEGMENTS*BUFFER_SEGMENT_SIZE,player.getMainHandler(),player,EMExoPlayer.RENDER_VIDEO_INDEX);MediaCodecVideoTrackRenderer videoRenderer=new MediaCodecVideoTrackRenderer(sampleSource,MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,MAX_JOIN_TIME,player.getMainHandler(),player,DROPPED_FRAME_NOTIFICATION_AMOUNT);MediaCodecAudioTrackRenderer audioRenderer=new MediaCodecAudioTrackRenderer(sampleSource);MetadataTrackRenderer<Map<String,Object>> id3Renderer=new MetadataTrackRenderer<>(sampleSource,new Id3Parser(),player,player.getMainHandler().getLooper());TrackRenderer[] renderers=new TrackRenderer[EMExoPlayer.RENDER_COUNT];renderers[EMExoPlayer.RENDER_VIDEO_INDEX]=videoRenderer;renderers[EMExoPlayer.RENDER_AUDIO_INDEX]=audioRenderer;renderers[EMExoPlayer.RENDER_TIMED_METADATA_INDEX]=id3Renderer;callback.onRenderers(null,null,renderers,bandwidthMeter);}"
871	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
872	"public void delMsgRetract(Message msg){for(Message message : mMsgList){if(msg.getServerMessageId().equals(message.getServerMessageId())){i=mMsgList.indexOf(message);forDel.add(message);}}mMsgList.removeAll(forDel);mMsgList.add(i,msg);notifyDataSetChanged();}"
873	"@Override public int getColor(int index){return values[index];}"
874	"@Override public Iterator<VertexProperty<V>> properties(String... keys){accessCheck.accessProperties();if(mixin==NO_MIXIN){return super.properties(keys);}if(keys!=null&&keys.length>0){int count=0;for(int i=0;i<keys.length;i++){if(mixin.supports(keys[i])){count++;}}if(count==0){return super.properties(keys);}else {if(count==keys.length){return mixin.properties(keys);}}}return (Iterator)com.google.common.collect.Iterators.concat(super.properties(keys),mixin.properties(keys));}"
875	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);mRootRef=new Firebase(""https://lut-lappeenranta.firebaseio.com/"");mAuth=FirebaseAuth.getInstance();host=(TabHost)findViewById(R.id.tabhost);host.setup();TabHost.TabSpec spec2=host.newTabSpec(""Statistics"");spec2.setContent(R.id.statistics);spec2.setIndicator(""Statistics"");host.addTab(spec2);if(!mAuth.getCurrentUser().isAnonymous()){TabHost.TabSpec spec1=host.newTabSpec(""Devices"");spec1.setContent(R.id.devices);spec1.setIndicator(""Devices"");host.addTab(spec1);TabHost.TabSpec spec3=host.newTabSpec(""Profile"");spec3.setContent(R.id.profile);spec3.setIndicator(""Profile"");host.addTab(spec3);String tag=getIntent().getStringExtra(""TAG"");if(tag!=null){host.setCurrentTabByTag(tag);}else {host.setCurrentTabByTag(""Devices"");}}mStatisticsCategorySpinner=(Spinner)findViewById(R.id.statisticsCategorySpinner);mStatisticsBrandsAutoComplete=(MultiAutoCompleteTextView)findViewById(R.id.statisticsBrandsAutoComplete);mStatisticsModelsAutoComplete=(MultiAutoCompleteTextView)findViewById(R.id.statisticsModelsAutoComplete);mStatisticsSearchButton=(Button)findViewById(R.id.statisticsSearchButton);categories=new ArrayList<>();condition=new ArrayList<>();categoryAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,categories);conditionAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,condition);mStatisticsCategorySpinner.setAdapter(conditionAdapter);brands=new ArrayList<>();brandAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,brands);mStatisticsBrandsAutoComplete.setAdapter(brandAdapter);mStatisticsBrandsAutoComplete.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());modelOfBrand=new ArrayList<>();modelAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,modelOfBrand);mStatisticsModelsAutoComplete.setAdapter(modelAdapter);mStatisticsModelsAutoComplete.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());mRootRef.child(""Brand"").addChildEventListener(new SimpleChildListener(){  @Override public void onChildAdded(  DataSnapshot dataSnapshot,  String s){    Log.d(""Brands"",""Load Brand: "" + dataSnapshot.getKey().toString());    FirebaseCrash.log(""Load Brand: "" + dataSnapshot.getKey().toString());    brands.add(dataSnapshot.getKey());    brandAdapter.notifyDataSetChanged();  }});mStatisticsBrandsAutoComplete.addTextChangedListener(new TextWatcher(){  @Override public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){  }  @Override public void onTextChanged(  CharSequence s,  int start,  int before,  int count){  }  @Override public void afterTextChanged(  Editable s){    brandChanged=true;    Log.d(""Model"",""Brand changed"");    FirebaseCrash.log(""Brand changed"");  }});mStatisticsModelsAutoComplete.setOnFocusChangeListener(new View.OnFocusChangeListener(){  @Override public void onFocusChange(  View v,  boolean hasFocus){    if (brandChanged) {      modelOfBrand.removeAll(modelOfBrand);      modelAdapter.notifyDataSetChanged();      modelMap=new HashMap<>();      Log.d(""Model"",""Models clear"");      FirebaseCrash.log(""Models clear"");      String[] uncleanedBrandList=mStatisticsBrandsAutoComplete.getText().toString().split("","");      ArrayList<String> brandList=new ArrayList<>();      String cleanedBrand;      for (      String brand : uncleanedBrandList) {        cleanedBrand=Utils.removeSpace(brand);        if (cleanedBrand != null) {          brandList.add(cleanedBrand);        }      }      brandModelMap=new HashMap<>();      for (      String brand : brandList) {        mRootRef.child(""Brand"").child(brand).child(""Model"").addListenerForSingleValueEvent(new CallableValueEventListener<String>(brand,new CallableForFirebase<String>(){          @Override public void call(          String param,          DataSnapshot data){            ArrayList<String> models=new ArrayList<>();            for (            DataSnapshot snapshot : data.getChildren()) {              String value=snapshot.getValue().toString();              modelOfBrand.add(value);              models.add(value);              modelAdapter.notifyDataSetChanged();              modelMap.put(value,snapshot.getKey());              Log.d(""Model"",""Load model: "" + value);              FirebaseCrash.log(""Load model: "" + value);            }            brandChanged=false;            brandModelMap.put(param,models);            Log.d(""Model"",""Model updated"");            FirebaseCrash.log(""Model updated"");          }        }));      }    }  }});mStatisticsSearchButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Map<String,String> brandModelParamMap=new HashMap<>();    ArrayList<String> models=Utils.cleanFromTokenizer(mStatisticsModelsAutoComplete.getText().toString());    ArrayList<String> brands=Utils.cleanFromTokenizer(mStatisticsBrandsAutoComplete.getText().toString());    ArrayList<Object> callableParam=new ArrayList<>();    callableParam.add(brands);    callableParam.add(models);    callableParam.add(brandModelParamMap);    Counter triggerObserver=new Counter(0);    Trigger<Counter> listTrigger=new Trigger<>(new Condition<Counter>(triggerObserver,models){      @Override public boolean isTrue(){        return this.getObserver().get() == ((ArrayList<String>)getExtra()).size();      }    },new Callable<Counter>(callableParam){      @Override public void call(      Counter data){        ArrayList<String> brands=((ArrayList<String>)((ArrayList<Object>)getExtra()).get(0));        ArrayList<String> models=((ArrayList<String>)((ArrayList<Object>)getExtra()).get(1));        Map<String,String> brandModelParamMap=((Map<String,String>)((ArrayList<Object>)getExtra()).get(2));        for (        String brand : brands) {          for (          String model : models) {            if (brandModelMap.get(brand).contains(model)) {              brandModelParamMap.put(model,brand);            }          }        }        Intent statisticIntent=new Intent(Main.this,Statistics.class);        String modelBase=""MODEL"";        String brandBase=""BRAND"";        int i=1;        for (        Map.Entry<String,String> entry : brandModelParamMap.entrySet()) {          statisticIntent.putExtra(modelBase + i,modelMap.get(entry.getKey()));          statisticIntent.putExtra(brandBase + i,entry.getValue());          i++;        }        Log.d(""Search"",""Start activity with map: "" + brandModelParamMap.toString());        FirebaseCrash.log(""Start activity with map: "" + brandModelParamMap.toString());        startActivity(statisticIntent);      }    });    for (    String model : models) {      ArrayList<Object> param=new ArrayList<>();      param.add(model);      param.add(listTrigger);      if (modelMap.get(model) == null) {        Toast.makeText(Main.this,""Cannot find model: "" + model,Toast.LENGTH_SHORT).show();        break;      } else {        mRootRef.child(""Statistics"").child(""Models"").child(modelMap.get(model)).addListenerForSingleValueEvent(new CallableValueEventListener<ArrayList<Object>>(param,new CallableForFirebase<ArrayList<Object>>(){          @Override public void call(          ArrayList<Object> param,          DataSnapshot data){            Trigger<Counter> trigger=((Trigger<Counter>)param.get(1));            if (data.getValue() != null) {              trigger.getCondition().getObserver().add(1);              trigger.onChange();            } else {              Toast.makeText(Main.this,""There is no statistic for the model: "" + ((String)param.get(0)),Toast.LENGTH_LONG).show();            }          }        }));      }    }  }});if(!mAuth.getCurrentUser().isAnonymous()){mAddDeviceButton=(FloatingActionButton)findViewById(R.id.addDeviceButton);mAddDeviceButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(Main.this,AddDevice.class));  }});mDeviceList=findViewById(R.id.deviceList);devices=new ArrayList<>();deviceListAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,devices);mDeviceList.setAdapter(deviceListAdapter);deviceIdMap=new HashMap<>();mRootRef.child(""User"").child(mAuth.getCurrentUser().getUid()).child(""Devices"").addChildEventListener(new SimpleChildListener(){  @Override public void onChildAdded(  DataSnapshot dataSnapshot,  String s){    final Firebase device=mRootRef.child(""Device"").child(dataSnapshot.getKey());    String deviceId=dataSnapshot.getKey();    device.child(""modelName"").addListenerForSingleValueEvent(new CallableValueEventListener<String>(deviceId,new CallableForFirebase<String>(){      @Override public void call(      String param,      DataSnapshot data){        if (data.getValue() != null) {          ArrayList<String> paramPack=new ArrayList<>();          if (data.getValue() == null) {            FirebaseCrash.report(new Exception());          }          String modelId=data.getValue().toString();          paramPack.add(param);          paramPack.add(modelId);          device.child(""brandName"").addListenerForSingleValueEvent(new CallableValueEventListener<ArrayList<String>>(paramPack,new CallableForFirebase<ArrayList<String>>(){            @Override public void call(            ArrayList<String> param,            DataSnapshot data){              if (data.getValue() != null) {                String brandName=data.getValue().toString();                param.add(brandName);                device.child(""unknownModel"").addListenerForSingleValueEvent(new CallableValueEventListener<ArrayList<String>>(param,new CallableForFirebase<ArrayList<String>>(){                  @Override public void call(                  ArrayList<String> param,                  DataSnapshot data){                    if (data.getValue() != null) {                      mRootRef.child(""UnknownBrand_Model"").child(""Brand"").child(param.get(2)).child(""Model"").child(param.get(1)).child(""Name"").addListenerForSingleValueEvent(new CallableValueEventListener<String>(param.get(0),new CallableForFirebase<String>(){                        @Override public void call(                        String param,                        DataSnapshot data){                          String modelName=data.getValue().toString();                          deviceIdMap.put(modelName,param);                          Log.d(""DeviceList"",""Load Device: "" + modelName);                          FirebaseCrash.log(""Load Device: "" + modelName);                          devices.add(modelName);                          deviceListAdapter.notifyDataSetChanged();                        }                      }));                    } else {                      mRootRef.child(""Brand"").child(param.get(2)).child(""Model"").child(param.get(1)).addListenerForSingleValueEvent(new CallableValueEventListener<String>(param.get(0),new CallableForFirebase<String>(){                        @Override public void call(                        String param,                        DataSnapshot data){                          String modelName=data.getValue().toString();                          deviceIdMap.put(modelName,param);                          Log.d(""DeviceList"",""Load Device: "" + modelName);                          FirebaseCrash.log(""Load Device: "" + modelName);                          devices.add(modelName);                          deviceListAdapter.notifyDataSetChanged();                        }                      }));                    }                  }                }));              }            }          }));        }      }    }));  }});mDeviceList.setOnItemClickListener(new AdapterView.OnItemClickListener(){  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){    Intent intent=new Intent(Main.this,DeviceDetail.class);    String deviceModel=mDeviceList.getItemAtPosition(position).toString();    String deviceId=deviceIdMap.get(deviceModel);    Log.d(""ListElement"",""Number: "" + deviceId);    intent.putExtra(""DeviceId"",deviceId);    startActivity(intent);  }});mProfileEmailTextView=(TextView)findViewById(R.id.profileEmailTextView);mProfileNumberOfDevices=(TextView)findViewById(R.id.profileNumberOfDevices);mDevicesText=findViewById(R.id.DevicesTextView);mProfileLogOutButton=(Button)findViewById(R.id.profileLougOutButton);mEditProfileButton=(FloatingActionButton)findViewById(R.id.editProfileButton);mProfileEmailTextView.setText(mAuth.getCurrentUser().getEmail());mRootRef.child(""User"").child(mAuth.getCurrentUser().getUid()).child(""Devices"").addListenerForSingleValueEvent(new SimpleValueListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    long count=dataSnapshot.getChildrenCount();    if (count == 1) {      mDevicesText.setText(""Device"");    }    mProfileNumberOfDevices.setText(Long.toString(count));  }});currentUser=mAuth.getCurrentUser();mProfileLogOutButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    mAuth.signOut();    if (currentUser.isAnonymous()) {      currentUser.delete();    }    startActivity(new Intent(Main.this,LogIn.class));  }});mEditProfileButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(Main.this,EditProfile.class));  }});}else {LinearLayout mDevices=findViewById(R.id.devices);LinearLayout mProfile=findViewById(R.id.profile);((ViewGroup)mDevices.getParent()).removeView(mDevices);((ViewGroup)mProfile.getParent()).removeView(mProfile);}}"
876	"@Override public int compare(org.orcid.jaxb.model.v3.dev1.record.summary.WorkGroup o1,org.orcid.jaxb.model.v3.dev1.record.summary.WorkGroup o2){int comparison=o1.getWorkSummary().get(0).getTitle().getTitle().getContent().compareTo(o2.getWorkSummary().get(0).getTitle().getTitle().getContent());if(comparison==0){comparison=o1.getWorkSummary().get(0).getTitle().getSubtitle().getContent().compareTo(o2.getWorkSummary().get(0).getTitle().getSubtitle().getContent());}return comparison;}"
877	"public static void main(String[] args){System.out.println(""hello"");Controller c=new Controller();}"
878	"public Process launch() throws IOException{printInfos();ProcessBuilder pb=new ProcessBuilder();ArrayList<String> commands=new ArrayList<String>();commands.add(getJavaPath());if(System.getProperty(""os.name"").toLowerCase().contains(""mac"")){commands.addAll(Arrays.asList(getMacArgs()));}commands.addAll(Arrays.asList(launchInfos.getVmArgs()));commands.add(""-cp"");commands.add(constructClasspath());commands.add(launcherInfos.getMainClass());String entireCommand="""";for(String cmd : commands){entireCommand+=cmd+""\n"";}System.out.println(""[OpenLauncherLib] Entire command : "");System.out.println(entireCommand);System.out.println(""[OpenLauncherLib] Launching launcher"");pb.directory(launcherClasspath.getLauncher().getParentFile());pb.command(commands);Process p=pb.start();System.out.println(""[OpenLauncherLib] Successfully launched"");File logsFile=launcherClasspath.getLauncher().getParentFile();Util.printAndWriteProcessOutput(p,logsFile);return p;}"
879	"private void resetGame(){playMusicMain();gameOver=false;basket.setX(gameSize/2);basket.setY(gameSize-100);item.setX(randomX);item.setY(0);item.createBounds(item.getX(),item.getY(),item.getWidth(),item.getHeight());score=0;lives=3;}"
880	"@Override protected void onPostExecute(String data){if(data!=null&&!data.isEmpty()){try{try{hashValue=MD5Hash(data.getBytes(""UTF-8""));}catch(UnsupportedEncodingException e){e.printStackTrace();}}catch(NoSuchAlgorithmException e){e.printStackTrace();}Webpage webpage=new Webpage(insertedURL,hashValue,"""");Save(webpage);Toast.makeText(getApplicationContext(),""URL: ""+webpage.getUrl()+""\n""+""Hash code: ""+Arrays.toString(webpage.getHash())+""\n""+""Saved in ""+webpage.getStorage(),Toast.LENGTH_LONG).show();return ;}}"
881	"private void setAdapters(){ final ListView iView=(ListView)getActivity().findViewById(R.id.ingredients_component);if(component.equals(""Ingredients"")){if(ingredients==null||ingredients.size()==0){populateIngredients();}iAdapter=new IngredientAdapter(getActivity(),R.layout.ingredients_item,ingredients);}else {if(component.equals(""Directions"")){}}}"
882	"public static void main(String[] args){config=new GenerationConfig(args);try{loadData();generateAnnotationSheet();}catch(IOException e){e.printStackTrace();}}"
883	"public int setPower(Battle b,ActivePokemon me,ActivePokemon o){return this.power;}"
884	"public static void main(String args) throws IOException,ClassNotFoundException,InterruptedException{HamaConfiguration conf=new HamaConfiguration();GraphJob pageJob=new GraphJob(conf,PageRank.class);pageJob.setJobName(""Page Rank"");pageJob.setInputFormat(TextInputFormat.class);pageJob.setInputKeyClass(LongWritable.class);pageJob.setInputValueClass(LongWritable.class);pageJob.setOutputFormat(TextOutputFormat.class);pageJob.setOutputKeyClass(LongWritable.class);pageJob.setOutputValueClass(LongWritable.class);pageJob.setInputPath(new Path(args[0]));pageJob.setOutputPath(new Path(args[1]));pageJob.setGraphMessageClass(LongWritable.class);pageJob.waitForCompletion(true);}"
885	"@Override public boolean onOptionsItemSelected(MenuItem menuItem){switch (menuItem.getItemId()){case R.id.mainMenuItemOpt1 :try{new DataFetcher(this).execute(new URL(""http://recetario.hol.es/selects.php""));}catch(MalformedURLException e){e.printStackTrace();}break;case R.id.mainMenuItemOpt2 :break;case R.id.mainMenuItemOpt3 :Intent intentCrearReceta=new Intent(this,CrearReceta.class);this.startActivity(intentCrearReceta);break;case R.id.mainMenuItemOpt4 :currentUser=null;Toast.makeText(this,""Desconectado"",Toast.LENGTH_SHORT).show();break;case R.id.mainMenu2ItemOpt1 :try{new DataFetcher(this).execute(new URL(""http://recetario.hol.es/selects.php""));}catch(MalformedURLException e){e.printStackTrace();}break;case R.id.mainMenu2ItemOpt2 :Intent intentLogin2=new Intent(this,Login.class);this.startActivityForResult(intentLogin2,REQUEST_CODE);break;case R.id.mainMenu2ItemOpt3 :Intent intentRegistro=new Intent(this,Registro.class);this.startActivity(intentRegistro);break;}return true;}"
886	"private void loadPlugins(){for(Map.Entry<PluginClassLoader,Boolean> entry : pluginClassLoaders.entrySet()){if(entry.getValue()){Constructor<AbstractPlugin> constructor=null;try{constructor=(Constructor<AbstractPlugin>)entry.getKey().getPluginClass().getConstructor();AbstractPlugin plugin=constructor.newInstance();PluginInformation pluginInfo=plugin.onLoad();loadedPlugins.put(pluginInfo,plugin);}catch(Exception e){e.printStackTrace();}}}}"
887	"@Override public void onChildAdded(DataSnapshot dataSnapshot,String s){String channelID=""myChannel"";NotificationChannel mChannel=null;int importance=NotificationManager.IMPORTANCE_HIGH;Notification.Builder notification=new Notification.Builder(context).setSmallIcon(R.drawable.ic_account_box_black_24dp);if(Build.VERSION.SDK_INT<Build.VERSION_CODES.O){notification.setContentTitle(""Food Reservation"").setDefaults(Notification.DEFAULT_ALL).setPriority(Notification.PRIORITY_HIGH).setAutoCancel(true);}else {mChannel=new NotificationChannel(channelID,""Food Reservation"",importance);mChannel.enableVibration(true);mChannel.enableLights(true);mChannel.setLightColor(Color.BLUE);notificationManager.createNotificationChannel(mChannel);notification.setChannelId(channelID);}getConsumerNameForReservationNotification(notificationManager,notification,dataSnapshot.getKey());}"
888	"public void onServiceConnected(ComponentName name,IBinder service){Log.d(TAG,""onServiceConnected: "");PlayerService.PlayerServiceBinder pb=(PlayerService.PlayerServiceBinder)service;mPlayerService=pb.getPlayService();}"
889	"@Override public void generate(ClassStructureBuilder<?> bodyBlockBuilder,Injectable injectable,DependencyGraph graph,InjectionContext injectionContext,TreeLogger logger,GeneratorContext context){controller=new FactoryController(injectable.getInjectedType(),injectable.getFactoryName());preGenerationHook(bodyBlockBuilder,injectable,graph,injectionContext); final List<Statement> factoryInitStatements=generateFactoryInitStatements(bodyBlockBuilder,injectable,graph,injectionContext); final List<Statement> createInstanceStatements=generateCreateInstanceStatements(bodyBlockBuilder,injectable,graph,injectionContext); final List<Statement> destroyInstanceStatements=generateDestroyInstanceStatements(bodyBlockBuilder,injectable,graph,injectionContext); final List<Statement> invokePostConstructStatements=generateInovkePostConstructsStatements(bodyBlockBuilder,injectable,graph,injectionContext);implementFactoryInit(bodyBlockBuilder,injectable,factoryInitStatements);implementCreateInstance(bodyBlockBuilder,injectable,createInstanceStatements);implementDestroyInstance(bodyBlockBuilder,injectable,destroyInstanceStatements);implementInvokePostConstructs(bodyBlockBuilder,injectable,invokePostConstructStatements);implementCreateProxy(bodyBlockBuilder,injectable);implementGetHandle(bodyBlockBuilder,injectable);}"
890	"public Double przelew(Double amount,Client odbiorca){Double saldo=clientId.getSaldo();if(amount!=null&&amount>0){if(saldo!=null&&saldo>amount){Double saldoOdbiorcy=odbiorca.getSaldo();saldoOdbiorcy+=amount;clientId.setHistory(history);saldo-=amount;System.out.println(""saldo odbiorcy""+saldoOdbiorcy);}}System.out.println(""nasze saldo: ""+saldo);return saldo;}"
891	"private List<Recipe> filterRecipes(){List<MenuWrapper.Menu.Recipe> recipes=getIntent().getParcelableArrayListExtra(RECIPES);return CollectionUtils.filter(recipes,recipe -> {  List<String> allergens=AllergenDialog.getSelectedAllergens();  allergens.retainAll(recipe.getAllergenList());  return !allergens.isEmpty();});}"
892	"@Override public boolean hasNext(){return si.hasNext();}"
893	"public CompositeCommand<T,V> build(){return compositeCommand;}"
894	"@Override public boolean apply(PluginMetadata input){return !input.isCore();}"
895	"public int rob(int[] nums){}"
896	"@ConditionalOnMissingBean(name=""casSamlServiceSuccessView"") @RefreshScope @Bean public View casSamlServiceSuccessView(){return new Saml10SuccessResponseView(protocolAttributeEncoder,servicesManager,casProperties.getAuthn().getMfa().getAuthenticationContextAttribute(),saml10ObjectBuilder(),new DefaultArgumentExtractor(new SamlServiceFactory()),StandardCharsets.UTF_8.name(),casProperties.getSamlCore().getSkewAllowance(),casProperties.getSamlCore().getIssuer(),casProperties.getSamlCore().getAttributeNamespace());}"
897	"@Override public int update(T model,Class<T> modelClass) throws SQLException{Verify.notNull(model);Verify.notNull(modelClass);DataBindExpress express=this.expressFactory.getDataBindExpress(modelClass,validatorFactory);SqlStruct sqlStruct=express.getUpdate(model);try(Connection conn=datasource.getConnection()){try(PreparedStatement preparedStatement=conn.prepareStatement(sqlStruct.getSql())){setParams(sqlStruct,preparedStatement);return preparedStatement.executeUpdate();}}}"
898	"private void loadHighlightsFragment(){findViewById(R.id.btn_contents).setSelected(false);findViewById(R.id.btn_highlights).setSelected(true);HighlightFragment highlightFragment=HighlightFragment.newInstance(mBookTitle);FragmentTransaction ft=getSupportFragmentManager().beginTransaction();ft.replace(R.id.parent,highlightFragment);ft.commit();}"
899	"@Override public void check() throws SemanticCheckException{}"
900	"@Override public JsonElement serialize(Getter src,Type typeOfSrc,JsonSerializationContext context){if(src instanceof GetterConstant){return context.serialize(((GetterConstant)src).constant);}else {if(src instanceof GetterDynamic){return context.serialize(((GetterDynamic)src).callers);}}return null;}"
901	"@Override public void channelUnregistered(ChannelHandlerContext ctx){System.out.println(""Someone disconnected to the server"");clients.remove(ctx.channel());}"
902	"public void setTestNotifications(Context context){Notification confirmIdentity=new Notification(new Date(),""content"",ClientManager.accountNumber,NotificationStatus.PENDING);Notification confirmTransaction=new Notification(new Date(),""content"",ClientManager.accountNumber,NotificationStatus.PENDING,55);Gson gson=new Gson(); final SharedPreferences sharedPreferences=context.getSharedPreferences(""PREFS"",Context.MODE_PRIVATE); final SharedPreferences.Editor editor=sharedPreferences.edit();Set<String> edited=new HashSet<>();edited.add(gson.toJson(confirmIdentity));edited.add(gson.toJson(confirmTransaction));editor.putStringSet(""notifications"",edited);editor.apply();Notification confirmTransaction2=new Notification(new Date(),""content"",ClientManager.accountNumber,NotificationStatus.REJECTED,1424);SharedPreferencesHelper.addToNotifications(context,confirmTransaction2);SharedPreferencesHelper.editNotificationStatus(context,confirmTransaction.getId(),NotificationStatus.CONFIRMED);}"
903	"@Override Object evaluate(EvaluationContext context){return lhs.isTrue(context)||rhs.isTrue(context);}"
904	"@Override public void onCheckedChanged(CompoundButton compoundButton,boolean b){prefs.edit().putBoolean(PreferenceUtils.PREF_INVERSE_TEXT_COLORS,b).apply();if(b&&highContrastSwitch.isChecked()){highContrastSwitch.setChecked(false);}else {updateNotification();}}"
905	"public void printCandidates(ConsoleReader reader,Collection<CharSequence> candidates) throws IOException{Set<CharSequence> distinct=new HashSet<CharSequence>(candidates);if(distinct.size()>reader.getAutoprintThreshold()){reader.print(Messages.DISPLAY_CANDIDATES.format(candidates.size()));reader.flush();int c;String noOpt=Messages.DISPLAY_CANDIDATES_NO.format();String yesOpt=Messages.DISPLAY_CANDIDATES_YES.format();char[] allowed={yesOpt.charAt(0),noOpt.charAt(0)};while((c=reader.readCharacter(allowed))!=-1){String tmp=new String(new char{(char)c});if(noOpt.startsWith(tmp)){reader.println();return ;}else {if(yesOpt.startsWith(tmp)){break;}else {reader.beep();}}}}if(distinct.size()!=candidates.size()){Collection<CharSequence> copy=new ArrayList<CharSequence>();for(CharSequence next : candidates){if(!copy.contains(next)){copy.add(next);}}candidates=copy;}reader.println();Collection<CharSequence> colorizedCandidates=new ArrayList<CharSequence>();for(CharSequence seq : candidates){boolean processed=false;if(commandHolder.getState()!=null){CommandMetadata command=commandHolder.getState().getCommand();if((command!=null)&&seq.toString().startsWith(""--"")){String str=seq.toString().trim();if(str.startsWith(""--"")){str=str.substring(2);}if(command.hasOption(str)&&command.getNamedOption(str).isRequired()){seq=shell.renderColor(ShellColor.BLUE,seq.toString());colorizedCandidates.add(seq);processed=true;}}}if(!processed){colorizedCandidates.add(seq);}}reader.printColumns(colorizedCandidates);}"
906	"@Override public InputStream toAsciiStream(OptimizedElementArray row,int columnPosition,LobService lobService) throws SQLException{return new ReaderInputStream(new StringReader(toString(row,columnPosition)),StandardCharsets.US_ASCII);}"
907	"@Override public boolean isEnabled(){return debugTarget!=null&&(debugTarget instanceof IStep&&((IStep)debugTarget).canStepOver());}"
908	"@Override public AbsPage zClickButton(Button button) throws HarnessException{logger.info(myPageName()+"" zClickButton(""+button+"")"");String locator=null;if(button==Button.B_OK){locator=""css=div[id='""+Locators.zDialogShareId+""'] td[id^='OK'] td[id$='_title']"";}else {if(button==Button.B_CANCEL){locator=""css=div[id='""+Locators.zDialogShareId+""'] td[id^='Cancel'] td[id$='_title']"";}else {throw new HarnessException(""Button ""+button+"" not implemented"");}}this.zClick(locator);zWaitForBusyOverlay();if(button==Button.B_OK){Stafpostqueue sp=new Stafpostqueue();sp.waitForPostqueue();}return (null);}"
909	"private void updateFunctionPoints(){ final TreeSet<Point2D.Float> functionPoints=transferFunction.getFunctionPoints();DefaultTableModel model=new DefaultTableModel(new String{""Transfer function points""},0);for(Point2D.Float point : functionPoints){model.addRow(new Point2D.Float{point});}pointTable.setModel(model);model.addTableModelListener(new TableModelListener(){  @Override public void tableChanged(  TableModelEvent e){    if (e.getType() == TableModelEvent.UPDATE) {      if (e.getColumn() == 0) {        Point2D.Float[] newPoints=new Point2D.Float[functionPoints.size()];        Point2D.Float[] oldPoints=new Point2D.Float[functionPoints.size()];        functionPoints.toArray(newPoints);        transferFunction.getFunctionPoints().toArray(oldPoints);        transferFunction.updateFunctionPoint(oldPoints[e.getFirstRow()],newPoints[e.getFirstRow()]);      }    }  }});PointCellEditor pointCellEditor=new PointCellEditor();pointTable.getColumnModel().getColumn(0).setCellEditor(pointCellEditor);pointTable.getColumnModel().getColumn(0).setCellRenderer(pointCellEditor);}"
910	"@Override public E get(int i){if((i<0)||(i>size)){throw new IndexOutOfBoundsException(""Index: ""+i+"" size: ""+size);}if(i>=focusStartIndex){int focusOffset=i-focusStartIndex;if(focusOffset<focusLength){return focus[focusOffset];}i-=focusLength;}return root.get(i);}"
911	"@Override public void run(){if(!BJokeCancle.canceled&&sec>=0){event.getMessage().getTextChannel().sendMessage(sec+""..."").queue();sec--;}else {if(!BJokeCancle.canceled){event.getMessage().getTextChannel().sendMessage(""Haha, ""+event.getMessage().getMentionedUsers().get(0).getAsMention()+"", nieman hat ?ber deinen schlechten Witz gelacht!"").queue();gc.moveVoiceMember(victim,event.getGuild().getVoiceChannels().get(0)).queue();try{gc.setNickname(victim,victim.getNickname()+"" der Unlustige"").queue();}catch(PermissionException e){event.getMessage().getTextChannel().sendMessage(""[ERROR] Can't modify a member with higher or equal highest role than the bot!"").queue();}timer.cancel();}else {timer.cancel();}}}"
912	"public void train(ArrayList<float[]> samples){param.kernel_type=svm_parameter.POLY;param.svm_type=svm_parameter.C_SVC;param.degree=3;param.gamma=0;param.coef0=0;param.nu=0.5;param.cache_size=40;param.C=1;param.eps=0.001;param.p=0.1;param.shrinking=1;param.probability=0;param.nr_weight=0;param.weight_label=new int[0];param.weight=new double[0];problem.l=samples.size();problem.x=new svm_node[problem.l];problem.y=new double[problem.l];for(int i=0;i<problem.l;i++){float[] s=samples.get(i);for(int j=0;j<6;j++){problem.x[i][j].value=s[j];problem.x[i][j].index=j+1;}problem.y[i]=s[6];}model=svm.svm_train(problem,param);}"
913	"@Override public BendingStyle read(ByteBuf buf,BendingData data){int id=buf.readInt();if(id==-1){return null;}return BendingStyles.get(id);}"
914	"public void setModel(Datastore datastore,boolean retainSelection){ final Column previousItem=getSelectedItem();setTable(null);if(datastore==null){setDatastoreConnection(null);setModel(new DefaultComboBoxModel<>(new String[1]));}else { final DatastoreConnection con=setDatastoreConnection(datastore.openConnection());int selectedIndex=0; final List<Object> comboBoxList=new ArrayList<>();comboBoxList.add(null); final Schema[] schemas=con.getSchemaNavigator().getSchemas();Arrays.sort(schemas,new SchemaComparator());for(Schema schema : schemas){comboBoxList.add(schema);if(!MetaModelHelper.isInformationSchema(schema)){ final Table[] tables=schema.getTables();for(Table table : tables){try{ final Column[] columns=table.getColumns();if(columns!=null&&columns.length>0){comboBoxList.add(table);for(Column column : columns){comboBoxList.add(column);if(column==previousItem){selectedIndex=comboBoxList.size()-1;}}}}catch(Exception e){logger.error(""Error occurred getting columns of table: {}"",table);}}}} final ComboBoxModel<Object> model=new DefaultComboBoxModel<>(comboBoxList.toArray());setModel(model);if(retainSelection){setSelectedIndex(selectedIndex);}}}"
915	"public boolean a(Entity entity){return ((entity instanceof EntityLiving))&&(((EntityLiving)entity).getMonsterType()==EnumMonsterType.UNDEAD);}"
916	"@Override public boolean test(ReadOnlyTask t){return t.getCompletionStatus().getCompletion()==false;}"
917	"@Override public Iterator<E> descendingIterator(){return Iterators.filter(unfiltered().descendingIterator(),predicate);}"
918	"@Override public void onErrorResponse(VolleyError error){tracks=true;checkStatus();}"
919	"private void removeMixItems(){for(int i=SLOT_OXIDIZER;i<SLOT_FUEL;i++){ItemStack stack=inventory.getStackInSlot(i);if(stack==null){continue;}IMixAgentRegistry.IMixAgent mixData=IMixAgentRegistry.INSTANCE.getAgentData(stack);if(mixData==null){continue;}if(MathHelper.random.nextInt(100)<=mixData.getConsumeChance()){stack.stackSize--;}}}"
920	"public boolean isNotSpecified(){return locationUnitConfig==null;}"
921	"T get(int i);"
922	"@Override public int pixelCount(byte opcode,FieldTranslator translator,int count){return ((opcode&0x00ff)>>>4);}"
923	"synchronized boolean handleFailure(TaskInProgress tip){if(this.faultToleranceService==null||(!faultToleranceService.isRecoveryPossible(tip))){return false;}if(!faultToleranceService.isAlreadyRecovered(tip)){if(LOG.isDebugEnabled()){LOG.debug(""Adding recovery task ""+tip.getCurrentTaskAttemptId());}recoveryTasks.add(tip);status.setRunState(JobStatus.RECOVERING);return true;}else {if(LOG.isDebugEnabled()){LOG.debug(""Avoiding recovery task ""+tip.getCurrentTaskAttemptId());}}return false;}"
924	"@Override boolean shouldBulkSelect(String schemaKey,ResultSetCache resultSetCache){if(database instanceof DB2Database||database instanceof MSSQLDatabase){return super.shouldBulkSelect(schemaKey,resultSetCache);}else {return database instanceof OracleDatabase;}}"
925	"@Override public void onLocationChanged(Location location){this.location=location;}"
926	"@Override public boolean touchDown(InputEvent event,float x,float y,int pointer,int button){if(buttonRepeatTask.isScheduled()==false){buttonRepeatTask.increment=true;buttonRepeatTask.cancel();Timer.schedule(buttonRepeatTask,buttonRepeatInitialTime,buttonRepeatTime);}return true;}"
927	"private void setGenome(String genomeId){if(genomeId!=null&&!genomeId.equals(GenomeManager.getInstance().getGenomeId())){try{GenomeListItem item=GenomeManager.getInstance().findGenomeListItemById(genomeId);if(item!=null){GenomeManager.getInstance().loadGenomeById(genomeId);}}catch(IOException e){e.printStackTrace();}}}"
928	"public TypeTypeContext typeType(){return getRuleContext(TypeTypeContext.class,0);}"
929	"@Override public void close() throws IOException{try{_channel.disconnect();}finally{_connection.removeChannel(_channel);}}"
930	"@Override public Boolean call() throws Exception{return !(mDaoSession.getQuestionDao().count()>0);}"
931	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
932	"@Override protected boolean isInContext(PsiElement element){return true;}"
933	"public void onClick(DialogInterface dialog,int whichButton){}"
934	"@Override public void onPostExecute(Boolean success){if(!success){new AlertDialogWrapper.Builder(this).setTitle(R.string.force_change_subscription).setMessage(R.string.force_change_subscription_desc).setPositiveButton(R.string.btn_yes,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    changeSubscription(subreddit,true);    Snackbar s=Snackbar.make(mToolbar,getString(R.string.misc_subscribed),Snackbar.LENGTH_LONG);    View view=s.getView();    TextView tv=(TextView)view.findViewById(android.support.design.R.id.snackbar_text);    tv.setTextColor(Color.WHITE);    s.show();  }}).setNegativeButton(R.string.btn_no,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){  }}).setCancelable(false).show();}else {changeSubscription(subreddit,true);}}"
935	"public boolean validateDdsmStormCluster_StormClusterTypeMasterSlavePlatform(DdsmStormCluster ddsmStormCluster,DiagnosticChain diagnostics,Map<Object,Object> context){return ddsmStormCluster.StormClusterTypeMasterSlavePlatform(diagnostics,context);}"
936	"@Override public boolean isOpen(){return mIsOpen;}"
937	"static void addCommentDetails(Property prop,Bound<?> bound){prop.comment+=(prop.comment.isEmpty()?"""":""\n"");if(bound.equals(Bound.MAX_BOUND)){prop.comment+=fmlLang.localize(""default"",prop.isList()?prop.getDefaults():prop.getDefault());}else {boolean minIsInt=bound.min.doubleValue()==bound.min.intValue();boolean maxIsInt=bound.max.doubleValue()==bound.max.intValue();prop.comment+=fmlLang.localize(""defaultNumeric"",minIsInt?bound.min.intValue():bound.min,maxIsInt?bound.max.intValue():bound.max,prop.isList()?prop.getDefaults():prop.getDefault());}}"
938	"private void removePopover(NotificationInfo notification){ListWebNotificationsKey userPopoverKey=ListWebNotificationsKey.key(notification.getTo(),true);ListWebNotificationsData listData=exoWebNotificationsCache.get(userPopoverKey);if(listData!=null){listData.removeByValue(notification.getId());}}"
939	"private boolean insert5(TrieHashNode seqNode){TrieHashNode tempNode=this.root.get(seqNode);if(tempNode!=null){if(tempNode.child==null){tempNode.child=new CompressedHashTrie();}if(tempNode instanceof TrieSeqHash&&seqNode instanceof TrieSeqHash){TrieSeqHash tempSeqHash=(TrieSeqHash)tempNode;ByteArrayCharSequence value=tempSeqHash.getVal();tempSeqHash.leaf=false;TrieSeqHash newSeqNode=(TrieSeqHash)seqNode;int index=compress(value,newSeqNode.val);tempSeqHash.changeStr(value.subSequence(0,index));Set<Entry> entries=newSeqNode.entries;for(int i=0;i<entries.size();i++){tempSeqHash.addEntry((Entry)entries.getVal(i));}if(value.length()>index){TrieSeqHash tempSeqHashShorter=new TrieSeqHash(value.subSequence(index),null,tempSeqHash.getFirstEntry());tempSeqHashShorter.leaf=true;tempSeqHash.child.insert4(tempSeqHashShorter);}if(newSeqNode.getVal().length()>index){newSeqNode.changeStr(newSeqNode.getVal().subSequence(index));newSeqNode.leaf=true;tempSeqHash.child.insert4(newSeqNode);}}}else {this.root.put(seqNode);}return true;}"
940	"public boolean startXORComparison(int part){boolean found=false;int node1,part1,node2,part2;for(int i=0;i<mem_bit1.size();i++){for(int j=0;j<mem_bit0.size();j++){System.out.println();node1=mem_bit1.get(i)/10;part1=mem_bit1.get(i)%10;node2=mem_bit0.get(j)/10;part2=mem_bit0.get(j)%10;System.out.print(""XORing: "");printBasisVector(node1,part1);System.out.print("" with: "");printBasisVector(node2,part2);performXOR(node1,part1,node2,part2);if(compareEquality(part)){found=true;break;}}if(found){break;}}return found;}"
941	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
942	"@Override protected void onDraw(Canvas canvas){getDrawingRect(mRect);mRect.left+=getPaddingLeft()+mPadding;mRect.top+=getPaddingTop()+mPadding;mRect.right-=getPaddingRight()+mPadding;mRect.bottom-=getPaddingBottom()+mPadding;mRectF.set(mRect);mPaint.setAntiAlias(true);mPaint.setStrokeCap(Paint.Cap.BUTT);mPaint.setColor(mColor);canvas.drawArc(mRectF,-60,mProgress<0?getMax()-60:mProgress*300/getMax(),!mHollow,mPaint);}"
943	"@Override public boolean matches(WaterlooInfoSession i,WaterlooInfoSessionPreferences p){return true;}"
944	"private RawPacket transform(RawPacket pkt,boolean data,boolean sender){if(pkt==null){return null;}if(mediaStream==null){logger.warn(""Not logging a packet because the mediaStream is null"");return pkt;}PacketLoggingService pktLogging=_pktLogging;if(pktLogging==null){logger.warn(""Not logging a packet because the PacketLoggingService is""+"" null."");return pkt;}InetSocketAddress src;InetSocketAddress dst;if(data){InetSocketAddress localDataAddress=mediaStream.getLocalDataAddress();if(localDataAddress==null){logger.warn(""Not logging a packet because the local data ""+""address is null"");return pkt;}MediaStreamTarget target=mediaStream.getTarget();if(target==null){logger.warn(""Not logging a packet because the media stream ""+""target is null."");return pkt;}InetSocketAddress targetDataAddress=target.getDataAddress();if(targetDataAddress==null){logger.warn(""Not logging a packet because the media stream ""+""target address is null."");return pkt;}src=localDataAddress;dst=targetDataAddress;}else {InetSocketAddress localControlAddress=mediaStream.getLocalControlAddress();if(localControlAddress==null){logger.warn(""Not logging a packet because the local data ""+""address is null"");return pkt;}MediaStreamTarget target=mediaStream.getTarget();if(target==null){logger.warn(""Not logging a packet because the media stream ""+""target is null."");return pkt;}InetSocketAddress targetControlAddress=target.getControlAddress();if(targetControlAddress==null){logger.warn(""Not logging a packet because the media stream ""+""target address is null."");return pkt;}src=localControlAddress;dst=targetControlAddress;}if(!sender){InetSocketAddress swap=src;src=dst;dst=swap;}int len=pkt.getLength();if(!LOG_RTP_PAYLOAD){if(RTPPacketPredicate.INSTANCE.test(pkt)){len=RawPacket.FIXED_HEADER_SIZE;}else {}}pktLogging.logPacket(PacketLoggingService.ProtocolName.ARBITRARY,(src!=null)?src.getAddress().getAddress():new byte{0,0,0,0},(src!=null)?src.getPort():1,(dst!=null)?dst.getAddress().getAddress():new byte{0,0,0,0},(dst!=null)?dst.getPort():1,PacketLoggingService.TransportName.UDP,sender,pkt.getBuffer().clone(),pkt.getOffset(),len);return pkt;}"
945	"@Override public void onAnimationUpdate(ValueAnimator animation){if(Math.abs(lastMotion.lastDistance)>2){if(lastMotion.smartView.hitBottom()&&(currentItem!=pagerAdapter.getCount()-1)&&lastMotion.smartView.getTranslationY()<=0){smartViewBottom.setTranslationY(lastMotion.smartView.getHeight()+Math.max(-lastMotion.smartView.draggerHeight,lastMotion.smartView.getTranslationY()+Math.signum(lastMotion.lastDistance)*(float)animation.getAnimatedValue()));lastMotion.smartView.setTranslationY(Math.max(-lastMotion.smartView.draggerHeight,lastMotion.smartView.getTranslationY()+Math.signum(lastMotion.lastDistance)*(float)animation.getAnimatedValue()));}else {lastMotion.smartView.setTranslationY(0);lastMotion.smartView.setContentTranslationY(lastMotion.smartView.getContentTranslationY()+Math.signum(lastMotion.lastDistance)*(float)animation.getAnimatedValue());}}}"
946	"private List<HostRestRep> installOSForHosts(Map<String,String> hostToIps,Map<String,URI> hostNameToBootVolumeMap){List<HostRestRep> hosts=ComputeUtils.getHostsInCluster(cluster.getId());List<OsInstallParam> osInstallParams=Lists.newArrayList();for(HostRestRep host : hosts){if((host!=null)&&((host.getType()==null)||host.getType().isEmpty()||host.getType().equals(Host.HostType.No_OS.name()))){OsInstallParam param=new OsInstallParam();String hostIp=hostToIps.get(host.getHostName());param.setComputeImage(computeImage);param.setHostName(host.getHostName());param.setDnsServers(dnsServers);param.setGateway(gateway);param.setNetmask(netmask);param.setHostIp(hostIp);param.setVolume(hostNameToBootVolumeMap.get(host.getHostName()));param.setManagementNetwork(managementNetwork);param.setNtpServer(ntpServer);param.setRootPassword(rootPassword);osInstallParams.add(param);}else {osInstallParams.add(null);}}List<HostRestRep> installedHosts=Lists.newArrayList();try{installedHosts=ComputeUtils.installOsOnHosts(hosts,osInstallParams);}catch(Exception e){logError(e.getMessage());}return installedHosts;}"
947	"private void updateNetwork(){if(Network.isHosting){game.server.update();}if(isFinished()){game.client.sendClientFinishedMessage();}if(TimeUtils.timeSinceMillis(lastProgressTime)>500){game.client.sendClientProgressMessage(getProgress());lastProgressTime=TimeUtils.millis();cachePlayers=game.client.getPlayers();}}"
948	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
949	"@SuppressWarnings(""unchecked"") @Override public void done(List<ParseObject> postList,ParseException e){setProgressBarIndeterminateVisibility(false);if(e==null){items.clear();for(ParseObject post : postList){ItemDetails note=new ItemDetails(post.getObjectId(),post.getString(""title""),post.getString(""description""),post.getString(""category""),post.getParseFile(""photo""));items.add(note);}((ArrayAdapter<ItemDetails>)getListAdapter()).notifyDataSetChanged();}else {Log.d(getClass().getSimpleName(),""Error: ""+e.getMessage());}}"
950	"public static DaoSession getInstance(){if(mDaoSession==null){DaoMaster.DevOpenHelper helper=new DaoMaster.DevOpenHelper(BaseApplication.getContext(),Constants.Database.DB_NAME);mDaoSession=new DaoMaster(helper.getWritableDb()).newSession();}return mDaoSession;}"
951	"public boolean containsModifiableAliasOf(Store<?> store,Receiver other){return this.equals(other)||store.canAlias(this,other);}"
952	"@Override public boolean isEnable(Hero hero,Maze maze,MainGameActivity context,Skill skill){return hero.getSkillPoint()>0&&SkillFactory.getSkill(""????"",hero,dialog).isActive();}"
953	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
954	"XOperation getXOperation(EOperation eOperation){XOperation xOperation=XcoreFactory.eINSTANCE.createXOperation();XOperationMapping mapping=mapper.getMapping(xOperation);mapping.setEOperation(eOperation);mapping.setGenOperation((GenOperation)genModel.findGenOperation(eOperation));mapper.getToXcoreMapping(eOperation).setXcoreElement(xOperation);handleXTypedElement(xOperation,eOperation);for(EParameter eParameter : eOperation.getEParameters()){XParameter xParameter=getXParameter(eParameter);xOperation.getParameters().add(xParameter);}for(ETypeParameter eTypeParameter : eOperation.getETypeParameters()){XTypeParameter xTypeParameter=getXTypeParameter(eTypeParameter);xOperation.getTypeParameters().add(xTypeParameter);}for(EGenericType eException : eOperation.getEGenericExceptions()){XGenericType xException=getXGenericType(eException);xOperation.getExceptions().add(xException);}EAnnotation ecoreAnnotation=eOperation.getEAnnotation(EcorePackage.eNS_URI);if(ecoreAnnotation!=null&&!ecoreAnnotation.getContents().isEmpty()){EObject body=ecoreAnnotation.getContents().get(0);if(body instanceof XBlockExpression){xOperation.setBody((XBlockExpression)body);}}return xOperation;}"
955	"@Override public void visitEnd(){for(Entry<FieldNode,Type> e : moreFields){e.getKey().accept(cv);}if(isClass){if(addTaintField){super.visitField(Opcodes.ACC_PUBLIC,""__DEPENDENCY_INFO"",Type.getDescriptor(DependencyInfo.class),null,null);}MethodVisitor mv=super.visitMethod(Opcodes.ACC_PUBLIC,""getDEPENDENCY_INFO"",""()""+Type.getDescriptor(DependencyInfo.class),null,null);mv.visitCode();mv.visitVarInsn(Opcodes.ALOAD,0);mv.visitFieldInsn(Opcodes.GETFIELD,className,""__DEPENDENCY_INFO"",Type.getDescriptor(DependencyInfo.class));mv.visitInsn(Opcodes.DUP);Label ok=new Label();mv.visitJumpInsn(Opcodes.IFNONNULL,ok);mv.visitInsn(Opcodes.POP);mv.visitVarInsn(Opcodes.ALOAD,0);mv.visitTypeInsn(Opcodes.NEW,Type.getInternalName(DependencyInfo.class));mv.visitInsn(Opcodes.DUP_X1);mv.visitInsn(Opcodes.DUP);mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(DependencyInfo.class),""<init>"",""()V"",false);mv.visitFieldInsn(Opcodes.PUTFIELD,className,""__DEPENDENCY_INFO"",Type.getDescriptor(DependencyInfo.class));mv.visitLabel(ok);mv.visitFrame(Opcodes.F_FULL,1,new Object{className},1,new Object{Type.getInternalName(DependencyInfo.class)});mv.visitInsn(Opcodes.ARETURN);mv.visitMaxs(0,0);mv.visitEnd();mv=super.visitMethod(Opcodes.ACC_PUBLIC,""__initPrimDepInfo"",""()V"",null,null);mv.visitCode();for(Entry<FieldNode,Type> e : moreFields){FieldNode fn=e.getKey();Type t=e.getValue();if((fn.access&Opcodes.ACC_STATIC)==0){mv.visitVarInsn(Opcodes.ALOAD,0);mv.visitTypeInsn(Opcodes.NEW,Type.getInternalName(DependencyInfo.class));mv.visitInsn(Opcodes.DUP);mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(DependencyInfo.class),""<init>"",""()V"",false);if((Enumerations.get().contains(t.getClassName().replaceAll(""/"",""."")))||String.class.getName().equals(t.getClassName().replaceAll(""/"","".""))){}else {mv.visitInsn(Opcodes.DUP);mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(DependencyInfo.class),""write"",""()V"",false);}mv.visitFieldInsn(Opcodes.PUTFIELD,className,fn.name,Type.getDescriptor(DependencyInfo.class));}}mv.visitInsn(Opcodes.RETURN);mv.visitMaxs(0,0);mv.visitEnd();}super.visitEnd();}"
956	"@Override public void onTaskFailure(String result){}"
957	"public void menuKeyTyped(MenuKeyEvent e){MenuElement[] path=MenuSelectionManager.defaultManager().getSelectedPath();KeyWordItem item=(KeyWordItem)path[1];int code=e.getKeyChar();if(code==KeyEvent.VK_ENTER&&item.name.equals(name)){getAction().actionPerformed(null);}}"
958	"@Override public void onBackPressed(){DrawerLayout drawer=(DrawerLayout)findViewById(R.id.drawer_layout);if(drawer.isDrawerOpen(GravityCompat.START)){drawer.closeDrawer(GravityCompat.START);}else {super.onBackPressed();}}"
959	"@Override protected void configure(HttpSecurity http) throws Exception{http.csrf().disable();http.headers().defaultsDisabled().frameOptions().sameOrigin();http.addFilterBefore(authenticationFilter(),UsernamePasswordAuthenticationFilter.class);http.authorizeRequests().antMatchers(""/secured/**"").authenticated().antMatchers(""/api/**"").permitAll().and().formLogin().loginPage(""/login"").failureUrl(""/?error"").successHandler(new AuthenticationSuccessHandlerImpl()).usernameParameter(""username"").passwordParameter(""password"").permitAll().and().logout().logoutSuccessUrl(""/?logout"").permitAll().and().exceptionHandling().accessDeniedPage(""/403"");}"
960	"@Override public void onFailure(Call<LaunchResponse> call,Throwable t){isLaunchByDate=false;sendResult(new Result(Constants.ACTION_GET_PREV_LAUNCHES,false,call,t.getLocalizedMessage()));}"
961	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
962	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_menu_customer);iuserService=ApiUtils.getUserService();tempuser=ManageSharePrefs.readUser(null);if(tempuser!=null){Toast.makeText(getApplicationContext(),""Token :""+tempuser.getTokenType(),Toast.LENGTH_LONG).show();}else {Toast.makeText(this,""nothing"",Toast.LENGTH_SHORT).show();}myLocation=ManageSharePrefs.readLocation("""");Button about=findViewById(R.id.aboutBtn);about.setOnClickListener(aboutClick);Button settings=findViewById(R.id.settingsBtn);settings.setOnClickListener(settingsClick);Button myShops=findViewById(R.id.showShopsButton);myShops.setOnClickListener(showShopsButtonClick);Button filtersBtn=findViewById(R.id.filtersBtn);filtersBtn.setOnClickListener(filtersButtonClick);Button myDiscount=findViewById(R.id.showDiscountsBtn);myDiscount.setOnClickListener(discountClick);}"
963	"public String createSession(){String url=""createsessionJson/"";url+=devId+""/"";url+=generateSignature(""createsession"")+""/"";url+=generateTimestamp()+""/"";return url;}"
964	"public void geometricSeriesApproximationStep1(double x){this.steps=0;this.lastApproximation=1;double nextApproximation=x;for(int i=0;i<steps;i++){nextApproximation=nextApproximation*x;}this.approximation=this.lastApproximation+nextApproximation;if(!isAccurate()){geometricSeriesApproximation(x);}else {return ;}}"
965	"public int getSerializedSize(){int size=memoizedSize;if(size!=-1){return size;}size=0;if(!getPasswordBytes().isEmpty()){size+=com.google.protobuf.GeneratedMessage.computeStringSize(2,password_);}memoizedSize=size;return size;}"
966	"public JPanel getGuiPanel(){JPanel panel=new JPanel();JButton button=new JButton(""Do it!"");button.addActionListener(new DoItListener());outputLabel=new JLabel(""data appears here"");DateFormatSymbols dateStuff=new DateFormatSymbols();month=new JComboBox(dateStuff.getMonths());day=new JTextField(8);year=new JTextField(8);JPanel inputPanel=new JPanel(new GridLayout(3,2));inputPanel.add(new JLabel(""Month""));inputPanel.add(month);inputPanel.add(new JLabel(""Day""));inputPanel.add(day);inputPanel.add(new JLabel(""Year""));inputPanel.add(year);panel.add(inputPanel);panel.add(button);panel.add(outputLabel);return panel;}"
967	"@Override public void onClick(DialogInterface dialog,int methodeNumber){selection=(String)methodsItems[methodeNumber];}"
968	"public Log(){text=new JTextArea(){  private static final long serialVersionUID=8332767163052368928L;  public Dimension getPreferredSize(){    return new Dimension(screen.width / 3,screen.height / 4);  }};text.setFont(FONT);text.setEditable(false);text.setText(USAGE+""\n\n"");sb=new StringBuilder();}"
969	"@Override public synchronized boolean updateLocalHost(IDevice Host){if(Host.getAttachmentPoints().length==0){return this.removeLocalHost(Host);}else {NetworkHost host=this.localHosts.get(Host.getDeviceKey());if(Host.getIPv4Addresses().length>0){int rawip=Host.getIPv4Addresses()[0].getInt();for(IPv4Address IPAddress : Host.getIPv4Addresses()){rawip=IPAddress.getInt();if((rawip>0)&&((host.getIPAddress()==null)||(rawip!=host.getIPAddress()))){this.removeLocalHost(Host);return this.addLocalHost(Host);}}}}return false;}"
970	"public int size(){return 0;}"
971	"@Override public boolean isSet(StyleAttribute<?> attr){return theStyles.containsKey(attr)||theBacking.isSet(attr);}"
972	"public Boolean call() throws Exception{try{mDataSyncer.initialize();mExecutorService.execute(mDownloadSensorsTask);mInitialized=true;return true;}catch(Exception e){Log.e(TAG,""Error initializing the DataSyncer"",e);return false;}}"
973	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
974	"public void onClick(DialogInterface dialog,int which){dialog.cancel();isFreeze=true;mFreezeTerminatedIndex=mQusIndex;String custMsg="" Freeze point"";custMsg=custMsg+(freeze?"" Activated "":"" Deactivated "");CustomToast.show(mContext,custMsg);}"
975	"Activity(Meeting meeting,boolean isWaitlisted){activityId=meeting.getDisplayName();enroled=!isWaitlisted;commaSeparatedInstructorNames=meeting.getCommaSeparatedInstructorNames();for(Time time : meeting.getTimes()){days.add(new Day(time));}waitlistRank=meeting.getWaitlistRank();}"
976	"@Override public boolean onOptionsItemSelected(MenuItem item){int id=item.getItemId();if(id==android.R.id.home){finish();}else {if(id==R.id.save_house){if(isClickAble){save();isClickAble=false;}}}return super.onOptionsItemSelected(item);}"
977	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_customer_addedit);dataOps=new DatabaseOperations(this);dataOps.openDB();customerNew=new Customer();customerIDText=(EditText)findViewById(R.id.customerId_editText);firstNameText=(EditText)findViewById(R.id.customerFName_editText);lastNameText=(EditText)findViewById(R.id.customerLName_editText);emailText=(EditText)findViewById(R.id.customerEmail_editText);phoneText=(EditText)findViewById(R.id.customerPhone_editText);streetText=(EditText)findViewById(R.id.customerStreet_editText);cityText=(EditText)findViewById(R.id.customerCity_editText);stateText=(EditText)findViewById(R.id.customerState_editText);zipcodeText=(EditText)findViewById(R.id.customerZipcode_editText);addButton=(Button)findViewById(R.id.add_addEditBtn);addButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    customerNew.setCustomerFirstName(firstNameText.getText().toString());    customerNew.setCustomerLastName(lastNameText.getText().toString());    customerNew.setCustomerEmail(emailText.getText().toString());    customerNew.setCustomerPhone(phoneText.getText().toString());    customerNew.setCustomerStreet(streetText.getText().toString());    customerNew.setCustomerCity(cityText.getText().toString());    customerNew.setCustomerState(stateText.getText().toString());    customerNew.setCustomerZipcode(zipcodeText.getText().toString());    dataOps.addCustomer(customerNew);    finish();  }});searchButton=(Button)findViewById(R.id.search_addEditBtn);searchButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent startSearchActivity=new Intent(CustomerAddEditActivity.this,CustomerSearchActivity.class);    startActivityForResult(startSearchActivity,SEARCH_REQUEST_CODE);  }});updateButton=(Button)findViewById(R.id.update_addEditBtn);updateButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    customerOld.setCustomerFirstName(firstNameText.getText().toString());    customerOld.setCustomerLastName(lastNameText.getText().toString());    customerOld.setCustomerEmail(emailText.getText().toString());    customerOld.setCustomerPhone(phoneText.getText().toString());    customerOld.setCustomerStreet(streetText.getText().toString());    customerOld.setCustomerCity(cityText.getText().toString());    customerOld.setCustomerState(stateText.getText().toString());    customerOld.setCustomerZipcode(zipcodeText.getText().toString());    dataOps.updateCustomer(customerOld);  }});deleteButton=(Button)findViewById(R.id.delete_addEditBtn);deleteButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    searchByID();    dataOps.removeCustomer(customerOld);  }});cancelButton=(Button)findViewById(R.id.cancel_addEditBtn);cancelButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    dataOps.closeDB();    finish();  }});}"
978	"@Override public boolean onOptionsItemSelected(MenuItem item){int id=item.getItemId();if(id==R.id.action_help){Intent intent=new Intent(getApplication(),AppInfo.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);intent.putExtra(""userName"",userName);intent.putExtra(""userFN"",userFN);startActivity(intent);return true;}if(id==R.id.action_lost){Intent intent=new Intent(getApplication(),AppInfo.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);intent.putExtra(""userName"",userName);intent.putExtra(""userFN"",userFN);startActivity(intent);return true;}return super.onOptionsItemSelected(item);}"
979	"@Override public T doInBackground(Dao<T,Integer> dao,Server server,ResourceCache<T> cache,ResourceFactory<T> factory){return cache.getByLocalId(localId,new ResourceCache.CacheMissCallback<T>(){  @Nullable @Override public T onCacheMiss(  int id){    try {      T resource=dao.queryForId(id);      return cacheGetNetworkUpdateOnMiss(resource);    } catch (    SQLException e) {      onDatabaseException(e);      return null;    }  }});}"
980	"@Override public int hashCode(){return hashCode;}"
981	"private void processUpdates(List<ClusterMember> updates,boolean spreadGossip){if(updates.isEmpty()){return ;}Map<ClusterEndpoint,ClusterMember> members=membership.getTrustedOrSuspected();failureDetector.setClusterMembers(members.keySet());gossipProtocol.setClusterMembers(members.keySet());if(spreadGossip){gossipProtocol.spread(new Message(new ClusterMembershipData(updates,syncGroup)));}for(ClusterMember update : updates){subject.onNext(update);}for(ClusterMember member : updates){LOGGER.debug(""Member {} became {}"",member.endpoint(),member.status());switch (member.status()){case SUSPECTED :failureDetector.suspect(member.endpoint());timer.schedule(member.endpoint().endpointId(),new Runnable(){  @Override public void run(){    LOGGER.debug(""Time to remove SUSPECTED member={} from membership"",member.endpoint());    processUpdates(membership.remove(member.endpoint()),false);  }},maxSuspectTime,TimeUnit.MILLISECONDS);break;case TRUSTED :failureDetector.trust(member.endpoint());timer.cancel(member.endpoint().endpointId());break;case SHUTDOWN :timer.schedule(new Runnable(){  @Override public void run(){    LOGGER.debug(""Time to remove SHUTDOWN member={} from membership"",member.endpoint());    membership.remove(member.endpoint());  }},maxShutdownTime,TimeUnit.MILLISECONDS);break;}}}"
982	"@Override public DocumentEntity<?> deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException{if(json.isJsonNull()){return new DocumentEntity<Object>();}if(json.isJsonPrimitive()){return new DocumentEntity<Object>();}if(json.isJsonArray()){return new DocumentEntity<Object>();}JsonObject obj=json.getAsJsonObject();DocumentEntity<Object> entity=new DocumentEntity<Object>();deserializeDocumentParameter(obj,entity);Class<?> clazz=getParameterized();if(clazz!=null){entity.entity=context.deserialize(obj,clazz);}return entity;}"
983	"private String getString(){return getItem()==null?"""":getItem().toString();}"
984	"public void registerUser(User user){mAuth=FirebaseAuth.getInstance();FirebaseUser userA=mAuth.getCurrentUser();String userID=userA.getUid();user.setPhoneNumber(userA.getPhoneNumber());mDatabase=FirebaseDatabase.getInstance().getReference(""users/""+userID);mDatabase.child(""nickname"").setValue(user.getNickname());mDatabase.child(""location"").setValue(user.getLocation());mDatabase.child(""admin"").setValue(user.isAdmin());mDatabase.child(""phoneNumber"").setValue(user.getPhoneNumber());}"
985	"public static void main(String[] args){ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(""context.xml"");RedisTemplate<String,Object> redisTemplate=context.getBean(RedisTemplate.class);Kryo kryo=new Kryo();kryo.register(MyKey.class);kryo.register(MyValue.class);kryo.register(String.class);MyKey key=new MyKey(""Jhon"",""+138129129113"");MyValue value=new MyValue(""Pushkina street"",""Moscow"");ValueOperations<String,Object> opsForValue=redisTemplate.opsForValue();opsForValue.set(""key"",value);context.close();}"
986	"public ArrayStack(int size){if(size>0){myStack=new int[size];stackPointer=-1;}}"
987	"@Override public CommandLineCompleter createCompleter(CommandContext ctx,OperationRequestAddress address){return new AttributeNamePathCompleter(address,true);}"
988	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);if(PseudoSDK.connected){setContentView(R.layout.activity_management_connected);updateButton=(Button)findViewById(R.id.updateButton);updateInfoText=(TextView)findViewById(R.id.updateInfoText);updateInfoText.setText(getString(R.string.currentVersion)+String.valueOf(PseudoSDK.LOCAL_VERSION));if(PseudoSDK.check_for_update()!=-1){AlertDialog.Builder builder=new AlertDialog.Builder(this);builder.setMessage(getString(R.string.newUpdateFound)).setTitle(getString(R.string.newUpdateFoundTitle));builder.setPositiveButton(R.string.letsInstall,new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    Intent intent=new Intent(Management.this,Update.class);    startActivity(intent);    overridePendingTransition(0,0);    finish();  }});builder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    updateButton.setVisibility(View.VISIBLE);    if (PseudoSDK.check_for_update() > 0) {      updateInfoText.setText(R.string.newUpdateFound1 + String.valueOf(PseudoSDK.check_for_update()) + R.string.newUpdateFound2);    } else     if (PseudoSDK.check_for_update() == 0) {      updateInfoText.setText(R.string.newUpdateFound);    }  }}); final AlertDialog dialog=builder.create();dialog.show();}else {updateInfoText.setText(getString(R.string.noNewUpdate1)+String.valueOf(PseudoSDK.LOCAL_VERSION)+getString(R.string.noNewUpdate2));}}else {setContentView(R.layout.activity_management_unconnected);}}"
989	"private Chord(Builder builder){noteSet=builder.noteSet;bass=builder.bass;inversion=builder.inversion;voices=builder.voices;lo=builder.lo;hi=builder.hi;tendencyDir=builder.tendencyDir;tendencyIntv=builder.tendencyIntv;altTendencyDir=builder.altTendencyDir;altTendencyIntv=builder.altTendencyIntv;bonusDir=builder.bonusDir;bonusIntv=builder.bonusIntv;bonusValue=builder.bonusValue;}"
990	"public void throwing(Channel channel,Throwable cause){channel.eventLoop().submit(() -> {  channel.pipeline().fireExceptionCaught(cause);});}"
991	"public static String descriptionMessage(String subcommand){switch (subcommand.toLowerCase()){case ""ban"" :return ChatColor.GREEN+""Bans a user permanently from a chat room"";case ""create"" :return ChatColor.GREEN+""Creates a new chat room"";case ""delete"" :return ChatColor.GREEN+""Deletes an existing chat room"";case ""description"" :return ChatColor.GREEN+""Changes the description of a chat room"";case ""help"" :return ChatColor.GREEN+""Views list of commands and usages for this plugin"";case ""info"" :return ChatColor.GREEN+""Views information about a chat room"";case ""invite"" :return ChatColor.GREEN+""Invites/uninvites a user to a chat room"";case ""join"" :return ChatColor.GREEN+""Joins a chat room"";case ""kick"" :return ChatColor.GREEN+""Kicks a user from a chat room"";case ""leave"" :return ChatColor.GREEN+""Leaves the current chat room"";case ""list"" :return ChatColor.GREEN+""List all existing chat rooms"";case ""mute"" :return ChatColor.GREEN+""Mutes a user inside a chat room"";case ""open"" :return ChatColor.GREEN+""Sets a chat room's join status"";case ""spy"" :return ChatColor.GREEN+""Allows the user to see chat inside other chat rooms"";case ""unban"" :return ChatColor.GREEN+""Unbans a user from a chat room"";case ""unmute"" :return ChatColor.GREEN+""Unmutes a user inside a chat room"";default :return """";}}"
992	"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){if(mLegacyBindViewMode){if(mVerbose){Log.v(TAG,""onBindViewHolderLegacy: ""+position+""/""+holder.getItemViewType()+"" isLegacy: true"");}}holder.itemView.setTag(R.id.fastadapter_item_adapter,this);mOnBindViewHolderListener.onBindViewHolder(holder,position,Collections.EMPTY_LIST);}"
993	"public void addItemsToList(String result) throws JSONException{JSONArray jArray=new JSONArray(result);ArrayList<ItemCardData> newItemsList=new ArrayList<>();for(int i=0;i<jArray.length();i++){JSONObject jObject=jArray.getJSONObject(i);Integer item_id=jObject.getInt(""item_id"");String name=jObject.getString(""item_name"");String description=jObject.getString(""item_description"");Double price=jObject.getDouble(""price"");Integer count=jObject.getInt(""quantity"");Integer product_id=jObject.getInt(""product_id"");totalPrice+=(price*count);newItemsList.add(new JobDetailsActivity.ItemCardData(name,description,price.toString(),count.toString(),product_id));}if(itemsList==null||!itemsList.equals(newItemsList)){itemsList=newItemsList;ItemCardDataAdapter adapter=new ItemCardDataAdapter(this,itemsList);ListView list=this.getListView();list.setAdapter(adapter);list.setOnItemClickListener(new AdapterView.OnItemClickListener(){  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){    JobDetailsActivity.ItemCardData selected=(JobDetailsActivity.ItemCardData)parent.getAdapter().getItem(position);  }});}}"
994	"public Node(int p1X,int p1Y,int p2X,int p2Y,Node parent,int action){x1=p1X;y1=p1Y;x2=p2X;y2=p2Y;p1HasReached=false;p2HasReached=false;p1HasReached=parent.p1HasReached||(x1==p1ExitX&&y1==p1ExitY);p2HasReached=parent.p2HasReached||(x2==p2ExitX&&y2==p2ExitY);if(parent==null){depth=0;actionPath=new ArrayList<Integer>();}else {depth=parent.getDepth()+1;actionPath=((ArrayList<Integer>)parent.getActionPath().clone());actionPath.add(action);}value=this.heuristic();}"
995	"@Override public void onProgress(BMessage message){if(messagesListAdapter!=null){messagesListAdapter.addRow(message);}}"
996	"public boolean applies(Battle b,ActivePokemon user,ActivePokemon victim){return true;}"
997	"@Override public int getExtraWidth(int specifiedWidth){return 0;}"
998	"@Override public boolean equals(Object o){if(!(o instanceof Actuals)){return false;}Actuals tmp=(Actuals)o;return true&&tmp.name.equals(this.name)&&tmp.actuals.equals(this.actuals);}"
999	"@Override public boolean isItemValid(ItemStack itemStack){return true;}"
1000	"@Override public void resultInfoEmpty(String message){if(currentPage==1){mView.showNoNet();}}"
1001	"@Override public void effects(){confirmNewGame=true;}"
1002	"protected void onTutorialDone(){GameSettings.noAdvice=false;base().setup.setControlLevel(BaseSetup.LEVEL_ADVISE);}"
1003	"@Override public boolean apply(T t){return !predicate.apply(t);}"
1004	"private static T read(Future<T> future) throws InterruptedException{try{return future.get();}catch(ExecutionException e){Throwable cause=e.getCause();if(cause instanceof RuntimeException){throw (RuntimeException)cause;}else {if(cause instanceof Error){throw (Error)cause;}else {throw new RuntimeException(cause);}}}}"
1005	"public ObservableList<? extends Item> getItems(){return items.filtered(Item::getVisible);}"
1006	"public LayersGUI(String name,int networkSize,BigDecimal learningRate){Action action=new AbstractAction(""Set Layer Size""){  private static final long serialVersionUID=1L;  @Override public void actionPerformed(  ActionEvent arg0){    if (tabbedPane.getSelectedIndex() == tabbedPane.getTabCount() - 1)     btn.doClick(); else     btnSetLayerSize.doClick();  }};KeyStroke keyStroke;keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0);this.name=name;this.networkSize=networkSize;this.learningRate=learningRate;addWindowListener(new WindowAdapter(){  @Override public void windowClosing(  WindowEvent arg0){    Main.frame.setVisible(true);    close();  }});setBounds(600,100,450,300);contentPane=new JPanel();contentPane.setBorder(new EmptyBorder(5,5,5,5));setContentPane(contentPane);contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.X_AXIS));contentPane.getActionMap().put(""Set Layer Size"",action);contentPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke,""Set Layer Size"");tabbedPane=new JTabbedPane(JTabbedPane.TOP);contentPane.add(tabbedPane);txt=new JTextField[networkSize];for(int i=0;i<txt.length;i++){txt[i]=new JTextField("""",20);txt[i].setHorizontalAlignment(SwingConstants.CENTER);txt[i].setBackground(Color.WHITE);}defaultValue=new String[networkSize][2];tabLabel=new JLabel[networkSize];for(int i=0;i<networkSize;i++){if(i==0){defaultValue[i][0]=""2"";defaultValue[i][1]=""Input"";tabbedPane.addTab(defaultValue[i][1],null,makeTextPanel(""Panel #""+(i+1)),null);}else {if(i==networkSize-1){defaultValue[i][0]=""2"";defaultValue[i][1]=""Output"";tabbedPane.addTab(defaultValue[i][1],null,makeTextPanel(""Panel #""+(i+1)),null);}else {tabbedPane.addTab(""Layer ""+i,null,makeTextPanel(""Panel #""+(i+1)),null);}}}layer=new int[networkSize];JPanel panel4=new JPanel();FlowLayout flowLayout=(FlowLayout)panel4.getLayout();flowLayout.setVgap(90);btn=new JButton(""Continue"");btn.addActionListener(this);panel4.add(btn);tabbedPane.addTab(""Continue"",null,panel4,null);}"
1007	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1008	"private boolean saveNewField(){EditText etxName=(EditText)findViewById(R.id.etx_fieldname);TextView lblFieldName=(TextView)findViewById(R.id.lbl_fieldname);TextView lblFieldPrompt=(TextView)findViewById(R.id.lbl_fieldprompt);if(etxName.getText().length()==0){lblFieldName.setText(""Name: * Required field"");return false;}else {lblFieldName.setText(""Name:"");}EditText etxPrompt=(EditText)findViewById(R.id.etx_fieldprompt);if(etxPrompt.getText().length()==0){lblFieldPrompt.setText(""Prompt: * Required field"");return false;}else {lblFieldPrompt.setText(""Prompt:"");}if(existingFields!=null){String name=etxName.getText().toString();boolean duplicate=false;int len=existingFields.length;for(int i=0;i<len;i++){if(name.equals(existingFields[i])){duplicate=true;break;}}if(duplicate){lblFieldName.setText(""* Field name must be unique to this form"");return false;}}return true;}"
1009	"public Comment(String ts,String comment_id,String user_id,String comment,String user,String comment_replied,String post_commented){super(ts,comment_id,user_id,comment,user);this.comment_replied_=Integer.parseInt(comment_replied);this.post_commented_=Integer.parseInt(post_commented);}"
1010	"@Override public void onClick(View view){Utility.navigateDashBoardFragment(new ClassifiedsListFragment(),ClassifiedsListFragment.TAG,null,mParent);}"
1011	"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){user.invisibleMode=!isChecked;}"
1012	"public String getAndClearBuffer(){String temp=buffer;buffer="""";return temp;}"
1013	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1014	"@Override protected synchronized void evalFormula(){Ref target=getRef();if(version<FormulaCacheMasker.INSTANCE.isMaskedUntil(target)){_formulaResultValue=FormulaCacheMasker.INSTANCE.getMaskedVal();}if(_formulaResultValue==null){CellValue val=getCellValue();if(val!=null&&val.getType()==CellType.FORMULA){try{TransactionManager.INSTANCE.startTransaction(getSheet().getBook());FormulaCacheMasker.INSTANCE.mask(target);_formulaResultValue=FormulaCacheMasker.INSTANCE.getMaskedVal();FormulaAsyncScheduler.getScheduler().addTask(target);}finally{TransactionManager.INSTANCE.endTransaction(getSheet().getBook());}}}}"
1015	"@Override public EditPart createEditPart(){return new ArchimateElementEditPart(org.archicontribs.specialization.uiProvider.elements.figures.CollaborationFigure.class);}"
1016	"@Override public void changed(ChangeEvent event,Actor actor){rebuildLeftTable(true);}"
1017	"@Override public int compare(MailItem m1,MailItem m2){return m1.getId()-m2.getId();}"
1018	"private void analyzeClassMembers(ParserRuleContext ctx){if(ctx instanceof ClassOrInterfaceModifierContext){ClassOrInterfaceModifierContext classModifierCtx=(ClassOrInterfaceModifierContext)ctx;this.analyzeModifier(classModifierCtx);}else {if(ctx instanceof FieldDeclarationContext){FieldDeclarationContext fieldCtx=(FieldDeclarationContext)ctx;if(fieldCtx.typeType()!=null){TypeTypeContext typeCtx=fieldCtx.typeType();if(ClassAnalyzer.isPrimitiveDeclaration(typeCtx)){PrimitiveTypeContext primitiveTypeCtx=typeCtx.primitiveType();this.identifiedTokens.addToken(PRIMITIVE_TYPE_KEY,primitiveTypeCtx.getText());FieldAnalyzer fieldAnalyzer=new FieldAnalyzer(this.identifiedTokens,this.declaredClassScope);fieldAnalyzer.analyze(fieldCtx.variableDeclarators());this.identifiedTokens.clearTokens();}else {if(ClassAnalyzer.isPrimitiveArrayDeclaration(typeCtx)){Console.log(LogType.DEBUG,""Primitive array declaration: ""+fieldCtx.getText());ArrayAnalyzer arrayAnalyzer=new ArrayAnalyzer(this.identifiedTokens,this.declaredClassScope);arrayAnalyzer.analyze(fieldCtx);}else {if(typeCtx.classOrInterfaceType().getText().contains(RecognizedKeywords.PRIMITIVE_TYPE_STRING)){ClassOrInterfaceTypeContext classInterfaceCtx=typeCtx.classOrInterfaceType();this.identifiedTokens.addToken(PRIMITIVE_TYPE_KEY,classInterfaceCtx.getText());}FieldAnalyzer fieldAnalyzer=new FieldAnalyzer(this.identifiedTokens,this.declaredClassScope);fieldAnalyzer.analyze(fieldCtx.variableDeclarators());this.identifiedTokens.clearTokens();}}}}}}"
1019	"@Override public int result(){return 0;}"
1020	"@Override public int getEndPosition(EndPosTable table){return rhs.getEndPosition(table);}"
1021	"@Override public void getStudentNotes(){System.out.println(""Podaj zakres, z jakiego chcesz otrzyma? uwagi"");String dateFrom;String dateTo;while(true){System.out.println(""od: DD.MM.RRRR"");dateFrom=scanner.next();if(checkDate(dateFrom)){break;}System.out.println(""podaj poprawna date!"");}while(true){System.out.println(""do: DD.MM.RRRR"");dateTo=scanner.next();if(checkDate(dateTo)){break;}System.out.println(""podaj poprawna date!"");}ArrayList<String> notes=dbManager.getStudentNotes(user.getId(),dateFrom,dateTo);for(String s : notes){System.out.println(s);}studentMain();}"
1022	"public static boolean isVplexBackendVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString());return TRUE.equals(status);}"
1023	"public void registerKey(K key){synchronized(this.monitor){if(!this.pool.containsKey(key)){this.pool.put(key,new LinkedBlockingQueue<W>());}}}"
1024	"@Override public int read() throws IOException{if(!readyBuffer()){return -1;}return _decodedBytes[bufferPosition++]&255;}"
1025	"private double updateGradSumNormSquared(SparseVector negativeGrad){gradSumNormSquared+=getGradientNormSquared(negativeGrad)+2*negativeGrad.dot(negativeGradSum)+2*batchGradDotGradSum;return gradSumNormSquared;}"
1026	"@Override public int connectionIndex(){return (int)(Thread.currentThread().getId()%connectionsPerNode);}"
1027	"private void deleteNextWord(KeyEvent ignore){int start=area.getCaretPosition();if(start<area.getLength()){area.nextWord(SelectionPolicy.CLEAR);int end=area.getCaretPosition();area.replaceText(start,end,"""");}}"
1028	"@Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()){case R.id.new_patient_save :if(patientName.getText().length()==0){Snackbar.make(getView(),R.string.create_patient_error_name,Snackbar.LENGTH_SHORT).show();break;}String dayText=day.getText().toString();String monthText=month.getText().toString();String yearText=year.getText().toString();if(dayText.equals("""")||monthText.equals("""")||yearText.equals("""")){Snackbar.make(getView(),R.string.create_patient_error_no_birthDate,Snackbar.LENGTH_SHORT).show();break;}Calendar c=Calendar.getInstance();c.set(Integer.parseInt(yearText),Integer.parseInt(monthText)-1,Integer.parseInt(dayText));Date selectedDate=c.getTime();if(patientAddress.getText().length()==0){Snackbar.make(getView(),R.string.create_patient_error_address,Snackbar.LENGTH_SHORT).show();break;}if(patientGender==null){Snackbar.make(getView(),R.string.create_patient_error_gender,Snackbar.LENGTH_SHORT).show();break;}Patient patient=new Patient();patient.setName(patientName.getText().toString());patient.setBirthDate(selectedDate);patient.setGuid(""patient""+new Random().nextInt());patient.setAddress(patientAddress.getText().toString());if(patientGender.equals(""male"")){patient.setPicture(R.drawable.male);patient.setGender(Constants.MALE);}else {patient.setPicture(R.drawable.female);patient.setGender(Constants.FEMALE);}patient.setFavorite(false);patient.save();Snackbar.make(getView(),R.string.create_patient_success,Snackbar.LENGTH_SHORT).show();BackStackHandler.goToPreviousScreen();break;}return super.onOptionsItemSelected(item);}"
1029	"@Override public int getValue(){return controller.hasDynmap?1:0;}"
1030	"@Override boolean isAllowed(Layer layer){return true;}"
1031	"@Override protected void writeEntityToNBT(NBTTagCompound nbttagcompound){super.writeEntityToNBT(nbttagcompound);nbttagcompound.setFloat(""frontYaw"",frontYaw);nbttagcompound.setFloat(""rearYaw"",rearYaw);}"
1032	"public void onClick(View v){if(mHotItemType==DrawingPath.DRAWING_PATH_POINT||mHotItemType==DrawingPath.DRAWING_PATH_LINE||mHotItemType==DrawingPath.DRAWING_PATH_AREA){if(mDrawingSurface.moveHotItemToNearestPoint()){modified();}else {Toast.makeText(context,R.string.failed_snap_to_point,Toast.LENGTH_SHORT).show();}}dismissPopup();}"
1033	"public CheckersPiece(CheckersPiece cp){pos=new CheckersPosition();dstRect=new Rect();this.setPos(cp.get_position().get_row(),cp.get_position().get_col());if(cp.is_captured()){this.set_captured();}else {this.captured=false;}this.setCrowned(cp.is_crowned());this.pieceType=cp.pieceType;curr_time_step=0;}"
1034	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1035	"@Override public void onClick(ClickEvent event){infoPanel.setActive(true);}"
1036	"@Override public boolean canPerform(GameSession gs,Agent agent,TileSystem ts,Tile tile){return (tile.id==TileId.GRASS);}"
1037	"@Override public void run(){if(result[0]<=circle.getRadius()){Toast.makeText(this,""You're nearby a task."",Toast.LENGTH_SHORT).show();}handler.postDelayed(this,10000);}"
1038	"private void fetchData(){this.showSpinner(""Loading ..."");}"
1039	"@Override protected boolean word(int base,int u3,long[] a3,long[] b3,long mask){return (a3[u3]&=b3[u3]|~mask)==0L;}"
1040	"public boolean canModifyStat(Battle b,ActivePokemon p,ActivePokemon opp){return b.getWeather().namesies()==EffectNamesies.SUNNY;}"
1041	"@Override public String isAcceptable(T value){return theParentEl.isAcceptable(value);}"
1042	"private static boolean isSupportedUriScheme(UriScheme localUriScheme){return (localUriScheme!=null&&localUriScheme==UriScheme.RTSP||localUriScheme==UriScheme.HTTP);}"
1043	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();}"
1044	"public boolean containsInput(Fluid aFluid){return aFluid!=null&&mRecipeFluidMap.containsKey(aFluid);}"
1045	"public static void main(String[] args){if(args.length!=2){System.out.println(""????????????????????????????????????."");System.out.println(""??hoge test.txt"");System.exit(1);}try{ArrayList<Integer> numOfLines=search(args[0],args[1]);if(numOfLines.size()>0){System.out.println(""???????????????"");}else {System.out.println(""????????????????????????"");numOfLines.forEach(num -> {  System.out.print(num + "" "");});}}catch(IOException e){System.out.println(""?????????"");}}"
1046	"public OJMethod[] getAllMethods(OJClass clazz){return getAllMethods(clazz,ALLOW_NON_STATIC+ALLOW_PROTECTED_INHERITED);}"
1047	"@Override public String doAction() throws CannotGetPlayerException{if(getTarget().size()!=1){return GameMessage.NO_ACTION();}Player target=getTarget().get(0);if(!GameEngine.getCharacter(target).isAlive()){return GameMessage.TARGET_DEAD();}if(this.isRoleBlocked()){return GameMessage.NO_FEEDBACK();}GameEngine.getCharacter(target).addVisitor(getPlayer());GameEngine.getCharacter(target).kill();return GameMessage.NO_FEEDBACK();}"
1048	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Realm realm=AppUtil.getRealmInstance(App.getInstance());com.ointerface.oconnect.data.AppConfig config=realm.where(com.ointerface.oconnect.data.AppConfig.class).equalTo(""appName"",getString(R.string.app_name)).findFirst();if(config!=null&&config.getDefaultConference()!=null&&!config.getDefaultConference().equalsIgnoreCase("""")){AppUtil.setSelectedConferenceID(this,config.getDefaultConference());}Organization result;if(config!=null&&config.getOrganizationId()!=null&&!config.getOrganizationId().equalsIgnoreCase("""")){result=realm.where(Organization.class).equalTo(""objectId"",config.getOrganizationId()).findFirst();}else {result=realm.where(Organization.class).equalTo(""objectId"",AppConfig.primaryOrganizationID).findFirst();}if(result==null||result.getShowSplash()==false){gotoConferenceListView();finish();return ;}if(result.showCustomSplash()){setContentView(R.layout.activity_custom_splash_with_custom_image);}else {setContentView(R.layout.activity_custom_splash);}if(result!=null){if(result.getShowSplash()==true){ImageView ivOrganizationLogo=(ImageView)findViewById(R.id.ivOrganizationLogo);if(result.getImage()!=null){Bitmap bm=BitmapFactory.decodeByteArray(result.getImage(),0,result.getImage().length);ivOrganizationLogo.setImageBitmap(bm);}Handler handler=new Handler();handler.postDelayed(new Runnable(){  public void run(){    gotoConferenceListView();  }},4000);}else {gotoConferenceListView();}}else {ParseQuery<ParseObject> query=ParseQuery.getQuery(""Organization"");query.getInBackground(AppConfig.primaryOrganizationID,new GetCallback<ParseObject>(){  public void done(  ParseObject object,  ParseException e){    if (e == null) {      if (object.getBoolean(""showSplash"")) {        ParseFile parseImage=(ParseFile)object.getParseFile(""image"");        ImageView ivOrganizationLogo=(ImageView)findViewById(R.id.ivOrganizationLogo);        AppUtil.loadImages(parseImage,ivOrganizationLogo);        Handler handler=new Handler();        handler.postDelayed(new Runnable(){          public void run(){            gotoConferenceListView();          }        },4000);      } else {        gotoConferenceListView();      }    } else {      gotoConferenceListView();    }  }});}}"
1049	"boolean doSTORE(String tag,String sequenceSet,List<String> flagNames,StoreAction operation,boolean silent,int modseq,boolean byUID) throws IOException,ImapException{checkCommandThrottle(new StoreCommand(sequenceSet,flagNames,operation,modseq));if(!checkState(tag,State.SELECTED)){return true;}ImapFolder i4folder=getSelectedFolder();if(i4folder==null){throw new ImapSessionClosedException();}if(!i4folder.isWritable()){sendNO(tag,""mailbox selected READ-ONLY"");return true;}if(modseq>=0){activateExtension(ImapExtension.CONDSTORE);}boolean modseqEnabled=sessionActivated(ImapExtension.CONDSTORE);if(!modseqEnabled&&modseq>=0){throw new ImapParseException(tag,""NOMODSEQ"",""cannot STORE UNCHANGEDSINCE in this mailbox"",true);}ImapMessageSet modifyConflicts=modseqEnabled?new ImapMessageSet():null;String command=(byUID?""UID STORE"":""STORE"");List<Tag> newTags=(operation!=StoreAction.REMOVE?new ArrayList<Tag>():null);MailboxStore mbox=selectedFolderListener.getMailbox();Set<ImapMessage> i4set;mbox.lock(true);try{i4set=i4folder.getSubsequence(tag,sequenceSet,byUID);}finally{mbox.unlock();}boolean allPresent=byUID||!i4set.contains(null);i4set.remove(null);try{List<String> tags=Lists.newArrayList();Set<ImapFlag> i4flags=new HashSet<ImapFlag>(flagNames.size());for(String name : flagNames){ImapFlag i4flag=i4folder.getFlagByName(name);if(i4flag==null){tags.add(name);continue;}else {if(i4flag.mId>0){tags.add(i4flag.mName);}else {i4flags.add(i4flag);}}if(operation!=StoreAction.REMOVE){if(i4flag.mId==Flag.ID_DELETED){if(!i4folder.getPath().isWritable(ACL.RIGHT_DELETE)){throw ServiceException.PERM_DENIED(""you do not have permission to set the \\Deleted flag"");}}else {if(i4flag.mPermanent){if(!i4folder.getPath().isWritable(ACL.RIGHT_WRITE)){throw ServiceException.PERM_DENIED(""you do not have permission to set the ""+i4flag.mName+"" flag"");}}}}}int flags=Flag.BITMASK_UNREAD;short sflags=0;if(operation==StoreAction.REPLACE){for(ImapFlag i4flag : i4flags){if(!i4flag.mPermanent){sflags=(byte)(i4flag.mPositive?sflags|i4flag.mBitmask:sflags&~i4flag.mBitmask);}else {flags=(int)(i4flag.mPositive?flags|i4flag.mBitmask:flags&~i4flag.mBitmask);}}}long checkpoint=System.currentTimeMillis();int i=0;List<ImapMessage> i4list=new ArrayList<ImapMessage>(SUGGESTED_BATCH_SIZE);List<Integer> idlist=new ArrayList<Integer>(SUGGESTED_BATCH_SIZE);for(ImapMessage msg : i4set){i4list.add(msg);idlist.add(msg.msgId);if(++i%SUGGESTED_BATCH_SIZE!=0&&i!=i4set.size()){continue;}mbox.lock(true);try{List<ItemIdentifier> itemIds=ItemIdentifier.fromAccountIdAndItemIds(mbox.getAccountId(),idlist);if(modseq>=0){List<ZimbraMailItem> items=mbox.getItemsById(getContext(),itemIds);for(int idx=items.size()-1;idx>=0;idx--){ImapMessage i4msg=i4list.get(idx);if(items.get(idx).getModifiedSequence()>modseq){modifyConflicts.add(i4msg);i4list.remove(idx);idlist.remove(idx);allPresent=false;}}}try{if(silent&&!modseqEnabled){i4folder.disableNotifications();}if(operation==StoreAction.REPLACE){mbox.setTags(getContext(),itemIds,flags,tags);for(ImapMessage i4msg : i4list){i4msg.setSessionFlags(sflags,i4folder);}}else {for(ImapFlag i4flag : i4flags){boolean add=operation==StoreAction.ADD^!i4flag.mPositive;if(i4flag.mPermanent){if((i4flag.mBitmask&Flag.BITMASK_DELETED)>0){ZimbraLog.imap.info(""IMAP client has flagged the item with id %d to be Deleted altertag"",msg.msgId);}mbox.alterTag(getContext(),itemIds,i4flag.mName,add);}for(ImapMessage i4msg : i4list){i4msg.setSessionFlags((short)(add?i4msg.sflags|i4flag.mBitmask:i4msg.sflags&~i4flag.mBitmask),i4folder);}}boolean add=operation==StoreAction.ADD;for(String tagName : tags){mbox.alterTag(getContext(),itemIds,tagName,add);}}}finally{i4folder.enableNotifications();}}finally{mbox.unlock();}if(!silent||modseqEnabled){for(ImapMessage i4msg : i4list){ImapFolder.DirtyMessage dirty=i4folder.undirtyMessage(i4msg);if(silent&&(dirty==null||dirty.modseq<=0)){continue;}StringBuilder ntfn=new StringBuilder();boolean empty=true;ntfn.append(i4msg.sequence).append("" FETCH ("");if(!silent){ntfn.append(i4msg.getFlags(i4folder));empty=false;}if(byUID){ntfn.append(empty?"""":"" "").append(""UID "").append(i4msg.imapUid);empty=false;}if(dirty!=null&&dirty.modseq>0&&modseqEnabled){ntfn.append(empty?"""":"" "").append(""MODSEQ ("").append(dirty.modseq).append(')');empty=false;}sendUntagged(ntfn.append(')').toString());}}else {long now=System.currentTimeMillis();if(now-checkpoint>MAXIMUM_IDLE_PROCESSING_MILLIS){sendIdleUntagged();checkpoint=now;}}i4list.clear();idlist.clear();}}catch(ServiceException e){deleteTags(newTags);if(e.getCode().equals(MailServiceException.INVALID_NAME)){ZimbraLog.imap.info(""%s failed: %s"",command,e.getMessage());}else {ZimbraLog.imap.warn(""%s failed"",command,e);}sendNO(tag,command+"" failed"");return canContinue(e);}boolean hadConflicts=modifyConflicts!=null&&!modifyConflicts.isEmpty();String conflicts=hadConflicts?"" [MODIFIED ""+ImapFolder.encodeSubsequence(modifyConflicts,byUID)+']':"""";sendNotifications(byUID,false);if(silent||allPresent){sendOK(tag,command+conflicts+"" completed"");}else {sendNO(tag,command+conflicts+"" completed"");}return true;}"
1050	"private void checkVmFault(int simulationTime,int errorFreq){if(simulationTime%errorFreq==50&numberOfVm>4){Random r=new Random();Object[] keyArray=Vms.keySet().toArray();Vm vm=Vms.get(keyArray[r.nextInt(numberOfVm)]);log.info(""An Error Occurred On VM: ""+vm.getVmId());if(!checkOtherVmsForMigration(vm)){Vm v=createNewVm(simulationTime);vm.getTasks().values().forEach(task -> v.assignTask(task,false));deleteVm(vm);}else {consolidateVm(vm,false);}}}"
1051	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1052	"public static synchronized Database getPeerBase(String peerId){return getPeerDatabases().getOrDefault(peerId,new Database(peerId));}"
1053	"private void carsPaying(){int i=0;while(paymentCarQueue.carsInQueue()>0&&i<paymentSpeed){Car car=paymentCarQueue.removeCar();carLeavesSpot(car);i++;}}"
1054	"public FeatureListEntry(String name,double score){this.name=name;this.score=score;String[] splits=name.split(metricValueDelimiter);this.metric=splits[0];this.value=splits[1];}"
1055	"protected void init(){Panel panel=new Panel();setVisible(true);Panel mainPanel=new Panel();Borderlayout mainLayout=new Borderlayout();Grid productLayout=GridFactory.newGridLayout();this.setTitle(Msg.getMsg(p_ctx,""Query""));this.setClosable(true);cont=2;appendChild(panel);northPanel=new Panel();mainPanel.appendChild(mainLayout);mainPanel.setStyle(""width: 100%; height: 100%; padding: 0; margin: 0"");mainLayout.setHeight(""100%"");mainLayout.setWidth(""100%"");Center center=new Center();North north=new North();north.setStyle(""border: none"");mainLayout.appendChild(north);north.appendChild(northPanel);northPanel.appendChild(productLayout);appendChild(mainPanel);productLayout.setWidth(""100%"");Rows rows=null;Row row=null;rows=productLayout.newRows();row=rows.newRow();Label ldoc=new Label(Msg.translate(p_ctx,""DocumentNo""));row.setHeight(""60px"");row.appendChild(ldoc);f_documentno=new WPosTextField(p_posPanel,p_pos.getOSK_KeyLayout_ID());row.appendChild(f_documentno);f_documentno.addEventListener(""onFocus"",this);Label ldate=new Label(Msg.translate(p_ctx,""DateOrdered""));row.appendChild(ldate);f_date=new Datebox();f_date.setValue(Env.getContextAsDate(Env.getCtx(),""#Date""));f_date.addEventListener(""onBlur"",this);row.appendChild(f_date);f_processed=new Checkbox();f_processed.setLabel(Msg.translate(p_ctx,""Processed""));f_processed.setSelected(false);row.appendChild(f_processed);f_processed.addActionListener(this);f_refresh=createButtonAction(""Refresh"",KeyStroke.getKeyStroke(KeyEvent.VK_F5,0));row.appendChild(f_refresh);f_refresh.addActionListener(this);Panel panelbutton=new Panel();row=rows.newRow();row.setSpans(""5"");row.setHeight(""65px"");f_up=createButtonAction(""Previous"",KeyStroke.getKeyStroke(KeyEvent.VK_UP,0));panelbutton.appendChild(f_up);f_up.addActionListener(this);f_down=createButtonAction(""Next"",KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0));panelbutton.appendChild(f_down);f_down.addActionListener(this);f_ok=createButtonAction(""Ok"",KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0));panelbutton.appendChild(f_ok);f_ok.addActionListener(this);f_cancel=createButtonAction(""Cancel"",KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0));panelbutton.appendChild(f_cancel);row.appendChild(panelbutton);f_cancel.addActionListener(this);m_table=ListboxFactory.newDataTable();String sql=m_table.prepareTable(s_layout,""C_Order"",""C_POS_ID = ""+p_pos.getC_POS_ID(),false,""C_Order"")+"" ORDER BY Margin, QtyAvailable"";enableButtons();center=new Center();center.setStyle(""border: none"");m_table.setWidth(""100%"");m_table.setHeight(""99%"");m_table.addActionListener(this);center.appendChild(m_table);mainLayout.appendChild(center);m_table.addActionListener(this);m_table.autoSize();date=new Date(Env.getContextAsDate(Env.getCtx(),""#Date"").getTime());setResults(p_ctx,f_processed.isSelected(),f_documentno.getText(),date);}"
1056	"@Override public void run(){android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);BufferedReader Reader=ReaderOf(Source.Access);if(Reader==null){return ;}Head(Reader);Source.Infos.NbNodes=0;String StringJSON;try{while((StringJSON=Reader.readLine())!=null){Source.Infos.NbNodes++;Sample Values=LibJSON.fromJSON(StringJSON);if(Values==null){continue;}Listener.loaded(Values);}}catch(Exception FileError){Log.d(LogTag,""Error while loading :""+Source.Access.getName());Listener.finished(false);}Listener.finished(true);State=Loader.finished;}"
1057	"public void fireRSConnectPublishEvent(RSConnectPublishResult result,boolean launchBrowser){if(Satellite.isCurrentWindowSatellite()){RSConnect.deployFromSatellite(result.getSource().getSourceFile(),result.getSource().getDeployDir(),result.getSource().getDeployFile(),result.getSource().getWebsiteDir(),result.getSource().getDescription(),JsArrayUtil.toJsArrayString(result.getSettings().getDeployFiles()),JsArrayUtil.toJsArrayString(result.getSettings().getAdditionalFiles()),JsArrayUtil.toJsArrayString(result.getSettings().getIgnoredFiles()),result.getSource().isSelfContained(),result.getSource().isShiny(),result.getSettings().getAsMultiple(),result.getSettings().getAsStatic(),launchBrowser,RSConnectDeploymentRecord.create(result.getAppName(),result.getAppTitle(),result.getAccount(),""""));if(!Desktop.isDesktop()){display_.showMessage(GlobalDisplay.MSG_INFO,""Deployment Started"",""RStudio is deploying ""+result.getAppName()+"". ""+""Check the Deploy console tab in the main window for ""+""status updates. "");}}else {events_.fireEvent(new RSConnectDeployInitiatedEvent(result.getSource(),result.getSettings(),launchBrowser,RSConnectDeploymentRecord.create(result.getAppName(),result.getAppTitle(),result.getAccount(),"""")));}}"
1058	"@Override public boolean eval(){return (app.api.isActive()&&app.api.state.lastSet()>last);}"
1059	"public void onClick(DialogInterface dialog,int which){Log.e(""PUSH"",""mensaje: ""+message);}"
1060	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_schema);Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);getSupportActionBar().setDisplayShowTitleEnabled(false);Button numberButton;Button booleanButton;Button headerButton;Button deleteButton; final TableLayout tableLayout=(TableLayout)findViewById(R.id.scoutLayout); final Context c=this;numberButton=(Button)findViewById(R.id.numberButton);numberButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    GetString(""Value Label:"",new StringInputEvent(){      @Override public void Run(      String input){        schema+="","" + input + Constants.TYPE_INTEGER;        SchemaHandler.Setup(tableLayout,schema,c);      }    });  }});booleanButton=(Button)findViewById(R.id.booleanButton);booleanButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    GetString(""Value Label:"",new StringInputEvent(){      @Override public void Run(      String input){        schema+="","" + input + Constants.TYPE_BOOLEAN;        SchemaHandler.Setup(tableLayout,schema,c);      }    });  }});headerButton=(Button)findViewById(R.id.headerButton);headerButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    GetString(""Value Label:"",new StringInputEvent(){      @Override public void Run(      String input){        schema+="","" + input + Constants.TYPE_HEADER;        SchemaHandler.Setup(tableLayout,schema,c);      }    });  }});deleteButton=(Button)findViewById(R.id.deleteButton);deleteButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Constants.OnConfirm(""Are You Sure?"",c,new Runnable(){      @Override public void run(){        List<String> values=new ArrayList<>(Arrays.asList(schema.split("","")));        if (values.size() <= 0)         return;        values.remove(values.size() - 1);        schema="""";        for (int i=0; i < values.size(); ++i) {          schema+=values.get(i);          if (i + 1 < values.size())           schema+="","";        }        SchemaHandler.Setup(tableLayout,schema,c);      }    });  }});SchemaHandler.Setup(tableLayout,schema,this);ImageButton saveButton=(ImageButton)findViewById(R.id.saveButton);saveButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    FileHandler.Write(FileHandler.SCHEMA,schema);  }});}"
1061	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
1062	"@Override protected void onPostExecute(String result){setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);mWakeLock.release();mProgressDialog.dismiss();Log.d(""FD"",""DOWNLOAD COMPLETE"");if(result!=null){Toast.makeText(context,""Download error: ""+result,Toast.LENGTH_LONG).show();}else {Toast.makeText(context,""File downloaded"",Toast.LENGTH_SHORT).show();}}"
1063	"@Override public void modelDidFailedLoadWithError(LMModel model){isUploadSuccess=false;Toast.makeText(getApplicationContext(),""????????????????"",Toast.LENGTH_SHORT).show();countForFailure++;}"
1064	"@Override public void actionPerformed(ActionEvent e){gameDifficulty=difficulty[1];}"
1065	"@Override public Character getArchived(){return archiveStatus.getArchived();}"
1066	"@PostMapping(""/game/start"") public String startingTheGame(Model model){deck.shuffleDeck();Hand dealerHand=new Hand();player1=null;dealer=new Player(""Dealer"",dealerHand,0);currentPot=0;showPlayAgainButton=true;model.addAttribute(""walletAmount"",100);return ""blackjack/new-game-form"";}"
1067	"void debugValidate(){if(focusLength>STRICT_NODE_LENGTH){throw new IllegalStateException(""focus len:""+focusLength+"" gt STRICT_NODE_LENGTH:""+STRICT_NODE_LENGTH+""\n""+this.indentedStr(0));}int sz=root.debugValidate();if(sz!=size-focusLength){throw new IllegalStateException(""Size incorrect.  Root size: ""+root.size()+"" RrbSize: ""+size+"" focusLen: ""+focusLength+""\n""+this.indentedStr(0));}if((focusStartIndex<0)||(focusStartIndex>size)){throw new IllegalStateException(""focusStartIndex out of bounds!\n""+this.indentedStr(0));}if(!root.equals(eliminateUnnecessaryAncestors(root))){throw new IllegalStateException(""Unnecessary ancestors!\n""+this.indentedStr(0));}}"
1068	"@Override public void update(Observable o,Object arg){RuleObserverObject ruleObserverObject=(RuleObserverObject)arg;String ruleObserverCode=ruleObserverObject.code;if(ruleObserverCode.equals(""PLAYER_MOVE"")){UserAction userAction=(UserAction)ruleObserverObject.parameters;String serverResponse=sendUserMoveToServer(packUserAction(userAction));System.out.println(""Sent movement. response: ""+serverResponse);}}"
1069	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
1070	"public void cleanup(){if(kernel!=null){kernel.cleanup();}}"
1071	"public boolean isWorkPending(){return !loaded||!seriesAndDataLabelsRendered;}"
1072	"public void removeVolumes(List<URI> volumes){if(_volumes!=null){for(URI uri : volumes){_volumes.remove(uri.toString());}}}"
1073	"@Override public int getItemViewType(int position){Log.d(TAG,""Position is: ""+position);Log.d(TAG,""Item Count is: ""+getItemCount());Log.d(TAG,""loading is: ""+loading);Log.d(TAG,""error is: ""+error);Log.d(TAG,""ended is: ""+ended);Log.d(TAG,""empty is: ""+empty);if(getItemCount()-1==position){return ITEM_TYPE_IDLE;}return ITEM_TYPE_MOVIE;}"
1074	"private void processBundleFiles(File newBundleFile,File baseBundleFile,File patchTmpDir) throws IOException,RecognitionException,PatchException{String bundleName=FilenameUtils.getBaseName(newBundleFile.getName());File destPatchBundleDir=new File(patchTmpDir,bundleName); final File newBundleUnzipFolder=new File(newBundleFile.getParentFile(),bundleName); final File baseBundleUnzipFolder=new File(baseBundleFile.getParentFile(),bundleName);DiffType modifyType=getModifyType(newBundleFile.getName());logger.warning("">>> start to process bundle for patch ""+bundleName+"" >> difftype ""+modifyType.toString()+"" createALl:""+createAll);if(modifyType==DiffType.ADD){FileUtils.copyFileToDirectory(newBundleFile,patchTmpDir);}else {if(createAll||(modifyType==DiffType.MODIFY)){if(null!=baseBundleFile&&baseBundleFile.isFile()&&baseBundleFile.exists()&&!noPatchBundles.contains(baseBundleFile.getName().replace(""_"",""."").substring(3,baseBundleFile.getName().length()-3))&&diffBundleDex){doBundlePatch(newBundleFile,baseBundleFile,patchTmpDir,bundleName,destPatchBundleDir,newBundleUnzipFolder,baseBundleUnzipFolder);}}}}"
1075	"@Override public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
1076	"void doOneEdge(Solution solution,Color c1,Color c2){String message="""";String bord=""blanc-"";int[] edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);if(c2.equals(Color.green)){bord+=""vert"";}else {if(c2.equals(Color.orange)){bord+=""orange"";}else {if(c2.equals(Color.blue)){bord+=""bleu"";}else {if(c2.equals(Color.red)){bord+=""rouge"";}}}}if(edgePos[0]==2&&edgePos[1]==1&&edgePos[2]==2){}else {if(edgePos[0]==2&&edgePos[1]==2&&edgePos[2]==1){message=""Le bord ""+bord+"" est bien positionn?, mettons-le ? droite ""+""pour placer le prochain en bas de la face blanche"";fillAnswerTab(solution,rubiksCubeFirstCross,2,3,message,""first cross"");}else {if(edgePos[0]==2){message=""Le bord ""+bord+"" est sur la bonne face, mais pas o? il faut. Pour ne pas d?ranger le ""+""reste, on va le mettre sur la face oppos?e, la tourner pour positionner le bord ""+""puis le remettre sur la bonne face. Ensuite on le met ? droite pour laisser la place ""+""au prochain bord."";if(edgePos[1]==1){fillAnswerTab(solution,rubiksCubeFirstCross,4,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,5,1,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,0,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,2,3,message,""first cross"");}else {if(edgePos[1]==0){fillAnswerTab(solution,rubiksCubeFirstCross,3,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,5,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,0,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,2,3,message,""first cross"");}}}else {if(edgePos[0]==5){message=""Le bord ""+bord+"" est sur la face oppos?e, on va donc la tourner pour positionner le bord ""+""(si besoin) puis le remettre sur la bonne face. Ensuite on le met ? droite pour ""+""laisser la place au prochain bord."";while(edgePos[1]!=0){fillAnswerTab(solution,rubiksCubeFirstCross,5,1,message,""first cross"");edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);}fillAnswerTab(solution,rubiksCubeFirstCross,0,2,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,2,3,message,""first cross"");}else {int timesToTurn=-1;if(edgePos[1]==1){message=""Le bord ""+bord+"" est sur la tranche du milieu d'une face lat?rale, on va tourner ""+""la face blanche de mani?re ? pouvoir placer le bord au coup suivant, ""+""et finalement placer le bord. Ensuite on le met ? droite pour laisser la place ""+""au prochain bord."";}else {message=""Le bord ""+bord+"" est sur une face lat?rale mais pas sur la tranche du milieu, on va ""+""tourner la face du haut (si besoin) pour ne pas d?ranger les bords faits puis tourner ""+""une fois la face sur laquelle se trouve la vignette blanche du bord que l'on ""+""veut placer. Ensuite on va tourner la face blanche de mani?re ? pouvoir placer le bord ""+""au coup suivant, ""+""et finalement placer le bord. Ensuite on le met ? droite pour laisser la place ""+""au prochain bord."";if(edgePos[0]==0){timesToTurn=0;}else {if(edgePos[0]==1){timesToTurn=3;}else {if(edgePos[0]==3){timesToTurn=2;}else {if(edgePos[0]==4){timesToTurn=1;}}}}fillAnswerTab(solution,rubiksCubeFirstCross,2,timesToTurn,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,edgePos[0],1,message,""first cross"");fillAnswerTab(solution,rubiksCubeFirstCross,2,4-timesToTurn,message,""first cross"");edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);}int faceOfOtherSideOfEdge=otherSideOfUnitaryCube[edgePos[0]][edgePos[1]][edgePos[2]]/100;if(faceOfOtherSideOfEdge==0){timesToTurn=0;}else {if(faceOfOtherSideOfEdge==1){timesToTurn=3;}else {if(faceOfOtherSideOfEdge==3){timesToTurn=2;}else {if(faceOfOtherSideOfEdge==4){timesToTurn=1;}}}}fillAnswerTab(solution,rubiksCubeFirstCross,2,timesToTurn,message,""first cross"");edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);while(edgePos[0]!=2){fillAnswerTab(solution,rubiksCubeFirstCross,faceOfOtherSideOfEdge,1,message,""first cross"");edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);}while(edgePos[2]!=2){fillAnswerTab(solution,rubiksCubeFirstCross,2,1,message,""first cross"");edgePos=findUnitaryEdge(rubiksCubeFirstCross,c1,c2);}}}}}}"
1077	"public void loop(){}"
1078	"@Override public void positionCallBack(int position){Homestay homestay=homestayList.get(position);homestay.getFavorite().put(BaseActivity.getUid(),true);notifyDataSetChanged();}"
1079	"private void run(int frame){data=ImageConverter.getData(stack.getPixels(frame),stack.getWidth(),stack.getHeight(),null,data);FilterCandidates candidates=filterCandidates.get(frame);int tp=0,fp=0,tn=0,fn=0;FitResult[] fitResult=new FitResult[candidates.spots.length];FitParameters parameters=new FitParameters();Spot[] spots=new Spot[candidates.spots.length];for(int i=0;i<spots.length;i++){spots[i]=candidates.spots[i].spot;}parameters.spots=spots;ParameterisedFitJob job=new ParameterisedFitJob(parameters,frame,data,bounds);fitWorker.run(job); final boolean[] fitMatch=new boolean[spots.length]; final double[] d2=new double[spots.length];Coordinate[] actual=ResultsMatchCalculator.getCoordinates(actualCoordinates,frame);if(actual.length>0){BasePoint[] predicted=new BasePoint[spots.length];matches.clear();int count=0;for(int i=0;i<spots.length;i++){fitResult[i]=job.getFitResult(i);if(fitResult[i].getStatus()==FitStatus.OK){ final double[] params=job.getFitResult(i).getParameters();predicted[count++]=new BasePoint((float)params[Gaussian2DFunction.X_POSITION],(float)params[Gaussian2DFunction.Y_POSITION],i);}}if(count>0){predicted=Arrays.copyOf(predicted,count);MatchCalculator.analyseResults2D(actual,predicted,distance,null,null,null,matches);for(PointPair pair : matches){ final BasePoint p=(BasePoint)pair.getPoint2(); final int i=(int)p.getZ();fitMatch[i]=true;d2[i]=pair.getXYDistance2();}}}for(int i=0;i<candidates.spots.length;i++){ScoredSpot spot=candidates.spots[i];if(spot.match){if(fitMatch[i]){tp++;}else {fn++;}}else {if(fitMatch[i]){fp++;}else {tn++;}}}candidates=(FilterCandidates)candidates.clone();candidates.tp=tp;candidates.fp=fp;candidates.tn=tn;candidates.fn=fn;candidates.fitResult=fitResult;candidates.fitMatch=fitMatch;candidates.d2=d2;results.put(frame,candidates);}"
1080	"public static List<Tweet> fromJSONArray(JSONArray jsonArray) throws JSONException{List<Tweet> allTweets=new ArrayList<>();for(int i=0;i<jsonArray.length();i++){JSONObject json=jsonArray.getJSONObject(i);Tweet tweet=new Tweet();tweet.body=json.getString(""text"");tweet.uid=json.getLong(""id"");tweet.createdAt=json.getString(""created_at"");tweet.user=User.fromJSONWithDBSave(json.getJSONObject(""user""));if(json.has(""retweet_count"")){tweet.retweetCount=Integer.parseInt(json.getString(""retweet_count""));}if(json.has(""favorite_count"")){tweet.favouritesCount=Integer.parseInt(json.getString(""favorite_count""));}tweet.save();allTweets.add(tweet);}return allTweets;}"
1081	"public boolean doBet(WebDriver driver,Integer round,boolean isPlayTime) throws InterruptedException{Integer chip=Config.getThirdFourthLevelAccList().get(0);logger.info(""[Operation - Bet] Base chip is {}"",chip);logger.info(""[Operation - Bet] Play Time is {}"",isPlayTime);if(round==null){logger.info(""[Operation - Bet] ??????"");return false;}thirdNumberCountMap.clear();fourthNumberCountMap.clear();logger.info(""[Operation - Bet] Third fourth numbers to exclude is {}"",Config.getThirdFourthExcludeNumbers());logger.info(""[Operation - Bet] Bet for ???? - {}"",PLAYGROUND);logger.info(""[Operation - Bet] Get fetched ratio for ???? - {} - ?? {}"",PLAYGROUND,round);ThirdFourthRatio ratio=thirdFourthRatioRepository.findByRound(round);if(ratio==null){logger.info(""[Operation - Bet] No ratio information for ???? - {} - ?? {}"",PLAYGROUND,round);return false;}logger.info(""[Operation - Bet] Get last lottery result for ???? - {} - ?? {}"",PLAYGROUND,round-1);LotteryResult lastLotteryResult=lotteryResultRepository.findByRound(round-1);if(lastLotteryResult==null){logger.info(""[Operation - Bet] No last lottery result for ???? - {} - ?? {}"",PLAYGROUND,round-1);return false;}markNumber(lastLotteryResult);LotteryResult lotteryResult2=lotteryResultRepository.findByRound(round-2);if(lotteryResult2!=null){markNumber(lotteryResult2);}LotteryResult lotteryResult3=lotteryResultRepository.findByRound(round-3);if(lotteryResult3!=null){markNumber(lotteryResult3);}LotteryResult lotteryResult4=lotteryResultRepository.findByRound(round-4);if(lotteryResult4!=null){markNumber(lotteryResult4);}LotteryResult lotteryResult5=lotteryResultRepository.findByRound(round-5);if(lotteryResult5!=null){markNumber(lotteryResult5);}LotteryResult lotteryResult6=lotteryResultRepository.findByRound(round-6);if(lotteryResult6!=null){markNumber(lotteryResult6);}logger.info(""[Operation - Bet] Last 6 lottery result for ???? - {} - ?? {}"",PLAYGROUND,round-1);for(Map.Entry<Integer,AtomicInteger> entry : thirdNumberCountMap.entrySet()){logger.info(""[Operation - Bet] Last 6 lottery result ??? {}:{}? for ???? - {} - ?? {}"",entry.getKey(),entry.getValue().intValue(),PLAYGROUND,round-1,entry.getKey(),entry.getValue().intValue());}for(Map.Entry<Integer,AtomicInteger> entry : fourthNumberCountMap.entrySet()){logger.info(""[Operation - Bet] Last 6 lottery result ??? {}:{}? for ???? - {} - ?? {}"",entry.getKey(),entry.getValue().intValue(),PLAYGROUND,round-1,entry.getKey(),entry.getValue().intValue());}if(thirdFourthBetRepository.findByRound(round)!=null){logger.info(""[Operation - Bet] Already bet for ???? - {} - ?? {}"",PLAYGROUND,round);return false;}logger.info(""[Operation - Bet] Get last bet information for ???? - {}"",PLAYGROUND);ThirdFourthBet lastBet=thirdFourthBetRepository.findByRound(round-1);logger.info(""=============== ?? (for test) ==============="");money=calculateMoney(money,calculateLastLotteryResult(lastBet,lastLotteryResult));logger.info(""????:{}"",money);logger.info(""===================================="");ThirdFourthBet bet=new ThirdFourthBet();bet.setRound(round);if(Config.getThirdFourthSmartMode()){logger.info(""[Operation - Bet] Bet in smart mode"");List<Integer> stepIntegerList1=Arrays.stream(Config.getThirdFourthSmartSwitch().get(0).split("","")).map(Integer::parseInt).collect(Collectors.toList());List<Integer> stepIntegerList2=Arrays.stream(Config.getThirdFourthSmartSwitch().get(1).split("","")).map(Integer::parseInt).collect(Collectors.toList());List<Integer> allNumbers=Arrays.asList(1,2,3,4,5,6,7,8,9,10);if(lotteryResult2==null){logger.info(""[Operation - Bet] Cannot find lottery result for 2 consecutive round"");return false;}if(!isPlayTime){logger.info(""[Operation - Bet] Not in play time.  Do not bet for ???? - {} - ?? {}"",PLAYGROUND,round);return false;}if(lastBet==null||decideBetChip(lastLotteryResult.getThird(),lastBet.getBetThird(),isPlayTime).equals(chip)){if(stepIntegerList1.contains(lastLotteryResult.getThird())&&stepIntegerList2.contains(lotteryResult2.getThird())){logger.info(""[Operation - Bet] Bingo! Bet for Third exclude {}"",stepIntegerList2);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList2);logger.info(""[Operation - Bet] Bet Third for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForThird(bet,chip,numberBetList,driver);money=calculateMoney(money,-7*chip);if(bet.getBetFourth()==null){betForFourth(bet,chip,Collections.emptyList(),driver);}}else {if(stepIntegerList2.contains(lastLotteryResult.getThird())&&stepIntegerList1.contains(lotteryResult2.getThird())){logger.info(""[Operation - Bet] Bingo! Bet for Third exclude {}"",stepIntegerList1);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList1);logger.info(""[Operation - Bet] Bet Third for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForThird(bet,chip,numberBetList,driver);money=calculateMoney(money,-7*chip);if(bet.getBetFourth()==null){betForFourth(bet,chip,Collections.emptyList(),driver);}}}}else {if((stepIntegerList1.contains(1)&&lastBet.getBetThird().getFirst()>0)||(stepIntegerList1.contains(2)&&lastBet.getBetThird().getSecond()>0)||(stepIntegerList1.contains(3)&&lastBet.getBetThird().getThird()>0)||(stepIntegerList1.contains(4)&&lastBet.getBetThird().getFourth()>0)||(stepIntegerList1.contains(5)&&lastBet.getBetThird().getFifth()>0)||(stepIntegerList1.contains(6)&&lastBet.getBetThird().getSixth()>0)||(stepIntegerList1.contains(7)&&lastBet.getBetThird().getSeventh()>0)||(stepIntegerList1.contains(8)&&lastBet.getBetThird().getEighth()>0)||(stepIntegerList1.contains(9)&&lastBet.getBetThird().getNineth()>0)||(stepIntegerList1.contains(10)&&lastBet.getBetThird().getTenth()>0)){logger.info(""[Operation - Bet] Continue! Bet for Third exclude {}"",stepIntegerList1);Integer betChip=decideBetChip(lastLotteryResult.getThird(),lastBet.getBetThird(),isPlayTime);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList1);logger.info(""[Operation - Bet] Bet Third for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForThird(bet,betChip,numberBetList,driver);money=calculateMoney(money,-7*betChip);if(bet.getBetFourth()==null){betForFourth(bet,chip,Collections.emptyList(),driver);}}else {if((stepIntegerList2.contains(1)&&lastBet.getBetThird().getFirst()>0)||(stepIntegerList2.contains(2)&&lastBet.getBetThird().getSecond()>0)||(stepIntegerList2.contains(3)&&lastBet.getBetThird().getThird()>0)||(stepIntegerList2.contains(4)&&lastBet.getBetThird().getFourth()>0)||(stepIntegerList2.contains(5)&&lastBet.getBetThird().getFifth()>0)||(stepIntegerList2.contains(6)&&lastBet.getBetThird().getSixth()>0)||(stepIntegerList2.contains(7)&&lastBet.getBetThird().getSeventh()>0)||(stepIntegerList2.contains(8)&&lastBet.getBetThird().getEighth()>0)||(stepIntegerList2.contains(9)&&lastBet.getBetThird().getNineth()>0)||(stepIntegerList2.contains(10)&&lastBet.getBetThird().getTenth()>0)){logger.info(""[Operation - Bet] Continue! Bet for Third exclude {}"",stepIntegerList2);Integer betChip=decideBetChip(lastLotteryResult.getThird(),lastBet.getBetThird(),isPlayTime);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList2);logger.info(""[Operation - Bet] Bet Third for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForThird(bet,betChip,numberBetList,driver);money=calculateMoney(money,-7*betChip);if(bet.getBetFourth()==null){betForFourth(bet,chip,Collections.emptyList(),driver);}}}}if(lastBet==null||decideBetChip(lastLotteryResult.getFourth(),lastBet.getBetFourth(),isPlayTime).equals(chip)){if(stepIntegerList1.contains(lastLotteryResult.getFourth())&&stepIntegerList2.contains(lotteryResult2.getFourth())){logger.info(""[Operation - Bet] Bingo! Bet for Fourth exclude {}"",stepIntegerList2);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList2);logger.info(""[Operation - Bet] Bet Fourth for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForFourth(bet,chip,numberBetList,driver);money=calculateMoney(money,-7*chip);if(bet.getBetThird()==null){betForThird(bet,chip,Collections.emptyList(),driver);}}else {if(stepIntegerList2.contains(lastLotteryResult.getFourth())&&stepIntegerList1.contains(lotteryResult2.getFourth())){logger.info(""[Operation - Bet] Bingo! Bet for Fourth exclude {}"",stepIntegerList1);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList1);logger.info(""[Operation - Bet] Bet Fourth for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForFourth(bet,chip,numberBetList,driver);money=calculateMoney(money,-7*chip);if(bet.getBetThird()==null){betForThird(bet,chip,Collections.emptyList(),driver);}}}}else {if((stepIntegerList1.contains(1)&&lastBet.getBetFourth().getFirst()>0)||(stepIntegerList1.contains(2)&&lastBet.getBetFourth().getSecond()>0)||(stepIntegerList1.contains(3)&&lastBet.getBetFourth().getThird()>0)||(stepIntegerList1.contains(4)&&lastBet.getBetFourth().getFourth()>0)||(stepIntegerList1.contains(5)&&lastBet.getBetFourth().getFifth()>0)||(stepIntegerList1.contains(6)&&lastBet.getBetFourth().getSixth()>0)||(stepIntegerList1.contains(7)&&lastBet.getBetFourth().getSeventh()>0)||(stepIntegerList1.contains(8)&&lastBet.getBetFourth().getEighth()>0)||(stepIntegerList1.contains(9)&&lastBet.getBetFourth().getNineth()>0)||(stepIntegerList1.contains(10)&&lastBet.getBetFourth().getTenth()>0)){logger.info(""[Operation - Bet] Continue! Bet for Fourth exclude {}"",stepIntegerList1);Integer betChip=decideBetChip(lastLotteryResult.getFourth(),lastBet.getBetFourth(),isPlayTime);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList1);logger.info(""[Operation - Bet] Bet Fourth for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForFourth(bet,betChip,numberBetList,driver);money=calculateMoney(money,-7*betChip);if(bet.getBetThird()==null){betForThird(bet,chip,Collections.emptyList(),driver);}}else {if((stepIntegerList2.contains(1)&&lastBet.getBetFourth().getFirst()>0)||(stepIntegerList2.contains(2)&&lastBet.getBetFourth().getSecond()>0)||(stepIntegerList2.contains(3)&&lastBet.getBetFourth().getThird()>0)||(stepIntegerList2.contains(4)&&lastBet.getBetFourth().getFourth()>0)||(stepIntegerList2.contains(5)&&lastBet.getBetFourth().getFifth()>0)||(stepIntegerList2.contains(6)&&lastBet.getBetFourth().getSixth()>0)||(stepIntegerList2.contains(7)&&lastBet.getBetFourth().getSeventh()>0)||(stepIntegerList2.contains(8)&&lastBet.getBetFourth().getEighth()>0)||(stepIntegerList2.contains(9)&&lastBet.getBetFourth().getNineth()>0)||(stepIntegerList2.contains(10)&&lastBet.getBetFourth().getTenth()>0)){logger.info(""[Operation - Bet] Continue! Bet for Fourth exclude {}"",stepIntegerList2);Integer betChip=decideBetChip(lastLotteryResult.getFourth(),lastBet.getBetFourth(),isPlayTime);List<Integer> numberBetList=new ArrayList<>(allNumbers);numberBetList.removeAll(stepIntegerList2);logger.info(""[Operation - Bet] Bet Fourth for ???? - {} - ?? {} - {}"",PLAYGROUND,round,numberBetList);betForFourth(bet,betChip,numberBetList,driver);money=calculateMoney(money,-7*betChip);if(bet.getBetThird()==null){betForThird(bet,chip,Collections.emptyList(),driver);}}}}if(bet.getBetThird()==null||bet.getBetFourth()==null){return false;}}else {logger.info(""[Operation - Bet] Bet in basic mode"");List<Integer> numberBetList=new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));numberBetList.removeAll(Config.getThirdFourthExcludeNumbers());if(lastBet==null){if(!isPlayTime){logger.info(""[Operation - Bet] Not in play time.  Do not bet for ???? - {} - ?? {}"",PLAYGROUND,round-1);}else {logger.info(""[Operation - Bet] No last bet for ???? - {} - ?? {}"",PLAYGROUND,round-1);Collections.shuffle(numberBetList);betForThird(bet,chip,numberBetList.subList(0,Math.min(numberBetList.size(),7)),driver);Collections.shuffle(numberBetList);betForFourth(bet,chip,numberBetList.subList(0,Math.min(numberBetList.size(),7)),driver);money=calculateMoney(money,-2*Math.min(numberBetList.size(),7)*chip);}}else {List<Integer> thirdNumberToBetList=new ArrayList<>(numberBetList);List<Integer> fourthNumberToBetList=new ArrayList<>(numberBetList);List<Integer> thirdNumberToRemoveList=new ArrayList<>();List<Integer> fourthNumberToRemoveList=new ArrayList<>();for(int i=1;i<=10;i++){if(thirdNumberCountMap.containsKey(i)&&thirdNumberCountMap.get(i).intValue()>2){thirdNumberToRemoveList.add(i);}if(fourthNumberCountMap.containsKey(i)&&fourthNumberCountMap.get(i).intValue()>2){fourthNumberToRemoveList.add(i);}}thirdNumberToBetList.removeAll(thirdNumberToRemoveList);fourthNumberToBetList.removeAll(fourthNumberToRemoveList);Collections.shuffle(thirdNumberToBetList);Collections.shuffle(fourthNumberToBetList);Integer thirdMoneyBet=decideBetChip(lastLotteryResult.getThird(),lastBet.getBetThird(),isPlayTime);betForThird(bet,thirdMoneyBet,thirdNumberToBetList.subList(0,Math.min(thirdNumberToBetList.size(),7)),driver);money=calculateMoney(money,-Math.min(thirdNumberToBetList.size(),7)*thirdMoneyBet);Integer fourthMoneyBet=decideBetChip(lastLotteryResult.getFourth(),lastBet.getBetFourth(),isPlayTime);betForFourth(bet,fourthMoneyBet,fourthNumberToBetList.subList(0,Math.min(fourthNumberToBetList.size(),7)),driver);money=calculateMoney(money,-Math.min(fourthNumberToBetList.size(),7)*fourthMoneyBet);}}logger.info(""=============== ?? (for test) ==============="");logger.info(""????:{}"",money);logger.info(""===================================="");thirdFourthBetRepository.save(bet);return true;}"
1082	"@Override protected void onPostExecute(Void result){if(!isCancelled()){heartbeatTask=null;}}"
1083	"public static void main(String... args){try{new JavaBackend().compile(args);}catch(NotImplementedYetException e){System.err.println(e.getMessage());System.exit(0);}catch(Exception e){System.err.println(""An error occurred during compilation:\n""+e.getMessage());if(Arrays.asList(args).contains(""-debug"")){e.printStackTrace();}System.exit(1);}}"
1084	"@Override public void execute() throws Exception{Map<String,String> hostToIPs=new HashMap<String,String>();if(hostNames.size()!=hostIps.size()){throw new IllegalStateException(ExecutionUtils.getMessage(""compute.cluster.host.ip.mismatch""));}int index=0;for(String hostname : hostNames){hostToIPs.put(hostname,hostIps.get(index));index++;}if(cluster==null){cluster=ComputeUtils.createCluster(name);logInfo(""compute.cluster.created"",name);}else {hostNames=ComputeUtils.removeExistingHosts(hostNames,cluster);}acquireClusterLock(cluster);List<Host> hosts=ComputeUtils.createHosts(cluster,computeVirtualPool,hostNames,virtualArray);for(Host host : hosts){acquireHostLock(host,cluster);}logInfo(""compute.cluster.hosts.created"",ComputeUtils.nonNull(hosts).size());Map<Host,URI> hostToBootVolumeIdMap=ComputeUtils.makeBootVolumes(project,virtualArray,virtualPool,size,hosts,getClient(),portGroup);logInfo(""compute.cluster.boot.volumes.created"",hostToBootVolumeIdMap!=null?ComputeUtils.nonNull(hostToBootVolumeIdMap.values()).size():0);hostToBootVolumeIdMap=ComputeUtils.deactivateHostsWithNoBootVolume(hostToBootVolumeIdMap,cluster);Map<Host,URI> hostToEgIdMap=ComputeUtils.exportBootVols(hostToBootVolumeIdMap,project,virtualArray,hlu,portGroup);logInfo(""compute.cluster.exports.created"",hostToEgIdMap!=null?ComputeUtils.nonNull(hostToEgIdMap.values()).size():0);hostToBootVolumeIdMap=ComputeUtils.deactivateHostsWithNoExport(hostToBootVolumeIdMap,hostToEgIdMap,cluster);hosts=ComputeUtils.setHostBootVolumes(hostToBootVolumeIdMap,false);logInfo(""compute.cluster.exports.installing.os"");installOSForHosts(hostToIPs,ComputeUtils.getHostNameBootVolume(hosts),hosts);hosts=ComputeUtils.deactivateHostsWithNoOS(hosts);logInfo(""compute.cluster.exports.installed.os"",ComputeUtils.nonNull(hosts).size());ComputeUtils.addHostsToCluster(hosts,cluster);hosts=ComputeUtils.deactivateHostsNotAddedToCluster(hosts,cluster);try{if(ComputeUtils.findHostNamesInCluster(cluster).isEmpty()){logInfo(""compute.cluster.removing.empty.cluster"");ComputeUtils.deactivateCluster(cluster);}else {if(!ComputeUtils.nonNull(hosts).isEmpty()){pushToVcenter(hosts);}else {logWarn(""compute.cluster.newly.provisioned.hosts.none"");}}}catch(Exception ex){logError(ex.getMessage());setPartialSuccess();}String orderErrors=ComputeUtils.getOrderErrors(cluster,copyOfHostNames,computeImage,vcenterId);if(orderErrors.length()>0){if(ComputeUtils.nonNull(hosts).isEmpty()){throw new IllegalStateException(ExecutionUtils.getMessage(""compute.cluster.order.incomplete"",orderErrors));}else {logError(""compute.cluster.order.incomplete"",orderErrors);setPartialSuccess();}}}"
1085	"public BigDouble subtract(BigDouble d){long exp=Math.max(exponent2,d.exponent2);return new BigDouble(setExponent(significand,exponent2-exp)-setExponent(d.significand,d.exponent2-exp),exp);}"
1086	"public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){try{if(args[1].equalsIgnoreCase(""xp"")){if(args[2].equalsIgnoreCase(""mine"")||args[2].equalsIgnoreCase(""Mining"")){String p=args[0];float xp=Integer.valueOf(args[3]);PlayerEvent.MiningXp.put(p,xp);sender.sendMessage(p+""'s xp in Mining changed to ""+xp);}else {if(args[2].equalsIgnoreCase(""Fish"")||args[2].equalsIgnoreCase(""Fishing"")){String p=args[0];float xp=Integer.valueOf(args[3]);PlayerEvent.FishingXp.put(p,xp);PlayerEvent.FishingLevel.put(p,PlayerEvent.levelEQ(PlayerEvent.FishingXp.get(p)));sender.sendMessage(p+""'s xp in Fishing changed to ""+xp);}else {if(args[2].equalsIgnoreCase(""Wood"")||args[2].equalsIgnoreCase(""Woodcutting"")){String p=args[0];float xp=Integer.valueOf(args[3]);PlayerEvent.WoodcuttingXp.put(p,xp);sender.sendMessage(p+""'s xp in Woodcutting changed to ""+xp);}}}}else {if(args[1].equalsIgnoreCase(""level"")||args[1].equalsIgnoreCase(""lvl"")){if(args[2].equalsIgnoreCase(""mine"")||args[2].equalsIgnoreCase(""Mining"")){String p=args[0];int level=Integer.valueOf(args[3]);PlayerEvent.MiningLevel.put(p,level);sender.sendMessage(p+""'s level in Mining changed to ""+level);}else {if(args[2].equalsIgnoreCase(""Fish"")||args[2].equalsIgnoreCase(""Fishing"")){String p=args[0];int level=Integer.valueOf(args[3]);PlayerEvent.FishingLevel.put(p,level);sender.sendMessage(p+""'s level in Fishing changed to ""+level);}else {if(args[2].equalsIgnoreCase(""Wood"")||args[2].equalsIgnoreCase(""Woodcutting"")){String p=args[0];int level=Integer.valueOf(args[3]);PlayerEvent.WoodcuttingLevel.put(p,level);sender.sendMessage(p+""'s level in Woodcutting changed to ""+level);}}}}else {sender.sendMessage(""correct format is <command | name | level or xp | Skill | value>"");return false;}}}catch(Exception e){sender.sendMessage(""correct format is <command | name | level or xp | Skill | value>"");}return true;}"
1087	"@Override public void doRender(EntityMiniVeinFloater entity,double x,double y,double z,float entityYaw,float partialTicks){super.doRender(entity,x,y,z,entityYaw,partialTicks);for(EntityPlayer player : entity.worldObj.playerEntities){double d00=-1.0;double distance=16;double playerDistance=player.getDistanceSq(entity.posX,entity.posY,entity.posZ);if((distance<0.0||playerDistance<distance*distance)&&(d00==-1.0||playerDistance<d00)){d00=playerDistance;if(player!=null&&!player.capabilities.isCreativeMode&&entity.useVineAttacking){Tessellator tessellator=Tessellator.getInstance();VertexBuffer worldrenderer=tessellator.getBuffer();this.bindTexture(new ResourceLocation(""moreplanets:textures/blocks/infected_vines.png""));GlStateManager.glTexParameterf(3553,10242,10497.0);GlStateManager.glTexParameterf(3553,10243,10497.0);GlStateManager.disableLighting();GlStateManager.disableCull();GlStateManager.disableBlend();GlStateManager.depthMask(true);GlStateManager.enableAlpha();float f1=240.0;OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,f1,f1);GlStateManager.blendFunc(770,771);float f2=entity.worldObj.getTotalWorldTime()+partialTicks;float f3=f2*0.5%1.0;float f4=entity.getEyeHeight()+0.25;GlStateManager.pushMatrix();GlStateManager.translate((float)x,(float)y+f4,(float)z);Vec3d vec3=this.getPosition(player,player.height*0.5,partialTicks);Vec3d vec31=this.getPosition(entity,f4,partialTicks);Vec3d vec32=vec3.subtract(vec31);double d0=vec32.lengthVector();vec32=vec32.normalize();float f5=(float)Math.acos(vec32.yCoord);float f6=(float)Math.atan2(vec32.zCoord,vec32.xCoord);GlStateManager.rotate(((float)Math.PI/2.0+-f6)*(180.0/(float)Math.PI),0.0,1.0,0.0);GlStateManager.rotate(f5*(180.0/(float)Math.PI),1.0,0.0,0.0);int i=1;double d1=f2*0.05*(1.0-(i&1)*2.5);worldrenderer.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);int j=255;int k=255;int l=255;double d2=i*0.2;double d3=d2*1.41;double d4=0.0+Math.cos(d1+2.3561945)*d3;double d5=0.0+Math.sin(d1+2.3561945)*d3;double d6=0.0+Math.cos(d1+Math.PI/4.0)*d3;double d7=0.0+Math.sin(d1+Math.PI/4.0)*d3;double d8=0.0+Math.cos(d1+3.9269907)*d3;double d9=0.0+Math.sin(d1+3.9269907)*d3;double d10=0.0+Math.cos(d1+5.497787)*d3;double d11=0.0+Math.sin(d1+5.497787)*d3;double d12=0.0+Math.cos(d1+Math.PI)*d2;double d13=0.0+Math.sin(d1+Math.PI)*d2;double d14=0.0+Math.cos(d1+0.0)*d2;double d15=0.0+Math.sin(d1+0.0)*d2;double d16=0.0+Math.cos(d1+Math.PI/2.0)*d2;double d17=0.0+Math.sin(d1+Math.PI/2.0)*d2;double d18=0.0+Math.cos(d1+Math.PI*3.0/2.0)*d2;double d19=0.0+Math.sin(d1+Math.PI*3.0/2.0)*d2;double d22=-1.0+f3;double d23=d0*(0.5/d2)+d22;worldrenderer.pos(d12,d0,d13).tex(0.4999,d23).color(j,k,l,100).endVertex();worldrenderer.pos(d12,0.0,d13).tex(0.4999,d22).color(j,k,l,100).endVertex();worldrenderer.pos(d14,0.0,d15).tex(0.0,d22).color(j,k,l,100).endVertex();worldrenderer.pos(d14,d0,d15).tex(0.0,d23).color(j,k,l,100).endVertex();worldrenderer.pos(d16,d0,d17).tex(0.4999,d23).color(j,k,l,100).endVertex();worldrenderer.pos(d16,0.0,d17).tex(0.4999,d22).color(j,k,l,100).endVertex();worldrenderer.pos(d18,0.0,d19).tex(0.0,d22).color(j,k,l,100).endVertex();worldrenderer.pos(d18,d0,d19).tex(0.0,d23).color(j,k,l,100).endVertex();double d24=0.0;if(entity.ticksExisted%2==0){d24=0.5;}worldrenderer.pos(d4,d0,d5).tex(0.5,d24+0.5).color(j,k,l,100).endVertex();worldrenderer.pos(d6,d0,d7).tex(1.0,d24+0.5).color(j,k,l,100).endVertex();worldrenderer.pos(d10,d0,d11).tex(1.0,d24).color(j,k,l,100).endVertex();worldrenderer.pos(d8,d0,d9).tex(0.5,d24).color(j,k,l,100).endVertex();tessellator.draw();GlStateManager.enableLighting();GlStateManager.enableCull();GlStateManager.enableBlend();GlStateManager.popMatrix();}}}}"
1088	"void onClickViewDetail(TimerData timerData);"
1089	"public void visit(NameExpression ast){String name=ast.getName();String rName=ast.getToken().getText();AnnotationSymbol[] anns=makeAnnotations(ast.getAnnotations());Kind kind=ast.getKind();Type type;NameExpression qual=ast.getQualifyingName();if(kind==Kind.PACKAGE){Package pkg=program.getPackage(name);if(pkg!=null){ast.setPackage(pkg);}else {if(!ast.isQualified()){}}}else {if(!ast.isQualified()){type=currentClass.getType(name);}else {if(qual.getKind()==Kind.PACKAGE_OR_TYPE){qual.accept(this);}if(qual.getKind()==Kind.PACKAGE){type=qual.getPackage().getClass(rName);}else {type=qual.getType().getClassSymbol().getType(rName);}}if(type!=null){ast.setKind(Kind.TYPE);type.setAnnotations(anns);ast.setType(type);}else {if(kind==Kind.TYPE||!ast.isQualified()){addError(ast,""Unknown identifier"",""Did you forget an import or make a typo"");}else {ast.setKind(Kind.PACKAGE);}}}}"
1090	"public void render(){if(isPointSprite){this.renderPointSprite();}else {this.renderBillboard();}}"
1091	"public static void aiChooseKling(){Random x=new Random();int choice=1+x.nextInt(3);switch (choice){case 1 :kling=KlingonFleet.b;kName=""Ke'noq"";System.out.println();System.out.println(""Computer chose: The KDF ""+kName);System.out.println(""Ship type: Offensive \n"");break;case 2 :kling=KlingonFleet.a;kName=""Ye'nak"";System.out.println();System.out.println(""Computer chose: The KDF ""+Ai.kName);System.out.println(""Ship type: Well-Rounded \n"");break;case 3 :kling=KlingonFleet.c;kName=""Qolen"";System.out.println();System.out.println(""Computer chose: The KDF ""+Ai.kName);System.out.println(""Ship type: Defensive \n"");break;}}"
1092	"public int deltaX(){return 0;}"
1093	"protected long swapChunks_Account(){long result=0L;Iterator<Grids_AbstractGrid> ite;ite=Grids.iterator();while(ite.hasNext()){long partResult;Grids_AbstractGrid g;g=ite.next();partResult=swapChunks_Account(HandleOutOfMemoryErrorFalse);result+=partResult;}dataToSwap=false;return result;}"
1094	"@Override protected void onPostExecute(Boolean success){mAuthTask=null;showProgress(false);if(success){if(sharedpreferences.getString(PREFERENCES_ROLE,"""").equals(""ROLE_STUDENT"")){if(sharedpreferences.getInt(PREFERENCES_OFFLINE,0)==1){Intent intent=new Intent(this,MainActivity.class);startActivity(intent);}else {if(sharedpreferences.getInt(PREFERENCES_OFFLINE,0)==0&&sharedpreferences.getInt(PREFERENCES_IS_LOGGED_ON_DEVICE,0)==1){Intent intent=new Intent(this,MainActivity.class);startActivity(intent);}else {AlertDialog.Builder builder=new AlertDialog.Builder(this);builder.setMessage(""Program wykona w?wczas pe?n? synchronizacj? danych, mo?e to troszk? potrwa?."").setTitle(""Chcesz pracowa? w trybie offline?"");builder.setPositiveButton(""Tak"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    SharedPreferences.Editor editor=sharedpreferences.edit();    editor.putInt(PREFERENCES_IS_LOGGED_ON_DEVICE,1);    editor.commit();    Intent intent=new Intent(LoginActivity.this,FullSynchronizationActivity.class);    startActivity(intent);  }});builder.setNegativeButton(""Nie"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    SharedPreferences.Editor editor=sharedpreferences.edit();    editor.putInt(PREFERENCES_IS_LOGGED_ON_DEVICE,1);    editor.commit();    Intent intent=new Intent(LoginActivity.this,MainActivity.class);    startActivity(intent);  }});AlertDialog dialog=builder.create();dialog.show();}}}else {if(sharedpreferences.getString(PREFERENCES_ROLE,"""").equals(""ROLE_TEACHER"")){if(sharedpreferences.getInt(PREFERENCES_OFFLINE,0)==1){Intent intent=new Intent(this,TeacherMainActivity.class);startActivity(intent);}else {if(sharedpreferences.getInt(PREFERENCES_OFFLINE,0)==0&&sharedpreferences.getInt(PREFERENCES_IS_LOGGED_ON_DEVICE,0)==1){Intent intent=new Intent(this,TeacherMainActivity.class);startActivity(intent);}else {AlertDialog.Builder builder=new AlertDialog.Builder(this);builder.setMessage(""Program wykona w?wczas pe?n? synchronizacj? danych, mo?e to troszk? potrwa?."").setTitle(""Chcesz pracowa? w trybie offline?"");builder.setPositiveButton(""Tak"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    SharedPreferences.Editor editor=sharedpreferences.edit();    editor.putInt(PREFERENCES_IS_LOGGED_ON_DEVICE,1);    editor.commit();    Intent intent=new Intent(LoginActivity.this,com.example.mniez.myapplication.TeacherModule.SynchronizationActivity.class);    startActivity(intent);  }});builder.setNegativeButton(""Nie"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    SharedPreferences.Editor editor=sharedpreferences.edit();    editor.putInt(PREFERENCES_IS_LOGGED_ON_DEVICE,1);    editor.commit();    Intent intent=new Intent(LoginActivity.this,TeacherMainActivity.class);    startActivity(intent);  }});AlertDialog dialog=builder.create();dialog.show();}}}else {if(sharedpreferences.getString(PREFERENCES_ROLE,"""").equals(""ROLE_ADMIN"")){AlertDialog.Builder builder=new AlertDialog.Builder(this);builder.setMessage(""Funkcjonalno?ci administratora nie s? dost?pne z poziomu aplikacji. Aby zarz?dza? Dummy zaloguj si? poprzez przegl?dark?."").setTitle(""Opcja niedost?pna"");builder.setPositiveButton(""OK"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){  }});AlertDialog dialog=builder.create();dialog.show();}}}}else {mPasswordView.setError(errorText);mPasswordView.requestFocus();}}"
1095	"public Boolean isOthers(){return childNode.attributes().get(""others"")!=null;}"
1096	"CloseMorphTransition(ViewGroup viewGroup){ChangeBounds changeBound=new ChangeBounds();changeBound.excludeChildren(R.id.button_container,true);ChangeTransform changeTransform=new ChangeTransform();for(int i=0;i<viewGroup.getChildCount();i++){changeTransform.addTarget(viewGroup.getChildAt(i));}changeTransform.setDuration(CLOSE_MORPH_TRANSFORM_DURATION);addTransition(changeTransform);addTransition(changeBound);setOrdering(TransitionSet.ORDERING_TOGETHER);}"
1097	"@Override public void onActive(View v){v.setBackgroundColor(getResources().getColor(R.color.tieto_darkblue));}"
1098	"@OnClick(R.id.rl_filter_property_type) public void selectPropertyType(){List<String> arrType=searchFilter.getData().getPropertyType();arrType.add(0,getResources().getString(R.string.str_any));showDialogAlert((ArrayList<String>)arrType,1);}"
1099	"@Override public void update(Observable o,Object appointment){database.insertData((Appointment)appointment);refresh();}"
1100	"@Override public void onClick(DialogInterface dialog,int which){ContactsManager.getInstance().setIsContactBookAccessAllowed(true);if(fragment!=null){fragment.requestPermissions(fPermissionsArrayToBeGranted,aPermissionsToBeGrantedBitMap);}else {ActivityCompat.requestPermissions(aCallingActivity,fPermissionsArrayToBeGranted,aPermissionsToBeGrantedBitMap);}}"
1101	"public void Propellor1Rotate(){propellor1Angel+=Automatic.propellor1Speed;Rotation Propellor1Angle=new Rotation(130,750,xPropellor1Origin,yPropellor1Origin,propellor1Angel);xPropellor1=Propellor1Angle.Xcoordinate();yPropellor1=Propellor1Angle.Ycoordinate();repaint();}"
1102	"public static void createMissingFolders(IResource resource) throws CoreException{if(resource==null||resource.exists()){return ;}if(!resource.getParent().exists()){createMissingFolders(resource.getParent());}if(resource instanceof IFolder){((IFolder)resource).create(IResource.NONE,true,null);}}"
1103	"@Override public void onEnable(){instance=this;dependencies();debug=new DebugWindow();debug.setSize(300,300);cmdHandler=new CommandHandler(this);getLogger().info(""Enabling MCBallPaint - a paintball plugin by terraflops"");getCommand(Constants.PL_CMD).setExecutor(cmdHandler);getLogger().info(""Dependencies saved."");trCache=new File(getDataFolder(),""translate.dat"");if(trCache.exists()&&trCache.isFile()){getLogger().fine(""Loading translation cache."");try{Internationalization.LoadTranslateCache(trCache);}catch(IOException e2){e2.printStackTrace();}}getLogger().fine(""Loading translation codes."");try{Internationalization.LoadLangCodes(new InputStreamReader(getClass().getResourceAsStream(""/ml/svterraflops/plugins/mcballpaint/assets/internationalization.dat"")));}catch(IOException e1){e1.printStackTrace();}File scriptFile=new java.io.File(this.getDataFolder(),""startup.py"");if(!scriptFile.exists()){try{scriptFile.createNewFile();}catch(IOException e1){e1.printStackTrace();}}getLogger().fine(""Executing startup scripts; check the debug window for output."");try{debug.getEngine().eval(FileIO.readStreamAsString(getClass().getResourceAsStream(""/ml/svterraflops/plugins/mcballpaint/assets/scripting/startup.py"")));}catch(Throwable t){t.printStackTrace(debug.getWriter());}try{debug.getEngine().eval(FileIO.readFileAsString(scriptFile));}catch(Throwable e){e.printStackTrace(debug.getWriter());}GameHandlers.registerKit(new AgentKit());GameHandlers.registerKit(new FlashKit());File arenaDir=new File(getDataFolder(),""arenas"");ARENA_DIR=arenaDir;getLogger().info(""Loading arenas from: ""+arenaDir.getAbsolutePath());arenaDir.mkdirs();File dataDir=new File(getDataFolder(),""playerstats"");dataDir.mkdirs();DebugConversations.init(this);AbstractArena.registerArenaClass(GameType.CTF,CTFArena.class);AbstractArena.registerArenaClass(GameType.LOBBY,LobbyArena.class);AbstractArenaConstructor.registerClass(GameType.CTF,CTFArenaConstructor.class);AbstractArenaConstructor.registerClass(GameType.LOBBY,LobbyArenaConstructor.class);GameHandlers.registerHandlerClass(GameType.LOBBY,LobbyGameHandler.class);GameHandlers.registerHandlerClass(GameType.CTF,CTFGameHandler.class);manager=new ServerManager(new FileSystemArenaProvider(getServer(),arenaDir),new FlatFilePlayerStatisticsProvider(dataDir));manager.setup(this);getServer().getPluginManager().registerEvents(manager,this);getLogger().info(""Running server..."");manager.run();getLogger().info(""Finished running server."");Runtime.getRuntime().addShutdownHook(new Thread(){  public void run(){    if (!disabled)     onDisable();  }});}"
1104	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_qrchoices);btnLogJR=(Button)findViewById(R.id.btnLogJR);btnLogJR.setOnClickListener(new View.OnClickListener(){  public void onClick(  View v){    if (""1"".equals(whichWorkout) || ""1"".equals(whichWorkoutQR)) {      startActivity(new Intent(QRChoices.this,Squat.class));    } else     if (""2"".equals(whichWorkout) || ""2"".equals(whichWorkoutQR)) {      startActivity(new Intent(QRChoices.this,BenchPress.class));    } else     if (""3"".equals(whichWorkout) || ""3"".equals(whichWorkoutQR)) {      startActivity(new Intent(QRChoices.this,Treadmill.class));    }  }});btnBackCH=(Button)findViewById(R.id.btnBackCH);btnBackCH.setOnClickListener(new View.OnClickListener(){  public void onClick(  View v){    startActivity(new Intent(QRChoices.this,mainMenu.class));  }});btnVideo=(Button)findViewById(R.id.btnVideo);btnVideo.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    final String videoURL="""";    Response.Listener<String> responseListener=new Response.Listener<String>(){      @Override public void onResponse(      String response){        try {          JSONObject jsonResponse=new JSONObject(response);          boolean success=jsonResponse.getBoolean(""success"");          if (success) {            if (""1"".equals(whichWorkout) || ""1"".equals(whichWorkoutQR)) {              stuffToGrab.putString(""videoKey12"",""jh8ixeIyhJw"");            } else             if (""2"".equals(whichWorkout) || ""2"".equals(whichWorkoutQR)) {              stuffToGrab.putString(""videoKey12"",""_BnnyuO1QpY"");            } else             if (""3"".equals(whichWorkout) || ""3"".equals(whichWorkoutQR)) {              stuffToGrab.putString(""videoKey12"",""VYQdWftVWNY"");            }            startActivity(new Intent(QRChoices.this,VideoPage.class));          } else {            AlertDialog.Builder builder=new AlertDialog.Builder(QRChoices.this);            builder.setMessage(""Failed To Get Key"").setNegativeButton(""Retry"",null).create().show();          }        } catch (        JSONException e) {          e.printStackTrace();        }      }    };    VideoRequest choiceRequest=new VideoRequest(videoURL,responseListener);    RequestQueue queue=Volley.newRequestQueue(QRChoices.this);    queue.add(choiceRequest);  }});}"
1105	"public static void v(String prefix,Throwable e){if(WXEnvironment.isApkDebugable()&&e!=null){WXLogUtils.v(prefix+WXLogUtils.getStackTrace(e));}}"
1106	"private void establishConnection(){do {ConnectDialog connectionSettings=new ConnectDialog();try{connection=new Connection(connectionSettings.getIp(),connectionSettings.getPort());System.out.println(""connected"");}catch(IOException e){JOptionPane.showMessageDialog(null,""Unable to connect"",""Connection error"",JOptionPane.ERROR_MESSAGE);}} while(connection==null);refresh();}"
1107	"@Override public String toString(){return getOperand1().toString()+""=""+getOperand1().toString();}"
1108	"private AIP convertResourceToAIP(Resource resource) throws ModelServiceException{AIP aip;if(resource instanceof DefaultDirectory){StoragePath storagePath=resource.getStoragePath();Map<String,Set<String>> metadata=resource.getMetadata();String parentId=ModelUtils.getString(metadata,RodaConstants.STORAGE_META_PARENT_ID);Boolean active=ModelUtils.getBoolean(metadata,RodaConstants.STORAGE_META_ACTIVE);Date dateCreated=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_CREATED);Date dateModified=ModelUtils.getDate(metadata,RodaConstants.STORAGE_META_DATE_MODIFIED);RODAObjectPermissions permissions=getPermissions(metadata);if(active==null){active=false;}try{List<String> descriptiveMetadataBinaryIds=ModelUtils.getIds(storage,ModelUtils.getDescriptiveMetadataPath(storagePath.getName()));List<String> representationIds=ModelUtils.getIds(storage,ModelUtils.getRepresentationsPath(storagePath.getName())); final Map<String,List<String>> preservationRepresentationObjects=new HashMap<String,List<String>>(); final Map<String,List<String>> preservationFileObjects=new HashMap<String,List<String>>(); final Map<String,List<String>> preservationEvents=new HashMap<String,List<String>>();retrieveAIPPreservationInformation(storagePath,representationIds,preservationRepresentationObjects,preservationFileObjects,preservationEvents);aip=new AIP(storagePath.getName(),parentId,active,dateCreated,dateModified,permissions,descriptiveMetadataBinaryIds,representationIds,preservationRepresentationObjects,preservationEvents,preservationFileObjects);}catch(StorageServiceException e){throw new ModelServiceException(""Error while obtaining information to instantiate an AIP"",e.getCode(),e);}}else {throw new ModelServiceException(""Error while trying to convert something that it isn't a Directory into an AIP (""+resource+"")"",ModelServiceException.INTERNAL_SERVER_ERROR);}return aip;}"
1109	"private HostScsiDisk getLunDisk(){List<HostScsiDisk> scsiDisks=null;if(availableDiskOnly){scsiDisks=storageAPI.queryAvailableDisksForVmfs(null);}else {scsiDisks=storageAPI.listScsiDisks();}for(HostScsiDisk entry : scsiDisks){if(VolumeWWNUtils.wwnMatches(VMwareUtils.getDiskWwn(entry),volume.getWwn())){return entry;}}return null;}"
1110	"public void setMultipathPolicy(HostSystem host,ClusterComputeResource cluster,String multipathPolicy,BlockObjectRestRep volume){if(VMwareUtils.isValidMultipathPolicy(multipathPolicy)){Map<HostSystem,HostScsiDisk> hostDisks=Maps.newHashMap();if(cluster!=null){List<HostSystem> clusterHosts=Lists.newArrayList(cluster.getHosts());for(HostSystem clusterHost : clusterHosts){if(isHostConnected(clusterHost)){HostScsiDisk disk=execute(new FindHostScsiDiskForLun(clusterHost,volume));hostDisks.put(clusterHost,disk);}}}else {if(host!=null){HostScsiDisk disk=execute(new FindHostScsiDiskForLun(host,volume));hostDisks.put(host,disk);}}if(hostDisks.size()>0){execute(new SetMultipathPolicy(hostDisks,multipathPolicy));}}}"
1111	"static void runGardener() throws GameActionException{System.out.println(""I'm a gardener!"");while(true){try{int xPos=rc.readBroadcast(0);int yPos=rc.readBroadcast(1);MapLocation archonLoc=new MapLocation(xPos,yPos);Direction dir=randomDirection();if(rc.canBuildRobot(RobotType.SOLDIER,dir)&&Math.random()<0.01){rc.buildRobot(RobotType.SOLDIER,dir);}else {if(rc.canBuildRobot(RobotType.LUMBERJACK,dir)&&Math.random()<0.01&&rc.isBuildReady()){rc.buildRobot(RobotType.LUMBERJACK,dir);}}tryMove(randomDirection());Clock.yield();}catch(Exception e){System.out.println(""Gardener Exception"");e.printStackTrace();}}}"
1112	"@Override public void onClick(DialogInterface dialog,int which){}"
1113	"@Override public void draw(ModuleSelectionInfo value,Canvas canvas){if(isSelectedGameplayModule(value)){canvas.setMode(""gameplay"");}else {if(value.isSelected()&&value.isExplicitSelection()){canvas.setMode(""enabled"");}else {if(value.isSelected()){canvas.setMode(""dependency"");}else {if(value.isValidToSelect()){canvas.setMode(""disabled"");}else {canvas.setMode(""invalid"");}}}}canvas.drawText(getString(value),canvas.getRegion());}"
1114	"@Override public CommandResult execute(LuckPermsPlugin plugin,Sender sender,PermissionHolder holder,List<String> args,String label) throws CommandException{String node=ArgumentUtils.handleString(0,args);String server=ArgumentUtils.handleServer(1,args);String world=ArgumentUtils.handleWorld(2,args);try{switch (ContextHelper.determine(server,world)){case NONE :holder.unsetPermission(node,true);Message.UNSET_TEMP_PERMISSION_SUCCESS.send(sender,node,holder.getFriendlyName());break;case SERVER :holder.unsetPermission(node,server,true);Message.UNSET_TEMP_PERMISSION_SERVER_SUCCESS.send(sender,node,holder.getFriendlyName(),server);break;case SERVER_AND_WORLD :holder.unsetPermission(node,server,world,true);Message.UNSET_TEMP_PERMISSION_SERVER_WORLD_SUCCESS.send(sender,node,holder.getFriendlyName(),server,world);break;}LogEntry.build().actor(sender).acted(holder).action(""permission unsettemp ""+args.stream().map(ArgumentUtils.WRAPPER).collect(Collectors.joining("" ""))).build().submit(plugin,sender);save(holder,sender,plugin);return CommandResult.SUCCESS;}catch(ObjectLacksException e){Message.DOES_NOT_HAVE_TEMP_PERMISSION.send(sender,holder.getFriendlyName());return CommandResult.STATE_ERROR;}}"
1115	"@Override public void onMapReady(GoogleMap googleMap){Toast.makeText(getApplicationContext(),""MAP IS READY"",Toast.LENGTH_SHORT).show();mMap=googleMap;googleMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(this,R.raw.mapstyle));LatLngDebug llDBG=new LatLngDebug(this,mMap,getApplicationContext(),buildings);FloorPlanDebug fpDBG=new FloorPlanDebug(this,getApplicationContext(),buildings);if(checkPermissions()){googleMap.setMyLocationEnabled(true);}mMap.setMaxZoomPreference(60);mMap.setMinZoomPreference(10);LatLng UCBruceCampus=new LatLng(-35.238567,149.08606);float zoomLevel=14;mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(UCBruceCampus,zoomLevel));for(Building b : buildings){for(FloorPlan fp : b.getFloorPlans()){String fullFileName=fp.GetResourceString(b.getName());int resID=getResources().getIdentifier(fullFileName,""drawable"",getPackageName());Log.d(""UCDetailedMaps"",""Resource String is: ""+fullFileName);GroundOverlayOptions tmpOverlay=new GroundOverlayOptions().image(BitmapDescriptorFactory.fromResource(resID)).position(fp.latLng,fp.scale).visible(false);fp.groundMapRef=mMap.addGroundOverlay(tmpOverlay);}ArrayList<LatLng> latLngArr=b.getOutline();if(latLngArr.isEmpty()){continue;}PolygonOptions bOptions=new PolygonOptions().addAll(latLngArr).fillColor(0xffffffff);b.polygon=mMap.addPolygon(bOptions);}for(String s : icons.keySet()){for(Icon i : icons.get(s)){i.AddAsMarker(mMap,getResources());}}for(MenuItem m : menuHandler.getMenuItems()){if(m.type==MenuItem.ItemType.Icon){setVisibleIconsWithType(m.text,!m.checked);}}mMap.setOnCameraMoveListener(new GoogleMap.OnCameraMoveListener(){  @Override public void onCameraMove(){    CameraPosition cameraPosition=mMap.getCameraPosition();    if (cameraPosition.zoom > 19.0) {      for (      Building b : buildings) {        b.hideRooms();        b.polygon.setVisible(true);        b.isFocused=false;      }      ArrayList<Building> closestBuildings=LatLngTools.findClosestBuildings(cameraPosition.target,buildings);      for (      Building b : closestBuildings) {        b.showFloorPlans();        b.polygon.setVisible(false);        b.isFocused=true;      }    } else {      for (      Building b : buildings) {        if (!b.isFocused) {          b.polygon.setVisible(true);          b.isFocused=false;          b.hideRooms();        }      }    }  }});}"
1116	"@Override public void onDataChange(DataSnapshot dataSnapshot){for(DataSnapshot post : dataSnapshot.getChildren()){events.add(post.getValue(Event.class));}if(atom.decrementAndGet()<=0){listener.onEventsListChange(events);}}"
1117	"@Override public List<StockMovementItem> operate(Dao<StockMovementItem,String> dao) throws SQLException{return dao.queryBuilder().where().eq(""synced"",false).query();}"
1118	"@Override public boolean apply(T t){return !predicate.apply(t);}"
1119	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1120	"public Line(Point p1,Point p2){super();setPosition(p1);end=new Point(p2);this.getProperties().put(""x1"",p1.getX());this.getProperties().put(""y1"",p1.getY());this.getProperties().put(""x2"",p2.getX());this.getProperties().put(""y2"",p2.getY());}"
1121	"public static void openStorage(){try{File file=new File(DIRECTORY+FILE_NAME+FILE_TYPE);if(!file.exists()){file.createNewFile();}fileReader=new FileReader(file.getAbsoluteFile());fileWriter=new FileWriter(file.getAbsoluteFile());bufferedReader=new BufferedReader(fileReader);bufferedWriter=new BufferedWriter(fileWriter);TASK_LIST=initiateTaskList();}catch(IOException e){e.printStackTrace();}}"
1122	"@Override public void ejecutar(){synchronized(this){PaquetePersonaje paquetePersonaje=cliente.getPaquetePersonaje();PaqueteUsuario paqueteUsuario=cliente.getPaqueteUsuario();if(paquete.getMensaje().equals(Paquete.msjExito)){MenuCreacionPj menuCreacionPJ=new MenuCreacionPj(this,paquetePersonaje);menuCreacionPJ.setVisible(true);try{wait();}catch(InterruptedException e1){}paquetePersonaje.setComando(Comando.CREACIONPJ);try{cliente.getSalida().writeObject(paquetePersonaje.getJson());}catch(IOException e){}JOptionPane.showMessageDialog(null,""Registro exitoso."");try{paquetePersonaje=(PaquetePersonaje)Paquete.loadJson(((String)cliente.getEntrada().readObject()));}catch(ClassNotFoundException|IOException e){}paqueteUsuario.setInicioSesion(true);}else {if(paquete.getMensaje().equals(Paquete.msjFracaso)){JOptionPane.showMessageDialog(null,""No se pudo registrar."");}paqueteUsuario.setInicioSesion(false);}}}"
1123	"@Override public void onClick(View view){AppClass app=context.app;if(app!=null&&app.me!=null&&app.me.equals(message.author)){PopupMenu popup=new PopupMenu(context,view);MenuInflater inflater=popup.getMenuInflater();inflater.inflate(R.menu.menu_forum_message_item,popup.getMenu());popup.show();popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){  @Override public boolean onMenuItemClick(  MenuItem menuItem){switch (menuItem.getItemId()) {case R.id.info:      openBottomSheet(message);    return true;case R.id.edit:  NewTopicActivity.openIt(context,topic.topic);return true;case R.id.delete:return true;}return false;}});}else {openBottomSheet(message);}}"
1124	"@Override public void handleTile(Canvas pCanvas,int pTileSizePx,MapTile pTile,int pX,int pY){Drawable currentMapTile=mTileProvider.getMapTile(pTile);boolean isReusable=currentMapTile instanceof ReusableBitmapDrawable; final ReusableBitmapDrawable reusableBitmapDrawable=isReusable?(ReusableBitmapDrawable)currentMapTile:null;if(currentMapTile==null){currentMapTile=getLoadingTile();}if(currentMapTile!=null){mTilePoint.set(pX*pTileSizePx,pY*pTileSizePx);mTileRect.set(mTilePoint.x,mTilePoint.y,mTilePoint.x+pTileSizePx,mTilePoint.y+pTileSizePx);if(isReusable){reusableBitmapDrawable.beginUsingDrawable();}try{if(isReusable&&!((ReusableBitmapDrawable)currentMapTile).isBitmapValid()){currentMapTile=getLoadingTile();isReusable=false;}onTileReadyToDraw(pCanvas,currentMapTile,mTileRect);}finally{if(isReusable){reusableBitmapDrawable.finishUsingDrawable();}}}if(DEBUGMODE){mTileRect.set(pX*pTileSizePx,pY*pTileSizePx,pX*pTileSizePx+pTileSizePx,pY*pTileSizePx+pTileSizePx);pCanvas.drawText(pTile.toString(),mTileRect.left+1,mTileRect.top+mDebugPaint.getTextSize(),mDebugPaint);pCanvas.drawLine(mTileRect.left,mTileRect.top,mTileRect.right,mTileRect.top,mDebugPaint);pCanvas.drawLine(mTileRect.left,mTileRect.top,mTileRect.left,mTileRect.bottom,mDebugPaint);}}"
1125	"@SuppressWarnings(""unchecked"") @Override public void run(){try{Map<String,Object> result=(Map<String,Object>)cmdline.js(cmdline.load(""get_combat_info.js""));if(result==null){parts.clear();vs_npc1=null;vs_npc2=null;npc_attack=false;npc_attack_target=null;is_first=true;if(in_fighting){in_fighting=false;try{Thread.sleep(500);}catch(InterruptedException e){}cmdline.sendCmd(""golook_room"");try{Thread.sleep(500);}catch(InterruptedException e){}if(cmdline.isKuafu()&&mapId!=null&&mapId.ordinal()>0&&cmdline.getMapId()==MapId.kuafu){System.out.println(""try to back ""+mapId.name()+""-""+room);AutoQuest quest=new AutoQuest(cmdline);if(quest.init()){Area area=quest.getArea(mapId.ordinal()-1);if(area!=null){ final List<Room> rooms=area.findRoom(room);if(!rooms.isEmpty()){Runnable callback=new Runnable(){  @Override public void run(){    RecoveryTask task=new RecoveryTask(cmdline,rooms.get(0));    cmdline.executeTask(task,1000);  }};cmdline.walk(new String{""jh 1;e;n;n;n;w""},""????"",null,callback,200);}}}}mapId=null;room=null;}return ;}if(!in_fighting){in_fighting=true;Map<String,Object> map=(Map<String,Object>)cmdline.js(cmdline.load(""get_msgs.js""),""msg_room"",false);String id=(String)map.get(""map_id"");if(id!=null){mapId=MapId.valueOf(id);room=CommandLine.removeSGR((String)map.get(""short""));}}VsInfo me=createVsInfo((Map<String,Object>)result.get(""me""));List<VsInfo> vs1=new ArrayList<VsInfo>(4);for(Map<String,Object> map : (List<Map<String,Object>>)result.get(""vs1"")){vs1.add(createVsInfo(map));}List<VsInfo> vs2=new ArrayList<VsInfo>(4);for(Map<String,Object> map : (List<Map<String,Object>>)result.get(""vs2"")){vs2.add(createVsInfo(map));}List<String> pfms=(List<String>)result.get(""pfms"");long time=System.currentTimeMillis();for(int i=parts.size()-1;i>=0;i--){Part part=parts.get(i);if(time-part.alive>2500){System.out.println(""[VS] ""+part.attacker+"" vs ""+part.defender+"" timeout"");if(isNpc(part.attacker,vs2)||isNpc(part.defender,vs2)){vs_npc2=null;npc_attack=false;npc_attack_target=null;}parts.remove(i);}}List<String> msgs=(List<String>)result.get(""msgs"");Stack<String> skills=new Stack<String>();Part current=null;for(int i=0;i<msgs.size();i++){String msg=msgs.get(i);String[] r;Matcher m=TAIJI_PATTERN.matcher(msg);if(m.find()){r=new String{m.group(1),m.group(2),m.group(1)+"" damaged by ""+m.group(2)};for(i=i+1;i<msgs.size();i++){m=DAMAGE_PATTERN.matcher(msgs.get(i));if(m.find()){i++;break;}}}else {r=checkPartFinish(msg);}if(r!=null){System.out.println(""[VS] ""+r[2]);if(vs_npc1!=null&&(vs_npc1.equals(r[0])||vs_npc1.equals(r[1])||!isNpc(vs_npc1,vs1))){vs_npc1=null;}if(vs_npc2!=null&&(vs_npc2.equals(r[0])||vs_npc2.equals(r[1])||!isNpc(vs_npc2,vs2))){for(int j=0;j<parts.size();j++){Part part=parts.get(j);if(vs_npc2.equals(part.attacker)||vs_npc2.equals(part.defender)){parts.remove(j);break;}}vs_npc2=null;npc_attack=false;npc_attack_target=null;}if(""?"".equals(r[0])){for(int j=0;j<parts.size();j++){Part part=parts.get(j);if(""?"".equals(part.defender)&&(r[1]==null||r[1].equals(part.attacker))){if(isNpc(part.attacker,vs2)){vs_npc2=null;npc_attack=false;npc_attack_target=null;}parts.remove(j);break;}}}else {if(""?"".equals(r[1])){for(int j=0;j<parts.size();j++){Part part=parts.get(j);if(""?"".equals(part.attacker)&&(r[0]==null||r[0].equals(part.defender))){if(isNpc(part.defender,vs2)){vs_npc2=null;npc_attack=false;npc_attack_target=null;}parts.remove(j);break;}}}}is_first=false;continue;}m=SKILL_CHAIN_PATTERN.matcher(msg);if(m.find()){skills.push(m.group(2));skills.push(m.group(1));System.out.println(""[VS] ""+m.group());is_first=false;continue;}PoZhao p=checkPoZhao(msg);if(p!=null){System.out.println(""[VS] ""+p.attacker+"" po ""+p.defender+"" ""+(p.success?""ok"":""fail""));if(vs_npc1==null){if(isNpc(p.attacker,vs1)&&p.success){vs_npc1=p.attacker;}else {if(isNpc(p.defender,vs1)){vs_npc1=p.defender;}}}if(vs_npc2==null){if(isNpc(p.attacker,vs2)&&p.success){vs_npc2=p.attacker;npc_attack=true;npc_attack_target=p.defender;}else {if(isNpc(p.defender,vs2)){vs_npc2=p.defender;if(!p.success){npc_attack=true;}}}}current=null;if(p.success){if(""?"".equals(p.attacker)){Part part=null;for(int k=parts.size()-1;k>=0;k--){if(p.defender.equals(parts.get(k).attacker)){part=parts.remove(k);parts.add(part);break;}}if(part==null){part=new Part();parts.add(part);}part.attacker=p.attacker;part.defender=p.defender;part.combo_attack=0;part.skills.clear();part.skills.addAll(skills);part.alive=time;}else {if(""?"".equals(p.defender)){Part part=null;for(int k=parts.size()-1;k>=0;k--){if(p.attacker.equals(parts.get(k).defender)){part=parts.remove(k);parts.add(part);break;}}if(part==null){part=new Part();parts.add(part);}part.attacker=p.attacker;part.defender=p.defender;part.combo_attack=0;part.skills.clear();part.skills.addAll(skills);part.alive=time;}}}else {if(""?"".equals(p.attacker)){Part part=null;for(int k=parts.size()-1;k>=0;k--){if(p.defender.equals(parts.get(k).attacker)){part=parts.remove(k);parts.add(part);break;}}if(part==null){part=new Part();parts.add(part);}part.attacker=p.defender;part.defender=p.attacker;part.alive=time;}else {if(""?"".equals(p.defender)){Part part=null;for(int k=parts.size()-1;k>=0;k--){if(p.attacker.equals(parts.get(k).defender)){part=parts.remove(k);parts.add(part);break;}}if(part==null){part=new Part();parts.add(part);}part.attacker=p.defender;part.defender=p.attacker;part.alive=time;}}}skills.clear();is_first=false;continue;}boolean combo=false;for(Pattern pattern : COMBO_ATTACK_PATTERNS){m=pattern.matcher(msg);if(m.find()){String attacker=m.group(1);String defender=null;if(m.groupCount()>1){defender=m.group(2);}else {if(current!=null&&attacker.equals(current.attacker)){defender=current.defender;}}System.out.println(""[VS] ""+attacker+"" attack ""+(defender!=null?defender+"" "":"""")+""combo"");if(vs_npc1==null&&isNpc(defender,vs1)){vs_npc1=defender;}if(vs_npc2==null&&isNpc(defender,vs2)){vs_npc2=defender;}current=null;Part part=null;if(""?"".equals(attacker)){for(int k=parts.size()-1;k>=0;k--){if(""?"".equals(parts.get(k).attacker)&&(defender==null||parts.get(k).defender==null||defender.equals(parts.get(k).defender))){part=parts.remove(k);if(defender!=null){part.defender=defender;}parts.add(part);break;}}}else {if(""?"".equals(defender)){for(int k=parts.size()-1;k>=0;k--){if(attacker.equals(parts.get(k).attacker)&&""?"".equals(parts.get(k).defender)){part=parts.remove(k);parts.add(part);break;}}}}if(""?"".equals(attacker)||""?"".equals(defender)){if(part==null){part=new Part();part.attacker=attacker;part.defender=defender;parts.add(part);}part.combo_attack++;part.alive=time;part.skills.addAll(skills);skills.clear();}combo=true;is_first=false;break;}}if(!combo){String msg1=msg.replace('\u00a0',' ');for(String prefix : PREFIX_COMBO){if(msg1.startsWith(prefix)){msg1=msg1.substring(prefix.length());if(current!=null){System.out.println(""[VS] ""+current.attacker+"" attack""+(current.defender!=null?"" ""+current.defender:""""));if(""?"".equals(current.attacker)||""?"".equals(current.defender)){if(current.combo_attack==0){parts.clear();}parts.add(current);}current=null;}break;}}Part part=null;for(String name : all_skills.keySet()){List<Posture> postures=all_skills.get(name);if(postures!=null){for(Posture posture : postures){String text=msg1;if(posture.lines>1){if(msgs.size()-i<posture.lines){continue;}StringBuilder sb=new StringBuilder(msg);for(int j=1;j<posture.lines;j++){sb.append(""\n"").append(msgs.get(i+j));}text=sb.toString();}m=posture.pattern.matcher(text);if(m.find()){skills.add(name);part=new Part();if(posture.source>0){part.attacker=m.group(posture.source);}if(posture.target>0){part.defender=m.group(posture.target);}part.combo_attack=0;part.alive=time;boolean is_combo=false;if(i+posture.lines<msgs.size()){String next=msgs.get(i+posture.lines);for(Pattern pattern : COMBO_ATTACK_PATTERNS){m=pattern.matcher(next);if(m.find()){is_combo=true;break;}}}if(!is_combo){if(vs_npc1==null){if(isNpc(part.attacker,vs1)){vs_npc1=part.attacker;}else {if(isNpc(part.defender,vs1)){vs_npc1=part.defender;}}}if(vs_npc2==null){if(isNpc(part.attacker,vs2)){vs_npc2=part.attacker;npc_attack=true;npc_attack_target=part.defender;}else {if(isNpc(part.defender,vs2)){vs_npc2=part.defender;}}}}break;}}}if(part!=null){break;}}if(part!=null){if(current!=null){System.out.println(""[VS] ""+current.attacker+"" attack""+(current.defender!=null?"" ""+current.defender:""""));if(""?"".equals(current.attacker)||""?"".equals(current.defender)){if(current.combo_attack==0){parts.clear();}parts.add(current);}}current=part;is_first=false;}}}if(current!=null){System.out.println(""[VS] ""+current.attacker+"" attack""+(current.defender!=null?"" ""+current.defender:""""));if(""?"".equals(current.attacker)||""?"".equals(current.defender)){if(current.combo_attack==0){parts.clear();}parts.add(current);}}int point=me.point;if(hasNpc(vs2)){if(vs_npc2!=null){if(point>=8){int a=0,b=0;for(VsInfo info : vs2){Matcher m=USER_ID_PATTERN.matcher(info.id);if(m.find()){if(info.max_qi>=30000&&!isFriend(info.name)){a++;}else {b++;}}}if(a<b){String pfm=perform(pfms);if(pfm!=null){System.out.println(""[VS] perform ""+pfm+"" to ""+vs_npc2);point=calcPoint(point,pfm);}}}return ;}}if(vs_npc1!=null){if(point>=3){String pfm=comboAttack(vs2,pfms);if(pfm!=null){point=calcPoint(point,pfm);}else {pfm=perform(pfms);if(pfm!=null){System.out.println(""[VS] perform ""+pfm);point=calcPoint(point,pfm);}}}}else {if(hasNpc(vs1)||hasNpc(vs2)){if(!is_first&&point>=3){int a=0,b=0;for(VsInfo info : vs2){Matcher m=USER_ID_PATTERN.matcher(info.id);if(m.find()){if(info.max_qi>=30000&&!isFriend(info.name)){a++;}else {b++;}}}if(a>=b&&a>0){String pfm=perform(pfms);if(pfm!=null){System.out.println(""[VS] perform ""+pfm);point=calcPoint(point,pfm);}}}}else {normalCombat(vs1,vs2,pfms,point);}}}catch(Exception e){e.printStackTrace();cmdline.stopTask(this);}}"
1126	"@Override public void applyEffects(){Sex.setSexManager(new SMDomDoggy());SexFlags.positioningBlockedPartner=true;SexFlags.resetRequests();}"
1127	"@Override public void clicked(InputEvent event,float x,float y){attack=true;}"
1128	"@Override public void widgetSelected(SelectionEvent e){x=cb_Xaxis[0].getSelection();}"
1129	"public double getMaxOutliers(){return config.getMaxOutliers();}"
1130	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return filesystem.getProtocols().contains(NFS)||filesystem.getProtocols().contains(NFSv4);}"
1131	"public void run(int x1,int y1,int x2,int y2,boolean dum){System.out.printf(""created   %12d %12d %12d %12d\n"",x1,y1,x2,y2);}"
1132	"public JsonEntity(Mirror<?> mirror){Field[] flds=mirror.getFields();fields=new ArrayList<JsonEntityField>(flds.length);for(Field fld : flds){JsonEntityField ef=new JsonEntityField(mirror,fld);fields.add(ef);}try{borning=mirror.getBorning();}catch(BorningException e){err=e;}}"
1133	"private void sendRequest(Intent resultData){SharedPreferences prefs=getSharedPreferences(POSITION,MODE_PRIVATE);int position=prefs.getInt(POSITION,0);if(activeUsers.get(position).getUserName().equals(SERVER_USERNAME)&&activeUsers.get(position).getUserIP().equals(SERVER_IP)){sendFile(resultData,true);}transaction=new Transaction(activeUsers.get(position),sender,null);Call<Transaction> call=serverService.requestTransaction(transaction);call.enqueue(new Callback<Transaction>(){  @Override public void onResponse(  Call<Transaction> call,  Response<Transaction> response){    checkAccepted(resultData);  }  @Override public void onFailure(  Call<Transaction> call,  Throwable t){    Toast.makeText(getApplicationContext(),getApplicationContext().getString(R.string.toast_error_connection),Toast.LENGTH_SHORT).show();    finish();  }});}"
1134	"public void found(Table table){if(query.table==null){query.table=table;}else {Table left=null;if(query.getJoins().size()==0){left=query.table;}else {left=query.getJoins().get(query.getJoins().size()-1).left.getTable();}query.addJoin(new CrossJoin(left,table));}}"
1135	"@Override public void LoginDone(int LOGIN_STATE){log.addToLog(LOGIN_STATE+"""");switch (LOGIN_STATE){case LoginConstants.LOGIN_NET_WORKING :textUpdate(CONNECTED);Toast.makeText(this,""Logged In!"",Toast.LENGTH_SHORT).show();break;case LoginConstants.LOGIN_NET_NOTWORKING :textUpdate(NOT_CONNECTED);LoginAutomatically();break;case LoginConstants.LOGIN_DEACTIVATED :break;case LoginConstants.LOGIN_DONE :textUpdate(CONNECTED);break;case LoginConstants.LOGIN_NOTLOGGEDIN :LoginAutomatically();break;case LoginConstants.LOGIN_SAMEUSER :break;case LoginConstants.LOGIN_UNSUCCESSFULL :break;case LoginConstants.LOGIN_WRONGUSERNAME :break;}}"
1136	"public void resume(){stageListener.menuResume();LedUtil.resumeLed();VibratorUtil.resumeVibrator();SensorHandler.startSensorListener(this);}"
1137	"@Override public long lowBound(){return 0;}"
1138	"@Override public void run(){while(getActivity()==null){try{Thread.sleep(250);}catch(InterruptedException e){}}ViewGroup container=(ViewGroup)getActivity().findViewById(R.id.bannerSwitcher);setupBannerAnimations(container);ViewGroup buttonContainer=(ViewGroup)getActivity().findViewById(R.id.welcomeButtonContainer);animateButtonContainer(buttonContainer);}"
1139	"@Override public boolean touchDown(InputEvent event,float x,float y,int pointer,int button){return true;}"
1140	"@Override public void onClick(View v){if(getConectionState()){switch (v.getId()){case R.id.buttonLogin :if(validateEmail(user.getText().toString())){new AttemptLogin().execute();}else {Toast.makeText(this,""Formato de correo inv?lido"",Toast.LENGTH_SHORT).show();}break;default :break;}}else {Toast.makeText(this,""Error conexi?n a Internet"",Toast.LENGTH_SHORT).show();}}"
1141	"public void createShareableSchema(ShareableSchema shareableSchema){String schemaName=shareableSchema.getSchemaName();String ownerUsername=shareableSchema.getOwnerUsername();String dbURL=shareableSchema.getDbURL();String dbUsername=shareableSchema.getDbUsername();String dbPassword=shareableSchema.getDbPassword();String pvtTblSchema=shareableSchema.getPvtTblSchema().toJSON();boolean schemaAdded=schemaDatabase.addShareableSchema(schemaName,ownerUsername,dbURL,dbUsername,dbPassword,pvtTblSchema);if(!schemaAdded){throw new PivotTableException(""Unable to create new shareable schema ""+schemaName+""."");}}"
1142	"@Override public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
1143	"@Override public void onBackPressed(){if(TaxFragment.getInstance()!=null&&selectedTab.equalsIgnoreCase(""TAX"")){TaxFragment.getInstance().onBackPressed();}else {if(DiscountsFragment.getInstance()!=null&&selectedTab.equalsIgnoreCase(""DISCOUNTS"")){DiscountsFragment.getInstance().onBackPressed();}else {super.onBackPressed();}}}"
1144	"@Override public void onClick(View view){if(message.getText().toString()==null||message.getText().toString().length()==0){}else {String messageText=message.getText().toString();adapter.notifyDataSetChanged();sendMessage(messageText);}}"
1145	"@Override protected void execute(ExecutionContext executionContext){deleteFrom(CommandJdo.class);}"
1146	"public Server handleData() throws IOException{Socket socket;int i=0;int maxConnections=200;while(i++<maxConnections){socket=s.accept();logger.debug(""Received incoming data, parsing instruction."");Instruction instruction=InstructionParser.parseInstruction(socket.getInputStream());logger.debug(""Parsed instruction: ""+instruction);if(functions.containsKey(instruction.getCode())){Function<Instruction,Instruction> func=functions.get(instruction.getCode());Instruction response=func.apply(instruction);logger.debug(""Sending response ""+response);}else {switch (instruction.getCode()){case 0 :socket.getOutputStream().write(clientData.getBytes());break;default :logger.error(""Unknown function requested: ""+instruction.getCode());Writer.write(new Instruction((byte)80),socket.getOutputStream());}}}return this;}"
1147	"@Override public void onClick(View v){}"
1148	"@Override public boolean equals(Object o){return o!=null&&o instanceof GenerousValidator;}"
1149	"@Override public boolean active(){return !Inventory.isFull();}"
1150	"@Override public boolean check(ObjectTransaction objectTransaction){return true;}"
1151	"@Override public void accept(String s) throws Exception{if(isSingle){titleText.append(s);}else {copyrightInfo.append(s);}}"
1152	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
1153	"@Override public void onClick(){if(mFirstInitialFragment.getCurrentSelectDiskMode()!=0){steppersView.nextStep();}}"
1154	"@Override public void mouseClicked(MouseEvent e){if(getSelectedId()==null){InventoryEditUI tempui=new InventoryEditUI(null,that);}else {for(Vehicle v : list){if(v.getID().equals(getSelectedId())){InventoryEditUI inventoryEditUI=new InventoryEditUI(v,that);}}}}"
1155	"@Override public void insertString(int offset,String string,AttributeSet attributes) throws BadLocationException{if(string!=null){String newValue;int length=getLength();if(length==0){newValue=string;}else {String currentContent=getText(0,length);StringBuilder currentBuffer=new StringBuilder(currentContent);currentBuffer.insert(offset,string);newValue=currentBuffer.toString();}try{double tempVal=Double.parseDouble(newValue);if((maxValue>0.0)){string=Double.toString(maxValue);offset=0;textF.setText("""");}super.insertString(offset,string,attributes);}catch(NumberFormatException exception){Toolkit.getDefaultToolkit().beep();}}}"
1156	"public boolean hasNext(){return currentNode!=null;}"
1157	"@Override int getMaxRange(){return PhraseUtils.GOOD_LOWER.length;}"
1158	"public static boolean isVplexBackendVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString());return TRUE.equals(status);}"
1159	"public QCAVector answered(Relationship createdAnswer,QCAVector context){FastList<QCAVector> c=FastList.newInstance();c.add(context);if(this.context!=null){c.addAll(this.context);}return new QCAVector(question,createdAnswer,c,preceding_sibling);}"
1160	"@Override public int dimension(){return 0;}"
1161	"@Override public void updatePerson(PersonDomain person){Person p=em.find(Person.class,person.getId());Role r=new Role(person.getRole().getRoleName());p.setFirstName(person.getFirstName());p.setLastName(person.getLastName());p.setUserName(person.getUserName());p.setPassword(person.getPassword());p.setRole(r);em.merge(p);}"
1162	"@Override public int compare(DynSolution o1,DynSolution o2){int itemComparison=compareItemPicked(o1.cumEachTypeItemPicked,o2.cumEachTypeItemPicked,user);int nodeComparison=compareNumNodeVisit(o1.nodeVisit,o2.nodeVisit);int simScoreComparison=compareSimScore(o1.cumSimScore,o2.cumSimScore);return itemComparison!=0?itemComparison:nodeComparison!=0?nodeComparison:simScoreComparison;}"
1163	"@Override public String getDisplayName(){return null;}"
1164	"@Override public boolean isEnable(Hero hero,Maze maze,MainGameActivity context,Skill skill){return (skill.isActive()||hero.getSkillPoint()>0)&&!SkillFactory.getSkill(""????"",hero,dialog).isActive();}"
1165	"@Override public Bitmap getAsThumbnail(URL url) throws IOException{return getBitmapFromBlob(getAsThumbnailBlob(url));}"
1166	"public void run(){do {goToSleep(30);x=isVtec(x);x=isRevLimit(x);speedNum=x*currentGear*0.0043021;speedNum=Math.round(speedNum*100.0)/100.0;speedIncrease=Double.toString(speedNum);speed.setText(speedIncrease+"" MPH"");x=x+100/currentGear;rpmIncrease=Integer.toString(x);rpm.setText(rpmIncrease+"" RPM"");boost++;boostIncrease=Integer.toString(boost);psiLabel.setText(boostIncrease+"" PSI"");isBoost(boost);isVacuum(boost);boost=isBoostLimit(boost);shiftTell(x);} while(mouseDown);isRunning=false;do {goToSleep(30);x-=50;rpmDecrease=Integer.toString(x);rpm.setText(rpmDecrease+"" RPM"");speedNum=x*currentGear*0.0043021;speedNum=Math.round(speedNum*100.0)/100.0;speedDecrease=Double.toString(speedNum);speed.setText(speedDecrease+"" MPH"");if(speedNum<0){speedNum=0;speedDecrease=Double.toString(speedNum);speed.setText(speedDecrease+"" MPH"");}if(x<5000){vtecdisplay.setText("""");}if(x<=800){x=800;rpmDecrease=Integer.toString(x);rpm.setText(rpmDecrease+"" RPM"");}boost--;boostDecrease=Integer.toString(boost);psiLabel.setText(boostDecrease+"" PSI"");isBoost(boost);isVacuum(boost);boost=isBoostLimitNeg(boost);shiftTell(x);if(boost<=-25&&speedNum<=0&&x<=800){break;}} while(mouseDown==false);}"
1167	"@Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception{clients.inMemory().withClient(""my-trusted-client"").authorizedGrantTypes(""client_credentials"",""password"",""authorization_code"",""refresh_token"",""implicit"").authorities(""ROLE_USER"").scopes(""read"",""write"",""trust"").resourceIds(""oauth2-resource"").autoApprove(true).redirectUris(""http://localhost:5050/v1/account-service/login"").accessTokenValiditySeconds(600);}"
1168	"@Override public boolean apply(Object o){return true;}"
1169	"@Override public int getPolicy(){return ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER;}"
1170	"@Override public void destroy(){}"
1171	"@Override protected void onPostExecute(String result){super.onPostExecute(result);nearbyComplete=true;activity.runOnUiThread(new Runnable(){  @Override public void run(){    nearbyLayout.setVisibility(View.VISIBLE);  }});}"
1172	"@Override public void run(){swipeRefreshLayout.setRefreshing(true);}"
1173	"public Future<BufferedImage> screenShot(StatusProcessor processor,String overlay,int frameNumber,int shotWidth,int shotHeight,int overlaySize,boolean end){double time=frameNumber*0.25;if(time<0||time>scan.getDuration()){throw new IllegalArgumentException(""Time out of bounds!"");}if(time+0.25>scan.getDuration()){frameNumber--;time-=0.25;} final int frameNumberF=frameNumber;Future<BufferedImage> future=new Future<BufferedImage>(){  BufferedImage image=null;  @Override public boolean cancel(  boolean cancel){    return false;  }  @Override public BufferedImage get() throws InterruptedException, ExecutionException {    if (image == null) {      while (!isDone()) {        Thread.sleep(10);      }      try {        image=ImageIO.read(shotFiles.get(frameNumberF));      } catch (      IOException ioe) {        return null;      }    }    return image;  }  @Override public BufferedImage get(  long timeout,  TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {    long milis=0;    if (image == null) {      while (!isDone()) {        Thread.sleep(10);        milis+=10;        if (milis > unit.toMillis(timeout)) {          throw new TimeoutException();        }      }      try {        image=ImageIO.read(shotFiles.get(frameNumberF));      } catch (      IOException ioe) {        return null;      }    }    return image;  }  @Override public boolean isCancelled(){    return false;  }  @Override public boolean isDone(){    return shotFiles.get(frameNumberF) != null;  }};if(shotFiles.get(frameNumber)==null){ConcurrenceManager.getConcurrenceManager().executeLater(new Runnable(){  @Override public void run(){    try {      screenShot0(overlay,frameNumberF - 8,shotWidth,shotHeight,overlaySize,17,end);    } catch (    IOException ex) {      processor.processException(ex);    }  }});}return future;}"
1174	"public static void list(){OrderDataTable dataTable=new OrderDataTable(Models.currentTenant());dataTable.setUserInfo(Security.getUserInfo());render(dataTable);}"
1175	"public void addMobileModels(MobileModel mobileModel){mobileModels.add(mobileModel);}"
1176	"@Override public ReflectedClassSymbol copy(){return new ReflectedClassSymbol(this);}"
1177	"public Key getKey(String name){return keyInventory.get(findIndexSpecific(keyInventory,name));}"
1178	"@Override public boolean apply(T t){return !predicate.apply(t);}"
1179	"@Override public void initializeUI(UIBuilder builder) throws Exception{Map<Object,Object> attributeMap=builder.getUIContext().getAttributeMap();attributeMap.remove(""navigationResult"");Project project=getSelectedProject(builder.getUIContext());ResourcesFacet resourcesFacet=project.getFacet(ResourcesFacet.class);WebResourcesFacet webResourcesFacet=null;if(project.hasFacet(WebResourcesFacet.class)){webResourcesFacet=project.getFacet(WebResourcesFacet.class);}completer=new XmlEndpointsCompleter(resourcesFacet,webResourcesFacet);endpoints.setValueChoices(completer.getEndpointUris());builder.add(endpoints);}"
1180	"@Override public void onClick(View view){imageSelection=0;DetailReminderFragmentPermissionsDispatcher.readAndWriteStorageWithPermissionCheck(this);}"
1181	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
1182	"public void onClick(DialogInterface dialog,int which){}"
1183	"protected JCExpression createUnboxingExpr(JCExpression expr){Type origtype=convertType(expr.type);Type unboxed=unboxedType(expr.type);TypeTag tag=unboxed.getTag();String methodName=tag==TypeTag.INT?""intValue"":tag==TypeTag.SHORT?""shortValue"":tag==TypeTag.LONG?""longValue"":tag==TypeTag.BOOLEAN?""booleanValue"":tag==TypeTag.DOUBLE?""doubleValue"":tag==TypeTag.FLOAT?""floatValue"":tag==TypeTag.BYTE?""byteValue"":tag==TypeTag.CHAR?""charValue"":"""";;Name id=names.fromString(methodName);MethodSymbol msym=getMethod(expr.type,id);JCFieldAccess receiver=M.at(expr).Select(expr,id);receiver.type=msym.type;receiver.sym=msym;JCMethodInvocation call=M.at(expr).Apply(List.nil(),receiver,List.nil());call.setType(unboxed);return convertExpr(call);}"
1184	"public Scene(){_background=new Color(0,0,0);_ambientLight=new AmbientLight();_camera=new Camera();_screenDistance=-1;}"
1185	"public void visit(FunDecl x){currentFunctionReturnType=x.tAST;if(!scopeStack.enter(x.idAST.Lexeme,x)){reporter.reportError(errMsg[2],"""",x.pos);}if(x.idAST.Lexeme==""main""&&!x.tAST.Tequal(StdEnvironment.intType)){reporter.reportError(errMsg[1],"""",x.pos);}scopeStack.openScope();IsFunctionBlock=true;x.paramsAST.accept(this);x.stmtAST.accept(this);}"
1186	"private static Content filterTimseriesData(Page page) throws BadRequestException,NotFoundException{if(page instanceof TimeSeries==false){throw new BadRequestException(""Requested content is not a time series, can not apply series filter"");}Set<TimeSeriesValue> set=null;TimeSeries timeSeries=(TimeSeries)page;if(timeSeries.years.size()>0){set=timeSeries.years;}else {if(timeSeries.quarters.size()>0){set=timeSeries.quarters;}else {if(timeSeries.months.size()>0){set=timeSeries.months;}}}if(set==null){throw new NotFoundException(""Time series does not contain any series data"");}Series series=new Series();for(TimeSeriesValue timeSeriesValue : set){series.add(new Point(timeSeriesValue.date,timeSeriesValue.value));}return series;}"
1187	"@SuppressWarnings(""unchecked"") protected final void positionAtInitScan(DataValueDescriptor[] startKeyValue,int startSearchOperator,Qualifier[][] qualifier,DataValueDescriptor[] stopKeyValue,int stopSearchOperator,Activation act) throws StandardException{if(this.lcc!=null){this.queryHDFS=lcc.getQueryHDFS();}if(act!=null){if(act.getHasQueryHDFS()){this.queryHDFS=act.getQueryHDFS();}}this.forUpdate=(openMode&TransactionController.OPENMODE_FORUPDATE)!=0?ExclusiveSharedSynchronizer.FOR_UPDATE:0; final LocalRegion region=this.gfContainer.getRegion();if(region==null){return ;}else {if(region instanceof PartitionedRegion){if(this.forUpdate!=0){this.queryHDFS=true;}((PartitionedRegion)region).setQueryHDFS(this.queryHDFS);}}this.regionName=this.gfContainer.getQualifiedTableName();FunctionContext fc=null;if(GemFireXDUtils.TraceOuterJoin){SanityManager.DEBUG_PRINT(GfxdConstants.TRACE_OUTERJOIN_MERGING,""MemHeapScanController::positionAtInitScan this is: ""+System.identityHashCode(this)+"" activation is: ""+(act!=null?System.identityHashCode(act):""null"")+"" addregionandkey info is: ""+(act!=null?act.isSpecialCaseOuterJoin():""null""));}if(act!=null){this.addRegionAndKey=act.isSpecialCaseOuterJoin();this.addKeyForSelectForUpdate=act.needKeysForSelectForUpdate();fc=act.getFunctionContext();}if(GemFireXDUtils.TraceQuery|GemFireXDUtils.TraceNCJ){SanityManager.DEBUG_PRINT(GfxdConstants.TRACE_QUERYDISTRIB,""MemHeapScanController scanning table: ""+this.regionName+"", openMode=""+openMode+"" startKey=""+ArrayUtils.objectString(startKeyValue)+"" startOp=""+startSearchOperator+"" stopKey=""+ArrayUtils.objectString(startKeyValue)+"" stopOp=""+stopSearchOperator+"" qualifier=""+ArrayUtils.objectString(qualifier)+"", and the function context: ""+fc);}this.txState=this.gfContainer.getActiveTXState(this.tran); final boolean restoreBatching;if(this.txState!=null){this.txId=this.txState.getTransactionId();this.lockPolicy=this.txState.getLockingPolicy();if(this.forUpdate!=0){this.readLockMode=LockMode.SH;this.localTXState=this.txState.getTXStateForWrite();this.lockContext=this.localTXState.getReadLocksForScanContext(this.lcc);restoreBatching=this.localTXState.getProxy().remoteBatching(true);}else {if(this.lockPolicy.zeroDurationReadLocks()){this.readLockMode=null;this.localTXState=this.txState.getLocalTXState();this.lockContext=null;restoreBatching=true;}else {this.readLockMode=this.lockPolicy.getReadLockMode();this.localTXState=this.txState.getTXStateForRead();if(this.localTXState==null){Assert.fail(""unexpected null local read TXState lockingPolicy=""+this.lockPolicy+"" for ""+this.txState);}this.lockContext=this.localTXState.getReadLocksForScanContext(this.lcc);restoreBatching=this.localTXState.getProxy().remoteBatching(true);}}}else {if(region.getConcurrencyChecksEnabled()&&(region.getCache().getCacheTransactionManager().getTXState()==null)){region.getCache().getCacheTransactionManager().begin(IsolationLevel.SNAPSHOT,null);this.txState=region.getCache().getCacheTransactionManager().getTXState().getTXStateForRead();this.commitOnClose=true;this.txId=this.txState.getTransactionId();this.lockPolicy=this.txState.getLockingPolicy();this.readLockMode=this.lockPolicy.getReadLockMode();this.localTXState=this.txState.getLocalTXState();this.lockContext=null;restoreBatching=true;}else {this.txId=null;this.readLockMode=null;this.localTXState=null;this.lockContext=null;restoreBatching=true;}}if(!restoreBatching&&this.restoreBatching){this.restoreBatching=false;}this.currentDataRegion=null;if(fc!=null){if(fc instanceof RegionFunctionContext){InternalRegionFunctionContext rfc=(InternalRegionFunctionContext)fc;boolean primaryOnly=true;if(fc instanceof GfxdFunctionMessage<?>){primaryOnly=((GfxdFunctionMessage<?>)fc).optimizeForWrite();}this.entryIterator=gfContainer.getEntrySetIteratorForFunctionContext(rfc,this.tran,this.txState,this.openMode,primaryOnly);this.bucketSet=rfc.getLocalBucketSet(region);}else {SanityManager.THROWASSERT(new UnsupportedOperationException(""unexpected function context: ""+fc));}}else {if(lcc!=null&&lcc.getHDFSSplit()!=null){entryIterator=gfContainer.getEntrySetIteratorHDFSSplit(lcc.getHDFSSplit());}else {Set<Integer> bset=lcc==null?null:lcc.getBucketIdsForLocalExecution();Region<?,?> regionForBSet=null;boolean prpLEItr=false;if(bset!=null){regionForBSet=lcc.getRegionForBucketSet();if(regionForBSet==this.gfContainer.getRegion()){prpLEItr=true;}}if(prpLEItr){if(SanityManager.TraceSingleHop){SanityManager.DEBUG_PRINT(SanityManager.TRACE_SINGLE_HOP,""MemHeapScanController::positionAtInitScan bucketSet: ""+bset+"" and forUpdate=""+(this.forUpdate!=0)+"" this table: ""+this.gfContainer.getQualifiedTableName()+"" and lcc is: ""+lcc+"" region is: ""+(regionForBSet!=null?regionForBSet.getName():""(null)""));}this.bucketSet=bset;this.entryIterator=gfContainer.getEntrySetIteratorForBucketSet(bset,tran,this.txState,openMode,this.forUpdate!=0,Misc.getMemStore().isSnappyStore());}else {boolean useOnlyPrimaryBuckets=((this.openMode&GfxdConstants.SCAN_OPENMODE_FOR_FULLSCAN)==0)||(act!=null&&act.getUseOnlyPrimaryBuckets());this.entryIterator=gfContainer.getEntrySetIterator(this.txState,useOnlyPrimaryBuckets,this.openMode,true);}}}if(this.entryIterator instanceof PREntriesIterator<?>){this.prEntryIterator=(PREntriesIterator<?>)this.entryIterator;}else {this.prEntryIterator=null;}if((qualifier!=null)&&(qualifier.length==0)){qualifier=null;}this.init_qualifier=qualifier; final RowFormatter rf;if(init_qualifier!=null&&(rf=this.gfContainer.getCurrentRowFormatter())!=null){for(int idx=init_qualifier.length-1;idx>=0;idx--){for(Qualifier q : init_qualifier[idx]){if(SanityManager.DEBUG){if(GemFireXDUtils.TraceByteComparisonOptimization){SanityManager.DEBUG_PRINT(GfxdConstants.TRACE_BYTE_COMPARE_OPTIMIZATION,""attempting to re-align qualifier ""+q);}}q.alignOrderableCache(rf.getColumnDescriptor(q.getColumnId()),this.gfContainer);}}}if((this.byteArrayStore=this.gfContainer.isByteArrayStore())){this.templateCompactExecRow=(AbstractCompactExecRow)this.gfContainer.newTemplateRow();}else {this.templateCompactExecRow=null;}if(commitOnClose&&!lcc.isSkipConstraintChecks()){TXManagerImpl.getOrCreateTXContext().clearTXState();}}"
1188	"private void setUpRecyclerView(){DatabaseReference notificationsDbRef=mRootRef.child(Notifications.NOTIFICATIONS).child(NavigationDrawerUtil.mCurrentUser.getUserId());NotificationsAdapter adapter=NotificationsAdapter.getInstance(notificationsDbRef,getActivity());notificationListRecyclerView.setAdapter(adapter);notificationListRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));notificationsDbRef.addValueEventListener(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    mProgress.setVisibility(View.GONE);    if (dataSnapshot.getChildrenCount() <= 0) {      mErrorMsg.setVisibility(View.VISIBLE);    } else {      mErrorMsg.setVisibility(View.GONE);    }  }  @Override public void onCancelled(  DatabaseError databaseError){    Log.d(TAG,""databaseError : "" + databaseError);  }});}"
1189	"@Transactional public Item publishItem(Item item){Item current=item.copy();current=entityManager.merge(current);ItemHistory history=current.getHistory();history.setPublished(item);history.setCurrent(current);entityManager.merge(history);String path=item.getPath();if(StringUtils.hasLength(path)){for(Host host : hostService.getAllHosts()){Alias alias=aliasService.getOrCreateAlias(host,path);alias.setHistory(history);aliasService.saveAlias(alias);}}return current;}"
1190	"public boolean accept(File dir,String name){return true;}"
1191	"private static String normalizeFilepath(String fp){String PKG_STR=""pkg1"";String DOT=""."";String TWO_DOT="".."";if(fp==null){return """";}int idx=fp.indexOf(PKG_STR);if(idx>-1){fp=fp.substring(idx+PKG_STR.length()+1);}Deque<String> filepath=new ArrayDeque<>();String[] parts=fp.split(ResultsUtils.SEPARATOR);for(String part : parts){if(part.equals(DOT)){continue;}if(part.equals(TWO_DOT)){filepath.removeLast();}else {filepath.addLast(part);}}StringBuffer sb=new StringBuffer();for(String s : filepath){sb.append(s);sb.append(ResultsUtils.SEPARATOR);}String normalizedPath=sb.toString();return normalizedPath.substring(0,normalizedPath.length()-1);}"
1192	"@Override public boolean isSet(StyleAttribute<?> attr){return theStyles.containsKey(attr)||theBacking.isSet(attr);}"
1193	"@Override public void onAdClosed(){super.onAdClosed();}"
1194	"@Override public HttpResponse respond(HttpRequest request) throws HttpException{Path requestPath=home.resolve(request.uri.toString());if(Files.isDirectory(requestPath)){requestPath=requestPath.resolve(""index.html"");}if(!Files.exists(requestPath)){throw new HttpException(HttpCode.NOT_FOUND);}else {try{InputStream in=new FileInputStream(requestPath.toFile());return new HttpFileResponse(in);}catch(FileNotFoundException e){throw new HttpException(HttpCode.NOT_FOUND);}}}"
1195	"@Override protected boolean start(String uri,String localName,String qName,Attributes attributes) throws SAXException{if(vocabulary.isClipboard(localName)||vocabulary.isNode(localName)){return true;}else {return false;}}"
1196	"public Long getItemsCount(Long id){PreparedStatement statement=null;ResultSet result=null;String sql=""SELECT COUNT(id) FROM Item WHERE category_id = ?;"";try{statement=connection.prepareStatement(sql);statement.setLong(1,id);result=statement.executeQuery();if(result.next()){return result.getLong(""COUNT(id)"");}}catch(Exception e){}try{statement.close();}catch(SQLException e){}try{result.close();}catch(SQLException e){}return null;}"
1197	"protected boolean allow(TextItem focused){return true;}"
1198	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1199	"@Override Node<K,V> redden(){return new Red<>(_1,_2);}"
1200	"@Override public void onClick(View view){if(nghiaIndex[0]==tuIndex){windowManager.removeView(theme);stopSelf();}else {Vibrator vib=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);vib.vibrate(300);}}"
1201	"public static void prepareInsertOperations(CFMetaData cfm,List<ColumnIdentifier.Raw> columnNames,WhereClause.Builder whereClause,List<Term.Raw> columnValues,VariableSpecifications boundNames,Operations operations){Term.Raw superColumnKey=null;Term.Raw superColumnValue=null;for(int i=0;i<columnNames.size();i++){ColumnIdentifier id=columnNames.get(i).prepare(cfm);ColumnDefinition def=cfm.getColumnDefinition(id);Term.Raw value=columnValues.get(i);if(def.isPrimaryKeyColumn()){whereClause.add(new SingleColumnRelation(columnNames.get(i),Operator.EQ,value));}else {if(value instanceof AbstractMarker.Raw){boundNames.add(((AbstractMarker.Raw)value).bindIndex(),def);}if(cfm.isSuperColumnKeyColumn(def)){superColumnKey=value;}else {if(cfm.isSuperColumnValueColumn(def)){superColumnValue=value;}}}}checkTrue(superColumnValue!=null,""Column value is mandatory for SuperColumn tables"");checkTrue(superColumnKey!=null,""Column key is mandatory for SuperColumn tables"");Operation operation=new Operation.SetElement(superColumnKey,superColumnValue).prepare(cfm.ksName,cfm.compactValueColumn());operations.add(operation);}"
1202	"@Override public boolean isCorrect(CommandSender sender){return sender instanceof Player;}"
1203	"@Override public void run(){((TaskPrivate)task).startTask();}"
1204	"@Override public GlobalConfiguration getValue(){GlobalConfigurationBuilder builder=new GlobalConfigurationBuilder();ModuleLoader moduleLoader=this.loader.getValue();builder.serialization().classResolver(ModularClassResolver.getInstance(moduleLoader));ClassLoader loader=null;try{loader=(this.module!=null)?moduleLoader.loadModule(this.module).getClassLoader():CacheContainerConfiguration.class.getClassLoader();builder.classLoader(loader);int id=Ids.MAX_ID;for(SimpleExternalizer<?> externalizer : ServiceLoader.load(SimpleExternalizer.class,loader)){InfinispanLogger.ROOT_LOGGER.debugf(""Cache container %s will use an externalizer for %s"",this.name,externalizer.getTargetClass().getName());builder.serialization().addAdvancedExternalizer(id++,externalizer);}}catch(ModuleLoadException e){throw new IllegalStateException(e);}builder.shutdown().hookBehavior(ShutdownHookBehavior.DONT_REGISTER);AuthorizationConfiguration authorization=(this.authorization!=null)?this.authorization.getValue():null;GlobalAuthorizationConfigurationBuilder authorizationBuilder=builder.security().authorization();if(authorization!=null){authorizationBuilder.enable();if(authorization.getAuditLogger()!=null){try{authorizationBuilder.auditLogger(Class.forName(authorization.getAuditLogger(),true,loader).asSubclass(AuditLogger.class).newInstance());}catch(Exception e){throw new IllegalStateException(e);}}else {authorizationBuilder.auditLogger(new NullAuditLogger());}if(authorization.getPrincipalMapper()!=null){try{authorizationBuilder.principalRoleMapper(Class.forName(authorization.getPrincipalMapper(),true,loader).asSubclass(PrincipalRoleMapper.class).newInstance());}catch(Exception e){throw new IllegalStateException(e);}}else {authorizationBuilder.principalRoleMapper(new ClusterRoleMapper());}for(Entry<String,List<String>> role : authorization.getRoles().entrySet()){GlobalRoleConfigurationBuilder roleBuilder=authorizationBuilder.role(role.getKey());for(String perm : role.getValue()){roleBuilder.permission(perm);}}}TransportConfiguration transport=(this.transport!=null)?this.transport.getValue():null;if(transport!=null){org.infinispan.configuration.global.TransportConfigurationBuilder transportBuilder=builder.transport().clusterName(this.name).transport(new ChannelTransport(transport.getChannel(),transport.getChannelFactory())).distributedSyncTimeout(transport.getLockTimeout());ProtocolStackConfiguration stack=transport.getChannelFactory().getProtocolStackConfiguration();org.infinispan.server.jgroups.spi.TransportConfiguration.Topology topology=stack.getTransport().getTopology();if(topology!=null){transportBuilder.siteId(topology.getSite()).rackId(topology.getRack()).machineId(topology.getMachine());}transportBuilder.transportThreadPool().read(this.transportThreadPool.getValue());transportBuilder.remoteCommandThreadPool().read(this.remoteCommandThreadPool.getValue());RelayConfiguration relay=stack.getRelay();if(relay!=null){builder.site().localSite(relay.getSiteName());}}GlobalStateLocationConfiguration statePersistence=(this.globalStateLocation!=null)?this.globalStateLocation.getValue():null;if(statePersistence!=null){GlobalStateConfigurationBuilder statePersistenceBuilder=builder.globalState().enable();String persistentLocation=pathManager.getValue().resolveRelativePathEntry(statePersistence.getPersistencePath(),statePersistence.getPersistenceRelativeTo());statePersistenceBuilder.persistentLocation(persistentLocation);String temporaryLocation=pathManager.getValue().resolveRelativePathEntry(statePersistence.getPersistencePath(),statePersistence.getPersistenceRelativeTo());statePersistenceBuilder.temporaryLocation(temporaryLocation);}builder.asyncThreadPool().read(this.asyncOperationsThreadPool.getValue());builder.expirationThreadPool().read(this.expirationThreadPool.getValue());builder.listenerThreadPool().read(this.listenerThreadPool.getValue());builder.stateTransferThreadPool().read(this.stateTransferThreadPool.getValue());builder.persistenceThreadPool().read(this.persistenceThreadPool.getValue());builder.replicationQueueThreadPool().read(this.replicationQueueThreadPool.getValue());builder.globalJmxStatistics().enabled(this.statisticsEnabled).cacheManagerName(this.name).mBeanServerLookup(new MBeanServerProvider(this.server.getValue())).jmxDomain(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(CacheServiceNameFactory.DEFAULT_CACHE).getParent().getCanonicalName()).allowDuplicateDomains(true);builder.addModule(ServerGlobalConfigurationBuilder.class);return builder.build();}"
1205	"private void saveResult(DailyResult result){String date=result.getDate();List<DailyResult> list=DataSupport.where(""date = ?"",date).find(DailyResult.class);if(list==null||list.size()==0){result.save();indexResult(result);}else {if(ZhihuDateUtils.isToday(date)){long id=list.get(0).getBaseObjId();result.update(id);indexResult(result);}}}"
1206	"private void showModifyDialog(int whichImage){if(whichImage==0&&myBitmap!=null||whichImage==1&&myBitmapResult!=null){ final String[] items=new String{getResources().getString(R.string.rotateR),getResources().getString(R.string.rotateL),getResources().getString(R.string.mirrorH),getResources().getString(R.string.mirrorV)}; final Integer[] icons=new Integer{R.drawable.ic_action_rotate_right,R.drawable.ic_action_rotate_left,R.drawable.android_flip,R.drawable.android_flip_v};ListAdapter adapter=new ArrayAdapterWithIcon(getActivity(),items,icons);AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());builder.setTitle(getString(R.string.modifyImage)).setAdapter(adapter,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    if (whichImage == 0) switch (which) {case 0:      rotateImageSource(false);    break;case 1:  rotateImageSource(true);break;case 2:mirrorImageSource(false);break;case 3:mirrorImageSource(true);break;} else {switch (which) {case 0:rotateImageResult(false);break;case 1:rotateImageResult(true);break;case 2:mirrorImageResult(false);break;case 3:mirrorImageResult(true);break;}}dialog.dismiss();}}).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();  }});builder.create();builder.show();}else {Toast.makeText(getActivity(),getResources().getString(R.string.noImageFound),Toast.LENGTH_SHORT).show();}}"
1207	"protected void saveDailyRecord(String table,Date date,int energy,int step,String deviceMac,double dStride,double dWeight,int iGoal){UtilCalendar cal=new UtilCalendar(date,null);double dCalories=(step)*dStride/100.0*dWeight*MainActivity.CALORIES_PER_KM_PER_KG/1000.0;double dDistance=step*dStride/100.0/1000.0;if(!cal.isDateFormat()){UtilDBG.e(""it is expected to be a date format"");}ContentValues cv=new ContentValues();cv.put(COLUMN.DEVICE_MAC,deviceMac);cv.put(COLUMN.DATE,cal.getUnixTime());cv.put(COLUMN.STEP,step);cv.put(COLUMN.APP_ENERGY,energy);cv.put(COLUMN.CALORIES,dCalories);cv.put(COLUMN.DISTANCE,dDistance);cv.put(COLUMN.GOAL,iGoal);String strSelection=COLUMN.DEVICE_MAC+""=\""""+deviceMac+""\""""+"" AND ""+COLUMN.DATE+""=\""""+Long.toString(cal.getUnixTime())+""\"""";Cursor c=mDB.query(true,table,new String{COLUMN.DEVICE_MAC},strSelection,null,null,null,null,null);int iCount=c.getCount();c.close();if(iCount==0){long l=mDB.insert(table,null,cv);if(l==-1){UtilDBG.e(""ERROR, saveDailyData"");}}else {if(iCount>1){UtilDBG.e(""!! Assume that there is at most one row !!"");}mDB.update(table,cv,strSelection,null);}}"
1208	"@Override public void onComplete(Task<AuthResult> task){if(task.isSuccessful()){tvPrompt.setVisibility(View.INVISIBLE);String uid=auth.getCurrentUser().getUid();Map<String,Object> map=new HashMap<String,Object>();map.put(uid,true);SyncReference userRef=WilddogSync.getInstance().getReference(""users"");userRef.updateChildren(map);userRef.child(uid).onDisconnect().removeValue();if(!TextUtils.isEmpty(uid)){Intent intent=new Intent(getApplicationContext(),ConversationActivity.class);intent.putExtra(""app_id"",mAppId);startActivity(intent);}}else {}}"
1209	"@Override public V setValue(V value){return super.setValue(checkNotNull(value));}"
1210	"@Override public int getTaskId(){return 0;}"
1211	"@Override public void onClick(View v){if(mTakenPicture){if(mCapturedCameraImage){deleteCameraPicture();}makeToast(""Upload SuccessFully"");onBackPressed();}else {makeToast(""Select One Image"");}}"
1212	"@Override protected boolean isConnected(ForgeDirection side){return connections.getConnectionOnSide(side)!=null;}"
1213	"public AUnorderedListSerializerDeserializer(AUnorderedListType unorderedlistType){this.itemType=unorderedlistType.getItemType();this.unorderedlistType=unorderedlistType;nontaggedSerDes=itemType.getTypeTag()==ATypeTag.ANY?AqlSerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(itemType):AqlSerializerDeserializerProvider.INSTANCE.getNonTaggedSerializerDeserializer(itemType);taggedSerDes=AqlSerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(itemType);}"
1214	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1215	"@Override public void onClick(View view){if(calling==""QBDetails""){startActivity(new Intent(this,MainActivity.class));finish();}else {startActivity(new Intent(this,DisplayQB.class));finish();}}"
1216	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1217	"public static Variable getVar(String id,TypeI type){if(type.arrDims>0&&id.equals(""length"")){return new Variable(""length"",new TypeI(EnumPrimitive.INT));}if(type.tupleTypes.size()>0){for(TypeI tupleType : type.tupleTypes){if(tupleType.tupleName!=null&&tupleType.tupleName.equals(id)){return new Variable(id,tupleType);}}}else { final Optional<Type> t=getType(type.shortName);if(t.isPresent()){return t.get().getField(id);}}return null;}"
1218	"@Override public boolean apply(HostToken x){return localRack==null||localRack.equalsIgnoreCase(x.getHost().getRack());}"
1219	"@Override public int valueArraySize(Object vals){return ((long[])vals).length;}"
1220	"public void setButtonActions(Resource resource){buyProducerButton.setOnAction(v -> player.buyProducer(resource));buyStorerButton.setOnAction(v -> player.buyStorer(resource));sellButton.setOnAction(v -> player.sell(resource));}"
1221	"@Override public boolean equals(Object o){if(!(o instanceof All)){return false;}All tmp=(All)o;return true&&tmp.lhs.equals(this.lhs)&&tmp.rhs.equals(this.rhs);}"
1222	"@Override public void execute(){Filter filter=new Filter(new SimpleFilterParameter(RodaConstants.DIP_FILE_UUIDS,bundle.getFile().getUUID()));BrowserService.Util.getInstance().count(IndexedDIP.class.getName(),filter,new AsyncCallback<Long>(){  @Override public void onFailure(  Throwable caught){    AsyncCallbackUtils.defaultFailureTreatment(caught);  }  @Override public void onSuccess(  Long dipCount){    if (dipCount > 0) {      disseminationsSlider.open();    }  }});}"
1223	"@Override public int getHireAddUp(){return 0;}"
1224	"public int getNumChildren(){return 0;}"
1225	"@Override public boolean accept(BlockSnapshotRestRep snapshot){VolumeRestRep parentVolume=client.blockVolumes().get(snapshot.getParent().getId());return ((isRPSourceVolume(parentVolume)&&!isSnapshotRPBookmark(snapshot))||!isInConsistencyGroup(snapshot)||hasXIO3XVolumes(parentVolume));}"
1226	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
1227	"@Override public Reader toCharacterStream(OptimizedElementArray row,int columnPosition,LobService lobService) throws SQLException{return new StringReader(toString(row,columnPosition));}"
1228	"@Override public void connectServerFail(){List<TaskData> taskDatas=new ArrayList<>();Intent resultIntent=new Intent();resultIntent.putExtra(""TaskList"",(Serializable)taskDatas);setResult(RESULT_OK,resultIntent);finish();}"
1229	"@Override public void hide(){super.hide();String count=Cookies.getCookie(""MyCookie"");if(count!=null&&Integer.parseInt(count)==7){}else {Document.get().getDocumentElement().getStyle().setProperty(""overflow"","""");}}"
1230	"@Override public void onClick(View v){if(isSelectedDeckAll()&&!(dbManager.getUser().isAllowPracticeAll())){Toast.makeText(getContext(),""Select a Deck"",Toast.LENGTH_SHORT).show();}else {if(!loading){showButtonClicked();}}}"
1231	"public Integer next(){return charAt(cur++);}"
1232	"public void remove(){if(!parsed||parent==null){return ;}parsed=false;parent.remove();}"
1233	"@Override public int getCount(){return mCurrentUser.mSites.size();}"
1234	"@Override public void run(){rRunning=true;while(rRunning){synchronized(this){mHandler.post(new Runnable(){  @Override public void run(){    if (recRunning)     device.setImageResource(image_m_Id[m_currentIndex]);  }});m_currentIndex++;if(m_currentIndex==image_m_Id.length){m_currentIndex=0;}try{m_duration=600;Thread.sleep(m_duration);}catch(InterruptedException e){}}}}"
1235	"protected static TYPE selectRequestType(String[] pathTokens){TYPE type;if(pathTokens.length<2){type=TYPE.ROOT;}else {if(pathTokens.length<3){type=TYPE.DB;}else {if(pathTokens.length>=3&&pathTokens[2].endsWith(FS_FILES_SUFFIX)){if(pathTokens.length==3){type=TYPE.FILES_BUCKET;}else {if(pathTokens.length==4&&pathTokens[3].equalsIgnoreCase(_INDEXES)){type=TYPE.COLLECTION_INDEXES;}else {if(pathTokens.length==4&&!pathTokens[3].equalsIgnoreCase(_INDEXES)){type=TYPE.FILE;}else {if(pathTokens.length==5&&pathTokens[4].equalsIgnoreCase(BINARY_CONTENT)){type=TYPE.FILE;}else {type=TYPE.DOCUMENT;}}}}}else {if(pathTokens.length<4){type=TYPE.COLLECTION;}else {if(pathTokens.length==4&&pathTokens[3].equalsIgnoreCase(_INDEXES)){type=TYPE.COLLECTION_INDEXES;}else {if(pathTokens.length>4&&pathTokens[3].equalsIgnoreCase(_INDEXES)){type=TYPE.INDEX;}else {type=TYPE.DOCUMENT;}}}}}}return type;}"
1236	"@Override public boolean isBoundary(int x,int y){return !dimension.getBitLayerValueAt(layer,x,y);}"
1237	"@Override public void updateStatus(JobContext jobContext) throws Exception{StorageProvider provider=null;try{provider=jobContext.getDbClient().queryObject(StorageProvider.class,getStorageProviderURI());logger.info(""VMAXJob: Looking up job: id {}, provider: {} "",getJobId(),provider.getIPAddress());VMAXApiClient vmaxApiClient=jobContext.getVmaxClientFactory().getClient(provider.getIPAddress(),provider.getPortNumber(),provider.getUseSSL(),provider.getUserName(),provider.getPassword());MigrationStorageGroupResponse sgResponse=vmaxApiClient.getMigrationStorageGroup(sourceSerialNumber,sgName);String migrationStatus=sgResponse.getState();logger.info(""Migration status {}"",migrationStatus);((MigrationOperationTaskCompleter)getTaskCompleter()).setMigrationStatus(migrationStatus);}finally{super.updateStatus(jobContext);}}"
1238	"public boolean isComplete(){return true;}"
1239	"@Override public Object call() throws Exception{InvokeResponse response=new InvokeResponse();response.setRequestId(request.getRequestId());if(this.request.getMessageType()==Constants.MESSAGE_TYPE_HEART){LOGGER.info(""message type:heart beat"");response.setSerialize(request.getSerialize());response.setSeq(request.getSeq());channel.write(response);return null;}try{LOGGER.info(""message type:service"");Object result=handle(request);response.setResult(result);response.setSerialize(request.getSerialize());}catch(Exception e){System.out.println(""handle result failure""+e);LOGGER.error(""handle result failure"",e);response.setException(e);response.setSerialize(request.getSerialize());}channel.write(response);return null;}"
1240	"@RequestMapping(value={""/recipeform""}) public String formrecipe(ModelMap model,String action_type,String recipe_id,String session_id){if(session_id.equals("""")){return ""redirect:index"";}else {UserModel user=userModel.getUser(session_id);model.put(""full_name"",user.full_name);model.put(""email"",user.email);model.put(""action_type"",action_type);model.put(""existing_recipe_name"","""");model.put(""existing_recipe_description"","""");model.put(""existing_recipe_image_url"","""");if(action_type.equals(""edit"")){Long rp_id=Long.parseLong(recipe_id);try{Recipe rm=recipeModel.getRecipe(rp_id);model.put(""existing_recipe_id"",rp_id);model.put(""existing_recipe_name"",rm.name);model.put(""existing_recipe_description"",rm.description);model.put(""existing_recipe_image_url"",rm.pictureAddress);}catch(Exception e){System.out.printf(""Bullshit"");}}}model.put(""content_bar_selection"",""recipes"");return ""recipe-views/recipe_form_page"";}"
1241	"public void setBadge(ArrayList<String> sensor){if(sensor.size()!=0){badge_temp.setText(sensor.get(0));badge_rh.setText(sensor.get(1));badge_lux.setText(sensor.get(2));badge_co2.setText(sensor.get(3));badge_n.setText(sensor.get(4));badge_ph.setText(sensor.get(5));badge_key.setText(sensor.get(6));badge_water.setText(sensor.get(7));badge_kwh.setText(sensor.get(8));badge_battery.setText(sensor.get(9));if(sensorList.get(10).equalsIgnoreCase(""1"")){badge_light.setText(""on"");}else {badge_light.setText(""off"");}}else {badge_temp.setText("""");badge_rh.setText("""");badge_lux.setText("""");badge_co2.setText("""");badge_n.setText("""");badge_ph.setText("""");badge_key.setText("""");badge_water.setText("""");badge_kwh.setText("""");badge_battery.setText("""");badge_light.setText("""");}}"
1242	"@Override public boolean onPreferenceChange(Preference preference,Object newValue){String key=preference.getKey();if(key.equals(getString(R.string.key_is_open))){if((Boolean)newValue){}else {}}else {if(key.equals(getString(R.string.key_statusbar_hide))){}}return true;}"
1243	"public static StorageSystemTypeRestRep map(StorageSystemType from){if(from==null){return null;}StorageSystemTypeRestRep to=new StorageSystemTypeRestRep();to.setStorageTypeName(from.getStorageTypeName());to.setMetaType(from.getMetaType());to.setIsSmiProvider(from.getIsSmiProvider());to.setStorageTypeId(from.getStorageTypeId());to.setStorageTypeDispName(from.getStorageTypeDispName());to.setIsDefaultSsl(from.getIsDefaultSsl());to.setIsDefaultMDM(from.getIsDefaultMDM());to.setIsOnlyMDM(from.getIsOnlyMDM());to.setIsElementMgr(from.getIsElementMgr());to.setNonSslPort(from.getNonSslPort());to.setSslPort(from.getSslPort());to.setDriverClassName(from.getDriverClassName());to.setIsSecretKey(from.getIsSecretKey());return to;}"
1244	"@Override public ErrorCode getError(KvmResponseWrapper wrapper){GetVolumeSizeRsp rsp=wrapper.getResponse(GetVolumeSizeRsp.class);return rsp.isSuccess()?null:errf.stringToOperationError(rsp.getError());}"
1245	"public void deleteExportGroup(URI exportGroup,String stepId){try{BlockExportController blockController=getController(BlockExportController.class,BlockExportController.EXPORT);_dbClient.createTaskOpStatus(ExportGroup.class,exportGroup,stepId,ResourceOperationTypeEnum.DELETE_EXPORT_GROUP);InvokeTestFailure.internalOnlyInvokeTestFailure(InvokeTestFailure.ARTIFICIAL_FAILURE_027);blockController.exportGroupDelete(exportGroup,stepId);InvokeTestFailure.internalOnlyInvokeTestFailure(InvokeTestFailure.ARTIFICIAL_FAILURE_028);}catch(Exception ex){_log.error(""Exception occured while deleting export group {}"",exportGroup,ex);WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(ex));}}"
1246	"public void onClick(DialogInterface dialog,int whichButton){dialog.dismiss();}"
1247	"@Override public boolean isFullScreen(){return false;}"
1248	"@Override public Response recieveRequestFrom(Philosopher philosopher,Request packet,boolean isLeft){Chopstick chop=philosopher.getChopstick(isLeft);if(chop.isDirty()){philosopher.setChopstick(null,isLeft);return new Response(chop);}else {return new Response(null);}}"
1249	"public void actionPerformed(ActionEvent ae){if(ae.getActionCommand().equals(MenuUtils.CLOSE_BUTTON)){setVisible(false);dispose();}else {if(ae.getActionCommand().equals(MenuUtils.SAVE_BUTTON)){JFileChooser chooser=new JFileChooserExt(LocationPreferences.getInstance().getProjectSaveLocation());chooser.setMultiSelectionEnabled(false);if(report.canExportGFF()){chooser.addChoosableFileFilter(new GFFFileFilter());}TxtFileFilter txtff=new TxtFileFilter();chooser.addChoosableFileFilter(txtff);chooser.setFileFilter(txtff);int result=chooser.showSaveDialog(this);if(result==JFileChooser.CANCEL_OPTION){return ;}File file=chooser.getSelectedFile();LocationPreferences.getInstance().setProjectSaveLocation(file.getParent());if(file.isDirectory()){return ;}FileFilter filter=chooser.getFileFilter();if(filter instanceof TxtFileFilter){if(!file.getPath().toLowerCase().endsWith("".txt"")){file=new File(file.getPath()+"".txt"");}}else {System.err.println(""Unknown file filter type ""+filter+"" when saving image"");return ;}if(file.exists()){int answer=OptionDialogUtils.showFileExistDialog(this,file.getName());if(answer>0){return ;}}try{saveTextReport(file);}catch(IOException e){new CrashReporter(e);}}}}"
1250	"@Override public Set<SubResourceDefinition> getSubResourceDefinitions(){return Collections.singleton(new SubResourceDefinition(Resource.Type.RootServiceHostComponent,Collections.singleton(Resource.Type.Host),true));}"
1251	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
1252	"@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){clausePos=adapterView.getSelectedItemPosition();Utils.hideKeyboard(getActivity());}"
1253	"private static List<String> getGlowrootUsedTypes(){List<String> types=Lists.newArrayList();types.add(""org.glowroot.agent.config.ImmutableInstrumentationConfig"");types.add(""org.glowroot.agent.config.ImmutableInstrumentationConfig$Builder"");types.add(""org.glowroot.agent.config.ImmutableInstrumentationConfig$InitShim"");types.add(""org.glowroot.agent.config.InstrumentationConfig"");types.add(""org.glowroot.agent.impl.OptionalThreadContextImpl"");types.add(""org.glowroot.agent.impl.NestedTimerMap"");types.add(""org.glowroot.agent.impl.ThreadContextImpl"");types.add(""org.glowroot.agent.impl.TimerImpl"");types.add(""org.glowroot.agent.impl.TransactionRegistry"");types.add(""org.glowroot.agent.impl.TransactionRegistry$TransactionRegistryHolder"");types.add(""org.glowroot.agent.impl.TransactionServiceImpl"");types.add(""org.glowroot.agent.impl.TransactionServiceImpl$TransactionServiceHolder"");types.add(""org.glowroot.agent.model.CommonTimerImpl"");types.add(""org.glowroot.agent.model.ThreadContextPlus"");types.add(""org.glowroot.agent.model.TimerNameImpl"");types.add(""org.glowroot.agent.plugin.api.MessageSupplier"");types.add(""org.glowroot.agent.plugin.api.MessageSupplier$1"");types.add(""org.glowroot.agent.plugin.api.OptionalThreadContext"");types.add(""org.glowroot.agent.plugin.api.ThreadContext"");types.add(""org.glowroot.agent.plugin.api.Timer"");types.add(""org.glowroot.agent.plugin.api.TimerName"");types.add(""org.glowroot.agent.plugin.api.config.ConfigListener"");types.add(""org.glowroot.agent.plugin.api.util.FastThreadLocal"");types.add(""org.glowroot.agent.plugin.api.util.FastThreadLocal$Holder"");types.add(""org.glowroot.agent.plugin.api.weaving.BindClassMeta"");types.add(""org.glowroot.agent.plugin.api.weaving.BindMethodMeta"");types.add(""org.glowroot.agent.plugin.api.weaving.BindMethodName"");types.add(""org.glowroot.agent.plugin.api.weaving.BindOptionalReturn"");types.add(""org.glowroot.agent.plugin.api.weaving.BindParameter"");types.add(""org.glowroot.agent.plugin.api.weaving.BindParameterArray"");types.add(""org.glowroot.agent.plugin.api.weaving.BindReceiver"");types.add(""org.glowroot.agent.plugin.api.weaving.BindReturn"");types.add(""org.glowroot.agent.plugin.api.weaving.BindThrowable"");types.add(""org.glowroot.agent.plugin.api.weaving.BindTraveler"");types.add(""org.glowroot.agent.plugin.api.weaving.IsEnabled"");types.add(""org.glowroot.agent.plugin.api.weaving.MethodModifier"");types.add(""org.glowroot.agent.plugin.api.weaving.OnAfter"");types.add(""org.glowroot.agent.plugin.api.weaving.OnBefore"");types.add(""org.glowroot.agent.plugin.api.weaving.OnReturn"");types.add(""org.glowroot.agent.plugin.api.weaving.OnThrow"");types.add(""org.glowroot.agent.plugin.api.weaving.Pointcut"");types.add(""org.glowroot.agent.plugin.api.weaving.Shim"");types.add(""org.glowroot.agent.util.Tickers"");types.add(""org.glowroot.agent.util.Tickers$DummyTicker"");types.add(""org.glowroot.agent.weaving.Advice"");types.add(""org.glowroot.agent.weaving.AdviceGenerator"");types.add(""org.glowroot.agent.weaving.Advice$AdviceOrdering"");types.add(""org.glowroot.agent.weaving.Advice$AdviceParameter"");types.add(""org.glowroot.agent.weaving.Advice$ParameterKind"");types.add(""org.glowroot.agent.weaving.AdviceAdapter"");types.add(""org.glowroot.agent.weaving.AdviceBuilder"");types.add(""org.glowroot.agent.weaving.AdviceBuilder$1"");types.add(""org.glowroot.agent.weaving.AdviceBuilder$AdviceConstructionException"");types.add(""org.glowroot.agent.weaving.AdviceMatcher"");types.add(""org.glowroot.agent.weaving.AnalyzedClass"");types.add(""org.glowroot.agent.weaving.AnalyzedMethod"");types.add(""org.glowroot.agent.weaving.AnalyzedWorld"");types.add(""org.glowroot.agent.weaving.AnalyzedWorld$ParseContext"");types.add(""org.glowroot.agent.weaving.BootstrapMetaHolders"");types.add(""org.glowroot.agent.weaving.BootstrapMetaHolders$ClassMetaHolder"");types.add(""org.glowroot.agent.weaving.BootstrapMetaHolders$MethodMetaHolder"");types.add(""org.glowroot.agent.weaving.ClassAnalyzer"");types.add(""org.glowroot.agent.weaving.ClassAnalyzer$AnalyzedMethodKey"");types.add(""org.glowroot.agent.weaving.ClassAnalyzer$BridgeMethodClassVisitor"");types.add(""org.glowroot.agent.weaving.ClassAnalyzer$BridgeMethodClassVisitor""+""$BridgeMethodVisitor"");types.add(""org.glowroot.agent.weaving.ClassLoaders"");types.add(""org.glowroot.agent.weaving.ClassLoaders$LazyDefinedClass"");types.add(""org.glowroot.agent.weaving.ClassNames"");types.add(""org.glowroot.agent.weaving.Weaver$FelixOsgiHackClassVisitor"");types.add(""org.glowroot.agent.weaving.Weaver$FelixOsgiHackMethodVisitor"");types.add(""org.glowroot.agent.weaving.GeneratedBytecodeUtil"");types.add(""org.glowroot.agent.weaving.ImmutableAdvice"");types.add(""org.glowroot.agent.weaving.ImmutableAdvice$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableAdvice$InitShim"");types.add(""org.glowroot.agent.weaving.ImmutableAdviceMatcher"");types.add(""org.glowroot.agent.weaving.ImmutableAdviceParameter"");types.add(""org.glowroot.agent.weaving.ImmutableAdviceParameter$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedClass"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedClass$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedMethod"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedMethod$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedMethodKey"");types.add(""org.glowroot.agent.weaving.ImmutableAnalyzedMethodKey$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableCatchHandler"");types.add(""org.glowroot.agent.weaving.ImmutableLazyDefinedClass"");types.add(""org.glowroot.agent.weaving.ImmutableLazyDefinedClass$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableMethodMetaGroup"");types.add(""org.glowroot.agent.weaving.ImmutableMethodMetaGroup$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableParseContext"");types.add(""org.glowroot.agent.weaving.ImmutableThinClass"");types.add(""org.glowroot.agent.weaving.ImmutableThinClass$Builder"");types.add(""org.glowroot.agent.weaving.ImmutableThinMethod"");types.add(""org.glowroot.agent.weaving.ImmutableThinMethod$Builder"");types.add(""org.glowroot.agent.weaving.InstrumentationSeekerClassVisitor"");types.add(""org.glowroot.agent.weaving.InstrumentationSeekerClassVisitor""+""$InstrumentationAnnotationMethodVisitor"");types.add(""org.glowroot.agent.weaving.InstrumentationSeekerClassVisitor""+""$TimerAnnotationVisitor"");types.add(""org.glowroot.agent.weaving.InstrumentationSeekerClassVisitor""+""$TraceEntryAnnotationVisitor"");types.add(""org.glowroot.agent.weaving.InstrumentationSeekerClassVisitor""+""$TransactionAnnotationVisitor"");types.add(""org.glowroot.agent.weaving.MixinType"");types.add(""org.glowroot.agent.weaving.ShimType"");types.add(""org.glowroot.agent.weaving.ThinClassVisitor"");types.add(""org.glowroot.agent.weaving.ThinClassVisitor$AnnotationCaptureMethodVisitor"");types.add(""org.glowroot.agent.weaving.ThinClassVisitor$ThinClass"");types.add(""org.glowroot.agent.weaving.ThinClassVisitor$ThinMethod"");types.add(""org.glowroot.agent.weaving.Weaver"");types.add(""org.glowroot.agent.weaving.Weaver$ComputeFramesClassWriter"");types.add(""org.glowroot.agent.weaving.Weaver$JSRInlinerClassVisitor"");types.add(""org.glowroot.agent.weaving.WeavingClassFileTransformer"");types.add(""org.glowroot.agent.weaving.WeavingClassVisitor"");types.add(""org.glowroot.agent.weaving.WeavingClassVisitor$InitMixins"");types.add(""org.glowroot.agent.weaving.WeavingClassVisitor$MethodMetaGroup"");types.add(""org.glowroot.agent.weaving.WeavingMethodVisitor"");types.add(""org.glowroot.agent.weaving.WeavingMethodVisitor$CatchHandler"");types.add(""org.glowroot.common.util.Patterns"");types.add(""org.glowroot.wire.api.model.AgentConfigOuterClass$AgentConfig""+""$InstrumentationConfig$CaptureKind"");types.add(""org.glowroot.wire.api.model.AgentConfigOuterClass$AgentConfig""+""$InstrumentationConfig$CaptureKind$1"");return types;}"
1254	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Intent intent=getIntent();if(mGoogleApiClient==null){mGoogleApiClient=new GoogleApiClient.Builder(this).addConnectionCallbacks(this).addOnConnectionFailedListener(this).addApi(LocationServices.API).build();}if(!(intent.getStringArrayListExtra(SearchActivity.TAG_LIST)==null)&&!intent.getStringArrayListExtra(SearchActivity.TAG_LIST).isEmpty()){tags=intent.getStringArrayListExtra(SearchActivity.TAG_LIST);}if(!(specificTag==null)){specificTag=intent.getStringExtra(SearchActivity.SPECIFIC_SEARCH);}setContentView(R.layout.activity_maps);SupportMapFragment mapFragment=(SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map);mapFragment.getMapAsync(this);}"
1255	"public int hashCode(){return 0;}"
1256	"@Override public void serialize(ByteChannel channel,Map<String,QVariant<T>> data) throws IOException{new IntSerializer().serialize(channel,data.size());StringSerializer stringSerializer=new StringSerializer();VariantSerializer<T> variantSerializer=new VariantSerializer<>();for(Map.Entry<String,QVariant<T>> element : data.entrySet()){stringSerializer.serialize(channel,element.getKey());variantSerializer.serialize(channel,element.getValue());}}"
1257	"private String addressInputEmployee(){System.out.println(""Employee address: "");address=scanner.nextLine();return address;}"
1258	"@Override public String toString(){return Scopes.NO_SCOPE.toString();}"
1259	"public void move(double x,double y,Entity e){if(x<0){e.__move__(size+x-1,y);if(loc.getX()>0){e.setTile(chunk.getTile(loc.get(-1,0)));}else {if(chunk.getWorld().chunk(chunk.getLoc().get(-1,0))!=null){e.setTile(chunk.getWorld().getChunk(chunk.getLoc().get(-1,0)).getTile(loc.get(chunk.size()-1,0)));}else {e.setTile(chunk.getWorld().load(-1,0,this));}}}else {if(x>=size-1){e.__move__(x-size+1,y);if(loc.getX()<chunk.size()-1){e.setTile(chunk.getTile(loc.get(1,0)));}else {if(chunk.getWorld().chunk(chunk.getLoc().get(1,0))!=null){e.setTile(chunk.getWorld().getChunk(chunk.getLoc().get(1,0)).getTile(loc.get(1-chunk.size(),0)));}else {e.setTile(chunk.getWorld().load(1,0,this));}}}else {if(y<0){e.__move__(x,size+y-1);if(loc.getY()>0){e.setTile(chunk.getTile(loc.get(0,-1)));}else {if(chunk.getWorld().chunk(chunk.getLoc().get(0,-1))!=null){e.setTile(chunk.getWorld().getChunk(chunk.getLoc().get(0,-1)).getTile(loc.get(0,chunk.size()-1)));}else {e.setTile(chunk.getWorld().load(0,-1,this));}}}else {if(y>=size-1){e.__move__(x,y-size+1);if(loc.getY()<chunk.size()-1){e.setTile(chunk.getTile(loc.get(0,1)));}else {if(chunk.getWorld().chunk(chunk.getLoc().get(0,1))!=null){e.setTile(chunk.getWorld().getChunk(chunk.getLoc().get(0,1)).getTile(loc.get(0,1-chunk.size())));}else {e.setTile(chunk.getWorld().load(0,1,this));}}}else {if(!walls[(int)x][(int)y]&&!walls[(int)(x+1)][(int)(y+1)]&&!walls[(int)(x)][(int)(y+1)]&&!walls[(int)(x+1)][(int)(y)]){e.__move__(x,y);}}}}}}"
1260	"public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1261	"private void setupFrame(){this.setContentPanel(basePanel);this.setSize(500,500);this.setResizable(false);this.setVisable(true);}"
1262	"@Override public void drawFromXY(Graphics g,Color c,int x,int y,int width,int height){double span=width/6;int sp=(int)span;int[] xInts=new int{x,x+width/3,x+width/2,x+width-(width/3),x+width,x+width/4*3,x+width-sp,x+width/2,x+sp-2,x+width/4,x};int[] yInts=new int{y+(height/3),y+(height/3),y,y+(height/3),y+(height/3),y+(height/8)*5,y+height,y+(height/8*7),y+height,y+(height/8)*5,y+(height/3)};if(getFill()){g.fillPolygon(xInts,yInts,11);}else {g.drawPolygon(xInts,yInts,11);}}"
1263	"public JsonElement getLowWatermark(){return GSON.toJsonTree(getProp(ConfigurationKeys.WATERMARK_INTERVAL_VALUE_KEY)).getAsJsonObject().get(WatermarkInterval.LOW_WATERMARK_TO_JSON_KEY);}"
1264	"public Map<String,String> getMetadata(){if(metadata==null){return null;}return metadata.stream().collect(Collectors.toMap(entry -> entry.key,entry -> entry.value));}"
1265	"public void pauseSounds(){if(soundSystem!=null){for(String s : playing){soundSystem.pause(s);}}}"
1266	"protected void validateClusterHosts(){if(hostCluster!=null){VcenterDataCenter datacenter=getModelClient().datacenters().findById(datacenterId);Cluster cluster=getModelClient().clusters().findById(hostCluster.getId());ClusterComputeResource vcenterCluster=vmware.getCluster(datacenter.getLabel(),cluster.getLabel());if(vcenterCluster==null){ExecutionUtils.fail(""failTask.vmware.cluster.notfound"",args(),args(cluster.getLabel()));}Set<String> vCenterHostUuids=Sets.newHashSet();for(HostSystem hostSystem : vcenterCluster.getHosts()){if(hostSystem.getHardware()!=null&&hostSystem.getHardware().systemInfo!=null){vCenterHostUuids.add(hostSystem.getHardware().systemInfo.uuid);}}List<Host> dbHosts=getModelClient().hosts().findByCluster(hostCluster.getId());Set<String> dbHostUuids=Sets.newHashSet();for(Host host : dbHosts){if(!DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.toString().equalsIgnoreCase(host.getCompatibilityStatus())){ExecutionUtils.fail(""failTask.vmware.cluster.hostincompatible"",args(),args(cluster.getLabel(),host.getLabel()));}else {if(DiscoveredDataObject.DataCollectionJobStatus.ERROR.toString().equalsIgnoreCase(host.getDiscoveryStatus())){ExecutionUtils.fail(""failTask.vmware.cluster.hostsdiscoveryfailed"",args(),args(cluster.getLabel(),host.getLabel()));}}dbHostUuids.add(host.getUuid());}if(!vCenterHostUuids.equals(dbHostUuids)){ExecutionUtils.fail(""failTask.vmware.cluster.mismatch"",args(),args(cluster.getLabel()));}else {info(""Hosts in cluster %s matches correctly"",cluster.getLabel());}}}"
1267	"@Override public void run(){while(true){if(!queue.isEmpty()){Message brdtoSend=queue.poll();sendBroadcast(brdtoSend);}else {try{queue.wait();}catch(InterruptedException e){e.printStackTrace();}}}}"
1268	"public double getAVGExpense(LocalDate start,LocalDate end){List<MoneyItem> l=daoSession.getMoneyItemDao().queryBuilder().where(MoneyItemDao.Properties.Amount.lt(0)).where(MoneyItemDao.Properties.Date.between(start.toDate(),end.toDate())).list();double total=0.0;ListIterator<MoneyItem> listIterator=l.listIterator();while(listIterator.hasNext()){total+=listIterator.next().getAmount();}return total/l.size();}"
1269	"@Override public boolean hasNext(){return hasNext;}"
1270	"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{GestionJustice justiceUpdate=(GestionJustice)request.getSession().getAttribute(""justiceUpdate"");HttpSession session=request.getSession();Integer etat=(Integer)session.getAttribute(""etat"");if(etat==null){RequestDispatcher dispatcher=request.getRequestDispatcher(""/login.jsp"");dispatcher.forward(request,response);}else {try{if(request.getParameter(""Valider"")!=null){Integer id,proces_id;java.util.Date date;java.sql.Date dateSql;if(request.getParameter(""date"").equals("""")){throw new IFT287Exception(""Le champ ne doit pas ?tre vide."");}try{id=justiceUpdate.getGestionSeance().retourneAll().get(justiceUpdate.getGestionSeance().retourneAll().size()-1).getId()+1;proces_id=Integer.parseInt(request.getParameter(""selectProces""));SimpleDateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd"");dateFormat.setLenient(false);date=(java.util.Date)dateFormat.parse(request.getParameter(""date""));dateSql=new java.sql.Date(date.getTime());}catch(NumberFormatException|ParseException e){throw new IFT287Exception(""Le format de la date est incorrect"");}synchronized(justiceUpdate){justiceUpdate.getGestionSeance().ajout(new TupleSeance(id,proces_id,dateSql));}}else {if(request.getParameter(""Supprimer"")!=null){if(request.getParameter(""IdASupprimer"")!=null){synchronized(justiceUpdate){justiceUpdate.getGestionSeance().supprimer(new TupleSeance(Integer.parseInt(request.getParameter(""IdASupprimer""))));}}}else {if(request.getParameter(""param"")!=null){RequestDispatcher dispatcher=request.getRequestDispatcher(""/WEB-INF/accueil.jsp"");dispatcher.forward(request,response);}}}RequestDispatcher dispatcher=request.getRequestDispatcher(""/WEB-INF/seance.jsp"");dispatcher.forward(request,response);}catch(IFT287Exception e){List<String> listeMessageErreur=new LinkedList<String>();listeMessageErreur.add(e.getMessage());request.setAttribute(""listeMessageErreur"",listeMessageErreur);RequestDispatcher dispatcher=request.getRequestDispatcher(""/WEB-INF/seance.jsp"");dispatcher.forward(request,response);}catch(Exception e){e.printStackTrace();response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.toString());}}}"
1271	"public void addItem(Car car) throws ElementAlredyExists{for(Car car_ : this.listOfCars){if(car_.equals(car)||car_.getRegNumber().contentEquals(car.getRegNumber())){throw new ElementAlredyExists(""Car: addItem - element already exists"");}}listOfCars.add(car);}"
1272	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1273	"@Override public void run(){customToastAvailable=true;}"
1274	"@Override public boolean onWrenchRightClick(byte aSide,byte aWrenchingSide,EntityPlayer aPlayer,float aX,float aY,float aZ){if(GT_Mod.gregtechproxy.gt6Pipe){byte tSide=GT_Utility.determineWrenchingSide(aSide,aX,aY,aZ);byte tMask=(byte)(1<<tSide);if(aPlayer.isSneaking()){if((mDisableInput&tMask)!=0){mDisableInput&=~tMask;GT_Utility.sendChatToPlayer(aPlayer,trans(""212"",""Input enabled""));}else {mDisableInput|=tMask;GT_Utility.sendChatToPlayer(aPlayer,trans(""213"",""Input disabled""));}}else {if((mConnections&tMask)==0){connect(tSide);}else {disconnect(tSide);}}return true;}return false;}"
1275	"private Collection<Replacement> getReplacementsFromPropertyFiles(){List<Replacement> replacements=new ArrayList<Replacement>();List<File> files=getFilesFromString(propertyFiles);for(File file : files){getLog().info(""Properties that were loaded from file ""+file.getName());Scanner scanner=null;try{scanner=new Scanner(file);}catch(FileNotFoundException e){getLog().error(""File not found"",e);}while(scanner.hasNext()){String line=scanner.nextLine();getLog().info(line);String[] property=line.split(""="");Replacement rep=new Replacement();if(reverseProperties){rep.setToken(property[1].trim());rep.setValue(property[0].trim());}else {rep.setToken(property[0].trim());rep.setValue(property[1].trim());}replacements.add(rep);}}return null;}"
1276	"@Override public boolean validate(IRequest request) throws Exception{return true;}"
1277	"@Override public void onValueChange(NumberPicker picker,int oldVal,int newVal){day=newVal;}"
1278	"@Override public boolean isCellEditable(int r,int c){if(c==ALLOCATEBUTTON_COLUMN){return (true);}return (false);}"
1279	"public void remove(){if(!parsed||parent==null){return ;}parsed=false;parent.remove();}"
1280	"public void startView(){if(mViewStart==0){log(""viewStart"");mViewStart=System.currentTimeMillis();mZoomAccumulated=0;}}"
1281	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
1282	"@Override public boolean accepts(Unit unit){return unit.isNaval()&&!unit.isDamaged();}"
1283	"public short getUtility(){short index=0;if(!(this.getCurrentPhase()==EUGState.PHASE1)){if(this.getCheckersTable(this.notMe())==2){return 3000;}else {if(this.getCheckersTable(whoAmI)==2){return -3000;}}}else {if(this.whiteCheckersTable==0||this.blackCheckersTable==0){return 0;}}short myCheckersTable=this.getCheckersTable(whoAmI);short foeCheckersTable=this.getCheckersTable(this.notMe());short myMills=this.numberOfMills(whoAmI);short foeMills=this.numberOfMills(this.notMe());short myCouples=this.numberOfOpenCouples(whoAmI);short foeCouples=this.numberOfOpenCouples(this.notMe());switch (this.currentPhase){case EUGState.PHASE1 :short myCheckersShouldTable=((short)(TOT_CHECKERS-this.getCheckersHand(whoAmI)));short foeCheckersShouldTable=((short)(TOT_CHECKERS-this.getCheckersHand(this.notMe())));if((myCheckersTable/myCheckersShouldTable)>(foeCheckersTable/foeCheckersShouldTable)){index+=30;}else {index-=30;}index+=myMills*20*(TOT_CHECKERS-this.getCheckersHand(whoAmI))/3;index-=foeMills*25*(TOT_CHECKERS-this.getCheckersHand(this.notMe()))/3;index+=(myCouples-myMills)*150*(this.getCheckersHand(whoAmI)+1)/3;index-=(foeCouples-foeMills)*180*(this.getCheckersHand(this.notMe())+1)/3;break;case EUGState.PHASE2 :case EUGState.PHASE3 :if(this.getCheckersTable(whoAmI)>this.getCheckersTable(this.notMe())){index+=35;}else {index-=35;}index+=myMills*25*TOT_CHECKERS/3;index-=foeMills*30*TOT_CHECKERS/3;index+=(myCouples-myMills)*5/3;index-=(foeCouples-foeMills)*6/3;break;}return index;}"
1284	"public drawingItem createCustomDrawingItem(String entity,int type,String id,int x,int y,String p1,String p2,String p3,String p4,boolean fill,Color c){if(type==dcTypeUML){UMLDrawingItem d=new UMLDrawingItem(id,x,y,p1,p2,p3,p4,fill,c);d.setCanTransform(false);return d;}return (drawingItem)null;}"
1285	"public boolean newContactIsValid(Contact contact){return contact.getContactName()!=null&&contact.getContactDescription()!=null;}"
1286	"@Override public Object execute(OServer iServer,ODistributedServerManager iManager,ODatabaseDocumentTx database) throws Exception{ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,""committing transaction against db=%s..."",database.getName());ODatabaseRecordThreadLocal.INSTANCE.set(database);try{database.begin(); final OTransactionOptimistic tx=(OTransactionOptimistic)database.getTransaction();result=new OTxTaskResult(); final ODistributedDatabase ddb=iManager.getMessageService().getDatabase(database.getName());try{for(OAbstractRecordReplicatedTask task : tasks){if(task instanceof OCreateRecordTask){ final OCreateRecordTask createRT=(OCreateRecordTask)task; final int clId=createRT.clusterId>-1?createRT.clusterId:createRT.getRid().isValid()?createRT.getRid().getClusterId():-1; final String clusterName=clId>-1?database.getClusterNameById(clId):null;tx.addRecord(createRT.getRecord(),ORecordOperation.CREATED,clusterName);}else { final ORID rid=task.getRid();if(lockRecord&&!ddb.lockRecord(rid,nodeSource)){throw new ODistributedRecordLockedException(rid);}result.locks.add(rid);}}for(OAbstractRecordReplicatedTask task : tasks){ final ORecord record=task.getRecord();if(record instanceof ODocument){for(String f : ((ODocument)record).fieldNames()){ final Object fValue=((ODocument)record).field(f);if(fValue instanceof ORecordLazyMultiValue){((ORecordLazyMultiValue)fValue).convertLinks2Records();}else {if(fValue instanceof ORecordId){((ODocument)record).field(f,((ORecordId)fValue).getRecord());}}}}}for(OAbstractRecordReplicatedTask task : tasks){ final Object taskResult=task.execute(iServer,iManager,database);result.results.add(taskResult);}database.commit();for(int i=0;i<result.results.size();++i){ final Object o=result.results.get(i); final OAbstractRecordReplicatedTask task=tasks.get(i);if(task instanceof OCreateRecordTask){ final OCreateRecordTask t=(OCreateRecordTask)task;result.results.set(i,new OPlaceholder(t.getRecord()));}else {if(task instanceof OUpdateRecordTask){if(((OSimpleVersion)o).getCounter()<0){result.results.set(i,task.getRid().getRecord().reload().getRecordVersion());}else {result.results.set(i,o);}}}}}catch(Exception t){for(ORID r : result.locks){ddb.unlockRecord(r);}throw t;}return result;}catch(ONeedRetryException e){database.rollback();return e;}catch(OTransactionException e){database.rollback();return e;}catch(ORecordDuplicatedException e){database.rollback();return e;}catch(ORecordNotFoundException e){database.rollback();return e;}catch(Exception e){database.rollback();OLogManager.instance().error(this,""Error on distributed transaction commit"",e);return e;}}"
1287	"public ArrayList<LinkedHashMap<String,Object>> checkInSimilar(String triggerValue,String dDocName,Boolean isUpdate){ArrayList<LinkedHashMap<String,Object>> displayFields=new ArrayList<LinkedHashMap<String,Object>>();LinkedHashMap currentDetails=fetchCurrentFileDetails(dDocName);LinkedHashMap<String,Object> approverFields=fetchApproverFields(triggerValue);HashMap<String,Object> retMap=fetchOptionFields(triggerValue);HashMap<String,ArrayList<SelectItem>> optionLists=(HashMap<String,ArrayList<SelectItem>>)retMap.get(""OptionLists"");HashMap<String,String> dependencyMap=(HashMap<String,String>)retMap.get(""DependencyMap"");try{DataBinder myRequestDataBinder=idcClient.createBinder();ServiceResponse myServiceResponse=null;IdcContext userContext=getUserContext();myRequestDataBinder.putLocal(""IdcService"",""CHECKIN_NEW_FORM"");myRequestDataBinder.putLocal(""dpTriggerValue"",triggerValue);myServiceResponse=idcClient.sendRequest(userContext,myRequestDataBinder);DataBinder dataBinderRes=myServiceResponse.getResponseAsBinder();if(dataBinderRes!=null){DataResultSet resultSet1=dataBinderRes.getResultSet(""AssociatedTopFields"");List<DataObject> rows=resultSet1.getRows();ArrayList<String> topFields=new ArrayList<String>();if(rows!=null&&rows.size()>0){for(DataObject obj : rows){topFields.add(obj.get(""parentField""));}}if(approverFields!=null&&approverFields.size()>0){displayFields.add(approverFields);}for(String topField : topFields){LinkedHashMap<String,Object> fields=new LinkedHashMap<String,Object>();if(topField!=null&&""xApprover1"".equalsIgnoreCase(topField)){continue;}if(topFields!=null&&!topFields.contains(""dDocTitle"")){Object[] optionsArr=new Object[7];optionsArr[0]=""TEXTBOX"";optionsArr[1]=dataBinderRes.getLocal(""dDocTitle:fieldCaption"")==null?""Title"":dataBinderRes.getLocal(""dDocTitle:fieldCaption"");optionsArr[2]="""";optionsArr[3]="""";optionsArr[4]=Boolean.TRUE;optionsArr[5]=null;optionsArr[6]=null;fields.put(""dDocTitle"",optionsArr);displayFields.add(fields);}DataResultSet resultSet=dataBinderRes.getResultSet(""AssociatedFields:""+topField);rows=resultSet.getRows();if(topField!=null&&""dDocTitle"".equalsIgnoreCase(topField)){Object[] optionsArr=new Object[7];optionsArr[0]=""TEXTBOX"";optionsArr[1]=dataBinderRes.getLocal(""dDocTitle:fieldCaption"")==null?""Title"":dataBinderRes.getLocal(""dDocTitle:fieldCaption"");optionsArr[2]="""";optionsArr[3]=(isUpdate?currentDetails.get(""dDocTitle""):"""");optionsArr[4]=Boolean.TRUE;optionsArr[5]=null;optionsArr[6]=null;fields.put(""dDocTitle"",optionsArr);}else {if(topField!=null&&""xApprover1"".equalsIgnoreCase(topField)){Object[] optionsArr=new Object[7];optionsArr[0]=""choice"";optionsArr[1]=dataBinderRes.getLocal(""xApprover1:fieldCaption"")==null?""Approver 1"":dataBinderRes.getLocal(""xApprover1:fieldCaption"");optionsArr[2]=optionLists.get(""xApprover1"");optionsArr[3]=dataBinderRes.getLocal(""xApprover1"");optionsArr[4]=Boolean.TRUE;optionsArr[5]=null;optionsArr[6]=null;fields.put(""xApprover1"",optionsArr);}else {Object[] optionsArr=new Object[7];optionsArr[0]=""TEXTBOX"";optionsArr[1]=dataBinderRes.getLocal(topField+"":fieldCaption"");optionsArr[2]="""";optionsArr[3]=dataBinderRes.getLocal(topField);optionsArr[4]=Boolean.TRUE;optionsArr[5]=null;optionsArr[6]=null;fields.put(topField,optionsArr);}}if(rows!=null&&rows.size()>0){for(DataObject obj : rows){String optionListKey=obj.get(""dOptionListKey"");Boolean isView=Boolean.FALSE;if(optionListKey!=null&&optionListKey.startsWith(""view:"")){isView=Boolean.TRUE;}String optionListType=obj.get(""dOptionListType"");String labelStar=dataBinderRes.getLocal(obj.get(""dpFieldName"")+"":fieldCaption"");String isRequired=dataBinderRes.getLocal(obj.get(""dpFieldName"")+"":isRequired"");String type=obj.get(""dType"");if(obj.get(""dpFieldName"")!=null&&""xComments"".equalsIgnoreCase(obj.get(""dpFieldName""))){Object[] optionsArr=new Object[7];optionsArr[0]=""BIGTEXT"";if(labelStar!=null){optionsArr[1]=labelStar;}else {optionsArr[1]=obj.get(""dCaption"");}optionsArr[2]="""";optionsArr[3]=dataBinderRes.getLocal(obj.get(""dpFieldName""));if(isRequired==null||""0"".equals(isRequired)){optionsArr[4]=Boolean.FALSE;}else {optionsArr[4]=Boolean.TRUE;}optionsArr[5]=null;optionsArr[6]=null;fields.put(obj.get(""dpFieldName""),optionsArr);}else {if(optionListType!=null&&""choice"".equalsIgnoreCase(optionListType)){Object[] optionsArr=new Object[7];optionsArr[0]=obj.get(""dOptionListType"");if(labelStar!=null){optionsArr[1]=labelStar;}else {optionsArr[1]=obj.get(""dCaption"");}if(!isView){optionsArr[2]=optionLists.get(obj.get(""dpFieldName""));}else {if(dependencyMap.get(obj.get(""dpFieldName""))!=null){ArrayList<SelectItem> itemList=new ArrayList<SelectItem>();if(""dDocType"".equals(dependencyMap.get(obj.get(""dpFieldName"")))){HashMap<String,String> optionMap=fetchDependentViewList(obj.get(""dOptionListKey"").substring(7),triggerValue);for(Map.Entry<String,String> entry : optionMap.entrySet()){itemList.add(new SelectItem(entry.getKey(),entry.getValue()));}optionsArr[2]=itemList;}else {optionsArr[2]=itemList;}optionsArr[5]=dependencyMap.get(obj.get(""dpFieldName""));}else {ArrayList<SelectItem> itemList=new ArrayList<SelectItem>();HashMap<String,String> optionMap=fetchViewList(obj.get(""dOptionListKey"").substring(7));for(Map.Entry<String,String> entry : optionMap.entrySet()){itemList.add(new SelectItem(entry.getKey(),entry.getValue()));}optionsArr[2]=itemList;}}optionsArr[3]=currentDetails.get(obj.get(""dName""));if(isRequired==null||""0"".equals(isRequired)){optionsArr[4]=Boolean.FALSE;}else {optionsArr[4]=Boolean.TRUE;}optionsArr[6]=obj.get(""dOptionListKey"");fields.put(obj.get(""dpFieldName""),optionsArr);}else {if(type!=null&&""Date"".equalsIgnoreCase(type)){Object[] optionsArr=new Object[7];optionsArr[0]=""Date"";if(labelStar!=null){optionsArr[1]=labelStar;}else {optionsArr[1]=obj.get(""dCaption"");}optionsArr[2]="""";optionsArr[3]=currentDetails.get(obj.get(""dName""));if(isRequired==null||""0"".equals(isRequired)){optionsArr[4]=Boolean.FALSE;}else {optionsArr[4]=Boolean.TRUE;}optionsArr[5]=null;optionsArr[6]=null;fields.put(obj.get(""dpFieldName""),optionsArr);}else {if(type!=null&&""Decimal"".equalsIgnoreCase(type)){Object[] optionsArr=new Object[7];optionsArr[0]=""Decimal"";if(labelStar!=null){optionsArr[1]=labelStar;}else {optionsArr[1]=obj.get(""dCaption"");}optionsArr[2]="""";optionsArr[3]=currentDetails.get(obj.get(""dName""));if(isRequired==null||""0"".equals(isRequired)){optionsArr[4]=Boolean.FALSE;}else {optionsArr[4]=Boolean.TRUE;}optionsArr[5]=null;optionsArr[6]=null;fields.put(obj.get(""dpFieldName""),optionsArr);}else {Object[] optionsArr=new Object[7];optionsArr[0]=""TEXTBOX"";if(labelStar!=null){optionsArr[1]=labelStar;}else {optionsArr[1]=obj.get(""dCaption"");}optionsArr[2]="""";optionsArr[3]=currentDetails.get(obj.get(""dName""));if(isRequired==null||""0"".equals(isRequired)){optionsArr[4]=Boolean.FALSE;}else {optionsArr[4]=Boolean.TRUE;}optionsArr[5]=null;optionsArr[6]=null;fields.put(obj.get(""dpFieldName""),optionsArr);}}}}}}displayFields.add(fields);}if(displayFields!=null&&displayFields.size()==0){LinkedHashMap<String,Object> fields=new LinkedHashMap<String,Object>();Object[] optionsArr=new Object[7];optionsArr[0]=""TEXTBOX"";optionsArr[1]=dataBinderRes.getLocal(""dDocTitle:fieldCaption"")==null?""Title"":dataBinderRes.getLocal(""dDocTitle:fieldCaption"");optionsArr[2]="""";optionsArr[3]=(isUpdate?currentDetails.get(""dDocTitle""):"""");optionsArr[4]=Boolean.TRUE;optionsArr[5]=null;optionsArr[6]=null;fields.put(""dDocTitle"",optionsArr);displayFields.add(fields);}}}catch(IdcClientException e){e.printStackTrace();}return displayFields;}"
1288	"public void onClick(DialogInterface dialog,int which){}"
1289	"@Override public int compare(Object key1,Object key2){return (int)key1-(int)key2;}"
1290	"public int hashCode(){return name.hashCode()+schema.computeHash();}"
1291	"@POST @Produces(""text/plain"") public String getProcessedRX(String text){System.out.println(""Form text: ""+text);VCAPProperties vcp=new VCAPProperties();String xml=RelExAPI.performExtraction(text,""ie-en-news"",vcp.getBaseURL(),vcp.getUsername(),vcp.getPassword());Rep rep=Marshaller.marshallXml(xml);RelExUtil util=new RelExUtil(rep);List<String> entities=util.getEntitiesList();List<String> rels=util.getRelationsList();return ""Entities:\n""+RelExUtil.stringFromList(entities)+""\nRelations:\n""+RelExUtil.stringFromList(rels);}"
1292	"LoggerOperation write(DfsLogger logger,int seq) throws Exception;"
1293	"@Override public boolean isAvailable(){return field.getField()!=null;}"
1294	"private void refresh(String state){if(firstFragment!=null&&firstFragment.mActionMode!=null){return ;}params[0]=""gui/?list=1&token="";params[1]=state;params[2]=token;ConnectivityManager connMgr=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();if(networkInfo!=null&&networkInfo.isConnected()&&!networkInfo.isFailover()){if(hostname.equals("""")){qBittorrentNoSettingsFoundDialog(R.string.info,R.string.about_help1);}else {new torrentTokenTask().execute();}}else {Toast.makeText(getApplicationContext(),R.string.connection_error,Toast.LENGTH_SHORT).show();}}"
1295	"@Override public void keyPressed(KeyEvent e){if(e.getKeyCode()==KeyEvent.VK_BACK_SPACE&&!(nameTextField.getText().contains("";""))&&!(nameTextField.getText().contains(""=""))){nameTextField.setEditable(true);warnung.setVisible(false);}if(!(nameTextField.getText().length()>0)){subButton.setEnabled(false);}if(e.getKeyCode()==44){subButton.setEnabled(false);warnung.setVisible(true);warnung.setText(""Invalid Character: ';'"");}if(e.getKeyCode()==48){subButton.setEnabled(false);warnung.setVisible(true);warnung.setText(""Invalid Character: '='"");}}"
1296	"public void actionPerformed(ActionEvent e){boolean[] bool=AnimeIndex.exclusionAnime.get(name);bool[0]=false;if(isAllFalse(bool)){AnimeIndex.exclusionAnime.remove(name);}else {AnimeIndex.exclusionAnime.put(name,bool);}}"
1297	"@Override public void actionPerformed(ActionEvent actionEvent){if(serviceOrchestrator.getExecutor().isTerminated()){counter=0;}else {++counter;}jLabel1.setText(""Minutes left:""+String.valueOf((interval/60000)-counter));}"
1298	"@Override public void actionPerformed(ActionEvent e){gameDifficulty=difficulty[0];}"
1299	"public String getId(){return null;}"
1300	"@Override public void onClick(DialogInterface dialog,int which){}"
1301	"@Override public int getValue(){return controller.hasEssentials?1:0;}"
1302	"public static TextField addTextField(Pane parentPane,String defaultText){return GUISupport.addTextField(parentPane,defaultText,null);}"
1303	"protected void canUserViewActivityInstanceForm(APISession session,User user,IFormWorkflowAPI workflowAPI,long activityInstanceID,String formId,long userId,Map<String,Object> context) throws BPMEngineException,InvalidSessionException,ForbiddenFormAccessException,SuspendedFormException,CanceledFormException,FormInErrorException,SkippedFormException,FormNotFoundException,FormAlreadySubmittedException,AbortedFormException{try{if(!workflowAPI.isInvolvedInHumanTask(session,userId,activityInstanceID)){ final String message=""An attempt was made by user ""+user.getUsername()+"" to access the form of activity instance ""+activityInstanceID;if(getLogger().isLoggable(Level.INFO)){getLogger().log(Level.INFO,message,context);}throw new ForbiddenFormAccessException(message);} final ActivityEditState activityEditState=workflowAPI.getTaskEditState(session,activityInstanceID);if(ActivityEditState.SUSPENDED.equals(activityEditState)){throw new SuspendedFormException();}else {if(ActivityEditState.CANCELED.equals(activityEditState)){throw new CanceledFormException();}else {if(ActivityEditState.FAILED.equals(activityEditState)){throw new FormInErrorException();}else {if(ActivityEditState.SKIPPED.equals(activityEditState)){throw new SkippedFormException();}else {if(ActivityEditState.ABORTED.equals(activityEditState)){throw new AbortedFormException();}else {if(ActivityEditState.NOT_EDITABLE.equals(activityEditState)){if(FormServiceProviderUtil.ENTRY_FORM_TYPE.equals(getFormType(formId,context))){ final String message=""The activity instance with ID ""+activityInstanceID+"" cannot be executed anymore. It's either finished or aborted"";if(getLogger().isLoggable(Level.INFO)){getLogger().log(Level.INFO,message,context);}throw new FormAlreadySubmittedException(message);}}}}}}}}catch(ActivityInstanceNotFoundException e){ final String message=""The activity instance with ID ""+activityInstanceID+"" does not exist!"";if(getLogger().isLoggable(Level.INFO)){getLogger().log(Level.INFO,message,e,context);}throw new FormNotFoundException(message);}}"
1304	"public BodyPart getTargetOrgan(Combat c,Character target){if(c.getStance().inserted(target)){return target.body.getRandomInsertable();}else {if(c.getStance().en==Stance.anal){return target.body.getRandom(""ass"");}else {return target.body.getRandomPussy();}}}"
1305	"@Override public void run(){long id=0;int session=0;List<TransactionParticipant> members=null;Iterator<TransactionParticipant> iter=null;PausedTransaction pt;boolean abort=false;LogEvent evt=null;Profiler prof;boolean paused;Thread thread=Thread.currentThread();if(threads.size()<maxSessions){threads.add(thread);session=threads.indexOf(thread);activeSessions.incrementAndGet();}else {getLog().warn(""Max sessions reached, new session not created"");return ;}getLog().info(""start ""+thread);while(running()){Serializable context=null;prof=null;evt=null;paused=false;thread.setName(getName()+""-""+session+"":idle"");int action=-1;try{if(hasStatusListeners){notifyStatusListeners(session,TransactionStatusEvent.State.READY,id,"""",null);}Object obj=isp.in(queue,MAX_WAIT);if(obj==Boolean.FALSE){continue;}if(obj==null){if(session+1>sessions&&getActiveSessions()>sessions){break;}else {continue;}}if(!(obj instanceof Serializable)){getLog().error(""non serializable '""+obj.getClass().getName()+""' on queue '""+queue+""'"");continue;}context=(Serializable)obj;if(obj instanceof Pausable){Pausable pausable=(Pausable)obj;pt=pausable.getPausedTransaction();if(pt!=null){pt.cancelExpirationMonitor();id=pt.id();members=pt.members();iter=pt.iterator();abort=pt.isAborting();evt=pt.getLogEvent();prof=pt.getProfiler();if(metrics!=null){metrics.record(pt.getParticipant().getClass().getName()+""-resume"",prof.getPartialInMillis());}if(prof!=null){prof.reenable();}pausedCounter.decrementAndGet();}}else {pt=null;}if(pt==null){int running=getRunningSessions();if(maxActiveSessions>0&&running>=maxActiveSessions){getLog().warn(Thread.currentThread().getName()+"": emergency retry, running-sessions=""+running+"", max-active-sessions=""+maxActiveSessions);psp.out(RETRY_QUEUE,obj,retryTimeout);checkRetryTask();continue;}abort=false;id=nextId();members=new ArrayList();iter=getParticipants(DEFAULT_GROUP).iterator();activeTransactions.incrementAndGet();}if(debug){if(evt==null){evt=getLog().createLogEvent(""debug"",Thread.currentThread().getName()+"":""+Long.toString(id)+(pt!=null?"" [resuming]"":""""));if(debugContext){evt.addMessage(context);}}if(prof==null){prof=new Profiler();}else {prof.checkPoint(""resume"");}}snapshot(id,context,PREPARING);setThreadLocal(id,context);action=prepare(session,id,context,members,iter,abort,evt,prof);removeThreadLocal();switch (action){case PAUSE :paused=true;if(id%TIMER_PURGE_INTERVAL==0){timer.purge();}pausedCounter.incrementAndGet();break;case PREPARED :if(members.size()>0){setState(id,COMMITTING);setThreadLocal(id,context);commit(session,id,context,members,false,evt,prof);removeThreadLocal();}break;case ABORTED :if(members.size()>0){setThreadLocal(id,context);abort(session,id,context,members,false,evt,prof);removeThreadLocal();}break;case RETRY :psp.out(RETRY_QUEUE,context);checkRetryTask();break;case NO_JOIN :break;}if((action&PAUSE)==0){snapshot(id,null,DONE);if(id==tail){checkTail();}else {purge(id,false);}tps.tick();}}catch(Throwable t){if(evt==null){getLog().fatal(t);}else {evt.addMessage(t);}}finally{removeThreadLocal();if(!paused){activeTransactions.decrementAndGet();}if(hasStatusListeners){notifyStatusListeners(session,paused?TransactionStatusEvent.State.PAUSED:TransactionStatusEvent.State.DONE,id,"""",context);}if(evt!=null&&(action==PREPARED||action==ABORTED||(action==-1&&prof!=null))){switch (action){case PREPARED :evt.setTag(""commit"");break;case ABORTED :evt.setTag(""abort"");break;case -1 :evt.setTag(""undefined"");break;}if(getInTransit()>Math.max(maxActiveSessions,activeSessions.get())*100){evt.addMessage(""WARNING: IN-TRANSIT TOO HIGH"");}evt.addMessage(String.format("" in-transit=%d, head=%d, tail=%d, paused=%d, outstanding=%d, active-sessions=%d/%d, %s, elapsed=%dms"",getInTransit(),head,tail,pausedCounter.get(),getOutstandingTransactions(),getActiveSessions(),maxSessions,tps.toString(),prof!=null?prof.getElapsedInMillis():-1));if(prof!=null){evt.addMessage(prof);}Logger.log(new FrozenLogEvent(evt));}}}threads.remove(thread);int currentActiveSessions=activeSessions.decrementAndGet();getLog().info(""stop ""+Thread.currentThread()+"", active sessions=""+currentActiveSessions);}"
1306	"private double Fc(double L,double Lt,double Lp,double Ltp){return doFc(L,Lt,Lp,Ltp);}"
1307	"@Override public LockClient tryLock(){while(true){synchronized(sync){if(sync.tryAcquireShared(clientIndex)>0){return null;}LockClient lockHolder=sync.getLockHolder();if(lockHolder!=null){return lockHolder;}}Thread.yield();}}"
1308	"public static void p(String prefix,Throwable e){if(WXEnvironment.isApkDebugable()&&e!=null){WXLogUtils.p(prefix+WXLogUtils.getStackTrace(e));}}"
1309	"@FXML private void applyFilter(){String text=searchBox.getText();Predicate<Item> variablesContain=DisplayUtil.createPredicateForSearch(text,Item.class);Predicate<Item> itemContains=i -> i.toString().toLowerCase().contains(text.toLowerCase());selected=getSelectedItem()==null?selected:getSelectedItem();filteredDataList.clear();fullDataList.forEach(i -> {  if (variablesContain.test(i) || itemContains.test(i)) {    filteredDataList.add(i);    if (selected == i) {      listView.getSelectionModel().select(i);    }  }});updateInfoLabel();}"
1310	"public void sendMessage(){String msg=null;msg=txtField.getText();ChatPacket chtpkt=new ChatPacket(username,msg);client.sendMessage(chtpkt);}"
1311	"public void populateFields(){if(AppSync.teamHasScoutingData()){JSONObject data=AppSync.teamScoutingData(""autonomous"");if(data!=null){try{if(data.getBoolean(""has_autonomous"")){if(data.getBoolean(""can_score_jewel"")){canScoreJewel.setChecked(true);}if(data.getBoolean(""can_score_in_cryptobox"")){canScoreInCryptobox.setChecked(true);}if(data.getInt(""max_glyphs_scorable"")!=0){maxGlyphsScorable.setText(""""+data.getInt(""max_glyphs_scorable""));}if(data.getBoolean(""can_park_in_safe_zone"")){canParkInSafeZone.setChecked(true);}if(data.getString(""autonomous_notes"").length()>0){autonomousNotes.setText(data.getString(""autonomous_notes""));}}else {hasNoAutonomous();teamHasAutonomous.setChecked(false);}}catch(JSONException|NullPointerException error){Toast.makeText(this,""An error occurred: ""+error.getMessage(),Toast.LENGTH_LONG).show();}}else {autonomousNotes.setText("""");}}}"
1312	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1313	"public final int hashCode(){return nodeEq.keyEq.hashCode(key)^nodeEq.valueEq.hashCode(val);}"
1314	"public RequestStatus performAction(String userCode,String actionCode){RequestStatus requestStatus=new RequestStatus();requestStatus.setIsSuccess(""1"");requestStatus.setCode(userCode);requestStatus.setMessage(""Post Action Transaction Succesful"");ChallengeView challenge=getChallenge(actionCode);if(challenge!=null){logger.debug(""challenge available"");UserGoalPoints userGoalPoints=getActionProcessorDAO().getUserGoalpoints(userCode,challenge.getGoalCode());logger.debug(""userGoalPoints-->""+userGoalPoints);if(userGoalPoints==null){logger.debug(""userGoalPoints zero entry is not available , Going to insert"");String putUserGoalPointsStatus=putUserGoalPoints(userCode,0);logger.debug(""putUserGoalPointsStatus--->""+putUserGoalPointsStatus);}int occurrence=challenge.getOccurrence();logger.debug(""occurrence-->""+occurrence);if(occurrence==0){logger.debug(""No occurrence maintained or 0 occurrence, So performing proper transaction"");performTransactions(challenge,userCode);}else {if(occurrence>0&&occurrence!=1){List<UserAction> userActionList=getUserAction(userCode,actionCode);logger.debug(""userActionList Size-->""+userActionList.size());if(userActionList.isEmpty()){logger.debug(""No Previous occurrence in DB preforming 0 Transaction"");UserAction userAction=new UserAction();userAction.setGoalCode(challenge.getGoalCode());userAction.setUserCode(userCode);userAction.setActionCode(actionCode);userAction.setPoints(0);userAction.setStatus(""ACTIVE"");String postStatus=postUserAction(userAction);if(postStatus.equals(""0"")){requestStatus.setIsSuccess(""0"");requestStatus.setCode(userCode);requestStatus.setMessage(""UserAction transaction failed"");}else {requestStatus.setIsSuccess(""1"");requestStatus.setCode(userCode);requestStatus.setMessage(""Zero Points Transaction Succesful"");}}else {if(userActionList.size()<(occurrence-1)){logger.debug(""No Previous occurrences lesser than challenge occurrence so 0 transaction"");UserAction userAction=new UserAction();userAction.setGoalCode(challenge.getGoalCode());userAction.setUserCode(userCode);userAction.setActionCode(actionCode);userAction.setPoints(0);userAction.setStatus(""ACTIVE"");String postStatus=postUserAction(userAction);if(postStatus.equals(""0"")){requestStatus.setIsSuccess(""0"");requestStatus.setCode(userCode);requestStatus.setMessage(""UserAction transaction failed"");}}else {if(userActionList.size()==(occurrence-1)){logger.debug(""Previous occurrences equal to challenge occurrence so performing non 0 transaction"");requestStatus=performTransactions(challenge,userCode);}}}}else {logger.debug(""No Previous action available but occurrence is one SO perforing transaction"");requestStatus=performTransactions(challenge,userCode);}}if(requestStatus.getIsSuccess().equals(""1"")){logger.debug(""All the transactions are succesful and So performing user Goal Points"");}}else {requestStatus.setIsSuccess(""0"");requestStatus.setCode(userCode);requestStatus.setMessage(""Challenge Not Available"");}return requestStatus;}"
1315	"public boolean canEnhance(CommandType buildCommand,boolean distress){if(distress){return false;}else {switch (buildCommand){case BUILD_CAMP :return skills.contains(SurvivalSkills.OUTPOSTING,false);case BUILD_SHELTER :return skills.contains(BuildingSkills.ELITE_ASSEMBLING,false);case BUILD_BUNKER :return skills.contains(BuildingSkills.ELITE_MASONRY,false);default :return false;}}}"
1316	"public int compare(Object o1,Object o2){GlobalSilverContent gsc1=(GlobalSilverContent)o1;GlobalSilverContent gsc2=(GlobalSilverContent)o2;int compareResult=gsc1.getDate().compareTo(gsc2.getDate());if(compareResult==0){compareResult=gsc1.getId().compareTo(gsc2.getId());}return compareResult;}"
1317	"public void update_iMinus1SolFront(double[][] sol){iMinus1SolFrontDouble=sol;}"
1318	"@Override public void execute(Tuple input){if(meter==null){meter=new ThroughputMeter(""ACKer"",10_000_000);}meter.record();long start=System.currentTimeMillis();if(TupleUtils.isTick(input)){Map<Object,AckObject> tmp=pending.rotate();LOG.debug(""Number of timeout tuples:{}"",tmp.size());return ;}String streamId=input.getSourceStreamId();Object id=input.getValue(0);AckObject curr=pending.get(id);if(ACKER_INIT_STREAM_ID.equals(streamId)){if(curr==null){curr=new AckObject();curr.val=input.getLong(1);curr.spoutTask=input.getInteger(2);pending.put(id,curr);}else {curr.updateAck(input.getLong(1));curr.spoutTask=input.getInteger(2);}}else {if(ACKER_ACK_STREAM_ID.equals(streamId)){if(curr!=null){curr.updateAck(input.getLong(1));}else {curr=new AckObject();curr.val=input.getLong(1);pending.put(id,curr);}}else {if(ACKER_FAIL_STREAM_ID.equals(streamId)){if(curr==null){curr=new AckObject();}curr.failed=true;pending.put(id,curr);}else {if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)){if(curr==null){curr=new AckObject();}pending.put(id,curr);}else {LOG.warn(""Unknown source stream {} from task-{}"",streamId,input.getSourceTask());return ;}}}}Integer task=curr.spoutTask;if(curr!=null&&task!=null){Values tuple=new Values(id,getTimeDeltaMillis(curr.startTime));if(curr.val==0){pending.remove(id);collector.emitDirect(task,ACKER_ACK_STREAM_ID,tuple);}else {if(curr.failed){pending.remove(id);collector.emitDirect(task,ACKER_FAIL_STREAM_ID,tuple);}else {if(ACKER_RESET_TIMEOUT_STREAM_ID.equals(streamId)){collector.emitDirect(task,ACKER_RESET_TIMEOUT_STREAM_ID,tuple);}}}}collector.ack(input);latency.pushLatency(start);}"
1319	"public void createPackageContents(){if(isCreated){return ;}isCreated=true;programEClass=createEClass(PROGRAM);createEReference(programEClass,PROGRAM__PROCEDURES);createEReference(programEClass,PROGRAM__CORES);coreEClass=createEClass(CORE);createEAttribute(coreEClass,CORE__NAME);createEAttribute(coreEClass,CORE__BROWSER);createEReference(coreEClass,CORE__ACTIONS);procedureEClass=createEClass(PROCEDURE);createEAttribute(procedureEClass,PROCEDURE__NAME);createEReference(procedureEClass,PROCEDURE__VAR);createEReference(procedureEClass,PROCEDURE__ACTIONS);actionEClass=createEClass(ACTION);callProcedureEClass=createEClass(CALL_PROCEDURE);createEReference(callProcedureEClass,CALL_PROCEDURE__REF);createEAttribute(callProcedureEClass,CALL_PROCEDURE__ARG);goActionEClass=createEClass(GO_ACTION);createEAttribute(goActionEClass,GO_ACTION__URL);selectionEClass=createEClass(SELECTION);createEAttribute(selectionEClass,SELECTION__TYPE_ELEMENT);linkButtonSelectionEClass=createEClass(LINK_BUTTON_SELECTION);createEReference(linkButtonSelectionEClass,LINK_BUTTON_SELECTION__TYPE_SELECTION);createEReference(linkButtonSelectionEClass,LINK_BUTTON_SELECTION__GENERAL_ACTIONS);createEAttribute(linkButtonSelectionEClass,LINK_BUTTON_SELECTION__CLICKS);generalSelectionEClass=createEClass(GENERAL_SELECTION);createEReference(generalSelectionEClass,GENERAL_SELECTION__TYPE_SELECTION);createEReference(generalSelectionEClass,GENERAL_SELECTION__GENERAL_ACTIONS);checkboxSelectionEClass=createEClass(CHECKBOX_SELECTION);createEReference(checkboxSelectionEClass,CHECKBOX_SELECTION__TYPE_SELECTION);createEAttribute(checkboxSelectionEClass,CHECKBOX_SELECTION__ACTION);comboboxSelectionEClass=createEClass(COMBOBOX_SELECTION);createEReference(comboboxSelectionEClass,COMBOBOX_SELECTION__TYPE_SELECTION);createEAttribute(comboboxSelectionEClass,COMBOBOX_SELECTION__VALUES);pageSelectionEClass=createEClass(PAGE_SELECTION);createEReference(pageSelectionEClass,PAGE_SELECTION__STORE_ACTIONS);createEReference(pageSelectionEClass,PAGE_SELECTION__ASSERTIONS);generalActionEClass=createEClass(GENERAL_ACTION);storeActionEClass=createEClass(STORE_ACTION);createEAttribute(storeActionEClass,STORE_ACTION__VAL);createEReference(storeActionEClass,STORE_ACTION__COUNT);createEReference(storeActionEClass,STORE_ACTION__VAR);countActionEClass=createEClass(COUNT_ACTION);createEAttribute(countActionEClass,COUNT_ACTION__HTML_ELEMENT);createEReference(countActionEClass,COUNT_ACTION__TYPE_SELECTION);varEClass=createEClass(VAR);createEAttribute(varEClass,VAR__NAME);setActionEClass=createEClass(SET_ACTION);createEAttribute(setActionEClass,SET_ACTION__ATTRIBUTE);createEAttribute(setActionEClass,SET_ACTION__VALUE);typeSelectionEClass=createEClass(TYPE_SELECTION);createEAttribute(typeSelectionEClass,TYPE_SELECTION__ATTRIBUTE);createEAttribute(typeSelectionEClass,TYPE_SELECTION__VALUE);createEReference(typeSelectionEClass,TYPE_SELECTION__VAR);assertEClass=createEClass(ASSERT);assertContainsEClass=createEClass(ASSERT_CONTAINS);createEAttribute(assertContainsEClass,ASSERT_CONTAINS__HTML_ELEMENT);createEAttribute(assertContainsEClass,ASSERT_CONTAINS__ATTRIBUTE);createEAttribute(assertContainsEClass,ASSERT_CONTAINS__TEXT);createEAttribute(assertContainsEClass,ASSERT_CONTAINS__VALUE);assertEqualsEClass=createEClass(ASSERT_EQUALS);createEReference(assertEqualsEClass,ASSERT_EQUALS__C1);createEReference(assertEqualsEClass,ASSERT_EQUALS__C2);comparableEClass=createEClass(COMPARABLE);createEReference(comparableEClass,COMPARABLE__VAR);createEAttribute(comparableEClass,COMPARABLE__HTML_ELEMENT);createEAttribute(comparableEClass,COMPARABLE__ATTRIBUTE);browserEEnum=createEEnum(BROWSER);htmlElementEEnum=createEEnum(HTML_ELEMENT);attributeEEnum=createEEnum(ATTRIBUTE);}"
1320	"@Override protected boolean start(SparseBitSet b){if(b==null){throw new NullPointerException();}return true;}"
1321	"@Override public int size(){return planes.length==0?0:planes[0].valueCount;}"
1322	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
1323	"protected Transaction toTransaction(JSONObject json,TransactionType type) throws Exception{Transaction tx=new Transaction(type);Amount fee;if(connection.client.serverInfo.primed()){fee=connection.client.serverInfo.transactionFee(tx);}else {fee=Amount.fromString(""50"");}Amount extraFee=Util.getExtraFee(json,type);fee=fee.add(extraFee);tx.as(Amount.Fee,fee);AccountID account=AccountID.fromAddress(this.connection.address);Map<String,Object> map=Validate.rippleRes(this.connection.client,account);if(mapError(map)){throw new Exception((String)map.get(""error_message""));}else {tx.as(UInt32.Sequence,map.get(""Sequence""));}try{tx.parseFromJson(json);}catch(JSONException e){e.printStackTrace();}return tx;}"
1324	"@Override public void onDestroy(){super.onDestroy();}"
1325	"@SuppressWarnings(""unchecked"") public List<Object> getDmdCollAmtInstallmentWise(EgDemand egDemand){ final StringBuilder queryBuilder=new StringBuilder();queryBuilder.append(""select dmdRes.id,dmdRes.id_installment, sum(dmdDet.amount) as amount, sum(dmdDet.amt_collected) as amt_collected, "").append(""sum(dmdDet.amt_rebate) as amt_rebate, inst.start_date from eg_demand_details dmdDet,eg_demand_reason dmdRes, "").append(""eg_installment_master inst,eg_demand_reason_master dmdresmas where dmdDet.id_demand_reason=dmdRes.id "").append(""and dmdDet.id_demand =:dmdId and dmdRes.id_installment = inst.id and dmdresmas.id = dmdres.id_demand_reason_master "").append(""group by dmdRes.id,dmdRes.id_installment, inst.start_date order by inst.start_date "");return getCurrentSession().createSQLQuery(queryBuilder.toString()).setLong(""dmdId"",egDemand.getId()).list();}"
1326	"@Override public boolean result(MinecartManiaMinecart minecart,String str){return minecart.isStandardMinecart()&&minecart.minecart.getPassenger()==null&&str.toLowerCase().contains(""empty"");}"
1327	"public void startUseCase(){programSlot=null;Intent intent=new Intent(MainController.getApp(),MaintainScheduleScreen.class);MainController.displayScreen(intent);}"
1328	"@Override public void run(){javelin.controller.db.Preferences.init();initialize();if(!StateManager.load()){if(StateManager.nofile){disclaimer();}startcampaign();}javelin.controller.db.Preferences.init();preparedebug();if(Dungeon.active!=null){Dungeon.active.activate(true);}StateManager.save(true,StateManager.SAVEFILE);if(Javelin.DEBUG){while(true){loop();}}else {while(true){try{loop();}catch(RuntimeException e){handlefatalexception(e);}}}}"
1329	"public void widgetSelected(SelectionEvent e){optWidth(true);}"
1330	"public String refund(String url,String param){HttpPost httpPost=new HttpPost(url);CloseableHttpResponse response=null;String result=null;try{httpPost.setEntity(new StringEntity(param));response=httpClient.execute(httpPost);org.apache.http.HttpEntity entity=response.getEntity();result=EntityUtils.toString(entity);EntityUtils.consume(entity);}catch(IOException e){e.printStackTrace();}finally{try{response.close();}catch(IOException e){e.printStackTrace();}}return result;}"
1331	"public static void adjustRoom(Room room){roomsMap.put(room.getId(),room);}"
1332	"@Override public void onFailure(Call<LaunchResponse> call,Throwable t){isLaunchByDate=false;dataSaver.sendResult(new Result(Constants.ACTION_GET_PREV_LAUNCHES,false,call,t.getLocalizedMessage()));}"
1333	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1334	"public void loadNewPosition(Position position){mPositions.add(position);String date=SimpleDateFormat.getDateTimeInstance().format(position.getDate());LatLng latLng=new LatLng(position.getLatitude(),position.getLongitude());mMap.addMarker(new MarkerOptions().position(latLng).title(""Here on ""+date));if(mPreferencesHelper.isMoveMap()){mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));}}"
1335	"@Override public void onFound(List<DataHolder> data,boolean hasnext,boolean hasprev){pagerAdapter.changeSate(hasnext,hasprev);page.updateListView(data);if(hasnext){playerActivity.runOnUiThread(new Runnable(){  @Override public void run(){    viewPager.setCurrentItem(1,false);    bar1.setVisibility(View.GONE);    bar2.setVisibility(View.GONE);  }});}}"
1336	"private void distanceBetweenRecursive(int counter,int start,int end){getViewNode().set(start,true);if(start==end){System.out.println(counter);return ;}List<Integer> currentNode=getAllNode().get(start);for(Integer child : currentNode){if(getViewNode().get(child)!=true){distanceBetweenRecursive(getCount()+1,child,end);getViewNode().set(child,false);}}return ;}"
1337	"private final boolean isFailOnMissingModelInteceptors(){ final I_AD_System system=MSystem.get(Env.getCtx()); final boolean isFail=system.isFailOnMissingModelValidator();return isFail;}"
1338	"public void fetchBook(String name){ParseQuery<AddressBook> bookQuery=ParseQuery.getQuery(AddressBook.class);bookQuery.whereEqualTo(""objectId"",name);bookQuery.findInBackground(new FindCallback<AddressBook>(){  @Override public void done(  List<AddressBook> addressBooks,  ParseException e){    if (e == null)     mBook=addressBooks.get(0); else {      Log.e(DroidBook.TAG,""Error: "" + e.getMessage());      e.printStackTrace();    }  }});}"
1339	"@Override public void run(){if(isLongTouch()){mIsLongTouch=true;}}"
1340	"public void setOnCompletionListener(OnCompletionListener l){mOnCompletionListener=l;}"
1341	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1342	"public void setLocalMode(boolean enabled,String configFile){localMode=enabled;try{WikipediaConfiguration conf=new WikipediaConfiguration(new File(configFile+""-""+lang+"".xml""));conf.clearDatabasesToCache();wikipedia=new Wikipedia(conf,true);}catch(EnvironmentLockedException|ParserConfigurationException|SAXException|IOException|ClassNotFoundException|InstantiationException|IllegalAccessException ex){logger.error(""Error loading Wikipedia miner Wikipedia, check the config dirs"",ex);}}"
1343	"@Override public boolean mayBeNull(){return true;}"
1344	"private static ArrayList<Table> createTables(String tableNameSuffix){ final ArrayList<Table> TABLES=new ArrayList<>();TABLES.add(new Table(""test""+tableNameSuffix).addPrimary(""ID"",DataTypes.SERIAL.instance()).addColumn(""testColumn"",DataTypes.CHARACTER_VARYING.instance()).addColumn(""testColumn2"",DataTypes.INTEGER.instance()));TABLES.add(new Table(""test2""+tableNameSuffix).addPrimary(""ID"",DataTypes.SERIAL.instance()).addColumn(""fisk"",DataTypes.INTEGER.instance()).addForeign(""test"",DataTypes.INTEGER.instance(),""test"",""ID""));TABLES.add(new Table(VisitedSitesDAO.TABLE_NAME+tableNameSuffix).addPrimary(VisitedSitesDAO.COLUMN_ID,VisitedSitesDAO.COLUMN_TYPE_ID).addColumn(VisitedSitesDAO.COLUMN_URL,VisitedSitesDAO.COLUMN_TYPE_URL,false,true).addColumn(VisitedSitesDAO.COLUMN_TIME,VisitedSitesDAO.COLUMN_TYPE_TIME,false).addIndex(VisitedSitesDAO.COLUMN_URL));TABLES.add(new Table(""extracted_data""+tableNameSuffix).addPrimary(""id"",DataTypes.SERIAL.instance()).addColumn(""type"",DataTypes.CHARACTER_VARYING.instance()).addColumn(""info"",DataTypes.TEXT.instance()));TABLES.add(new Table(AudioInterfaceDAO.TABLE_NAME+tableNameSuffix).addPrimary(AudioInterfaceDAO.COLUMN_ID,AudioInterfaceDAO.COLUMN_TYPE_ID).addColumn(AudioInterfaceDAO.COLUMN_NAME,AudioInterfaceDAO.COLUMN_TYPE_NAME).addColumn(AudioInterfaceDAO.COLUMN_SPEAKERS,AudioInterfaceDAO.COLUMN_TYPE_SPEAKERS).addColumn(AudioInterfaceDAO.COLUMN_SUBWOOFERS,AudioInterfaceDAO.COLUMN_TYPE_SUBWOOFERS));TABLES.add(new Table(BatteryDAO.TABLE_NAME+tableNameSuffix).addPrimary(BatteryDAO.COLUMN_ID,BatteryDAO.COLUMN_TYPE_ID).addColumn(BatteryDAO.COLUMN_NAME,BatteryDAO.COLUMN_TYPE_NAME).addColumn(BatteryDAO.COLUMN_CAPACITY,BatteryDAO.COLUMN_TYPE_CAPACITY).addColumn(BatteryDAO.COLUMN_LIFESPAN,BatteryDAO.COLUMN_TYPE_LIFESPAN));TABLES.add(new Table(CentralProcessingUnitDAO.TABLE_NAME+tableNameSuffix).addPrimary(CentralProcessingUnitDAO.COLUMN_ID,CentralProcessingUnitDAO.COLUMN_TYPE_ID).addColumn(CentralProcessingUnitDAO.COLUMN_NAME,CentralProcessingUnitDAO.COLUMN_TYPE_NAME).addColumn(CentralProcessingUnitDAO.COLUMN_CORES,CentralProcessingUnitDAO.COLUMN_TYPE_CORES).addColumn(CentralProcessingUnitDAO.COLUMN_MEMORY,CentralProcessingUnitDAO.COLUMN_TYPE_MEMORY).addColumn(CentralProcessingUnitDAO.COLUMN_PRICE,CentralProcessingUnitDAO.COLUMN_TYPE_PRICE).addColumn(CentralProcessingUnitDAO.COLUMN_BENCHMARK,CentralProcessingUnitDAO.COLUMN_TYPE_BENCHMARK).addColumn(CentralProcessingUnitDAO.COLUMN_SPEED,CentralProcessingUnitDAO.COLUMN_TYPE_SPEED));TABLES.add(new Table(DisplayDAO.TABLE_NAME+tableNameSuffix).addPrimary(DisplayDAO.COLUMN_ID,DisplayDAO.COLUMN_TYPE_ID).addColumn(DisplayDAO.COLUMN_NAME,DisplayDAO.COLUMN_TYPE_NAME).addColumn(DisplayDAO.COLUMN_SIZE,DisplayDAO.COLUMN_TYPE_SIZE).addColumn(DisplayDAO.COLUMN_RESOLUTION_WIDTH,DisplayDAO.COLUMN_TYPE_RESOLUTION_WIDTH).addColumn(DisplayDAO.COLUMN_RESOLUTION_HEIGHT,DisplayDAO.COLUMN_TYPE_RESOLUTION_HEIGHT));TABLES.add(new Table(GraphicalProcessingUnitDAO.TABLE_NAME+tableNameSuffix).addPrimary(GraphicalProcessingUnitDAO.COLUMN_ID,GraphicalProcessingUnitDAO.COLUMN_TYPE_ID).addColumn(GraphicalProcessingUnitDAO.COLUMN_NAME,GraphicalProcessingUnitDAO.COLUMN_TYPE_NAME).addColumn(GraphicalProcessingUnitDAO.COLUMN_CORES,GraphicalProcessingUnitDAO.COLUMN_TYPE_CORES).addColumn(GraphicalProcessingUnitDAO.COLUMN_MEMORY,GraphicalProcessingUnitDAO.COLUMN_TYPE_MEMORY).addColumn(GraphicalProcessingUnitDAO.COLUMN_PRICE,GraphicalProcessingUnitDAO.COLUMN_TYPE_PRICE).addColumn(GraphicalProcessingUnitDAO.COLUMN_BENCHMARK,GraphicalProcessingUnitDAO.COLUMN_TYPE_BENCHMARK).addColumn(GraphicalProcessingUnitDAO.COLUMN_SPEED,GraphicalProcessingUnitDAO.COLUMN_TYPE_SPEED));TABLES.add(new Table(NetworkInterfaceDAO.TABLE_NAME+tableNameSuffix).addPrimary(NetworkInterfaceDAO.COLUMN_ID,NetworkInterfaceDAO.COLUMN_TYPE_ID).addColumn(NetworkInterfaceDAO.COLUMN_NAME,NetworkInterfaceDAO.COLUMN_TYPE_NAME).addColumn(NetworkInterfaceDAO.COLUMN_PRICE,NetworkInterfaceDAO.COLUMN_TYPE_PRICE).addColumn(NetworkInterfaceDAO.COLUMN_SPEED,NetworkInterfaceDAO.COLUMN_TYPE_SPEED).addColumn(NetworkInterfaceDAO.COLUMN_TYPE,NetworkInterfaceDAO.COLUMN_TYPE_TYPE));TABLES.add(new Table(RandomAccessMemoryDAO.TABLE_NAME+tableNameSuffix).addPrimary(RandomAccessMemoryDAO.COLUMN_ID,RandomAccessMemoryDAO.COLUMN_TYPE_ID).addColumn(RandomAccessMemoryDAO.COLUMN_NAME,RandomAccessMemoryDAO.COLUMN_TYPE_NAME).addColumn(RandomAccessMemoryDAO.COLUMN_SPEED,RandomAccessMemoryDAO.COLUMN_TYPE_SPEED).addColumn(RandomAccessMemoryDAO.COLUMN_MEMORY,RandomAccessMemoryDAO.COLUMN_TYPE_MEMORY).addColumn(RandomAccessMemoryDAO.COLUMN_TYPE,RandomAccessMemoryDAO.COLUMN_TYPE_TYPE).addColumn(RandomAccessMemoryDAO.COLUMN_LATENCY,RandomAccessMemoryDAO.COLUMN_TYPE_LATENCY).addColumn(RandomAccessMemoryDAO.COLUMN_TECHNOLOGY,RandomAccessMemoryDAO.COLUMN_TYPE_TECHNOLOGY).addColumn(RandomAccessMemoryDAO.COLUMN_READ_SPEED,RandomAccessMemoryDAO.COLUMN_TYPE_READ_SPEED).addColumn(RandomAccessMemoryDAO.COLUMN_WRITE_SPEED,RandomAccessMemoryDAO.COLUMN_TYPE_WRITE_SPEED));TABLES.add(new Table(StorageDAO.TABLE_NAME+tableNameSuffix).addPrimary(StorageDAO.COLUMN_ID,StorageDAO.COLUMN_TYPE_ID).addColumn(StorageDAO.COLUMN_NAME,StorageDAO.COLUMN_TYPE_NAME).addColumn(StorageDAO.COLUMN_SPEED,StorageDAO.COLUMN_TYPE_SPEED).addColumn(StorageDAO.COLUMN_SIZE,StorageDAO.COLUMN_TYPE_SIZE).addColumn(StorageDAO.COLUMN_TECHNOLOGY,StorageDAO.COLUMN_TYPE_TECHNOLOGY));TABLES.add(new Table(ComputerDAO.TABLE_NAME+tableNameSuffix).addPrimary(ComputerDAO.COLUMN_ID,ComputerDAO.COLUMN_TYPE_ID).addColumn(ComputerDAO.COLUMN_PRICE,ComputerDAO.COLUMN_TYPE_PRICE).addColumn(ComputerDAO.COLUMN_NAME,ComputerDAO.COLUMN_TYPE_NAME).addForeign(ComputerDAO.COLUMN_CENTRAL_PROCESSING_UNIT_ID,ComputerDAO.COLUMN_TYPE_CENTRAL_PROCESSING_UNIT_ID,CentralProcessingUnitDAO.TABLE_NAME,CentralProcessingUnitDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_RANDOM_ACCESS_MEMORY_ID,ComputerDAO.COLUMN_TYPE_RANDOM_ACCESS_MEMORY_ID,RandomAccessMemoryDAO.TABLE_NAME,RandomAccessMemoryDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_PRIMARY_STORAGE_ID,ComputerDAO.COLUMN_TYPE_PRIMARY_STORAGE_ID,StorageDAO.TABLE_NAME,StorageDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_SECONDARY_STORAGE_ID,ComputerDAO.COLUMN_TYPE_SECONDARY_STORAGE_ID,StorageDAO.TABLE_NAME,StorageDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_GRAPHICAL_PROCESSING_UNIT_ID,ComputerDAO.COLUMN_TYPE_GRAPHICAL_PROCESSING_UNIT_ID,GraphicalProcessingUnitDAO.TABLE_NAME,GraphicalProcessingUnitDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_PRIMARY_NETWORK_INTERFACE_ID,ComputerDAO.COLUMN_TYPE_PRIMARY_NETWORK_INTERFACE_ID,NetworkInterfaceDAO.TABLE_NAME,NetworkInterfaceDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_SECONDARY_NETWORK_INTERFACE_ID,ComputerDAO.COLUMN_TYPE_SECONDARY_NETWORK_INTERFACE_ID,NetworkInterfaceDAO.TABLE_NAME,NetworkInterfaceDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_DISPLAY_ID,ComputerDAO.COLUMN_TYPE_DISPLAY_ID,DisplayDAO.TABLE_NAME,DisplayDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_AUDIO_INTERFACE_ID,ComputerDAO.COLUMN_TYPE_AUDIO_INTERFACE_ID,AudioInterfaceDAO.TABLE_NAME,AudioInterfaceDAO.COLUMN_ID,true).addForeign(ComputerDAO.COLUMN_BATTERY_ID,ComputerDAO.COLUMN_TYPE_BATTERY_ID,BatteryDAO.TABLE_NAME,BatteryDAO.COLUMN_ID,true));return TABLES;}"
1345	"public double NMF(String Aorig,String ATorig,String Wfinal,String WTfinal,String Hfinal,String HTfinal,int K,int maxiter,boolean forceDelete,boolean trace){checkGiven(true,""Aorig, ATorig"",Aorig,ATorig);checkGiven(false,""Wfinal, WTfinal, Hfinal, HTfinal"",Wfinal,WTfinal,Hfinal,HTfinal);Preconditions.checkArgument(K>0,""# of topics K must be > 0: ""+K);deleteTables(false,Wfinal,WTfinal,Hfinal,HTfinal);String Ttmp1,Ttmp2;String tmpBaseName=Aorig+""_NMF_"";Ttmp1=tmpBaseName+""tmp1"";Ttmp2=tmpBaseName+""tmp2"";deleteTables(forceDelete,Ttmp1,Ttmp2);long N=countRows(Aorig);long M=countRows(ATorig);List<IteratorSetting> itCreateTopicList=new DynamicIteratorSetting().append(KeyRetainOnlyApply.iteratorSetting(1,PartialKey.ROW)).append(new IteratorSetting(1,VersioningIterator.class)).append(RandomTopicApply.iteratorSetting(1,K)).getIteratorSettingList();OneTable(Aorig,Wfinal,WTfinal,null,-1,null,null,null,null,null,itCreateTopicList,null,trace);double newerr=0,olderr;int numiter=0;do {olderr=newerr;nmfStep(K,Wfinal,Aorig,Hfinal,HTfinal,Ttmp1,Ttmp2);nmfStep(K,HTfinal,ATorig,WTfinal,Wfinal,Ttmp1,Ttmp2);newerr=nmfDiffFrobeniusNorm(Aorig,WTfinal,Hfinal,Ttmp1);numiter++;log.debug(""NMF Iteration ""+numiter+"": olderr ""+olderr+"" newerr ""+newerr);} while(Math.abs(newerr-olderr)>0.01&&numiter<maxiter);return Math.abs(newerr-olderr);}"
1346	"public Comparator<ItemStack> getComparator(){ final Config config=UniDict.getConfig();return config.enableSpecificEntrySort?SpecificEntryItemStackComparator.hasComparatorForEntry(name)?SpecificEntryItemStackComparator.getComparatorFor(name):config.enableSpecificKindSort?SpecificKindItemStackComparator.hasComparatorForKind(kind)?SpecificKindItemStackComparator.getComparatorFor(kind):Util.itemStackComparatorByModName:Util.itemStackComparatorByModName:config.enableSpecificKindSort?SpecificKindItemStackComparator.hasComparatorForKind(kind)?SpecificKindItemStackComparator.getComparatorFor(kind):Util.itemStackComparatorByModName:Util.itemStackComparatorByModName;}"
1347	"@Override Number getValue(Object value){if(!(value instanceof Number)){return null;}return Short.valueOf(((Number)value).shortValue());}"
1348	"@Override protected Void call() throws Exception{long startTs=System.currentTimeMillis();Date mouseDate=start;ArrayList<MouseLocTime> locTimeData=new ArrayList<MouseLocTime>();for(int i=0;i<mice.size();++i){for(int j=0;j<mice.get(i).locTimeData.size();++j){locTimeData.add(mice.get(i).locTimeData.get(j));}}Collections.sort(locTimeData);for(int j=0;j<locTimeData.size()&&locTimeData.get(j).timestamp.compareTo(stop)<=0;++j){if(animationCancelled==true){this.cancel(true);}if(isCancelled()){break;} final int finalJ=j;mouseDate=locTimeData.get(j).timestamp;if(mouseDate.compareTo(start)>=0){Platform.runLater(new Runnable(){  @Override public void run(){    SimpleDateFormat formatter=new SimpleDateFormat(""MM/dd/yyyy HH:mm:ss.SSS"");    currentAnimationFrame.setText(formatter.format(locTimeData.get(finalJ).timestamp));    int gridSectorIndex=Integer.parseInt(locTimeData.get(finalJ).unitLabel.substring(4));    GridSector gs=getSectorByGridIndex(gridSectorIndex);    gs.currentTotalDuration+=locTimeData.get(finalJ).eventDuration;    double baseOpacity=gs.finalTotalDuration / maxDuration;    double currentOpacity=((double)gs.currentTotalDuration / (double)gs.finalTotalDuration) * baseOpacity;    String heatMapId=""heatmap"";    Canvas viewerPaneHeatMapLayer=(Canvas)viewerPane.lookup(""#"" + heatMapId);    if (viewerPaneHeatMapLayer == null) {      double width=calculateDimensions(viewerPane).w;      double height=calculateDimensions(viewerPane).h;      data=new Canvas(width,height);      data.setId(heatMapId);      viewerPane.getChildren().add(data);      moveInfoLayersToFront(viewerPane);    }    viewerPaneHeatMapLayer=(Canvas)viewerPane.lookup(""#"" + heatMapId);    GraphicsContext dataCanvasContext=viewerPaneHeatMapLayer.getGraphicsContext2D();    dataCanvasContext.clearRect(gs.x,gs.y,gs.w,gs.h);    dataCanvasContext.setFill(Color.rgb(0,0,255,currentOpacity));    dataCanvasContext.fillRect(gs.x,gs.y,gs.w,gs.h);  }});Thread.sleep((int)speed);}}long endTs=System.currentTimeMillis();elapsedTs=endTs-startTs;return null;}"
1349	"public void onClick(DialogInterface dialog,int whichButton){dialog.dismiss();}"
1350	"private void findPassedParameters(){Set<AbstractVariable> passedParametersG1=extractPassedParameters(pdg1,mappedNodesG1);Set<AbstractVariable> passedParametersG2=extractPassedParameters(pdg2,mappedNodesG2);Set<VariableDeclaration> variableDeclarationsInMethod1=pdg1.getVariableDeclarationsInMethod();Set<VariableDeclaration> variableDeclarationsInMethod2=pdg2.getVariableDeclarationsInMethod();Set<VariableDeclaration> variableDeclarationsAndFieldAccessedInMethod1=pdg1.getVariableDeclarationsAndAccessedFieldsInMethod();Set<VariableDeclaration> variableDeclarationsAndFieldAccessedInMethod2=pdg2.getVariableDeclarationsAndAccessedFieldsInMethod();for(PDGNodeMapping nodeMapping : getMaximumStateWithMinimumDifferences().getSortedNodeMappings()){PDGNode nodeG1=nodeMapping.getNodeG1();PDGNode nodeG2=nodeMapping.getNodeG2();List<AbstractVariable> nonAnonymousDeclaredVariablesG1=new ArrayList<AbstractVariable>();Iterator<AbstractVariable> declaredVariableIteratorG1=nodeG1.getDeclaredVariableIterator();while(declaredVariableIteratorG1.hasNext()){AbstractVariable declaredVariableG1=declaredVariableIteratorG1.next();String key1=declaredVariableG1.getVariableBindingKey();for(VariableDeclaration variableDeclaration : variableDeclarationsInMethod1){IVariableBinding declaredVariableBinding=variableDeclaration.resolveBinding();if(declaredVariableBinding.getKey().equals(key1)){if(!declaredVariableBinding.getDeclaringMethod().getDeclaringClass().isAnonymous()){nonAnonymousDeclaredVariablesG1.add(declaredVariableG1);}}}}List<AbstractVariable> nonAnonymousDeclaredVariablesG2=new ArrayList<AbstractVariable>();Iterator<AbstractVariable> declaredVariableIteratorG2=nodeG2.getDeclaredVariableIterator();while(declaredVariableIteratorG2.hasNext()){AbstractVariable declaredVariableG2=declaredVariableIteratorG2.next();String key2=declaredVariableG2.getVariableBindingKey();for(VariableDeclaration variableDeclaration : variableDeclarationsInMethod2){IVariableBinding declaredVariableBinding=variableDeclaration.resolveBinding();if(declaredVariableBinding.getKey().equals(key2)){if(!declaredVariableBinding.getDeclaringMethod().getDeclaringClass().isAnonymous()){nonAnonymousDeclaredVariablesG2.add(declaredVariableG2);}}}}int min=Math.min(nonAnonymousDeclaredVariablesG1.size(),nonAnonymousDeclaredVariablesG2.size());for(int i=0;i<min;i++){AbstractVariable declaredVariableG1=nonAnonymousDeclaredVariablesG1.get(i);AbstractVariable declaredVariableG2=nonAnonymousDeclaredVariablesG2.get(i);ArrayList<AbstractVariable> declaredVariables=new ArrayList<AbstractVariable>();declaredVariables.add(declaredVariableG1);declaredVariables.add(declaredVariableG2);VariableBindingKeyPair keyPair=new VariableBindingKeyPair(declaredVariableG1.getVariableBindingKey(),declaredVariableG2.getVariableBindingKey());declaredLocalVariablesInMappedNodes.put(keyPair,declaredVariables);}Set<AbstractVariable> dataDependences1=nodeG1.incomingDataDependencesFromNodesDeclaringOrDefiningVariables();Set<AbstractVariable> dataDependences2=nodeG2.incomingDataDependencesFromNodesDeclaringOrDefiningVariables();dataDependences1.retainAll(passedParametersG1);dataDependences2.retainAll(passedParametersG2);List<AbstractVariable> variables1=new ArrayList<AbstractVariable>(dataDependences1);List<AbstractVariable> variables2=new ArrayList<AbstractVariable>(dataDependences2);if(dataDependences1.size()==dataDependences2.size()){List<String> variableNames1=new ArrayList<String>();List<String> variableNames2=new ArrayList<String>();for(int i=0;i<variables1.size();i++){variableNames1.add(variables1.get(i).getVariableName());AbstractVariable variable2=variables2.get(i);String renamedVariableName=findRenamedVariableName(variable2);if(renamedVariableName!=null){variableNames2.add(renamedVariableName);}else {variableNames2.add(variable2.getVariableName());}}if(variableNames1.containsAll(variableNames2)&&variableNames2.containsAll(variableNames1)&&variableNames1.size()>0&&variableNames2.size()>0){List<AbstractVariable> sortedVariables1=new ArrayList<AbstractVariable>();List<AbstractVariable> sortedVariables2=new ArrayList<AbstractVariable>();for(int i=0;i<variables1.size();i++){AbstractVariable variable1=variables1.get(i);IVariableBinding variableBinding1=getVariableBinding(variable1,variableDeclarationsAndFieldAccessedInMethod1);sortedVariables1.add(variable1);for(int j=0;j<variables2.size();j++){AbstractVariable variable2=variables2.get(j);IVariableBinding variableBinding2=getVariableBinding(variable2,variableDeclarationsAndFieldAccessedInMethod2);String renamedVariableName=findRenamedVariableName(variable2);if((variable2.getVariableName().equals(variable1.getVariableName())||variable1.getVariableName().equals(renamedVariableName))&&(variable2.getVariableType().equals(variable1.getVariableType())||ASTNodeMatcher.commonSuperType(variableBinding1.getType(),variableBinding2.getType())!=null)){sortedVariables2.add(variable2);break;}}}if(sortedVariables1.size()==sortedVariables2.size()){variables1=sortedVariables1;variables2=sortedVariables2;}}else {List<AbstractVariable> sortedVariables1=new ArrayList<AbstractVariable>();List<AbstractVariable> sortedVariables2=new ArrayList<AbstractVariable>();sortVariables(variables1,variables2,sortedVariables1,sortedVariables2);if(sortedVariables1.size()==sortedVariables2.size()){variables1=sortedVariables1;variables2=sortedVariables2;}}}else {List<AbstractVariable> sortedVariables1=new ArrayList<AbstractVariable>();List<AbstractVariable> sortedVariables2=new ArrayList<AbstractVariable>();sortVariables(variables1,variables2,sortedVariables1,sortedVariables2);if(sortedVariables1.size()==sortedVariables2.size()){variables1=sortedVariables1;variables2=sortedVariables2;}}for(int i=0;i<variables1.size();i++){AbstractVariable variable1=variables1.get(i);AbstractVariable variable2=variables2.get(i);if(passedParametersG1.contains(variable1)&&passedParametersG2.contains(variable2)){ArrayList<AbstractVariable> variableDeclarations=new ArrayList<AbstractVariable>();variableDeclarations.add(variable1);variableDeclarations.add(variable2);VariableBindingKeyPair keyPair=new VariableBindingKeyPair(variable1.getVariableBindingKey(),variable2.getVariableBindingKey());if(!declaredLocalVariablesInMappedNodes.containsKey(keyPair)&&!commonPassedParametersAlreadyContainOneOfTheKeys(keyPair)){commonPassedParameters.put(keyPair,variableDeclarations);}}}}}"
1351	"@Override public void onClick(View v){if(minutes<60){minutes++;timerTV.setText(createTimerString());updateTimer();}}"
1352	"public View getView(int position,View convertView,ViewGroup parent){view=convertView;if(view==null){LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);view=inflater.inflate(R.layout.list_item_monopoly_spiel,null);}spielEntfernen=(ImageView)view.findViewById(R.id.monopolySpielEntfernenItem);spielEntfernen.setOnClickListener(new View.OnClickListener(){  public void onClick(  View v){    Spiel i=objects.get(position);    databaseHandler.deleteSpiel(i.getSpielDatum());    objects.remove(position);    MonopolySpieleAdapter.super.notifyDataSetChanged();  }});spielLaden=(ImageView)view.findViewById(R.id.monopolySpielLadenItem);spielLaden.setOnClickListener(new View.OnClickListener(){  public void onClick(  View v){    Spiel i=objects.get(position);    Intent intent=new Intent(getContext(),SpielBeitretenActivity.class);    intent.putExtra(""spiel_datum"",i.getSpielDatum());    intent.putExtra(""neues_spiel"",""true"");    getContext().startActivity(intent);  }});Spiel i=objects.get(position);if(i!=null){TextView spielDatum=(TextView)view.findViewById(R.id.monopolySpielDatumDataItem);TextView spielerAnzahl=(TextView)view.findViewById(R.id.monopolySpielSpielerAnzahlDataItem);TextView startkapital=(TextView)view.findViewById(R.id.monopolySpielStartkapitalDataItem);if(spielDatum!=null){spielDatum.setText(i.getSpielDatum());}if(spielerAnzahl!=null){spielerAnzahl.setText(""Spieleranzahl: ""+i.getSpielerAnzahl());}if(startkapital!=null){startkapital.setText(""Startkapital:""+i.getSpielerStartkapital());}}return view;}"
1353	"public void improveWeapon(Hero hero,String[] arguments){int changeFactor=5;int upgradeDamage=10;boolean controlForBrokenWeapon=false;if(arguments.length!=0&&hero.getWeapon()!=null){if(!isEquipped(hero,arguments)){Writer.write(""You are not equipping this weapon."");return ;}if(hero.getWeapon().isBroken()){Writer.write(""This weapon is broken. You can not improve it."");return ;}int level=hero.getWeapon().getWeaponComponent().getLevel()+1;int randomNumber=(int)((Math.random()*100)+1);int luck=randomNumber-(level*4);if(luck<0){luck=0;}if(luck>=0&&luck<15){hero.getWeapon().getWeaponComponent().setDamage(0);controlWriterMessages=true;hero.dropItems(arguments);hero.destroyItems(arguments);controlForBrokenWeapon=true;Writer.write(""You could not succeed to upgrade the weapon and you broke it."");}else {if(luck>=15&&luck<50){int newDamage=hero.getWeapon().getWeaponComponent().getDamage()-changeFactor;hero.getWeapon().getWeaponComponent().setDamage(newDamage);Writer.write(""You could not succeed to upgrade the weapon and you gave damage your weapon."");Writer.write(""Your weapon loss ""+changeFactor+"" damage."");Writer.write(""Your weapon's new damage is: ""+newDamage);}else {if(luck>=50&&luck<85){int newDamage=hero.getWeapon().getWeaponComponent().getDamage()+changeFactor;hero.getWeapon().getWeaponComponent().setDamage(newDamage);Writer.write(""You succeed to upgrade the weapon."");Writer.write(""Your weapon gain ""+changeFactor+"" damage."");Writer.write(""Your weapon's new damage is: ""+newDamage);}else {if(luck>=85&&luck<100){int newDamage=hero.getWeapon().getWeaponComponent().getDamage()+upgradeDamage;hero.getWeapon().getWeaponComponent().setDamage(newDamage);Writer.write(""You succeed to upgrade the weapon like a blacksmith."");Writer.write(""Your weapon gain ""+upgradeDamage+"" damage."");Writer.write(""Your weapon's new damage is: ""+newDamage);}}}}if(!controlForBrokenWeapon){hero.getWeapon().getWeaponComponent().setLevel(level);Writer.write(""Your weapon is level ""+level+"" now."");}}else {Writer.write(""You are not equipping any weapon."");}}"
1354	"public static List<URI> refreshProviderConnections(DbClient dbClient){List<StorageProvider> externalProviders=new ArrayList<>();List<URI> externalProvidersUris=new ArrayList<>();try{driverManager=getDriverManager();Collection<String> externalDeviceProviderTypes=driverManager.getStorageProvidersMap().values();_log.info(""Processing external provider types: {}"",externalDeviceProviderTypes);for(String providerType : externalDeviceProviderTypes){externalProviders.addAll(CustomQueryUtility.getActiveStorageProvidersByInterfaceType(dbClient,providerType));}}catch(Exception e){_log.error(""Failed to refresh connections for external providers."",e);return externalProvidersUris;}for(StorageProvider storageProvider : externalProviders){try{String providerIpAddress=storageProvider.getIPAddress();Integer providerPortNumber=storageProvider.getPortNumber();if(ConnectivityUtil.ping(storageProvider.getIPAddress())&&getExternalDevice().validateStorageProviderConnection(providerIpAddress,providerPortNumber)){storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.name());externalProvidersUris.add(storageProvider.getId());_log.info(""Storage Provider {}/{}:{} is reachable"",storageProvider.getLabel(),providerIpAddress,providerPortNumber);}else {storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.name());_log.error(""Storage Provider {}/{}:{} is not reachable"",storageProvider.getLabel(),providerIpAddress,providerPortNumber);}}catch(Exception e){storageProvider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.name());_log.error(""Storage Provider {}/{}:{} is not reachable"",storageProvider.getLabel(),storageProvider.getIPAddress(),storageProvider.getPortNumber(),e);}finally{dbClient.updateObject(storageProvider);}}return externalProvidersUris;}"
1355	"public int addBlog(Blog blog){Connection con=null;PreparedStatement pstmt=null;try{con=JdbcUtils.getConnection();String sql=""insert into blog (title,text) value(?,?)"";pstmt=con.prepareStatement(sql);pstmt.setString(1,blog.getTitle());pstmt.setString(2,blog.getText());pstmt.executeUpdate();ResultSet rs=pstmt.getGeneratedKeys();rs.next();int key=rs.getInt(1);return key;}catch(SQLException e){e.printStackTrace();}finally{try{if(pstmt!=null){pstmt.close();}if(con!=null){con.close();}}catch(SQLException e){e.printStackTrace();}}return -1;}"
1356	"@Override public CloudNetworks networks(CloudCredential cloudCredential,Region region,Map<String,String> filters) throws Exception{Compute compute=GcpStackUtil.buildCompute(cloudCredential);String projectId=GcpStackUtil.getProjectId(cloudCredential);Map<String,Set<CloudNetwork>> result=new HashMap<>();Set<CloudNetwork> cloudNetworks=new HashSet<>();if(compute!=null){NetworkList networkList=compute.networks().list(projectId).execute();List<Subnetwork> subnetworkList=compute.subnetworks().list(projectId,region.value()).execute().getItems();for(Network network : networkList.getItems()){Map<String,Object> properties=new HashMap<>();properties.put(""gatewayIPv4"",Strings.nullToEmpty(network.getGatewayIPv4()));properties.put(""description"",Strings.nullToEmpty(network.getDescription()));properties.put(""IPv4Range"",Strings.nullToEmpty(network.getIPv4Range()));properties.put(""creationTimestamp"",Strings.nullToEmpty(network.getCreationTimestamp()));Map<String,String> subnets=new HashMap<>();for(Subnetwork subnetwork : subnetworkList){if(network.getSubnetworks()!=null&&network.getSubnetworks().contains(subnetwork.getSelfLink())){subnets.put(subnetwork.getName(),subnetwork.getName());}}CloudNetwork cloudNetwork=new CloudNetwork(network.getName(),subnets,properties);cloudNetworks.add(cloudNetwork);}for(Region actualRegion : gcpPlatformParameters.regions().types()){if(regionMatch(actualRegion,region)){result.put(actualRegion.value(),cloudNetworks);}}}return new CloudNetworks(result);}"
1357	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){if(s==""""||count==0){mProbeData.setWaterPressure(0);}else {mProbeData.setWaterPressure(Double.parseDouble(s.toString()));}}"
1358	"protected int get(ModuleBase module){return 0;}"
1359	"private int displayMainMenu(){screen.displayMessageLine(""\nMain menu:"");screen.displayMessageLine(""1 - View my balance"");screen.displayMessageLine(""2 - Withdraw cash"");screen.displayMessageLine(""3 - Deposit funds"");screen.displayMessageLine(""4 - Exit\n"");screen.displayMessage(""Enter a choice: "");return keypad.getInput();}"
1360	"@Override public void mouseClicked(MouseEvent e){if(getSelectedId()==""""||getSelectedId()==null){InventoryEditUI tempui=new InventoryEditUI(null,that);}else {for(Vehicle v : list){if(v.getID().equals(getSelectedId())){InventoryEditUI inventoryEditUI=new InventoryEditUI(v,that);}}}}"
1361	"public static double pay(Player player,Operation op){double price=UtilityProperties.getPrice(Operation.getString(op,addendum));if(price<=0){return price;}int currencyID=UtilityProperties.getCurrencyID(Operation.getString(op,currencyAddendum));double current=price;int count=0;for(ItemStack i : player.getInventory().getContents()){if(i!=null){current=decreaseItemStack(player,currencyID,current,count);if(current<=0){break;}}count+=1;}return price;}"
1362	"public Chat(String ip,int port){this.ip=ip;this.port=port;init();String input=JOptionPane.showInputDialog(""Enter login:"");client=new Client(""localhost"",1500,input,this);if(!client.start()){return ;}}"
1363	"public Map<String,Integer> populateReportsForOCLCAndLCCN(Integer batchSize){Integer pulMatchingCount=0;Integer culMatchingCount=0;Integer nyplMatchingCount=0;List<Integer> multiMatchBibIdsForOCLCAndLCCN=matchingBibDetailsRepository.getMultiMatchBibIdsForOclcAndLccn();List<List<Integer>> multipleMatchBibIds=Lists.partition(multiMatchBibIdsForOCLCAndLCCN,batchSize);Map<String,Set<Integer>> oclcAndBibIdMap=new HashMap<>();Map<Integer,MatchingBibEntity> bibEntityMap=new HashMap<>();logger.info(RecapConstants.TOTAL_BIB_ID_PARTITION_LIST,multipleMatchBibIds.size());for(List<Integer> bibIds : multipleMatchBibIds){List<MatchingBibEntity> bibEntitiesBasedOnBibIds=matchingBibDetailsRepository.getMultiMatchBibEntitiesBasedOnBibIds(bibIds,RecapConstants.MATCH_POINT_FIELD_OCLC,RecapConstants.MATCH_POINT_FIELD_LCCN);if(CollectionUtils.isNotEmpty(bibEntitiesBasedOnBibIds)){matchingAlgorithmUtil.populateBibIdWithMatchingCriteriaValue(oclcAndBibIdMap,bibEntitiesBasedOnBibIds,RecapConstants.MATCH_POINT_FIELD_OCLC,bibEntityMap);}}Set<String> oclcNumberSet=new HashSet<>();for(Iterator<String> iterator=oclcAndBibIdMap.keySet().iterator();iterator.hasNext();){String oclc=iterator.next();if(!oclcNumberSet.contains(oclc)){StringBuilder oclcNumbers=new StringBuilder();StringBuilder lccns=new StringBuilder();oclcNumberSet.add(oclc);Set<Integer> tempBibIds=new HashSet<>();Set<Integer> bibIds=oclcAndBibIdMap.get(oclc);tempBibIds.addAll(bibIds);for(Integer bibId : bibIds){MatchingBibEntity matchingBibEntity=bibEntityMap.get(bibId);oclcNumbers.append(StringUtils.isNotBlank(oclcNumbers.toString())?"","":"""").append(matchingBibEntity.getOclc());lccns.append(StringUtils.isNotBlank(lccns.toString())?"","":"""").append(matchingBibEntity.getLccn());String[] oclcList=oclcNumbers.toString().split("","");tempBibIds.addAll(matchingAlgorithmUtil.getBibIdsForCriteriaValue(oclcAndBibIdMap,oclcNumberSet,oclc,RecapConstants.MATCH_POINT_FIELD_OCLC,oclcList,bibEntityMap,oclcNumbers));}Map<String,Integer> matchingCountsMap=matchingAlgorithmUtil.populateAndSaveReportEntity(tempBibIds,bibEntityMap,RecapConstants.OCLC_CRITERIA,RecapConstants.LCCN_CRITERIA,oclcNumbers.toString(),lccns.toString());pulMatchingCount=pulMatchingCount+matchingCountsMap.get(RecapConstants.PUL_MATCHING_COUNT);culMatchingCount=culMatchingCount+matchingCountsMap.get(RecapConstants.CUL_MATCHING_COUNT);nyplMatchingCount=nyplMatchingCount+matchingCountsMap.get(RecapConstants.NYPL_MATCHING_COUNT);}}Map countsMap=new HashMap();countsMap.put(RecapConstants.PUL_MATCHING_COUNT,pulMatchingCount);countsMap.put(RecapConstants.CUL_MATCHING_COUNT,culMatchingCount);countsMap.put(RecapConstants.NYPL_MATCHING_COUNT,nyplMatchingCount);return countsMap;}"
1364	"@Override public boolean fits(RoomDefinition room){return true;}"
1365	"@Override public void run(){Headline headline=getHeadline(DAOParam.fromNewsId(newsID)).blockingGet();headline.isFavorite=true;headlineDao.updateHeadline(headline);Log.i(TAG,""run: star begin ""+newsID);Log.i(TAG,""run: star end ""+newsID);}"
1366	"@Override protected void keyTyped(char keyChar,int keyID) throws IOException{if(!this.isTextFocused){super.keyTyped(keyChar,keyID);return ;}if(keyID==Keyboard.KEY_BACK){if(this.slimeling.getName().length()>0){if(this.slimeling.isOwner(this.mc.thePlayer)){this.slimeling.setName(this.slimeling.getName().substring(0,this.slimeling.getName().length()-1));this.timeBackspacePressed=System.currentTimeMillis();}else {this.incorrectUseTimer=10;}}}else {if(keyChar==22){String pastestring=GuiScreen.getClipboardString();if(pastestring==null){pastestring="""";}if(this.isValid(this.slimeling.getName()+pastestring)){if(this.slimeling.isOwner(this.mc.thePlayer)){this.slimeling.setName(this.slimeling.getName()+pastestring);this.slimeling.setName(this.slimeling.getName().substring(0,Math.min(this.slimeling.getName().length(),16)));}else {this.incorrectUseTimer=10;}}}else {if(this.isValid(this.slimeling.getName()+keyChar)){if(this.mc.thePlayer.getGameProfile().getName().equals(this.slimeling.getOwnerUsername())){this.slimeling.setName(this.slimeling.getName()+keyChar);this.slimeling.setName(this.slimeling.getName().substring(0,Math.min(this.slimeling.getName().length(),16)));}else {this.incorrectUseTimer=10;}}}}GalacticraftCore.packetPipeline.sendToServer(new PacketSimpleMars(EnumSimplePacketMars.S_UPDATE_SLIMELING_DATA,GCCoreUtil.getDimensionID(this.slimeling.worldObj),new Object{this.slimeling.getEntityId(),1,this.slimeling.getName()}));super.keyTyped(keyChar,keyID);}"
1367	"public QMUIRoundButton(Context context,AttributeSet attrs,int defStyleAttr){super(context,attrs,defStyleAttr);init(context,attrs);}"
1368	"@Override protected Void doInBackground() throws Exception{while(!isCancelled()){Collection<TableView> tables=SessionHandler.getTables(roomId);if(!tables.isEmpty()){this.publish(tables);}TimeUnit.SECONDS.sleep(3);}return null;}"
1369	"public boolean isConflicted(){return hasConflicts;}"
1370	"@Override public void onClick(DialogInterface dialog,int which){if(MyData.selectAccountIndex>-1){MyData.myData.changeSelectedAccount();}finish();}"
1371	"@SuppressWarnings(""unchecked"") public void startOriginaMessageStorer(Map<String,Object> config){long startTime=System.currentTimeMillis();Map<String,Object> originalConfig=(Map<String,Object>)Ndb.execute(config,""one:original"");OriginalMessageStorer messageStorer=new OriginalMessageStorer(ComponentFactory.createParameter(originalConfig));messageStorer.start();long startupTime=System.currentTimeMillis()-startTime;logger.info(String.format(""Start origina message storer in %d ms"",startupTime));}"
1372	"public boolean containsModifiableAliasOf(Store<?> store,Receiver other){return this.equals(other)||store.canAlias(this,other);}"
1373	"private Bitmap getImageFromInternet(){HttpURLConnection connection=null;this.cache.delete();try{connection=(HttpURLConnection)new URL(this.url).openConnection();connection.connect();InputStream input=connection.getInputStream();return this.decodeBitmap(input,connection.getContentLength());}catch(Exception e){e.printStackTrace();return null;}finally{if(connection!=null){connection.disconnect();}}}"
1374	"public static boolean isCoupleAlreadyThere(ArrayList<Integer[]> currentCouplesFound,Integer[] coupleATester){for(Integer[] couple : currentCouplesFound){if(Arrays.equals(couple,coupleATester)){return true;}}return false;}"
1375	"@Override public String getText(Object element){String result=super.getText(element);if(element instanceof UserGroup){result=((UserGroup)element).getUserGroupName();}return result;}"
1376	"@Override public void set(Boolean val) throws InvalidConfigValueException{disableProbabilisticHTLs=val;}"
1377	"public boolean deleteJoinController(Stream stream,CustomizedRow deltaDeletedRow,String innerJName,String leftJName,String rightJName,JSONObject json,Boolean updateLeft,Boolean updateRight){CustomizedRow theRow=stream.getRevereJoinDeleteOldRow();HashMap<String,String> myMap2=new HashMap<String,String>();HashMap<String,String> myMap1=new HashMap<String,String>();if(theRow!=null){Map<String,String> tempMapImmutable1=theRow.getMap(""list_item1"");Map<String,String> tempMapImmutable2=theRow.getMap(""list_item2"");myMap1.putAll(tempMapImmutable1);myMap2.putAll(tempMapImmutable2);}if(updateLeft&&myMap2.size()==0&&!leftJName.equals(""false"")){DeleteJoinHelper.deleteFromLeftJoinTable(myMap1,leftJName,json,true);return true;}if(updateRight&&myMap1.size()==0&&!rightJName.equals(""false"")){DeleteJoinHelper.deleteFromRightJoinTable(myMap2,rightJName,json,true);return true;}CustomizedRow newDeletedRow=stream.getReverseJoinDeleteNewRow();if(updateLeft&&myMap2.size()>0){DeleteJoinHelper.removeDeleteLeftCrossRight(stream,json,innerJName,myMap2);if(newDeletedRow.getMap(""list_item1"").size()==0){JoinHelper.addAllToRightJoinTable(rightJName,newDeletedRow.getMap(""list_item2""),json);}}if(updateRight&&myMap1.size()>0){DeleteJoinHelper.removeDeleteRightCrossLeft(stream,json,innerJName,myMap1);if(newDeletedRow.getMap(""list_item2"").size()==0){JoinHelper.addAllToLeftJoinTable(leftJName,newDeletedRow.getMap(""list_item1""),json);}}return true;}"
1378	"int validArgs(String[] args){return 0;}"
1379	"public ComputeImageForm(ComputeImageRestRep computeImage){this.id=computeImage.getId().toString();this.name=computeImage.getName();this.imageName=computeImage.getImageName();this.imageType=ComputeImageTypes.getDisplayValue(computeImage.getImageType());this.imageUrl=computeImage.getImageUrl();this.computeImageStatus=computeImage.getComputeImageStatus();this.lastImageStatusMessage=computeImage.getLastImportStatusMessage();}"
1380	"public static Result deleteAdvert(int id,int userId){Model.deleteAdvert(id,userId);return ok(index.render(Model.getAdvertList()));}"
1381	"public EntityManager(Viewport viewport,MainGame game,Background background,int level){this.game=game;this.background=background;this.viewport=viewport;canDispose=false;enemyModifier=(level-1)*3;enemies=new Array<Enemy>();playerProjectiles=new Array<Projectile>();enemyProjectiles=new Array<Projectile>();powerups=new Array<PowerUp>();explosions=new Array<Explosion>();coins=new Array<Coin>();enemyLaserPool=new Pool<EnemyLaser>(){  @Override protected EnemyLaser newObject(){    return new EnemyLaser();  }};laserPool=new Pool<Laser>(){  @Override protected Laser newObject(){    return new Laser();  }};missilePool=new Pool<Missile>(){  @Override protected Missile newObject(){    return new Missile();  }};explosionPool=new Pool<Explosion>(){  @Override protected Explosion newObject(){    return new Explosion();  }};coinPool=new Pool<Coin>(){  @Override protected Coin newObject(){    return new Coin();  }};switch (GameData.prefs.getInteger(""playerType"")){case PLAYER_BLUE :player=new BlueFury(this);break;case PLAYER_RED :player=new RedDragon(this);break;default :player=new BlueFury(this);}player.applyUpgrades();hud=new xyz.charliezhang.starstream.misc.HUD(this);score=0;money=0;startTime=System.nanoTime();deathProcedure=false;currPowerupWait=(int)(Math.random()*2+8);int nextPowerupRand=(int)(Math.random()*PowerUp.PowerUps.values().length);nextPowerup=ATTACK;pause=false;InputMultiplexer mult=new InputMultiplexer();mult.addProcessor(hud.getStage());mult.addProcessor(player.getInputProcessor());Gdx.input.setInputProcessor(mult);}"
1382	"@Override int getId(){return 0;}"
1383	"public void runServer(int port){try{ServerSocket serverSocket=new ServerSocket(port);while(true){Socket socket=serverSocket.accept();ServerThread serverThread=new ServerThread(socket);serverThread.setDaemon(true);serverThread.start();}}catch(IOException e){e.printStackTrace();System.exit(1);}}"
1384	"public void evolve(){ArrayList<Operator> population=generatePopulation(POP_SIZE);int bestFitness=-1;for(int g=0;g<MAX_EPOCHS;g++){int genBestFitness=-1;ArrayList<Operator> newPopulation=new ArrayList<Operator>();while(newPopulation.size()<population.size()){if(rng.nextFloat()<CROSSOVER_PROB){ArrayList<Operator> offspring=crossover(tournamentSelect(population),tournamentSelect(population));for(Operator o : offspring){if(rng.nextFloat()<MUTATION_PROB){o=mutate(o);}}newPopulation.addAll(offspring);}else {newPopulation.add(tournamentSelect(population));}}for(Operator o : newPopulation){int f=computeFitness(o);if(f>bestFitness){bestFitness=f;}if(f>genBestFitness){genBestFitness=f;}}System.out.println(g+""> ""+bestFitness);}}"
1385	"public void visual_template(){int vt_id=0;int[][] image_x_sums=sub_image.clone();int sumOf_image_x_sums=0;for(int i=0;i<image_x_sums.length;i++){for(int j=0;j<image_x_sums[i].length;j++){sumOf_image_x_sums=image_x_sums[i][j];}}for(int i=0;i<image_x_sums.length;i++){for(int j=0;j<image_x_sums[i].length;j++){image_x_sums[i][j]=image_x_sums[i][j]/sumOf_image_x_sums;}}VT[] vt=new VT{};for(int k=0;k<numvts;k++){vt[k].template_decay=vt[k].template_decay-VT_GLOBAL_DECAY;if(vt[k].template_decay<0){vt[k].template_decay=0;}Segments segment=new Segments(image_x_sums[1],vt[k].template[1],(int)VT_SHIFT_MATCH,image_x_sums[2].length);double[] min_vals=segment.compare_segments();}int diff=1;int diff_id=1;if((diff*image_x_sums[2].length)>VT_MATCH_THRESHOLD){numvts++;vt[numvts]=new VT(numvts,image_x_sums,VT_ACTIVE_DECAY,x_val,y_val,th_val,1,0,new Experience[1]);vt_id=numvts;}else {vt_id=diff_id;vt[vt_id].template_decay=VT_ACTIVE_DECAY;if(prev_vt_id!=vt_id){vt[vt_id].first=0;}}int[] new_vt_hist=new int[vt_history.length+1];for(int i=0;i<(new_vt_hist.length+1);i++){if(i==new_vt_hist.length-1){new_vt_hist[i]=vt_id;}}vt_history=new_vt_hist;}"
1386	"@Override public SignatureVisitor visitArrayType(){++array_depth;return this;}"
1387	"@Override public Integer next(){currentValue+=step;return currentValue;}"
1388	"@Override public VerificationError verifyStep(){if(validateInfo()){String name,last_name;name=inRegName.getEditText().getText().toString();name=name.substring(0,1).toUpperCase()+name.substring(1).toLowerCase();last_name=inRegLastName.getEditText().getText().toString();last_name=last_name.substring(0,1).toUpperCase()+last_name.substring(1).toLowerCase();SignupData.setName(name);SignupData.setLastName(last_name);SignupData.setPhone(inRegPhone.getEditText().getText().toString());SignupData.setCity(inRegCity.getEditText().getText().toString());return null;}else {return new VerificationError(getResources().getString(R.string.error_step_2));}}"
1389	"public static boolean isVplexBackendVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString());return TRUE.equals(status);}"
1390	"@Override public void connected(){loadPage(true,null);}"
1391	"public static String createContainer(DockerClient client,CreateContainerCmd createContainerCmd) throws Exception{int attempts=0;Exception cause=null;String response=null;while(attempts<MAX_RETRIES&&response==null){try{response=createContainerCmd.exec().getId();}catch(ProcessingException e){if(e.getCause() instanceof SocketTimeoutException){LOGGER.info(""Read timed out while creating container, checking if container was created...."");InspectContainerResponse inspectResponse=inspectContainer(client.inspectContainerCmd(createContainerCmd.getName()));if(inspectResponse!=null&&inspectResponse.getId()!=null){response=inspectResponse.getId();}else {attempts++;cause=e;}}else {throw e;}}}if(response==null){throw cause;}return response;}"
1392	"public AVOUser getCreator(){return super.getAVUser(""creator"",AVOUser.class);}"
1393	"@Override public Classifier mapClassifier(){return (Classifier)this.create(DataType.class);}"
1394	"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){XMLNode xmlNode=(XMLNode)value;String text=xmlNode.getNodeValue(column);super.getTableCellRendererComponent(table,text,isSelected,hasFocus,row,column);if(!isSelected){Color background=MyColor.LIGHTEST_LIGHT_GRAY;if(xmlNode.isSecondarySearchFound(column)){background=MyColor.LIME;}else {if(xmlNode.isSecondaryParentSearchFound(column)){background=MyColor.LIGHT_LIME;}else {if(xmlNode.isSearchFound(column)){background=MyColor.LIGHT_YELLOW;}else {if(xmlNode.isParentSearchFound(column)){background=MyColor.LIGHTEST_YELLOW;}else {if(xmlNode.isHasMessage(column)){background=Color.ORANGE;}else {if(text==null){background=Color.LIGHT_GRAY;}}}}}}setBackground(background);}setBorder(new EmptyBorder(1,3,1,1));setText(text);if((text!=null)&&(!"""".equals(text))){setToolTipText(text);}return this;}"
1395	"@Override Object result(){return n;}"
1396	"static void deleteRemotelyDeletedEvents(DhisApi dhisApi,String organisationUnitUid,String programUid) throws APIException{Log.d(CLASS_TAG,""getEventsDataFromServer""); final Map<String,String> map=new HashMap<>();map.put(""fields"",""[event]"");map.put(""skipPaging"",""true"");List<Event> localEvents=TrackerController.getEvents(organisationUnitUid,programUid);List<Event> eventsToBeRemoved=new ArrayList<>();if(localEvents.size()==0){return ;}JsonNode response=dhisApi.getEventUids(programUid,organisationUnitUid,map);List<Event> remoteEvents=EventsWrapper.getEvents(response);for(Event localEvent : localEvents){boolean isRemoved=true;for(Event remoteEvent : remoteEvents){if(remoteEvent.getEvent().equals(localEvent.getEvent())){isRemoved=false;break;}}if(isRemoved){eventsToBeRemoved.add(localEvent);}}removeResource(eventsToBeRemoved);}"
1397	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1398	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){if(s==""""||count==0){mImeData.setMethaneReading(0);}else {mImeData.setMethaneReading(Double.parseDouble(s.toString()));}}"
1399	"public void moveBaddy3(){}"
1400	"@Override public void onProgressUpdate(DeckTask.TaskData... values){mCurrentCard=values[0].getCard();}"
1401	"@Override public void onClick(View view){switch (view.getId()){case R.id.back_btn :{activity.showPage(preIndex);activity.onBackPressed();break;}case R.id.submit_btn :{LogControl.debug(TAG,""Submit change user info"");updateUserInfo();break;}case R.id.user_head_icon :{LogControl.debug(TAG,""Change user's icon "");break;}case R.id.update_password_btn :{LogControl.debug(TAG,""Change user's password "");break;}}}"
1402	"@Override public int maxValue(){return 0;}"
1403	"@Override public boolean evaluate(ConnectionContext context,MessageReference messageReference) throws JMSException{return true;}"
1404	"public final void clear(){axisFormatValueX=""%.3f"";axisFormatValueY=""%.3f"";areaFlag=false;title=""Fast Chart"";limits=new ChartLimits(DEFAULT_CHART_LIMITS);selectedPointColor=null;graphicColors=null;graphics=null;descriptions=null;}"
1405	"public static ArrayList<ItemStack> getUpgradeStacks(ItemStack self){ArrayList<ItemStack> upgrades=new ArrayList<>();if(!self.hasTagCompound()||!self.getTagCompound().hasKey(""upgrades"")){return upgrades;}NBTTagCompound unbt=self.getTagCompound().getCompoundTag(""upgrades"");for(int i=0;i<10;i++){if(unbt.hasKey(Integer.toString(i))){ItemStack stack=ItemStack.loadItemStackFromNBT(unbt.getCompoundTag(Integer.toString(i)));if(stack!=null){Item item=stack.getItem();if(item!=null&&item instanceof SteamToolUpgrade){upgrades.add(stack);}}}}return upgrades;}"
1406	"@Override public boolean equals(Object o){return BetterCollection.equals(this,o);}"
1407	"public int findRotateSteps(String ring,String key){return findRotateSteps(ring,key,0,0);}"
1408	"private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException{boolean hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);BufferedWriter writer=null;Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();try{writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);writer.write(getColumnIndexes());writer.newLine();writer.write(getColumnNames());writer.newLine();for(Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()){ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());if(xColumnConfig.getColumnFlag()==ColumnFlag.Meta||(hasCandidates&&!ColumnFlag.Candidate.equals(xColumnConfig.getColumnFlag()))){continue;}CorrelationWritable xCw=corrMap.get(entry.getKey());double[] corrArray=new double[this.columnConfigList.size()];for(int i=0;i<corrArray.length;i++){ColumnConfig yColumnConfig=this.columnConfigList.get(i);if(yColumnConfig.getColumnFlag()==ColumnFlag.Meta){continue;}if(entry.getKey()>i){double[] reverseDoubleArray=finalCorrMap.get(i);if(reverseDoubleArray!=null){corrArray[i]=reverseDoubleArray[entry.getKey()];}else {corrArray[i]=0.0;}continue;}double numerator=xCw.getAdjustCount()[i]*xCw.getXySum()[i]-xCw.getAdjustSumX()[i]*xCw.getAdjustSumY()[i];double denominator1=Math.sqrt(xCw.getAdjustCount()[i]*xCw.getXxSum()[i]-xCw.getAdjustSumX()[i]*xCw.getAdjustSumX()[i]);double denominator2=Math.sqrt(xCw.getAdjustCount()[i]*xCw.getYySum()[i]-xCw.getAdjustSumY()[i]*xCw.getAdjustSumY()[i]);if(Double.compare(denominator1,Double.valueOf(0.0))==0||Double.compare(denominator2,Double.valueOf(0.0))==0){corrArray[i]=0.0;}else {corrArray[i]=numerator/(denominator1*denominator2);}}finalCorrMap.put(entry.getKey(),corrArray);String corrStr=Arrays.toString(corrArray);String adjustCorrStr=corrStr.substring(1,corrStr.length()-1);writer.write(entry.getKey()+"",""+this.columnConfigList.get(entry.getKey()).getColumnName()+"",""+adjustCorrStr);writer.newLine();}}finally{IOUtils.closeQuietly(writer);}}"
1409	"static private void log(int level,String scope,String message){if(!initialized){return ;}LocalDateTime now=LocalDateTime.now();LogEntry entry=new LogEntry(level,now,scope,message);db.addLog(entry);}"
1410	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1411	"public void onClick(ClickEvent clickEvent){if(saveDraftProcess){return ;}validate(true);}"
1412	"private void showTabs(){TextView tv1=(TextView)findViewById(R.id.student_name);TextView tv2=(TextView)findViewById(R.id.dob);TextView tv3=(TextView)findViewById(R.id.mother_name);TextView tv4=(TextView)findViewById(R.id.father_name);TextView tv5=(TextView)findViewById(R.id.email);TextView tv6=(TextView)findViewById(R.id.address);TextView tv7=(TextView)findViewById(R.id.conatact_no);TextView tv8=(TextView)findViewById(R.id.bloodgroup);TextView tv9=(TextView)findViewById(R.id.loginemail);TextView tv10=(TextView)findViewById(R.id.rollno);TextView tv11=(TextView)findViewById(R.id.classes);TextView tv12=(TextView)findViewById(R.id.school_id);tv2.setText(R.string.dob);tv3.setText(R.string.mothers_name);tv4.setText(R.string.father_name);tv5.setText(R.string.email);tv1.setText(R.string.Student_Name);tv6.setText(R.string.address);tv7.setText(R.string.contact_no_parents);tv8.setText(R.string.blood);tv9.setText(R.string.login_email);tv10.setText(R.string.roll_no);tv11.setText(R.string.Grade);tv12.setText(R.string.school_id);TextView tva=(TextView)findViewById(R.id.student_name_data);TextView tvb=(TextView)findViewById(R.id.dob_data);TextView tvc=(TextView)findViewById(R.id.mother_name_data);TextView tvd=(TextView)findViewById(R.id.father_name_data);TextView tve=(TextView)findViewById(R.id.email_data);TextView tvf=(TextView)findViewById(R.id.address_data);TextView tvg=(TextView)findViewById(R.id.contact_no_data);TextView tvh=(TextView)findViewById(R.id.bloodgroup_data);TextView tvi=(TextView)findViewById(R.id.loginemail_data);TextView tvj=(TextView)findViewById(R.id.rollno_data);TextView tvk=(TextView)findViewById(R.id.class_data);TextView tvl=(TextView)findViewById(R.id.school_id_data);DBReceiverForProfile dbrec=new DBReceiverForProfile(getApplicationContext());tvb.setText(dbrec.getData(""DOB""));tvc.setText(dbrec.getData(""Mother Name""));tvd.setText(dbrec.getData(""Father Name""));tve.setText(dbrec.getData(""Student_Email""));tva.setText(dbrec.getData(""Name""));tvf.setText(dbrec.getData(""Address""));tvg.setText(dbrec.getData(""Contact_Num""));tvh.setText(dbrec.getData(""Blood_Group""));tvi.setText(dbrec.getData(""Login_Email""));tvj.setText(dbrec.getData(""Roll_No""));tvk.setText(dbrec.getData(""Class""));tvl.setText(dbrec.getData(""School_Id""));boolean isAvailable=Utility.isNetworkAvailable(getApplicationContext());if(isAvailable){DBReceivedAD ad=new DBReceivedAD(getApplicationContext());String link=ad.getData(""ad"");ImageView img=(ImageView)findViewById(R.id.imageView);Picasso.with(getApplicationContext()).load(link).fit().into(img); final String redirect=ad.getData(""redirect"");img.setOnClickListener(new View.OnClickListener(){  public void onClick(  View v){    Intent intent=new Intent();    intent.setAction(Intent.ACTION_VIEW);    intent.addCategory(Intent.CATEGORY_BROWSABLE);    intent.setData(Uri.parse(redirect));    startActivity(intent);  }});}}"
1413	"@Override public void copyLink(){ClipboardManager manager=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);ClipData data=null;switch (type){case TYPE_Gank :data=ClipData.newPlainText(""text"",url);}manager.setPrimaryClip(data);view.showTextCopied();}"
1414	"public int compareTo(MemoryStone o){if(name!=null){if(o.name==null){return 1;}return name.compareToIgnoreCase(o.name);}return -1;}"
1415	"@Override public int getColor(int index){return values[index];}"
1416	"public MainController(MainFrame mainView,MainModel model,ManageEventsFrame manageEventsDialogBoxView,EventEditionPanel eventEditionPanel){this.mainView=mainView;this.model=model;this.manageEventsDialogBoxView=manageEventsDialogBoxView;this.eventEditionPanel=eventEditionPanel;actualCalendarController=new ActualCalendarController(this,mainView.getActualCalendar(),model.getEventRepository());userPanelController=new UserPanelController(mainView.getUserPanel(),model.getEventRepository());calendarHeaderController=new CalendarHeaderController(this,mainView.getCalendarHeader(),model.getDisplayedWeekModel());menuBarController=new MainMenuBarController(this,mainView.getMainMenuBar());eventEditionPanelController=new EventEditionPanelController(this,eventEditionPanel,model.getEventRepository());importExportController=new ImportExportController(this,model.getEventRepository(),model.getXmlModel(),model.getOutlookModel());manageEventDialogBoxController=new ManageEventFrameController(this,model.getEventRepository(),manageEventsDialogBoxView);manageEventDialogBoxController.addActionListeners();eventEditionPanelController.addActionListeners();menuBarController.addActionListeners();try{actualCalendarController.updateEventTable();}catch(SQLException e){JOptionPane.showMessageDialog(mainView,""Nie udalo sie wczytac wydarzen"");System.err.println(e.getMessage());}}"
1417	"public CollectSurvey getById(int id){return getPublishedSurveyCache().getById(id);}"
1418	"private void send(PrintWriter output,String text,String botId,String convId){try(WireClient client=repo.getWireClient(botId,convId)){client.sendText(text);output.printf(""Bot %s sent some text\n"",client.getId());output.flush();}catch(Exception e){String msg=String.format(""Bot: %s. Error: %s"",botId,e.getMessage());Logger.error(msg);output.println(msg);}}"
1419	"private ActionBase createAction(OntModel spaModel,Resource policy){String policyActionType=null;NodeIterator nodeIter=spaModel.listObjectsOfProperty(policy,RdfOwl.type);while(nodeIter.hasNext()){RDFNode rn=nodeIter.next();if(rn.isResource()&&rn.asResource().getNameSpace().equals(Spa.getURI())){policyActionType=rn.asResource().getLocalName();break;}}if(policyActionType==null){throw new EJBException(SimpleCompiler.class.getName()+"":createAction does not recognize policy action: ""+policy.getLocalName());}ActionBase policyAction=null;switch (policyActionType){case ""Placement"" :policyAction=new ActionBase(policy.getURI(),""java:module/MCE_VMFilterPlacement"");break;case ""Connection"" :policyAction=new ActionBase(policy.getURI(),""java:module/MCE_MPVlanConnection"");break;case ""Stitching"" :policyAction=new ActionBase(policy.getURI(),""java:module/MCE_InterfaceVlanStitching"");break;default :throw new EJBException(SimpleCompiler.class.getName()+"":createAction does not support policy action type: ""+policyActionType);}return policyAction;}"
1420	"public static SubscriptionDTO fromSubscriptionToDTO(SubscribedAPI subscription){SubscriptionDTO subscriptionDTO=new SubscriptionDTO();subscriptionDTO.setSubscriptionId(subscription.getUUID());APIIdentifier apiId=subscription.getApiId();APIIdentifier apiIdEmailReplacedBack=new APIIdentifier(APIUtil.replaceEmailDomainBack(apiId.getProviderName()),apiId.getApiName(),apiId.getVersion());subscriptionDTO.setApiIdentifier(apiIdEmailReplacedBack.toString());subscriptionDTO.setApplicationId(subscription.getApplication().getUUID());subscriptionDTO.setStatus(SubscriptionDTO.StatusEnum.valueOf(subscription.getSubStatus()));subscriptionDTO.setTier(subscription.getTier()==null?null:subscription.getTier().getName());return subscriptionDTO;}"
1421	"@Override public Component decode(DataInputStream stream) throws IOException{Renderable comp=new Renderable(0,null);return comp;}"
1422	"public void run(){}"
1423	"public static Intent createIntent(Context context){Intent in=new Intent();in.setClass(context,RegistrationActivity.class);return in;}"
1424	"public final int hashCode(){return nodeEq.keyEq.hashCode(key)^nodeEq.valueEq.hashCode(val);}"
1425	"@Override public boolean touchUp(int x,int y,int pointer,int button){game.transition(game.getPlayScreen(),0,0);return true;}"
1426	"private TypeCheckingUnit visitDefFunction(boolean overridden,PrecedenceContext precCtx,NameContext nameCtx,List<TeleContext> teleCtx,ExprContext typeCtx,ArrowContext arrowCtx,ExprContext termCtx){boolean isPrefix=nameCtx instanceof NameIdContext;String name;Concrete.Position position;if(isPrefix){name=((NameIdContext)nameCtx).ID().getText();position=tokenPosition(((NameIdContext)nameCtx).ID().getSymbol());}else {name=((NameBinOpContext)nameCtx).BIN_OP().getText();position=tokenPosition(((NameBinOpContext)nameCtx).BIN_OP().getSymbol());}List<Concrete.Argument> arguments=new ArrayList<>();for(TeleContext tele : teleCtx){List<Concrete.Argument> args=visitLamTele(tele);if(args==null){return null;}if(overridden||args.get(0) instanceof Concrete.TelescopeArgument){arguments.add(args.get(0));}else {myModuleLoader.getErrors().add(new ParserError(myModule,tokenPosition(tele.getStart()),""Expected a typed variable""));return null;}}Concrete.Expression type=typeCtx==null?null:visitExpr(typeCtx);Definition.Arrow arrow=arrowCtx instanceof ArrowLeftContext?Abstract.Definition.Arrow.LEFT:arrowCtx instanceof ArrowRightContext?Abstract.Definition.Arrow.RIGHT:null;Abstract.Definition.Precedence precedence=precCtx==null?null:visitPrecedence(precCtx);Abstract.Definition.Fixity fixity=isPrefix?Definition.Fixity.PREFIX:Definition.Fixity.INFIX;Concrete.FunctionDefinition def=new Concrete.FunctionDefinition(position,name,precedence,fixity,arguments,type,arrow,null,overridden);Definition defaultDef=overridden?new OverriddenDefinition(def.getName(),myParent,def.getPrecedence(),def.getFixity(),def.getArrow()):new FunctionDefinition(def.getName(),myParent,def.getPrecedence(),def.getFixity(),def.getArrow());Definition typedDef=getDefinition(def.getName(),def.getPosition(),defaultDef);if(typedDef==null){return null;}if(termCtx!=null){def.setTerm(visitExpr(termCtx));}return new ModuleLoader.TypeCheckingUnit(def,typedDef);}"
1427	"@Override public boolean onTouch(View v,MotionEvent event){if(!iCanUndo){return false;}if(event.getAction()==MotionEvent.ACTION_DOWN){undoBtn.setImageResource(R.drawable.bt_undo_down_128);}else {if(event.getAction()==MotionEvent.ACTION_UP){undoBtn.setImageResource(R.drawable.bt_undo_128);}}return false;}"
1428	"public static void main(String[] args) throws Exception{long start=System.currentTimeMillis();StanceDetectionDataReader datasetReader=new StanceDetectionDataReader(USE_TRAINING_SET,USE_TEST_SET);Map<Integer,String> trainingIdBodyMap=datasetReader.getTrainIdBodyMap();List<List<String>> trainingStances=datasetReader.getTrainStances();Map<Integer,String> testIdBodyMap=datasetReader.getTestIdBodyMap();List<List<String>> testStances=datasetReader.getTestStances();MainClassifier classifier=new MainClassifier(trainingIdBodyMap,trainingStances,testIdBodyMap,testStances,new LibSVM());classifier.setUseParagraphVectorsSimilarity(true);classifier.train(true,""libsvm_ParagraphVectorsSimilarity"");classifier.evaluateOnTestset();classifier.saveInstancesToArff(""ParagraphVectorsSimilarity_features_""+getCurrentTimeStamp());System.out.println(System.currentTimeMillis()-start);}"
1429	"public boolean canGrantPerm(long permId,String entity){return canGrantPerm(permId,entity,false);}"
1430	"@Override public void actionPerformed(ActionEvent e){if(videoFeedBox.isSelected()){videoFeedBox.setSelected(false);videoOn=false;}objectDetect=true;}"
1431	"@Override public boolean hasLow(){return true;}"
1432	"boolean parseFunctionLiteralExpression(){Marker m=enter_section_(builder);if(currentIsOneOf(tok(""function""),tok(""delegate""))){advance();if(!currentIsOneOf(tok(""(""),tok(""in""),tok(""body""),tok(""out""),tok(""{""),tok(""=>""))){if(!parseNodeQ(""node.returnType"",""Type"")){cleanup(m);return false;}}}if(startsWith(tok(""identifier""),tok(""=>""))){advance();advance();if(!parseNodeQ(""node.assignExpression"",""AssignExpression"")){cleanup(m);return false;}exit_section_(builder,m,FUNCTION_LITERAL,true);return true;}else {if(currentIs(tok(""(""))){if(!parseNodeQ(""node.parameters"",""Parameters"")){cleanup(m);return false;}while(currentIsMemberFunctionAttribute()){if(!parseMemberFunctionAttribute()){break;}}}}if(currentIs(tok(""=>""))){advance();if(!parseNodeQ(""node.assignExpression"",""AssignExpression"")){cleanup(m);return false;}}else {if(!parseNodeQ(""node.functionBody"",""FunctionBody"")){cleanup(m);return false;}}exit_section_(builder,m,FUNCTION_LITERAL,true);return true;}"
1433	"private boolean isConnected(){ConnectivityManager cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);NetworkInfo ni=cm.getActiveNetworkInfo();return ni!=null&&ni.isConnected();}"
1434	"@Override public boolean isFlexoXMLStorageResource(){return true;}"
1435	"@Override public OperationResult uploadFile(LocalFile file,String driveUUID,String dirUUID){String path=""/drives/""+driveUUID+""/dirs/""+dirUUID+""/entries"";HttpRequest httpRequest=httpRequestFactory.createHttpPostFileRequest(path,"""");if(!wrapper.checkUrl(httpRequest.getUrl())){return new OperationMalformedUrlException();}Log.i(TAG,""uploadFile: start upload: ""+httpRequest.getUrl());HttpResponse httpResponse;try{httpResponse=iHttpFileUtil.uploadFile(httpRequest,file);if(httpResponse!=null&&httpResponse.getResponseCode()==200){return new OperationSuccess();}else {return new OperationJSONException();}}catch(MalformedURLException e){return new OperationMalformedUrlException();}catch(SocketTimeoutException ex){return new OperationSocketTimeoutException();}catch(IOException e){e.printStackTrace();return new OperationIOException();}}"
1436	"@Override public boolean isEquivalent(Object o){if(o==null||getClass()!=o.getClass()){return false;}Record record=(Record)o;if(record.getWords().size()!=this.getWords().size()){return false;}if(!getLanguages(record.getWords()).equals(getLanguages(this.getWords()))){return false;}if(EquivalenceStrategy.ALL.equals(equivalenceStrategy)){return this.getWords().equals(record.getWords());}else {if(EquivalenceStrategy.ANY.equals(equivalenceStrategy)){for(Language language : getLanguages(record.getWords())){if(!getByLanguage(language,record.getWords()).equals(getByLanguage(language,this.getWords()))){return false;}}return true;}else {return false;}}}"
1437	"@Override public String replace(Character self,String first,String second,String third){if(self!=null){return self.nameOrPossessivePronoun();}return """";}"
1438	"@Override public boolean isConditionsMet(GameCharacter target){return StrengthLevel.getStrengthLevelFromValue(target.getAttributeValue(Attribute.STRENGTH))==StrengthLevel.ZERO_WEAK;}"
1439	"@Override protected void onCreate(Bundle savedInstanceState){Log.d(""INFO"",""login activity"");super.onCreate(savedInstanceState);setContentView(R.layout.activity_login);Button b=(Button)findViewById(R.id.button8); final EditText e=(EditText)findViewById(R.id.editText8); final EditText e2=(EditText)findViewById(R.id.editText9); final TextView t=(TextView)findViewById(R.id.textView6);InterestHub hb=(InterestHub)getApplication();hb.getSessionController();b.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    if (e.getText().toString().equals(""baris"")) {      if (e2.getText().toString().equals(""1234"")) {        Intent intent=new Intent(view.getContext(),UserActivity.class);        startActivity(intent);      }    }  }});t.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Intent intent=new Intent(view.getContext(),SignUpActivity.class);    startActivity(intent);  }});}"
1440	"public Integer aggregate(){return readOps;}"
1441	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);getWindow().requestFeature(Window.FEATURE_NO_TITLE);getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);setContentView(R.layout.activity_create_user_task);setResult(MainActivity.USER_TASK_WAS_NOT_CREATED);initialize();}"
1442	"public ArrayList<ArrayList<TestcaseVO>> readExcel(String filePath) throws IOException{ArrayList<ArrayList<TestcaseVO>> caselists=new ArrayList<ArrayList<TestcaseVO>>();XSSFWorkbook workbook=null;workbook=getWorkbook(filePath);if(workbook!=null){for(int sheet_index=0;sheet_index<workbook.getNumberOfSheets();sheet_index++){if(!workbook.isSheetHidden(sheet_index)){ArrayList<TestcaseVO> caselist=new ArrayList<TestcaseVO>();XSSFSheet xssfsheet=null;xssfsheet=workbook.getSheetAt(sheet_index);XSSFRow firstrow=xssfsheet.getRow(0);XSSFCell infocell=null;int colSize=firstrow.getPhysicalNumberOfCells();int[] voOption=new int[colSize];for(int i=0;i<colSize;i++){infocell=firstrow.getCell(i);for(int j=0;j<TESTDATASET.length;j++){if(infocell.getStringCellValue().contains(TESTDATASET[j])){voOption[i]=j;break;}}}XSSFSheet clzhidden=workbook.getSheet(""ClassMethodhidden"");if(clzhidden!=null){XSSFRow clzNames=clzhidden.getRow(0);Iterator<Cell> it=clzNames.cellIterator();Cell cell=null;while(it.hasNext()){cell=it.next();String fullString=formatter.formatCellValue(cell);String key=fullString.substring(fullString.lastIndexOf(""."")+1,fullString.length());classFullNames.put(key,fullString);}}for(int i=1;i<xssfsheet.getPhysicalNumberOfRows();i++){XSSFRow currentRow=xssfsheet.getRow(i);TestcaseVO vo=new TestcaseVO();vo.setSuiteNumber(caselists.size());if(!"""".equals(currentRow.getCell(0).getStringCellValue())){for(int j=0;j<colSize;j++){XSSFCell currentCell=currentRow.getCell(j);if(currentCell!=null){setVOvalue(vo,voOption[j],workbook,currentCell);}}}caselist.add(vo);}caselists.add(caselist);}}workbook.close();}if(inputstream!=null){inputstream.close();}return caselists;}"
1443	"@Override public void run(){killHandlerCalled=false;if(doneCounting()||onlyPausedStates()){killService();}}"
1444	"@Override public void onClick(View view,int position){FireBugEquipment fireBugEquipment=DataManager.getInstance().getEquipmentByID(assetList.get(position).getEquipmentID());if(!fireBugEquipment.isRouteUnitInspected()){RouteAssetInspectionActivity.routeAsset=null;RouteAssetInspectionActivity.routeAsset=assetList.get(position);Intent in=new Intent(this,RouteAssetInspectionActivity.class);in.putExtra(""compName"",tvCompanyName.getText().toString());in.putExtra(""tag"",""""+equipmentList.get(position).getCode());in.putExtra(""loc"",tvLocName.getText().toString());in.putExtra(""routeName"",tvRouteName.getText().toString());in.putExtra(""deviceTypeID"",assetList.get(position).getDeviceTypeID());in.putExtra(""deviceType"",equipmentList.get(position).getModel().getCode());in.putExtra(""cusID"",cusID);in.putExtra(""equipmentID"",equipmentList.get(position).getID());in.putExtra(""desp"",equipmentList.get(position).getManufacturer().getCode());in.putExtra(""RouteID"",assetList.get(position).getRouteID());in.putExtra(""AssetCount"",tvAssetCount.getText().toString());in.putExtra(""LocCount"",tvLocCount.getText().toString());startActivity(in);}else {Toast.makeText(getApplicationContext(),""This Asset is Already Inspected"",Toast.LENGTH_LONG).show();}}"
1445	"public static void main(String[] args){System.err.println(""????"");Scanner scanner=new Scanner(System.in,""UTF-8"");int times=scanner.nextInt();SimulatorCUIFrontend simulatorCUIFrontend=new SimulatorCUIFrontend();simulatorCUIFrontend.readInfo();{Simulator simulatorInfo=simulatorCUIFrontend.getSimulator();System.out.print(""\""""+simulatorInfo+""\"","");System.out.print(""\""""+simulatorInfo.getPlacer()+""\"","");System.out.print(""\""""+simulatorInfo.getTactics()+""\"","");System.out.print(""times:""+times);}for(int i=0;i<times;i++){Simulator simulator=simulatorCUIFrontend.getSimulator();simulator.runThrough();int numOfFoundVictims=simulator.getVictims().foundPopulation();System.out.print("",""+numOfFoundVictims);}}"
1446	"public static double getBalance(String playerName){try{if(playerName==null){return 0;}else {if(economyMethod!=null&&economyMethod.hasAccount(playerName)){return economyMethod.getAccount(playerName).balance();}}}catch(Exception e){if(!_pastBalanceErr){BetterShopLogger.Severe(""Error looking up player balance \n""+""(this error will only show once)"",e,false);_pastBalanceErr=true;}}return 0;}"
1447	"public Response doSocial(Key<User> to,boolean on) throws RNAException{if(user==null){log.warning(""attempt to follow with null user"");return Response.ILLEGAL_OPERATION;}Key<User> from=user.getKey();if(from.equals(to)){throw new RNAException(""can't follow self"");}return doSocial(from,to,editions.getEdition(Editions.CURRENT).getKey(),on);}"
1448	"private void showDoublebookingDialog(String des){ final DoubleBookingDialog dialog=new DoubleBookingDialog(this,des,R.string.edit_event_dialog_double_booking);dialog.setOnCancelClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    dialog.dismiss();  }});dialog.setOnAllowClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    mEventParameter.isAllowDoubleBooking=true;    if (_event == null) {      saveEvent();    } else {      editEvent();    }    dialog.dismiss();  }}); final Handler handler=new Handler();handler.postDelayed(new Runnable(){  @Override public void run(){    dismissProgressDialog();    dialog.show();  }},500);}"
1449	"@Override public void onClick(View v){String[] items={getResources().getString(R.string.open_in_app_dialog),getResources().getString(R.string.open_in_browser_dialog)};LosungOpenDialog dialog=new LosungOpenDialog(context);dialog.show(items,losung,true);}"
1450	"@RequestMapping(value=""/update"",method=RequestMethod.POST) public String updateRegistration(WorkflowContainer workflowContainer,MarriageRegistration marriageRegistration,Model model,HttpServletRequest request,BindingResult errors) throws IOException{String workFlowAction="""";if(request.getParameter(""workFlowAction"")!=null){workFlowAction=request.getParameter(""workFlowAction"");}validateApplicationDate(marriageRegistration,errors,request);marriageFormValidator.validate(marriageRegistration,errors,""registration"");if(errors.hasErrors()){model.addAttribute(MARRIAGE_REGISTRATION,marriageRegistration);return MRG_REGISTRATION_EDIT;}String message=StringUtils.EMPTY;String approverName=StringUtils.EMPTY;String nextDesignation=StringUtils.EMPTY;if(workFlowAction!=null&&!workFlowAction.isEmpty()){workflowContainer.setWorkFlowAction(workFlowAction); final Assignment wfInitiator=assignmentService.getPrimaryAssignmentForUser(marriageRegistration.getCreatedBy().getId());approverName=wfInitiator.getEmployee().getName();nextDesignation=wfInitiator.getDesignation().getName();workflowContainer.setApproverComments(request.getParameter(""approvalComent""));if(workFlowAction.equalsIgnoreCase(MarriageConstants.WFLOW_ACTION_STEP_REJECT)){marriageRegistrationService.rejectRegistration(marriageRegistration,workflowContainer);message=messageSource.getMessage(""msg.rejected.registration"",new String{marriageRegistration.getApplicationNo(),approverName.concat(""~"").concat(nextDesignation)},null);}else {if(workFlowAction.equalsIgnoreCase(MarriageConstants.WFLOW_ACTION_STEP_CANCEL)){marriageRegistrationService.rejectRegistration(marriageRegistration,workflowContainer);message=messageSource.getMessage(""msg.cancelled.registration"",new String{marriageRegistration.getApplicationNo(),null},null);}else {if(workFlowAction.equalsIgnoreCase(MarriageConstants.WFLOW_ACTION_STEP_APPROVE)){marriageRegistrationService.approveRegistration(marriageRegistration,workflowContainer);message=messageSource.getMessage(""msg.approved.registration"",new String{marriageRegistration.getRegistrationNo(),approverName.concat(""~"").concat(nextDesignation)},null);}else {if(workFlowAction.equalsIgnoreCase(MarriageConstants.WFLOW_ACTION_STEP_PRINTCERTIFICATE)){marriageRegistrationService.printCertificate(marriageRegistration,workflowContainer,request);message=messageSource.getMessage(""msg.printcertificate.registration"",null,null);}else {approverName=request.getParameter(""approverName"");nextDesignation=request.getParameter(""nextDesignation"");workflowContainer.setApproverPositionId(Long.valueOf(request.getParameter(""approvalPosition"")));marriageRegistrationService.forwardRegistration(marriageRegistration,workflowContainer);message=messageSource.getMessage(""msg.forward.registration"",new String{approverName.concat(""~"").concat(nextDesignation),marriageRegistration.getApplicationNo()},null);}}}}}if(workFlowAction!=null&&!workFlowAction.isEmpty()&&workFlowAction.equalsIgnoreCase(MarriageConstants.WFLOW_ACTION_STEP_PRINTCERTIFICATE)){return ""redirect:/certificate/registration?id=""+marriageRegistration.getId();}model.addAttribute(""message"",message);return MRG_REGISTRATION_SUCCESS;}"
1451	"public int hashCode(){return 0;}"
1452	"@Override public boolean onKey(DialogInterface dialog,int keyCode,KeyEvent event){if(keyCode==KeyEvent.KEYCODE_BACK){return true;}return true;}"
1453	"public void onClick(DialogInterface dialog,int which){}"
1454	"public boolean isWorkPending(){return !loaded||!seriesAndDataLabelsRendered;}"
1455	"@SuppressWarnings(""unchecked"") public Clusters(int k,DatasetInfo dataset,Instanciation[] instanciations){this.k=k;Random r=new Random();this.dataset=dataset;nbVars=instanciations[0].values.length;int nbInstances=instanciations.length;centres=new Instanciation[k];clusters=(List<Instanciation>[])new List[k];clustersTmp=(List<Instanciation>[])new List[k];for(int i=0;i<k;i++){clusters[i]=new ArrayList<Instanciation>();clustersTmp[i]=new ArrayList<Instanciation>();}Instanciation[] bestCentres=new Instanciation[k];double tiniestClustersDistance=Double.MAX_VALUE;for(int j=0;j<500;j++){if(k==1){j=1000;}for(int i=0;i<k;i++){centres[i]=instanciations[r.nextInt(nbInstances)];}boolean change;do {change=updateClusters();if(change){updateCentres();}} while(change);if(!isThereEmptyCluster()){double sum=sumDistance();if(sum<tiniestClustersDistance){tiniestClustersDistance=sum;for(int i=0;i<k;i++){bestCentres[i]=centres[i].clone();}}}}if(bestCentres[0]!=null){for(int i=0;i<k;i++){centres[i]=bestCentres[i];}updateClusters();}{for(int i=0;i<k;i++){System.out.println(""Cluster ""+i+"" : ""+clusters[i].size());}}System.out.println(""Clusters appris"");}"
1456	"@Override public int length(){return this.data.length();}"
1457	"protected String handleSearch(String name){Connection c=null;try{UserDAOMySQLImpl dao=new UserDAOMySQLImpl();c=createConnection();dao.setConnection(c);SearchService service=new SearchServiceImpl(dao);SearchViewHelper helper=new SearchViewHelper();List<User> list=service.search(name);String html=helper.generateSearchResults(name,list);return html;}finally{try{c.close();}catch(SQLException e){throw new IllegalStateException(e);}}}"
1458	"public void fullScreen(String renderer,int display){if(insideSettings(""fullScreen"",renderer,display)){fullScreen=true;this.renderer=renderer;this.display=display;}}"
1459	"public DefaultConfiguration(){this.types=new HashSet<String>();this.types.add(LM_TARGET);this.types.add(LM_CONTEXT);}"
1460	"public ResearchResult getPatientAttribute(String attributeName,ResearchFilterItem filters){String startDateString=filters.getStartDate();String endDateString=filters.getEndDate();Integer medicationID=filters.getMedicationId();ResearchResult resultObj=new ResearchResult();Map<Integer,Float> resultItems=new HashMap<>();Map<Float,String> resultMap=new HashMap<>();Date startDateObj;Date endDateObj;SimpleDateFormat sqlFormat=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");try{String startParseDate=startDateString+"" 00:00:00"";startDateObj=sqlFormat.parse(startParseDate);String parseEndDate=endDateString+"" 23:59:59"";endDateObj=sqlFormat.parse(parseEndDate);}catch(ParseException e){startDateObj=new Date();endDateObj=new Date();}Query<PatientEncounter> q=QueryProvider.getPatientEncounterQuery();if(medicationID>0){Query<PatientPrescription> pQ=QueryProvider.getPatientPrescriptionQuery();pQ.fetch(""patientEncounter"").where().eq(""medication.id"",medicationID);List<? extends IPatientPrescription> patientPrescriptions=prescriptionRepository.find(pQ);List<Integer> scriptEncounterIds=new ArrayList<>();int i=0;for(IPatientPrescription script : patientPrescriptions){scriptEncounterIds.add(script.getPatientEncounter().getId());}q.where().in(""id"",scriptEncounterIds);}q.fetch(""patient"").where().gt(""dateOfTriageVisit"",sqlFormat.format(startDateObj)).lt(""dateOfTriageVisit"",sqlFormat.format(endDateObj)).orderBy(""id"").findList();List<? extends IPatientEncounter> encounters=patientEncounterRepository.find(q);String unitOfMeasurement="""";switch (attributeName){case ""age"" :unitOfMeasurement=""years"";for(IPatientEncounter encounter : encounters){IPatient patient=encounter.getPatient();Float age=(float)Math.floor(dateUtils.getAgeFloat(patient.getAge()));if(age>=filters.getRangeStart()&&age<=filters.getRangeEnd()){resultItems.put(encounter.getId(),age);}}break;case ""gender"" :resultMap.put(0.0,""Male"");resultMap.put(1.0,""Female"");for(IPatientEncounter encounter : encounters){IPatient patient=encounter.getPatient();float gender=-1;if(patient.getSex().matches(""(?i:Male)"")){gender=0;}else {if(patient.getSex().matches(""(?i:Female)"")){gender=1;}}resultItems.put(encounter.getId(),gender);}break;case ""pregnancyStatus"" :for(IPatientEncounter encounter : encounters){resultMap.put(0.0,""No"");resultMap.put(1.0,""Yes"");Integer wksPregnant=encounter.getWeeksPregnant();if(wksPregnant==null){wksPregnant=0;}float pregnancyStatus=0;if(wksPregnant>0){pregnancyStatus=1;}resultItems.put(encounter.getId(),pregnancyStatus);}break;case ""pregnancyTime"" :unitOfMeasurement=""weeks"";for(IPatientEncounter encounter : encounters){Integer weeksPregnant=encounter.getWeeksPregnant();if(weeksPregnant==null){weeksPregnant=0;}if(weeksPregnant>=filters.getRangeStart()&&weeksPregnant<=filters.getRangeEnd()){resultItems.put(encounter.getId(),(float)weeksPregnant);}}break;}resultObj.setDataType(attributeName);resultObj.setUnitOfMeasurement(unitOfMeasurement);resultObj.setDataset(resultItems);resultObj.setValueMap(resultMap);return resultObj;}"
1461	"@Override public Owner getOwner(){return this.helper.getOwner(this.entity);}"
1462	"public void handleBinaryTree(AnnotatedTypeMirror atm,BinaryTree binaryTree){if(treeToVariable.containsKey(binaryTree)){VariableSlot variable=treeToVariable.get(binaryTree);atm.replaceAnnotation(slotManager.getAnnotation(variable));;}else {AnnotatedTypeMirror a=inferenceTypeFactory.getAnnotatedType(binaryTree.getLeftOperand());AnnotatedTypeMirror b=inferenceTypeFactory.getAnnotatedType(binaryTree.getRightOperand());Set<? extends AnnotationMirror> lubs=inferenceTypeFactory.getQualifierHierarchy().leastUpperBounds(a.getEffectiveAnnotations(),b.getEffectiveAnnotations());atm.clearAnnotations();atm.addAnnotations(lubs);if(slotManager.getVariableSlot(atm) instanceof VariableSlot){treeToVariable.put(binaryTree,(VariableSlot)slotManager.getVariableSlot(atm));}else {}}}"
1463	"public void addVerifyListener(VerifyListener listener){checkWidget();this.text.addVerifyListener(listener);}"
1464	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){contentView=inflater.inflate(R.layout.fragment_profile_landing,container,false);LinearLayout llSetting=(LinearLayout)contentView.findViewById(R.id.ll_setting);llSetting.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    parentFragment.goToProfileSettingPage();  }});layoutList=(LinearLayout)contentView.findViewById(R.id.ll_follower);layoutFollowing=(RelativeLayout)contentView.findViewById(R.id.rl_following);tvFollow=(TextView)contentView.findViewById(R.id.tv_follow);if(parentFragment.isMyProfile){selectedUser=User.currentUser();layoutList.setVisibility(View.VISIBLE);layoutFollowing.setVisibility(View.GONE);}else {selectedUser=parentFragment.user;llSetting.setVisibility(View.GONE);layoutList.setVisibility(View.GONE);layoutFollowing.setVisibility(View.VISIBLE);}loadOtherUserProfile();MyCircularImageView imageView=(MyCircularImageView)contentView.findViewById(R.id.iv_avatar);TextView textView=(TextView)contentView.findViewById(R.id.tv_name);Glide.with(mActivity).load(selectedUser.photoURL).into(imageView);textView.setText(selectedUser.getFullName());ivMedal=(ImageView)contentView.findViewById(R.id.iv_medal);switch (selectedUser.dribble_medal){case 0 :break;case 1 :ivMedal.setImageResource(R.drawable.profile_medal_bronze);break;case 2 :ivMedal.setImageResource(R.drawable.profile_medal_silver);case 3 :ivMedal.setImageResource(R.drawable.profile_medal_gold);break;}contentView.findViewById(R.id.btn_try).setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    mActivity.switchFragment(1);  }});tvFollow.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    followUser(selectedUser);  }});tvOverallRanking=(TextView)contentView.findViewById(R.id.tv_overall);tvTricksCompletion=(TextView)contentView.findViewById(R.id.tv_complete);tvFollower=(TextView)contentView.findViewById(R.id.tv_follower);tvVideoCount=(TextView)contentView.findViewById(R.id.tv_video);tvDribbleScore=(TextView)contentView.findViewById(R.id.tv_score);setSocialInfo();contentView.findViewById(R.id.ll_follower).setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    parentFragment.goToFollowerPage(selectedUser);  }});mRecyclerView=(RecyclerView)contentView.findViewById(R.id.recycler_view);mRecyclerView.setLayoutManager(new GridLayoutManager(mActivity,3));mRecyclerViewAdapter=new RecyclerViewAdapter();mRecyclerView.setAdapter(mRecyclerViewAdapter);mRecyclerView.addItemDecoration(new GridSpacingItemDecoration(3,CommonUtil.convertDpToPixels(10.0),true));mRecyclerViewAdapter.setOnLoadMoreListener(new OnLoadMoreListener(){  @Override public void onLoadMore(){    loadMore();  }});return contentView;}"
1465	"public ExtClock(int hours,int minutes,int seconds,String timezone){super();timeZone=timezone;}"
1466	"private static PendingIntent createPendingIntent(Context context){Intent intent=new Intent(context,MovieListActivity.class);return PendingIntent.getActivity(context,MovieDBKeyEntry.NotificationKey.GETTING_DATA_NOTIFICATION,intent,PendingIntent.FLAG_UPDATE_CURRENT);}"
1467	"public static void getWorkflow(URI workflowId){CustomServicesWorkflowRestRep customServicesWorkflowRestRep=getCatalogClient().customServicesPrimitives().getWorkflow(workflowId);renderJSON(customServicesWorkflowRestRep);}"
1468	"private void processUserFirstChoice(String input){switch (input.toLowerCase()){case ""a"" :giveHint();break;case ""b"" :discardCard();break;case ""c"" :playCard();break;}}"
1469	"private void CalculateInterest(){if(principalAmount.getText().toString().isEmpty()||interestRate.getText().toString().isEmpty()||termInYears.getText().toString().isEmpty()){reset();printError.setText(""Enter all Value"");}else {DecimalFormat df=new DecimalFormat(""0.00"");int amount=Integer.parseInt(principalAmount.getText().toString());Float interest=Float.parseFloat(interestRate.getText().toString());int loanTerm=Integer.parseInt(termInYears.getText().toString());Float DueInterest=amount*loanTerm*interest/100;Float totalPayment=amount+DueInterest;resultSimpleInterest.setText(df.format(DueInterest));resultTotalPayment.setText(df.format(totalPayment));printError.setText(null);}}"
1470	"public boolean execute(Level l){return true;}"
1471	"public boolean eq(TypeData d){return this==d;}"
1472	"public int collide(Actor actor1,Actor actor2){actor1.setDirection(actor1.getDirection()+180);actor2.setDirection(actor2.getDirection()+180);return (10);}"
1473	"@Override public void onClick(DialogInterface dialog,int which){mPickedDice=which;}"
1474	"boolean match(Matcher matcher,int i,CharSequence seq){return i==matcher.lookbehindTo;}"
1475	"public boolean isNotSpecified(){return locationUnitConfig==null;}"
1476	"@Override protected boolean included(int x){return x>=from&&x<to;}"
1477	"public IDawgLetter<LETTER,COLNAMES> getSimpleDawgLetter(Set<LETTER> letters){IDawgLetter<LETTER,COLNAMES> result=mLettersToSimpleDawgLetter.get(letters);if(result==null){result=new SimpleDawgLetter<LETTER,COLNAMES>(this,letters);mLettersToSimpleDawgLetter.put(letters,(SimpleDawgLetter<LETTER,COLNAMES>)result);}return result;}"
1478	"protected Code infer(BinOp v,Entry stmt,Env environment){Code code=v;Type rhs=environment.pop();Type lhs=environment.pop();Type result;boolean lhs_set=Type.isSubtype(Type.T_SET(Type.T_ANY),lhs);boolean rhs_set=Type.isSubtype(Type.T_SET(Type.T_ANY),rhs);boolean lhs_list=Type.isSubtype(Type.T_LIST(Type.T_ANY),lhs);boolean rhs_list=Type.isSubtype(Type.T_LIST(Type.T_ANY),rhs);boolean lhs_str=Type.isSubtype(Type.T_STRING,lhs);boolean rhs_str=Type.isSubtype(Type.T_STRING,rhs);if(lhs_set||rhs_set){environment.push(lhs);environment.push(rhs);switch (v.bop){case ADD :return inferSetUnion(OpDir.UNIFORM,stmt,environment);case SUB :return inferSetDifference(OpDir.UNIFORM,stmt,environment);default :syntaxError(""invalid set operation: ""+v.bop,filename,stmt);result=null;}}else {if(lhs_str||rhs_str){Code.OpDir dir;if(lhs_str&&rhs_str){dir=OpDir.UNIFORM;}else {if(lhs_str){dir=OpDir.LEFT;}else {dir=OpDir.RIGHT;}}switch (v.bop){case ADD :code=Code.StringAppend(dir);break;default :syntaxError(""Invalid string operation: ""+v.bop,filename,stmt);}result=Type.T_STRING;}else {if(lhs_list||rhs_list){Type.List type;Code.OpDir dir;if(lhs_list&&rhs_list){type=Type.effectiveListType(Type.leastUpperBound(lhs,rhs));dir=OpDir.UNIFORM;}else {if(lhs_list){type=Type.effectiveListType(lhs);dir=OpDir.LEFT;}else {type=Type.effectiveListType(rhs);dir=OpDir.RIGHT;}}switch (v.bop){case ADD :code=Code.ListAppend(type,dir);break;default :syntaxError(""Invalid list operation: ""+v.bop,filename,stmt);}result=type;}else {if(v.bop==BOp.REM){checkIsSubtype(Type.T_INT,lhs,stmt);checkIsSubtype(Type.T_INT,rhs,stmt);result=Type.T_INT;}else {if(Type.isCoerciveSubtype(lhs,rhs)){checkIsSubtype(Type.T_REAL,lhs,stmt);result=lhs;}else {checkIsSubtype(Type.T_REAL,rhs,stmt);result=rhs;}}code=Code.BinOp(result,v.bop);}}}environment.push(result);return code;}"
1479	"@Override public void write(ArrayList<Sequence> sequences) throws StreamCorruptedException{Writer sinkWriter=null;try{sinkWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(OUTPUTFILE),""utf-8""));for(Sequence sequence : sequences){for(String word : sequence.getSequenceWords()){sinkWriter.write(word+"" "");}sinkWriter.write(sequence.getLineNumber()+System.lineSeparator());}}catch(IOException ex){}finally{try{sinkWriter.close();}catch(Exception ex){}}}"
1480	"public int getPriority(){return priority;}"
1481	"@Override protected boolean getCheck(PlayerCharacter character){return character.getQuestStatus(QuestType.GOBLIN)==0;}"
1482	"public void onClick(DialogInterface dialog,int whichButton){dialog.dismiss();}"
1483	"public static FullHttpResponse sendPut(URL url,String data,String contentType) throws Exception{HttpURLConnection con=(HttpURLConnection)url.openConnection();con.setRequestMethod(""PUT"");con.setRequestProperty(""Accept-Language"",""en-US,en;q=0.5"");if(contentType!=null&&!contentType.equals("""")){con.setRequestProperty(""Accept"",contentType);con.setRequestProperty(""Content-Type"",contentType);}if(logger.isDebugEnabled()){logger.debug(""\nSending 'PUT' request to URL : ""+url+""\n""+""Put parameters : ""+data+""\n"");}if(data!=null&&!data.equals("""")){con.setDoOutput(true);DataOutputStream wr=new DataOutputStream(con.getOutputStream());wr.writeBytes(data);wr.flush();wr.close();}else {con.setDoOutput(false);}int responseCode=con.getResponseCode();FullHttpResponse httpResponse=new FullHttpResponse(HttpVersion.HTTP_1_0,con.getResponseCode(),con.getResponseMessage());if(responseCode>399&&responseCode<500){con.disconnect();return httpResponse;}else {BufferedReader in=new BufferedReader(new InputStreamReader(con.getInputStream()));StringBuffer response=new StringBuffer();String inputLine;while((inputLine=in.readLine())!=null){response.append(inputLine);response.append(""\n"");}in.close();httpResponse.setBody(response.toString());if(logger.isDebugEnabled()){logger.debug(""\nResponse Code : ""+responseCode+""\n""+""Response : ""+response.toString());}con.disconnect();return httpResponse;}}"
1484	"@Override public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
1485	"@RequestMapping(value=""/filter"",method=RequestMethod.POST) public ModelAndView getCatalogOnlyItems(String cost,String size,String categoryId){ModelAndView modelAndView=new ModelAndView(""catalog-only-items"");modelAndView.addObject(""catalog"",productService.filterProductsByCostAndSize(cost,size,categoryId));Category currentCategory=categoryService.findCategoryById(categoryId);Category parentCategory=currentCategory.getParent();if(parentCategory!=null){if(parentCategory.getId()==1){modelAndView.addObject(""isMensActive"",true);}if(parentCategory.getId()==2){modelAndView.addObject(""isWomensActive"",true);}modelAndView.addObject(""options"",categoryService.findChilds(parentCategory));modelAndView.addObject(""activeOptionId"",currentCategory.getId());}else {if(currentCategory.getId()==1){modelAndView.addObject(""isMensActive"",true);}if(currentCategory.getId()==2){modelAndView.addObject(""isWomensActive"",true);}modelAndView.addObject(""options"",categoryService.findChilds(currentCategory));modelAndView.addObject(""activeOptionId"",currentCategory.getId());}return modelAndView;}"
1486	"@Override public void handle(MouseEvent event){gameMode=MapGUI.CREATING_WOOD_CUTTER_MODE;}"
1487	"private JSONArray convertObsToJson(Obs o) throws JSONException{JSONArray arr=new JSONArray();if(o.getValues(false)==null||o.getValues(false).size()==0){JSONObject obo=new JSONObject();obo.put(""concept"",o.getFieldCode());arr.put(obo);}else {for(Object v : o.getValues(false)){JSONObject obo=new JSONObject();obo.put(""concept"",o.getFieldCode());obo.put(""value"",v);arr.put(obo);}}return arr;}"
1488	"@Override public void onAnimationEnd(Animator animation){if(!hasLoadedGroups){getButtons();initView();hasLoadedGroups=true;}}"
1489	"private static List<Mesh> createMeshes(ArrayList<GroupData> groups){ final List<Mesh> results=new ArrayList<Mesh>();int meshIndex=0;for(GroupData group : groups){ final Mesh mesh=new Mesh(""Mesh #""+meshIndex++);mesh.setModelBound(new BoundingBox());results.add(mesh); final Vector3 normal=new Vector3();for(ReadOnlyVector3 v : group.normals){normal.addLocal(v);}normal.normalizeLocal();mesh.setUserData(normal); final FloatBuffer vertexBuffer=BufferUtils.createVector3Buffer(group.vertices.size());mesh.getMeshData().setVertexBuffer(vertexBuffer); final Vector3 center=new Vector3();for(ReadOnlyVector3 v : group.vertices){vertexBuffer.put(v.getXf()).put(v.getYf()).put(v.getZf());center.addLocal(v);}center.multiplyLocal(1.0/group.vertices.size()); final FloatBuffer textureBuffer=BufferUtils.createVector2Buffer(group.textures.size());mesh.getMeshData().setTextureBuffer(textureBuffer,0);for(ReadOnlyVector2 v : group.textures){textureBuffer.put(v.getXf()).put(v.getYf());} final Texture texture=TextureManager.loadFromImage(group.textureImage,Texture.MinificationFilter.Trilinear,TextureStoreFormat.GuessNoCompressedFormat); final TextureState ts=new TextureState();ts.setTexture(texture);mesh.setRenderState(ts);mesh.updateModelBound();}return results;}"
1490	"private void processAddIsiExport(IsilonApi isi,FileDeviceInputOutput args,List<ExportRule> exports) throws IsilonException{_log.info(""ProcessAddExport  Start"");List<ExportRule> modifyRules=new ArrayList<>();for(ExportRule exportRule : exports){_log.info(""Add this export rule {}"",exportRule.toString());String isilonExportId=exportRule.getDeviceExportId();String zoneName=getZoneName(args.getvNAS());if(isilonExportId!=null){_log.info(""Export rule exists on the device so modify it: {}"",exportRule);modifyRules.add(exportRule);}else {_log.info(""Export rule does not exist on the device so create it: {}"",exportRule);IsilonExport newIsilonExport=setIsilonExport(exportRule);String expId=null;if(zoneName!=null){expId=isi.createExport(newIsilonExport,zoneName);}else {expId=isi.createExport(newIsilonExport);}exportRule.setDeviceExportId(expId);}if(!modifyRules.isEmpty()){processIsiExport(isi,args,modifyRules);}}_log.info(""ProcessAddExport completed."");}"
1491	"@Override public void onClick(ClickEvent event){penMode=MODE_ERASE;}"
1492	"private void hiddensheet(XSSFWorkbook workbook,HashMap<String,ClassInfo> classinfos){XSSFSheet cons_param_sheet=workbook.createSheet(""ConstructorParamhidden"");XSSFSheet method_param_sheet=workbook.createSheet(""MethodParamhidden"");XSSFSheet class_method_sheet=workbook.createSheet(""ClassMethodhidden"");Set<String> keys=classinfos.keySet();ClassInfo info=null;XSSFRow clz_met_firstrow=class_method_sheet.createRow(0);XSSFRow met_par_firstrow=method_param_sheet.createRow(0);XSSFRow cons_par_firstrow=cons_param_sheet.createRow(0);Drawing drawing=class_method_sheet.createDrawingPatriarch();CreationHelper factory=workbook.getCreationHelper();int clz_met_col_index=0;int cons_total=0,mets_total=0;for(String key : keys){info=classinfos.get(key);Class clz=info.getClz();XSSFCell infocell=clz_met_firstrow.createCell(clz_met_col_index);infocell.setCellValue(info.getClz().getName());Set<Method> mets=info.getMethods();Iterator<Method> mit=mets.iterator();if(mets.size()>0){XSSFCell clz_met_cell=null;XSSFCell met_par_cell=null;for(int i=1;i<=mets.size()&&mit.hasNext();i++){Method met=mit.next();XSSFRow clz_met_row=class_method_sheet.getRow(i);if(clz_met_row==null){clz_met_row=class_method_sheet.createRow(i);}Parameter[] params=met.getParameters();String methodStr=met.getReturnType().getSimpleName()+"" ""+met.getName()+""("";String methodNamedStr=""MET""+met.getName();Parameter param=null;for(int param_index=0;param_index<params.length;param_index++){param=params[param_index];String paramType=param.getType().getSimpleName();String paramStr=paramType+"" ""+param.getName();methodStr+=paramStr;if(param_index!=params.length-1){methodStr+=',';}if(param.getType().isArray()){methodNamedStr+=paramType.substring(0,paramType.indexOf('['))+""Array"";}else {methodNamedStr+=paramType;}XSSFRow met_par_row=method_param_sheet.getRow(param_index+1);if(met_par_row==null){met_par_row=method_param_sheet.createRow(param_index+1);}XSSFCell paramTypeCell=met_par_row.createCell(mets_total);paramTypeCell.setCellValue(paramType);}methodStr+=')';System.out.println(methodStr);clz_met_cell=clz_met_row.createCell(clz_met_col_index);clz_met_cell.setCellValue(methodStr);met_par_cell=met_par_firstrow.createCell(mets_total);met_par_cell.setCellValue(methodStr);ClientAnchor methodanchor=factory.createClientAnchor();methodanchor.setCol1(clz_met_col_index);methodanchor.setCol2(clz_met_col_index+3);methodanchor.setRow1(i);methodanchor.setRow2(i+1);Comment methodcomment=drawing.createCellComment(methodanchor);RichTextString method_commentStr=factory.createRichTextString(met.getName());methodcomment.setString(method_commentStr);clz_met_cell.setCellComment(methodcomment);if(params.length>0){XSSFName namedCell=workbook.createName();namedCell.setNameName(methodNamedStr);char cell=(char)('A'+mets_total);String formula=""MethodParamhidden!$""+cell+""$2:$""+cell+""$""+(params.length+1);namedCell.setRefersToFormula(formula);}mets_total++;}XSSFName namedcell=workbook.createName();namedcell.setNameName(clz.getSimpleName());char currentCol=(char)('A'+clz_met_col_index);String formula=""ClassMethodhidden!$""+currentCol+""$2:$""+currentCol+""$""+(mets.size()+1);namedcell.setRefersToFormula(formula);}XSSFRow con_par_row=null;Constructor[] conset=clz.getDeclaredConstructors();Constructor con=null;for(int con_index=0;con_index<conset.length;con_index++){con=conset[con_index];String consName=info.getClz().getSimpleName()+""("";String consParamNamed=""CON""+info.getClz().getSimpleName();Parameter[] params=con.getParameters();for(int param_index=0;param_index<params.length;param_index++){Parameter param=params[param_index];consName+=param.getType().getSimpleName()+"" ""+param.getName();if(param_index!=params.length-1){consName+=',';}consParamNamed+=param.getType().getSimpleName();con_par_row=cons_param_sheet.getRow(param_index+1);if(con_par_row==null){con_par_row=cons_param_sheet.createRow(param_index+1);}XSSFCell paramcell=con_par_row.createCell(cons_total);paramcell.setCellValue(param.getType().getSimpleName());}consName+=')';System.out.println(consName);XSSFCell consCell=cons_par_firstrow.createCell(cons_total);consCell.setCellValue(consName);if(params.length>0){XSSFName namedcell=workbook.createName();namedcell.setNameName(consParamNamed);char cell=(char)('A'+cons_total);String formula=""ConstructorParamhidden!$""+cell+""$2:$""+cell+""$""+(params.length+1);namedcell.setRefersToFormula(formula);}cons_total++;}clz_met_col_index++;}XSSFName namedcell=workbook.createName();namedcell.setNameName(""Class"");char cell=(char)('A'+cons_total-1);String formula=""ConstructorParamhidden!$A$1:$""+cell+""$1"";namedcell.setRefersToFormula(formula);System.out.println(""total : ""+cons_total);workbook.setSheetHidden(1,true);workbook.setSheetHidden(2,true);workbook.setSheetHidden(3,true);}"
1493	"private static void registerRecipe(){GameRegistry.addRecipe(new ItemStack(ItemLoader.itemCamera),new Object{""!@#"",""$%@"",""@@@"",'@',Blocks.OBSIDIAN,'!',Blocks.GLOWSTONE,'#',Blocks.STONE_BUTTON,'$',Items.ENDER_EYE,'%',Blocks.REDSTONE_BLOCK});GameRegistry.addShapelessRecipe(new ItemStack(ItemLoader.itemCamera),ItemLoader.itemTripod);GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(BlockLoader.pictureFrame),new Object{""!!"",""@@"",'!',""plankWood"",'@',Blocks.WOOL}));GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(BlockLoader.pictureFrameMultiple),new Object{""!!!"",""@@@"",""@@@"",'!',""plankWood"",'@',Blocks.WOOL}));GameRegistry.addRecipe(new ItemStack(ItemLoader.itemBattery),new Object{""!#!"",""!@!"",""!@!"",'!',Blocks.REDSTONE_BLOCK,'@',Blocks.OBSIDIAN,'#',Blocks.STONE_BUTTON});GameRegistry.addRecipe(new ItemStack(ItemLoader.itemFilm),new Object{""!!!"",""@@@"",""!!!"",'!',Items.ENDER_PEARL,'@',Blocks.GLASS_PANE});GameRegistry.addRecipe(new ItemStack(BlockLoader.photoprocessor),new Object{""!@!"",""!#!"",""!$!"",'!',Blocks.IRON_BLOCK,'@',Items.DIAMOND,'#',Items.ENDER_PEARL,'$',Blocks.REDSTONE_BLOCK});GameRegistry.addShapelessRecipe(new ItemStack(ItemLoader.itemPhotoPaper),Items.MILK_BUCKET,Items.PAPER);GameRegistry.addRecipe(new ItemStack(ItemLoader.itemCntsTempLiquid),new Object{""!!!"",""@!@"",""@#@"",'!',Items.BLAZE_ROD,'@',Blocks.GLASS_PANE,'#',Items.WATER_BUCKET});GameRegistry.addRecipe(new ItemStack(ItemLoader.itemDevelopingAgent),new Object{""!@#"",""$%$"",""^&^"",'!',new ItemStack(Items.DYE,1,EnumDyeColor.RED.getDyeDamage()),'@',new ItemStack(Items.DYE,1,EnumDyeColor.YELLOW.getDyeDamage()),'#',new ItemStack(Items.DYE,1,EnumDyeColor.BLUE.getDyeDamage()),'$',Items.GOLD_INGOT,'%',Items.ENDER_PEARL,'^',Blocks.GLASS_PANE,'&',Items.WATER_BUCKET});GameRegistry.addRecipe(new ItemStack(ItemLoader.itemTripod),new Object{"" ! "","" @ "",""@#@"",'!',ItemLoader.itemCamera,'@',Blocks.IRON_BLOCK,'#',Items.ENDER_EYE});GameRegistry.addRecipe(new ItemStack(ItemLoader.itemGlassesHelmet),new Object{""!$!"",""@#@"",""! !"",'!',Items.STICK,'@',Blocks.GLASS_PANE,'#',Blocks.OBSIDIAN,'$',Items.ENDER_EYE});}"
1494	"public OJField[] getAllFields(OJClass clazz){return getAllFields(clazz,ALLOW_NON_STATIC+ALLOW_PROTECTED_INHERITED);}"
1495	"@Override public boolean remove(Object obj){return (map.remove(obj)!=null);}"
1496	"@Override public Connection mapRow(ResultSet rs,int rowNum) throws SQLException{ final Connection connection=prepareConnectionObject(rs);Property prop=new Property();prop.setPropertyIdentifier(rs.getString(""conn_propid""));ConnectionLocation connLoc=ConnectionLocation.builder().buildingName(StringUtils.isNotBlank(rs.getString(""buildingname""))?rs.getString(""buildingname""):"""").billingAddress(StringUtils.isNotBlank(rs.getString(""billingaddress""))?rs.getString(""billingaddress""):"""").roadName(StringUtils.isNotBlank(rs.getString(""roadname""))?rs.getString(""roadname""):"""").gisNumber(StringUtils.isNotBlank(rs.getString(""gisnumber""))?rs.getString(""gisnumber""):"""").build();connection.setConnectionLocation(connLoc);connection.setProperty(prop);connection.setWithProperty(true);return connection;}"
1497	"private SortedSet<String> getTokensOrderedByNumberOfErrors(){return stats.getTokensOrderedByNumberOfErrors();}"
1498	"private void sendUserQuiz(){UserQuiz userQuiz=new UserQuiz();userQuiz.setUserId(LoginController.getCurrentUser().getUserId());userQuiz.setQuizName(takeQuizList.get(0).getQuizName());userQuiz.setQuizId(takeQuizList.get(0).getQuizId());userQuiz.setUserName(LoginController.getCurrentUser().getFirstName());userQuiz.setUserLastName(LoginController.getCurrentUser().getLastName());int points=1;int countedPoints=0;int questionId=Integer.parseInt(takeQuizList.get(0).getQuestionId());int newQuestion=4;int noMultiple=0;int noSingle=0;for(int i=0;i<takeQuizList.size();i++){if(i%4==0){points=0;}int selected=0;if(takeQuizList.get(i).getQuestionType().equals(""multiple"")){selected=(multiAnswerList.get(i-noSingle).isSelected())?1:0;noMultiple++;}else {selected=singleAnswerList.get(i-noMultiple).isSelected()?1:0;noSingle++;}if(selected==Integer.parseInt(takeQuizList.get(i).getCorrectAnswer())){points++;}if(points>=4){countedPoints++;}}userQuiz.setNoOfQuestions(maxResultNo);userQuiz.setMaxPoints(maxResultNo);userQuiz.setPoints(countedPoints);UserQuizService userQuizService=new UserQuizService();userQuizService.userQuiz(userQuiz);}"
1499	"@Override public void run(){String backupData=mSubjectName+"",""+mStartTime+"",""+mElapsedTime+""\r\n"";try{if(mService==null){mService=new SpreadsheetService(""SMARTA-v1"");mService.setAuthSubToken(mOAuthToken);URL SPREADSHEET_FEED_URL=new URL(""https://spreadsheets.google.com/feeds/spreadsheets/private/full"");SpreadsheetFeed feed=mService.getFeed(SPREADSHEET_FEED_URL,SpreadsheetFeed.class);List<SpreadsheetEntry> spreadsheets=feed.getEntries();if(spreadsheets.size()==0){Log.d(""LOG"",""FATAL ERROR: No spreadsheets in this account. Data spreadsheet missing."");appendBackupData(backupData);mActivity.runOnUiThread(new Runnable(){  @Override public void run(){    new AlertDialog.Builder(mActivity).setTitle(""No spreadsheets in Drive"").setMessage(""This account has no spreadsheets in Drive. Restart app and choose account with spreadsheet "" + SPREADSHEET_NAME + "". Data saved to text file for now."").setCancelable(false).setPositiveButton(""Close"",new DialogInterface.OnClickListener(){      @Override public void onClick(      DialogInterface dialog,      int which){      }    }).show();  }});return ;}SpreadsheetEntry dataSpreadsheet=null;for(int i=0;i<spreadsheets.size();i++){if(spreadsheets.get(i).getTitle().getPlainText().equals(SPREADSHEET_NAME)){dataSpreadsheet=spreadsheets.get(i);Log.d(""LOG"",""Found spreadsheet: ""+spreadsheets.get(i).getTitle().getPlainText());break;}}if(dataSpreadsheet==null){Log.d(""LOG"",""FATAL ERROR: No spreadsheet named ""+SPREADSHEET_NAME+"" in this account. Data saved to text file for now."");appendBackupData(backupData);mActivity.runOnUiThread(new Runnable(){  @Override public void run(){    new AlertDialog.Builder(mActivity).setTitle(""No spreadsheets in Drive"").setMessage(""This account has no spreadsheets in Drive. Restart app and choose account with spreadsheet "" + SPREADSHEET_NAME + "". Data saved to text file for now."").setCancelable(false).setPositiveButton(""Close"",new DialogInterface.OnClickListener(){      @Override public void onClick(      DialogInterface dialog,      int which){      }    }).show();  }});return ;}WorksheetFeed worksheetFeed=mService.getFeed(dataSpreadsheet.getWorksheetFeedUrl(),WorksheetFeed.class);List<WorksheetEntry> worksheets=worksheetFeed.getEntries();WorksheetEntry worksheet=worksheets.get(0);mListFeedUrl=worksheet.getListFeedUrl();}ListEntry row=new ListEntry();row.getCustomElements().setValueLocal(""subject"",mSubjectName);row.getCustomElements().setValueLocal(""trainingstart"",mStartTime);row.getCustomElements().setValueLocal(""trainingduration"",mElapsedTime);row=mService.insert(mListFeedUrl,row);Log.d(""LOG"",""Saved data to spreadsheet."");}catch(Exception e){e.printStackTrace();appendBackupData(backupData);mActivity.runOnUiThread(new Runnable(){  @Override public void run(){    new AlertDialog.Builder(mActivity).setTitle(""Can't save online"").setMessage(""Check phone's internet connection, then restart app. Data saved to text file for now."").setCancelable(false).setPositiveButton(""Close"",new DialogInterface.OnClickListener(){      @Override public void onClick(      DialogInterface dialog,      int which){      }    }).show();  }});}}"
1500	"public BitSetProof(Assert assertion,SyntacticHeap heap,Formula formula){super(assertion);State root=new State(this,heap);states.add(root.set(formula));}"
1501	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return filesystem.getProtocols().contains(NFS)||filesystem.getProtocols().contains(NFSv4);}"
1502	"@Override public boolean apply(Object o){return true;}"
1503	"@Override public int getErrorCode(){return 0;}"
1504	"@Override public int hashCode(){if(hashCode==0){int result=0;for(EStructuralFeature next : eClass().getEStructuralFeatures()){Object myValue=eGet(next);result=31*result+ObjectUtil.hashCode(myValue);}hashCode=result;}return hashCode;}"
1505	"public void setNavigationMode(int mode){if(mode!=navigationMode){if((navigationMode==0||navigationMode==2)&&(mode==1||mode==3)){CoordinateSystem coords=theCamera.getCameraCoordinates().duplicate();Vec3 z=coords.getZDirection();if(z.x!=0.0&&z.y!=0.0){coords.setOrientation(z,new Vec3(0,1,0));animation.start(this,coords,rotationCenter,scale,orientation);}}navigationMode=mode;}}"
1506	"private static void parseSensorExtractionConfiguration(Element rootElement,Configuration configuration){ final Element sensorExtractionElement=rootElement.getChild(""sensor-extraction"");if(sensorExtractionElement!=null){ final SensorExtractConfiguration sensorExtractConfig=new SensorExtractConfiguration(); final Element timeVariableElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""time-variable-name"");sensorExtractConfig.setTimeVariableName(getElementValueTrimmed(timeVariableElement)); final Element longitudeVariableElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""longitude-variable-name"");sensorExtractConfig.setLongitudeVariableName(getElementValueTrimmed(longitudeVariableElement)); final Element latitudeVariableElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""latitude-variable-name"");sensorExtractConfig.setLatitudeVariableName(getElementValueTrimmed(latitudeVariableElement)); final Element xDimElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""x-dimension"");sensorExtractConfig.setX_Dimension(getElementValueInt(xDimElement)); final Element xDimNameElement=sensorExtractionElement.getChild(""x-dimension-name"");if(xDimNameElement!=null){sensorExtractConfig.setX_DimensionName(getElementValueTrimmed(xDimNameElement));} final Element yDimElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""y-dimension"");sensorExtractConfig.setY_Dimension(getElementValueInt(yDimElement)); final Element yDimNameElement=sensorExtractionElement.getChild(""y-dimension-name"");if(yDimNameElement!=null){sensorExtractConfig.setY_DimensionName(getElementValueTrimmed(yDimNameElement));} final Element zDimElement=JDomUtils.getMandatoryChild(sensorExtractionElement,""z-dimension"");sensorExtractConfig.setZ_Dimension(getElementValueInt(zDimElement)); final Element zDimNameElement=sensorExtractionElement.getChild(""z-dimension-name"");if(zDimNameElement!=null){sensorExtractConfig.setZ_DimensionName(getElementValueTrimmed(zDimNameElement));} final Element anSeaIceFractionElement=sensorExtractionElement.getChild(""an-ci-name"");if(anSeaIceFractionElement!=null){sensorExtractConfig.setAn_CI_name(getElementValueTrimmed(anSeaIceFractionElement));} final Element anSnowAlbedoElement=sensorExtractionElement.getChild(""an-asn-name"");if(anSnowAlbedoElement!=null){sensorExtractConfig.setAn_ASN_name(getElementValueTrimmed(anSnowAlbedoElement));} final Element anSSTKElement=sensorExtractionElement.getChild(""an-sstk-name"");if(anSSTKElement!=null){sensorExtractConfig.setAn_SSTK_name(getElementValueTrimmed(anSSTKElement));} final Element anTCWVElement=sensorExtractionElement.getChild(""an-tcwv-name"");if(anTCWVElement!=null){sensorExtractConfig.setAn_TCWV_name(getElementValueTrimmed(anTCWVElement));} final Element anMSLElement=sensorExtractionElement.getChild(""an-msl-name"");if(anMSLElement!=null){sensorExtractConfig.setAn_MSL_name(getElementValueTrimmed(anMSLElement));} final Element anTCCElement=sensorExtractionElement.getChild(""an-tcc-name"");if(anTCCElement!=null){sensorExtractConfig.setAn_TCC_name(getElementValueTrimmed(anTCCElement));} final Element anEastWindElement=sensorExtractionElement.getChild(""an-u10-name"");if(anEastWindElement!=null){sensorExtractConfig.setAn_U10_name(getElementValueTrimmed(anEastWindElement));} final Element anNorthWindElement=sensorExtractionElement.getChild(""an-v10-name"");if(anNorthWindElement!=null){sensorExtractConfig.setAn_V10_name(getElementValueTrimmed(anNorthWindElement));} final Element anT2Element=sensorExtractionElement.getChild(""an-t2-name"");if(anT2Element!=null){sensorExtractConfig.setAn_T2_name(getElementValueTrimmed(anT2Element));} final Element anD2Element=sensorExtractionElement.getChild(""an-d2-name"");if(anD2Element!=null){sensorExtractConfig.setAn_D2_name(getElementValueTrimmed(anD2Element));} final Element anAlbedoElement=sensorExtractionElement.getChild(""an-al-name"");if(anAlbedoElement!=null){sensorExtractConfig.setAn_AL_name(getElementValueTrimmed(anAlbedoElement));} final Element anSKTElement=sensorExtractionElement.getChild(""an-skt-name"");if(anSKTElement!=null){sensorExtractConfig.setAn_SKT_name(getElementValueTrimmed(anSKTElement));} final Element anTempProfileElement=sensorExtractionElement.getChild(""an-t-name"");if(anTempProfileElement!=null){sensorExtractConfig.setAn_T_name(getElementValueTrimmed(anTempProfileElement));} final Element anVapourProfileElement=sensorExtractionElement.getChild(""an-q-name"");if(anVapourProfileElement!=null){sensorExtractConfig.setAn_Q_name(getElementValueTrimmed(anVapourProfileElement));} final Element anOzoneProfileElement=sensorExtractionElement.getChild(""an-o3-name"");if(anOzoneProfileElement!=null){sensorExtractConfig.setAn_O3_name(getElementValueTrimmed(anOzoneProfileElement));} final Element anCLWCElement=sensorExtractionElement.getChild(""an-clwc-name"");if(anCLWCElement!=null){sensorExtractConfig.setAn_CLWC_name(getElementValueTrimmed(anCLWCElement));} final Element anCIWCElement=sensorExtractionElement.getChild(""an-ciwc-name"");if(anCIWCElement!=null){sensorExtractConfig.setAn_CIWC_name(getElementValueTrimmed(anCIWCElement));} final Element anTotalPrecipElement=sensorExtractionElement.getChild(""an-tp-name"");if(anTotalPrecipElement!=null){sensorExtractConfig.setAn_TP_name(getElementValueTrimmed(anTotalPrecipElement));}configuration.setSensorExtractConfiguration(sensorExtractConfig);}else {configuration.setSensorExtractConfiguration(null);}}"
1507	"public void actionPerformed(ActionEvent e){if(windowtesting==false){windowtesting=true;}else {windowtesting=false;}}"
1508	"@Override public boolean visit(FieldDeclaration ?){return !hidden()&&!declaredIn(?);}"
1509	"@Override public int result(){return 0;}"
1510	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);this.imageIds=new ImageIds();this.topScoresDAO=new TopScoresDAO(this);this.initializeGameValues();this.buildImageModel();this.setUpTimeUpdater();}"
1511	"public String getGrade(){return grade;}"
1512	"public boolean containsInput(Fluid aFluid){return aFluid!=null&&mRecipeFluidMap.containsKey(aFluid);}"
1513	"public int getImageWidth() throws IOException{if(imgWidth==0){imgWidth=reader.getWidth(0);}return imgWidth;}"
1514	"public static String getLocation(Category category){if(category instanceof Mixin){String mixinId=category.getScheme()+category.getTerm();if(userMixinLocationMap.get(mixinId)!=null){return userMixinLocationMap.get(mixinId);}}return '/'+category.getTerm()+'/';}"
1515	"@Override public String toString(){return source.getElementId().toString();}"
1516	"@Override public int getCurrentOptionIndex(){return -1;}"
1517	"@Override public void onClick(View v){dismiss();}"
1518	"@Override public void deleteStation(int id){db.delete(TABLE_STATIONS,STATION_KEY_ID+"" = ""+id,null);}"
1519	"@Override public boolean leftClick(EntityPlayer player,NBTTagCompound nbt,RayTraceResult result){return true;}"
1520	"public int getNumChildren(){return 0;}"
1521	"public FacialAnimationPanel(CharacterMovePanel characterMovePanel){this.characterMovePanel=characterMovePanel;add(new HTML(""<h4>Facial-Animation</h4>""));HorizontalPanel namePanel=new HorizontalPanel();this.add(namePanel);namePanel.add(new Label(""name:""));fileNameLabel=new Label();namePanel.add(fileNameLabel);HorizontalPanel h0=new HorizontalPanel();h0.setSpacing(4);this.add(h0);enableCheck=new CheckBox(""Enable"");enableCheck.setValue(true);enableCheck.addValueChangeHandler(new ValueChangeHandler<Boolean>(){  @Override public void onValueChange(  ValueChangeEvent<Boolean> event){    if (event.getValue()) {      GWTThreeClothHair.INSTANCE.setFacialAnimationClip(animationClip);    } else {      GWTThreeClothHair.INSTANCE.setFacialAnimationClip(null);    }    characterMovePanel.startAnimation();  }});h0.add(enableCheck);ValueListBox<Double> timeValueListBox=new ValueListBox<Double>(new Renderer<Double>(){  @Override public String render(  Double time){    if (time == null) {      return null;    }    if (time == -1) {      return ""Use animation-clip time"";    } else {      return time + "" ms"";    }  }  @Override public void render(  Double object,  Appendable appendable) throws IOException {  }});List<Double> values=Lists.newArrayList(-1.0,0.1,0.25,0.5,1.0,2.0);timeValueListBox.setValue(-1.0);timeValueListBox.setAcceptableValues(values);h0.add(new Label(""PlayTime:""));h0.add(timeValueListBox);timeValueListBox.addValueChangeHandler(new ValueChangeHandler<Double>(){  @Override public void onValueChange(  ValueChangeEvent<Double> event){    GWTThreeClothHair.INSTANCE.setFacialAnimationTime(event.getValue());    characterMovePanel.startAnimation();  }});FileUploadForm jsonUpload=FileUtils.createSingleTextFileUploadForm(new DataURLListener(){  @Override public void uploaded(  File file,  String text){    fileNameLabel.setText(file.getFileName());    setFacialAnimation(text);  }},true);jsonUpload.setAccept(FileUploadForm.ACCEPT_JSON);this.add(jsonUpload);HorizontalPanel h1=new HorizontalPanel();this.add(h1);Button test1=new Button(""Smile"",new ClickHandler(){  @Override public void onClick(  ClickEvent event){    THREE.XHRLoader().load(""animation/clip-smile4b.json"",new XHRLoadHandler(){      @Override public void onLoad(      String text){        setFacialAnimation(text);      }    });  }});h1.add(test1);Button test2=new Button(""Pero"",new ClickHandler(){  @Override public void onClick(  ClickEvent event){    THREE.XHRLoader().load(""animation/clip-peropero.json"",new XHRLoadHandler(){      @Override public void onLoad(      String text){        setFacialAnimation(text);      }    });  }});h1.add(test2);}"
1522	"@Override public void onClick(View v){Intent playI=new Intent(this,LevelVegetables.class);startActivity(playI);}"
1523	"public static boolean claimLand(Location location,Player player){int dist=Main.pluginInstance.getConfig().getInt(""cuboid size"");BlockVector vector=new BlockVector(dist,dist,dist);BlockVector vectorA=new BlockVector(location.getBlockX(),location.getBlockY(),location.getBlockZ());BlockVector vectorB=vectorA;vectorA=new BlockVector(vectorA.subtract(vector));vectorB=new BlockVector(vectorB.add(vector));ProtectedCuboidRegion region=new ProtectedCuboidRegion(getLocationNameForRegionId(location),vectorA,vectorB);List<ProtectedRegion> list=region.getIntersectingRegions(getWorldGuard().getRegionManager(location.getWorld()).getRegions().values());for(ProtectedRegion element : list){if(!(element.getOwners().contains(player.getUniqueId()))){return false;}}DefaultDomain owners=new DefaultDomain();owners.addPlayer(player.getUniqueId());region.setOwners(owners);region.setFlag(DefaultFlag.GREET_MESSAGE,""You have entered ""+player.getName()+""'s property"");region.setFlag(DefaultFlag.FAREWELL_MESSAGE,""You have left ""+player.getName()+""'s property"");getWorldGuard().getRegionManager(location.getWorld()).addRegion(region);player.sendMessage(ChatColor.GREEN+Main.pluginInstance.getName()+"" - ""+ChatColor.GOLD+""You have successfully added this region"");return true;}"
1524	"@Override public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){Log.e(""..."",""inside onrequest permission"");}"
1525	"private static int isTouching(Collideable sprite,Collideable c){ImageView sprite_img_v=sprite.getImageView();ImageView c_img_v=c.getImageView();double sprite_x=sprite_img_v.getX();double sprite_y=sprite_img_v.getY();double sprite_right=sprite_img_v.getFitWidth()+sprite_x;double sprite_bot=sprite_img_v.getFitHeight()+sprite_y;double c_x=c_img_v.getX();double c_y=c_img_v.getY();double c_right=c_img_v.getFitWidth()+c_x;double c_bot=c_img_v.getFitHeight()+c_y;double b_collision=Math.abs(c_bot-sprite_y);double t_collision=Math.abs(sprite_bot-c_y);double l_collision=Math.abs(sprite_right-c_x);double r_collision=Math.abs(c_right-sprite_x);if(sprite_x<c_right&&sprite_right>c_x&&sprite_y<c_bot&&sprite_bot>c_y){if(t_collision<b_collision&&t_collision<l_collision&&t_collision<r_collision){return Sprite.UP;}if(b_collision<t_collision&&b_collision<l_collision&&b_collision<r_collision){return Sprite.DOWN;}if(l_collision<r_collision&&l_collision<t_collision&&l_collision<b_collision){return Sprite.LEFT;}if(r_collision<l_collision&&r_collision<t_collision&&r_collision<b_collision){return Sprite.RIGHT;}}return -1;}"
1526	"@Override public boolean isEnable(Hero hero,Maze maze,MainGameActivity context,Skill skill){return (skill.isActive()||hero.getSkillPoint()>0)&&!SkillFactory.getSkill(""????"",hero,dialog).isActive();}"
1527	"@Override public void onDisable(){if(checkInvalidVersion()){return ;}scheduler.setUseBukkitAsync(false);started=false;defaultsProvider.close();permissionVault.shutdown();verboseHandler.shutdown();for(Player player : getServer().getOnlinePlayers()){try{Injector.unInject(player,false);}catch(Exception e){e.printStackTrace();}if(getConfiguration().get(ConfigKeys.AUTO_OP)){player.setOp(false);} final User user=getUserManager().getIfLoaded(getUuidCache().getUUID(player.getUniqueId()));if(user!=null){user.getUserData().invalidateCaches();getUserManager().unload(user);}}SubscriptionMapInjector.uninject();getLog().info(""Closing storage..."");storage.shutdown();if(fileWatcher!=null){fileWatcher.close();}if(messagingService!=null){getLog().info(""Closing messaging service..."");messagingService.close();}ApiSingletonUtils.unregisterProvider();getServer().getServicesManager().unregisterAll(this);if(vaultHookManager!=null){vaultHookManager.unhook(this);}getLog().info(""Shutting down internal scheduler..."");scheduler.shutdown();getServer().getScheduler().cancelTasks(this);HandlerList.unregisterAll(this);getLog().info(""Goodbye!"");}"
1528	"@Override public void hello(DatagramPacket packet,String username){Contact contact=contacts.createContact(packet.getAddress(),username,UserColors.getRandomColor());if(contact==null){throw new RuntimeException();}mainWindow.addContact(contact.getUsername(),""is now online"",contact.getColor(),contact.getId());mainWindow.addNewChatById(contact.getId());if(!contact.getMessages().isEmpty()){mainWindow.addMessages((contact.getMessages().toArray(new ChatMessageBlueprint[contact.getMessages().size()])),contact.getId());}}"
1529	"@Override public boolean apply(Object o){return true;}"
1530	"@Override public boolean add(Buffer buffer) throws IOException{checkNotNull(buffer);ResultSubpartitionView reader=null;boolean synchronizedIsSpilling=false;synchronized(buffers){if(isFinished||isReleased){return false;}LOG.info(""For {} adding buffer to {} with spilling {}."",owningTaskName,buffers,isSpilling);if(!isSpilling){buffers.add(buffer);reader=readView;updateStatistics(buffer);}else {synchronizedIsSpilling=true;}}if(synchronizedIsSpilling){spillWriter.writeBlock(buffer);}if(reader!=null){LOG.info(""{} notifying {}."",owningTaskName,reader);reader.notifyBuffersAvailable(1);}return true;}"
1531	"@Override protected boolean isValid(String value){Double d=converter.string2double(value);if(d==null){return false;}else {return min<=d.doubleValue();}}"
1532	"private int getLongestRoadFromSegment(CatanLink link,ArrayList<CatanLink> road){if(road==null){road=new ArrayList<>();}if(!road.contains(link)){road.add(link);CatanSpace front=link.getFrontSpace();CatanSpace rear=link.getRearSpace();ArrayList<Integer> possible=new ArrayList<>();if(front.getBuilding()==null||front.getBuilding().getPlayer().getTeam()==team){for(CatanLink l : front.getLinks()){if(l!=link&&link.getRoad()==team){ArrayList<CatanLink> r=new ArrayList<>();r.addAll(road);possible.add(getLongestRoadFromSegment(l,r));}}}else {if(rear.getBuilding()==null||rear.getBuilding().getPlayer().getTeam()==team){for(CatanLink l : rear.getLinks()){if(l!=link&&link.getRoad()==team){ArrayList<CatanLink> r=new ArrayList<>();r.addAll(road);possible.add(getLongestRoadFromSegment(l,r));}}}}Collections.sort(possible);if(possible.size()==0){return road.size();}return possible.get(possible.size()-1);}else {return road.size();}}"
1533	"@Override protected boolean start(SparseBitSet b){if(b==null){throw new NullPointerException();}return true;}"
1534	"@Override protected void paintComponent(Graphics g){Image offscreen=createImage(this.getWidth(),this.getHeight());controller.drawGraveyard(true,(Graphics2D)offscreen.getGraphics(),this.getWidth(),this.getHeight());g.drawImage(offscreen,0,0,null);}"
1535	"@Override public boolean matches(ItemStack item){return true;}"
1536	"@Override public T getHead(){assert (size>0);return (T)array[head];}"
1537	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
1538	"public boolean sectionCompleteAndCompetitionNotLive(CompetitionSetupSection setupSection){return setupSection.isComplete(generalSetupViewModel.getCompetition())&&!generalSetupViewModel.getCompetition().isSetupAndLive();}"
1539	"public void multiStoreHelper(Type type,int level,Iterator<String> fields,int valSlot,JvmType val_t,int freeSlot,ArrayList<Bytecode> bytecodes){if(Type.isSubtype(Type.T_PROCESS(Type.T_ANY),type)){Type.Process pt=(Type.Process)type;bytecodes.add(new Bytecode.Dup(WHILEYPROCESS));JvmType.Function ftype=new JvmType.Function(JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYPROCESS,""state"",ftype,Bytecode.VIRTUAL));addReadConversion(pt.element(),bytecodes);multiStoreHelper(pt.element(),level,fields,valSlot,val_t,freeSlot,bytecodes);ftype=new JvmType.Function(WHILEYPROCESS,JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYPROCESS,""setState"",ftype,Bytecode.VIRTUAL));}else {if(Type.isSubtype(Type.T_DICTIONARY(Type.T_ANY,Type.T_ANY),type)){Type.Dictionary dict=Type.effectiveDictionaryType(type);if(level!=0){int keySlot=freeSlot++;int mapSlot=freeSlot++;bytecodes.add(new Bytecode.Store(mapSlot,WHILEYMAP));bytecodes.add(new Bytecode.Store(keySlot,JAVA_LANG_OBJECT));bytecodes.add(new Bytecode.Load(mapSlot,WHILEYMAP));bytecodes.add(new Bytecode.Load(keySlot,JAVA_LANG_OBJECT));JvmType.Function ftype=new JvmType.Function(JAVA_LANG_OBJECT,WHILEYMAP,JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYMAP,""get"",ftype,Bytecode.STATIC));addReadConversion(dict.value(),bytecodes);multiStoreHelper(dict.value(),level-1,fields,valSlot,val_t,freeSlot,bytecodes);bytecodes.add(new Bytecode.Load(mapSlot,WHILEYMAP));bytecodes.add(new Bytecode.Swap());bytecodes.add(new Bytecode.Load(keySlot,JAVA_LANG_OBJECT));bytecodes.add(new Bytecode.Swap());}else {bytecodes.add(new Bytecode.Swap());bytecodes.add(new Bytecode.Load(valSlot,val_t));addWriteConversion(dict.value(),bytecodes);}JvmType.Function ftype=new JvmType.Function(WHILEYMAP,WHILEYMAP,JAVA_LANG_OBJECT,JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYMAP,""put"",ftype,Bytecode.STATIC));}else {if(Type.isSubtype(Type.T_LIST(Type.T_ANY),type)){Type.List list=Type.effectiveListType(type);if(level!=0){int indexSlot=freeSlot++;int listSlot=freeSlot++;bytecodes.add(new Bytecode.Store(listSlot,WHILEYLIST));bytecodes.add(new Bytecode.Store(indexSlot,BIG_INTEGER));bytecodes.add(new Bytecode.Load(listSlot,WHILEYLIST));bytecodes.add(new Bytecode.Load(indexSlot,BIG_INTEGER));JvmType.Function ftype=new JvmType.Function(JAVA_LANG_OBJECT,WHILEYLIST,BIG_INTEGER);bytecodes.add(new Bytecode.Invoke(WHILEYLIST,""get"",ftype,Bytecode.STATIC));addReadConversion(list.element(),bytecodes);multiStoreHelper(list.element(),level-1,fields,valSlot,val_t,freeSlot,bytecodes);bytecodes.add(new Bytecode.Load(listSlot,WHILEYLIST));bytecodes.add(new Bytecode.Swap());bytecodes.add(new Bytecode.Load(indexSlot,BIG_INTEGER));bytecodes.add(new Bytecode.Swap());}else {bytecodes.add(new Bytecode.Swap());bytecodes.add(new Bytecode.Load(valSlot,val_t));addWriteConversion(list.element(),bytecodes);}JvmType.Function ftype=new JvmType.Function(WHILEYLIST,WHILEYLIST,BIG_INTEGER,JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYLIST,""set"",ftype,Bytecode.STATIC));}else {Type.Record rec=Type.effectiveRecordType(type);String field=fields.next();if(level!=0){int recordSlot=freeSlot++;bytecodes.add(new Bytecode.Store(recordSlot,WHILEYRECORD));bytecodes.add(new Bytecode.Load(recordSlot,WHILEYRECORD));bytecodes.add(new Bytecode.LoadConst(field));JvmType.Function ftype=new JvmType.Function(JAVA_LANG_OBJECT,WHILEYRECORD,JAVA_LANG_STRING);bytecodes.add(new Bytecode.Invoke(WHILEYRECORD,""get"",ftype,Bytecode.STATIC));addReadConversion(rec.fields().get(field),bytecodes);multiStoreHelper(rec.fields().get(field),level-1,fields,valSlot,val_t,freeSlot,bytecodes);bytecodes.add(new Bytecode.Load(recordSlot,WHILEYRECORD));bytecodes.add(new Bytecode.Swap());bytecodes.add(new Bytecode.LoadConst(field));bytecodes.add(new Bytecode.Swap());}else {bytecodes.add(new Bytecode.LoadConst(field));bytecodes.add(new Bytecode.Load(valSlot,val_t));addWriteConversion(rec.fields().get(field),bytecodes);}JvmType.Function ftype=new JvmType.Function(WHILEYRECORD,WHILEYRECORD,JAVA_LANG_STRING,JAVA_LANG_OBJECT);bytecodes.add(new Bytecode.Invoke(WHILEYRECORD,""put"",ftype,Bytecode.STATIC));}}}}"
1540	"private FElement generateElement(Element elem){elem.setName(ReservedNames.instance().getNewName(elem.getName()));String elemName=elem.getName();log.debug(""Element: ""+elemName);FSchemaType ftype=null;QName type=elem.getType();if(type==null){ftype=getTopLevelType(elemName);if(ftype==null){if(elem.isSetSimpleType()){ftype=generateLocalSimpleType(elem.getSimpleType());}else {if(elem.isSetComplexType()){ftype=generateComplexType(elem.getComplexType());}else {if(elem.isSetRef()){QName ref=elem.getRef();String elemRefName=ref.getLocalPart();log.debug(""Resolved reference (""+elemRefName+"")"");ftype=getReferencedType(ref);}else {throw new UnknownElementException(elem.toString());}}}}}else {ftype=createTopLevelType(type);}if(ftype==null){return null;}int ecount=getElemNameCount(elemName);if(ecount>1){elemName+=""_""+ecount;}FElement schemaElement=new FElement(elemName,ftype);if(elem.isSetMinOccurs()){Object o=elem.getMinOccurs();if(o instanceof Number){schemaElement.setMinOccurs(((Number)o).intValue());}}if(elem.isSetMaxOccurs()){Object o=elem.getMaxOccurs();if(o instanceof Number){schemaElement.setMaxOccurs(((Number)o).intValue());}else {if(o instanceof String&&((String)o).equals(""unbounded"")){schemaElement.setMaxOccursUnbounded();}}}if(elem.isSetFixed()){schemaElement.setFixedValue(elem.getFixed());}if(elem.isSetDefault()){schemaElement.setDefaultValue(elem.getDefault());}if(elem.isSetRef()){schemaElement.setReference(true);schemaElement.setName(elem.getRef().getLocalPart());}initObject(schemaElement);return schemaElement;}"
1541	"@Override public void onCheckedChange(CheckboxItem checkboxItem,boolean b){SPHelper.setIsHS(ctx,b);isNeedUpdate=true;}"
1542	"public boolean equals(Object o){if(o==null){return false;}return (o instanceof None);}"
1543	"@POST @Path(""/{id}/deactivate"") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteStorageSystem(URI id) throws DatabaseException{StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));if(!RegistrationStatus.UNREGISTERED.toString().equals(system.getRegistrationStatus())){throw APIException.badRequests.cannotDeactivateStorageSystem();}if(rpHelper.containsActiveRpVolumes(id)){throw APIException.badRequests.cannotDeactivateStorageSystemActiveRpVolumes();}if(DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString().equals(system.getDiscoveryStatus())||DiscoveredDataObject.DataCollectionJobStatus.SCHEDULED.toString().equals(system.getDiscoveryStatus())){throw APIException.serviceUnavailable.cannotDeactivateStorageSystemWhileInDiscover(system.getId());}String taskId=UUID.randomUUID().toString();Operation op=_dbClient.createTaskOpStatus(StorageSystem.class,system.getId(),taskId,ResourceOperationTypeEnum.DELETE_STORAGE_SYSTEM);if(StringUtils.isNotBlank(system.getNativeGuid())&&system.isStorageSystemManagedByProvider()&&!NullColumnValueGetter.isNullURI(system.getActiveProviderURI())){DecommissionedResource oldStorage=null;List<URI> oldResources=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getDecommissionedResourceIDConstraint(id.toString()));if(oldResources!=null){List<DecommissionedResource> objects=_dbClient.queryObject(DecommissionedResource.class,oldResources);for(DecommissionedResource decomObj : objects){if(!decomObj.getInactive()){oldStorage=decomObj;break;}}}if(oldStorage==null){oldStorage=new DecommissionedResource();oldStorage.setNativeGuid(system.getNativeGuid());oldStorage.setType(TypeMap.getCFName(StorageSystem.class));oldStorage.setUser(getUserFromContext().getName());oldStorage.setDecommissionedId(system.getId());oldStorage.setLabel(system.getLabel());oldStorage.setId(URIUtil.createId(DecommissionedResource.class));_dbClient.createObject(oldStorage);}StorageProvider provider=_dbClient.queryObject(StorageProvider.class,system.getActiveProviderURI());if(provider!=null){StringSet providerDecomSys=provider.getDecommissionedSystems();if(providerDecomSys==null){providerDecomSys=new StringSet();provider.setDecommissionedSystems(providerDecomSys);}providerDecomSys.add(oldStorage.getId().toString());_dbClient.updateObject(provider);}}PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),system,_retry_attempts,taskId,60);return toTask(system,taskId,op);}"
1544	"@Override public void onDataChange(DataSnapshot dataSnapshot){String receiverFCMToken=dataSnapshot.getValue(String.class);if(receiverFCMToken!=null&&receiverFCMToken.equals("""")){Notif newNotif=new Notif(id,timestamp,type,senderId,receiverId,receiverFCMToken,content,taskId);notif.child(receiverId).child(id).setValue(newNotif);}}"
1545	"public void runRemindLogin(User user){if(Config.getInstance().getVoteRemindingEnabled()&&user.canVoteAll()){RewardHandler.getInstance().giveReward(user,Config.getInstance().getData(),Config.getInstance().getVoteRemindingRewardsPath());plugin.debug(user.getPlayerName()+"" was reminded!"");}}"
1546	"@Override public List<JobDiffInfo> diffByNamespace(String namespace) throws SaturnJobConsoleException{long startTime=System.currentTimeMillis();List<JobDiffInfo> jobDiffInfos=Lists.newArrayList();CuratorRepository.CuratorFrameworkOp zkClient;try{List<CurrentJobConfig> dbJobConfigList=configService.findConfigsByNamespace(namespace);if(dbJobConfigList==null||dbJobConfigList.isEmpty()){return jobDiffInfos;}zkClient=initCuratorClient(namespace);Set<String> jobNamesInDb=getAllJobNames(dbJobConfigList);for(CurrentJobConfig dbJobConfig : dbJobConfigList){String jobName=dbJobConfig.getJobName();log.info(""start to diff job:{}@{}"",jobName,namespace);if(!checkJobIsExsitInZk(jobName,zkClient)){jobDiffInfos.add(new JobDiffInfo(namespace,jobName,JobDiffInfo.DiffType.DB_ONLY,Lists.newArrayList()));continue;}JobSettings zkJobConfig=jobDimensionService.getJobSettingsFromZK(jobName,zkClient);JobDiffInfo jobDiffInfo=diff(dbJobConfig,zkJobConfig,false);if(jobDiffInfo!=null){jobDiffInfos.add(jobDiffInfo);}}List<JobDiffInfo> jobsInZkOnly=getJobNamesWhichInZKOnly(namespace,zkClient,jobNamesInDb);if(jobsInZkOnly!=null&&!jobsInZkOnly.isEmpty()){jobDiffInfos.addAll(jobsInZkOnly);}}catch(SaturnJobConsoleException e){log.error(e.getMessage(),e);throw e;}catch(Exception e){log.error(""exception throws during diff by namespace [{}]"",namespace,e);throw new SaturnJobConsoleException(e);}finally{log.info(""Finish diff namespace:{} which cost {}ms"",namespace,System.currentTimeMillis()-startTime);}return jobDiffInfos;}"
1547	"@Override public void run(){AtomicBoolean stop=new AtomicBoolean(false);PrintStream curr_err=null;PrintStream curr_out=null;DefaultSetOfCells soc;String segAnaDir=FileUtils.convertPath(parameters_.getSavingPath())+File.separator+parameters_.getSegmentationParameter(MaarsParameters.SEG_PREFIX)+Maars_Interface.SEGANALYSIS_SUFFIX;for(String posNb : posNbs_){IJ.log(posNb);ImagePlus concatenatedFluoImgs=null;soc=new DefaultSetOfCells(posNb);String currentPosPrefix=segAnaDir+posNb+File.separator;String currentZipPath=currentPosPrefix+""ROI.zip"";if(FileUtils.exists(currentZipPath)){soc.loadCells(currentZipPath);IJ.open(currentPosPrefix+""Results.csv"");ResultsTable rt=ResultsTable.getResultsTable();ResultsTable.getResultsWindow().close(false);soc.addRoiMeasurementIntoCells(rt);try{PrintStream ps=new PrintStream(parameters_.getSavingPath()+File.separator+""FluoAnalysis.LOG"");curr_err=System.err;curr_out=System.err;System.setOut(ps);System.setErr(ps);}catch(FileNotFoundException e){IOUtils.printErrorToIJLog(e);}CopyOnWriteArrayList<Map<String,Future>> tasksSet=new CopyOnWriteArrayList<>();concatenatedFluoImgs=processStackedImg(fluoImgsDir,posNb,parameters_,soc,null,tasksSet,stop);concatenatedFluoImgs.getCalibration().frameInterval=Double.parseDouble(parameters_.getFluoParameter(MaarsParameters.TIME_INTERVAL))/1000;Maars_Interface.waitAllTaskToFinish(tasksSet);if(!stop.get()&&soc.size()!=0){long startWriting=System.currentTimeMillis();ArrayList<String> arrayChannels=new ArrayList<>();Collections.addAll(arrayChannels,parameters_.getUsingChannels().split("","",-1));FileUtils.createFolder(parameters_.getSavingPath()+File.separator+parameters_.getFluoParameter(MaarsParameters.FLUO_PREFIX)+Maars_Interface.FLUOANALYSIS_SUFFIX);IOUtils.saveAll(soc,concatenatedFluoImgs,parameters_.getSavingPath()+File.separator,parameters_.useDynamic(),arrayChannels,posNb,parameters_.getFluoParameter(MaarsParameters.FLUO_PREFIX));IJ.log(""it took ""+(double)(System.currentTimeMillis()-startWriting)/1000+"" sec for writing results"");if(parameters_.useDynamic()){analyzeMitosisDynamic(soc,parameters_);}}}soc.reset();System.gc();}System.setErr(curr_err);System.setOut(curr_out);}"
1548	"@Override public void onResume(){super.onResume();mActivity.getActionBarToggle().setDrawerIndicatorEnabled(false);mActivity.getActionBarToggle().syncState();getActivity().setTitle(mDiningHall.getName());if(map==null){map=mapFragment.getMap();if(map!=null){map.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(39.95198,-75.19368),17));map.getUiSettings().setZoomControlsEnabled(false);}}drawMap();}"
1549	"public boolean wasApproved(){return parseBoolean(responseUri.getQueryParameter(""WasApproved""));}"
1550	"public static void showShort(View view,String msg){Snackbar.make(view,msg,Snackbar.LENGTH_SHORT).show();}"
1551	"public void startTDM(String id){if(ArenaFile.getData().contains(""Arenas.""+id+"".Name"")){if(BaseArena.states==BaseArena.ArenaStates.Started){mainRunnable.startGracePeriod();for(int ID=0;ID<main.PlayingPlayers.size();ID++){ final Player p=main.PlayingPlayers.get(ID);if(redTeam.contains(p)){p.getInventory().clear();p.teleport(getArena.getRedSpawn());Bukkit.getScheduler().scheduleSyncDelayedTask(ThisPlugin.getPlugin(),new Runnable(){  @Override public void run(){    SendCoolMessages.resetTitleAndSubtitle(p);    SendCoolMessages.sendTitle(p,""?6"",10,30,10);    SendCoolMessages.sendSubTitle(p,""?c?lYOU JOINED THE ?4?lRED TEAM"",10,30,10);  }},40);p.setGameMode(GameMode.SURVIVAL);p.setFoodLevel(20);p.setHealth(20);p.setDisplayName(""?c""+p.getName());p.setCustomNameVisible(true);p.setPlayerListName(""?c""+p.getName());Color c=Color.fromBGR(0,0,255);p.getInventory().setHelmet(getColorArmor(Material.LEATHER_HELMET,c));p.getInventory().setChestplate(getColorArmor(Material.LEATHER_CHESTPLATE,c));p.getInventory().setLeggings(getColorArmor(Material.LEATHER_LEGGINGS,c));p.getInventory().setBoots(getColorArmor(Material.LEATHER_BOOTS,c));SendCoolMessages.TabHeaderAndFooter(""?4?lRed ?c?lTeam"",""?6?lCOD\n""+getBetterTeam(),p);}else {if(blueTeam.contains(p)){p.getInventory().clear();p.teleport(getArena.getBlueSpawn());Bukkit.getScheduler().scheduleSyncDelayedTask(ThisPlugin.getPlugin(),new Runnable(){  @Override public void run(){    SendCoolMessages.resetTitleAndSubtitle(p);    SendCoolMessages.sendTitle(p,""?6"",10,30,10);    SendCoolMessages.sendSubTitle(p,""?9?lYOU JOINED THE ?1?lBLUE TEAM"",10,30,10);  }},40);p.setGameMode(GameMode.SURVIVAL);p.setFoodLevel(20);p.setHealth(20);p.setDisplayName(""?9""+p.getName());p.setCustomNameVisible(true);p.setPlayerListName(""?9""+p.getName());Color c=Color.fromBGR(255,0,0);p.getInventory().setHelmet(getColorArmor(Material.LEATHER_HELMET,c));p.getInventory().setChestplate(getColorArmor(Material.LEATHER_CHESTPLATE,c));p.getInventory().setLeggings(getColorArmor(Material.LEATHER_LEGGINGS,c));p.getInventory().setBoots(getColorArmor(Material.LEATHER_BOOTS,c));SendCoolMessages.TabHeaderAndFooter(""?9?lBlue ?1?lTeam"",""?6?lCOD\n""+getBetterTeam(),p);}}}}}}"
1552	"public Animation getRotated(Vector dir){Animation other=new Animation(this);for(int i=0;i<frames.length;i++){other.frames[i]=Util.getRotated(frames[i],dir);assert (frames[i]!=other.frames[i]);}other.computeFlipped();return other;}"
1553	"@Override public void onSelection(int pos){try{Toast.makeText(getApplication(),jsonArray.getJSONObject(pos).toString(),Toast.LENGTH_LONG).show();}catch(JSONException e){e.printStackTrace();}}"
1554	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1555	"public final int hashCode(){return key.hashCode()^val.hashCode();}"
1556	"@Override protected void onConfigure(){super.onConfigure();Boolean visibleObject=visible.getObject();boolean isVisible=visibleObject==null?false:visibleObject;Boolean companyObject=company.getObject();boolean isCompany=companyObject==null?false:companyObject;this.setVisible(!isVisible&&isCompany);}"
1557	"@Override public void setInventorySlotContents(int slot,ItemStack itemStack){machineItemStacks[slot]=itemStack;if(itemStack!=null&&itemStack.stackSize>getInventoryStackLimit()){itemStack.stackSize=getInventoryStackLimit();}}"
1558	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
1559	"@Override public void init(){gameCfg=G.game.data.campGame;maps=new Array<>();opp=new Array<>();render=new Array<>();stageIndex=0;mapCfgs=new Array<>();aiCfgs=new Array<>();aiMapNames=new Array<>();if(G.game.dbg.campStart<=1&&G.game.dbg.campEnd>=1){mapCfgs.add(G.game.data.map1);aiCfgs.add(G.game.data.ai1);aiMapNames.add(""Stage 1"");}if(G.game.dbg.campStart<=2&&G.game.dbg.campEnd>=2){mapCfgs.add(G.game.data.map2);aiCfgs.add(G.game.data.ai2);aiMapNames.add(""Stage 2"");}if(G.game.dbg.campStart<=3&&G.game.dbg.campEnd>=3){mapCfgs.add(G.game.data.map3);aiCfgs.add(G.game.data.ai3);aiMapNames.add(""Stage 3"");}if(G.game.dbg.campStart<=4&&G.game.dbg.campEnd>=4){mapCfgs.add(G.game.data.map4);aiCfgs.add(G.game.data.ai4);aiMapNames.add(""Stage 4"");}if(G.game.dbg.campStart<=5&&G.game.dbg.campEnd>=5){mapCfgs.add(G.game.data.map5);aiCfgs.add(G.game.data.ai5);aiMapNames.add(""Stage 5"");}if(G.game.dbg.campStart<=6&&G.game.dbg.campEnd>=6){mapCfgs.add(G.game.data.map6);aiCfgs.add(G.game.data.ai6);aiMapNames.add(""Stage 6"");}if(G.game.dbg.campStart<=7&&G.game.dbg.campEnd>=7){mapCfgs.add(G.game.data.map7);aiCfgs.add(G.game.data.ai7);aiMapNames.add(""Stage 7"");}G.game.input.targetsClear();MapRender r;Map playerMap=new Map(this);playerMap.index=0;maps.add(playerMap);r=new MapRender();r.m=playerMap;render.add(r);playerMap.setCfg(mapCfgs.get(stageIndex));playerMap.name=G.game.data.players.first().name;G.game.input.addTarget(playerMap);if(G.game.dbg.aiPlayerCamp){playerMap.ai=new Ai3();playerMap.ai.init(playerMap,G.game.data.ai7);G.game.input.removeTarget(playerMap);}Map aiMap=new Map(this);aiMap.index=1;maps.add(aiMap);r=new MapRender();r.m=aiMap;render.add(r);aiMap.setCfg(mapCfgs.get(stageIndex));aiMap.name=aiMapNames.get(stageIndex);aiMap.ai=new Ai1();aiMap.ai.init(aiMap,aiCfgs.get(stageIndex));G.game.input.linkAll();if(maps.size>0){maps.get(0).debugShape(G.game.dbg.map0shape);}if(maps.size>1){maps.get(1).debugShape(G.game.dbg.map1shape);}}"
1560	"@Override public View findById(Object source,int id){return ((Dialog)source).findViewById(id);}"
1561	"public void drawGame(Graphics g,Pokemon p,Player cha){fighterLoaderSetUp(g,p);loadHealthBar(g,p);drawSelectorBox(g);if(currentMenu==0){startMenu(g);}else {if(currentMenu==1){moveMenu(g,p);}else {if(currentMenu==2){itemMenu(g);}else {if(currentMenu==3){switchMenu(g,cha);}else {g.drawString(""Opponent is making their move"",(int)(100*World.SCALE),(int)(366*World.SCALE));}}}}}"
1562	"@Override public ServiceResult<VerificationResult> verify(AccountDetails accountDetails){ final Either<ResponseEntity<SilError>,ResponseEntity<VerificationResultWrapper>> response=adaptor.restPostWithEntity(silRestServiceUrl+silExperianVerify,accountDetails,VerificationResultWrapper.class,SilError.class,HttpStatus.OK,HttpStatus.ACCEPTED);if(response.isLeft()){return serviceFailure(new Error(EXPERIAN_VERIFICATION_FAILED));}else {return serviceSuccess(response.getRight().getBody().getVerificationResult());}}"
1563	"@Override public boolean equals(Object o){if(!(o instanceof Associativity)){return false;}Associativity tmp=(Associativity)o;return true&&tmp.associativity.equals(this.associativity);}"
1564	"private String getMappedUriString(RequestMapping mapping){if(mapping==null){return """";}else {return getFirstOrEmpty(mapping.value());}}"
1565	"@RequestMapping(value=""preOrder"",method=RequestMethod.POST) public @ResponseBody Object preOrder(HttpServletRequest httpServletRequest,int code){UserInfo userInfo=MyUtils.getUserByToken(httpServletRequest,userInfoRepository);Discount discount=discountRepository.findDiscountByCode(code);if(null==discount){return new ResultMsg(ResultStatusCode.RETURN_CODE_NULL.getCode(),ResultStatusCode.RETURN_CODE_NULL.getMsg(),code);}Map<String,String> param=new HashMap<>();param.put(""app_id"",AliPayConfig.APPID);param.put(""method"",""alipay.trade.app.pay"");param.put(""format"",AlipayConstants.FORMAT_JSON);param.put(""charset"",AlipayConstants.CHARSET_UTF8);param.put(""timestamp"",Utils.Date2String(new Date()));param.put(""version"",""1.0"");param.put(""notify_url"",AliPayConfig.NOTIFY_URL);param.put(""sign_type"",AlipayConstants.SIGN_TYPE_RSA2);Map<String,Object> pcont=new HashMap<>();String out_trade_no=MyUtils.getTradeNo();pcont.put(""out_trade_no"",out_trade_no);pcont.put(""total_amount"",discount.getDeposit());pcont.put(""subject"",WexinPayConfig.BODY);param.put(""biz_content"",JSONUtil.Obj2String(pcont));Map<String,String> payMap=new HashMap<>();try{String sign=MyUtils.getSign(param);param.put(""sign"",sign);payMap.put(""orderStr"",MyUtils.getSignEncodeUrl(param,true));Payment payment=new Payment(1,out_trade_no,0,discount.getTotal(),new Date());paymentRepository.save(payment);Order order=new Order(out_trade_no,1,0,discount.getDeposit(),""CNY"",userInfo.getId(),new Date(),discount.getCode(),discount.getName(),2);orderRepository.save(order);return new ResultMsg(ResultStatusCode.OK.getCode(),ResultStatusCode.OK.getMsg(),payMap);}catch(AlipayApiException e){e.printStackTrace();}return new ResultMsg(ResultStatusCode.SYSTEM_ERR.getCode(),ResultStatusCode.SYSTEM_ERR.getMsg(),null);}"
1566	"public List<Integer> bfs(int[][] leftView,int[][] rightView,int startly,int startlx,int startry,int startrx,int exitlx,int exitly,int exitrx,int exitry){TIntList queue=new TIntLinkedList();queue.add(Node.getHash((byte)(startlx-100),(byte)(startly-100),(byte)(startrx-100),(byte)(startry-100)));int retVal=-1;breakLabel: while (!queue.isEmpty()) {  int u=queue.removeAt(0);  byte[] bytes=Node.getBytes(u);  int j=bytes[0] + 100;  int i=bytes[1] + 100;  int l=bytes[2] + 100;  int k=bytes[3] + 100;  for (int deltaX=-1; deltaX < 2; deltaX++)   for (int deltaY=-1; deltaY < 2; deltaY++) {    if (deltaX == 0 && deltaY == 0)     continue;    int iprime=-1, jprime=-1, kprime=-1, lprime=-1;    iprime=incr(leftView.length,i,deltaY,iprime);    jprime=incr(leftView[0].length,j,deltaX,jprime);    kprime=incr(leftView.length,k,deltaY,kprime);    lprime=incr(leftView[0].length,l,deltaX,lprime);    if (iprime == -1 || jprime == -1 || kprime == -1 || lprime == -1)     continue;    if (leftView[iprime][jprime] == 1 && rightView[kprime][lprime] == 1)     continue;    if (leftView[iprime][jprime] == 4 || rightView[kprime][lprime] == 4)     continue;    if (leftView[iprime][jprime] == 1) {      iprime=i;      jprime=j;    }    if (rightView[kprime][lprime] == 1) {      kprime=k;      lprime=l;    }    int v=Node.getHash((byte)(jprime - 100),(byte)(iprime - 100),(byte)(lprime - 100),(byte)(kprime - 100));    if (parent.containsKey(v))     continue;    parent.put(v,u);    queue.add(v);    if (leftView[iprime][jprime] == 2 && rightView[kprime][lprime] == 2) {      assert (iprime == exitlx && jprime == exitly && kprime == exitrx && lprime == exitry);      retVal=0;      break breakLabel;    }  }}int v=Node.getHash((byte)(exitlx-100),(byte)(exitly-100),(byte)(exitrx-100),(byte)(exitry-100));if(parent.containsKey(v)){Stack<Integer> path=new Stack<Integer>();while(parent.get(v)!=Integer.MIN_VALUE){int u=parent.get(v);path.push(getDir(u,v));}List<Integer> p=new LinkedList<Integer>();while(!path.isEmpty()){p.add(path.pop());}return p;}return null;}"
1567	"private void storeArtifact(RepositoryPath repositoryPath,InputStream is,ArtifactOutputStream aos) throws IOException,ProviderImplementationException{Repository repository=repositoryPath.getFileSystem().getRepository();Storage storage=repository.getStorage();String repositoryId=repository.getId();String storageId=storage.getId();String artifactPathRelative=repositoryPath.getRepositoryRelative().toString();String artifactPath=storageId+""/""+repositoryId+""/""+artifactPathRelative;LayoutProvider layoutProvider=getLayoutProvider(repository,layoutProviderRegistry);boolean updatedMetadataFile=false;boolean updatedArtifactFile=false;boolean updatedArtifactChecksumFile=false;if(Files.exists(repositoryPath.getTarget())){if(layoutProvider.isMetadata(artifactPath)){updatedMetadataFile=true;}else {if(layoutProvider.isChecksum(repositoryPath)){updatedArtifactChecksumFile=true;}else {updatedArtifactFile=true;}}}Boolean checksumAttribute=(Boolean)Files.getAttribute(repositoryPath,RepositoryFileAttributes.CHECKSUM);if(Boolean.TRUE.equals(checksumAttribute)){aos.setCacheOutputStream(new ByteArrayOutputStream());}if(repository.isHostedRepository()){artifactEventListenerRegistry.dispatchArtifactUploadingEvent(storageId,repositoryId,artifactPath);}else {artifactEventListenerRegistry.dispatchArtifactDownloadingEvent(storageId,repositoryId,artifactPath);}int readLength;byte[] bytes=new byte[4096];while((readLength=is.read(bytes,0,bytes.length))!=-1){aos.write(bytes,0,readLength);aos.flush();}if(updatedMetadataFile){artifactEventListenerRegistry.dispatchArtifactMetadataFileUpdatedEvent(storageId,repositoryId,artifactPath);}if(updatedArtifactChecksumFile){artifactEventListenerRegistry.dispatchArtifactChecksumFileUpdatedEvent(storageId,repositoryId,artifactPath);}if(updatedArtifactFile){artifactEventListenerRegistry.dispatchArtifactUploadedEvent(storageId,repositoryId,artifactPath);}if(!layoutProvider.isChecksum(repositoryPath)&&!layoutProvider.isMetadata(repositoryPath.toString())){artifactEventListenerRegistry.dispatchArtifactUploadedEvent(storageId,repositoryId,artifactPath);}Map<String,String> digestMap=aos.getDigestMap();if(Boolean.FALSE.equals(checksumAttribute)&&!digestMap.isEmpty()){addChecksumsToCacheManager(digestMap,artifactPath);}if(Boolean.TRUE.equals(checksumAttribute)){byte[] checksumValue=((ByteArrayOutputStream)aos.getCacheOutputStream()).toByteArray();if(checksumValue!=null&&checksumValue.length>0&&!updatedArtifactChecksumFile){artifactEventListenerRegistry.dispatchArtifactChecksumUploadedEvent(storageId,repositoryId,artifactPath);validateUploadedChecksumAgainstCache(checksumValue,artifactPath);}}}"
1568	"@Override protected void run() throws DatabaseException{currentIt=null;getNextBatch();while(nextBatch.size()>0){List<T> currBatchResults=queryObject(clazz,nextBatch,activeOnly);if(currBatchResults.size()>0){currentIt=currBatchResults.iterator();break;}getNextBatch();}}"
1569	"private void changePowerState(URI csId,URI ceId,String state) throws DeviceControllerException{LOGGER.info(""changePowerState"");ComputeElement ce=_dbClient.queryObject(ComputeElement.class,ceId);ComputeSystem cs=_dbClient.queryObject(ComputeSystem.class,csId);OperationTypeEnum typeEnum=POWER_DOWN.equals(state)?OperationTypeEnum.POWERDOWN_COMPUTE_ELEMENT:OperationTypeEnum.POWERUP_COMPUTE_ELEMENT;try{URL ucsmURL=getUcsmURL(cs);ucsmService.setLsServerPowerState(ucsmURL.toString(),cs.getUsername(),cs.getPassword(),ce.getDn(),state);pullAndPollManagedObject(ucsmURL.toString(),cs.getUsername(),cs.getPassword(),ce.getLabel(),ComputeBlade.class);}catch(ComputeSystemControllerTimeoutException cstoe){LOGGER.error(""Unable to change power state of compute element due to a device TimeOut"",cstoe);throw cstoe;}catch(Exception e){LOGGER.error(""Unable to change power state of compute element due to a exception"",e);throw ComputeSystemControllerException.exceptions.powerStateChangeFailed(state,ce!=null?ce.getId().toString():null,e);}_auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE_CE,typeEnum,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_END,ce.getId().toString(),ce.getLabel(),ce.getNativeGuid(),ce.getUuid(),ce.getOriginalUuid());}"
1570	"@Override public void onDataChange(DataSnapshot dataSnapshot){for(DataSnapshot routeSnapshot : dataSnapshot.getChildren()){ final String timeslot=routeSnapshot.getKey(); final String routeKey=routeSnapshot.getValue().toString();Log.d(TAG,""Timeslot pre ""+timeslot);mRouteKeysByTimeslot.put(timeslot,routeKey);DatabaseReference routeRef=FirebaseUtil.getRoutesRef().child(routeKey);routeRef.addValueEventListener(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    Route route=dataSnapshot.getValue(Route.class);    route.setKey(dataSnapshot.getKey());    mRoutesByKey.put(route.getKey(),route);    Log.d(TAG,""Timeslot post "" + timeslot);    mCurrentRouteKeys.put(timeslot.toUpperCase(),route.getKey());switch (timeslot.toUpperCase()) {case ""MON_AM"":      monAmText.setText(route.getName());    break;case ""MON_PM"":  monPmText.setText(route.getName());break;case ""TUES_AM"":tuesAmText.setText(route.getName());break;case ""TUES_PM"":tuesPmText.setText(route.getName());break;case ""WED_AM"":wedAmText.setText(route.getName());break;case ""WED_PM"":wedPmText.setText(route.getName());break;case ""THURS_AM"":thursAmText.setText(route.getName());break;case ""THURS_PM"":thursPmText.setText(route.getName());break;case ""FRI_AM"":friAmText.setText(route.getName());break;case ""FRI_PM"":friPmText.setText(route.getName());break;}}@Override public void onCancelled(DatabaseError databaseError){}});}}"
1571	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1572	"private void removeVolumeFromConsistencyGroup(StorageSystem storage,Volume volume) throws Exception{CloseableIterator<CIMObjectPath> assocVolNamesIter=null;try{String groupName=null;if(NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance())){groupName=volume.getReplicationGroupInstance();}else {groupName=_helper.getConsistencyGroupName(volume,storage);}storage=findProviderFactory.withGroup(storage,groupName).find();if(storage==null){_log.warn(""Replication Group {} not found. Skipping Remove Volume from CG step."",groupName);return ;}CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,groupName);CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);CIMArgument[] inArgs;CIMArgument[] outArgs=new CIMArgument[5];CIMInstance cgPathInstance=_helper.checkExists(storage,cgPath,false,false);if(cgPathInstance!=null){CIMObjectPath[] volumePaths=_cimPath.getVolumePaths(storage,new String{volume.getNativeId()});boolean volumeIsInGroup=false;assocVolNamesIter=_helper.getAssociatorNames(storage,cgPath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);while(assocVolNamesIter.hasNext()){CIMObjectPath assocVolPath=assocVolNamesIter.next();String deviceId=assocVolPath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();if(deviceId.equalsIgnoreCase(volume.getNativeId())){volumeIsInGroup=true;break;}}if(volumeIsInGroup){boolean cgHasGroupRelationship=false;if(volume.isInCG()){cgHasGroupRelationship=ControllerUtils.checkCGHasGroupRelationship(volume.getConsistencyGroup(),_dbClient);}if(cgHasGroupRelationship){CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,groupName,SmisConstants.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);_log.info(""Removing volume {} from device masking group {}"",volume.getNativeId(),maskingGroupPath.toString());inArgs=_helper.getAddOrRemoveMaskingGroupMembersInputArguments(maskingGroupPath,volumePaths,true);_helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.REMOVE_MEMBERS,inArgs,outArgs,null);}else {inArgs=_helper.getRemoveMembersInputArguments(cgPath,volumePaths);_helper.invokeMethod(storage,replicationSvc,SmisConstants.REMOVE_MEMBERS,inArgs,outArgs);}}else {_log.info(""Volume {} is no longer in the replication group {}"",volume.getNativeId(),cgPath.toString());}}else {_log.warn(""The Consistency Group {} does not exist on the array."",cgPath);}}catch(Exception e){_log.error(""Problem making SMI-S call: "",e);throw e;}finally{if(assocVolNamesIter!=null){assocVolNamesIter.close();}}}"
1573	"@Override public void windowClosing(WindowEvent e){ui.unblurFrame();}"
1574	"@Bean public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties){ProxyRequestHelper helper=new ProxyRequestHelper();helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());return helper;}"
1575	"public int search(int[] linkTime,int[] linkHash,int minHit){hashMap.clear();for(int i=0;i<linkHash.length;i++){ final ArrayList<Node> list=Database.get(linkHash[i]); final int time=linkTime[i];list.forEach(node -> {  long idHash=Index.idHash(node.id,node.time - time);  Integer count=hashMap.get(idHash);  if (count == null)   count=0;  hashMap.put(idHash,count + 1);});}maxId=-1;maxCount=-1;hashMap.forEach((hash,integer) -> {  if (integer > minHit && integer > maxCount) {    maxId=hash;    maxCount=integer;  }});System.out.println(Hash2id(maxId)+"":""+maxCount);return Hash2id(maxId);}"
1576	"public void addTimer(TimerSession... timerSessions) throws TimerConflictException{for(TimerSession timerSession : timerSessions){if(isTimerConflict(timerSession)){throw new TimerConflictException(""Timer ""+timerSession+"" conflicts with existing timers"");}else {timerSession.setId(timerController.generateNextId());timerSession.addObserver(this);if(!timerSession.getActive()){timerController.setAlarm(timerSession);}timers.add(timerSession);timersIdMap.put(timerSession.getId(),timerSession);notifyViewChanged();}}}"
1577	"public void remove_last_col(){if(is_empty()){throw new RuntimeException(""Cannot remove the last column, since table is empty"");}remove_col(table.get(0).size()-1);}"
1578	"@Override public Date getCreated(){return null;}"
1579	"@Override public int compare(AppInfo o1,AppInfo o2){return o1.time>o2.time?-1:1;}"
1580	"private boolean checkLineItem(String labname,Id courseId) throws KeyNotFoundException,PersistenceException{if(getLineItem(labname,courseId)!=null){return true;}return false;}"
1581	"public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
1582	"public void start(){if(!mImpl.start()){mImpl=new Camera1(mCallbacks,createPreviewImpl(getContext()));mImpl.start();}}"
1583	"public static String extractVideoCode(String s){s=NetworkHelper.stripProtocol(s);if(s.startsWith(""www.youtube.com/watch?v="")){s=s.substring(24);}else {if(s.startsWith(""youtu.be/"")){s=s.substring(9);}else {if(isYoutubeVideoCode(s.substring(0,11))){return s;}else {return null;}}}if(isYoutubeVideoCode(s.substring(0,11))){return s;}return null;}"
1584	"private void initConnectTimeout(RequestConfig classRequestConfig,MethodOptions methodOptions,RequestConfig methodRequestConfig){Integer classConnectTimeout=this.configLoader.loader(this.className+ConfigLoader.CONNECT_TIMEOUT,classRequestConfig==null?RequestDefault.CONNECT_TIMEOUT:classRequestConfig.connectTimeout());Integer methodConnectTimeout=this.configLoader.loader(this.classMethodName+ConfigLoader.CONNECT_TIMEOUT,methodRequestConfig==null?RequestDefault.CONNECT_TIMEOUT:methodRequestConfig.connectTimeout());methodOptions.setConnectTimeout(notDef(methodConnectTimeout,-1,classConnectTimeout));}"
1585	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
1586	"@Override public InputStream toAsciiStream(OptimizedElementArray row,int columnPosition,LobService lobService) throws SQLException{return new ReaderInputStream(new StringReader(toString(row,columnPosition)),StandardCharsets.US_ASCII);}"
1587	"public static Configuration loadConfiguration(InputSource configSource,PropertyResolver overridePropsResolver,boolean omitIgnoredModules) throws CheckstyleException{try{ final ConfigurationLoader loader=new ConfigurationLoader(overridePropsResolver,omitIgnoredModules);loader.parseInputSource(configSource);return loader.configuration;}catch(SAXParseException e){ final String message=String.format(""%s - %s:%s:%s"",UNABLE_TO_PARSE_EXCEPTION_PREFIX,e.getMessage(),e.getLineNumber(),e.getColumnNumber());throw new CheckstyleException(message,e);}catch(ParserConfigurationException|IOException|SAXException e){throw new CheckstyleException(UNABLE_TO_PARSE_EXCEPTION_PREFIX,e);}}"
1588	"@Override public void SyncAppData(){JSONArray arr_data=registeration_response.optJSONObject(""data"").optJSONArray(""TaskLists"");for(int i=0;i<arr_data.length();i++){try{JSONObject temp=arr_data.getJSONObject(i);TaskListModel model=new TaskListModel(temp.getString(""Title""));model.syncStatus=""Synced"";model.server_id=temp.optString(""TaskListId"");model.DateUpdated=Common.toDeviceTime(temp.optString(""DateUpdated""));model.DateCreated=Common.toDeviceTime(temp.optString(""DateCreated""));model.fragmentColor=temp.optString(""Color"");model.icon_identifier=temp.optInt(""Icon"");model.title=temp.optString(""Title"");JSONArray arr_users=temp.optJSONArray(""Users"");String owner_id=temp.optString(""OwnerId"");if(owner_id!=null&&user_data.gravity_user_id.equals(owner_id)){model.owner_id=user_data._id;}for(int j=0;j<arr_users.length();j++){JSONObject arr_user=arr_users.getJSONObject(j);UserModel m=db.users.Get(arr_user.optString(""UserId""));if(m==null){m=new UserModel(arr_user);m._id=db.users.Add(m);}if(arr_user.optString(""UserId"").equals(owner_id)&&m._id!=-1){model.owner_id=m._id;}}int id=db.tasklists.Add(model);JSONArray tasks=temp.optJSONArray(""Tasks"");for(int j=0;j<tasks.length();j++){TaskModel taskModel=new TaskModel();JSONObject taskObj=tasks.getJSONObject(j);taskModel.title=taskObj.optString(""Title"");taskModel.details=taskObj.optString(""Details"");taskModel.notes=taskObj.optString(""Notes"");if(taskObj.optBoolean(""Completed"")){taskModel.completed=1;}else {taskModel.completed=0;}taskModel.server_id=taskObj.optString(""TaskId"");if(taskObj.optBoolean(""isAllDay"")){taskModel.allDay=1;}else {taskModel.allDay=0;}taskModel.DateCreated=Common.toDeviceTime(taskObj.optString(""DateCreated""));taskModel.DateUpdated=Common.toDeviceTime(taskObj.optString(""DateUpdated""));taskModel.startDateTime=Common.toDeviceTime(taskObj.optString(""StartDate""));taskModel.endDateTime=Common.toDeviceTime(taskObj.optString(""EndDate""));taskModel.rep_interval=taskObj.optInt(""Rep_Interval"");taskModel.rep_intervalType=taskObj.optInt(""Rep_Type"");taskModel.rep_intervalExpiration=taskObj.optString(""Rep_Expiration"");taskModel.rep_value=taskObj.optString(""Rep_Value"");taskModel.syncStatus=""Synced"";taskModel.fk_tasklist_id=id;int task_id=db.tasks.Add(taskModel);JSONArray notifications=taskObj.optJSONArray(""Notifications"");for(int k=0;k<notifications.length();k++){TaskNotificationsModel mTaskNotificationsModel=new TaskNotificationsModel();JSONObject notifObj=notifications.getJSONObject(k);mTaskNotificationsModel.fk_task_id=task_id;mTaskNotificationsModel.interval=notifObj.optInt(""Interval"");mTaskNotificationsModel.interval_type=notifObj.optInt(""Type"");mTaskNotificationsModel.interval_expiration=notifObj.optString(""Expiration"");mTaskNotificationsModel.send_as=notifObj.optInt(""SendAs"");mTaskNotificationsModel.server_id=notifObj.optString(""Id"");db.notification.Add(mTaskNotificationsModel,task_id);}}}catch(JSONException e){e.printStackTrace();}}addProgressTask(getString(R.string.gravity_fetch_data_success));}"
1589	"@Override public void onSelection(SelectionEvent<Item> event){removeAll(row,true);}"
1590	"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){if(requestCode==1000&&resultCode==OK_STATUS){int data1=data.getExtras().getInt(""data"",-1);if(data1!=-1){icon.setImageResource(data1);if(currentDevice!=null){currentDevice.iconRes=data1;}else {if(currentZone!=null){currentZone.iconRes=data1;}}}}}"
1591	"@Override public int compareTo(PreReleasePart o){if(o instanceof StringPreReleasePart){return -1;}return value-((NumberPreReleasePart)o).value;}"
1592	"@Override public void onClick(ClickEvent event){eventBus.requestStarStatusUpdate(view.getOfferGrid().getSelectedUserMessageIds(),true);}"
1593	"public boolean isLegal(){return targets.stream().anyMatch(t -> t.isLegal())&&materialCombinations.stream().anyMatch(c -> c.isLegal());}"
1594	"@Override public void onReceive(Context context,Intent intent){LoggerFactory.getLogger(BootCompleteReceiver.class.getSimpleName()).info(""Received boot completed event"");ServiceStarter.INSTANCE.startServiceWithCondition(context);}"
1595	"public void onClick(DialogInterface dialog,int whichButton){dialog.dismiss();}"
1596	"public boolean isCovered(Hex h1,Hex h2,Hex h3){}"
1597	"@Override public void onSeriesItemAnimationProgress(float percentComplete,float currentPosition){if(formatDistance.contains(""km"")){activityTexts[BIKE_INDEX].setTextSize(12);activityTexts[BIKE_INDEX].setText(String.format(formatDistance,currentPosition));}else {activityTexts[BIKE_INDEX].setText(String.format(formatDistance,currentPosition));}}"
1598	"@Override public void onClick(View v){stock.setPricePurchased(Double.parseDouble(addNumPurchased.getText().toString()));database.getStockDao().insertOrReplace(stock);startPortfolio();}"
1599	"private void updateField(String fieldName,Object value){String getterName=beanNamingExpert.getGetterName(fieldName);FieldAccessor fieldAccessor=fieldAccessorParser.parse(modelType,getterName).orElseThrow(IllegalArgumentException::new);if(reflections.isAssignableTo(fieldAccessor.getDeclaredType(),EntityReference.class)){Entity casted=(Entity)value;entityDataBuilder.with(fieldAccessor,entityReferenceProvider.newReference(casted));}else {entityDataBuilder.with(fieldAccessor,value);}}"
1600	"protected FieldAccessorTable internalGetFieldAccessorTable(){return pipe.work.Work.internal_static_WorkState_fieldAccessorTable.ensureFieldAccessorsInitialized(pipe.work.Work.WorkState.class,pipe.work.Work.WorkState.Builder.class);}"
1601	"private void forBegin(){Intent intent=new Intent(this,GameRight.class);startActivity(intent);}"
1602	"@Override public int getValue(){return controller.hasEssentials?1:0;}"
1603	"@Override public void onResponse(String response){if(response!=null){RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getApplicationContext(),LinearLayoutManager.VERTICAL,false);recyclerView=(RecyclerView)findViewById(R.id.mainRecyclerView);recyclerView.setLayoutManager(layoutManager);MainRecyclerAdapter adapter=null;try{adapter=new MainRecyclerAdapter(getApplicationContext(),response);}catch(JSONException e){e.printStackTrace();}recyclerView.setAdapter(new AlphaInAnimationAdapter(adapter));loading.dismiss();}else {displayInformationLayout(R.string.error_title,R.string.error_quering_data,R.drawable.ic_error);}}"
1604	"@Override public void setIgnoreWhitespace(boolean ignoreWhitespace){this.isIgnoreWhitespace=ignoreWhitespace;}"
1605	"@Override protected boolean word(int base,int u3,long[] a3,long[] b3,long mask){return (a3[u3]&=b3[u3]|~mask)==0L;}"
1606	"private String validateOperationAndType(Step step,ModelClient client){if(!(step.getId().equals(StepType.START.toString())||step.getId().equals(StepType.END.toString()))){if(step.getOperation()==null){return CustomServicesConstants.ERROR_MSG_STEP_OPERATION_REQUIRED;}if(step.getType()==null){return CustomServicesConstants.ERROR_MSG_STEP_TYPE_REQUIRED;}else {switch (step.getType()){case CustomServicesConstants.VIPR_PRIMITIVE_TYPE :return EMPTY_STRING;case CustomServicesConstants.SCRIPT_PRIMITIVE_TYPE :case CustomServicesConstants.ANSIBLE_PRIMITIVE_TYPE :case CustomServicesConstants.REST_API_PRIMITIVE_TYPE :case CustomServicesConstants.REMOTE_ANSIBLE_PRIMTIVE_TYPE :return checkOperationExists(client,step.getOperation());default :return CustomServicesConstants.ERROR_MSG_STEP_TYPE_INVALID;}}}return EMPTY_STRING;}"
1607	"public QMUIRoundFrameLayout(Context context,AttributeSet attrs,int defStyleAttr){super(context,attrs,defStyleAttr);init(context,attrs);}"
1608	"@Override public boolean apply(ItemStack input){return true;}"
1609	"@Override boolean step(DebuggerSession steppingSession,EventContext context,SteppingLocation location){return true;}"
1610	"protected void initLineVisual(GL4 gl4,pmLineVisual line){plineList=new pmLineVisual[2];plineList[0]=line;plineList[1]=new pmLineVisual(gl4,line);}"
1611	"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){View view=inflater.inflate(R.layout.fragment_popular,container,false);ButterKnife.bind(this,view);refreshArticles.setRefreshing(true);mArticles=new ArrayList<>();ref=News4UApp.getArticleMostViewedEndpoint();articlesListener();setArticlesList();return view;}"
1612	"@Override protected void onHandleIntent(Intent intent){Geocoder geocoder=new Geocoder(this,Locale.getDefault());List<Address> addresses=null;Location location=intent.getParcelableExtra(Constants.LOCATION_DATA);mReceiver=intent.getParcelableExtra(Constants.RECEIVER);try{addresses=geocoder.getFromLocation(location.getLatitude(),location.getLongitude(),1);}catch(IOException e){Log.e(TAG,""onHandleIntent: Service not available"",e);}catch(IllegalArgumentException e){Log.e(TAG,""onHandleIntent: Invalid latitude or longitude - lat ""+location.getLatitude()+"", lng ""+location.getLongitude(),e);}catch(NullPointerException e){Log.e(TAG,""onHandleIntent: Location is null"",e);}if(addresses==null||addresses.size()==0){Log.e(TAG,""onHandleIntent: No address found"");deliverResultToReceiver(Constants.RESULT_FAILURE,null);}else {Address address=addresses.get(0);Log.i(TAG,""onHandleIntent: Address found"");deliverResultToReceiver(Constants.RESULT_SUCCESS,address);}}"
1613	"public void doFor(int p) throws Exception{if((pdfPageContents[p]==null)||(pdfPageResources[p]==null)){return ;}spm.setInfo(""Assessing font char usage in page ""+p+"" of ""+pdfPages.length);spm.setProgress((p*100)/pdfPages.length);PdfParser.getPageWordChars(pdfPages[p].getEntries(),pdfPageContents[p],pdfPageResources[p],objects,spm);}"
1614	"@Override public void drawEntry(int slotIndex,int x,int y,int listWidth,int slotHeight,int mouseX,int mouseY,boolean isSelected){if(lastClickedRule!=null){nameField.setFocused(false);}drawHorizontalLine(x,x+listWidth,y-3,0xff808080);drawString(fontRenderer,title,x,y+6,0xffffff);this.nameField.xPosition=x+listWidth/2;this.nameField.yPosition=y;this.nameField.drawTextBox();this.createButton.xPosition=x+listWidth/2+110;this.createButton.yPosition=y;this.createButton.enabled=isValidName(this.nameField.getText());this.createButton.drawButton(mc,mouseX,mouseY);}"
1615	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1616	"@Override public void close(TaskAttemptContext context) throws IOException,InterruptedException{if(batchSize>1){int len,sid;if(countBased){len=1;sid=sfId;}else {len=fastLoad?forestIds.length:1;sid=0;}for(int i=0;i<len;i++,sid++){if(counts[i]>0){Content[] remainder=new Content[counts[i]];System.arraycopy(forestContents[i],0,remainder,0,counts[i]);if(sessions[sid]==null){sessions[sid]=getSession(i,false);}insertBatch(remainder,sid);stmtCounts[sid]++;if(!isCopyProps){continue;}for(int j=0;j<counts[i];j++){DocumentMetadata m=metadatas[i][j].getMeta();String u=metadatas[i][j].getUri();if(m!=null&&m.getProperties()!=null){setDocumentProperties(u,m.getProperties(),null,null,null,null,sessions[sid]);stmtCounts[sid]++;}}}}}for(int i=0;i<sessions.length;i++){if(sessions[i]!=null){if(stmtCounts[i]>0&&needCommit){try{sessions[i].commit();succeeded+=commitUris[i].size();}catch(RequestException e){LOG.error(""Error commiting transaction"",e);failed+=commitUris[i].size();for(DocumentURI failedUri : commitUris[i]){LOG.warn(""Failed document ""+failedUri);}commitUris[i].clear();}finally{sessions[i].close();}}else {sessions[i].close();}}}context.getCounter(MarkLogicCounter.OUTPUT_RECORDS_COMMITTED).increment(succeeded);context.getCounter(MarkLogicCounter.OUTPUT_RECORDS_FAILED).increment(failed);}"
1617	"private boolean r_consonant_pair(){int v_1;int v_2;int v_3;v_1=limit-cursor;if(cursor<I_p1){return false;}cursor=I_p1;v_2=limit_backward;limit_backward=cursor;cursor=limit-v_1;v_3=limit-cursor;if(find_among_b(a_1,7)==0){limit_backward=v_2;return false;}cursor=limit-v_3;ket=cursor;if(cursor<=limit_backward){limit_backward=v_2;return false;}cursor--;bra=cursor;slice_del();limit_backward=v_2;return true;}"
1618	"private WebElement tdEvent(SodaHash event,WebElement parent){boolean required=true;boolean click=false;WebElement element=null;this.report.Log(""TD event Started."");if(event.containsKey(""required"")){required=this.clickToBool(event.get(""required"").toString());}try{element=this.findElement(event,parent,required);if(element==null){this.report.Log(""TD event finished."");return element;}String value=element.getText();handleVars(value,event);if(event.containsKey(""click"")){click=this.clickToBool(event.get(""click"").toString());}if(click){this.report.Log(""Click element."");this.firePlugin(element,SodaElements.TD,SodaPluginEventType.BEFORECLICK);element.click();this.firePlugin(element,SodaElements.TD,SodaPluginEventType.AFTERCLICK);this.report.Log(""Click finished."");}}catch(ElementNotVisibleException exp){this.report.ReportError(""Error: The element you are trying to access is not visible!"");}catch(Exception exp){element=null;this.report.ReportException(exp);}if(event.containsKey(""children"")){this.processEvents((SodaEvents)event.get(""children""),element);}this.report.Log(""TD event finished."");return element;}"
1619	"public String encode(VariantContext context){if(this.header==null){throw new NullPointerException(""The header field must be set on the VCFEncoder before encoding records."");} final StringBuilder stringBuilder=new StringBuilder();stringBuilder.append(context.getContig()).append(VCFConstants.FIELD_SEPARATOR).append(String.valueOf(context.getStart())).append(VCFConstants.FIELD_SEPARATOR).append(context.getID()).append(VCFConstants.FIELD_SEPARATOR).append(context.getReference().getDisplayString()).append(VCFConstants.FIELD_SEPARATOR);if(context.isVariant()){Allele altAllele=context.getAlternateAllele(0);String alt=altAllele.getDisplayString();stringBuilder.append(alt);for(int i=1;i<context.getAlternateAlleles().size();i++){altAllele=context.getAlternateAllele(i);alt=altAllele.getDisplayString();stringBuilder.append(',');stringBuilder.append(alt);}}else {stringBuilder.append(VCFConstants.EMPTY_ALTERNATE_ALLELE_FIELD);}stringBuilder.append(VCFConstants.FIELD_SEPARATOR);if(!context.hasLog10PError()){stringBuilder.append(VCFConstants.MISSING_VALUE_v4);}else {stringBuilder.append(formatQualValue(context.getPhredScaledQual()));}stringBuilder.append(VCFConstants.FIELD_SEPARATOR).append(getFilterString(context)).append(VCFConstants.FIELD_SEPARATOR); final Map<String,String> infoFields=new TreeMap<String,String>();for(Map.Entry<String,Object> field : context.getAttributes().entrySet()){if(!this.header.hasInfoLine(field.getKey())){fieldIsMissingFromHeaderError(context,field.getKey(),""INFO"");} final String outputValue=formatVCFField(field.getValue());if(outputValue!=null){infoFields.put(field.getKey(),outputValue);}}writeInfoString(infoFields,stringBuilder); final GenotypesContext gc=context.getGenotypes();if(gc.isLazyWithData()&&((LazyGenotypesContext)gc).getUnparsedGenotypeData() instanceof String){stringBuilder.append(VCFConstants.FIELD_SEPARATOR);stringBuilder.append(((LazyGenotypesContext)gc).getUnparsedGenotypeData().toString());}else { final List<String> genotypeAttributeKeys=context.calcVCFGenotypeKeys(this.header);if(!genotypeAttributeKeys.isEmpty()){for(String format : genotypeAttributeKeys){if(!this.header.hasFormatLine(format)){fieldIsMissingFromHeaderError(context,format,""FORMAT"");}} final String genotypeFormatString=ParsingUtils.join(VCFConstants.GENOTYPE_FIELD_SEPARATOR,genotypeAttributeKeys);stringBuilder.append(VCFConstants.FIELD_SEPARATOR);stringBuilder.append(genotypeFormatString); final Map<Allele,String> alleleStrings=buildAlleleStrings(context);addGenotypeData(context,alleleStrings,genotypeAttributeKeys,stringBuilder);}}return stringBuilder.toString();}"
1620	"@Override public void onConfigured(CameraCaptureSession cameraCaptureSession){if(mCameraDevice==null){return ;}mCaptureSession=cameraCaptureSession;try{if(previewSession.getPreviewRequest()==null){mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);}mPreviewRequest=mPreviewRequestBuilder.build();mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);}catch(CameraAccessException e){reportCameraAccessException(e);}}"
1621	"@Override public double apply(Variable v){return 0;}"
1622	"@Override public V get(Object key){return getOrDefault(key,null);}"
1623	"@Override public void onSwiped(RecyclerView.ViewHolder viewHolder,int direction){if(direction==ItemTouchHelper.LEFT){}else {if(direction==ItemTouchHelper.RIGHT){}}}"
1624	"public int toklen(){return mark;}"
1625	"public boolean write(String msg){boolean canWrite=channel.isConnected()&&channel.isWritable();while(!canWrite){try{Thread.sleep(500);}catch(InterruptedException e){logger.error(ExceptionUtil.getErrorMessage(e));}canWrite=channel.isConnected()&&channel.isWritable();}channel.write(msg.replaceAll(delimiter,multilineDelimiter)+delimiter);return true;}"
1626	"public void addBinaryTree(String[] data){}"
1627	"private void appendClassVarVal(ExecValue parent,String varId,boolean isElementOfArray,ObjectReference objRef,int level,ThreadReference thread,boolean isRoot,boolean isField,boolean isStatic){ClassType type=(ClassType)objRef.type();long refID=objRef.uniqueID();ReferenceValue val=this.objectPool.get(refID);if(val==null){val=new ReferenceValue(varId,false,refID,type,isRoot,isField,isStatic);this.objectPool.put(refID,val);Map<Field,Value> fieldValueMap=objRef.getValues(type.allFields());for(Field field : type.allFields()){boolean isIgnore=HeuristicIgnoringFieldRule.isForIgnore(type.name(),field.name());if(!isIgnore){String childVarID=val.getChildId(field.name());Value childVarValue=fieldValueMap.get(field);appendVarVal(val,childVarID,false,childVarValue,level,thread,false,true,field.isStatic());}}}parent.add(val);val.addParent(parent);}"
1628	"public boolean applies(Battle b,ActivePokemon user,ActivePokemon victim){return true;}"
1629	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){View rootView=inflater.inflate(R.layout.fragment_detail,container,false);return rootView;}"
1630	"@Override public CommandResult<CanvasViolation> execute(AbstractCanvasHandler context){ final Diagram diagram=context.getDiagram(); final String shapeSetId=context.getDiagram().getMetadata().getShapeSetId();treeWalkTraverseProcessor.useEdgeVisitorPolicy(TreeWalkTraverseProcessor.EdgeVisitorPolicy.VISIT_EDGE_AFTER_TARGET_NODE).traverse(diagram.getGraph(),new AbstractTreeTraverseCallback<Graph,Node,Edge>(){  @Override @SuppressWarnings(""unchecked"") public boolean startNodeTraversal(  final Node node){    if (node.getContent() instanceof View) {      context.register(shapeSetId,node);      context.applyElementMutation(node,MutationContext.STATIC);      return true;    }    return false;  }  @Override @SuppressWarnings(""unchecked"") public boolean startEdgeTraversal(  final Edge edge){    final Object content=edge.getContent();    if (content instanceof Child) {      final Node child=edge.getTargetNode();      final Node parent=edge.getSourceNode();      final Object childContent=child.getContent();      if (childContent instanceof View) {        context.addChild(parent,child);      }      return true;    }    return false;  }  @Override public void endGraphTraversal(){    context.getCanvas().draw();  }});return buildResult();}"
1631	"@Override public boolean hasNext(){return myBuffer.hasRemaining();}"
1632	"public int wait4landing(Aeroplane sh) throws InterruptedException{boolean found=false;int pad=-1;while(!found){int i=(int)((Assignment2.DESTINATIONS)*Math.random());if(pads[i]==null){found=true;pad=i;pads[i]=sh;break;}}try{semPadLand[pad].acquire();}catch(InterruptedException e){}if(sh.passengers==0){semPadReady[pad].release();}return pad;}"
1633	"public static TrackState extrapolateTrackUsingFieldMap(TrackState track,double startPositionX,double endPositionX,double stepSize,FieldMap fieldMap){Hep3Vector currentPosition=TrackUtils.extrapolateHelixToXPlane(track,startPositionX);HelicalTrackFit helicalTrackFit=TrackUtils.getHTF(track);double pathToStart=HelixUtils.PathToXPlane(helicalTrackFit,startPositionX,0.0,0).get(0);double bFieldY=fieldMap.getField(new BasicHep3Vector(0,0,500.0)).y();double p=Math.abs(helicalTrackFit.p(bFieldY));Hep3Vector helixDirection=HelixUtils.Direction(helicalTrackFit,pathToStart);Hep3Vector currentMomentum=VecOp.mult(p,helixDirection);double q=Math.signum(track.getOmega());if(bFieldY<0){q=q*(-1);}boolean stepSizeChange=false;while(currentPosition.x()<endPositionX){Hep3Vector currentPositionDet=CoordinateTransformations.transformVectorToDetector(currentPosition);bFieldY=fieldMap.getField(currentPositionDet).y();Trajectory trajectory=getTrajectory(currentMomentum,new org.lcsim.spacegeom.SpacePoint(currentPosition),q,bFieldY);currentPosition=trajectory.getPointAtDistance(stepSize);currentMomentum=VecOp.mult(currentMomentum.magnitude(),trajectory.getUnitTangentAtLength(stepSize));if(currentPosition.x()/endPositionX>0.8&&!stepSizeChange){stepSize/=10;stepSizeChange=true;}}double doca=currentPosition.x()*currentPosition.x()+currentPosition.y()*currentPosition.y();double phi=TrackUtils.calculatePhi(currentMomentum.x(),currentMomentum.y());double curvature=TrackUtils.calculateCurvature(currentMomentum.magnitude(),q,bFieldY);double z=currentPosition.z();double tanLambda=TrackUtils.calculateTanLambda(currentMomentum.z(),currentMomentum.magnitude());double[] trackParameters=new double[5];trackParameters[ParameterName.d0.ordinal()]=Math.sqrt(doca);trackParameters[ParameterName.phi0.ordinal()]=phi;trackParameters[ParameterName.omega.ordinal()]=curvature;trackParameters[ParameterName.z0.ordinal()]=z;trackParameters[ParameterName.tanLambda.ordinal()]=tanLambda;TrackState trackState=new BaseTrackState(trackParameters,currentPosition.v(),track.getCovMatrix(),TrackState.AtCalorimeter,bFieldY);return trackState;}"
1634	"public void onClick(DialogInterface dialog,int item){dialog.dismiss();dryRun=item==0?true:false;String msg;if(dryRun){msg=""Time changes are simulated.\nDatabase will""+"" not be changed."";}else {msg=""Time changes are real.\nDatabase will be ""+""changed."";}Utils.infoMsg(this,msg);}"
1635	"protected void setViewData(String itemToPos){if(view==null){return ;}view.setFileList(visibleFileList);view.setPath(getCurrentDir()+filter.getWildCard());view.setDisk(currentDisk);view.showProgress(progressVisible);if(itemToPos!=null){view.scrollToItem(itemToPos);}}"
1636	"public void clicked(InputEvent event,float x,float y){restartGame=true;dialog.remove();}"
1637	"public void onClick(DialogInterface dialog,int which){}"
1638	"public void doAction(ActionEvent e){}"
1639	"@Nonnull private Path getConfigurationPath(){String s=System.getProperty(""blueMarine2.workspace"");if(s!=null){return Paths.get(s);}s=System.getProperty(""user.home"",""/""); final String osName=System.getProperty(""os.name"").toLowerCase();switch (osName){case ""linux"" :s+=""/.blueMarine2"";break;case ""mac os x"" :s+=""/Library/Application Support/blueMarine2"";break;case ""windows"" :s+=""/.blueMarine2"";break;}return Paths.get(s);}"
1640	"public void addButtonActionPerformed(){int nodeAddress=readNodeAddress();if(nodeAddress<0){return ;}curNode=(SerialNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);if(curNode!=null){statusText1.setText(rb.getString(""Error1"")+Integer.toString(nodeAddress)+rb.getString(""Error2""));statusText1.setVisible(true);errorInStatus1=true;resetNotes2();return ;}if(!readReceiveDelay()){return ;}if(!readPulseWidth()){return ;}if(!checkConsistency()){return ;}curNode=new SerialNode(nodeAddress,nodeType,_memo.getTrafficController());setNodeParameters();((SerialSensorManager)_memo.getSensorManager()).registerSensorsForNode(curNode);resetNotes();changedNode=true;statusText1.setText(rb.getString(""FeedBackAdd"")+"" ""+Integer.toString(nodeAddress));errorInStatus1=true;}"
1641	"@Override public void onDataPass(Stock result){int index=findStockIndexBySymbol(result.getSymbol(),feedId.WATCH_FEED);if(index!=-1){return ;}currentAccount.watchNewStock(result);watchFeed.add(result);refreshFeed(feedId.WATCH_FEED);}"
1642	"@Override public void onResponse(JSONArray response){try{name=response.getString(0)+"" ""+response.getString(1)+"" (""+cus+"")"";images=new ArrayList<>();if(response.length()>2){for(int i=2;i<response.length();i++){images.add(""http://www.marwadishaadi.com/uploads/cust_""+cus+""/thumb/""+response.getString(i).replace(""["","""").replace(""]"","""").replace(""\"""",""""));}}toolbarLayout.setExpandedTitleColor(getResources().getColor(R.color.white));toolbarLayout.setTitle(name);if(images.size()>0){if(isPaidMember){Glide.with(getApplicationContext()).load(images.get(0)).into(imageView);}else {Glide.with(getApplicationContext()).load(images.get(0)).dontAnimate().placeholder(R.drawable.default_drawer).error(R.drawable.default_drawer).bitmapTransform(new BlurTransformation(getApplicationContext())).into(imageView);}}else {Glide.with(getApplicationContext()).load(R.drawable.default_drawer).into(imageView);}}catch(JSONException e){e.printStackTrace();}}"
1643	"public static Date formatFromString(String date){java.text.DateFormat df=new java.text.SimpleDateFormat(""dd/MM/yyyy"");Date result;try{result=df.parse(date);}catch(java.text.ParseException e){result=new Date();}return result;}"
1644	"@Override public int connectionIndex(){return (int)(U.safeAbs(Thread.currentThread().getId())%connectionsPerNode);}"
1645	"public ScreenLevel(GameDualism game){this.game=game;Image image=new Image(new Texture(""levels.png""));image.setHeight(HEIGHT);image.setWidth(WIDTH);stage.addActor(image);menuButton=new ImageButton(new TextureRegionDrawable(new TextureRegion(new Texture(""Buttons/menu.png""))));stage.addActor(menuButton);menuButton.setBounds(999*(WIDTH-maxButtonsWidth+60)/1000.0,99*(HEIGHT-maxButtonsHeight+10)/100.0,maxButtonsHeight*2/3,maxButtonsHeight*2/3);menuButton.setVisible(true);Button buttonLevel1=new ImageButton(new TextureRegionDrawable(new TextureRegion(new Texture(""Buttons/level1.png""))));buttonLevel1.setBounds((WIDTH-maxButtonsWidth)/2.0,3*(HEIGHT-maxButtonsHeight)/5.0,maxButtonsWidth,maxButtonsHeight);stage.addActor(buttonLevel1);Button buttonLevel2=new ImageButton(new TextureRegionDrawable(new TextureRegion(new Texture(""Buttons/level2.png""))));buttonLevel2.setBounds((WIDTH-maxButtonsWidth)/2.0,2*(HEIGHT-maxButtonsHeight)/5.0,maxButtonsWidth,maxButtonsHeight);stage.addActor(buttonLevel2);menuButton.addListener(new ClickListener(Input.Buttons.LEFT){  @Override public void clicked(  InputEvent event,  float x,  float y){    GameDualism.playSound(buttonEffect);    screenProcesser.setMenuScreen();  }});buttonLevel1.addListener(new ClickListener(Input.Buttons.LEFT){  @Override public void clicked(  InputEvent event,  float x,  float y){    GameDualism.playSound(buttonEffect);    System.out.println(""clicked"");    if (!screenProcesser.setLevelScreen(new Level1Screen(game,1)))     System.exit(1);    screenProcesser.setCurrentLevelScreen();  }});buttonLevel2.addListener(new ClickListener(Input.Buttons.LEFT){  @Override public void clicked(  InputEvent event,  float x,  float y){    GameDualism.playSound(buttonEffect);    System.out.println(""clicked"");    if (!screenProcesser.setLevelScreen(new Level1Screen(game,2)))     System.exit(1);    screenProcesser.setCurrentLevelScreen();  }});}"
1646	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
1647	"public static boolean isValidEmail(String userEmail){Pattern pattern;Matcher matcher;pattern=android.util.Patterns.EMAIL_ADDRESS;matcher=pattern.matcher(userEmail);return matcher.matches();}"
1648	"@Override public void actionPerformed(ActionEvent e){showWebview=chkShowWebView.isSelected();}"
1649	"@Override public boolean isSigned(){return params.mode==Time.OutputMode.ABSOLUTE&&parent.isSigned();}"
1650	"@Override public int fill(EnumFacing from,FluidStack resource,boolean doFill){int used=0;if(from.equals(getFront())){ final String liquidName=FluidRegistry.getFluidName(resource);if(liquidName!=null&&liquidName.startsWith(""oil"")){if(liquidName.equals(GCFluids.fluidOil.getName())){used=this.oilTank.fill(resource,doFill);}else {used=this.oilTank.fill(new FluidStack(GCFluids.fluidOil,resource.amount),doFill);}}}return used;}"
1651	"@Override public void actionPerformed(ActionEvent e){CategoryButton button=(CategoryButton)e.getSource();root.showQuizPage(button.getCategory());}"
1652	"public static int portOf(CAN c){switch (c){case LEFT_MOTOR_FRONT :return 3;case LEFT_MOTOR_BACK :return 4;case RIGHT_MOTOR_FRONT :return 5;case RIGHT_MOTOR_BACK :return 6;default :return -1;}}"
1653	"private List<InputSplit> getSplits(JobContext job,FilterResolverIntf filterResolver,BitSet matchedPartitions,CacheClient cacheClient) throws IOException{List<InputSplit> result=new LinkedList<InputSplit>();FilterExpressionProcessor filterExpressionProcessor=new FilterExpressionProcessor();AbsoluteTableIdentifier absoluteTableIdentifier=getCarbonTable(job.getConfiguration()).getAbsoluteTableIdentifier();SegmentUpdateStatusManager updateStatusManager=new SegmentUpdateStatusManager(absoluteTableIdentifier);for(String segmentNo : getSegmentsToAccess(job)){List<DataRefNode> dataRefNodes=getDataBlocksOfSegment(job,filterExpressionProcessor,absoluteTableIdentifier,filterResolver,matchedPartitions,segmentNo,cacheClient,updateStatusManager);for(DataRefNode dataRefNode : dataRefNodes){BlockBTreeLeafNode leafNode=(BlockBTreeLeafNode)dataRefNode;TableBlockInfo tableBlockInfo=leafNode.getTableBlockInfo();if(CarbonUtil.isInvalidTableBlock(tableBlockInfo,updateStatusManager.getInvalidTimestampRange(tableBlockInfo.getSegmentId()),updateStatusManager)){continue;}result.add(new CarbonInputSplit(segmentNo,new Path(tableBlockInfo.getFilePath()),tableBlockInfo.getBlockOffset(),tableBlockInfo.getBlockLength(),tableBlockInfo.getLocations(),tableBlockInfo.getBlockletInfos().getNoOfBlockLets(),tableBlockInfo.getVersion()));}}return result;}"
1654	"@Override public void done(List<Food> list,BmobException e){if(e==null){adapter.addAll(list);if(list.size()<20){recyclerView.showNoMore();}else {int code=e.getErrorCode();if(code==9010||code==9016){Utils.SnackbarShort(recyclerView,""????????????"");}else {if(code==9009){Utils.Log(""????"");}else {Utils.SnackbarShort(recyclerView,""????"");}}}}}"
1655	"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){if(requestCode==REQUEST_IMAGE_CAPTURE&&resultCode==RESULT_OK){Intent intent=new Intent(this,LoginActivity.class);startActivity(intent);}}"
1656	"@RequestMapping(value=""/edit/{id}"") public ModelAndView showEditPage(String id){ModelAndView modelAndView=new ModelAndView(""edit"");modelAndView.addObject(""product"",productService.findProductById(Long.parseLong(id)));modelAndView.addObject(""sizes"",new SizesDto());Category currentCategory=categoryService.findCategoryById(String.valueOf(productService.findProductById(Long.parseLong(id)).getCategory().getId()));Category parentCategory=currentCategory.getParent();if(parentCategory.getId()==1){modelAndView.addObject(""isMensActive"",true);}if(parentCategory.getId()==2){modelAndView.addObject(""isWomensActive"",true);}modelAndView.addObject(""options"",categoryService.findChilds(parentCategory));modelAndView.addObject(""activeOptionId"",currentCategory.getId());return modelAndView;}"
1657	"@Override public void setNonNull(Row row){BooleanSettable settable=(BooleanSettable)target;boolean value=row.getBool(target.getName());settable.set(value);}"
1658	"void run(){if(teams.get(0).isEmpty()||teams.get(1).isEmpty()){over=true;return ;}if(!over||!endOnKing){int team=cycles%2;count=0;ArrayList<Entity> attackers=chooseAttacker(team);if(attackers.size()==0){Entity en=teams.get(team).get((int)(rand.nextDouble()*teams.get(team).size()));en.setAttackDir(en.getDirectionToward(target.get(team)));en.setAttackDist(1,1);move(en,en.getAttackDir());}else {for(Entity e : attackers){if(e instanceof OpenSpace){e=teams.get(team).get((int)(rand.nextDouble()*teams.get(team).size()));attackers.set(0,e);for(int i=0;i<teams.get(team).size();i++){attackers.add(teams.get(team).get((int)(rand.nextDouble()*teams.get(team).size())));}if(!(e instanceof Pawn)){if(aggressive){e.setAttackDir(e.getDirectionToward(target.get(team)));}else {e.setAttackDir((int)(rand.nextDouble()*8)*45);}}}else {}}}int best=rand.nextInt(attackers.size());move(attackers.get(best),attackers.get(best).getAttackDir());}}"
1659	"@Override public boolean onItemClick(View view,int position,IDrawerItem drawerItem){UIController.startActivity(this,VideosActivity.class,new Intent().putExtra(Globals.VIDEO_TYPE,Video.VideoType.MY_FAVORITES));return true;}"
1660	"public void constructGraph(ArrayList<String> rawData){for(String line : rawData){Node node1=null;Node node2=null;String[] nodes=line.replaceAll(""[ |\t]+"","" "").split("" "");String vx=nodes[0];String vy=nodes[1];if(graph.containsKey(vx)){node1=graph.get(vx);}else {node1=new Node(vx);graph.put(vx,node1);}if(graph.containsKey(vy)){node2=graph.get(vy);}else {node2=new Node(vy);graph.put(vy,node2);}node1.setOutDegree(node1.getOutDegree().add(BigDecimal.valueOf(1)));node2.getInNeighbours().add(node1.getId());}}"
1661	"@Override public void actionPerformed(ActionEvent e){runOneTimestep();panel.repaint();}"
1662	"public int len(){return cs.length;}"
1663	"public VertxNubes(Vertx vertx,JsonObject json) throws MissingConfigurationException{this.vertx=vertx;config=Config.fromJsonObject(json);registry=new ParameterAdapterRegistry(new DefaultParameterAdapter());annotationHandlers=new HashMap<Class<? extends Annotation>,Set<Handler<RoutingContext>>>();typeProcessors=new HashMap<Class<?>,Processor>();apRegistry=new AnnotationProcessorRegistry();marshallers=new HashMap<String,PayloadMarshaller>();typeInjectors=new TypedParamInjectorRegistry();annotInjectors=new AnnotatedParamInjectorRegistry(marshallers,registry);serviceRegistry=new ServiceRegistry(vertx);CookieHandler cookieHandler=CookieHandler.create();BodyHandler bodyHandler=BodyHandler.create();registerAnnotationHandler(Cookies.class,cookieHandler);registerAnnotationHandler(CookieValue.class,cookieHandler);registerAnnotationHandler(Throttled.class,RateLimitationHandler.create(config));registerAnnotationHandler(POST.class,bodyHandler);registerAnnotationHandler(PUT.class,bodyHandler);registerTypeProcessor(PaginationContext.class,new PaginationProcessor());registerTypeProcessor(Payload.class,new PayloadTypeProcessor(marshallers));registerAnnotationProcessor(ClientRedirect.class,new ClientRedirectProcessor());registerAnnotationProcessor(ContentType.class,new ContentTypeProcessor());registerAnnotationProcessor(View.class,new ViewProcessor(new TemplateEngineManager(config)));registerMarshaller(""application/json"",new BoonPayloadMarshaller());}"
1664	"public boolean solve(){int startr=-1,startc=-1;maze[startr][startc]=' ';return solve(startr,startc);}"
1665	"@Override public boolean isItemValid(ItemStack itemStack){return true;}"
1666	"@Override public boolean validate() throws Exception{log.info(""Initiating volume validation of VNXe ExportMask: ""+getId());DbClient dbClient=getDbClient();VNXeApiClient apiClient=getApiClient();ExportMask exportMask=getExportMask();try{String vnxeHostId=getVNXeHostFromInitiators();if(vnxeHostId!=null){VNXeHost vnxeHost=apiClient.getHostById(vnxeHostId);if(vnxeHost!=null){Set<String> lunIds=getAllLUNsForHost(dbClient,exportMask);Set<String> lunIdsOnArray=apiClient.getHostLUNIds(vnxeHostId);lunIdsOnArray.removeAll(lunIds);if(!lunIdsOnArray.isEmpty()){String unknownLUNs=Joiner.on(',').join(lunIdsOnArray);log.info(""Unknown LUN/LUN Snap {}"",unknownLUNs);getLogger().logDiff(exportMask.getId().toString(),""volumes"",ValidatorLogger.NO_MATCHING_ENTRY,unknownLUNs);}}}}catch(Exception ex){log.error(""Unexpected exception validating ExportMask volumes: ""+ex.getMessage(),ex);throw DeviceControllerException.exceptions.unexpectedCondition(""Unexpected exception validating ExportMask volumes: ""+ex.getMessage());}setRemediation(unknownLUNRemediation);checkForErrors();log.info(""Completed volume validation of VNXe ExportMask: ""+getId());return true;}"
1667	"@Override public void onClick(DialogInterface dialog,int which){dismissPb();mPb=ProgressDialog.show(this,null,getString(R.string.lbl_registering));mPb.setCancelable(true);Intent intent=new Intent(this,RegistrationIntentService.class);startService(intent);mCustomizedTopicsSetting=true;}"
1668	"@Override public void onClick(View v){currentMessage=getRandomEntry(random);updateMessage();}"
1669	"@Override public ActionResult<ItemStack> onItemRightClick(World worldIn,EntityPlayer playerIn,EnumHand hand){ItemStack itemStackIn=playerIn.getHeldItem(hand);if(worldIn.isRemote){return super.onItemRightClick(worldIn,playerIn,hand);}int x=NBTHelper.getInteger(itemStackIn,""x"");int y=NBTHelper.getInteger(itemStackIn,""y"");int z=NBTHelper.getInteger(itemStackIn,""z"");World world=FMLCommonHandler.instance().getMinecraftServerInstance().worldServerForDimension(NBTHelper.getInteger(itemStackIn,""dim""));if(NBTHelper.getBoolean(itemStackIn,""bound"")&&world.getTileEntity(new BlockPos(x,y,z)) instanceof TileMaster){if((itemStackIn.getItemDamage()==0&&NBTHelper.getInteger(itemStackIn,""dim"")==worldIn.provider.getDimension()&&playerIn.getDistance(x,y,z)<=ConfigHandler.rangeWirelessAccessor)||itemStackIn.getItemDamage()==1){if(world.getChunkFromBlockCoords(new BlockPos(x,y,z)).isLoaded()){if(NBTHelper.getString(itemStackIn,""sort"")==null){NBTHelper.setString(itemStackIn,""sort"",EnumSortType.NAME.toString());}playerIn.openGui(StorageNetwork.instance,getGui(),world,x,y,z);}else {playerIn.sendMessage(new TextComponentString(""Cable Master not loaded.""));}}else {if(itemStackIn.getItemDamage()==0&&(NBTHelper.getInteger(itemStackIn,""dim"")==worldIn.provider.getDimension()||playerIn.getDistance(x,y,z)>32)){if(!worldIn.isRemote){playerIn.sendMessage(new TextComponentString(""Out of Range""));}}}}return super.onItemRightClick(worldIn,playerIn,hand);}"
1670	"private static void loadGlobalProperties(String propertiesResourceName){InputStream is=null;try{try{is=PropertiesUtil.class.getClassLoader().getResourceAsStream(propertiesResourceName);if(is==null){throw new RuntimeException(propertiesResourceName+"" is not in the classpath"");}globalProperties.load(is);}finally{is.close();}}catch(IOException e){throw new RuntimeException(""Error loading ""+propertiesResourceName,e);}}"
1671	"private void wipe(){if(!wipe(new String[0])){dates.remove(0);wipe();}}"
1672	"@Override public boolean getStatus(){return shutdown;}"
1673	"@Override public void close(){}"
1674	"private static String getTag(){return new Exception().getStackTrace()[2].getClass().getSimpleName();}"
1675	"public void onClick(View v){handleNumber(ButtonArray[0]);}"
1676	"public void widgetSelected(SelectionEvent e){for(int i=0;i<m_roleButtons.size();i++){m_roleButtons.get(i).setSelection(true);}checkStatus();}"
1677	"public void selectDrawerItem(MenuItem menuItem){switch (menuItem.getItemId()){case R.id.Home :Intent Home_intent=new Intent(context,InsertUserProfile.class);startActivity(Home_intent);break;case R.id.UserProfile :Intent intent=new Intent(context,ShowUserprofile.class);intent.putExtra(UserProfile.Column.UserID,userid);startActivity(intent);break;case R.id.Favourite :Intent b=new Intent(context,favorite_restaurant.class);b.putExtra(UserProfile.Column.UserID,userid);startActivity(b);break;case R.id.ShowPromotion :Intent i=new Intent(context,ChatMainActivity.class);startActivity(i);break;case R.id.RestaurantProfile :Bundle bundle=new Bundle();bundle.putString(""userid"",userid);Log.i(Tag,""  in Main2 userid is : ""+userid);Option_RestaurantFragment option=new Option_RestaurantFragment();option.setArguments(bundle);FragmentManager manager=getSupportFragmentManager();manager.beginTransaction().replace(R.id.flContent,option).commit();break;case R.id.AddPromotion :break;case R.id.Logout :SharedPreferences sp=getSharedPreferences(""CHECK_LOGIN"",Context.MODE_PRIVATE);SharedPreferences.Editor editor=sp.edit();editor.putString(UserProfile.Column.UserID,""nothing"");editor.commit();Intent logout=new Intent(context,LoginActivity.class);startActivity(logout);finish();break;default :}menuItem.setChecked(true);setTitle(menuItem.getTitle());mDrawer.closeDrawers();}"
1678	"private List<String> getGroupConstraints(HyGroup group,String parentFeatureId,boolean parentIsRoot,Date date) throws HyFeatureModelWellFormednessException{List<String> featureModelConstraints=new ArrayList<String>();StringBuilder groupConstraintsStringBuilder=new StringBuilder();HyGroupComposition groupComposition=HyEvolutionUtil.getValidTemporalElement(group.getParentOf(),date);List<HyFeature> validFeaturesOfGroupComposition=HyEvolutionUtil.getValidTemporalElements(groupComposition.getFeatures(),date);if(!parentIsRoot){groupConstraintsStringBuilder.append(BRACKETS_OPEN);boolean first=true;for(HyFeature feature : validFeaturesOfGroupComposition){if(!first){groupConstraintsStringBuilder.append(OR);}else {first=false;}groupConstraintsStringBuilder.append(featureReconfiguratorIdMapping.get(feature));groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);}groupConstraintsStringBuilder.append(BRACKETS_CLOSING);groupConstraintsStringBuilder.append(IMPLICATION);groupConstraintsStringBuilder.append(parentFeatureId);groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);featureModelConstraints.add(groupConstraintsStringBuilder.toString());groupConstraintsStringBuilder=new StringBuilder();}HyGroupType groupType=HyEvolutionUtil.getValidTemporalElement(group.getTypes(),date);if(validFeaturesOfGroupComposition.size()>1){switch (groupType.getType()){case ALTERNATIVE :groupConstraintsStringBuilder.append(parentFeatureId);groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);groupConstraintsStringBuilder.append(IMPLICATION);groupConstraintsStringBuilder.append(BRACKETS_OPEN);boolean first=true;for(HyFeature childFeature : validFeaturesOfGroupComposition){if(!first){groupConstraintsStringBuilder.append(ADDITION);}else {first=false;}groupConstraintsStringBuilder.append(featureReconfiguratorIdMapping.get(childFeature));}groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);groupConstraintsStringBuilder.append(BRACKETS_CLOSING);break;case AND :if(HyFeatureUtil.getNumberOfMandatoryFeatures(validFeaturesOfGroupComposition,date)==0){break;}groupConstraintsStringBuilder.append(parentFeatureId);groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);groupConstraintsStringBuilder.append(IMPLICATION);groupConstraintsStringBuilder.append(BRACKETS_OPEN);boolean firstChildAnd=true;for(HyFeature feature : validFeaturesOfGroupComposition){if(HyFeatureUtil.isMandatory(feature,date)){if(!firstChildAnd){groupConstraintsStringBuilder.append(AND);}else {firstChildAnd=false;}groupConstraintsStringBuilder.append(featureReconfiguratorIdMapping.get(feature));groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);}}groupConstraintsStringBuilder.append(BRACKETS_CLOSING);break;case OR :groupConstraintsStringBuilder.append(parentFeatureId);groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);groupConstraintsStringBuilder.append(IMPLICATION);groupConstraintsStringBuilder.append(BRACKETS_OPEN);boolean firstChildOr=true;for(HyFeature feature : validFeaturesOfGroupComposition){if(!firstChildOr){groupConstraintsStringBuilder.append(OR);}else {firstChildOr=false;}groupConstraintsStringBuilder.append(featureReconfiguratorIdMapping.get(feature));groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);}groupConstraintsStringBuilder.append(BRACKETS_CLOSING);break;}if(!groupConstraintsStringBuilder.toString().equals("""")){featureModelConstraints.add(groupConstraintsStringBuilder.toString());groupConstraintsStringBuilder=new StringBuilder();}}else {for(HyFeature feature : validFeaturesOfGroupComposition){if(HyFeatureUtil.isMandatory(feature,date)){groupConstraintsStringBuilder.append(parentFeatureId);groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);groupConstraintsStringBuilder.append(IMPLICATION);groupConstraintsStringBuilder.append(featureReconfiguratorIdMapping.get(feature));groupConstraintsStringBuilder.append(EQUALS);groupConstraintsStringBuilder.append(1);featureModelConstraints.add(groupConstraintsStringBuilder.toString());groupConstraintsStringBuilder=new StringBuilder();}}}for(HyFeature feature : validFeaturesOfGroupComposition){featureModelConstraints.addAll(getFeatureConstraints(feature,false,date));}return featureModelConstraints;}"
1679	"@Override public int compare(CompressedDecklistInfo card1,CompressedDecklistInfo card2){if(card1.mCmc==card2.mCmc){return 0;}else {if(card1.mCmc>card2.mCmc){return 1;}}return -1;}"
1680	"public void delete(QuestionnaireWorkflow questionnaireWorkflow) throws TalentStudioException{closeWorkflowProcess(questionnaireWorkflow);QuestionnaireWorkflow queWorkflow=questionnaireDao.findById(questionnaireWorkflow.getId());questionnaireDao.mergeDelete(queWorkflow);}"
1681	"double[] genRankingFV(_Doc q,_Doc d){double[] fv=new double[RankFVSize];fv[0]=getBoWSim(q,d);fv[1]=getTopicalSim(q,d);fv[2]=q.sameProduct(d)?1:0;fv[3]=Math.abs((double)(q.getDocLength()-d.getDocLength())/(double)q.getDocLength());fv[4]=Utils.jaccard(q.getSparse(),d.getSparse());fv[5]=d.getStopwordProportion();fv[6]=d.getAvgIDF();fv[7]=d.getSentiScore();fv[8]=getPOSScore(q,d);fv[9]=getAspectScore(q,d);return fv;}"
1682	"public void onClick(View v){if(features.backButtonCanClose&&!inAppWebView.canGoBack()){closeDialog();}else {goBack();}}"
1683	"@Override public E get(int i){if((i<0)||(i>size)){throw new IndexOutOfBoundsException(""Index: ""+i+"" size: ""+size);}if(i>=focusStartIndex){int focusOffset=i-focusStartIndex;if(focusOffset<focusLength){return focus[focusOffset];}i-=focusLength;}return root.get(i);}"
1684	"public void checkNotNull(){if(null!=e){e.checkNotNull();}}"
1685	"@Override public Object doInHibernate(Session session) throws HibernateException{return getAssignmentWithoutStats(gradebookUid,assignmentName,session);}"
1686	"public boolean isConflicted(){return hasConflicts;}"
1687	"public String[] getHashes(){return getDownloadUrl().replace(Config.API_ENDPOINT,"""").split(""/"");}"
1688	"public static void bankBalance(double Kassa){kassa=Kassa;}"
1689	"@Override public boolean apply(Object o){return true;}"
1690	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1691	"public static boolean isVplexVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_VOLUME.toString());return TRUE.equals(status);}"
1692	"public Entry(String paSong,String paAlbum,String paBand,int paYear,int paDuration,Genre paGenre){this.aSong=paSong;this.aAlbum=paAlbum;this.aBand=paBand;this.aYear=0;this.aDuration=0;this.aGenre=paGenre;}"
1693	"@Override public int result(){return 0;}"
1694	"public int compare(LMPlayerClient o1,LMPlayerClient o2){return 0;}"
1695	"public void update(){this.updateWeapons();this.updateDrive();}"
1696	"public int run(String[] args) throws Exception{if(args.length!=2){System.err.printf(""Usage: %s [generic options] <input> <output>\n"",getClass().getSimpleName());ToolRunner.printGenericCommandUsage(System.err);return -1;}Job job=new org.apache.hadoop.mapreduce.Job();job.setJarByClass(RelativeFrequency.class);job.setJobName(""RelativeFrequency"");FileInputFormat.addInputPath(job,new Path(args[0]));FileOutputFormat.setOutputPath(job,new Path(args[1]));job.setOutputKeyClass(Pair.class);job.setOutputValueClass(IntWritable.class);job.setMapperClass(RelativeFrequencyMapper.class);job.setReducerClass(RelativeFrequencyReducer.class);int returnValue=job.waitForCompletion(true)?0:1;System.out.println(""job.isSuccessful ""+job.isSuccessful());return returnValue;}"
1697	"void prepareScenario(){scenariosWithTwoVal.add(""#elder1? memiliki dua orang anak, #orang1? dan #orang2?. ""+""#orang1? mengunjungi #elder1? #val1? hari sekali, sedangkan #orang2? #val2? hari sekali. ""+""Hari ini adalah tanggal #refdate? dan kedua anak tersebut mengunjungi #elder1? bersamaan. ""+""Tanggal berapa kemungkinan mereka akan bertemu lagi saat mengunjungi #elder1??"");scenariosWithThreeVal.add(""Pada tanggal #refdate? #orang1?, #orang2? dan #orang3? bertemu di perpustakaan daerah.""+"" #orang1? mengunjungi perpustakaan #val1? hari sekali, #orang2? #val2? hari sekali, dan""+"" #orang3? #val3? hari sekali. Pada tanggal berapa mereka kemungkinan akan kembali ""+""bertemu saat mengunjungi perpustakaan?  "");scenariosWithTwoVal.add(""#orang1? berlatih menyanyi #val1? hari sekali sementara #orang2? #val2? hari sekali. ""+""Jika hari ini adalah tanggal #refdate? dan mereka berlatih bersama, ""+""tanggal berapa mereka akan melakukannya lagi?"");scenariosWithTwoVal.add(""#bapak1? mengantar roti #val1? hari sekali ke warung #bapak2?, ""+""sedangkan #bapak3? mengantar stok telur asin ke tempat yang sama #val2? hari sekali. ""+""Jika hari ini tanggal #refdate? dan mereka bertemu di warung #bapak2?, ""+""kapan kemungkinan mereka akan bertemu kembali di sana saat mengantar dagangan?"");scenariosWithTwoVal.add(""Kapal penyeberangan Inaq Tegining melayani pelayaran Lombok - Sumbawa setiap""+"" #val1? hari sekali, sedangkan kapal Amaq Teganang #val2? hari sekali. ""+""Pada #refdate? kedua kapal itu berlabuh bersama di Pelabuhan Lombok. ""+""Pada tanggal berapa kedua kapal tersebut diperkirakan berlabuh di tempat yang sama? "");scenariosWithTwoVal.add(""#orang1? memiliki kebun pepaya dan pisang yang sedang dalam masa panen. ""+""Ia menjadwalkan panen pepaya #val1? hari sekali di waktu pagi ""+""dan panen pisang #val2? hari sekali di waktu sore. ""+""Jika tanggal #refdate? ia panen pepaya dan pisang, tanggal berapa ""+""kemungkinan ia dapat melakukannya lagi di hari yang sama?"");}"
1698	"public long getSizeInBytes(){return value.length()+1;}"
1699	"@Override public boolean valid(){for(ReplacementRegex r : replacements){if(r==null||!r.valid()){return false;}}return clause.valid()&&!name.trim().equals("""")&&replacements.length>0&&replacements.length==rearrangements.length&&rearrangements.length==clause.getSize();}"
1700	"@Override int nodeAggregate(AvlNode<?> node){return node.elemCount;}"
1701	"public static Value comp(String subOP,Value first,Value second){int res=0;Long lf,ls;String sf,ss;Double df,ds;switch (first.getType()){case LONG :lf=first.getLong();ls=second.getLong();res=lf.compareTo(ls);break;case STRING :sf=first.getString();ss=second.getString();res=sf.compareTo(ss);break;case REAL :df=first.getDouble();ds=second.getDouble();res=df.compareTo(ds);break;}switch (subOP){case ""<"" :if(res==-1){return new Value(Type.STRING,first.colName,""true"");}break;case ""<="" :if(res==-1||res==0){return new Value(Type.STRING,first.colName,""true"");}break;case "">"" :if(res==1){return new Value(Type.STRING,first.colName,""true"");}break;case "">="" :if(res==-1||res==0){return new Value(Type.STRING,first.colName,""true"");}break;case ""=="" :if(res==0){return new Value(Type.STRING,first.colName,""true"");}break;}return new Value(Type.STRING,first.colName,""false"");}"
1702	"public void contractNodes(){meanDegree=this.getNumberOfEdges()/this.getNumberOfNodes();int level=1;int counter=0;boolean periodicUpdate=true;long periodicUpdatesCount=Math.round(Math.max(10,sortedNodesQueue.size()/100.0*periodicUpdatesPercentage));if(periodicUpdatesPercentage==0){periodicUpdate=false;}long lastNodesLazyUpdates=lastNodesLazyUpdatePercentage==0?0l:Math.round(sortedNodesQueue.size()/100.0*lastNodesLazyUpdatePercentage);long nodesToAvoidContract=Math.round((100-nodesContractedPercentage)/100*sortedNodesQueue.size());boolean neighborUpdate=true;if(neighborUpdatePercentage==0){neighborUpdate=false;}while(!sortedNodesQueue.isEmpty()){if(periodicUpdate&&counter>0&&counter%periodicUpdatesCount==0){sortedNodesQueue.clear();for(int nodeId=0;nodeId<this.getNumberOfNodes();nodeId++){if(this.getNode(nodeId).getLevel()!=0){continue;}oldPriorities.put((long)nodeId,calculatePriority(this.getNode(nodeId),true));int priority=oldPriorities.get((long)nodeId);this.updateNodeInfo(this.getNode(nodeId),this.getNode(nodeId).getLevel(),priority);sortedNodesQueue.add((CHNodeImpl)this.getNode(nodeId));}if(sortedNodesQueue.isEmpty()){throw new IllegalStateException(""Cannot prepare as no unprepared nodes where found. Called preparation twice?"");}}counter++;CHNode polledNode=sortedNodesQueue.poll();logger.debug(""Node being contracted: {}. Priority: {}"",polledNode.getId(),polledNode.getPriority());if(sortedNodesQueue.size()<lastNodesLazyUpdates){oldPriorities.put(polledNode.getId(),calculatePriority(this.getNode(polledNode.getId()),true));int priority=oldPriorities.get(polledNode.getId());if(!sortedNodesQueue.isEmpty()&&priority>sortedNodesQueue.peek().getPriority()){CHNode node=this.getNode(polledNode.getId());node.setPriority(priority);sortedNodesQueue.add((CHNodeImpl)node);continue;}}System.out.println(""-Para o n? ""+polledNode.getId()+"" foram criados ""+this.addShortcuts(polledNode.getId())+"" atalhos. Seu n?vel ? ""+level);this.updateNodeInfo(polledNode,level,polledNode.getPriority());level++;if(sortedNodesQueue.size()<nodesToAvoidContract){while(!sortedNodesQueue.isEmpty()){polledNode=sortedNodesQueue.poll();polledNode.setLevel(level);}break;}for(Long edgeID : this.getInEdges(polledNode.getId())){long nearestNeighborID=this.getEdge(edgeID).getFromNode();if(this.getNode(nearestNeighborID).getLevel()!=0){continue;}if(neighborUpdate&&rand.nextInt(100)<neighborUpdatePercentage){int oldPrio=oldPriorities.get(nearestNeighborID);int newPrio=calculatePriority(this.getNode(nearestNeighborID),true,polledNode.getId(),edgeID);oldPriorities.replace(nearestNeighborID,newPrio);if(newPrio!=oldPrio){sortedNodesQueue.remove(this.getNode(nearestNeighborID));this.getNode(nearestNeighborID).setPriority(newPrio);this.updateNodeInfo(this.getNode(nearestNeighborID),this.getNode(nearestNeighborID).getLevel(),newPrio);sortedNodesQueue.add((CHNodeImpl)this.getNode(nearestNeighborID));}}}for(Long edgeID : this.getOutEdges(polledNode.getId())){long nearestNeighborID=this.getEdge(edgeID).getToNode();if(this.getNode(nearestNeighborID).getLevel()!=0){continue;}if(neighborUpdate&&rand.nextInt(100)<neighborUpdatePercentage){int oldPrio=oldPriorities.get(nearestNeighborID);int newPrio=calculatePriority(this.getNode(nearestNeighborID),true,polledNode.getId(),edgeID);oldPriorities.replace(nearestNeighborID,newPrio);if(newPrio!=oldPrio){sortedNodesQueue.remove(this.getNode(nearestNeighborID));this.getNode(nearestNeighborID).setPriority(newPrio);this.updateNodeInfo(this.getNode(nearestNeighborID),this.getNode(nearestNeighborID).getLevel(),newPrio);sortedNodesQueue.add((CHNodeImpl)this.getNode(nearestNeighborID));}}}}this.save();}"
1703	"@Override public long size(){return (hasGroupAdminLevel(getRights())?getDao().count(search,getUserId()):getDao().count(search));}"
1704	"@Override boolean isFilled(int x,int y){return dimension.getLayerValueAt(layer,x,y)==layer.getDefaultValue();}"
1705	"public Paragraph(FormattedText text,FontRenderer fontRenderer,int width){List<FormattedText> list=Lists.newArrayList(text);Line<Word> currentLine=new Line<>();lines.add(currentLine);float xOffset=0;for(int i=0;i<list.size();i++){FormattedText current=list.get(i);TextFormat format=current.getFormat();String string=current.getText();Matcher matcher=AbstractParagraph.wordPattern.matcher(string);while(matcher.find()){if(matcher.group(1)!=null){xOffset=0;currentLine=new Line<>();lines.add(currentLine);}else {boolean flag=false;String string2=matcher.group(2);if(string2==null){flag=true;string2=matcher.group(4);if(string2==null){continue;}}Word word=new Word().append(new Text(string2,format,fontRenderer));if(flag){FormattedText next;int j=i;while(++j<list.size()){next=list.get(j);String string3=next.getText();Matcher matcher2=AbstractParagraph.wordSOL.matcher(string3);if(matcher2.matches()){i++;word.append(new Text(next.getText(),next.getFormat(),fontRenderer));continue;}else {matcher2.reset();if(matcher2.find()){word.append(new Text(matcher2.group(),next.getFormat(),fontRenderer));list.set(j,new FormattedText(string3.substring(matcher2.end(),string3.length()),next.getFormat()));}break;}}word.text.get(word.text.size()-1).append("" "",format,fontRenderer);}double wordWidth=word.getDimensions().x;if(xOffset+wordWidth>width){xOffset=0;currentLine=new Line<>();lines.add(currentLine);}xOffset+=wordWidth;currentLine.append(word);}}}createDimensions();}"
1706	"@Override public Task createTask(String title,String desc,Calendar date){if(title!=null&&!title.isEmpty()&&desc!=null&&date!=null){return new Task(title,desc,date);}return null;}"
1707	"public void add(Activation act){if(!act.ubQueued){act.ubQueued=true;queue.addLast(act);}}"
1708	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Bundle bundle=getIntent().getExtras();mTastingWineInput=bundle.getString(Constants.WINE_LIST_ID);setContentView(R.layout.create_new_tasting);mFirebaseAuth=FirebaseAuth.getInstance();mWineName=(TextView)findViewById(R.id.create_wine_name);mWineVintage=(TextView)findViewById(R.id.create_wine_vintage);mWineVariety=(TextView)findViewById(R.id.create_wine_variety);mSaveFinish=(Button)findViewById(R.id.save_finish);mSaveFinish.setVisibility(View.GONE);mSaveAddNext=(Button)findViewById(R.id.save_add_next);mSaveAddNext.setText(""Submit"");mFloatingActionButtonPicture=(FloatingActionButton)findViewById(R.id.addTastingWineBottlePictureFab);mFloatingActionButtonPicture.setVisibility(View.GONE);tastingNegativePoints=0;scoreDenominator=0;grapefruitDenominator=0;lemonDenominator=0;limeDenominator=0;orangeDenominator=0;orangepeelDenominator=0;appleDenominator=0;grannysmithDenominator=0;pearDenominator=0;apricotDenominator=0;bananaDenominator=0;figDenominator=0;pomegranateDenominator=0;melonDenominator=0;cantelopeDenominator=0;mangoDenominator=0;guavaDenominator=0;kiwifruitDenominator=0;lycheeDenominator=0;passionfruitDenominator=0;pineappleDenominator=0;watermelonDenominator=0;driedApricotDenominator=0;pruneDenominator=0;peachDenominator=0;cherryDenominator=0;plumDenominator=0;jamDenominator=0;redcurrantDenominator=0;blackcurrantDenominator=0;strawberryDenominator=0;blackberryDenominator=0;raspberryDenominator=0;blueberryDenominator=0;appleblossomDenominator=0;orangeblossomDenominator=0;floralDenominator=0;honeysuckleDenominator=0;geraniumDenominator=0;violetDenominator=0;lavenderDenominator=0;roseDenominator=0;eucalyptusDenominator=0;cutgrassDenominator=0;rosemaryDenominator=0;thymeDenominator=0;mintDenominator=0;hayDenominator=0;mushroomDenominator=0;truffleDenominator=0;leatherDenominator=0;greenpepperDenominator=0;tomatoDenominator=0;cornDenominator=0;onionDenominator=0;pineDenominator=0;cedarDenominator=0;oakDenominator=0;hazelnutDenominator=0;almondDenominator=0;nutmegDenominator=0;walnutDenominator=0;pepperDenominator=0;cinnamonDenominator=0;vanilaDenominator=0;cloveDenominator=0;chiliDenominator=0;licoriceDenominator=0;saffronDenominator=0;tobaccoDenominator=0;coffeeDenominator=0;breadDenominator=0;toastedBreadDenominator=0;butterDenominator=0;creamDenominator=0;blueCheeseDenominator=0;coconutDenominator=0;keroseneDenominator=0;honeyDenominator=0;chocolateDenominator=0;corkDenominator=0;rubberbandDenominator=0;eggDenominator=0;flintDenominator=0;smokeDenominator=0;caramelDenominator=0;mSaveAddNext.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    if (mTastingWineInput == null) {      Toast.makeText(TastingWineInput.this,""Hmmm...we're having a bit of an issue."",Toast.LENGTH_SHORT).show();      finish();      return;    }    if (mTastingWineInput != null) {      String winePushID=mTastingWineInput.toString();      onSubnmitAnswer(winePushID);      return;    }  }});;mGrapefruitInput=(SeekBar)findViewById(R.id.seekBar_grapefruit);mGrapefruitInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int grapefruitValue=0;  public void onProgressChanged(  SeekBar mGrapefruit,  int progress,  boolean fromUser){    grapefruitValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Grapefruit: "" + grapefruitValue,Toast.LENGTH_SHORT);    mGrapefruitValueNo=grapefruitValue;    mToastMessage.show();  }});mLemonInput=(SeekBar)findViewById(R.id.seekBar_lemon);mLemonInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int lemonValue=0;  public void onProgressChanged(  SeekBar mLemonInput,  int progress,  boolean fromUser){    lemonValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Lemon: "" + lemonValue,Toast.LENGTH_SHORT);    mLemonValueNo=lemonValue;    mToastMessage.show();  }});mLimeInput=(SeekBar)findViewById(R.id.seekBar_lime);mLimeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int limeValue=0;  public void onProgressChanged(  SeekBar mLimeInput,  int progress,  boolean fromUser){    limeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Lime: "" + limeValue,Toast.LENGTH_SHORT);    mLimeValueNo=limeValue;    mToastMessage.show();  }});mOrangeInput=(SeekBar)findViewById(R.id.seekBar_orange);mOrangeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int orangeValue=0;  public void onProgressChanged(  SeekBar mOrangeInput,  int progress,  boolean fromUser){    orangeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Orange: "" + orangeValue,Toast.LENGTH_SHORT);    mOrangeValueNo=orangeValue;    mToastMessage.show();  }});mOrangepeelInput=(SeekBar)findViewById(R.id.seekBar_ch_orangepeel);mOrangepeelInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int orangepeelValue=0;  public void onProgressChanged(  SeekBar mOrangepeelInput,  int progress,  boolean fromUser){    orangepeelValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Orangepeel: "" + orangepeelValue,Toast.LENGTH_SHORT);    mOrangepeelValueNo=orangepeelValue;    mToastMessage.show();  }});mAppleInput=(SeekBar)findViewById(R.id.seekBar_apple);mAppleInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int appleValue=0;  public void onProgressChanged(  SeekBar mAppleInput,  int progress,  boolean fromUser){    appleValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Apple: "" + appleValue,Toast.LENGTH_SHORT);    mAppleValueNo=appleValue;    mToastMessage.show();  }});mGrannysmithInput=(SeekBar)findViewById(R.id.seekBar_grannysmith);mGrannysmithInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int grannysmithValue=0;  public void onProgressChanged(  SeekBar mGrannysmithInput,  int progress,  boolean fromUser){    grannysmithValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Grannysmith: "" + grannysmithValue,Toast.LENGTH_SHORT);    mGrannysmithValueNo=grannysmithValue;    mToastMessage.show();  }});mPearInput=(SeekBar)findViewById(R.id.seekBar_pear);mPearInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pearValue=0;  public void onProgressChanged(  SeekBar mPearInput,  int progress,  boolean fromUser){    pearValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Pear: "" + pearValue,Toast.LENGTH_SHORT);    mPearValueNo=pearValue;    mToastMessage.show();  }});mApricotInput=(SeekBar)findViewById(R.id.seekBar_apricot);mApricotInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int apricotValue=0;  public void onProgressChanged(  SeekBar mApricotInput,  int progress,  boolean fromUser){    apricotValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Apricot: "" + apricotValue,Toast.LENGTH_SHORT);    mApricotValueNo=apricotValue;    mToastMessage.show();  }});mBananaInput=(SeekBar)findViewById(R.id.seekBar_banana);mBananaInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int bananaValue=0;  public void onProgressChanged(  SeekBar mBananaInput,  int progress,  boolean fromUser){    bananaValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Banana: "" + bananaValue,Toast.LENGTH_SHORT);    mBananaValueNo=bananaValue;    mToastMessage.show();  }});mFigInput=(SeekBar)findViewById(R.id.seekBar_db_fig);mFigInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int figValue=0;  public void onProgressChanged(  SeekBar mFigInput,  int progress,  boolean fromUser){    figValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Fig: "" + figValue,Toast.LENGTH_SHORT);    mFigValueNo=figValue;    mToastMessage.show();  }});mPomegranateInput=(SeekBar)findViewById(R.id.seekBar_di_pomegranate);mPomegranateInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pomegranateValue=0;  public void onProgressChanged(  SeekBar mPomegranateInput,  int progress,  boolean fromUser){    pomegranateValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Pomegranate: "" + pomegranateValue,Toast.LENGTH_SHORT);    mPomegranateValueNo=pomegranateValue;    mToastMessage.show();  }});mMelonInput=(SeekBar)findViewById(R.id.seekBar_melon);mMelonInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int melonValue=0;  public void onProgressChanged(  SeekBar mMelonInput,  int progress,  boolean fromUser){    melonValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Melon: "" + melonValue,Toast.LENGTH_SHORT);    mMelonValueNo=melonValue;    mToastMessage.show();  }});mCantelopeInput=(SeekBar)findViewById(R.id.seekBar_dn_cantelope);mCantelopeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cantelopeValue=0;  public void onProgressChanged(  SeekBar mCantelopeInput,  int progress,  boolean fromUser){    cantelopeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cantelope: "" + cantelopeValue,Toast.LENGTH_SHORT);    mCantelopeValueNo=cantelopeValue;    mToastMessage.show();  }});mMangoInput=(SeekBar)findViewById(R.id.seekBar_dg_mango);mMangoInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int mangoValue=0;  public void onProgressChanged(  SeekBar mMangoInput,  int progress,  boolean fromUser){    mangoValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Mango: "" + mangoValue,Toast.LENGTH_SHORT);    mMangoValueNo=mangoValue;    mToastMessage.show();  }});mGuavaInput=(SeekBar)findViewById(R.id.seekBar_guava);mGuavaInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int guavaValue=0;  public void onProgressChanged(  SeekBar mGuavaInput,  int progress,  boolean fromUser){    guavaValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Guava: "" + guavaValue,Toast.LENGTH_SHORT);    mGuavaValueNo=guavaValue;    mToastMessage.show();  }});mKiwifruitInput=(SeekBar)findViewById(R.id.seekBar_df_kiwifruit);mKiwifruitInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int kiwifruitValue=0;  public void onProgressChanged(  SeekBar mKiwifruitInput,  int progress,  boolean fromUser){    kiwifruitValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Kiwifruit: "" + kiwifruitValue,Toast.LENGTH_SHORT);    mKiwifruitValueNo=kiwifruitValue;    mToastMessage.show();  }});mLycheeInput=(SeekBar)findViewById(R.id.seekBar_am_lychee);mLycheeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int lycheeValue=0;  public void onProgressChanged(  SeekBar mLycheeInput,  int progress,  boolean fromUser){    lycheeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Lychee: "" + lycheeValue,Toast.LENGTH_SHORT);    mLycheeValueNo=lycheeValue;    mToastMessage.show();  }});mPassionfruitInput=(SeekBar)findViewById(R.id.seekBar_passionfruit);mPassionfruitInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int passionfruitValue=0;  public void onProgressChanged(  SeekBar mPassionfruitInput,  int progress,  boolean fromUser){    passionfruitValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Passionfruit: "" + passionfruitValue,Toast.LENGTH_SHORT);    mPassionfruitValueNo=passionfruitValue;    mToastMessage.show();  }});mPineappleInput=(SeekBar)findViewById(R.id.seekBar_pineapple);mPineappleInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pineappleValue=0;  public void onProgressChanged(  SeekBar mPineappleInput,  int progress,  boolean fromUser){    pineappleValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Pineapple: "" + pineappleValue,Toast.LENGTH_SHORT);    mPineappleValueNo=pineappleValue;    mToastMessage.show();  }});mWatermelonInput=(SeekBar)findViewById(R.id.seekBar_dj_watermelon);mWatermelonInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int watermelonValue=0;  public void onProgressChanged(  SeekBar mWatermelonInput,  int progress,  boolean fromUser){    watermelonValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Watermelon: "" + watermelonValue,Toast.LENGTH_SHORT);    mWatermelonValueNo=watermelonValue;    mToastMessage.show();  }});mDriedApricotInput=(SeekBar)findViewById(R.id.seekBar_ci_driedapricot);mDriedApricotInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int driedApricotValue=0;  public void onProgressChanged(  SeekBar mDriedApricotInput,  int progress,  boolean fromUser){    driedApricotValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Dried Apricot: "" + driedApricotValue,Toast.LENGTH_SHORT);    mDriedApricotValueNo=driedApricotValue;    mToastMessage.show();  }});mPruneInput=(SeekBar)findViewById(R.id.seekBar_cj_prune);mPruneInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pruneValue=0;  public void onProgressChanged(  SeekBar mPruneInput,  int progress,  boolean fromUser){    pruneValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Prune: "" + pruneValue,Toast.LENGTH_SHORT);    mPruneValueNo=pruneValue;    mToastMessage.show();  }});mPeachInput=(SeekBar)findViewById(R.id.seekBar_dm_peach);mPeachInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int peachValue=0;  public void onProgressChanged(  SeekBar mPeachInput,  int progress,  boolean fromUser){    peachValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Peach: "" + peachValue,Toast.LENGTH_SHORT);    mPeachValueNo=peachValue;    mToastMessage.show();  }});mCherryInput=(SeekBar)findViewById(R.id.seekBar_ar_cherry);mCherryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cherryValue=0;  public void onProgressChanged(  SeekBar mCherryInput,  int progress,  boolean fromUser){    cherryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cherry: "" + cherryValue,Toast.LENGTH_SHORT);    mCherryValueNo=cherryValue;    mToastMessage.show();  }});mPlumInput=(SeekBar)findViewById(R.id.seekBar_as_plum);mPlumInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int plumValue=0;  public void onProgressChanged(  SeekBar mPlumInput,  int progress,  boolean fromUser){    plumValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Plum: "" + plumValue,Toast.LENGTH_SHORT);    mPlumValueNo=plumValue;    mToastMessage.show();  }});mJamInput=(SeekBar)findViewById(R.id.seekBar_de_jam);mJamInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int jamValue=0;  public void onProgressChanged(  SeekBar mJamInput,  int progress,  boolean fromUser){    jamValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Jam: "" + jamValue,Toast.LENGTH_SHORT);    mJamValueNo=jamValue;    mToastMessage.show();  }});mRedcurrantInput=(SeekBar)findViewById(R.id.seekBar_an_redcurrant);mRedcurrantInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int redcurrantValue=0;  public void onProgressChanged(  SeekBar mRedcurrantInput,  int progress,  boolean fromUser){    redcurrantValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Redcurrant: "" + redcurrantValue,Toast.LENGTH_SHORT);    mRedcurrantValueNo=redcurrantValue;    mToastMessage.show();  }});mBlackcurrantInput=(SeekBar)findViewById(R.id.seekBar_ao_blackcurrant);mBlackcurrantInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int blackcurrantValue=0;  public void onProgressChanged(  SeekBar mBlackcurrantInput,  int progress,  boolean fromUser){    blackcurrantValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Blackcurrant: "" + blackcurrantValue,Toast.LENGTH_SHORT);    mBlackcurrantValueNo=blackcurrantValue;    mToastMessage.show();  }});mStrawberryInput=(SeekBar)findViewById(R.id.seekBar_ap_strawberry);mStrawberryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int strawberryValue=0;  public void onProgressChanged(  SeekBar mStrawberryInput,  int progress,  boolean fromUser){    strawberryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Strawberry: "" + strawberryValue,Toast.LENGTH_SHORT);    mStrawberryValueNo=strawberryValue;    mToastMessage.show();  }});mBlackberryInput=(SeekBar)findViewById(R.id.seekBar_aq_blackberry);mBlackberryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int blackberryValue=0;  public void onProgressChanged(  SeekBar mBlackberryInput,  int progress,  boolean fromUser){    blackberryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Blackberry: "" + blackberryValue,Toast.LENGTH_SHORT);    mBlackberryValueNo=blackberryValue;    mToastMessage.show();  }});mRaspberryInput=(SeekBar)findViewById(R.id.seekBar_dd_raspberry);mRaspberryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int raspberryValue=0;  public void onProgressChanged(  SeekBar mRaspberryInput,  int progress,  boolean fromUser){    raspberryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Raspberry: "" + raspberryValue,Toast.LENGTH_SHORT);    mRaspberryValueNo=raspberryValue;    mToastMessage.show();  }});mBlueberryInput=(SeekBar)findViewById(R.id.seekBar_dp_blueberry);mBlueberryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int blueberryValue=0;  public void onProgressChanged(  SeekBar mBlueberryInput,  int progress,  boolean fromUser){    blueberryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Blueberry: "" + blueberryValue,Toast.LENGTH_SHORT);    mBlueberryValueNo=blueberryValue;    mToastMessage.show();  }});mAppleblossomInput=(SeekBar)findViewById(R.id.seekBar_aw_apple_blossum_24);mAppleblossomInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int appleblossomValue=0;  public void onProgressChanged(  SeekBar mAppleblossomInput,  int progress,  boolean fromUser){    appleblossomValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Appleblossom: "" + appleblossomValue,Toast.LENGTH_SHORT);    mAppleblossomValueNo=appleblossomValue;    mToastMessage.show();  }});mOrangeblossomInput=(SeekBar)findViewById(R.id.seekBar_au_orange_blossum_22);mOrangeblossomInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int orangeblossomValue=0;  public void onProgressChanged(  SeekBar mOrangeblossomInput,  int progress,  boolean fromUser){    orangeblossomValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Orangeblossom: "" + orangeblossomValue,Toast.LENGTH_SHORT);    mOrangeblossomValueNo=orangeblossomValue;    mToastMessage.show();  }});mFloralInput=(SeekBar)findViewById(R.id.seekBar_dc_floral);mFloralInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int floralValue=0;  public void onProgressChanged(  SeekBar mFloralInput,  int progress,  boolean fromUser){    floralValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Floral: "" + floralValue,Toast.LENGTH_SHORT);    mFloralValueNo=floralValue;    mToastMessage.show();  }});mHoneysuckleInput=(SeekBar)findViewById(R.id.seekBar_as_honeysuckle_20);mHoneysuckleInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int honeysuckleValue=0;  public void onProgressChanged(  SeekBar mHoneysuckleInput,  int progress,  boolean fromUser){    honeysuckleValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Honeysuckle: "" + honeysuckleValue,Toast.LENGTH_SHORT);    mHoneysuckleValueNo=honeysuckleValue;    mToastMessage.show();  }});mGeraniumInput=(SeekBar)findViewById(R.id.seekBar_at_geranium_21);mGeraniumInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int geraniumValue=0;  public void onProgressChanged(  SeekBar mGeraniumInput,  int progress,  boolean fromUser){    geraniumValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Geranium: "" + geraniumValue,Toast.LENGTH_SHORT);    mGeraniumValueNo=geraniumValue;    mToastMessage.show();  }});mVioletInput=(SeekBar)findViewById(R.id.seekBar_ay_violet_26);mVioletInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int violetValue=0;  public void onProgressChanged(  SeekBar mVioletInput,  int progress,  boolean fromUser){    violetValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Violet: "" + violetValue,Toast.LENGTH_SHORT);    mFigValueNo=violetValue;    mToastMessage.show();  }});mLavenderInput=(SeekBar)findViewById(R.id.seekBar_az_lavendar_27);mLavenderInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int lavenderValue=0;  public void onProgressChanged(  SeekBar mLavenderInput,  int progress,  boolean fromUser){    lavenderValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Llavender: "" + lavenderValue,Toast.LENGTH_SHORT);    mLavenderValueNo=lavenderValue;    mToastMessage.show();  }});mRoseInput=(SeekBar)findViewById(R.id.seekBar_ba_rose_28);mRoseInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int roseValue=0;  public void onProgressChanged(  SeekBar mRoseInput,  int progress,  boolean fromUser){    roseValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Rose: "" + roseValue,Toast.LENGTH_SHORT);    mRoseValueNo=roseValue;    mToastMessage.show();  }});mEucalyptusInput=(SeekBar)findViewById(R.id.seekBar_bk_eucalyptus_38);mEucalyptusInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int eucalyptusValue=0;  public void onProgressChanged(  SeekBar mEucalyptusInput,  int progress,  boolean fromUser){    eucalyptusValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Eucalyptus: "" + eucalyptusValue,Toast.LENGTH_SHORT);    mEucalyptusValueNo=eucalyptusValue;    mToastMessage.show();  }});mCutgrassInput=(SeekBar)findViewById(R.id.seekBar_bd_cut_grass_31);mCutgrassInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cutgrassValue=0;  public void onProgressChanged(  SeekBar mCutgrassInput,  int progress,  boolean fromUser){    cutgrassValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Freshly Cut Grass: "" + cutgrassValue,Toast.LENGTH_SHORT);    mCutgrassValueNo=cutgrassValue;    mToastMessage.show();  }});mRosemaryInput=(SeekBar)findViewById(R.id.seekBar_be_rosemary_32);mRosemaryInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int rosemaryValue=0;  public void onProgressChanged(  SeekBar mRosemaryInput,  int progress,  boolean fromUser){    rosemaryValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Rosemary: "" + rosemaryValue,Toast.LENGTH_SHORT);    mRosemaryValueNo=rosemaryValue;    mToastMessage.show();  }});mThymeInput=(SeekBar)findViewById(R.id.seekBar_bf_thyme_33);mThymeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int thymeValue=0;  public void onProgressChanged(  SeekBar mThymeInput,  int progress,  boolean fromUser){    thymeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Thyme: "" + thymeValue,Toast.LENGTH_SHORT);    mThymeValueNo=thymeValue;    mToastMessage.show();  }});mMintInput=(SeekBar)findViewById(R.id.seekBar_bg_mint);mMintInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int mintValue=0;  public void onProgressChanged(  SeekBar mMintInput,  int progress,  boolean fromUser){    mintValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Mint: "" + mintValue,Toast.LENGTH_SHORT);    mMintValueNo=mintValue;    mToastMessage.show();  }});mHayInput=(SeekBar)findViewById(R.id.seekBar_bi_hay);mHayInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int hayValue=0;  public void onProgressChanged(  SeekBar mHayInput,  int progress,  boolean fromUser){    hayValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Hay: "" + hayValue,Toast.LENGTH_SHORT);    mHayValueNo=hayValue;    mToastMessage.show();  }});mMushroomInput=(SeekBar)findViewById(R.id.seekBar_co_mushroom);mMushroomInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int mushroomValue=0;  public void onProgressChanged(  SeekBar mMushroomInput,  int progress,  boolean fromUser){    mushroomValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Mushroom: "" + mushroomValue,Toast.LENGTH_SHORT);    mMushroomValueNo=mushroomValue;    mToastMessage.show();  }});mTruffleInput=(SeekBar)findViewById(R.id.seekBar_cp_truffle);mTruffleInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int truffleValue=0;  public void onProgressChanged(  SeekBar mTruffleInput,  int progress,  boolean fromUser){    truffleValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Truffle: "" + truffleValue,Toast.LENGTH_SHORT);    mTruffleValueNo=truffleValue;    mToastMessage.show();  }});mLeatherInput=(SeekBar)findViewById(R.id.seekBar_cn_leather);mLeatherInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int leatherValue=0;  public void onProgressChanged(  SeekBar mLeatherInput,  int progress,  boolean fromUser){    leatherValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Leather: "" + leatherValue,Toast.LENGTH_SHORT);    mLeatherValueNo=leatherValue;    mToastMessage.show();  }});mGreenpepperInput=(SeekBar)findViewById(R.id.seekBar_bb_greenpepper);mGreenpepperInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int greenpepperValue=0;  public void onProgressChanged(  SeekBar mGreenpepperInput,  int progress,  boolean fromUser){    greenpepperValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Greenpepper: "" + greenpepperValue,Toast.LENGTH_SHORT);    mGreenpepperValueNo=greenpepperValue;    mToastMessage.show();  }});mTomatoInput=(SeekBar)findViewById(R.id.seekBar_bc_tomato);mTomatoInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int tomatoValue=0;  public void onProgressChanged(  SeekBar mTomatoInput,  int progress,  boolean fromUser){    tomatoValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Tomato: "" + tomatoValue,Toast.LENGTH_SHORT);    mTomatoValueNo=tomatoValue;    mToastMessage.show();  }});mCornInput=(SeekBar)findViewById(R.id.seekBar_cy_corn);mCornInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cornValue=0;  public void onProgressChanged(  SeekBar mCornInput,  int progress,  boolean fromUser){    cornValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Corn: "" + cornValue,Toast.LENGTH_SHORT);    mCornValueNo=cornValue;    mToastMessage.show();  }});mOnionInput=(SeekBar)findViewById(R.id.seekBar_cx_onion);mOnionInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int onionValue=0;  public void onProgressChanged(  SeekBar mOnionInput,  int progress,  boolean fromUser){    onionValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Onion: "" + onionValue,Toast.LENGTH_SHORT);    mOnionValueNo=onionValue;    mToastMessage.show();  }});mPineInput=(SeekBar)findViewById(R.id.seekBar_cf_pine_59);mPineInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pineValue=0;  public void onProgressChanged(  SeekBar mPineInput,  int progress,  boolean fromUser){    pineValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Pine: "" + pineValue,Toast.LENGTH_SHORT);    mPineValueNo=pineValue;    mToastMessage.show();  }});mCedarInput=(SeekBar)findViewById(R.id.seekBar_cg_cedar_60);mCedarInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cedarValue=0;  public void onProgressChanged(  SeekBar mCedarInput,  int progress,  boolean fromUser){    cedarValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cedar: "" + cedarValue,Toast.LENGTH_SHORT);    mCedarValueNo=cedarValue;    mToastMessage.show();  }});mOakInput=(SeekBar)findViewById(R.id.seekBar_cd_oak);mOakInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int oakValue=0;  public void onProgressChanged(  SeekBar mOakInput,  int progress,  boolean fromUser){    oakValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Oak: "" + oakValue,Toast.LENGTH_SHORT);    mOakValueNo=oakValue;    mToastMessage.show();  }});mHazelnutInput=(SeekBar)findViewById(R.id.seekBar_cb_hazelnut);mHazelnutInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int hazelnutValue=0;  public void onProgressChanged(  SeekBar mHazelnutInput,  int progress,  boolean fromUser){    hazelnutValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Hazelnut: "" + hazelnutValue,Toast.LENGTH_SHORT);    mHazelnutValueNo=hazelnutValue;    mToastMessage.show();  }});mAlmondInput=(SeekBar)findViewById(R.id.seekBar_cc_almond);mAlmondInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int almondValue=0;  public void onProgressChanged(  SeekBar mAlmondInput,  int progress,  boolean fromUser){    almondValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Almond: "" + almondValue,Toast.LENGTH_SHORT);    mFigValueNo=almondValue;    mToastMessage.show();  }});mNutmegInput=(SeekBar)findViewById(R.id.seekBar_by_nutmeg_52);mNutmegInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int nutmegValue=0;  public void onProgressChanged(  SeekBar mNutmegInput,  int progress,  boolean fromUser){    nutmegValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Nutmeg: "" + nutmegValue,Toast.LENGTH_SHORT);    mNutmegValueNo=nutmegValue;    mToastMessage.show();  }});mWalnutInput=(SeekBar)findViewById(R.id.seekBar_dl_walnut);mWalnutInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int walnutValue=0;  public void onProgressChanged(  SeekBar mWalnutInput,  int progress,  boolean fromUser){    walnutValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Walnut: "" + walnutValue,Toast.LENGTH_SHORT);    mWalnutValueNo=walnutValue;    mToastMessage.show();  }});mPepperInput=(SeekBar)findViewById(R.id.seekBar_bv_pepper);mPepperInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int pepperValue=0;  public void onProgressChanged(  SeekBar mFigInput,  int progress,  boolean fromUser){    pepperValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Pepper: "" + pepperValue,Toast.LENGTH_SHORT);    mPepperValueNo=pepperValue;    mToastMessage.show();  }});mCinnamonInput=(SeekBar)findViewById(R.id.seekBar_bw_cinnamon);mCinnamonInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cinnamonValue=0;  public void onProgressChanged(  SeekBar mCinnamonInput,  int progress,  boolean fromUser){    cinnamonValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cinnamon: "" + cinnamonValue,Toast.LENGTH_SHORT);    mCinnamonValueNo=cinnamonValue;    mToastMessage.show();  }});mVanilaInput=(SeekBar)findViewById(R.id.seekBar_bu_vanilla);mVanilaInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int vanilaValue=0;  public void onProgressChanged(  SeekBar mVanilaInput,  int progress,  boolean fromUser){    vanilaValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Vanila: "" + vanilaValue,Toast.LENGTH_SHORT);    mVanilaValueNo=vanilaValue;    mToastMessage.show();  }});mCloveInput=(SeekBar)findViewById(R.id.seekBar_bz_clove);mCloveInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int cloveValue=0;  public void onProgressChanged(  SeekBar mCloveInput,  int progress,  boolean fromUser){    cloveValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Clove: "" + cloveValue,Toast.LENGTH_SHORT);    mCloveValueNo=cloveValue;    mToastMessage.show();  }});mChiliInput=(SeekBar)findViewById(R.id.seekBar_dh_chili);mChiliInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int chiliValue=0;  public void onProgressChanged(  SeekBar mChiliInput,  int progress,  boolean fromUser){    chiliValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Chili: "" + chiliValue,Toast.LENGTH_SHORT);    mChiliValueNo=chiliValue;    mToastMessage.show();  }});mLicoriceInput=(SeekBar)findViewById(R.id.seekBar_bx_licorice);mLicoriceInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int licoriceValue=0;  public void onProgressChanged(  SeekBar mLicoriceInput,  int progress,  boolean fromUser){    licoriceValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Licorice: "" + licoriceValue,Toast.LENGTH_SHORT);    mLicoriceValueNo=licoriceValue;    mToastMessage.show();  }});mSaffronInput=(SeekBar)findViewById(R.id.seekBar_dk_saffron);mSaffronInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int saffronValue=0;  public void onProgressChanged(  SeekBar mSaffronInput,  int progress,  boolean fromUser){    saffronValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Saffron: "" + saffronValue,Toast.LENGTH_SHORT);    mSaffronValueNo=saffronValue;    mToastMessage.show();  }});mTobaccoInput=(SeekBar)findViewById(R.id.seekBar_bh_tobacco);mTobaccoInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int tobaccoValue=0;  public void onProgressChanged(  SeekBar mTobaccoInput,  int progress,  boolean fromUser){    tobaccoValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Tobacco: "" + tobaccoValue,Toast.LENGTH_SHORT);    mTobaccoValueNo=tobaccoValue;    mToastMessage.show();  }});mCoffeeInput=(SeekBar)findViewById(R.id.seekBar_bs_coffee);mCoffeeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int coffeeValue=0;  public void onProgressChanged(  SeekBar mCoffeeInput,  int progress,  boolean fromUser){    coffeeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Coffee: "" + coffeeValue,Toast.LENGTH_SHORT);    mCoffeeValueNo=coffeeValue;    mToastMessage.show();  }});mBreadInput=(SeekBar)findViewById(R.id.seekBar_bo_bread_42);mBreadInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int breadValue=0;  public void onProgressChanged(  SeekBar mBreadInput,  int progress,  boolean fromUser){    breadValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Bread: "" + breadValue,Toast.LENGTH_SHORT);    mBreadValueNo=breadValue;    mToastMessage.show();  }});mToastedBreadInput=(SeekBar)findViewById(R.id.seekBar_br_toastedbread);mToastedBreadInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int toastedBreadValue=0;  public void onProgressChanged(  SeekBar mToastedBreadInput,  int progress,  boolean fromUser){    toastedBreadValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Toasted Bread: "" + toastedBreadValue,Toast.LENGTH_SHORT);    mToastedBreadValueNo=toastedBreadValue;    mToastMessage.show();  }});mButterInput=(SeekBar)findViewById(R.id.seekBar_bq_butter);mButterInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int butterValue=0;  public void onProgressChanged(  SeekBar mButterInput,  int progress,  boolean fromUser){    butterValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Butter: "" + butterValue,Toast.LENGTH_SHORT);    mButterValueNo=butterValue;    mToastMessage.show();  }});mCreamInput=(SeekBar)findViewById(R.id.seekBar_bp_cream_44);mCreamInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int creamValue=0;  public void onProgressChanged(  SeekBar mCreamInput,  int progress,  boolean fromUser){    creamValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cream: "" + creamValue,Toast.LENGTH_SHORT);    mCreamValueNo=creamValue;    mToastMessage.show();  }});mBlueCheeseInput=(SeekBar)findViewById(R.id.seekBar_dr_blue_cheese);mBlueCheeseInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int bluecheeseValue=0;  public void onProgressChanged(  SeekBar mBlueCheeseInput,  int progress,  boolean fromUser){    bluecheeseValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Blue Cheese: "" + bluecheeseValue,Toast.LENGTH_SHORT);    mBlueCheeseValueNo=bluecheeseValue;    mToastMessage.show();  }});mCoconutInput=(SeekBar)findViewById(R.id.seekBar_ca_coconut);mCoconutInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int coconutValue=0;  public void onProgressChanged(  SeekBar mCoconutInput,  int progress,  boolean fromUser){    coconutValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Coconut: "" + coconutValue,Toast.LENGTH_SHORT);    mCoconutValueNo=coconutValue;    mToastMessage.show();  }});mKeroseneInput=(SeekBar)findViewById(R.id.seekBar_bm_kerosene);mKeroseneInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int keroseneValue=0;  public void onProgressChanged(  SeekBar mKeroseneInput,  int progress,  boolean fromUser){    keroseneValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Kerosene: "" + keroseneValue,Toast.LENGTH_SHORT);    mKeroseneValueNo=keroseneValue;    mToastMessage.show();  }});mHoneyInput=(SeekBar)findViewById(R.id.seekBar_ck_honey);mHoneyInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int honeyValue=0;  public void onProgressChanged(  SeekBar mHoneyInput,  int progress,  boolean fromUser){    honeyValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Honey: "" + honeyValue,Toast.LENGTH_SHORT);    mHoneyValueNo=honeyValue;    mToastMessage.show();  }});mChocolateInput=(SeekBar)findViewById(R.id.seekBar_cl_chocolate);mChocolateInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int chocolateValue=0;  public void onProgressChanged(  SeekBar mChocolateInput,  int progress,  boolean fromUser){    chocolateValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Chocolate: "" + chocolateValue,Toast.LENGTH_SHORT);    mChocolateValueNo=chocolateValue;    mToastMessage.show();  }});mCorkInput=(SeekBar)findViewById(R.id.seekBar_cq_cork);mCorkInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int corkValue=0;  public void onProgressChanged(  SeekBar mCorkInput,  int progress,  boolean fromUser){    corkValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Cork: "" + corkValue,Toast.LENGTH_SHORT);    mCorkValueNo=corkValue;    mToastMessage.show();  }});mRubberbandInput=(SeekBar)findViewById(R.id.seekBar_cv_rubberband);mRubberbandInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int rubberbandValue=0;  public void onProgressChanged(  SeekBar mRubberbandInput,  int progress,  boolean fromUser){    rubberbandValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Rubberband: "" + rubberbandValue,Toast.LENGTH_SHORT);    mRubberbandValueNo=rubberbandValue;    mToastMessage.show();  }});mEggInput=(SeekBar)findViewById(R.id.seekBar_cw_egg);mEggInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int eggValue=0;  public void onProgressChanged(  SeekBar mEggInput,  int progress,  boolean fromUser){    eggValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Fig: "" + eggValue,Toast.LENGTH_SHORT);    mEggValueNo=eggValue;    mToastMessage.show();  }});mFlintInput=(SeekBar)findViewById(R.id.seekBar_bl_flint_39);mFlintInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int flintValue=0;  public void onProgressChanged(  SeekBar mFlintInput,  int progress,  boolean fromUser){    flintValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Flint: "" + flintValue,Toast.LENGTH_SHORT);    mFlintValueNo=flintValue;    mToastMessage.show();  }});mSmokeInput=(SeekBar)findViewById(R.id.seekBar_bt_smoke_47);mSmokeInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int smokeValue=0;  public void onProgressChanged(  SeekBar mSmokeInput,  int progress,  boolean fromUser){    smokeValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Smoke: "" + smokeValue,Toast.LENGTH_SHORT);    mSmokeValueNo=smokeValue;    mToastMessage.show();  }});mCaramelInput=(SeekBar)findViewById(R.id.seekBar_dq_caramel);mCaramelInput.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){  int caramelValue=0;  public void onProgressChanged(  SeekBar mCaramelInput,  int progress,  boolean fromUser){    caramelValue=progress;  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){    if (mToastMessage != null) {      mToastMessage.cancel();    }  }  @Override public void onStopTrackingTouch(  SeekBar seekBar){    mToastMessage=Toast.makeText(TastingWineInput.this,""Caramel: "" + caramelValue,Toast.LENGTH_SHORT);    mCaramelValueNo=caramelValue;    mToastMessage.show();  }});}"
1709	"@Override public boolean isValuePresent(){return !StringUtils.isEmpty(this.value);}"
1710	"private void initBackground(){background=new Texture(""bg2.png"");}"
1711	"@Override protected String getErrorMessage(){MonthYearNode<?> otherNode=getOtherMonthYearNode();BigDecimal year1=otherNode.getYearNode().getValue();BigDecimal month1=otherNode.getMonthNode().getValue();BigDecimal year2=getOwner().getYearNode().getValue();BigDecimal month2=getOwner().getMonthNode().getValue();if(year1!=null&&year2!=null){int yearComp=year2.compareTo(year1);if(yearComp>0){return null;}if(yearComp<0||month1!=null&&month2!=null&&month2.compareTo(month1)<0){return ""Cannot be earlier than ""+otherNode.getNodeLabel();}}return null;}"
1712	"@Override public Bundle getAuthToken(AccountAuthenticatorResponse response,Account account,String authTokenType,Bundle options) throws NetworkErrorException{ final AccountManager accountManager=AccountManager.get(context);String authToken=accountManager.peekAuthToken(account,authTokenType);Date validityTime=new Date(accountManager.getUserData(account,Constants.AUTHTOKEN_VALIDITY));Date currentTime=new Date();if(validityTime.compareTo(currentTime)>0){accountManager.invalidateAuthToken(Constants.ACCOUNT_TYPE,authToken);}else { final Bundle result=new Bundle();result.putString(AccountManager.KEY_ACCOUNT_NAME,account.name);result.putString(AccountManager.KEY_ACCOUNT_TYPE,account.type);result.putString(AccountManager.KEY_AUTHTOKEN,authToken);return result;} final Bundle bundle=new Bundle();return bundle;}"
1713	"@Override public boolean canBeUsedAs(EDataType type){return true;}"
1714	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
1715	"public void onItemSelected(AdapterView<?> arg0,View arg1,int position,long id){dist.clear();String item=mnb3.getSelectedItem().toString();Collection<DistrictContract> arr_districts=new ArrayList<>();arr_districts=db.getAllDistrictsByProvince(prov_map.get(item));for(DistrictContract dst : arr_districts){dist.add(dst.getDistNme());dist_map.put(dst.getDistNme(),dst.getDistCode());}ArrayAdapter<String> adapter1=new ArrayAdapter<>(this,android.R.layout.simple_spinner_item,dist);adapter1.setDropDownViewResource(android.R.layout.simple_list_item_1);mnb2.setAdapter(adapter1);}"
1716	"@Override public int hashCode(){return companyId!=null?companyId.hashCode():0;}"
1717	"private void addTypeOne(String pHead,String pBody,double weight){System.out.println(""Adding type one: ""+pHead+"", ""+pBody+"", ""+weight);}"
1718	"@Override public void onClick(View view){if(want_user.isChecked()){long_or_short=test_time.isChecked();Intent act2=new Intent(view.getContext(),CustomerName.class);startActivity(act2);}else {long_or_short=test_time.isChecked();Intent act2=new Intent(view.getContext(),Calculation.class);startActivity(act2);}}"
1719	"public static Result get(){String query=null;List<Address> addr=null;int limit=20;int offset=0; final String url_head=""http://localhost:9000"";String uri=request().uri();String path=request().path();String field=null;String tableName=null;try{uri=java.net.URLDecoder.decode(uri,""UTF-8"");System.out.println(uri);}catch(UnsupportedEncodingException e){e.printStackTrace();}query_pattern=Pattern.compile(query_rule);query_matcher=query_pattern.matcher(uri);limit_pattern=Pattern.compile(limit_rule);limit_matcher=limit_pattern.matcher(uri);field_pattern=Pattern.compile(field_rule);field_matcher=field_pattern.matcher(uri);if(query_matcher.find()){query=query_matcher.group(1);System.out.println(""\nquery is ""+query+""\n"");}if(limit_matcher.find()){limit=Integer.parseInt(limit_matcher.group(1));offset=Integer.parseInt(limit_matcher.group(2));System.out.println(""limit is ""+limit+""     offset is ""+offset+""\n"");}if(field_matcher.find()){field=field_matcher.group(1);System.out.println(""field is ""+field+""\n"");}tableName=path.substring(1);if(tableName.equals(""address"")){tableName=""address"";}System.out.println(""Table Name is ""+tableName+""\n"");addr=AddressDataService.get(query,field,tableName);Address_resultNode result_node=new Address_resultNode();int pageContent=0;if(addr.size()<limit){pageContent=addr.size();}else {pageContent=limit;}for(int i=offset;i<(offset+pageContent);i++){AddressNode element1=new AddressNode();link link1=new link(""self"",url_head+path+""/""+addr.get(i).address_id);link link2=new link(""City"",url_head+""/city/""+addr.get(i).city_id);element1.setLink(link1);element1.setLink(link2);element1.setAddress_id(addr.get(i).address_id);element1.setPhone(addr.get(i).phone);element1.setLast_update(addr.get(i).last_update);result_node.add_address(element1);}int length=addr.size();int pre_offset=offset-limit;int next_offset=offset+limit;String pre_url=null;String next_url=null;System.out.println(length);int las_offset=length-limit;if(las_offset<0){las_offset=0;}if(pre_offset<0){pre_offset=0;}if(offset==0){pre_url="""";}else {pre_url=url_head+path+""?limit=""+limit+""&offset=""+pre_offset;}if(next_offset>=length){next_url="""";}else {next_url=url_head+path+""?limit=""+limit+""&offset=""+next_offset;}String fir_url=url_head+path+""?limit=""+limit+""&offset=0"";String las_url=url_head+path+""?limit=""+limit+""&offset=""+(las_offset);link first=new link(""first"",fir_url);link last=new link(""last"",las_url);link previous=new link(""previous"",pre_url);link next=new link(""next"",next_url);result_node.add_address(first);result_node.add_address(last);result_node.add_address(previous);result_node.add_address(next);return ok(new Gson().toJson(result_node));}"
1720	"@Override public void onClick(View view){}"
1721	"public MarketoRecordResult executeOperation(String position) throws IOException{switch (properties.inputOperation.getValue()){case getLead :if(isDynamic){adaptSchemaToDynamic();}return client.getLead(properties,position);case getMultipleLeads :if(isDynamic){adaptSchemaToDynamic();}return client.getMultipleLeads(properties,position);case getLeadActivity :return client.getLeadActivity(properties,position);case getLeadChanges :return client.getLeadChanges(properties,position);case CustomObject :switch (properties.customObjectAction.getValue()){case describe :return ((MarketoRESTClient)client).describeCustomObject(properties);case list :return ((MarketoRESTClient)client).listCustomObjects(properties);case get :if(isDynamic){adaptSchemaToDynamic();}return ((MarketoRESTClient)client).getCustomObjects(properties,position);}}throw new IOException(messages.getMessage(""error.reader.invalid.operation""));}"
1722	"public ITrimCurve createTrimCurve(Rhino3dmFile context,IServerI s,ISurfaceI srf){return null;}"
1723	"public JSONString(JSONReader value){super(value);this.value=new String(value.getData(),value.getPos(),value.getEnd());}"
1724	"private FixedSizeNatBitSet(FixedSizeNatBitSet fullSet){super(fullSet.domainSize());empty=true;emptyView=fullSet;}"
1725	"public final int hashCode(){return nodeEq.keyEq.hashCode(key)^nodeEq.valueEq.hashCode(val);}"
1726	"public void doValidation(){boolean endTransaction=false;if(!HibernateUtil.isTransactionInProgress()){endTransaction=true;HibernateUtil.openSession();HibernateUtil.startTransaction();}List<AuthMethod> authMethods=DbAuthMethod.findOverlapIps(ipLo,ipHi);int otherAgreements=0;if(authMethods!=null){for(AuthMethod authMethod : authMethods){AuthMethodInstance amInstance=DbAuthMethod.getInstance(authMethod);if(methodId!=null&&methodId.sourceEquals(amInstance.obtainMethodId())){continue;}otherAgreements+=compare(amInstance.getIpLo(),amInstance.getIpHi(),amInstance.obtainMethodId());}}if(otherAgreements>0){response.getInfoMessages().add(""This IP ""+(ipLo==ipHi?""address"":""range"")+"" exists on ""+otherAgreements+"" other agreement""+(otherAgreements>1?""s"":"""")+"" consistent with this assignment."");}List<ProxyIp> proxyIps=DbProxyIp.findOverlapIps(ipLo,ipHi);if(proxyIps!=null){for(ProxyIp proxyIp : proxyIps){ProxyIpInstance pipInstance=DbProxyIp.getInstance(proxyIp);if(methodId!=null&&methodId.sourceEquals(pipInstance.obtainMethodId())){continue;}compare(pipInstance.getIpLo(),pipInstance.getIpHi(),pipInstance.obtainMethodId());}}if(endTransaction){HibernateUtil.endTransaction();HibernateUtil.closeSession();}}"
1727	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1728	"@Override protected void map(Text key,BytesWritable value,Context context) throws IOException,InterruptedException{log.debug(""==========HAFile key={}"",key);byte[] bytes=value.getBytes();List<ChunkInfo> chunkList=new FSPCore(key.toString(),bytes,Constant.DEFAULT_CHUNK_SIZE).fsp();log.debug(""=======len@chunkList={}"",chunkList.size());for(ChunkInfo val : chunkList){String hash=StringUtils.getKeccak(val.getBuffer());val.setHash(hash);log.debug(""===========hash={}"",hash);Text reduceKey=new Text(hash);context.write(reduceKey,val);}}"
1729	"public boolean doPost(){return true;}"
1730	"@Override public int getSwingValue(){return 0;}"
1731	"@Inject public ExpressionCompiler(Metadata metadata,PageFunctionCompiler pageFunctionCompiler){this.metadata=requireNonNull(metadata,""metadata is null"");this.pageFunctionCompiler=requireNonNull(pageFunctionCompiler,""pageFunctionCompiler is null"");this.cacheStatsMBean=new CacheStatsMBean(cursorProcessors);}"
1732	"private void scrollAd(){User user=SharedPreManager.mInstance(mContext).getUser(mContext);if(user!=null){int uid=user.getMuid();int ctype=CommonConstant.NEWS_CTYPE;int ptype=CommonConstant.NEWS_PTYPE;String imei=DeviceInfoUtil.getDeviceImei(mContext);String requestUrl=HttpConstant.URL_SCROLL_AD+""?uid=""+uid+""&ctype=""+ctype+""&ptype=""+ptype+""&mid=""+imei;RequestQueue requestQueue=QiDianApplication.getInstance().getRequestQueue();StringRequest request=new StringRequest(Request.Method.GET,requestUrl,new Response.Listener<String>(){  @Override public void onResponse(  String response){  }},null);requestQueue.add(request);}}"
1733	"public NonIfsDetailsForm populate(CompetitionResource competitionResource){NonIfsDetailsForm form=new NonIfsDetailsForm();form.setTitle(competitionResource.getName());form.setInnovationSectorCategoryId(competitionResource.getInnovationSector());form.setInnovationAreaCategoryId(competitionResource.getInnovationAreas().stream().findAny().orElse(null));form.setUrl(competitionResource.getNonIfsUrl());form.setApplicantNotifiedDate(new MilestoneRowForm(MilestoneType.NOTIFICATIONS,competitionResource.getFundersPanelEndDate()));form.setOpenDate(new MilestoneRowForm(MilestoneType.OPEN_DATE,competitionResource.getStartDate()));form.setCloseDate(new MilestoneRowForm(MilestoneType.SUBMISSION_DATE,competitionResource.getEndDate()));return form;}"
1734	"private boolean insert(byte[] bKeys){int from=1;int klen=bKeys.length;for(int i=0;i<klen;i++){int c=bKeys[i]&0xff;int to=base[from]+c;reSize((int)(to*1.2)+1);if(check[to]==from){if(i==klen-1){return true;}from=to;}else {if(check[to]==EPTY_BACK_VALUE){check[to]=from;if(i==klen-1){base[to]=-id;id=id+1;return true;}else {int next=bKeys[i+1]&0xff;base[to]=findAvailableHop(next);from=to;}if(to>=size){size=to+1;}}else {int rConflict=conflict(from,c);int locate=base[rConflict]+c;if(check[locate]!=EPTY_BACK_VALUE){System.err.println(""conflict"");}check[locate]=rConflict;if(i==klen-1){base[locate]=-id;id=id+1;}else {int nah=bKeys[i+1]&0xff;base[locate]=findAvailableHop(nah);}if(locate>=size){size=locate+1;}from=locate;if(i==klen-1){return true;}}}}return false;}"
1735	"@SuppressWarnings(""rawtypes"") private void validatePropertyWithConstraint(String propertyName,Object obj,Errors errors,BeanWrapper bean,Map constrainedProperties){int i=propertyName.lastIndexOf(""."");String constrainedPropertyName;if(i>-1){constrainedPropertyName=propertyName.substring(i+1,propertyName.length());}else {constrainedPropertyName=propertyName;}FieldError fieldError=errors.getFieldError(constrainedPropertyName);if(fieldError==null){ConstrainedProperty c=(ConstrainedProperty)constrainedProperties.get(constrainedPropertyName);c.setMessageSource(messageSource);c.validate(obj,bean.getPropertyValue(constrainedPropertyName),errors);}}"
1736	"@Override public String getUrlToLoad(int x,int y,int zoom){if(urlToLoad==null){return null;}return MessageFormat.format(urlToLoad,zoom+"""",x+"""",y+"""");}"
1737	"@Override public void onClick(View view){mProcessLike=true;refLike.addValueEventListener(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    if (mProcessLike) {      String userId=mAuth.getCurrentUser().getUid();      if (dataSnapshot.child(key).hasChild(""likedBy"")) {        if (dataSnapshot.child(key).child(""likedBy"").hasChild(userId)) {          refLike.child(key).child(""likedBy"").child(userId).removeValue();          mProcessLike=false;        } else {          refLike.child(key).child(""likedBy"").child(userId).setValue(true);          sendLikeNotif(name,key,posterId);          mProcessLike=false;        }      } else {        refLike.child(key).child(""likedBy"").child(userId).setValue(true);        sendLikeNotif(name,key,posterId);        mProcessLike=false;      }    }  }  @Override public void onCancelled(  DatabaseError databaseError){  }});}"
1738	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
1739	"public int getBoundForPath(int[] path){int bound=0;if(path.length==1||path[1]==0){return bound;}else {Arrays.fill(usedSectors,false);int i=0;usedSectors[path[i]]=true;while(i+1<numSectors&&path[i]>0&&path[i+1]>0){bound+=getDistance(sectorList[path[i]],sectorList[path[i+1]]);usedSectors[path[i+1]]=true;i++;}if(i+1==numSectors){return bound;}for(int j=1;j<=numSectors;j++){if(usedSectors[j]){continue;}int lowest=Integer.MAX_VALUE;for(int k=1;k<=numSectors;k++){if(!shortestPaths.get(sectorList[j]).containsKey(sectorList[k])){continue;}if(usedSectors[k]&&k!=path[i]){continue;}lowest=Math.min(shortestPaths.get(sectorList[j]).get(sectorList[k]),lowest);}bound+=lowest;}return bound;}}"
1740	"@Override public CephBackupStorageMonBase call(CephBackupStorageMonVO arg){return new CephBackupStorageMonBase(arg);}"
1741	"@Override public boolean equals(Object other){return this==other||(other instanceof DisjoinCommand&&this.eventIndex.equals(((DisjoinCommand)other).eventIndex)&&this.personIndex.equals(((DisjoinCommand)other).personIndex));}"
1742	"public static void main(String[] args){Graph g=BaseGraphGenerator.generate(4,4,""torus"");}"
1743	"public boolean hasNext(){return iter.hasNext();}"
1744	"boolean isNeeded(){for(int i=0;i<ignoreTypes.length;i++){if(ignoreTypes[i]==true){return true;}}return false;}"
1745	"@Override public void onPrepared(MediaPlayer player){Log.d(TAG,""onPrepared from MediaPlayer"");configMediaPlayerState();}"
1746	"@Override public int compare(Q7WaitInfo o1,Q7WaitInfo o2){return Long.valueOf(o1.getLastTick()).compareTo(Long.valueOf(o2.getLastTick()));}"
1747	"public static double distance(RotationMatrixReadOnly m1,RotationMatrixReadOnly m2){double m00=m1.getM00()*m2.getM00()+m1.getM01()*m2.getM01()+m1.getM02()*m2.getM02();double m01=m1.getM00()*m2.getM10()+m1.getM01()*m2.getM11()+m1.getM02()*m2.getM12();double m02=m1.getM00()*m2.getM20()+m1.getM01()*m2.getM21()+m1.getM02()*m2.getM22();double m10=m1.getM10()*m2.getM00()+m1.getM11()*m2.getM01()+m1.getM12()*m2.getM02();double m11=m1.getM10()*m2.getM10()+m1.getM11()*m2.getM11()+m1.getM12()*m2.getM12();double m12=m1.getM10()*m2.getM20()+m1.getM11()*m2.getM21()+m1.getM12()*m2.getM22();double m20=m1.getM20()*m2.getM00()+m1.getM21()*m2.getM01()+m1.getM22()*m2.getM02();double m21=m1.getM20()*m2.getM10()+m1.getM21()*m2.getM11()+m1.getM22()*m2.getM12();double m22=m1.getM20()*m2.getM20()+m1.getM21()*m2.getM21()+m1.getM22()*m2.getM22();double angle,x,y,z;x=m21-m12;y=m02-m20;z=m10-m01;double s=EuclidCoreTools.norm(x,y,z);if(s>AxisAngleConversion.EPS){double sin=0.5*s;double cos=0.5*(m00+m11+m22-1.0);angle=Math.atan2(sin,cos);}else {angle=Math.PI;}return angle;}"
1748	"@Override public void mouseClicked(MouseEvent e){if(currentBetAmount<currentPlayerBalance){currentBetAmount+=1;betAmount.setText(String.valueOf(currentBetAmount));}}"
1749	"public static SQLResult match(SQLResultSet userResultSet,SQLResultSet refResultSet){boolean isCorrect=false;String errorMessage=null;String hintMessage=null;if(userResultSet.getErrorMessage()!=null){errorMessage=userResultSet.getErrorMessage();return newSQLResult(userResultSet,false,errorMessage,null);}if(refResultSet.getErrorMessage()!=null){errorMessage=refResultSet.getErrorMessage();return newSQLResult(userResultSet,false,errorMessage,null);}for(SQLResultColumn refResultColumn : refResultSet.getColumns()){boolean columnValid=false;boolean columnExist=false;for(SQLResultColumn userResultColumn : userResultSet.getColumns()){if(userResultColumn.getType().equals(refResultColumn.getType())){columnExist=true;if(userResultColumn.getData().containsAll(refResultColumn.getData())&&refResultColumn.getData().containsAll(userResultColumn.getData())){columnValid=true;break;}}}if(!columnValid){isCorrect=false;if(!columnExist){hintMessage=""Missing Column: ""+refResultColumn.getAlias()+""(""+refResultColumn.getType()+"")"";break;}hintMessage=""Query is not correct yet."";break;}else {isCorrect=true;}}return newSQLResult(userResultSet,isCorrect,null,hintMessage);}"
1750	"public boolean isSunk(){}"
1751	"protected Media(Parcel in){uuid=in.readString();thumb=in.readString();time=in.readString();width=in.readString();height=in.readString();selected=in.readByte()!=0;local=in.readByte()!=0;date=in.readString();loaded=in.readByte()!=0;belongingMediaShareUUID=in.readString();uploaded=in.readByte()!=0;orientationNumber=in.readInt();type=in.readString();}"
1752	"@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){tvLongOutlet.setText(listDataArea.get(i).get_txtLongitude().equals("""")||listDataArea.get(i).get_txtLongitude().equals(""null"")?""Not Found"":listDataArea.get(i).get_txtLongitude());tvLatOutlet.setText(listDataArea.get(i).get_txtLatitude().equals("""")||listDataArea.get(i).get_txtLatitude().equals(""null"")?""Not Found"":listDataArea.get(i).get_txtLatitude());if(mlongitude!=0&&mlatitude!=0){countDistance(mlatitude,mlongitude);}}"
1753	"private String getFunctionNameFromLine(String line){String[] token=line.split("" "");String func="""";int end=0;for(int i=0;i<token.length;i++){if(hasPrimitiveType(token[i])){if(i+1<token.length){func=token[i+1];end=func.indexOf('(');System.out.println(""Function Name is ""+func.substring(0,end));return func;}}}return null;}"
1754	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
1755	"@Override public void cumulate(ReusableRow input,ReusableRow output){Object tuples[]=new Object[input.getFieldNames().size()+1];int i=0;for(;i<input.getFieldNames().size();i++){tuples[i]=input.getField(i);}tuples[i]=accumulatorValue;try{accumulatorValue=expressionWrapper.getValidationAPI().exec(tuples);}catch(Exception e){throw new RuntimeException(""Exception in cumulate expression: ""+expressionWrapper.getValidationAPI().getExpr()+"".\nRow being processed: ""+input.toString(),e);}output.setField(0,(Comparable)accumulatorValue);}"
1756	"private void isiDeleteShare(IsilonApi isi,FileDeviceInputOutput args,SMBFileShare smbFileShare) throws IsilonException{SMBShareMap currentShares=args.getFileObjShares();if(currentShares==null||smbFileShare==null){return ;}SMBFileShare fileShare=currentShares.get(smbFileShare.getName());if(fileShare!=null){String nativeId=fileShare.getNativeId();String zoneName=getZoneName(args.getvNAS());if(zoneName!=null){isi.deleteShare(nativeId,zoneName);}else {isi.deleteShare(nativeId);}currentShares.remove(smbFileShare.getName());}}"
1757	"public void showLandmarkDetailsView(ExtendedLandmark selectedLandmark,View lvView,double[] currentLocation,boolean loadAd){TextView name=(TextView)lvView.findViewById(R.id.lvname);TextView header=(TextView)lvView.findViewById(R.id.lvheader);ImageButton lvActionButton=(ImageButton)lvView.findViewById(R.id.lvActionButton);ImageView thumbnail=(ImageView)lvView.findViewById(R.id.thumbnailButton);View lvOpenButton=lvView.findViewById(R.id.lvOpenButton);View lvCommentButton=lvView.findViewById(R.id.lvCommentButton);View lvCallButton=lvView.findViewById(R.id.lvCallButton);ImageButton lvRouteButton=(ImageButton)lvView.findViewById(R.id.lvCarRouteButton);TextView desc=(TextView)lvView.findViewById(R.id.lvdesc);desc.setMovementMethod(LinkMovementMethod.getInstance());if(loadAd){AdsUtils.loadAd(activity);}name.setText(selectedLandmark.getName());desc.setText("""");header.setText("""");int visibleButtons=5;lvActionButton.setVisibility(View.VISIBLE);lvView.findViewById(R.id.lvActionSeparator).setVisibility(View.VISIBLE);lvCommentButton.setVisibility(View.VISIBLE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.VISIBLE);lvOpenButton.setVisibility(View.VISIBLE);lvView.findViewById(R.id.lvOpenSeparator).setVisibility(View.VISIBLE);if(landmarkManager.hasMyLocation()){lvRouteButton.setVisibility(View.VISIBLE);lvView.findViewById(R.id.lvCarRouteSeparator).setVisibility(View.VISIBLE);int routeType=ConfigurationManager.getInstance().getInt(ConfigurationManager.ROUTE_TYPE);if(routeType==2){lvRouteButton.setImageResource(R.drawable.walk48);}else {lvRouteButton.setImageResource(R.drawable.route48);}}else {lvRouteButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCarRouteSeparator).setVisibility(View.GONE);}String phone=selectedLandmark.getPhone();if(phone!=null&&OsUtil.hasTelephony(activity)){lvCallButton.setVisibility(View.VISIBLE);lvView.findViewById(R.id.lvCallSeparator).setVisibility(View.VISIBLE);}else {lvCallButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCallSeparator).setVisibility(View.GONE);visibleButtons--;}float dist=DistanceUtils.distanceInKilometer(currentLocation[0],currentLocation[1],selectedLandmark.getQualifiedCoordinates().getLatitude(),selectedLandmark.getQualifiedCoordinates().getLongitude());String descr="""";if(dist>=0.001){descr+=Locale.getMessage(R.string.Landmark_distance,DistanceUtils.formatDistance(dist))+""<br/>"";}if(selectedLandmark.getDescription()!=null){descr+=selectedLandmark.getDescription();}if(selectedLandmark.getCategoryId()!=-1){int icon=LayerManager.getDealCategoryIcon(selectedLandmark.getLayer(),LayerManager.LAYER_ICON_SMALL,activity.getResources().getDisplayMetrics(),selectedLandmark.getCategoryId());name.setCompoundDrawablesWithIntrinsicBounds(icon,0,0,0);}else {BitmapDrawable icon=LayerManager.getLayerIcon(selectedLandmark.getLayer(),LayerManager.LAYER_ICON_SMALL,activity.getResources().getDisplayMetrics(),null);name.setCompoundDrawablesWithIntrinsicBounds(icon,null,null,null);}if(selectedLandmark.getThumbnail()!=null){Bitmap image=IconCache.getInstance().getThumbnailResource(selectedLandmark.getThumbnail(),selectedLandmark.getLayer(),activity.getResources().getDisplayMetrics(),new ThumbnailLoadedHandler(activity));int width=activity.getWindowManager().getDefaultDisplay().getWidth();if(image!=null&&(width==0||image.getWidth()<width*0.5)){thumbnail.setImageBitmap(image);thumbnail.setTag(null);}else {thumbnail.setImageResource(R.drawable.download48);thumbnail.setTag(selectedLandmark);}if(StringUtils.isNotEmpty(descr)){desc.setText(Html.fromHtml(descr,imgGetter,null));}if(thumbnail!=null){thumbnail.setVisibility(View.VISIBLE);}}else {if(thumbnail!=null){thumbnail.setVisibility(View.GONE);}if(StringUtils.isNotEmpty(descr)){desc.setText(Html.fromHtml(descr,imgGetter,null));desc.setVisibility(View.VISIBLE);}else {desc.setVisibility(View.GONE);}}lvActionButton.setImageResource(R.drawable.checkin);if(selectedLandmark.getLayer().equals(Commons.FOURSQUARE_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));if(ConfigurationManager.getInstance().isOff(ConfigurationManager.FS_AUTH_STATUS)){lvActionButton.setImageResource(R.drawable.login);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons--;}}else {if(selectedLandmark.getLayer().equals(Commons.FOURSQUARE_MERCHANT_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));if(ConfigurationManager.getInstance().isOff(ConfigurationManager.FS_AUTH_STATUS)){lvActionButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvActionSeparator).setVisibility(View.GONE);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons-=2;}}else {if(selectedLandmark.getLayer().equals(Commons.FACEBOOK_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));if(ConfigurationManager.getInstance().isOff(ConfigurationManager.FB_AUTH_STATUS)){lvActionButton.setImageResource(R.drawable.login);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons--;}}else {if(selectedLandmark.getLayer().equals(Commons.GOOGLE_PLACES_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons--;if(ConfigurationManager.getInstance().isOff(ConfigurationManager.GL_AUTH_STATUS)){lvActionButton.setImageResource(R.drawable.login);}}else {if(selectedLandmark.getLayer().equals(Commons.MY_POSITION_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));if(!ConfigurationManager.getUserManager().isUserLoggedIn()){lvActionButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvActionSeparator).setVisibility(View.GONE);}else {lvActionButton.setImageResource(R.drawable.share);}lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons--;desc.setText(selectedLandmark.getDescription());lvRouteButton.setVisibility(View.GONE);}else {if(selectedLandmark.getLayer().equals(Commons.LOCAL_LAYER)){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));lvActionButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvActionSeparator).setVisibility(View.GONE);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons-=2;}else {if(landmarkManager.getLayerManager().isLayerCheckinable(selectedLandmark.getLayer())){header.setText(landmarkManager.getLayerManager().getLayerFormatted(selectedLandmark.getLayer()));if(!ConfigurationManager.getUserManager().isUserLoggedIn()){lvActionButton.setImageResource(R.drawable.login);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons--;}}else {header.setText(selectedLandmark.getLayer());lvActionButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvActionSeparator).setVisibility(View.GONE);lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);visibleButtons-=2;}}}}}}}float dip=activity.getResources().getDisplayMetrics().density;if(visibleButtons==5&&activity.getWindowManager().getDefaultDisplay().getWidth()<(360.0*dip)){lvCommentButton.setVisibility(View.GONE);lvView.findViewById(R.id.lvCommentSeparator).setVisibility(View.GONE);}lvView.setVisibility(View.VISIBLE);landmarkManager.addRecentlyOpenedLandmark(selectedLandmark);}"
1758	"@Override public final boolean remove(Object o){return m.remove(o)!=null;}"
1759	"public ResponseEntity<List<Tag>> domainsDomainIdDocumentsDocumentIdTagsGet(String domainId,String documentId,BigDecimal size){try{return new ResponseEntity<List<Tag>>(service.listDocumentTags(domainId,documentId,size),HttpStatus.OK);}catch(EmptyResultException e){LOG.warn(""error on query"",e);return new ResponseEntity<List<Tag>>(HttpStatus.NOT_FOUND);}catch(InvalidQueryException e){LOG.warn(""error on query"",e);return new ResponseEntity<List<Tag>>(Collections.EMPTY_LIST,HttpStatus.NO_CONTENT);}}"
1760	"public void actionPerformed(ActionEvent e){expressButton.setSelected(false);}"
1761	"@Override public T getHead(){assert (size>0);return (T)array[head];}"
1762	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){int viewID=parent.getId();switch (viewID){case R.id.spInspType :{posInspType=position;String strSelectedState=parent.getItemAtPosition(position).toString();if(0==position){try{((TextView)parent.getChildAt(0)).setTextColor(Color.GRAY);}catch(Exception e){e.printStackTrace();}}else {try{((TextView)parent.getChildAt(0)).setTextColor(Color.DKGRAY);}catch(Exception e){e.printStackTrace();}}}break;case R.id.spStatusCode :{posStatusCode=position;String strSelectedState=parent.getItemAtPosition(position).toString();if(0==position){try{((TextView)parent.getChildAt(0)).setTextColor(Color.GRAY);}catch(Exception e){e.printStackTrace();}}else {try{((TextView)parent.getChildAt(0)).setTextColor(Color.DKGRAY);}catch(Exception e){e.printStackTrace();}}}break;case R.id.spInspectionResult :{posInspectionResult=position;String strSelectedState=parent.getItemAtPosition(position).toString();if(0==position){try{((TextView)parent.getChildAt(0)).setTextColor(Color.GRAY);}catch(Exception e){e.printStackTrace();}}else {try{((TextView)parent.getChildAt(0)).setTextColor(Color.DKGRAY);}catch(Exception e){e.printStackTrace();}}}break;}}"
1763	"@Override public boolean isVisible(){return !isCatalogOidEmpty();}"
1764	"public PathfindingWindowController() throws IOException{super();getMapController().setParent(this);FXMLLoader loader=new FXMLLoader(MapWindowController.class.getResource(""/KioskApplication/view/PathfindingSidebarView.fxml""));loader.setRoot(getSidebarPane());loader.setController(new PathfindingSidebarController());loader.load();}"
1765	"@Override public void exportGroupRemoveInitiators(URI storageURI,URI exportGroupURI,List<URI> initiatorURIs,String token) throws Exception{ExportTaskCompleter taskCompleter=null;try{log.info(String.format(""exportRemoveInitiator start - Array: %s ""+""ExportGroup: %s Initiator: %s"",storageURI.toString(),exportGroupURI.toString(),Joiner.on(',').join(initiatorURIs)));taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,storageURI);Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);log.info(""Host to initiators  : {}"",Joiner.on("","").join(computeResourceToInitiators.entrySet()));if(exportMasks!=null&&!exportMasks.isEmpty()){Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),""exportGroupRemoveInitiators"",true,token);Map<String,URI> hostToEMaskGroup=ExportMaskUtils.mapHostToExportMask(_dbClient,exportGroup,storage.getId());log.info(""Host to ExportMask  : {}"",Joiner.on("","").join(hostToEMaskGroup.entrySet()));List<ExportMask> exportMaskRemoveInitiator=new ArrayList<ExportMask>();List<ExportMask> exportMaskDelete=new ArrayList<ExportMask>();Map<URI,List<URI>> maskToInitiatorsMap=new HashMap<URI,List<URI>>();String previousStep=null;for(String computeKey : computeResourceToInitiators.keySet()){URI exportMaskUri=hostToEMaskGroup.get(computeKey);if(null!=exportMaskUri){ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskUri);refreshExportMask(storage,getDevice(),exportMask);if(exportMask.getStorageDevice().equals(storageURI)){List<Initiator> initiators=_dbClient.queryObject(Initiator.class,computeResourceToInitiators.get(computeKey));List<Initiator> maskInitiators=new ArrayList<Initiator>();for(Initiator initiator : initiators){if(exportMask.hasUserInitiator(initiator.getId())){maskInitiators.add(initiator);}else {_log.info(String.format(""Initiator %s was not added by ViPR, so ViPR cannot remove it.  No action will be taken for this initiator"",initiator.getId()));}}log.info(""Processing export mask  {} with initiators {}"",storageURI,Joiner.on("","").join(maskInitiators));if(!maskInitiators.isEmpty()){maskToInitiatorsMap.put(exportMask.getId(),Lists.newArrayList(Collections2.transform(maskInitiators,CommonTransformerFunctions.fctnDataObjectToID())));if(isRemoveAllInitiators(exportMask,initiators)){exportMaskDelete.add(exportMask);}else {exportMaskRemoveInitiator.add(exportMask);}}}}}if(!exportMaskRemoveInitiator.isEmpty()){for(ExportMask exportMask : exportMaskRemoveInitiator){Collection<URI> volumeURIs=(Collections2.transform(exportMask.getUserAddedVolumes().values(),CommonTransformerFunctions.FCTN_STRING_TO_URI));previousStep=generateExportMaskRemoveInitiatorsWorkflow(workflow,previousStep,storage,exportGroup,exportMask,new ArrayList<URI>(volumeURIs),initiatorURIs,true);}}if(!exportMaskDelete.isEmpty()){for(ExportMask exportMask : exportMaskDelete){List<URI> volumesInMask=ExportMaskUtils.getUserAddedVolumeURIs(exportMask);List<URI> initiators=maskToInitiatorsMap.get(exportMask.getId());previousStep=generateExportMaskDeleteWorkflow(workflow,previousStep,storage,exportGroup,exportMask,volumesInMask,initiators,null);}}if(!maskToInitiatorsMap.isEmpty()){previousStep=generateZoningRemoveInitiatorsWorkflow(workflow,previousStep,exportGroup,maskToInitiatorsMap);}String successMessage=String.format(""Initiators successfully removed from export StorageArray %s"",storage.getLabel());workflow.executePlan(taskCompleter,successMessage);log.info(String.format(""exportRemoveInitiator end - Array: %s ExportGroup: ""+""%s Initiator: %s"",storageURI.toString(),exportGroupURI.toString(),Joiner.on(',').join(initiatorURIs)));}else {taskCompleter.ready(_dbClient);}}catch(Exception e){if(taskCompleter!=null){ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(e.getMessage(),e);taskCompleter.error(_dbClient,serviceError);}else {throw DeviceControllerException.exceptions.exportGroupRemoveInitiatorsFailed(e);}}}"
1766	"public void init(){Parameters p=getParameters();IDatarepository datarepository;String datarepo=p.getRaw().get(1);String business=p.getRaw().get(0);if(datarepo.equals(""class Test_database"")){datarepository=new Test_database();}else {if(datarepo.equals(""class SQL_Databasemanagement"")){datarepository=new SQL_Databasemanagement();}else {datarepository=null;}}if(business.equals(""class Business_logic_sorted"")){this.business_logic=new Business_logic_sorted(datarepository);}else {this.business_logic=new Business_logic_not_sorted(datarepository);}}"
1767	"public Path create(Path path,String name,String defSetId,Metadata metadata){ final DefinitionSetService services=getServicesById(defSetId);if(null==services){throw new IllegalStateException(""No backend Definition Set services for [""+defSetId+""]"");} final String fName=buildFileName(name,services.getResourceType()); final org.uberfire.java.nio.file.Path kiePath=Paths.convert(path).resolve(fName);try{if(ioService.exists(kiePath)){throw new FileAlreadyExistsException(kiePath.toString());} final D diagram=factoryManager.newDiagram(name,defSetId,metadata); final String[] raw=serizalize(diagram);ioService.write(kiePath,raw[0]);return Paths.convert(kiePath);}catch(Exception e){LOG.error(""Cannot create diagram in path [""+kiePath+""]"",e);}return null;}"
1768	"@Override public boolean onTouch(View v,MotionEvent event){if(!iCanUndo){return false;}if(event.getAction()==MotionEvent.ACTION_DOWN){undoBtn.setImageResource(R.drawable.bt_undo_down_128);}else {if(event.getAction()==MotionEvent.ACTION_UP){undoBtn.setImageResource(R.drawable.bt_undo_128);}}return false;}"
1769	"@Override public List<Registration> parseRegistration(JsonNode jsonNode) throws ParseException{ArrayList<Registration> registrations=new ArrayList<>();Session session=sessionManager.getSessionFactory().openSession();Transaction transaction=session.beginTransaction();jsonNode=this.unwrap(jsonNode);ParticipantRecord participantRecord;try{participantRecord=getObjectMapper().treeToValue(jsonNode,ParticipantRecord.class);}catch(JsonProcessingException e){e.printStackTrace();return null;}ParticipantEntity participant=new ParticipantEntity(participantRecord.generateUUID(),CvrPlugin.getDomain());participant.setDeltagernummer(participantRecord.unitNumber);List<BaseRecord> records=participantRecord.getAll();ListHashMap<OffsetDateTime,BaseRecord> ajourRecords=new ListHashMap<>();TreeSet<OffsetDateTime> sortedTimestamps=new TreeSet<>();for(BaseRecord record : records){OffsetDateTime registrationFrom=record.getLastUpdated();if(registrationFrom==null){System.out.println(""falling back to default"");registrationFrom=this.fallbackRegistrationFrom;}ajourRecords.add(registrationFrom,record);sortedTimestamps.add(registrationFrom);}ParticipantRegistration lastRegistration=null;for(OffsetDateTime registrationFrom : sortedTimestamps){ParticipantRegistration registration=participant.getRegistration(registrationFrom);if(registration==null){registration=new ParticipantRegistration();registration.setRegistreringFra(registrationFrom);registration.setEntity(participant);}if(lastRegistration!=null){for(ParticipantEffect originalEffect : lastRegistration.getVirkninger()){ParticipantEffect newEffect=new ParticipantEffect(registration,originalEffect.getVirkningFra(),originalEffect.getVirkningTil());for(ParticipantBaseData originalData : originalEffect.getDataItems()){originalData.addVirkning(newEffect);}}}for(BaseRecord record : ajourRecords.get(registrationFrom)){ParticipantEffect effect=registration.getEffect(record.getValidFrom(),record.getValidTo());if(effect==null){effect=new ParticipantEffect(registration,record.getValidFrom(),record.getValidTo());}if(effect.getDataItems().isEmpty()){ParticipantBaseData baseData=new ParticipantBaseData();baseData.addVirkning(effect);}for(ParticipantBaseData baseData : effect.getDataItems()){record.populateBaseData(baseData,this.queryManager,session);}}lastRegistration=registration;registrations.add(registration);try{queryManager.saveRegistrering(session,participant,registration);}catch(DataFordelerException e){e.printStackTrace();}}log.info(""Created ""+participant.getRegistreringer().size()+"" registrations"");transaction.commit();session.close();return registrations;}"
1770	"public void addPoint(float value,int cd){int[] prevd=histogram.get(value);if(prevd==null){prevd=new int[numClasses];}else {for(int i=0;i<cd.length;i++){prevd[i]+=cd[i];}}histogram.put(value,prevd);for(int i=0;i<cd.length;i++){this.cd[i]+=cd[i];}if(value>end){end=value;}}"
1771	"public static void fatal(String location,String error,Throwable cause){System.err.println(location+"": ""+error);cause.printStackTrace();if(logger_!=null){logger_.log(""SEVERE"",location,error,cause,true);}}"
1772	"public void onEvent(CurrentSplitScreenChangedEvent event){if(window==event.getActiveScreen()){mJavascriptInterface.setNotificationsEnabled(true);resumeTiltScroll();}else {mJavascriptInterface.setNotificationsEnabled(false);pauseTiltScroll();}}"
1773	"@Override protected void onPostExecute(Void result){if(!isCancelled()){heartbeatTask=null;}}"
1774	"private void check(){loaded=false;if(!OFFLINE_MODE){draw(R.layout.state_loading);DeIfmoRestClient.check(new DeIfmoRestClientResponseHandler(){  @Override public void onSuccess(  int statusCode,  String response){    MainActivity.group=Storage.get(getBaseContext(),""group"");    MainActivity.name=Storage.get(getBaseContext(),""name"");    updateWeek();    if (!Objects.equals(MainActivity.name,"""")) {      TextView user_name=(TextView)findViewById(R.id.user_name);      user_name.setText(response);      user_name.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));    }    protocolTracker.check();    loaded=true;    selectSection(selectedSection);  }  @Override public void onProgress(  int state){    draw(R.layout.state_loading);    TextView loading_message=(TextView)findViewById(R.id.loading_message);switch (state) {case DeIfmoRestClient.STATE_CHECKING:      loading_message.setText(R.string.auth_check);    break;case DeIfmoRestClient.STATE_AUTHORIZATION:  loading_message.setText(R.string.authorization);break;case DeIfmoRestClient.STATE_AUTHORIZED:loading_message.setText(R.string.authorized);break;}}@Override public void onFailure(int state){switch (state) {case DeIfmoRestClient.FAILED_OFFLINE:draw(R.layout.state_offline);findViewById(R.id.offline_reload).setOnClickListener(new View.OnClickListener(){@Override public void onClick(View v){check();}});break;case DeIfmoRestClient.FAILED_TRY_AGAIN:case DeIfmoRestClient.FAILED_AUTH_TRY_AGAIN:draw(R.layout.state_try_again);if (state == DeIfmoRestClient.FAILED_AUTH_TRY_AGAIN) ((TextView)findViewById(R.id.try_again_message)).setText(R.string.auth_failed);findViewById(R.id.try_again_reload).setOnClickListener(new View.OnClickListener(){@Override public void onClick(View v){check();}});break;case DeIfmoRestClient.FAILED_AUTH_CREDENTIALS_REQUIRED:gotoLogin(LoginActivity.SIGNAL_CREDENTIALS_REQUIRED);break;case DeIfmoRestClient.FAILED_AUTH_CREDENTIALS_FAILED:gotoLogin(LoginActivity.SIGNAL_CREDENTIALS_FAILED);break;}}@Override public void onNewHandle(RequestHandle requestHandle){checkRequestHandle=requestHandle;}});}else {MainActivity.group=Storage.get(getBaseContext(),""group"");MainActivity.name=Storage.get(getBaseContext(),""name"");if(!Objects.equals(name,"""")){TextView user_name=(TextView)findViewById(R.id.user_name);if(user_name!=null){user_name.setText(name);user_name.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));}}protocolTracker.check();loaded=true;selectSection(selectedSection);}}"
1775	"protected M createMutableVersionInternal(int stampSequence) throws UnsupportedOperationException{switch (getVersionType()){case COMPONENT_NID :return (M)new ComponentNidVersionImpl((SemanticChronology)this,stampSequence);case LONG :return (M)new LongVersionImpl((SemanticChronologyImpl)this,stampSequence);case DYNAMIC :return (M)new DynamicImpl((SemanticChronologyImpl)this,stampSequence);case LOGIC_GRAPH :return (M)new LogicGraphVersionImpl((SemanticChronologyImpl)this,stampSequence);case STRING :return (M)new StringVersionImpl((SemanticChronology)this,stampSequence);case MEMBER :return (M)new SemanticVersionImpl(this,stampSequence);case DESCRIPTION :return (M)new DescriptionVersionImpl((SemanticChronology)this,stampSequence);default :throw new UnsupportedOperationException(""af Can't handle: ""+getVersionType());}}"
1776	"Item getItem(FieldHolder fieldHolder) throws ItemNotFoundException{String itemID=BluetoothSmartUtils.getItemUID(url.copyWith(fieldHolder.getField().getName()));return this.handler.getItemRegistry().getItem(itemID);}"
1777	"@Override boolean isInstrumentableSource(Source source){return true;}"
1778	"public void report(){for(PajeContainer container : this.contMap.values()){String parentName;if(container.getContainer()==null){parentName=""0"";}else {parentName=container.getContainer().getName();}System.out.println(""Container, ""+parentName+"", ""+container.getType().getName()+"", ""+container.getStartTime()+"", ""+container.getEndTime()+"", ""+(container.getEndTime()-container.getStartTime())+"", ""+container.getName());for(ArrayList<PajeEntity> entities : container.getEntities().values()){for(PajeEntity ent : entities){switch (ent.getType().getNature()){case VariableType :System.out.println(""Variable, ""+ent.getContainer().getName()+"", ""+ent.getType().getName()+"", ""+((PajeSingleTimedEntity)ent).getStartTime()+"", ""+((PajeSingleTimedEntity)ent).getEndTime()+"", ""+(((PajeDoubleTimedEntity)ent).getEndTime()-((PajeSingleTimedEntity)ent).getStartTime())+"", ""+((PajeUserVariable)ent).getValue());break;case StateType :System.out.println(""State, ""+ent.getContainer().getName()+"", ""+ent.getType().getName()+"", ""+((PajeSingleTimedEntity)ent).getStartTime()+"", ""+((PajeSingleTimedEntity)ent).getEndTime()+"", ""+(((PajeDoubleTimedEntity)ent).getEndTime()-((PajeSingleTimedEntity)ent).getStartTime())+"", ""+((PajeUserState)ent).getImbrication()+"", ""+((PajeValueEntity)ent).getValue().getName());break;case EventType :System.out.println(""Event, ""+ent.getContainer().getName()+"", ""+ent.getType().getName()+"", ""+((PajeSingleTimedEntity)ent).getStartTime()+"", ""+((PajeValueEntity)ent).getValue());case LinkType :System.out.println(""Link, ""+ent.getContainer().getName()+"", ""+ent.getType().getName()+"", ""+((PajeSingleTimedEntity)ent).getStartTime()+"", ""+((PajeSingleTimedEntity)ent).getEndTime()+"", ""+(((PajeDoubleTimedEntity)ent).getEndTime()-((PajeSingleTimedEntity)ent).getStartTime())+"", ""+((PajeValueEntity)ent).getValue().getName()+"", ""+((PajeUserLink)ent).getStartContainer().getName()+"", ""+((PajeUserLink)ent).getEndContainer().getName());break;default :break;}}}}}"
1779	"@Override public void actionPerformed(ActionEvent e){running=true;}"
1780	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1781	"private void onOk(){Activity ctx=this;Intent intent=getIntent();saveGuiToExif(""onOk (finish)"");mHistory.saveHistory();if(null!=getExifParam(intent)){Intent resultIntent=new Intent(Intent.ACTION_EDIT);resultIntent.putExtra(EXTRA_EXIF_DATA,mCurrentData.toString());setResult(EXIF_RESULT_ID,resultIntent);finish();}else {SelectedFiles items=getSelectedFiles(""onOk "",this,getIntent(),true);AndroidFileCommands cmd=AndroidFileCommands.createFileCommand(this);MediaDiffCopy exifChanges=new MediaDiffCopy(true).setDiff(mInitialData,mCurrentData);if(exifChanges!=null){if(!SYNC_UPDATE_EXIF){this.exifUpdate=new UpdateTask(ctx,cmd,exifChanges);exifUpdate.execute(items);}else {cmd.applyExifChanges(exifChanges,items,null);this.setResult(EXIF_RESULT_ID,intent);finish();}}else {finish();}}}"
1782	"public int applyRuleToCell(Cell c,Rule r){int count=0;int x=c.getX();int y=c.getY();for(int y1=-1;y1<=1;y1++){for(int x1=-1;x1<=1;x1++){if(x+x1<0||y+y1<0||x+x1>=width||y+y1>=height){continue;}else {Cell cell=this.grid[y+y1][x+x1];if(!(x1==0&&y1==0)){count+=cell.isAlive();}}}}return r.inRule(count,c.isAlive());}"
1783	"public boolean wasCancelled(){return this==CANCELLED_FROM_DISCONNECT||this==Status.CANCELLED_FROM_BLE_TURNING_OFF;}"
1784	"@Override protected boolean allowWatermark(Watermark mark){return mark.getTimestamp()==Long.MAX_VALUE&&nextWatermarkTime!=Long.MAX_VALUE;}"
1785	"@RequestMapping(value=""/customer/information/"") public String showContractDetails(String phone,Model model){Tariff tariff=tariffService.getTariffByPhone(phone);List<Option> tariffOptions=optionService.getTariffOptions(tariff.getTariffName());List<Option> contractOptions=optionService.getOptionsByPhone(phone);List<Option> extraOptions=optionService.getListExtraOptions();Customer customer=customerService.getCustomerByPhone(phone);Contract contract=contractService.getContractByPhone(phone);model.addAttribute(""tariff"",tariff);model.addAttribute(""tariffOptions"",tariffOptions);model.addAttribute(""contractOptions"",contractOptions);model.addAttribute(""extraOptions"",extraOptions);model.addAttribute(""phone"",phone);model.addAttribute(""customer"",customer);model.addAttribute(""contract"",contract);return ""contracts/contractInformation"";}"
1786	"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){layout=inflater.inflate(R.layout.offer_details,container,false);tvCounter=(TextView)layout.findViewById(R.id.tv_counter);redeemBar=(LinearLayout)layout.findViewById(R.id.redeem_bar);btnRedeem=(LinearLayout)layout.findViewById(R.id.btn_redeem);btnCancel=(ImageView)layout.findViewById(R.id.btn_cancel);btnNext=(TextView)layout.findViewById(R.id.btn_next);btnSlideUp=(LinearLayout)layout.findViewById(R.id.btn_slideUp);btnRemove=(ImageView)layout.findViewById(R.id.btn_remove);btnAdd=(ImageView)layout.findViewById(R.id.btn_add);imgView=(ImageView)layout.findViewById(R.id.img_view);tvShortDes=(TextView)layout.findViewById(R.id.tv_short_des);tvAddress=(TextView)layout.findViewById(R.id.tv_address);tvHours=(TextView)layout.findViewById(R.id.tv_hours);tvDes=(TextView)layout.findViewById(R.id.tv_des);tvCuisine=(TextView)layout.findViewById(R.id.tv_cuisine);recyclerView=(RecyclerView)layout.findViewById(R.id.recycler_view);scrollView=(ScrollView)layout.findViewById(R.id.scrollview);scrollView.setVisibility(View.GONE);blackLayer=(LinearLayout)layout.findViewById(R.id.black_layer);offerDetailsHolder=(LinearLayout)layout.findViewById(R.id.offer_details_holder);tvCouponLine=(TextView)layout.findViewById(R.id.tv_coupons_line);rulesOfUse=(TextView)layout.findViewById(R.id.rulesofuse);rulesOfUse.setOnTouchListener(this);tvPrice=(TextView)layout.findViewById(R.id.tv_price);tvDinner1=(TextView)layout.findViewById(R.id.tv_dinners1);tvDinner2=(TextView)layout.findViewById(R.id.tv_dinners2);tvDinner3=(TextView)layout.findViewById(R.id.tv_dinners3);tvCoupon1=(TextView)layout.findViewById(R.id.tv_coupon1);tvCoupon2=(TextView)layout.findViewById(R.id.tv_coupon2);tvCoupon3=(TextView)layout.findViewById(R.id.tv_coupon3);tvTableHead=(TextView)layout.findViewById(R.id.tv_table_head);tvTableHead1=(TextView)layout.findViewById(R.id.tv_table_head1);tvLine1=(TextView)layout.findViewById(R.id.tv_line1);tvLine2=(TextView)layout.findViewById(R.id.tv_line2);tvLine3=(TextView)layout.findViewById(R.id.tv_line3);tableHolder=(LinearLayout)layout.findViewById(R.id.table_holder);barButtons=(RelativeLayout)layout.findViewById(R.id.bar_buttons);barButtons.setVisibility(View.INVISIBLE);tvDinner1.setText(""--"");tvDinner2.setText(""--"");tvDinner3.setText(""--"");tvCoupon1.setText(""--"");tvCoupon2.setText(""--"");tvCoupon3.setText(""--"");tvTableHead.setText(""--"");tvTableHead1.setText(""--"");tvName=(TextView)layout.findViewById(R.id.tv_name);tvArea=(TextView)layout.findViewById(R.id.tv_area);tvSuggestedDish=(TextView)layout.findViewById(R.id.tv_suggested_dish);tvName.setText(""--"");tvAddress.setText(""--"");redeemBar.setClickable(false);btnClose=(ImageView)layout.findViewById(R.id.btn_close);btnClose.setOnTouchListener(this);btnBuyNow=(TextView)layout.findViewById(R.id.btn_buy_now);btnBuyNow.setOnTouchListener(this);tvCoupons=(TextView)layout.findViewById(R.id.tv_coupons);btnReadmore=(TextView)layout.findViewById(R.id.btn_readmore);btnReadmore.setOnTouchListener(this);imgSlider=(RelativeLayout)layout.findViewById(R.id.img_slider);recyclerView=(RecyclerView)layout.findViewById(R.id.recycler_view);recyclerView1=(RecyclerView)layout.findViewById(R.id.recycler_view1);redeemBar.setVisibility(View.GONE);btnBuyNow.setVisibility(View.GONE);db=new DatabaseHandler(getActivity());sId=db.getUserDetails().get(""sessionId"");layoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.HORIZONTAL,false);recyclerView.setLayoutManager(layoutManager);layoutManager1=new LinearLayoutManager(getActivity(),LinearLayoutManager.HORIZONTAL,false);recyclerView1.setLayoutManager(layoutManager1);recyclerView1.setOverScrollMode(1);Log.d(TAG,""offerId: ""+offerId+"" outletId: ""+outletId);((AppCompatActivity)getActivity()).getSupportActionBar().show();btnRemove.setOnTouchListener(this);btnAdd.setOnTouchListener(this);btnCancel.setOnTouchListener(this);btnNext.setOnTouchListener(this);btnSlideUp.setOnTouchListener(this);callbackFragOpen=(CallbackFragOpen)getActivity();Typeface typefaceFutura=Typeface.createFromAsset(getActivity().getAssets(),""fonts/futura_bold.otf"");tvCounter.setTypeface(typefaceFutura);ActionBar actionBar=(((AppCompatActivity)getActivity()).getSupportActionBar());btnBookmark=(ImageView)actionBar.getCustomView().findViewById(R.id.btn_bookmark);btnPhone=(ImageView)actionBar.getCustomView().findViewById(R.id.btn_phone);btnLocation=(ImageView)actionBar.getCustomView().findViewById(R.id.btn_location);btnBookmark.setOnTouchListener(this);btnPhone.setOnTouchListener(this);btnLocation.setOnTouchListener(this);loadData(""offerDetails"");return layout;}"
1787	"public void refuel(Player player) throws IllegalArgumentException{Ship ship=findCurrentShip(player);if(ship==null){throw new IllegalArgumentException(""You are not inside a ship."");}int maxTank=config.getConfig().getInt(""refuel.maxtank"");if(ship.getFuel()>=maxTank){throw new IllegalArgumentException(""The ship's tank is already full."");}Set<String> refuelItemStrings=config.getConfig().getConfigurationSection(""refuel"").getKeys(false);String itemInHand=player.getItemInHand().getType().name();String refuelItemString=null;for(String r : refuelItemStrings){if(itemInHand.equalsIgnoreCase(r)){refuelItemString=r;}}if(refuelItemString==null){throw new IllegalArgumentException(""You do not have the correct item."");}int numItemsInHand=player.getItemInHand().getAmount();int fills=config.getConfig().getInt(""refuel.""+refuelItemString+"".fills"");int numToUse;if((10-ship.getFuel())<(numItemsInHand*fills)){numToUse=(maxTank-ship.getFuel())/fills;}else {numToUse=player.getItemInHand().getAmount();}int newNum=player.getItemInHand().getAmount()-numToUse;if(newNum<=0){player.setItemInHand(null);}else {player.getItemInHand().setAmount(newNum);}ship.setFuel(ship.getFuel()+numToUse*fills);player.sendMessage(ChatColor.YELLOW+""You refilled the ship by ""+numToUse*fills+"" units."");}"
1788	"public boolean isModifyStat(Stat s){return s==Stat.DEFENSE;}"
1789	"@Override public void mousePressed(MouseEvent e){selected=null;Set<String> set=objects.keySet();Iterator<String> itr=set.iterator();while(itr.hasNext()){String objectName=itr.next();MyObject myObj=objects.get(objectName);if(myObj.isInside(e.getPoint())){Object obj=myObj.getObject();selected=myObj;try{Class c=obj.getClass();popup.removeAll();JMenuItem item=new JMenuItem(""Inspect"");item.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/lu/fisch/icons/iconfinder_inspect_lgpl_everaldo_coelho.png"")));item.addActionListener(this);popup.add(item);JSeparator sep=new JSeparator();popup.add(sep);do {c=c.getSuperclass();if(c!=null){JMenu itemM=new JMenu(""inherited from ""+c.getSimpleName());itemM.setFont(new Font(item.getFont().getFontName(),Font.ITALIC,item.getFont().getSize()));itemM.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/lu/fisch/icons/uml_parent.png"")));popup.add(itemM);fillPopup(itemM,c,null);}} while(c!=null);sep=new JSeparator();popup.add(sep);if(diagram.getInteractiveProject()==null){fillPopup(popup,obj.getClass(),myObj);}else {fillPopup(popup,obj.getClass().getInterfaces()[0],myObj);}sep=new JSeparator();popup.add(sep);item=new JMenuItem(""Remove"");item.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/lu/fisch/icons/gen_del.png"")));item.addActionListener(this);popup.add(item);}catch(Throwable ex){MyError.display(ex);}}}}"
1790	"@Override @Nullable public Object scanUnsafe(Attr key){if(key==Attr.CANCELLED){return true;}return null;}"
1791	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_login);Button login=(Button)findViewById(R.id.login_btn);username=(EditText)findViewById(R.id.username);password=(EditText)findViewById(R.id.password);errorCheckingView();login.setOnClickListener(operation);}"
1792	"@SubscribeEvent public void tickEvent(TickEvent.ClientTickEvent event){if(event.phase==Phase.END){return ;}Minecraft mc=Minecraft.getMinecraft();if(mc.theWorld!=null){if(loadWorld(mc.theWorld)){NEIClientConfig.setHasSMPCounterPart(false);NEIClientConfig.setInternalEnabled(false);if(!Minecraft.getMinecraft().isSingleplayer()){NEIClientConfig.loadWorld(""remote/""+ClientUtils.getServerIP().replace(':','~'));}}if(!NEIClientConfig.isEnabled()){return ;}KeyManager.tickKeyStates();NEIController.updateUnlimitedItems(mc.thePlayer.inventory);if(mc.currentScreen==null){NEIController.processCreativeCycling(mc.thePlayer.inventory);}updateMagnetMode(mc.theWorld,mc.thePlayer);}GuiScreen gui=mc.currentScreen;if(gui!=lastGui){if(gui instanceof GuiMainMenu){lastworld=null;}else {if(gui instanceof GuiSelectWorld){NEIClientConfig.reloadSaves();}}}lastGui=gui;}"
1793	"@Override public void iterate(){Variation operator=operatorSelector.nextOperator();operatorSelectionHistory.add(operator,this.numberOfEvaluations);Solution[] parents=selection.select(operator.getArity(),population);Solution[] children=operator.evolve(parents);evaluateAll(children);for(Solution child : children){addToPopulation(child);}if(creditDef.getInputType()==CreditFunctionInputType.OP){double creditValue=0.0;for(Solution child : children){Solution refParent=parents[pprng.nextInt(parents.length)];switch (creditDef.getOperatesOn()){case PARENT :creditValue+=((AbstractOffspringParent)creditDef).compute(child,refParent);break;default :throw new NullPointerException(""Credit definition not ""+""recognized. Used ""+creditDef.getInputType()+""."");}}Credit reward=new Credit(this.numberOfEvaluations,creditValue);operatorSelector.update(reward,operator);creditHistory.add(operator,reward);}else {if(creditDef.getInputType()==CreditFunctionInputType.SI){double creditValue=0.0;for(Solution child : children){creditValue+=((AbstractOffspringPopulation)creditDef).compute(child,archive);}Credit reward=new Credit(this.numberOfEvaluations,creditValue);operatorSelector.update(reward,operator);creditHistory.add(operator,reward);}else {if(creditDef.getInputType()==CreditFunctionInputType.CS){for(Solution child : children){child.setAttribute(""heuristic"",new SerializableVal(operator.toString()));archive.addAll(children);}HashMap<Variation,Credit> popContRewards;switch (creditDef.getOperatesOn()){case ARCHIVE :popContRewards=((AbstractPopulationContribution)creditDef).compute(archive,operators,this.numberOfEvaluations);break;default :throw new NullPointerException(""Credit definition not ""+""recognized. Used ""+creditDef.getInputType()+""."");}Iterator<Variation> iter=popContRewards.keySet().iterator();while(iter.hasNext()){Variation operator_i=iter.next();operatorSelector.update(popContRewards.get(operator_i),operator_i);creditHistory.add(operator_i,new Credit(this.numberOfEvaluations,popContRewards.get(operator_i).getValue()));}}else {throw new UnsupportedOperationException(""RewardDefinitionType not recognized "");}}}updateQualityHistory();}"
1794	"private void setInstallmentBankTerm(Map<String,ArrayList<Integer>> bankTerms,String bank){ArrayList<Integer> term=new ArrayList<>();term.add(6);term.add(12);bankTerms.put(bank,term);}"
1795	"@Override public void onError(Throwable e){if(currentPage==1){mView.showNoNet();}}"
1796	"private String addIndexInputToList(String name,IndexInput in,String postingsFormatName) throws IOException{if(indexInputList.get(name)!=null){indexInputList.get(name).close();}String localPostingsFormatName=postingsFormatName;if(localPostingsFormatName==null){localPostingsFormatName=in.readString();}else {if(!in.readString().equals(localPostingsFormatName)){throw new IOException(""delegate codec ""+name+"" doesn't equal ""+localPostingsFormatName);}}indexInputList.put(name,in);indexInputOffsetList.put(name,in.getFilePointer());return localPostingsFormatName;}"
1797	"@Override protected Iterable<BlogsEntry> doGetFeedEntries(AtomRequestContext atomRequestContext) throws Exception{long groupId=atomRequestContext.getLongParameter(""groupId"");int status=WorkflowConstants.STATUS_APPROVED;int max=atomRequestContext.getIntParameter(""max"",SearchContainer.DEFAULT_DELTA);if(groupId>0){int page=atomRequestContext.getIntParameter(""page"");if(page==0){return BlogsEntryServiceUtil.getGroupEntries(groupId,status,max);}int count=BlogsEntryServiceUtil.getGroupEntriesCount(groupId,status);AtomPager atomPager=new AtomPager(page,max,count);AtomUtil.saveAtomPagerInRequest(atomRequestContext,atomPager);return BlogsEntryServiceUtil.getGroupEntries(groupId,status,atomPager.getStart(),atomPager.getEnd()+1);}long organizationId=atomRequestContext.getLongParameter(""organizationId"");if(organizationId>0){return BlogsEntryServiceUtil.getOrganizationEntries(organizationId,status,max);}long companyId=CompanyThreadLocal.getCompanyId();if(companyId>0){return BlogsEntryServiceUtil.getCompanyEntries(companyId,status,max);}return Collections.emptyList();}"
1798	"public void loadLevel(Context context,String fileInAssets){try{JSONObject rootObject=new JSONObject(getJSONString(context,fileInAssets));JSONArray nodesArray=rootObject.getJSONArray(""nodes"");for(int c=0;c<nodesArray.length();c++){Node node=new Node(0);JSONObject jsonNode=nodesArray.getJSONObject(c);node.setID(c);node.setRow(jsonNode.getInt(""layer""));node.setShape(Node.ENodeShape.valueOf(jsonNode.getString(""shape"")));node.setOwner(Node.ENodeOwner.valueOf(jsonNode.getString(""owner"")));node.setType(Node.ENodeType.valueOf(jsonNode.getString(""type"")));this.mNodes.add(node);}JSONArray relationsArray=rootObject.getJSONArray(""relations"");for(int c=0;c<relationsArray.length();c++){JSONObject relationNode=relationsArray.getJSONObject(c);int from=relationNode.getInt(""from"");JSONArray toArray=relationNode.getJSONArray(""to"");for(int a=0;a<toArray.length();a++){int to=toArray.getInt(a);this.mNodeGraph.add(findNodeByID(from),findNodeByID(to));}}}catch(JSONException e){e.printStackTrace();}Log.d(""NodeSet"",this.mNodeGraph.toString());}"
1799	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1800	"int getServerCursorId(){return serverCursorId;}"
1801	"public DisplayThread(Surface surface,int width,int height,String ipAddress,SharedPreferences sharedPreference){this.surface=surface;this.width=width;this.height=height;this.ipAddress=ipAddress;String currentResolution=sharedPreference.getString(SettingsActivity.SIMPLE_REMOTE_DESKTOP_PREF_RESOLUTION,null);switch (currentResolution){case ""600p"" :codec_width=800;codec_height=600;break;case ""720p"" :codec_width=1280;codec_width=720;break;case ""1080p"" :codec_width=1920;codec_height=1080;break;}bandwidth=sharedPreference.getInt(SettingsActivity.SIMPLE_REMOTE_DESKTOP_PREF_BITRATE,0);fps=sharedPreference.getInt(SettingsActivity.SIMPLE_REMOTE_DESKTOP_PREF_FPS,0);Log.d(TAG,""Configuring mediacodec"");try{codec=MediaCodec.createDecoderByType(""video/avc"");}catch(IOException e){throw new RuntimeException(e.getMessage());}MediaFormat format=MediaFormat.createVideoFormat(""video/avc"",codec_width,codec_height);codec.configure(format,surface,null,0);Log.d(TAG,""Start media codec"");codec.start();}"
1802	"@Override public void onFailure(Exception exception){}"
1803	"public boolean accept(File dir,String name){return !name.startsWith(""."");}"
1804	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1805	"@Override public boolean touchDown(InputEvent event,float x,float y,int pointer,int button){isPressed=true;direction=-1;return true;}"
1806	"public boolean isHttps(){return getUrl().getSchema().equals(""https"");}"
1807	"public void actionPerformed(ActionEvent e){boolean[] bool=AnimeIndex.exclusionAnime.get(name);bool[0]=false;if(isAllFalse(bool)){AnimeIndex.exclusionAnime.remove(name);}else {AnimeIndex.exclusionAnime.put(name,bool);}}"
1808	"@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep createHost(HostCreateParam createParam,Boolean validateConnection){URI tid=createParam.getTenant();if((tid==null)||tid.toString().isEmpty()){_log.error(""The tenant id is missing"");throw APIException.badRequests.requiredParameterMissingOrEmpty(""tenant"");}TenantOrg tenant=_permissionsHelper.getObjectById(tid,TenantOrg.class);ArgValidator.checkEntity(tenant,tid,isIdEmbeddedInURL(tid),true);validateHostData(createParam,tid,null,validateConnection);return createNewHost(tenant,createParam);}"
1809	"@SuppressWarnings(""unchecked"") default Class<T> getBaseType(){String className=getSerializedLambda().getImplClass().replace(""/"",""."");try{return (Class<T>)Class.forName(className);}catch(Exception e){throw new IllegalStateException(e);}}"
1810	"private FCZoneReference addZoneReference(URI exportGroupURI,NetworkFCZoneInfo zoneInfo,String[] newOrExisting){String refKey=zoneInfo.makeEndpointsKey();URI egURI=exportGroupURI;if(zoneInfo.getExportGroup()!=null){egURI=zoneInfo.getExportGroup();}FCZoneReference ref=addZoneReference(egURI,zoneInfo.getVolumeId(),refKey,zoneInfo.getFabricId(),zoneInfo.getNetworkDeviceId(),zoneInfo.getZoneName(),zoneInfo.isExistingZone(),newOrExisting);return ref;}"
1811	"@Override public boolean get(){return joystick2.getPOV(0)==0;}"
1812	"@Transactional public Invoice generateInvoice(InvoicingProject invoicingProject) throws AxelorException{ProjectTask projectTask=invoicingProject.getProjectTask();Partner customer=projectTask.getClientPartner();Company company=this.getRootCompany(projectTask);if(company==null){throw new AxelorException(String.format(I18n.get(IExceptionMessage.INVOICING_PROJECT_PROJECT_TASK_COMPANY)),IException.CONFIGURATION_ERROR);}projectTask.getAssignedTo();InvoiceGenerator invoiceGenerator=new InvoiceGenerator(InvoiceRepository.OPERATION_TYPE_CLIENT_SALE,company,customer.getPaymentCondition(),customer.getInPaymentMode(),partnerService.getInvoicingAddress(customer),customer,null,customer.getCurrency(),customer.getSalePriceList(),null,null,null,null){  @Override public Invoice generate() throws AxelorException {    return super.createInvoiceHeader();  }};Invoice invoice=invoiceGenerator.generate();AccountConfigService accountConfigService=Beans.get(AccountConfigService.class);AccountConfig accountConfig=accountConfigService.getAccountConfig(company);invoice.setDisplayTimesheetOnPrinting(accountConfig.getDisplayTimesheetOnPrinting());invoice.setDisplayExpenseOnPrinting(accountConfig.getDisplayExpenseOnPrinting());invoiceGenerator.populate(invoice,this.populate(invoice,invoicingProject));Beans.get(InvoiceRepository.class).save(invoice);this.setInvoiced(invoicingProject);invoicingProject.setInvoice(invoice);invoicingProjectRepo.save(invoicingProject);return invoice;}"
1813	"public boolean hasProtocolStep(String postFilter){for(PostFilterGUI postFilterGUI : this.protocolMap.keySet()){if(postFilterGUI.getClass().getSimpleName().equals(postFilter)){return true;}}return false;}"
1814	"@Override public Boolean call() throws Exception{return cache.get(key)!=null;}"
1815	"public void updateCards(){try{cboLanguages.removeAllItems();txtRulesArea.setText("""");((DefaultListModel<MagicEdition>)listEdition.getModel()).removeAllElements();for(MagicCardNames mcn : selected.getForeignNames()){cboLanguages.addItem(mcn);}for(MagicEdition me : selected.getEditions()){((DefaultListModel<MagicEdition>)listEdition.getModel()).addElement(me);}detailCardPanel.setMagicCard(selected,true);magicEditionDetailPanel.setMagicEdition(selected.getEditions().get(0));for(MagicRuling mr : selected.getRulings()){txtRulesArea.append(mr.toString());txtRulesArea.append(""\n"");}if(tabbedCardsInfo.getSelectedIndex()==INDEX_PRICES){updatePrices();}panelJson.showCard(selected);ThreadManager.getInstance().execute(new Runnable(){  public void run(){    historyChartPanel.init(selected,selectedEdition,selected.getName());  }},""load history for ""+selectedEdition);}catch(Exception e1){e1.printStackTrace();logger.error(e1);}}"
1816	"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){View view=inflater.inflate(R.layout.fragment_theme_manager,container,false);designedViewPager=(DesignedViewPager)view.findViewById(R.id.viewPager);tabLayout=(TabLayout)view.findViewById(R.id.tabLayout);fragmentArrayList=new ArrayList<>();RecyclerFragment fragment=new RecyclerFragment();Bundle bundle=new Bundle();bundle.putString(""List"",""Dark"");fragment.setArguments(bundle);fragmentArrayList.add(fragment);RecyclerFragment fragment1=new RecyclerFragment();Bundle bundle1=new Bundle();bundle1.putString(""List"",""Bright"");fragment1.setArguments(bundle1);fragmentArrayList.add(fragment1);RecyclerFragment fragment2=new RecyclerFragment();Bundle bundle2=new Bundle();bundle2.putString(""List"",""Material"");fragment2.setArguments(bundle2);fragmentArrayList.add(fragment2);designedViewPager.setAdapter(new ViewPagerAdapter(getChildFragmentManager(),fragmentArrayList));return view;}"
1817	"protected void onPostExecute(List<ServiceJobWrapper> list){if(list!=null){SimpleDateFormat formatter=new SimpleDateFormat(""yyy-MM-dd"");Calendar calendar=Calendar.getInstance();for(ServiceJobWrapper sjw : list){try{Date date=formatter.parse(sjw.getStartDate());calendar.setTime(date);calendar.set(Calendar.DAY_OF_MONTH,calendar.get(Calendar.DATE));robotoCalendarView.markCircleImage2(calendar);}catch(ParseException e){e.printStackTrace();}}}else {if(hasResutFlag){noInternetSnackBar();}}}"
1818	"private List<String> extractFieldAsList(Node currentNode,String fieldName){List<String> values=new ArrayList<String>();Node endNode=findNextTextSiblingNode(currentNode);if(endNode!=null&&endNode.siblingIndex()>currentNode.siblingIndex()){for(int j=currentNode.siblingIndex();j<endNode.siblingIndex();j++){currentNode=currentNode.nextSibling();if(""a"".equals(currentNode.nodeName())){values.add(currentNode.attr(fieldName));}if(""div"".equals(currentNode.nodeName())){Document doc=Jsoup.parseBodyFragment(currentNode.outerHtml());Node rootNode=doc.childNodes().get(0);Node bodyNode=rootNode.childNodes().get(1);List<Node> mainNodes=bodyNode.childNodes().get(0).childNodes().get(1).childNodes();for(int i=0;i<mainNodes.size();i++){Node liNode=mainNodes.get(i);if(liNode.childNodes().size()==0){continue;}liNode=liNode.childNode(0);values.add(liNode.attr(fieldName));}}}}return values;}"
1819	"@Override public Reader toCharacterStream(OptimizedElementArray row,int columnPosition,LobService lobService) throws SQLException{return new StringReader(toString(row,columnPosition));}"
1820	"@Override public void claimRoute(AuthToken authToken,String gameID,Route routeIn,ArrayList<Integer> discard){Game g=checkInGame(authToken,gameID);if(g==null){return ;}String playerID=ServerModel.getSingleton().getUserFromAuthToken(authToken).getID();Player player=null;for(Player p : g.getPlayerList()){if(p.getPlayerID()==playerID){player=p;}}Route returnRoute=g.getMap().claimRoute(routeIn,player);ClientProxy proxy=new ClientProxy(gameID,playerID);ArrayList<TrainCard> playerHand=g.discardPlayerCards(playerID,discard);proxy.setPlayerHand(playerHand);proxy.claimRoute(gameID,playerID,returnRoute);proxy.updateNumTrainPieces(playerID,player.getNumTrainPieces());proxy.updateScore(player.getPoints());boolean last=false;if(player.getNumTrainPieces()<=2){last=true;proxy.lastRound();g.markLastTurn(player);}for(Player id : g.getPlayerList()){proxy=new ClientProxy(gameID,id.getPlayerID());if(!id.getPlayerID().equals(playerID)){proxy.claimRoute(gameID,playerID,returnRoute);proxy.updateNumTrainPieces(playerID,player.getNumTrainPieces());proxy.updateEnemyTrainHand(player.getPlayerID(),player.getHand().size());proxy.updateEnemyScore(player.getPlayerID(),player.getPoints());}if(last){proxy.lastRound();}}}"
1821	"public int setPower(Battle b,ActivePokemon me,ActivePokemon o){return this.power;}"
1822	"@Override public Boolean getOutput(ItemStack itemStack) throws EvaluationException{return !itemStack.isEmpty()&&itemStack.isStackable();}"
1823	"@Override public Iterator<CronExpression> iterator(){return null;}"
1824	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){ final View view=inflater.inflate(R.layout.fragment_item_list,container,false);Context context=view.getContext(); final RecyclerView popular_view=(RecyclerView)view.findViewById(R.id.popular_list);popular_view.setLayoutManager(new LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false));popular_view.setAdapter(new TattooRecyclerViewAdapter(mListener,context,popular_view,20));Server.getPopular(context,new Response.Listener<JSONObject>(){  @Override public void onResponse(  JSONObject response){    ((TattooRecyclerViewAdapter)popular_view.getAdapter()).set_data(token,response);  }}); final RecyclerView recent_view=(RecyclerView)view.findViewById(R.id.recent_list);recent_view.setLayoutManager(new LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false));recent_view.setAdapter(new TattooRecyclerViewAdapter(mListener,context,recent_view,20));Server.getRecent(context,new Response.Listener<JSONObject>(){  @Override public void onResponse(  JSONObject response){    ((TattooRecyclerViewAdapter)recent_view.getAdapter()).set_data(token,response);  }});Button see_more=(Button)view.findViewById(R.id.seemore_recent);see_more.setOnClickListener(this);see_more=(Button)view.findViewById(R.id.seemore_popular);see_more.setOnClickListener(this);return view;}"
1825	"public ExecutablePlan plan(ExecutionRequest executionRequest,Map<String,PlannerColumnInfo> columnInfo,ExecutionEnvironment masterDefaultExecutionEnv) throws PlanBuildException{Set<String> resultColNamesRequested=executionRequest.getResolveValues().stream().map(resolveReq -> resolveReq.getResolve().getColumnName()).collect(Collectors.toSet());MasterWireManager masterWireManager=new MasterWireManager();RemoteWireManager remoteWireManager=new RemoteWireManager();List<RExecutionPlanStep> allRemoteSteps=new ArrayList<>();List<ExecutablePlanStep> allMasterSteps=new ArrayList<>();Supplier<Integer> nextMasterIdSupplier=() -> nextMasterStepId++;Supplier<Integer> nextRemoteIdSupplier=() -> nextRemoteStepId++;RemoteColumnManager remoteColManager=new RemoteColumnManager(nextRemoteIdSupplier,remoteExecutionPlanFactory,columnInfo,remoteWireManager);RemoteResolveManager remoteResolveManager=new RemoteResolveManager(nextRemoteIdSupplier,remoteColManager,remoteExecutionPlanFactory,remoteWireManager);MasterColumnManager masterColManager=new MasterColumnManager(masterDefaultExecutionEnv,nextMasterIdSupplier,executablePlanFactory,columnVersionManagerFactory,columnInfo,remoteResolveManager,masterWireManager);MasterResolveManager masterResolveManager=new MasterResolveManager(nextMasterIdSupplier,masterDefaultExecutionEnv,executablePlanFactory,masterColManager,masterWireManager,resultColNamesRequested);Set<String> columnNamesWorkedOn=new HashSet<>();for(FunctionRequest fnReq : executionRequest.getProjectAndAggregate()){if(columnNamesWorkedOn.contains(fnReq.getOutputColumn())){continue;}columnNamesWorkedOn.add(fnReq.getOutputColumn());if(columnInfo.get(fnReq.getOutputColumn()).isTransitivelyDependsOnAggregation()){if(fnReq.getType().equals(Type.AGGREGATION)){throw new PlanBuildException(""Aggregation on already aggregated value."");}masterColManager.produceColumn(fnReq);}else {if(fnReq.getType().equals(Type.AGGREGATION)){remoteColManager.produceColumn(fnReq);masterColManager.produceColumn(fnReq);}else {remoteColManager.produceColumn(fnReq);}}}RExecutionPlanStep remoteRowSinkStep=remoteExecutionPlanFactory.createRowIdSink(nextRemoteIdSupplier.get());allRemoteSteps.add(remoteRowSinkStep);if(executionRequest.getWhere()!=null){WhereBuilder whereHandler=new WhereBuilder(remoteExecutionPlanFactory,nextRemoteIdSupplier,remoteColManager,remoteWireManager);Pair<RExecutionPlanStep,List<RExecutionPlanStep>> whereResult=whereHandler.build(executionRequest.getWhere());remoteWireManager.wire(RowIdConsumer.class,whereResult.getLeft(),remoteRowSinkStep);allRemoteSteps.addAll(whereResult.getRight());}RExecutionPlanStep remoteRowIdSourceStep=remoteRowSinkStep;if(executionRequest.getGroup()!=null){RExecutionPlanStep groupStep=remoteExecutionPlanFactory.createGroup(executionRequest.getGroup(),nextRemoteIdSupplier.get());remoteWireManager.wire(RowIdConsumer.class,remoteRowIdSourceStep,groupStep);remoteRowIdSourceStep=groupStep;allRemoteSteps.add(groupStep);remoteColManager.wireGroupInput(groupStep);}ExecutablePlanStep masterRowIdSourceStep=null;ExecutablePlanStep masterRowIdStartStep=null;if(executionRequest.getOrder()!=null){RemoteOrderHandler remoteOrderHandler=new RemoteOrderHandler(columnInfo,nextRemoteIdSupplier,remoteExecutionPlanFactory,remoteColManager);RExecutionPlanStep remoteOrderStep=remoteOrderHandler.build(executionRequest.getOrder());if(remoteOrderStep!=null){remoteWireManager.wire(RowIdConsumer.class,remoteRowIdSourceStep,remoteOrderStep);remoteRowIdSourceStep=remoteOrderStep;allRemoteSteps.add(remoteOrderStep);}MasterOrderHandler masterOrderHandler=new MasterOrderHandler(executablePlanFactory,nextMasterIdSupplier,masterDefaultExecutionEnv,masterColManager);ExecutablePlanStep masterOrderStep=masterOrderHandler.build(executionRequest.getOrder());masterRowIdSourceStep=masterOrderStep;masterRowIdStartStep=masterOrderStep;allMasterSteps.add(masterOrderStep);}for(ResolveValueRequest resolveValue : executionRequest.getResolveValues()){String colName=resolveValue.getResolve().getColumnName();if(masterColManager.isColumnProduced(colName)){masterResolveManager.resolveValuesOfColumn(colName);}else {remoteResolveManager.resolveValuesOfColumn(colName);}}masterColManager.prepareBuild();allRemoteSteps.addAll(remoteResolveManager.build(remoteRowIdSourceStep));remoteColManager.prepareBuild();allRemoteSteps.addAll(remoteColManager.build());Map<Integer,RExecutionPlanStep> idToRemoteSteps=new HashMap<>();for(RExecutionPlanStep remoteStep : allRemoteSteps){idToRemoteSteps.put(remoteStep.getStepId(),remoteStep);}Map<Integer,Integer> remoteIdChangeMap=new HashMap<>();TopologicalSort<RExecutionPlanStep> remoteTopSort=new TopologicalSort<RExecutionPlanStep>(step -> {  if (step.getProvideDataForSteps() != null) {    return step.getProvideDataForSteps().keySet().stream().map(idx -> idToRemoteSteps.get(idx)).collect(Collectors.toList());  }  return new ArrayList<>();},step -> (long)step.getStepId(),(step,newIdx) -> remoteIdChangeMap.put(step.getStepId(),newIdx));allRemoteSteps=remoteTopSort.sort(allRemoteSteps);for(RExecutionPlanStep remoteStep : allRemoteSteps){if(remoteStep.getProvideDataForSteps()!=null){Map<Integer,List<RExecutionPlanStepDataType>> newProvideDataForSteps=new HashMap<>();for(Entry<Integer,List<RExecutionPlanStepDataType>> originalEntry : remoteStep.getProvideDataForSteps().entrySet()){newProvideDataForSteps.put(remoteIdChangeMap.get(originalEntry.getKey()),originalEntry.getValue());}remoteStep.setProvideDataForSteps(newProvideDataForSteps);}remoteStep.setStepId(remoteIdChangeMap.get(remoteStep.getStepId()));}RExecutionPlan remoteExecutionPlan=remoteExecutionPlanFactory.createExecutionPlan(allRemoteSteps,executionRequest.getTableName());ExecutablePlanStep executeRemoteStep=executablePlanFactory.createExecuteRemotePlanStep(nextMasterIdSupplier.get(),masterDefaultExecutionEnv,remoteExecutionPlan);allMasterSteps.add(executeRemoteStep);boolean aggregateFunctionsAvailable=columnInfo.values().stream().anyMatch(colInfo -> colInfo.getType().equals(FunctionRequest.Type.AGGREGATION));if(executionRequest.getGroup()!=null&&aggregateFunctionsAvailable){ExecutablePlanStep groupIdAdjustStep=executablePlanFactory.createGroupIdAdjustingStep(nextMasterIdSupplier.get(),new HashSet<>(executionRequest.getGroup().getGroupColumns()));masterWireManager.wire(ColumnValueConsumer.class,executeRemoteStep,groupIdAdjustStep);masterWireManager.wire(GroupIntermediaryAggregationConsumer.class,executeRemoteStep,groupIdAdjustStep);allMasterSteps.add(groupIdAdjustStep);masterColManager.wireGroupInput(groupIdAdjustStep);if(masterRowIdStartStep!=null){masterWireManager.wire(RowIdConsumer.class,groupIdAdjustStep,masterRowIdStartStep);masterRowIdStartStep=groupIdAdjustStep;}else {masterRowIdStartStep=groupIdAdjustStep;masterRowIdSourceStep=groupIdAdjustStep;}}else {if(masterRowIdStartStep!=null){masterWireManager.wire(RowIdConsumer.class,executeRemoteStep,masterRowIdStartStep);}}if(masterRowIdSourceStep==null){masterRowIdSourceStep=executeRemoteStep;}masterResolveManager.provideColumnValueSourceStep(executeRemoteStep);masterColManager.provideColumnValuesProvidingStep(executeRemoteStep);allMasterSteps.addAll(masterResolveManager.build(masterRowIdSourceStep));allMasterSteps.addAll(masterColManager.build());Map<Integer,Set<Integer>> masterWires=masterWireManager.buildFinalWireMap(allMasterSteps);Map<Integer,ExecutablePlanStep> idToMasterSteps=new HashMap<>();for(ExecutablePlanStep masterStep : allMasterSteps){idToMasterSteps.put(masterStep.getStepId(),masterStep);}TopologicalSort<ExecutablePlanStep> masterTopSort=new TopologicalSort<ExecutablePlanStep>(step -> {  if (masterWires.containsKey(step.getStepId()))   return masterWires.get(step.getStepId()).stream().map(idx -> idToMasterSteps.get(idx)).collect(Collectors.toList());  return new ArrayList<>();},step -> (long)step.getStepId(),(step,newIdx) -> step.setStepId(newIdx));allMasterSteps=masterTopSort.sort(allMasterSteps);ExecutablePlanInfo info=createInfo(executionRequest);ExecutablePlan plan=executablePlanFactory.createExecutablePlan(masterDefaultExecutionEnv,allMasterSteps,info);return plan;}"
1826	"public void onClick(DialogInterface dialog,int which){getOwner().setIntentAndFinish(true,true);}"
1827	"@Override public void enter(){mWifiStateMachine.setSupplicantRunning(true);}"
1828	"@Override public boolean visible(String name,Map<String,Object> connectorConfigs){return true;}"
1829	"public void actionPerformed(ActionEvent e){String s=t1.getText();int i=Integer.parseInt(s);if(event.equals(""CtoF"")){t2.setText(CtoF(i));}if(event.equals(""FtoC"")){t2.setText(FtoC(i));}}"
1830	"@Override void initUpdate(){log.info(""ActionUpdater"");List<Action> updatedActions=api.getAllActions();if(!listsEquals(updatedActions,actionMemory)){Action.actions=(actionMemory=updatedActions);tasktimer.cancel();tasktimer=new Timer();for(Action action : Action.actions){scheduleTask(new MyPostWriter(action,bot));}}}"
1831	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
1832	"@Override public void run(){int number;if(isAdded==true&&editTextTime==hours){number=(Integer.parseInt(editTextTime.getText().toString())+1)%24;}else {if(isAdded==false&&editTextTime==hours){number=((Integer.parseInt(editTextTime.getText().toString())-1)+24)%24;}else {if(isAdded==true&&editTextTime==minutes){number=(Integer.parseInt(editTextTime.getText().toString())+1)%60;}else {number=((Integer.parseInt(editTextTime.getText().toString())-1)+60)%60;}}}String text_number=String.valueOf(number);if(number>-1&&number<10){text_number=""0""+text_number;}editTextTime.setText(text_number);}"
1833	"synchronized void put(NettyTransportHandler nettyTransportHandler){if(size()>DEFAULT_MAX_CONNECTIONS){nettyTransportHandler.end();}else {push(new KeepAliveEntry(nettyTransportHandler,System.currentTimeMillis()));}}"
1834	"private void pushTransactions(SQLiteDatabase database){markInProgress(database,Tables.Transactions.SYNC_STATE); final Cursor cursor=Query.create().projectionLocalId(Tables.Transactions.LOCAL_ID).projection(Tables.Transactions.PROJECTION).projection(Tables.Accounts.PROJECTION_ACCOUNT_FROM).projection(Tables.Accounts.PROJECTION_ACCOUNT_TO).projection(Tables.CurrencyFormats.PROJECTION_ACCOUNT_FROM).projection(Tables.CurrencyFormats.PROJECTION_ACCOUNT_TO).projection(Tables.Categories.PROJECTION).selection(Tables.Transactions.SYNC_STATE+""=?"",SyncState.InProgress.asString()).from(context,TransactionsProvider.uriTransactions()).execute(); final List<Transaction> transactions=new ArrayList<>();do {transactions.add(Transaction.from(cursor));} while(cursor.moveToNext());IOUtils.closeQuietly(cursor);}"
1835	"@Override public boolean onLongClick(View v){return true;}"
1836	"public Transactions getAllTransactions(){return transactionsFileProcessor.readAll();}"
1837	"public void activate(){}"
1838	"private void processObject(COSObject object) throws IOException,PostScriptException{switch (object.getType()){case COS_INTEGER :int listLength=(int)getToken().integer;COSObject nextObject=nextObject();if(getToken().type!=Token.Type.TT_KEYWORD||!processList(listLength,getToken().getValue())){PSObject.getPSObject(object).execute(operandStack,userDict);PSObject.getPSObject(nextObject).execute(operandStack,userDict);break;}break;case COS_NAME :this.lastCOSName=object;if(getToken().getValue().equals(""usecmap"")){CMap usedCMap=new PDCMap(lastCOSName).getCMapFile();if(usedCMap!=null){this.cMap.useCMap(usedCMap);}else {this.cMap.setUsesNonPredefinedCMap(true);LOGGER.log(Level.FINE,""Can't load predefined CMap with name ""+lastCOSName);}}else {PSObject.getPSObject(object).execute(operandStack,userDict);}break;default :PSObject.getPSObject(object).execute(operandStack,userDict);}}"
1839	"@Override protected ServiceResult<Void> doSaveSection(CompetitionResource competition,CompetitionSetupForm competitionSetupForm){AssessorsForm assessorsForm=(AssessorsForm)competitionSetupForm;if(!sectionToSave().preventEdit(competition)){setFieldsDisallowedFromChangeAfterSetupAndLive(competition,assessorsForm);setFieldsAllowedFromChangeAfterSetupAndLive(competition,assessorsForm);return competitionService.update(competition);}else {return serviceFailure(singletonList(new Error(""COMPETITION_NOT_EDITABLE"",HttpStatus.INTERNAL_SERVER_ERROR)));}}"
1840	"private boolean isEventAcceptable(InetSocketAddress socketAddress){Set<SocketAddress> localSocketAddressesSet=getLocalSocketAddresses();if((!localSocketAddressesSet.isEmpty())&&(localSocketAddressesSet.contains(socketAddress)||this.isEventComingFromNonRegisteredHazelcastInstance(localSocketAddressesSet,socketAddress))){return true;}return false;}"
1841	"@Override public void onFailure(int reason){Log.d(""setDeviceName failed"",""true"");}"
1842	"@Override public void handleEvent(Event event){mouseOverHelpButton=true;btnHelp.redraw();}"
1843	"public View findTopChildUnder(int x,int y){ final int childCount=mParentView.getChildCount();for(int i=childCount-1;i>=0;i--){ final View child=mParentView.getChildAt(mCallback.getOrderedChildIndex(i));if(x>=child.getX()&&x<child.getX()+child.getWidth()&&y>=child.getY()&&y<child.getBottom()+child.getHeight()){return child;}}return null;}"
1844	"@Override public boolean isValid(T value){return (getValueClass().isInstance(value))&&value!=null;}"
1845	"public static Set<URL> effectiveClassPathUrls(ClassLoader... classLoaders){return ClasspathHelper.forManifest(ClasspathHelper.forClassLoader(classLoaders));}"
1846	"@Override public int getValue(){return controller.hasDynmap?1:0;}"
1847	"@Override public void run(){if(touchStart!=null){isDragging=true;}}"
1848	"@Override public ClusterTbl findClusterAndOrg(String clusterName){return clusterDao.findClusterAndOrgByName(clusterName);}"
1849	"@Override public Comparator<? extends K> comparator(){return backingSet().comparator();}"
1850	"public boolean isMoveLegal(int dx,int dy){return true;}"
1851	"@Override public boolean canHaveRecipient(){return true;}"
1852	"public void visit(INode node){((CourseEditorTreeNode)node).setDirty(true);}"
1853	"@Override public void onClick(DialogInterface dialog,int which){new LocalIndexOperationTask(getDownloadActivity(),listAdapter,LocalIndexOperationTask.CLEAR_TILES_OPERATION).execute(info);}"
1854	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
1855	"@Override public void onClick(DialogInterface dialog,int which){dialog.cancel();}"
1856	"@SuppressWarnings(""unchecked"") public static Object ConvertToCollection(Class targetType,String paramString,Class componentType){try{if(List.class.isAssignableFrom(targetType)){List list=(List)targetType.newInstance();String[] arrayItems=paramString.split("","");Object item=null;for(String itemStr : arrayItems){itemStr=itemStr.trim();item=PrimitiveChecker.convertObject(componentType,itemStr);list.add(item);}return list;}else {if(Set.class.isAssignableFrom(targetType)){Set set=(Set)targetType.newInstance();String[] arrayItems=paramString.split("","");Object item=null;for(String itemStr : arrayItems){itemStr=itemStr.trim();item=PrimitiveChecker.convertObject(componentType,itemStr);set.add(item);}return set;}else {if(Map.class.isAssignableFrom(targetType)){Map map=(Map)targetType.newInstance();return map;}}}}catch(InstantiationException|IllegalAccessException|IllegalArgumentException|SecurityException e){e.printStackTrace();}return null;}"
1857	"@Override protected void doAction(){rescheduleRequired=true;}"
1858	"public void closeConnection(){if(sqLiteDatabase!=null&&sqLiteDatabase.isOpen()){this.close();}}"
1859	"public void touchUp(InputEvent event,float x,float y,int pointer,int button){if(checked){object.songNum=0;object.setScreen(new songPage(object));}checked=false;}"
1860	"public void ReadRestartFile(TheMatrix TM){try{String line;String temp;FileReader FR;BufferedReader dFile;FR=new FileReader(TM.restartIn);dFile=new BufferedReader(FR);int index=0;int nmol=0;while((line=dFile.readLine())!=null){StringTokenizer token=new StringTokenizer(line);StringTokenizer token2;temp=token.nextToken();if(temp.equals(""COORDS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.rx[i]=Double.parseDouble(token2.nextToken())/TM.ro;TM.ry[i]=Double.parseDouble(token2.nextToken())/TM.ro;TM.rz[i]=Double.parseDouble(token2.nextToken())/TM.ro;}}else {if(temp.equals(""VELS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.rvx[i]=Double.parseDouble(token2.nextToken());TM.rvy[i]=Double.parseDouble(token2.nextToken());TM.rvz[i]=Double.parseDouble(token2.nextToken());}}else {if(temp.equals(""ACCELS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.rax[i]=Double.parseDouble(token2.nextToken());TM.ray[i]=Double.parseDouble(token2.nextToken());TM.raz[i]=Double.parseDouble(token2.nextToken());}}else {if(temp.equals(""ANGCOORDS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.rMatT[i*9+0]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+1]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+2]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+3]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+4]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+5]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+6]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+7]=Double.parseDouble(token2.nextToken());TM.rMatT[i*9+8]=Double.parseDouble(token2.nextToken());}index=0;}else {if(temp.equals(""ANGVELS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.wvx[i]=Double.parseDouble(token2.nextToken());TM.wvy[i]=Double.parseDouble(token2.nextToken());TM.wvz[i]=Double.parseDouble(token2.nextToken());}}else {if(temp.equals(""ANGACCELS"")){temp=token.nextToken();nmol=Integer.parseInt(token.nextToken());for(int i=0;i<TM.nMol;i++){line=dFile.readLine();token2=new StringTokenizer(line);temp=token2.nextToken();TM.wax[i]=Double.parseDouble(token2.nextToken());TM.way[i]=Double.parseDouble(token2.nextToken());TM.waz[i]=Double.parseDouble(token2.nextToken());}}}}}}}}}catch(IOException e){System.err.println(e);}}"
1861	"@Override protected Object doInBackground() throws Exception{dialog.setActivity(""Importing File..."",true);AbstractImporter importer=new BinVoxImporter(toOpen,FileTools.extractNameWithoutExtension(toOpen));importer.loadInto(data,true);return null;}"
1862	"private void formatImg(List<OpusInfoDto> opusInfoDtos){for(OpusInfoDto dto : opusInfoDtos){if(!StringUtils.isEmpty(dto.getCoverUrl())){dto.setCoverUrl(dto.getCoverUrl()+AfflatusStreetConstant.IMG_FORMAT_150_120);}UserInfo userInfo=dto.getUserInfo();if(userInfo!=null&&!StringUtils.isEmpty(userInfo.getAvatar())){userInfo.setAvatar(userInfo.getAvatar()+AfflatusStreetConstant.IMG_FORMAT_150_120);dto.setUserInfo(userInfo);}}}"
1863	"@Override public BiosCommandResult updateExportRules(StorageSystem storage,FileDeviceInputOutput args){List<ExportRule> exportAdd=args.getExportRulesToAdd();List<ExportRule> exportDelete=args.getExportRulesToDelete();List<ExportRule> exportModify=args.getExportRulesToModify();List<ExportRule> exportsToRemove=new ArrayList<>();List<ExportRule> exportsToAdd=new ArrayList<>();List<ExportRule> newExportsForDelete=new ArrayList<>();VNXeFileTaskCompleter completer=null;VNXeApiClient apiClient=getVnxUnityClient(storage);String subDir=args.getSubDirectory();List<ExportRule> exportsToprocess=args.getExistingDBExportRules();Map<String,ArrayList<ExportRule>> existingExportsMapped=new HashMap();try{String exportPath;if(!args.getFileOperation()){exportPath=args.getSnapshotPath();if(subDir!=null&&subDir.length()>0){exportPath=args.getSnapshotPath()+""/""+subDir;}}else {exportPath=args.getFs().getPath();if(subDir!=null&&subDir.length()>0){exportPath=args.getFs().getPath()+""/""+subDir;}}_logger.info(""exportPath : {}"",exportPath);args.setExportPath(exportPath);if(exportsToprocess==null){exportsToprocess=new ArrayList<>();}_logger.info(""Number of existng Rules found {}"",exportsToprocess.size());for(ExportRule existingRule : exportsToprocess){ArrayList<ExportRule> exps=existingExportsMapped.get(existingRule.getExportPath());if(exps==null){exps=new ArrayList<>();}exps.add(existingRule);_logger.info(""Checking existing export for {} : exps : {}"",existingRule.getExportPath(),exps);existingExportsMapped.put(existingRule.getExportPath(),exps);}if(exportAdd!=null&&!exportAdd.isEmpty()){ArrayList<ExportRule> exps=existingExportsMapped.get(exportPath);if(exps!=null&&!exps.isEmpty()){_logger.error(""Adding export rules is not supported as there can be only one export rule for VNX Unity."");ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""updateExportRules"",""Adding export rule is not supported for VNX unity"");return BiosCommandResult.createErrorResult(error);}}if(!exportsToprocess.isEmpty()){if(subDir!=null&&!subDir.isEmpty()){for(ExportRule existingRule : exportsToprocess){if(existingRule.getExportPath().endsWith(""/""+subDir)){_logger.info(""Updating all subdir exports rules at ViPR and  sub directory export at device {}"",subDir);processModifyRules(exportModify,existingRule,exportsToRemove,exportsToAdd);}else {exportsToRemove.add(existingRule);}}if(exportDelete!=null&&!exportDelete.isEmpty()){for(ExportRule existingRule : exportsToprocess){if(existingRule.getExportPath().endsWith(""/""+subDir)){processDeleteRules(exportDelete,existingRule,exportsToRemove,newExportsForDelete);}else {exportsToRemove.add(existingRule);}}exportsToAdd.addAll(newExportsForDelete);}}else {for(ExportRule existingRule : exportsToprocess){if(existingRule.getExportPath().equalsIgnoreCase(exportPath)){processModifyRules(exportModify,existingRule,exportsToRemove,exportsToAdd);}else {exportsToRemove.add(existingRule);}}if(exportDelete!=null&&!exportDelete.isEmpty()){for(ExportRule existingRule : exportsToprocess){if(existingRule.getExportPath().equalsIgnoreCase(exportPath)){processDeleteRules(exportDelete,existingRule,exportsToRemove,newExportsForDelete);}else {exportsToRemove.add(existingRule);}}exportsToAdd.addAll(newExportsForDelete);}}_logger.info(""No of exports found to remove from the existing exports list {}"",exportsToRemove.size());exportsToprocess.removeAll(exportsToRemove);_logger.info(""No of exports found to add to the existing exports list {}"",exportsToAdd.size());exportsToprocess.addAll(exportsToAdd);}else {if(exportAdd!=null&&!exportAdd.isEmpty()){for(ExportRule newExport : exportAdd){if(args.getFileObjExports()!=null){Collection<FileExport> expList=args.getFileObjExports().values();Iterator<FileExport> it=expList.iterator();FileExport exp=null;while(it.hasNext()){FileExport export=it.next();if(export.getPath().equalsIgnoreCase(exportPath)){exp=export;}}if(exp!=null){if(exp.getIsilonId()!=null){newExport.setDeviceExportId(exp.getIsilonId());}if(exp.getNativeId()!=null){newExport.setDeviceExportId(exp.getNativeId());}}}_logger.info(""Add Export Rule {}"",newExport);newExport.setExportPath(exportPath);exportsToAdd.add(newExport);}}exportsToprocess.addAll(exportsToAdd);}_logger.info(""exportPath : {}"",exportPath);args.setExportPath(exportPath);VNXeCommandJob job=null;for(ExportRule rule : exportsToprocess){AccessEnum access=null;List<String> roHosts=new ArrayList<String>();List<String> rwHosts=new ArrayList<String>();List<String> rootHosts=new ArrayList<String>();String path=""/"";String subdirName="""";String mountPathFs=args.getFsMountPath();String shareName=null;FileShareExport fsExport=null;boolean isDeleteRule=false;if(args.getFileObjExports()!=null){Collection<FileExport> expList=args.getFileObjExports().values();Iterator<FileExport> it=expList.iterator();FileExport exp=null;while(it.hasNext()){FileExport export=it.next();if(export.getPath().equalsIgnoreCase(rule.getExportPath())){exp=export;}}fsExport=new FileShareExport(exp);}String mountPathArg=rule.getExportPath();if(rule.getReadWriteHosts()!=null&&!rule.getReadWriteHosts().isEmpty()){access=AccessEnum.READWRITE;rwHosts.addAll(rule.getReadWriteHosts());}if(rule.getReadOnlyHosts()!=null&&!rule.getReadOnlyHosts().isEmpty()){access=AccessEnum.READ;roHosts.addAll(rule.getReadOnlyHosts());}if(rule.getRootHosts()!=null&&!rule.getRootHosts().isEmpty()){access=AccessEnum.ROOT;rootHosts.addAll(rule.getRootHosts());}if(newExportsForDelete.contains(rule)){isDeleteRule=true;}if(args.getFileOperation()){if(!mountPathArg.equals(mountPathFs)){subdirName=mountPathArg.substring(mountPathFs.length()+1);path+=subdirName;}if(isDeleteRule){job=apiClient.removeNfsShare(rule.getDeviceExportId(),args.getFs().getNativeId());if(job!=null){completer=new VNXeFileTaskCompleter(FileShare.class,args.getFsId(),args.getOpId());VNXeUnexportFileSystemJob unexportFSJob=new VNXeUnexportFileSystemJob(job.getId(),storage.getId(),completer,fsExport,args.getExportPath(),true);ControllerServiceImpl.enqueueJob(new QueueJob(unexportFSJob));}else {_logger.error(""No job returned from unexport FileSystem"");ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""UnExportFileSystem"",""No Job returned from UnExportFileSystem"");return BiosCommandResult.createErrorResult(error);}}else {job=apiClient.exportFileSystem(args.getFs().getNativeId(),roHosts,rwHosts,rootHosts,access,path,null,rule.getDeviceExportId(),null);if(job!=null){completer=new VNXeFileTaskCompleter(FileShare.class,args.getFsId(),args.getOpId());VNXeModifyExportJob modifyExportJob=new VNXeModifyExportJob(job.getId(),storage.getId(),completer,rule,fsExport,args.getExportPath(),args.getFileOperation(),isDeleteRule,shareName);ControllerServiceImpl.enqueueJob(new QueueJob(modifyExportJob));}else {_logger.error(""No job returned from updateExportRules"");ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""updateExportRules"",""No Job returned from updateExportRules"");return BiosCommandResult.createErrorResult(error);}}}else {shareName=VNXeUtils.buildNfsShareName(args.getSnapshotName(),path);if(isDeleteRule){job=apiClient.deleteNfsShareForSnapshot(rule.getDeviceExportId());if(job!=null){completer=new VNXeFileTaskCompleter(Snapshot.class,args.getSnapshotId(),args.getOpId());VNXeUnexportFileSystemJob unexportFSJob=new VNXeUnexportFileSystemJob(job.getId(),storage.getId(),completer,fsExport,rule.getExportPath(),false);ControllerServiceImpl.enqueueJob(new QueueJob(unexportFSJob));}else {_logger.error(""No job returned from unexportFileSystem Snapshot"");ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""UnExportFileSystem"",""No Job returned from UnExportFileSystem"");return BiosCommandResult.createErrorResult(error);}}else {job=apiClient.createNfsShareForSnap(args.getSnapNativeId(),roHosts,rwHosts,rootHosts,access,path,shareName,null);if(job!=null){completer=new VNXeFileTaskCompleter(Snapshot.class,args.getSnapshotId(),args.getOpId());VNXeModifyExportJob modifyExportJob=new VNXeModifyExportJob(job.getId(),storage.getId(),completer,rule,fsExport,args.getExportPath(),args.getFileOperation(),isDeleteRule,shareName);ControllerServiceImpl.enqueueJob(new QueueJob(modifyExportJob));}else {_logger.error(""No job returned from updateExportRules"");ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""updateExportRules"",""No Job returned from updateExportRules"");return BiosCommandResult.createErrorResult(error);}}}}}catch(VNXeException e){_logger.error(""updateExportRules got the exception"",e);if(completer!=null){completer.error(dbClient,e);}return BiosCommandResult.createErrorResult(e);}catch(Exception ex){_logger.error(""updateExportRules got the exception"",ex);ServiceError error=DeviceControllerErrors.vnxe.jobFailed(""updateExportRules"",ex.getMessage());if(completer!=null){completer.error(dbClient,error);}return BiosCommandResult.createErrorResult(error);}_logger.info(""UpdateExportRules job submitted"");return BiosCommandResult.createPendingResult();}"
1864	"@Override public final void onStart(){super.onStart();Log.d(getClass().getCanonicalName());stepperActivity.setCurrentFragment(this);}"
1865	"@Override public void onClick(View v){mCurrentIndex=(mCurrentIndex+1)%mQuestionBank.length;updateQuestion();}"
1866	"private void loadGlobalAssets(){assetManager.load(""MENU_bg.jpg"",Texture.class);assetManager.load(""MENU_button.png"",Texture.class);assetManager.load(""MENU_button_pressed.png"",Texture.class);assetManager.load(""MENU_flag_fi.png"",Texture.class);assetManager.load(""MENU_flag_en.png"",Texture.class);assetManager.load(""MENU_sound_on.png"",Texture.class);assetManager.load(""MENU_sound_off.png"",Texture.class);assetManager.load(""MENU_music_on.png"",Texture.class);assetManager.load(""MENU_music_off.png"",Texture.class);assetManager.load(""riddle_info_box_fill.png"",Texture.class);assetManager.load(""star_empty.png"",Texture.class);assetManager.load(""star_full.png"",Texture.class);assetManager.load(""black.png"",Texture.class);assetManager.load(""map_room_info_box.png"",Texture.class);assetManager.load(""indicator_line.jpg"",Texture.class);assetManager.load(""menurger.png"",Texture.class);assetManager.load(""menurger_pressed.png"",Texture.class);}"
1867	"@Override public void onClick(View v){Intent i=new Intent(this.getActivity(),DepartmentActivity.class);startActivity(i);}"
1868	"@Override public void onCreate(){super.onCreate();appContext=getApplicationContext();}"
1869	"@Override public void clicked(InputEvent event,float x,float y){attack=true;}"
1870	"public static void main(String[] args) throws InvalidNumberOfBanksException{Scanner sc=new Scanner(System.in);System.out.println(""Enter the number of cache Levels"");int numCacheLevels=sc.nextInt();int[] S=new int[Math.min(3,numCacheLevels)];int[] m=new int[Math.min(3,numCacheLevels)];CacheWriteHitPolicy[] cacheWriteHitPolicy=new CacheWriteHitPolicy[Math.min(3,numCacheLevels)];System.out.println(""Enter the Line Size L of the cache(s)"");int L=sc.nextInt();for(int i=1;i<=Math.min(3,numCacheLevels);i++){System.out.println(""Enter S, M and the writing policy (0 for WriteBack, 1 for WriteThrough) of cache #""+i+"" (seperated by spaces)"");S[i-1]=sc.nextInt();m[i-1]=sc.nextInt();int t=sc.nextInt();if(t==0){cacheWriteHitPolicy[i-1]=CacheWriteHitPolicy.WriteBack;}else {cacheWriteHitPolicy[i-1]=CacheWriteHitPolicy.WriteThrough;}}int[] cycles=new int[Math.min(3,numCacheLevels)];for(int i=1;i<=Math.min(3,numCacheLevels);i++){System.out.println(""Enter the access time (in cycles) of Cache #""+i);cycles[i-1]=sc.nextInt();}System.out.println(""Enter the main memory access time"");int memoryCycles=sc.nextInt();MemoryHierarchy M=new MemoryHierarchy(numCacheLevels,L,S,m,cycles,memoryCycles,cacheWriteHitPolicy);System.out.println(""Enter the pipeline width"");int pipelineWidth=sc.nextInt();System.out.println(""Enter the size of the instruction buffer (queue)"");int insturctionBuffer=sc.nextInt();int[] maxInstrs=new int[11];System.out.println(""Enter the number of reservation stations for each of the following instructions (seperated by spaces)"");System.out.println(""LW, SW, JMP, BEQ, JALR, RET, ADD, SUB, ADDI, NAND, MUL"");maxInstrs[InstrType.LW.ordinal()]=sc.nextInt();maxInstrs[InstrType.SW.ordinal()]=sc.nextInt();maxInstrs[InstrType.JMP.ordinal()]=sc.nextInt();maxInstrs[InstrType.BEQ.ordinal()]=sc.nextInt();maxInstrs[InstrType.JALR.ordinal()]=sc.nextInt();maxInstrs[InstrType.RET.ordinal()]=sc.nextInt();maxInstrs[InstrType.ADD.ordinal()]=sc.nextInt();maxInstrs[InstrType.SUB.ordinal()]=sc.nextInt();maxInstrs[InstrType.ADDI.ordinal()]=sc.nextInt();maxInstrs[InstrType.NAND.ordinal()]=sc.nextInt();maxInstrs[InstrType.MUL.ordinal()]=sc.nextInt();System.out.println(""Enter the number of ROB Entries Available"");int ROBsize=sc.nextInt();int[] numCycles=new int[11];System.out.println(""Enter the number of cycles needed by each of the following (seperated by spaces)"");System.out.println(""JMP, BEQ, JALR, RET, ADD, SUB, ADDI, NAND, MUL"");numCycles[InstrType.JMP.ordinal()]=sc.nextInt();numCycles[InstrType.BEQ.ordinal()]=sc.nextInt();numCycles[InstrType.JALR.ordinal()]=sc.nextInt();numCycles[InstrType.RET.ordinal()]=sc.nextInt();numCycles[InstrType.ADD.ordinal()]=sc.nextInt();numCycles[InstrType.SUB.ordinal()]=sc.nextInt();numCycles[InstrType.ADDI.ordinal()]=sc.nextInt();numCycles[InstrType.NAND.ordinal()]=sc.nextInt();numCycles[InstrType.MUL.ordinal()]=sc.nextInt();Processor p=new Processor(M,pipelineWidth,insturctionBuffer,ROBsize,maxInstrs,numCycles);System.out.println(""Enter the starting address of your program (Should be >= 32768)"");int startingPC=sc.nextInt();System.out.println(""Enter the program"");System.out.println(""Finish by Entering a blank line"");sc.nextLine();String s=sc.nextLine();while(!s.equals("""")){String[] strings=ProgramParser.match(s);if(strings==null){System.out.println(""Invalid Instruction: ""+s);}else {M.getMemory().write(startingPC,String.join("" "",ProgramParser.match(s)),false);startingPC+=2;}s=sc.nextLine();}PCAfterLastInstruction=startingPC;while(p.simulate()){;}double amat;double level1Misses=p.M.getCaches().get(0).getMisses()+p.M.getCaches().get(1).getMisses();double level1Accesses=p.M.getCaches().get(0).getAccesses()+p.M.getCaches().get(1).getAccesses();if(p.M.getCaches().size()==2){amat=(double)level1Misses/level1Accesses*p.M.getMemory().getCycles();}else {if(p.M.getCaches().size()==3){amat=(double)level1Misses/level1Accesses*p.M.getCaches().get(2).getCycles()+(double)level1Misses/level1Accesses*p.M.getCaches().get(2).getMisses()/p.M.getCaches().get(2).getAccesses()*p.M.getMemory().getCycles();}else {amat=(double)level1Misses/level1Accesses*p.M.getCaches().get(2).getCycles()+(double)level1Misses/level1Accesses*p.M.getCaches().get(2).getMisses()/p.M.getCaches().get(2).getAccesses()*p.M.getCaches().get(3).getCycles()+(double)level1Misses/level1Accesses*p.M.getCaches().get(2).getMisses()/p.M.getCaches().get(2).getAccesses()*p.M.getCaches().get(3).getMisses()/p.M.getCaches().get(3).getAccesses()*p.M.getMemory().getCycles();}}double cpiLoad=amat*p.loadInstructions/p.totalInstructions;double cpiBranch=amat*p.mispredictions/p.totalInstructions;double cpi=1.0+cpiLoad+cpiBranch;double ipc=1.0/cpi;System.out.println(""The IPC: ""+ipc);System.out.println(""Execution Time: ""+p.cyclesSimulated+"" cycles"");for(int i=0;i<p.M.getCaches().size();i++){if(i==0){System.out.println(""The Hit Ratio of the 1st Cache: ""+(double)(p.M.getCaches().get(0).getAccesses()+p.M.getCaches().get(1).getAccesses()-p.M.getCaches().get(0).getMisses()-p.M.getCaches().get(1).getMisses())/(p.M.getCaches().get(0).getAccesses()+p.M.getCaches().get(1).getAccesses()));}else {if(i==2){System.out.println(""The Hit Ratio of the 2nd Cache: ""+(double)(p.M.getCaches().get(2).getAccesses()-p.M.getCaches().get(2).getMisses())/p.M.getCaches().get(2).getAccesses());}else {if(i==3){System.out.println(""The Hit Ratio of the 3rd Cache: ""+(double)(p.M.getCaches().get(3).getAccesses()-p.M.getCaches().get(3).getMisses())/p.M.getCaches().get(3).getAccesses());}}}}System.out.println(""The global AMAT: ""+amat+"" cycles"");if(p.beqInstructions==0){System.out.println(""The branch misprediction percentage is not available (No Branch Instructions)"");}else {System.out.println(p.mispredictions*100.0/p.beqInstructions);}}"
1871	"public void merge(MajorScope scope){for(SymbolTableEntry e : scope.symbolTable.getEntries()){this.addEntry(e);}}"
1872	"@Override public void onClick(View v){saveToDB=true;finish();}"
1873	"@Override public void changed(ObservableValue<? extends EditItem> observable,EditItem oldValue,EditItem newValue){if(oldValue!=null&&newValue!=null&&!oldValue.equals(newValue)){loadTextFileToEditor(oldValue,newValue);}if(oldValue==null&&newValue!=null&&app.getEditItems().size()==1){loadTextFileToEditor(newValue);}}"
1874	"@Override public void onClick(DialogInterface dialog,int which){}"
1875	"private void releaseViewToLoadingStatus(){if(null==mLoadingFooterIndicatorProvider){return ;}setState(STATE_BOUNCING);if(mFooterIndicatorLocation==INDICATOR_LOCATION_BACK){mContentViewWrapper.animateTranslationY(mContentViewWrapper.getTranslationY(),-mFooterIndicatorView.getHeight(),new BaseViewWrapper.AnimateListener(){  @Override public void onAnimate(  int value){    int progress=100 * value / mFooterIndicatorView.getHeight();    mLoadingFooterIndicatorProvider.onFooterIndicatorViewScrollChange(progress);  }  @Override public void onFinish(){    if (mState != STATE_LOADING) {      startLoading();    } else {      setState(STATE_LOADING);    }  }});}else {mFooterIndicatorView.animateTranslationY(mFooterIndicatorView.getTranslationY(),-mFooterIndicatorView.getHeight(),new BaseViewWrapper.AnimateListener(){  @Override public void onAnimate(  int value){    int progress=100 * value / mFooterIndicatorView.getHeight();    mLoadingFooterIndicatorProvider.onFooterIndicatorViewScrollChange(progress);    if (mFooterIndicatorLocation != INDICATOR_LOCATION_FRONT) {      mContentViewWrapper.translateVerticalWithOffset(value);    }  }  @Override public void onFinish(){    if (mState != STATE_LOADING) {      startLoading();    } else {      setState(STATE_LOADING);    }  }});}}"
1876	"@Override public void subscribe(ObservableEmitter<Bitmap> emitter) throws Exception{try{PlacePhotoMetadataResult res=Places.GeoDataApi.getPlacePhotos(googleApiClient,placeId).await();PlacePhotoMetadataBuffer buffer=res.getPhotoMetadata();for(PlacePhotoMetadata photoMetadata : buffer){Bitmap photo=photoMetadata.getPhoto(googleApiClient).await().getBitmap();emitter.onNext(photo);}buffer.release();}catch(Exception ex){emitter.onError(ex);}finally{emitter.onComplete();}}"
1877	"protected boolean peekToken(int lookahead,Filter<TokenKind> tk){return tk.accepts(S.token(lookahead+1).kind);}"
1878	"private FileManager(){}"
1879	"@Override public boolean onContextItemSelected(MenuItem item){switch (item.getItemId()){case R.id.action_add_to_first_now_playing :LogUtils.printLog(""action_add_to_first_now_playing"");try{mPlayerService.addNextPlaying(mAdapter.getDataItem(mAdapter.positionContext));}catch(RemoteException e){e.printStackTrace();}break;case R.id.action_add_to_now_plays :LogUtils.printLog(""action_add_to_now_plays"");try{mPlayerService.addNextPlaying(mAdapter.getDataItem(mAdapter.positionContext));}catch(RemoteException e){e.printStackTrace();}break;case R.id.action_add_playlist :LogUtils.printLog(""action_add_playlist"");addPlaylistDialog(mAdapter.getDataItem(mAdapter.positionContext));break;case R.id.action_set_is_rington :LogUtils.printLog(""action_set_is_rington"");FileUtils.setAudioRington(mContext,mAdapter.getDataItem(mAdapter.positionContext));Toast.makeText(mContext,R.string.set_ring_tone,Toast.LENGTH_SHORT).show();break;case R.id.action_delete :LogUtils.printLog(""action_delete"");comfirmDeleteDialog(mContext,mAdapter.getDataItem(mAdapter.positionContext),mAdapter);break;}return super.onContextItemSelected(item);}"
1880	"public static List<String> addExploitationInfoPart(DirectedAcyclicGraph<Node,Edge> graph,Node partNode,Metacard metacard,ORB orb,String parentAttrName,List<String> resultAttributes){List<String> addedAttributes=new ArrayList<>();Any exploitationInfoAny=orb.create_any();Node exploitationInfoNode=new Node(0,NodeType.ENTITY_NODE,NsiliConstants.NSIL_EXPLOITATION_INFO,exploitationInfoAny);graph.addVertex(exploitationInfoNode);graph.addEdge(partNode,exploitationInfoNode);String attribute=parentAttrName+NsiliConstants.NSIL_EXPLOITATION_INFO;if(shouldAdd(buildAttr(attribute,NsiliConstants.LEVEL),resultAttributes)){Attribute exploitationLevelAttr=metacard.getAttribute(Isr.EXPLOITATION_LEVEL);if(exploitationLevelAttr!=null){Integer exploitationLevel=getInteger(exploitationLevelAttr.getValue());if(exploitationLevel!=null){addIntegerAttribute(graph,exploitationInfoNode,NsiliConstants.LEVEL,exploitationLevel,orb);addedAttributes.add(buildAttr(attribute,NsiliConstants.LEVEL));}}}if(shouldAdd(buildAttr(attribute,NsiliConstants.AUTO_GENERATED),resultAttributes)){Attribute autoGenAttr=metacard.getAttribute(Isr.EXPLOTATION_AUTO_GENERATED);if(autoGenAttr!=null){if(autoGenAttr.getValue() instanceof Boolean){Boolean autoGen=(Boolean)autoGenAttr.getValue();if(autoGen!=null){addBooleanAttribute(graph,exploitationInfoNode,NsiliConstants.AUTO_GENERATED,autoGen,orb);addedAttributes.add(buildAttr(attribute,NsiliConstants.AUTO_GENERATED));}}}}if(shouldAdd(buildAttr(attribute,NsiliConstants.SUBJ_QUALITY_CODE),resultAttributes)){Attribute subQualCodeAttr=metacard.getAttribute(Isr.EXPLOITATION_SUBJECTIVE_QUALITY_CODE);if(subQualCodeAttr!=null){String subQualCodeStr=getSubjectiveQualityCode(subQualCodeAttr.getValue());if(subQualCodeStr!=null){addStringAttribute(graph,exploitationInfoNode,NsiliConstants.SUBJ_QUALITY_CODE,subQualCodeStr,orb);addedAttributes.add(buildAttr(attribute,NsiliConstants.SUBJ_QUALITY_CODE));}}}return addedAttributes;}"
1881	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
1882	"@Override public void onClick(View v){positionLetterFive=changeLettersUp(letterFive,positionLetterFive);}"
1883	"@Override int resultIndex(Comparator<? super E> comparator,E key,List<? extends E> list,int foundIndex){return foundIndex;}"
1884	"public List<Integer> spiralOrder(int[][] matrix){}"
1885	"@Override public void onClick(DialogInterface dialog,int which){}"
1886	"@Override public boolean mightHaveNext(){return next!=null;}"
1887	"@Override public void onClick(View v){int id=v.getId();switch (id){case R.id.start_Btn :((HostGameActivity)getActivity()).mHostPlayer.newRound();break;case R.id.stop_Btn :((GuestGameActivity)getActivity()).mGuestPlayer.leaveGame();getActivity().finish();break;case R.id.confirm_Btn :btnConfirmOnClick();break;case R.id.gamepad_paper :btnPaperOnClick();break;case R.id.gamepad_rock :btnRockOnClick();break;case R.id.gamepad_scissors :btnScissorsOnClick();break;}}"
1888	"public void run(){int numPlayers=askForNumberOfPlayers();p1Name=getPlayerName(1);if(numPlayers==1){p2Name=""Computer"";}else {p2Name=getPlayerName(2);}Card p1Card;Card p2Card;while(roundsPlayed<MAX_ROUNDS){try{p1Card=deck.getNextCard();p2Card=deck.getNextCard();out.printf(""%nThis is Round %d %n%n"",roundsPlayed+1);if(p1Card.compareTo(p2Card)<0){p2Score+=2;out.printf(""%s wins this round!%n"",p2Name);}else {if(p1Card.compareTo(p2Card)>0){p1Score+=2;out.printf(""%s wins this round!%n"",p1Name);}else {++p1Score;++p2Score;out.printf(""This round is a tie!%n"");}}}catch(Exception e){out.println(""An error occurred. Please try running the game again."");}out.printf(""%s's score: %d%n"",p1Name,p1Score);out.printf(""%s's score: %d%n"",p2Name,p2Score);++roundsPlayed;}out.printf(""%nGame's over. "");if(p1Score>p2Score){out.printf(""%s wins!%n%n"",p1Name);}else {if(p1Score<p2Score){out.printf(""%s wins!%n%n"",p2Name);}else {out.printf(""It is a tie!%n%n"");}}deck=new Deck();roundsPlayed=0;p1Name="""";p2Name="""";p1Score=0;p2Score=0;}"
1889	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
1890	"private boolean isValidDirection(EnumFacing dir){if(dir==null||!owner.connects(dir)){return false;}TileEntity tile=owner.getNeighbourTile(dir);if(tile instanceof TilePipe){return ((TilePipe)tile).connects(dir.getOpposite());}else {if(tile instanceof IInventory){return InventoryUtils.connects((IInventory)tile,dir.getOpposite());}}return false;}"
1891	"private static String getHexNumberFromByteValue(byte curByte){String curNumber=Integer.toHexString(curByte);if(curByte<0){curNumber=curNumber.substring(curNumber.length()-2);}return curNumber;}"
1892	"public void loadRoomConfig(){int count=0;File file=new File(roomConfigFile);Scanner scan=null;try{scan=new Scanner(file);while(scan.hasNextLine()){String line=scan.nextLine();String[] lineArray=line.split("","");String letterString=lineArray[0];char letter=letterString.charAt(0);legend.put(letter,lineArray[1]);if(count>1){Card room=new Card(lineArray[1],CardType.ROOM);roomPile.add(room);}count++;}}catch(FileNotFoundException e){System.out.println(e.getMessage());System.out.println(""Unable to open file ""+roomConfigFile+""."");}catch(NullPointerException a){BadConfigFormatException b=new BadConfigFormatException(a.getLocalizedMessage());b.getMessage();}finally{scan.close();}}"
1893	"public void handle(MouseEvent event){if(!event.isPrimaryButtonDown()){return ;}System.out.println(""node clicked"");DraggableNode node=(DraggableNode)event.getSource();if(mapController.nodeIsSelected()){mapController.unselectNode();}else {mapController.selectNode(node);}nodeDragContext.mouseAnchorX=event.getSceneX();nodeDragContext.mouseAnchorY=event.getSceneY();nodeDragContext.translateAnchorX=node.getTranslateX();nodeDragContext.translateAnchorY=node.getTranslateY();}"
1894	"@RequestMapping(value=""/getByID"",method=RequestMethod.GET) public User getById(String login){return userRepository.findUserByLogin(login);}"
1895	"public TokenClassifier(Dataset dataset,Classifier wekaClf,int windowSize){this.isTrained=false;this.dataset=dataset;this.wekaClf=wekaClf;this.windowSize=windowSize;LinkedHashSet<String> classes=new LinkedHashSet<String>();classes.add(POSITIVE_CLASS);classes.add(NEGATIVE_CLASS);featuresNames=new LinkedHashSet<String>();for(Integer i=0;i<dataset.getFeatureSpaceSize()*windowSize;i++){featuresNames.add(i.toString());}clf=new GeneralClassifier(wekaClf,featuresNames,classes,true);}"
1896	"@Override public int result(){return 0;}"
1897	"@Override public boolean isValuePresent(){return !StringUtils.isEmpty(this.value);}"
1898	"@Override public int getItemType(){return super.getItemType();}"
1899	"public boolean accept(CNAbility o){return o.getAbility().get(MapKey.ASPECT,AspectName.getConstant(keyValue[1]))!=null;}"
1900	"@Override public void LoginDone(int LOGIN_STATE){log.addToLog(LOGIN_STATE+"""");switch (LOGIN_STATE){case LoginConstants.LOGIN_NET_WORKING :textUpdate(CONNECTED);Toast.makeText(this,""Logged In!"",Toast.LENGTH_SHORT).show();break;case LoginConstants.LOGIN_NET_NOTWORKING :textUpdate(NOT_CONNECTED);LoginAutomatically();break;case LoginConstants.LOGIN_DEACTIVATED :break;case LoginConstants.LOGIN_DONE :textUpdate(CONNECTED);break;case LoginConstants.LOGIN_NOTLOGGEDIN :LoginAutomatically();break;case LoginConstants.LOGIN_SAMEUSER :break;case LoginConstants.LOGIN_UNSUCCESSFULL :break;case LoginConstants.LOGIN_WRONGUSERNAME :break;}}"
1901	"private void clientSubscribe(int intervalRegular,int intervalAlarm){try{mixCont.client.subscribeColor(intervalRegular,mixCont.colorListener);mixCont.client.subscribeFillLevel(intervalRegular,mixCont.fillLevelListener);mixCont.client.subscribeMotorSpeed(intervalRegular,mixCont.motorSpeedListener);mixCont.client.subscribeOutputFlowRate(intervalRegular,mixCont.outputFlowRateListener);mixCont.client.subscribeOverflowSensor(intervalAlarm,mixCont.overflowSensorListener);mixCont.client.subscribeOverheatSensor(intervalAlarm,mixCont.overheatSensorListener);mixCont.client.subscribeTemperature(intervalRegular,mixCont.temperatureListener);mixCont.client.subscribeUndercoolSensor(intervalAlarm,mixCont.undercoolSensorListener);mixCont.client.subscribeUnderflowSensor(intervalAlarm,mixCont.underflowSensorListener);}catch(UAClientException e){System.err.println(""Could not subscribe property: ""+e.getMessage());}mixCont.client.setErrorListener(mixCont.errorListener);for(TankContainer cont : tanks){try{cont.client.subscribeColor(intervalRegular,cont.colorListener);cont.client.subscribeFillLevel(intervalRegular,cont.fillLevelListener);cont.client.subscribeInputFlowRate(intervalRegular,cont.inputFlowRateListener);cont.client.subscribeOutputFlowRate(intervalRegular,cont.outputFlowRateListener);cont.client.subscribeOverflowSensor(intervalAlarm,cont.overflowSensorListener);cont.client.subscribeOverheatSensor(intervalAlarm,cont.overheatSensorListener);cont.client.subscribeTemperature(intervalRegular,cont.temperatureListener);cont.client.subscribeUndercoolSensor(intervalAlarm,cont.undercoolSensorListener);cont.client.subscribeUnderflowSensor(intervalAlarm,cont.underflowSensorListener);}catch(UAClientException e){System.err.println(""Could not subscribe property: ""+e.getMessage());}cont.client.setErrorListener(cont.errorListener);}}"
1902	"public Tile getTile(int x,int y){if(tiles[x+y*width]==0){return Tile.grass;}if(tiles[x+y*width]==1){return Tile.stone;}if(tiles[x+y*width]==2){return Tile.water;}return Tile.voidTile;}"
1903	"private static boolean compareVarArgumentType(List<String> arguments,List<String> parameters){ final Iterator<String> iteratorA=arguments.iterator(); final CachedASMReflector reflector=CachedASMReflector.getInstance(); final int last=parameters.size()-1;int index=0;for(String paramStr : parameters){if(index==last){return checkVarargs(iteratorA,paramStr);}else { final String realArgStr=iteratorA.next();if(ClassNameUtils.isArray(paramStr)!=ClassNameUtils.isArray(realArgStr)){return false;} final ClassName paramClass=new ClassName(paramStr); final ClassName argClass=new ClassName(realArgStr); final String paramClassName=autoBoxing(paramClass.getName()); final String argClassName=autoBoxing(argClass.getName());index++;if(paramClassName.equals(argClassName)){continue;} final boolean result=reflector.getSuperClassStream(argClassName).anyMatch(s -> {  final String cls=new ClassName(s).getName();  return cls.equals(paramClassName);});if(!result){return false;}}}return true;}"
1904	"@Override public Move getMove(BoardFeatures board){Move out=null;int max=Integer.MIN_VALUE;int i=0;for(Move m : board.getPossibleMoves(pID)){System.out.println(""iteration ""+i+""max ""+max);board.performMove(m,pID);int v=minValue(board,0,Integer.MIN_VALUE,Integer.MAX_VALUE);board.undoMove(m,pID);if(v>max){max=v;out=m;}i++;}return out;}"
1905	"public boolean isUp(){return true;}"
1906	"public void onClick(DialogInterface dialog,int which){dialog.dismiss();sending=true;}"
1907	"private void handlePkserver(HttpExchange httpExchange) throws IOException{StringBuilder response=new StringBuilder();String providedB64Key=stripHeaders(parameters.get(""publickey"")).replaceAll(""\\s"","""");String password=parameters.get(""password"");try{KeyStoreManager manager=new KeyStoreManager(KEYSTORE_PATH,password); final PublicKey publicKey=KeyUtils.publicKeyFromString(providedB64Key); final PrivateKey privateKey=manager.getPrivateKey(publicKey,"""");if(privateKey==null){throw new InvalidKeyException();}response.append(""Algorithm : "").append(privateKey.getAlgorithm()).append(""\n"");response.append(""Format : "").append(privateKey.getFormat()).append(""\n"");response.append(KeyUtils.privateKeyToString(privateKey));}catch(IOException e){ final String msg=""The provided password is incorrect."";if(e.getCause() instanceof UnrecoverableKeyException){response.append(msg);}logger.log(Level.WARNING,null,msg);}catch(InvalidKeySpecException e){logger.log(Level.WARNING,""Invalid public key"",e.getMessage());response.append(""The provided public key is invalid or wasn't found in the keystore."");}catch(GeneralSecurityException e){logger.log(Level.SEVERE,null,e);}httpExchange.sendResponseHeaders(200,response.length());try(OutputStream os=httpExchange.getResponseBody()){os.write(response.toString().getBytes());}}"
1908	"@Override public int getResponseCode(){return cc.code;}"
1909	"@Override public boolean apply(Object o){return true;}"
1910	"@Override public boolean onTouch(View v,MotionEvent event){if(!iCanUndo){return false;}if(event.getAction()==MotionEvent.ACTION_DOWN){undoBtn.setImageResource(R.drawable.bt_undo_down_128);}else {if(event.getAction()==MotionEvent.ACTION_UP){undoBtn.setImageResource(R.drawable.bt_undo_128);}}return false;}"
1911	"public void init(){RealmResults realmResults=null;int position=0;Bundle bundle=getIntent().getExtras();int from=bundle.getInt(""from"");if(from==Define.GALLERY_FRAGMENT){mDownloadImageButton.setVisibility(View.GONE);String bucketId=bundle.getString(""bucket_id"");String imageId=bundle.getString(""image_id"");Realm realm=WallpaperApplication.getRealmInstance();realm.beginTransaction();realmResults=realm.where(Image.class).equalTo(""bucketId"",bucketId).findAll();realm.commitTransaction();for(Object object : realmResults){if(object instanceof Image){Image image=(Image)object;if(image.getImageId().equals(imageId)){position=realmResults.indexOf(image);}}}}else {if(from==Define.SEARCH_FRAGMENT){mDownloadImageButton.setVisibility(View.VISIBLE);String link=bundle.getString(""link"");Realm realm=WallpaperApplication.getRealmInstance();realm.beginTransaction();realmResults=realm.where(ImageNaver.class).findAll();realm.commitTransaction();for(Object object : realmResults){if(object instanceof ImageNaver){ImageNaver imageNaver=(ImageNaver)object;if(imageNaver.getLink().equals(link)){position=realmResults.indexOf(imageNaver);}}}}else {finish();}}mAdapter=new DetailPagerAdapter(this,realmResults,from);mViewPager.setAdapter(mAdapter);mViewPager.setCurrentItem(position);}"
1912	"@Override public boolean is(Object... args){Object ttile=args[0];if(ttile instanceof MiniTile){MiniTile miniTile=(MiniTile)ttile;return (miniTile.AreaId().intValue()>0);}else {throw new IllegalArgumentException();}}"
1913	"@Override public void onResponse(JSONArray response){Log.i(TAG,""SaleThruInventory Option : ""+"" ""+response);Log.i(TAG,""response""+""""+response.length());BestInventListview.setVisibility(View.VISIBLE);try{if(response.equals(null)||response==null||response.length()==0&&count==0){Reusable_Functions.hDialog();Toast.makeText(context,""no data found"",Toast.LENGTH_SHORT).show();BestInventListview.removeFooterView(footer);BestInventListview.setTag(""FOOTER_REMOVE"");if(BestInventList.size()==0){BestInventListview.setVisibility(View.GONE);return ;}}else {if(response.length()==limit){Log.e(TAG,""Top eql limit"");for(int i=0;i<response.length();i++){BestInventSizeListDisplay=gson.fromJson(response.get(i).toString(),RunningPromoListDisplay.class);BestInventList.add(BestInventSizeListDisplay);}offsetvalue=offsetvalue+10;top=top+10;Log.e(TAG,""list size is""+BestInventList.size());}else {if(response.length()<limit){Log.e(TAG,""promo /= limit"");for(int i=0;i<response.length();i++){BestInventSizeListDisplay=gson.fromJson(response.get(i).toString(),RunningPromoListDisplay.class);BestInventList.add(BestInventSizeListDisplay);offsetvalue=offsetvalue+response.length();top=top+response.length();}BestInventListview.removeFooterView(footer);BestInventListview.setTag(""FOOTER_REMOVE"");}}}footer.setVisibility(View.GONE);Log.e(TAG,""set adapter start"");if(lazyScroll.equals(""ON"")){bestPerformerInventoryAdapter.notifyDataSetChanged();lazyScroll=""OFF"";}else {bestPerformerInventoryAdapter=new SaleThruInventoryAdapter(BestInventList,context);BestInventListview.setAdapter(bestPerformerInventoryAdapter);}Reusable_Functions.hDialog();}catch(Exception e){BestInventList.clear();bestPerformerInventoryAdapter.notifyDataSetChanged();BestInventListview.setVisibility(View.GONE);Reusable_Functions.hDialog();Toast.makeText(context,""Data failed..."",Toast.LENGTH_SHORT).show();BestInventListview.removeFooterView(footer);BestInventListview.setTag(""FOOTER_REMOVE"");footer.setVisibility(View.GONE);e.printStackTrace();Log.e(TAG,""catch...Error""+e.toString());}}"
1914	"@Override public void onClick(View v){if(!isPaidMember){Toast.makeText(getApplicationContext(),""To view photos get membership !"",Toast.LENGTH_LONG).show();Intent i=new Intent(this,MembershipActivity.class);startActivity(i);}else {Intent i=new Intent(this,FullscreenImageActivity.class);i.putExtra(""customerNo"",clickedID);i.putExtra(""from"",""userprofile"");i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);startActivity(i);}}"
1915	"public void onClick(View v){if(mHotItemType==DrawingPath.DRAWING_PATH_POINT||mHotItemType==DrawingPath.DRAWING_PATH_LINE||mHotItemType==DrawingPath.DRAWING_PATH_AREA){if(mDrawingSurface.moveHotItemToNearestPoint()){mModified=true;}else {Toast.makeText(context,R.string.failed_snap_to_point,Toast.LENGTH_SHORT).show();}}dismissPopup();}"
1916	"void loadGroups(){Disposable d=userRepository.getLocalMe().map(AccountRealm::getId).flatMapObservable(id -> Observable.mergeDelayError(groupRepository.listSubscribedGroups(id),getAllGroupsObservable())).filter(groupRealms -> !groupRealms.isEmpty()).observeOn(AndroidSchedulers.mainThread()).subscribe(groups -> getView().onLoaded(groups),throwable -> getView().onError(throwable));getDisposable().add(d);}"
1917	"private static List<HealthRecord> doHealthCheck(Configuration configuration){ final List<HealthRecord> returnList=new ArrayList<>();for(PwmSetting setting : PwmSetting.values()){if(setting.getSyntax()==PwmSettingSyntax.X509CERT&&!setting.getCategory().hasProfiles()){if(setting!=PwmSetting.LDAP_SERVER_CERTS){ final X509Certificate[] certs=configuration.readSettingAsCertificate(setting);returnList.addAll(doHealthCheck(configuration,setting,null,certs));}}}for(LdapProfile ldapProfile : configuration.getLdapProfiles().values()){ final X509Certificate[] certificates=configuration.getLdapProfiles().get(ldapProfile.getIdentifier()).readSettingAsCertificate(PwmSetting.LDAP_SERVER_CERTS);returnList.addAll(doHealthCheck(configuration,PwmSetting.LDAP_SERVER_CERTS,ldapProfile.getIdentifier(),certificates));}return Collections.unmodifiableList(returnList);}"
1918	"@Override public boolean canPerform(GameSession gs,Agent agent,TileSystem ts,Tile tile){return (tile.id==TileId.GRASS);}"
1919	"@Override public int compare(ThesisProposal arg0,ThesisProposal arg1){if(arg1.getStudentThesisCandidacySet().size()<arg0.getStudentThesisCandidacySet().size()){return -1;}else {return 1;}}"
1920	"public void findTracks(){File file=new File(sdRoot,""Music"");for(File f : file.listFiles()){if(f.getAbsolutePath().endsWith("".mp3"")){tracksUri.add(f.toURI());}Log.d(""Music"",f.getAbsolutePath());}}"
1921	"private void saveUndoState(){String displayPointsPlayer1=pointsViewPlayer1.getText().toString();String displayGamesPlayer1=gamesViewPlayer1.getText().toString();String displaySetsPlayer1=setsViewPlayer1.getText().toString();String displayPointsPlayer2=pointsViewPlayer2.getText().toString();String displayGamesPlayer2=gamesViewPlayer2.getText().toString();String displaySetsPlayer2=setsViewPlayer2.getText().toString();String displayTextMessage=textViewDeuce.getText().toString();currentUndoIndex++;if(currentUndoIndex>=savedState.size()){savedState.add(new UndoRedo(pointsPlayer1,pointsPlayer2,gamesPlayer1,gamesPlayer2,setsPlayer1,setsPlayer2,numberOfSetsForWin,numberOfServeInTieBreak,serveOfPlayer,serveOfPlayerInTieBreak,tieBreak,firstFault,matchWon,tiebreakFinal,winnerPlayer1,acePlayer1,faultPlayer1,doubleFaultPlayer1,forcedErrorPlayer1,unforcedErrorPlayer1,winnerPlayer2,acePlayer2,faultPlayer2,doubleFaultPlayer2,forcedErrorPlayer2,unforcedErrorPlayer2,displayPointsPlayer1,displayGamesPlayer1,displaySetsPlayer1,displayPointsPlayer2,displayGamesPlayer2,displaySetsPlayer2,displayTextMessage));}else {savedState.set(currentUndoIndex,new UndoRedo(pointsPlayer1,pointsPlayer2,gamesPlayer1,gamesPlayer2,setsPlayer1,setsPlayer2,numberOfSetsForWin,numberOfServeInTieBreak,serveOfPlayer,serveOfPlayerInTieBreak,tieBreak,firstFault,matchWon,tiebreakFinal,winnerPlayer1,acePlayer1,faultPlayer1,doubleFaultPlayer1,forcedErrorPlayer1,unforcedErrorPlayer1,winnerPlayer2,acePlayer2,faultPlayer2,doubleFaultPlayer2,forcedErrorPlayer2,unforcedErrorPlayer2,displayPointsPlayer1,displayGamesPlayer1,displaySetsPlayer1,displayPointsPlayer2,displayGamesPlayer2,displaySetsPlayer2,displayTextMessage));}for(int i=savedState.size()-1;i>currentUndoIndex;i--){savedState.remove(i);}}"
1922	"@Override @SideOnly(Side.CLIENT) public int getBrightnessForRender(float partialTicks){BlockPos blockpos=new BlockPos(this.posX,this.posY+this.getEyeHeight(),this.posZ);return this.worldObj.isBlockLoaded(blockpos)?this.worldObj.getCombinedLight(blockpos,0):0;}"
1923	"void addJobsToOrder(Context context,Product product,int orderQuantity,HashMap<String,String> optionsMap,List<ImageSpec> imageSpecList,boolean nullImagesAreBlank,Order order){List<List<ImageSpec>> imageSpecLists=splitImagesIntoJobs(product,imageSpecList);for(List<ImageSpec> jobImageSpecList : imageSpecLists){order.addJob(Job.createPrintJob(product,orderQuantity,optionsMap,jobImageSpecList,nullImagesAreBlank));}}"
1924	"@Override void addToPreparedStatement(BoundStatement bs,int i){bs.setInt(i,this.ttlValue);}"
1925	"@Override public boolean evaluate(Interface entity){return !changedValues.isEmpty();}"
1926	"private void startStream(){if(mBandState!=BandState.CONNECTED&&mBandState!=BandState.PAUSED&&mBandState!=BandState.NOT_WORN){log(""Cannot Call Start Stream from Current State (""+mBandState.toString()+"")"",Log.WARN);}else {try{BandSensorManager bandSensorManager=mBandClient.getSensorManager();if(mBandObject.getSensorsToRecord()==null){log(""No Sensors Selected"",Log.WARN);}else {for(BandSensor sensor : mBandObject.getSensorsToRecord()){switch (sensor){case ACCELEROMETER :BandAccelerometerListener bandAccelerometerListener=new BandAccelerometerListener(mContext,mStorageObject);bandSensorManager.registerAccelerometerEventListener(bandAccelerometerListener,SampleRate.MS128);break;case ALTIMETER :try{BandAltimeterListener bandAltimeterListener=new BandAltimeterListener(mContext,mStorageObject);bandSensorManager.registerAltimeterEventListener(bandAltimeterListener);}catch(InvalidBandVersionException e){log(""Altimeter is only available on the Microsoft Band 2"",Log.WARN);break;}break;case AMBIENT_LIGHT :try{BandAmbientLightListener bandAmbientLightListener=new BandAmbientLightListener(mContext,mStorageObject);bandSensorManager.registerAmbientLightEventListener(bandAmbientLightListener);}catch(InvalidBandVersionException e){log(""Ambient Light is only available on the Microsoft Band 2"",Log.WARN);break;}break;case BAROMETER :try{BandBarometerListener bandBarometerListener=new BandBarometerListener(mContext,mStorageObject);bandSensorManager.registerBarometerEventListener(bandBarometerListener);}catch(InvalidBandVersionException e){log(""Barometer is only available on the Microsoft Band 2"",Log.WARN);break;}break;case CALORIES :BandCaloriesListener bandCaloriesListener=new BandCaloriesListener(mContext,mStorageObject);bandSensorManager.registerCaloriesEventListener(bandCaloriesListener);break;case CONTACT :BandContactListener bandContactListener=new BandContactListener(mContext,mStorageObject);bandSensorManager.registerContactEventListener(bandContactListener);break;case DISTANCE :BandDistanceListener bandDistanceListener=new BandDistanceListener(mContext,mStorageObject);bandSensorManager.registerDistanceEventListener(bandDistanceListener);break;case GSR :try{BandGsrListener bandGsrListener=new BandGsrListener(mContext,mStorageObject);bandSensorManager.registerGsrEventListener(bandGsrListener,GsrSampleRate.MS5000);}catch(InvalidBandVersionException e){log(""GSR is only available on the Microsoft Band 2"",Log.WARN);break;}break;case GYROSCOPE :BandGyroscopeListener bandGyroscopeListener=new BandGyroscopeListener(mContext,mStorageObject);bandSensorManager.registerGyroscopeEventListener(bandGyroscopeListener,SampleRate.MS128);break;case HEART_RATE :BandHeartRateListener bandHeartRateListener=new BandHeartRateListener(mContext,mStorageObject);bandSensorManager.registerHeartRateEventListener(bandHeartRateListener);break;case PEDOMETER :BandPedometerListener bandPedometerListener=new BandPedometerListener(mContext,mStorageObject);bandSensorManager.registerPedometerEventListener(bandPedometerListener);break;case RR_INTERVAL :try{BandRrIntervalListener bandRrIntervalListener=new BandRrIntervalListener(mContext,mStorageObject);bandSensorManager.registerRRIntervalEventListener(bandRrIntervalListener);}catch(InvalidBandVersionException e){log(""RR Interval is only available on the Microsoft Band 2"",Log.WARN);break;}break;case SKIN_TEMPERATURE :BandSkinTemperatureListener bandSkinTemperatureListener=new BandSkinTemperatureListener(mContext,mStorageObject);bandSensorManager.registerSkinTemperatureEventListener(bandSkinTemperatureListener);break;case UV :BandUvListener bandUvListener=new BandUvListener(mContext,mStorageObject);bandSensorManager.registerUVEventListener(bandUvListener);break;default :log(""Invalid Sensor Name (""+sensor+"")"",Log.WARN);break;}}}}catch(BandException e){e.printStackTrace();}finally{updateState(BandState.STREAMING);}}}"
1927	"@Override int getId(){return 0;}"
1928	"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){ViewHolder vh=(ViewHolder)holder;Order order=data.get(position);Order.OrderItem orderItem=order.getOrderItems().get(0);vh.name.setText(order.getShopName());vh.desc.setText(order.getOrderName());vh.state.setText(parseState(order.getOrderState()));vh.price.setText(""? ""+String.format(""%.2f"",Utils.tryParse(orderItem.getPrice(),0.0)));vh.amount.setText(""? ""+orderItem.getAmount());String url=AmbApi.END_POINT+order.getOrderThumbnail();vh.img.setImageURI(Uri.parse(url));}"
1929	"private void printStandard(PrintWriter out){out.println(""<h1> ""+getTitle()+""</h1>"");out.println(""<p>Select best candidate patient series  provides the business rules to  be applied to  the scored candidate patient series which will result in the best patient series for the patient.</p>"");out.print(""<h4> ""+dataModel.getPatientSeries().getTrackedAntigenSeries().getSeriesName()+"" </h4>"");}"
1930	"@Override public void execute(IScope scp,IEnv env) throws CoreException{List<Conjunction> conjs=new ArrayList<>(disjunctions.size());for(Pair<List<Statement>,Expression> conj : disjunctions){conjs.add(new Conjunction(scp.getCore(),scp,((Item.ArithItem)conj.second.evaluate(scp,env)).l.known_term,conj.first));}scp.getCore().newDisjunction(env,new Disjunction(scp.getCore(),scp,conjs));}"
1931	"public Collection<ImageData> getImages(SecurityContext ctx,Collection<Long> ids,ParametersI params) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,params);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
1932	"@Override public void actionPerformed(ActionEvent e){if(buildingBool==true){remain=""""+(((finishTime-Board.currtime)/1000)+1);}repaint();}"
1933	"public void writeJSON(Custom_Shape shape) throws IOException{System.out.println(gson.toJson(shape));gson.toJson(shape,writer);FilePacker.createZip(jnote_fileName,dataFiles);}"
1934	"private ElementModel copy(float px,float py,ElementModel source){ElementModel el=new ElementModel(px,py,source.getWidth(),source.getHeight(),id+"" ""+source.getName());el.setId(id++);el.setColor(source.getColor());el.setImage(source.getImage());return el;}"
1935	"@Override public void onClick(View v){startActivity(new Intent(this,RelativeTopActivity.class));}"
1936	"@Override public boolean isCellEditable(int r,int c){if(c==ALLOCATEBUTTON_COLUMN){return (true);}return (false);}"
1937	"private void setupMenus(){JMenuBar menuBar=new JMenuBar();setJMenuBar(menuBar);JMenu mnFile=new JMenu(""File"");menuBar.add(mnFile);JMenuItem mntmSave=new JMenuItem(""Save"");mntmSave.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent arg0){    doSave();  }});mnFile.add(mntmSave);JMenuItem mntmClose=new JMenuItem(""Close"");mntmClose.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent arg0){    cancel();  }});mnFile.add(mntmClose);JMenu mnView=new JMenu(""View"");menuBar.add(mnView);JMenuItem mntmMinimizeAll=new JMenuItem(""Minimize All"");mntmMinimizeAll.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent arg0){    minimizeAll();  }});mnView.add(mntmMinimizeAll);}"
1938	"@Override public void onClick(View v){m_GameEngine.geming(true);}"
1939	"private void invalidInput(String email,String password){if(!isValidEmail(email)){Toast.makeText(getApplicationContext(),R.string.invalid_email,Toast.LENGTH_SHORT).show();}else {if(!isValidEmail(password)){Toast.makeText(getApplicationContext(),R.string.invalid_password,Toast.LENGTH_SHORT).show();}else {Toast.makeText(getApplicationContext(),R.string.unknown_error,Toast.LENGTH_SHORT).show();}}}"
1940	"private void cargarAlumnos(){ArrayList<Alumno> alumnos=(ArrayList<Alumno>)(new DAO(getActivity())).getAllAlumnos();lstAlumnos.setAdapter(new ListaAlumnosAdapter(getActivity(),alumnos));}"
1941	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
1942	"@Override public void onClick(View v){mCurrentIndex=(mCurrentIndex+1)%mQuestionBank.length;updateQuestion();}"
1943	"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){task.setShowed(isChecked);Intent returnIntent=new Intent();returnIntent.putExtra(""EDITED_TASK"",task);setResult(2,returnIntent);}"
1944	"@Override public int hashCode(){return Collections.hash(this);}"
1945	"@Override public int hashCode(){return partition.isSetValues()?partition.getValues().hashCode():0;}"
1946	"public int compare(Product one,Product two){if(one.getDate().before(two.getDate())){return 1;}else {return -1;}}"
1947	"@Override public void close(){}"
1948	"public boolean trapOpponent(Battle b,ActivePokemon escaper,ActivePokemon trapper){return !escaper.isLevitating(b)&&!escaper.isType(b,Type.GHOST);}"
1949	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
1950	"@Override public void initializeUI(UIBuilder builder) throws Exception{Map<Object,Object> attributeMap=builder.getUIContext().getAttributeMap();attributeMap.remove(""navigationResult"");Project project=getSelectedProject(builder.getUIContext());JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);completer=new RouteBuilderEndpointsCompleter(facet);endpoints.setValueChoices(completer.getEndpointUris());builder.add(endpoints);}"
1951	"public static ResourceTypeEnum getResourceType(VirtualPool.Type cosType){if(VirtualPool.Type.block==cosType){return ResourceTypeEnum.BLOCK_VPOOL;}else {if(VirtualPool.Type.file==cosType){return ResourceTypeEnum.FILE_VPOOL;}else {return ResourceTypeEnum.BLOCK_VPOOL;}}}"
1952	"@Override public void changed(ChangeEvent event,Actor actor){grid.physicsMode=-1;}"
1953	"@Override public boolean canBeUsedAs(EDataType type){return true;}"
1954	"@Override public View getView(int position,View convertView,ViewGroup parent){LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View rowView=inflater.inflate(R.layout.checkout_listview_row,parent,false);TextView productTextView=(TextView)rowView.findViewById(R.id.checkout_listview_product);TextView quantityTextView=(TextView)rowView.findViewById(R.id.checkout_listview_quantity);TextView subtotalTextView=(TextView)rowView.findViewById(R.id.checkout_listview_subtotal);String productName=textFormatter.firstCharacterToUpper(products.get(position).getName());String productSubtotal=Double.toString(Double.valueOf(products.get(position).getSubtotal()));String productQuantity=Integer.toString(products.get(position).getQuantity());String textColor=textFormatter.getHexColorFromText(productName);productTextView.setText(productName);subtotalTextView.setText(textFormatter.setMoneyFormatDisplay(productSubtotal));quantityTextView.setText(productQuantity);textFormatter.setViewTextColor(textColor,productTextView);textFormatter.setViewTextColor(textColor,quantityTextView);textFormatter.setViewTextColor(textColor,subtotalTextView);return rowView;}"
1955	"@Override public boolean onSourceInitInner(StringBuilder builder,String indent){boolean run=false;for(Command command : editable){if(command.onSourceInitInner(builder,indent)){builder.append("";\n"");run=true;}}return run;}"
1956	"protected boolean shouldFilter(Row<String,CompositeColumnName> row){return row.getColumns().isEmpty();}"
1957	"@Override public boolean shouldPerformAction(){if(!clientgui.getClient().isMyTurn()||clientgui.bv.getChatterBoxActive()||display.isIgnoringEvents()||!display.isVisible()){return false;}else {return true;}}"
1958	"@Override public void onClick(View v){mNoIce.setBackgroundResource(0);mIce.setBackgroundResource(R.drawable.gradient_border);mIceChosen=true;}"
1959	"@Override public void onReceive(Context context,Intent intent){switch (getResultCode()){case Activity.RESULT_OK :if(mSendCallBack!=null){successCount++;if(successCount>=smsCount){mSendCallBack.onSuccessSending(tmpSMS);unregisterSendWatcher();}}break;case SmsManager.RESULT_ERROR_GENERIC_FAILURE :if(mSendCallBack!=null){mSendCallBack.onGenericFail(tmpSMS);unregisterSendWatcher();}break;case SmsManager.RESULT_ERROR_RADIO_OFF :if(mSendCallBack!=null){mSendCallBack.onRadioOffFail(tmpSMS);unregisterSendWatcher();}break;case SmsManager.RESULT_ERROR_NULL_PDU :if(mSendCallBack!=null){mSendCallBack.onBadFormedSmsFail(tmpSMS);unregisterSendWatcher();}break;}}"
1960	"public void run(){Log.i(""ServerMasterThread"",""run()"");while(mServerSocket!=null){try{Log.i(TAG,""run() - open RequestThread"");Socket socket=mServerSocket.accept();socket.setSoTimeout(1000);ServerSlaveThread slaveThread=new ServerSlaveThread(socket);slaveThread.run();}catch(SocketException e){Log.e(TAG,""socket exception, probably closed."",e);}catch(IOException e){Log.e(TAG,""io excepted."",e);}}}"
1961	"@EventHandler public void onPlayerDeath(PlayerDeathEvent event){Player p=event.getEntity();if(p.getLastDamageCause().equals(DamageCause.FALL)){u.died(p.getDisplayName());}}"
1962	"@Override public boolean isOpen(){return mIsOpen;}"
1963	"@Override public Optional<IOntologyManager> loadReferenceOntology(){if(getLibrary().getReferenceOntology()!=null){LOGGER.info(""Loading reference ontology..."");Optional<IOntologyManager> optRefOntManager=getOntologyManager(getLibrary().getReferenceOntology());if(optRefOntManager.isPresent()){LOGGER.info(""Reference ontology loaded: '""+optRefOntManager.get().getOntology().getIri()+""'."");}else {LOGGER.error(""Reference ontology couldn't be loaded."");}return optRefOntManager;}else {LOGGER.info(""No reference ontology set."");return Optional.empty();}}"
1964	"public void findPath(Environment observation){ final int marioHeight=MarioMethods.getMarioHeightFromMarioMode(observation.getMarioMode());pathCreator.blokingFindPath(observation,world.getMarioNode(observation),world.getGoalNodes(0),marioController.getXVelocity(),marioHeight);}"
1965	"public Flight buildFlight(String olan) throws InvalidOLANException{if(olan==null){throw new InvalidOLANException();}if(olan.length()>=1&&olan.substring(0,1).equals("" "")){olan=olan.substring(1);}String[] figures=olan.trim().toLowerCase().split("" "");Manoeuvre[] manoeuvres=new Manoeuvre[figures.length];for(int i=0;i<figures.length;i++){Matcher matcher=olanPattern.matcher(figures[i]);if(matcher.matches()&&manoeuvreCatalogue.get(matcher.group(2))!=null){manoeuvres[i]=new Manoeuvre(manoeuvreCatalogue.get(matcher.group(2)));manoeuvres[i].addEntryLength(findOccurrences(""+"",matcher.group(1)));manoeuvres[i].addExitLength(findOccurrences(""+"",matcher.group(3)));}else {throw new InvalidOLANException();}}return new Flight(manoeuvres);}"
1966	"@Override public void onSaveInstanceState(Bundle outState){super.onSaveInstanceState(outState);outState.putString(KEY_PENDING_ACTION,pendingButtonPress);}"
1967	"@Override public int maxValue(){return 0;}"
1968	"public Setting<Integer> userOrientation(){return new IntegerSetting(""userOrientation"");}"
1969	"public static void main(String[] args){System.out.pintln(""Hello World"");}"
1970	"private void resolveRecursive(AttributeType attributeType,Set<String> processed,List<Throwable> errors){String superiorOid=attributeType.getSuperiorOid();AttributeType superior=null;if(superiorOid!=null){try{superior=attributeTypeRegistry.lookup(superiorOid);}catch(LdapException ne){if(!processed.contains(superiorOid)){errors.add(ne);}}if(superior!=null){if(!processed.contains(superiorOid)){resolveRecursive(superior,processed,errors);processed.add(attributeType.getOid());}else {Throwable error=new LdapSchemaViolationException(ResultCodeEnum.OTHER,I18n.err(I18n.ERR_04297,attributeType.getOid()));errors.add(error);return ;}}}String syntaxOid=attributeType.getSyntaxOid();if(syntaxOid!=null){try{ldapSyntaxRegistry.lookup(syntaxOid);}catch(LdapException ne){errors.add(ne);}}else {if(superior==null){Throwable error=new LdapSchemaViolationException(ResultCodeEnum.INVALID_ATTRIBUTE_SYNTAX,I18n.err(I18n.ERR_04298,attributeType.getOid()));errors.add(error);}}String equalityOid=attributeType.getEqualityOid();if(equalityOid!=null){try{matchingRuleRegistry.lookup(equalityOid);}catch(LdapException ne){errors.add(ne);}}String orderingOid=attributeType.getOrderingOid();if(orderingOid!=null){try{matchingRuleRegistry.lookup(orderingOid);}catch(LdapException ne){errors.add(ne);}}String substringOid=attributeType.getSubstringOid();if(substringOid!=null){try{matchingRuleRegistry.lookup(substringOid);}catch(LdapException ne){errors.add(ne);}}}"
1971	"@Override protected void onPostExecute(String result){progressDialog.dismiss();if(!isCancelled()){if(result.equals(GlobalParams.TRUE)&&enStores!=null&&enStores.getStores().size()>0){arrEnStores.addAll(enStores.getStores());listVisitAdapter=new VisitAdapter(this,arrEnStores);listVisitAdapter.setOnItemClickHandler(onItemClickHandler);if(checkFilter){listVisitAdapter.getFilter().filter(tempFilter);edtFilter.setText(tempFilter);linFilter.setVisibility(View.VISIBLE);lvCustomer.setVisibility(View.VISIBLE);}lvCustomer.setAdapter(listVisitAdapter);imgBackToTop.setVisibility(View.VISIBLE);lvCustomer.setOnScrollListener(new OnScrollListener(){  @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){    int threshold=1;    int count=lvCustomer.getCount();    if (enStores != null && enStores.getStores().size() > 0) {      if (scrollState == SCROLL_STATE_IDLE) {        if (lvCustomer.getLastVisiblePosition() >= count - threshold) {          if (checkFilter) {            tempFilter=edtFilter.getEditableText().toString();            edtFilter.setText("""");            linFilter.setVisibility(View.GONE);            lvCustomer.setVisibility(View.GONE);            imgBackToTop.setVisibility(View.GONE);          }          qtyPage++;          getStores=new GetStores(String.valueOf(qtyPage),String.valueOf(qtyPerPage));          getStores.execute();        }      }    }  }  @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){  }});}else {if(checkFilter){listVisitAdapter.getFilter().filter(tempFilter);edtFilter.setText(tempFilter);linFilter.setVisibility(View.VISIBLE);lvCustomer.setVisibility(View.VISIBLE);imgBackToTop.setVisibility(View.VISIBLE);}}}}"
1972	"private void callHomeScreen(){finish();}"
1973	"public static void init(){registerEntityRender(EntityEIH.class,new RenderEIH());registerEntityRender(EntityTropiCreeper.class,new RenderTropiCreeper());registerEntityRender(EntityIguana.class,new RenderIguana());registerEntityRender(EntityTreeFrogBase.class,new RenderTreeFrog());registerEntityRender(EntityTropiSkeleton.class,new RenderTropiSkeleton());registerEntityRender(EntityVMonkey.class,new RenderVMonkey());registerEntityRender(EntityMarlin.class,new RenderMarlin(new ModelMarlin(),0.25));registerEntityRender(EntityLavaBall.class,new RenderLavaBall());registerEntityRender(EntitySeahorse.class,new RenderSeahorse(new ModelSeahorse(),0.25));registerEntityRender(EntityFailgull.class,new RenderFailgull(0.25));registerEntityRender(EntityChair.class,new RenderChair());registerEntityRender(EntityUmbrella.class,new RenderUmbrella());registerEntityRender(EntityCoconutGrenade.class,new RenderSnowball(Minecraft.getMinecraft().getRenderManager(),ItemRegistry.coconutBomb,Minecraft.getMinecraft().getRenderItem()));registerEntityRender(EntityTropicalFish.class,new RenderTropicalFish(new ModelFish(),0.25));registerEntityRender(EntityManOWar.class,new RenderManOWar(new ModelManOWar(32,20,true),0.35));registerEntityRender(EntityEagleRay.class,new RenderEagleRay());registerEntityRender(EntitySeaUrchin.class,new RenderSeaUrchin());registerEntityRender(EntitySeaUrchinEgg.class,new RenderEchinodermEgg());registerEntityRender(EntityStarfish.class,new RenderStarfish());registerEntityRender(EntityStarfishEgg.class,new RenderEchinodermEgg());registerEntityRender(EntityBambooItemFrame.class,new RenderBambooItemFrame());registerEntityRender(EntityWallItem.class,new RenderWallItem());registerEntityRender(EntityKoaHunter.class,new RenderKoaMan(Minecraft.getMinecraft().getRenderManager(),new ModelKoaMan(),0.5));scubaGearModel=new ModelScubaGear(0);}"
1974	"@Override public void issuesLoaded(Issue[] issues){mAdapter.loadIssues(issues);mRefresher.setRefreshing(false);}"
1975	"public List<Picture> getPeekPictures(){List<Picture> pictureList=new ArrayList<>();SQLiteDatabase db=this.getWritableDatabase();String selectQuery=SELECT_ALL_FROM+PeekTable.TABLE_NAME+ORDER_BY+PeekTable.COLUMN_NAME_DATE_POSTED+DESCENDING;Cursor c=db.rawQuery(selectQuery,null);if(c.moveToFirst()){do {pictureList.add(new Picture(c.getString(c.getColumnIndex(PeekTable.COLUMN_NAME_PICTURE_ID)),c.getString(c.getColumnIndex(PeekTable.COLUMN_NAME_DATE_POSTED)),null,c.getString(c.getColumnIndex(PeekTable.COLUMN_NAME_THUMBNAIL_URL)),c.getString(c.getColumnIndex(PeekTable.COLUMN_NAME_FULL_URL)),c.getInt(c.getColumnIndex(PeekTable.COLUMN_NAME_VIEWS)),c.getInt(c.getColumnIndex(PeekTable.COLUMN_NAME_LIKES))));} while(c.moveToNext());}c.close();db.close();return pictureList;}"
1976	"@Override public void set(Boolean val) throws InvalidConfigValueException,NodeNeedRestartException{synchronized(this){autoChangeDatabaseEncryption=val;}}"
1977	"@Override int resultIndex(int higherIndex){return higherIndex-1;}"
1978	"public BarEntry getBarEnptyFromDay(String day){List<TimeLineBean> timeLineBeans=TimeLineDao.getDatasFromDay(day);float[] types=new float[typeList.size()+2];long recordTime=0;long formerlyTime=0;long residueTime=0;long otherTime=0;for(TimeLineBean bean : timeLineBeans){types[bean.typeId-1]+=bean.getDuration();recordTime+=bean.getDuration();}for(int i=0;i<types.length;i++){ALog.e(TAG,""types [""+i+""] -->""+types[i]);if(types[i]==0){types[i]=-1;}}String today=DateUtils.formatYYYYMMDD(System.currentTimeMillis());if(DateUtils.isLarge(today,day)){formerlyTime=ONE_DAY_MILLIS;}else {if(today.equals(day)){formerlyTime=System.currentTimeMillis()-DateUtils.getYesterdayMaxTimeMillis();}else {formerlyTime=0;}}residueTime=ONE_DAY_MILLIS-formerlyTime;otherTime=formerlyTime-recordTime;types[typeList.size()]=residueTime;types[typeList.size()+1]=otherTime;return new BarEntry(count++,types);}"
1979	"public void run(){executeManualTest(BurpExtender.TYPE_RAW,(String)(typeManualTest.getSelectedItem()));}"
1980	"public String toMessage(){return String.valueOf(degrees)+""$""+direction;}"
1981	"@Override public boolean apply(Object o){return true;}"
1982	"@Asset(""exportVolumeForComputePortGroups"") @AssetDependencies({""blockVirtualArray"",""blockVirtualPool"",""project""}) public List<AssetOption> getExportVolumeForComputePortGroups(AssetOptionsContext ctx,URI vArrayId,URI vpoolId,URI projectId){ final ViPRCoreClient client=api(ctx);List<AssetOption> options=Lists.newArrayList();SimpleValueRep value=client.customConfigs().getCustomConfigTypeValue(VMAX_PORT_GROUP_ENABLED,VMAX);if(value.getValue().equalsIgnoreCase(""true"")){StoragePortGroupRestRepList portGroups=client.varrays().getStoragePortGroups(vArrayId,null,null,vpoolId);return createPortGroupOptions(portGroups.getStoragePortGroups());}return options;}"
1983	"@Override public void success(DoctorClinicQueue queue,Response response){if(queue!=null&&queue.doctor!=null&&queue.clinic!=null){model=queue;doctorName.setText(model.doctor.getName());doctorSpeciality.setText(model.doctor.getSpeciality());doctorId.setText(model.doctor.getId().toString());clinicName.setText(model.clinic.clinicName);totalCount.setText(queue.numberOfAppointments.toString());bookOnline.setText(queue.queueStatus.intValue()==0?""START"":""Stop"");location.setText(model.clinic.address);if(model.clinic.mobile!=null&&model.clinic.location!=null){clinicContact.setText("" +""+model.clinic.location.toString()+"" ""+model.clinic.mobile.toString());}String imageUrl=model.doctor.getImageUrl();if(imageUrl!=null&&imageUrl.trim().length()>0){new ImageLoadTask(imageUrl,viewImage).execute();}appointmentsBtn.callOnClick();}}"
1984	"@Override public boolean removeChild(String fullPath){RedisCommands<String,String> rediscx=redis.connect().sync();String parent=""parent:""+FilePathUtils.getParentFullPath(fullPath);String child=FilePathUtils.getFileName(fullPath);return rediscx.srem(parent,child)>0;}"
1985	"public boolean isEmpty(){Cursor cursor=database.rawQuery(""Select Count(*) FROM ""+MySQLiteHelper.TABLE_EVENTS,null);cursor.moveToFirst();if(cursor.getInt(0)>0){cursor.close();return false;}cursor.close();return true;}"
1986	"@Override public void onTMMergeProgress(TMMergeProgressEvent event){if(!event.getEditorClientId().equals(identity.getEditorClientId())){return ;}display.showProcessing(messages.mergeProgressPercentage(event.getPercentDisplay()));}"
1987	"public void onClick(DialogInterface dialog,int which){}"
1988	"public synchronized MuJavaInput computateFeedback(DarwinistInput input){ final String oldFilename=input.getFilename(); final String seqFileName=oldFilename.replaceFirst(oldFilename.split(""/"")[oldFilename.split(""/"").length-1],""sequential/""+oldFilename.split(""/"")[oldFilename.split(""/"").length-1]);try{input.setSeqFilesPrefix(seqFileName);String content=FileUtils.readFile(input.getFilename());FileUtils.writeToFile(input.getSeqFilesPrefix(),content);StrykerJavaFileInstrumenter.insertMutIDs(input);content=FileUtils.readFile(input.getSeqFilesPrefix());String newContent="""";String lines[]=content.split(""\n"");for(int i=0;i<lines.length;++i){if(!lines[i].contains(""//@decreasing"")&&!lines[i].contains(""/*@decreasing"")){newContent+=lines[i]+""\n"";}}FileUtils.writeToFile(input.getSeqFilesPrefix(),newContent);LoopUnrollTransformation.javaUnroll(TacoConfigurator.getInstance().getDynAlloyToAlloyLoopUnroll(),input.getMethod(),input.getSeqFilesPrefix(),input.getSeqFilesPrefix());}catch(IOException e){log.error(""Unknown error while unrolling code for variablization"");e.printStackTrace();}VariablizationData vdata=VariablizationData.preprocessVariabilization2(input);boolean unvariablizable=!vdata.isVariablizable();input.setSeqVariablizedFilename(input.getSeqFilesPrefix());TacoMain tacoMain=getTacoMainWithFixedInput(input.getSeqMethodInput());if(!unvariablizable){try{variablize(tacoMain,vdata,input);}catch(IOException e){e.printStackTrace();}}MuJavaInput mujavainput=new MuJavaInput(input.getFilename(),input.getMethod(),input.getMutantsToApply(),new AtomicInteger(0),input.getConfigurationFile(),input.getOverridingProperties(),input.getOriginalFilename(),input.getSyncObject());mujavainput.setOldFilename(input.getOldFilename());MuJavaFeedback feedback=input.getFeedback();if(unvariablizable||vdata.getReachedUnvariablizableExpression()){feedback.setGetSibling(true);if(vdata.isLastVariablizedMutIDRight()!=null){feedback.setMutateRight(vdata.isLastVariablizedMutIDRight());}else {feedback.setMutateRight(true);}if(vdata.getLastVariablizedMutID()!=null){feedback.setSkipUntilMutID(vdata.getLastVariablizedMutID()-1);}else {feedback.setSkipUntilMutID(input.getFeedback().getMutableLines().size()-1);}feedback.setUNSAT(true);if(MuJavaController.fatherizationPruningOn){if(vdata.isStillFatherable()!=null){feedback.setFatherable(vdata.isStillFatherable());}else {feedback.setFatherable(true);}}else {feedback.setFatherable(true);}}else {if(unvariablizable){feedback.setFatherable(false);feedback.setGetSibling(true);feedback.setSkipUntilMutID(null);feedback.setMutateRight(true);}else {if(vdata.isUncompilable()){feedback.setFatherable(true);feedback.setGetSibling(true);feedback.setSkipUntilMutID(null);feedback.setMutateRight(true);}else {feedback.setGetSibling(true);feedback.setMutateRight(vdata.isLastVariablizedMutIDRight());feedback.setSkipUntilMutID(vdata.getLastVariablizedMutID()-1);feedback.setUNSAT(vdata.isUNSAT());if(MuJavaController.fatherizationPruningOn){feedback.setFatherable(vdata.isStillFatherable());}else {feedback.setFatherable(true);}}}}mujavainput.setMuJavaFeedback(feedback);return mujavainput;}"
1989	"@Override public boolean isItemValid(ItemStack stack){return stack!=null&&stack.getItem()==ItemLoader.itemBattery&&super.isItemValid(stack);}"
1990	"@Override public boolean hasFingerprintRegistered(){return fingerprintManager.hasEnrolledFingerprints();}"
1991	"public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException{ final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit(); final ModuleLoader moduleLoader=Module.getBootModuleLoader(); final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,PICKETBOX_ID,false,false,false));}"
1992	"@Override public void clicked(){if(!isDialogOpen.get()){movingFlaps=playServiceFlapIsOut;Main.mainController.openFB();}}"
1993	"@Override public LockClient tryLock(){while(true){synchronized(sync){if(sync.tryAcquireShared(clientIndex)>0){return null;}LockClient lockHolder=sync.getLockHolder();if(lockHolder!=null){return lockHolder;}}Thread.yield();}}"
1994	"@Override public void onUnexpectedError(Exception e){Log.d(LOG_TAG,""backPaginate onUnexpectedError"");mIsBackPaginating=false;if(null!=callback){callback.onUnexpectedError(e);}else {super.onUnexpectedError(e);}}"
1995	"public void resetStatemachine(String id){IStatemachine[] statemachines=statemachineCollection.getStatemachineSet(id);for(IStatemachine statemachine : statemachines){statemachine.reset();}}"
1996	"@Override public boolean visit(InfixExpression node){Integer operatorPrecedence=OPERATOR_PRECEDENCE.get(node.getOperator());if(operatorPrecedence==null){return true;}ASTNode parent=node.getParent();if((parent instanceof InfixExpression)&&samePrecedence(node,(InfixExpression)parent)){return true;}findTokensToWrap(node,0);this.wrapParentIndex=this.wrapIndexes.remove(0);this.wrapGroupEnd=this.tm.lastIndexIn(node,-1);if((this.options.alignment_for_binary_expression&Alignment.M_INDENT_ON_COLUMN)!=0){this.wrapParentIndex--;}for(int i=this.wrapParentIndex;i>=0;i--){if(!this.tm.get(i).isComment()){this.wrapParentIndex=i;break;}}handleWrap(this.options.alignment_for_binary_expression,node);return true;}"
1997	"public int getId(){return collectionId;}"
1998	"@Override public void onConnectionFailed(ConnectionResult connectionResult){if(md.isShowing()){((TextView)md.getCustomView().findViewById(R.id.message)).setText(""Error connecting: ""+connectionResult.toString());}Log.d(TAG,""oCF ""+connectionResult.toString());if(connectionResult.hasResolution()){try{connectionResult.startResolutionForResult(this,RESOLVE_CONNECTION_REQUEST_CODE);}catch(IntentSender.SendIntentException e){}}else {GooglePlayServicesUtil.getErrorDialog(connectionResult.getErrorCode(),this,0).show();}}"
1999	"@Override public int compare(String o1,String o2){if(o1.equals("""")){return -1;}else {if(o2.equals("""")){return 1;}}o1=(getMapping().get(o1)!=null)?(getMapping().get(o1)):(o1);o2=(getMapping().get(o2)!=null)?(getMapping().get(o2)):(o2);return o1.length()-o2.length();}"
2000	"public void onClick(DialogInterface dialog,int whichButton){}"
2001	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){this.inflater=inflater;view=inflater.inflate(R.layout.fragment_dashboard,container,false);uurView=(LinearLayout)view.findViewById(R.id.volgende_uur_container);uurAdapter=new ResourceAdapter();cijferView=(LinearLayout)view.findViewById(R.id.laatste_cijfers_container);cijferAdapter=new ResourceAdapter();application=(MagisterApp)getActivity().getApplication();data=new DataFixer(application.getApi(),getContext());mSwipeRefreshLayout=(SwipeRefreshLayout)view.findViewById(R.id.dasboard_swipeview);mSwipeRefreshLayout.setColorSchemeResources(R.color.primary);mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){  @Override public void onRefresh(){    Log.i(""Refresh"",""Refresh gesture made, refreshing"");    refreshDashboard();  }});refreshDashboard();return view;}"
2002	"public void showRepeatWords(Boolean visible){if(visible){repeatWords.setVisibility(VISIBLE);}else {repeatWords.setVisibility(GONE);}}"
2003	"@Override public void onReceive(Context ctx,Intent intent){batLevel=intent.getIntExtra(BatteryManager.EXTRA_LEVEL,0);setBatLevel();}"
2004	"@Override public void run(){try{while(!isClosing){if(!isChanged&&textArea.getDocument().getLength()!=0){isPainted=false;}for(int i=0;i<7;){isChanged=false;Thread.sleep(100);i++;if(isChanged){i=0;}}}}catch(InterruptedException e){e.printStackTrace();}}"
2005	"public int getTypeTag(){return typeTag;}"
2006	"private WifiConfiguration isExsits(String ssid){List<WifiConfiguration> existingConfigs=mWifiManager.getConfiguredNetworks();for(WifiConfiguration existingConfig : existingConfigs){if(existingConfig.SSID.equals(ssid)){return existingConfig;}}return null;}"
2007	"@Override public void onClick(){if(cback!=null){cback.onEnd(true);}box.hide();}"
2008	"@Override public void onClick(DialogInterface dialog,int which){ final Task task=m_adapter.getItem(pos);new AsyncTask<Object,Void,Boolean>(){  protected void onPreExecute(){    m_ProgressDialog=showProgressDialog(""Deleting"");  }  @Override protected Boolean doInBackground(  Object... params){    try {      taskBag.delete((Task)params[0]);      return true;    } catch (    Exception e) {      Log.e(TAG,e.getMessage(),e);      return false;    }  }  protected void onPostExecute(  Boolean result){    TodoTxtTouch.currentActivityPointer.dismissProgressDialog(true);    if (result) {      Util.showToastLong(TodoTxtTouch.this,""Deleted task "" + task.inFileFormat());    } else {      Util.showToastLong(TodoTxtTouch.this,""Could not delete task "" + task.inFileFormat());    }  }}.execute(task);}"
2009	"private Map<String,NASServer> getNASServer(StorageSystem storageSystem,List<IsilonAccessZone> accessZones){NASServer nasServer=null;Map<String,NASServer> accessZonesMap=new HashMap<String,NASServer>();if(accessZones!=null&&!accessZones.isEmpty()){for(IsilonAccessZone isilonAccessZone : accessZones){if(isilonAccessZone.isSystem()==false){nasServer=findvNasByNativeId(storageSystem,isilonAccessZone.getZone_id().toString());accessZonesMap.put(isilonAccessZone.getPath()+""/"",nasServer);}else {nasServer=findPhysicalNasByNativeId(storageSystem,isilonAccessZone.getZone_id().toString());accessZonesMap.put(isilonAccessZone.getPath()+""/"",nasServer);}}}return accessZonesMap;}"
2010	"private JSONArray InsertPurchaseInfo(Connection conn,JSONArray array) throws JSONException{JSONArray occpupylist=new JSONArray();Date date=new Date();java.sql.Timestamp sqlDate=new java.sql.Timestamp(date.getTime());Boolean result=DBController.ExecuteMultipleInsert(conn,""data_purchaseinfo"",array,sqlDate);if(result){return occpupylist;}else {return null;}}"
2011	"public void clear(){if(!textField.isDisposed()){textField.getDisplay().syncExec(new Runnable(){  public void run(){    textField.setText("""");    textField.setStyleRange(null);  }});}}"
2012	"private BoolExpr equalIds(SymbolicRecord best,SymbolicRecord vars,Configuration conf,Protocol proto,LogicalEdge e){BoolExpr equalId;if(vars.getRouterId()==null){if(best.getRouterId()==null||e==null){equalId=True();}else {Long peerId=_logicalGraph.findRouterId(e,proto);equalId=Eq(best.getRouterId(),Int(peerId));}}else {equalId=Eq(best.getRouterId(),vars.getRouterId());}return equalId;}"
2013	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
2014	"public void showFolderSelectorDialog(File_POJO[] files){View v=LayoutInflater.from(this).inflate(R.layout.file_operation_dialog,(ViewGroup)findViewById(R.id.root_view),false);RecyclerView recyclerView=(RecyclerView)v.findViewById(R.id.recyclerView);recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false));recyclerView.addItemDecoration(new GridMarginDecoration((int)getResources().getDimension(R.dimen.album_grid_spacing_big))); final RecyclerViewAdapter recyclerViewAdapter=new RecyclerViewAdapter();recyclerView.setAdapter(recyclerViewAdapter);String title=(action.equals(ACTION_COPY)?getString(R.string.copy):getString(R.string.move))+"" ""+files.length+(files.length>1?getString(R.string.items):getString(R.string.item))+getString(R.string.to)+"":"";dialog=new AlertDialog.Builder(this).setTitle(title).setView(v).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialogInterface,  int i){    String path=recyclerViewAdapter.getSelectedPath();    if (path != null) {      if (path.equals(CREATE_NEW_FOLDER)) {        creatingNewFolder=true;        createNewFolder(files);      } else {        executeAction(files,path);      }    }  }}).setNegativeButton(R.string.cancel,null).setOnDismissListener(new DialogInterface.OnDismissListener(){  @Override public void onDismiss(  DialogInterface dialogInterface){    onDialogDismiss();  }}).create();dialog.show();}"
2015	"@Override public void onPostExecute(Boolean result){if(result&&currentTrack!=null&&currentTrack.getAlbum().equals(albumName)&&currentTrack.getCreator().equals(artistName)){if(art!=null){mArtwork=art;}else {mArtwork=BitmapFactory.decodeResource(getResources(),R.drawable.no_artwork);}Notification notification=null;try{notification=buildNotification(mArtwork);nm.notify(NOTIFY_ID,notification);}catch(java.lang.RuntimeException e){notification=new Notification(R.drawable.as_statusbar,getString(R.string.playerservice_streaming_ticker_text,currentTrack.getTitle(),currentTrack.getCreator()),System.currentTimeMillis());PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Player.class),0);String info=currentTrack.getTitle()+"" - ""+currentTrack.getCreator();notification.setLatestEventInfo(this,currentStation.getName(),info,contentIntent);notification.flags|=Notification.FLAG_ONGOING_EVENT;nm.notify(NOTIFY_ID,notification);}mRemoteControlClientCompat.editMetadata(true).putString(MediaMetadataRetriever.METADATA_KEY_ARTIST,currentTrack.getCreator()).putString(MediaMetadataRetriever.METADATA_KEY_TITLE,currentTrack.getTitle()).putLong(MediaMetadataRetriever.METADATA_KEY_DURATION,currentTrack.getDuration()).putBitmap(RemoteControlClientCompat.MetadataEditorCompat.METADATA_KEY_ARTWORK,mArtwork).apply();logger.info(""Album art updated"");notifyChange(ARTWORK_AVAILABLE);}}"
2016	"@Override public int getVerticalDirectionAsInt(){return -1;}"
2017	"public void onClick(DialogInterface dialog,int which){Log.i(""yaw"",""inside form entry cancel button"");}"
2018	"@Override public void run(){dw.watch(16,Byte.valueOf((byte)(p.isSneaking()?1:0)));broadcastPacketDisguised(p,PacketType.Play.Server.ENTITY_METADATA,new PacketPlayOutEntityMetadata(entityId,dw,true));}"
2019	"public String processAccessionForSCSBXml(Set<AccessionResponse> accessionResponsesList,String bibDataResponse,List<Map<String,String>> responseMapList,String owningInstitution,List<ReportDataEntity> reportDataEntityList,AccessionRequest accessionRequest) throws Exception{String response=null;BibRecords bibRecords=(BibRecords)JAXBHandler.getInstance().unmarshal(bibDataResponse,BibRecords.class);StopWatch stopWatch=new StopWatch();stopWatch.start();boolean isBoundWithItem=isBoundWithItemForScsbRecord(bibRecords.getBibRecordList());boolean isValidBoundWithRecord=true;if(isBoundWithItem){isValidBoundWithRecord=accessionValidationService.validateBoundWithScsbRecordFromIls(bibRecords.getBibRecordList());}if((!isBoundWithItem)||(isBoundWithItem&&isValidBoundWithRecord)){for(BibRecord bibRecord : bibRecords.getBibRecordList()){response=updateData(bibRecord,owningInstitution,responseMapList,accessionRequest);accessionHelperUtil.setAccessionResponse(accessionResponsesList,accessionRequest.getItemBarcode(),response);reportDataEntityList.addAll(accessionHelperUtil.createReportDataEntityList(accessionRequest,response));}}else {response=RecapConstants.INVALID_BOUNDWITH_RECORD;accessionHelperUtil.setAccessionResponse(accessionResponsesList,accessionRequest.getItemBarcode(),response);reportDataEntityList.addAll(accessionHelperUtil.createReportDataEntityList(accessionRequest,response));}stopWatch.stop();logger.info(""Total time taken to save records for accession : {}"",stopWatch.getTotalTimeSeconds());return response;}"
2020	"private void tabSelected(String ID){if(ID==null||ID.length()==0){return ;}if(ID.equals(""tabBenutzer"")){includePage(""incBenutzer"",""/gui/admin/modules/terminology/user/userTab.zul"");}else {if(ID.equals(""tabDomains"")){includePage(""incDomains"",""/gui/admin/modules/terminology/domains/domain.zul"");}else {if(ID.equals(""tabMetadata"")){includePage(""incMetadata"",""/gui/admin/modules/terminology/metadata/metadata.zul"");}else {if(ID.equals(""tabReporting"")){includePage(""incReporting"",""/gui/admin/modules/terminology/reportingTerm.zul"");}else {if(ID.equals(""tabImport"")){includePage(""incImport"",""/gui/admin/modules/terminology/termimport/import.zul"");}else {if(ID.equals(""tabTerminologie"")){includePage(""incTerminologie"",""/gui/admin/modules/terminology/terminologie.zul"");}else {if(ID.equals(""tabCodesysteme"")){includePage(""incCodesysteme"",""/gui/admin/modules/terminology/codesysteme.zul"");}else {if(ID.equals(""tabDB"")){includePage(""incDB"",""/gui/admin/modules/terminology/datenbank.zul"");}else {if(ID.equals(""tabSysParam"")){includePage(""incSysParam"",""/gui/admin/modules/terminology/sysParam.zul"");}else {if(ID.equals(""tabKollaboration"")){includePage(""incKollaboration"",""/gui/admin/modules/terminology/collaboration/kollaboration.zul"");}else {if(ID.equals(""tabUserManagement"")){includePage(""incUserManagement"",""/gui/admin/modules/terminology/userManagement.zul"");}else {if(ID.equals(""tabTaxonomie"")){includePage(""incTaxonomie"",""/gui/admin/modules/terminology/codesysteme.zul"");}else {if(ID.equals(""tabDatenbank"")){includePage(""incDatenbank"",""/gui/admin/modules/terminology/datenbank.zul"");}else {if(ID.equals(""tabAssociations"")){includePage(""incAssociations"",""/gui/admin/modules/terminology/associations.zul"");}else {logger.debug(""ID nicht bekannt: ""+ID);}}}}}}}}}}}}}}SessionHelper.setValue(""termadmin_tabid"",ID);}"
2021	"@Override public void onKeyPress(char key){recordPDF=true;}"
2022	"@Override boolean equalsSameBits(HashCode that){return hash==that.asInt();}"
2023	"@Override public IStatus runInUIThread(IProgressMonitor monitor){if(!canceled){onIsNotSatisfiable.consume(new ValidationMessage(!problemFoundNotSatisfiable?ValidationResult.OK:ValidationResult.IS_NOT_SATISFIABLE));}return Status.OK_STATUS;}"
2024	"@Override protected boolean apply(InventoryProperty<?,?> operand1,InventoryProperty<?,?> operand2){return operand2.equals(operand1);}"
2025	"private Pixmap createPixmap(int id){int bgasize=bgamap[id].getHeight()>bgamap[id].getWidth()?bgamap[id].getHeight():bgamap[id].getWidth();Pixmap pix;if(bgasize<=256){pix=new Pixmap(bgasize,bgasize,bgamap[id].getFormat());}else {pix=new Pixmap(bgamap[id].getWidth(),bgamap[id].getHeight(),bgamap[id].getFormat());}pix.drawPixmap(bgamap[id],0,0,bgamap[id].getWidth(),bgamap[id].getHeight(),0,0,bgamap[id].getWidth(),bgamap[id].getHeight());return pix;}"
2026	"public boolean isPlayer(String p){return getMGPlayer(p)!=null;}"
2027	"protected void initStatusBar(){status=new JLabel();status.setFont(status.getFont().deriveFont(Font.PLAIN,10));splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);splitPane.getInsets().left=5;splitPane.getInsets().right=5;splitPane.setResizeWeight(0.7);try{ComponentGeometry geometry=new ComponentGeometry(this.getClass(),""splitPane/divider"");geometry.bindIntProperty(splitPane,JSplitPane.DIVIDER_LOCATION_PROPERTY,400);}catch(Exception ex){LoggerFactory.getLogger(getClass()).error(""Cannot bind divider property"",ex);}JPanel statusBar=new JPanel(new FlowLayout(FlowLayout.LEFT,3,1));statusBar.add(Box.createVerticalStrut(16));statusBar.add(status);getContentPane().add(splitPane,BorderLayout.CENTER);getContentPane().add(statusBar,BorderLayout.SOUTH);}"
2028	"public void updateState(MachineState state,List<Move> moves){for(Proposition p : basePropositions.values()){p.setValue(false);}for(GdlSentence s : state.getContents()){basePropositions.get(s.toTerm()).setValue(true);}for(Proposition p : inputPropositions.values()){p.setValue(false);}if(moves!=null){List<GdlTerm> does=toDoes(moves);for(GdlTerm term : does){Proposition p=inputPropositions.get(term);p.setValue(true);}}initProposition.setValue(false);for(Proposition p : ordering){if(p.getInputs().size()==1){p.setValue(p.getSingleInput().getValue());}}if(moves!=null){savedState=null;}else {savedState=state;}}"
2029	"void decode(IBitStream in,DecoderConfig conf) throws AACException{couplingPoint=2*in.readBit();coupledCount=in.readBits(3);int gainCount=0;int i;for(i=0;i<=coupledCount;i++){gainCount++;channelPair[i]=in.readBool();idSelect[i]=in.readBits(4);if(channelPair[i]){chSelect[i]=in.readBits(2);if(chSelect[i]==3){gainCount++;}}else {chSelect[i]=2;}}couplingPoint+=in.readBit();couplingPoint|=(couplingPoint>>1); final boolean sign=in.readBool(); final double scale=CCE_SCALE[in.readBits(2)];ics.decode(in,false,conf); final ICSInfo info=ics.getInfo(); final int windowGroupCount=info.getWindowGroupCount(); final int maxSFB=info.getMaxSFB(); final int[][] sfbCB=null;for(i=0;i<gainCount;i++){int idx=0;int cge=1;int xg=0;float gainCache=1.0;if(i>0){cge=couplingPoint==2?1:in.readBit();xg=cge==0?0:Huffman.decodeScaleFactor(in)-60;gainCache=(float)Math.pow(scale,-xg);}if(couplingPoint==2){gain[i][0]=gainCache;}else {int sfb;for(int g=0;g<windowGroupCount;g++){for(sfb=0;sfb<maxSFB;sfb++,idx++){if(sfbCB[g][sfb]!=HCB.ZERO_HCB){if(cge==0){int t=Huffman.decodeScaleFactor(in)-60;if(t!=0){int s=1;t=xg+=t;if(!sign){s-=2*(t&0x1);t>>=1;}gainCache=(float)(Math.pow(scale,-t)*s);}}gain[i][idx]=gainCache;}}}}}}"
2030	"public void setVideoModel(VideoItemModel videoModel,VideoViewAdapter.ViewHolder holder){this.videoModel=videoModel;tvVideoName.setText(videoModel.getTitle());if(videoModel.isFavorite()){ivFavorite.setVisibility(VISIBLE);}else {ivFavorite.setVisibility(GONE);}onVideoStateChanged(videoModel.getVideoState(),true);Glide.with(getContext()).load(videoModel.getThumbnailId()).into(ivThumbnail);ivMover.setVisibility(GONE);ivMover.setOnTouchListener(new View.OnTouchListener(){  @Override public boolean onTouch(  View v,  MotionEvent event){    if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN) {      ((OnStartDragListener)getContext()).onStartDrag(holder);    }    return false;  }});}"
2031	"@Override public long getTarget(){return BlockUtil.computeBlockBreakPower(world,breakPos);}"
2032	"@Override public void run(){getPeerListFragment().setConnected(true);}"
2033	"@Override public void onClick(View v){if(!favoritesOnly){questionManager.selectNext();}else {questionManager.selectNextFavorite();}frageAnzeigen(questionManager.getQuestion());}"
2034	"@Override public Query intersectsQuery(String field,Object from,Object to,boolean includeLower,boolean includeUpper){InetAddress lower=(InetAddress)from;InetAddress upper=(InetAddress)to;return InetAddressRange.newIntersectsQuery(field,includeLower?lower:nextUp(lower),includeUpper?upper:nextDown(upper));}"
2035	"@Override public void onClick(View view){Intent intent=new Intent(view.getContext(),CommentPopUpWindow.class);intent.putExtra(""postId"",((StatusViewHolder)holder).txtPostId.getText().toString());Log.d(""UID::::"",""on Adapter -""+feedModels.get(position).getUid());intent.putExtra(""uid"",feedModels.get(position).getUid());view.getContext().startActivity(intent);}"
2036	"public void test(){DatabaseConnect db=new DatabaseConnect();String photoUrl="""";if(mAuth.getCurrentUser().getPhotoUrl()!=null){photoUrl=mAuth.getCurrentUser().getPhotoUrl().toString();}db.setUser(mAuth.getCurrentUser().getDisplayName(),mAuth.getCurrentUser().getEmail(),mAuth.getCurrentUser().getUid(),photoUrl);}"
2037	"@Override public boolean evaluate(Object object){FileShareRestRep filesystem=getFilesystem(object);return !MachineTagUtils.hasDatastores(filesystem);}"
2038	"@Override public void execute(CommandSender sender,String[] params) throws CommandException{Player player=new Player((EntityPlayerMP)sender.getMinecraftISender());Coordinate spawn=player.getSpawn()==null?player.getWorld().getSpawn():player.getSpawn();player.setPosition(spawn);sender.sendLangfileMessage(""command.home.atHome"");}"
2039	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
2040	"public byte[] serialize(){ByteBuffer buffer=null;switch (srcDataType){case BYTE :buffer=ByteBuffer.allocate((CarbonCommonConstants.LONG_SIZE_IN_BYTE*3)+CarbonCommonConstants.INT_SIZE_IN_BYTE+3);buffer.putChar(getSrcDataTypeInChar());buffer.put((byte)getMaxValue());buffer.put((byte)getMinValue());buffer.putLong((Long)0L);break;case SHORT :buffer=ByteBuffer.allocate((CarbonCommonConstants.LONG_SIZE_IN_BYTE*3)+CarbonCommonConstants.INT_SIZE_IN_BYTE+3);buffer.putChar(getSrcDataTypeInChar());buffer.putShort((short)getMaxValue());buffer.putShort((short)getMinValue());buffer.putLong((Long)0L);break;case INT :buffer=ByteBuffer.allocate((CarbonCommonConstants.LONG_SIZE_IN_BYTE*3)+CarbonCommonConstants.INT_SIZE_IN_BYTE+3);buffer.putChar(getSrcDataTypeInChar());buffer.putInt((int)getMaxValue());buffer.putInt((int)getMinValue());buffer.putLong((Long)0L);break;case LONG :buffer=ByteBuffer.allocate((CarbonCommonConstants.LONG_SIZE_IN_BYTE*3)+CarbonCommonConstants.INT_SIZE_IN_BYTE+3);buffer.putChar(getSrcDataTypeInChar());buffer.putLong((Long)getMaxValue());buffer.putLong((Long)getMinValue());buffer.putLong((Long)0L);break;case DOUBLE :buffer=ByteBuffer.allocate((CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE*3)+CarbonCommonConstants.INT_SIZE_IN_BYTE+3);buffer.putChar(getSrcDataTypeInChar());buffer.putDouble((Double)getMaxValue());buffer.putDouble((Double)getMinValue());buffer.putDouble((Double)0.0);break;case DECIMAL :byte[] maxAsBytes=getMaxAsBytes();byte[] minAsBytes=getMinAsBytes();byte[] unique=DataTypeUtil.bigDecimalToByte(BigDecimal.ZERO);buffer=ByteBuffer.allocate(maxAsBytes.length+minAsBytes.length+unique.length+3*CarbonCommonConstants.SHORT_SIZE_IN_BYTE+CarbonCommonConstants.INT_SIZE_IN_BYTE*3+3);buffer.putChar(getSrcDataTypeInChar());buffer.putShort((short)maxAsBytes.length);buffer.put(maxAsBytes);buffer.putShort((short)minAsBytes.length);buffer.put(minAsBytes);buffer.putShort((short)unique.length);buffer.put(unique);buffer.putInt(getScale());buffer.putInt(getPrecision());break;}buffer.putInt(getDecimal());buffer.put(getDataTypeSelected());buffer.flip();return buffer.array();}"
2041	"@SuppressWarnings(""deprecation"") @Override public boolean onKeyDown(int keyCode,KeyEvent event){RelativeLayout rl=(RelativeLayout)findViewById(R.id.layout);if(keyCode==KeyEvent.KEYCODE_BACK){rl.setBackgroundResource(R.drawable.flashlight1);if(cam!=null){cam.release();}}return super.onKeyDown(keyCode,event);}"
2042	"@Override public boolean shouldExecute(){return this.parentEntity.getAttackTarget()!=null;}"
2043	"public void init(){getTabs().clear();getTabs().addAll(new RepositoryTab<>(PlanDesigner.allAlicaFiles.getPlans()),new RepositoryTab<>(PlanDesigner.allAlicaFiles.getPlanTypes()),new RepositoryTab<>(PlanDesigner.allAlicaFiles.getBehaviours()),new RepositoryTab<>(PlanDesigner.allAlicaFiles.getTasks()));}"
2044	"@Override public boolean isEmpty(){return size()==0;}"
2045	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
2046	"@Override @SuppressWarnings(""unchecked"") public CollectionTransferObject next(){CollectionTransferObject theCollection=null;try{if(cursor.hasNext()){theCollection=new CollectionTransferObject();DBObject theEntry=cursor.next();theCollection.setDataStoreId(theEntry.get(MongoIdFieldName).toString());theCollection.setInsertTime(((ObjectId)theEntry.get(MongoIdFieldName)).getTimestamp());theCollection.setURL((String)theEntry.get(""URL""));theCollection.setTitle((String)theEntry.get(""title""));theCollection.setDescription((String)theEntry.get(""description""));theCollection.setProducer((String)theEntry.get(""producer""));theCollection.setSubject((String)theEntry.get(""subject""));theCollection.setKeywords((ArrayList<String>)theEntry.get(""keywords""));theCollection.setNameSpace((String)theEntry.get(""nameSpace""));theCollection.setVersion((int)theEntry.get(""version""));ArrayList<BasicDBObject> extraList=(ArrayList<BasicDBObject>)theEntry.get(MongoExtraName);HashMap<String,String> extra=new HashMap<String,String>();for(BasicDBObject extraObj : extraList){Set<String> keys=extraObj.keySet();for(String thisKey : keys){extra.put(thisKey,(String)extraObj.get(thisKey));}}theCollection.setExtra(extra);}}catch(MongoException e){e.printStackTrace();}return theCollection;}"
2047	"public Room getNearestRoom(List<Room> rooms){}"
2048	"@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){ViewGroup.LayoutParams params=upLayout.getLayoutParams();params.height-=distanceY;upLayout.setLayoutParams(params);return true;}"
2049	"@Override public boolean isExcluded(Array<TeammateSkill> skills){return skills.contains(BASIC_FIRST_AID,false)||skills.contains(ADVANCED_FIRST_AID,false)||skills.contains(ELITE_FIRST_AID,false);}"
2050	"public void onClick(DialogInterface dialog,int whichButton){}"
2051	"public boolean collide(Hitboxed h,World w,Vector2D v){Landscape l=w.getLandscape();Vector2D rem=fixCollisionWithVel(v,h,l,false);Vector2D norm=h.getHitbox().getNearestNormal(getHitbox());pos=pos.subtract(norm.multiply(5*Game.GAME_UNIT));Vector2D move=rem.project(norm.rotateQuad(1)).snap();rem=fixCollisionWithVel(move,h,l,true);pos=pos.add(norm.multiply(5*Game.GAME_UNIT));if(rem.equals(new Vector2D())){return false;}Vector2D bak=vel;vel=new Vector2D(vel.angle()).multiply(rem.length());update(1,w);vel=bak;return false;}"
2052	"public void convertInclination(ParsedShot parsed,ParsedTrip trip,CalcShot shot){double total=0.0;for(ParsedShotMeasurement measurement : parsed.measurements){UnitizedDouble<Angle> inclination=ParsedField.getValue(measurement.inclination);if(inclination==null){continue;}if(measurement.isBacksight&&!trip.areBackInclinationsCorrected){inclination=inclination.negate();}inclination=inclination.add(measurement.isBacksight?trip.backInclinationCorrection.value:trip.frontInclinationCorrection.value);total+=inclination.doubleValue(Angle.radians);}shot.inclination=total/parsed.measurements.size();}"
2053	"@Override public int getValue(){return controller.hasEssentials?1:0;}"
2054	"@Override public String getValue(){return (plugin.getManager().params.isMw_enabled())?""Enabled"":""Disabled"";}"
2055	"public void stopped(Context ctxt,LexLocation location){SchedulableThread thread=(SchedulableThread)Thread.currentThread();System.out.printf(""%s: stopped entered\n"",thread);synchronized(stopped){stopped.add(thread);}synchronized(this){this.notify();}Breakpoint bp=breakpoints.get(thread);if(bp==null){bp=new Breakpoint(location);}DebugCommand dc=new DebugCommand(bp,ctxt);while(true){try{String request=thread.debugExch.exchange(ACK);System.out.printf(""%s: stopped got %s\n"",thread,request);String response=dc.run(request);System.out.printf(""%s: stopped returning %s\n"",thread,response);thread.debugExch.exchange(response);}catch(InterruptedException e){System.out.printf(""%s: stopped interrupted\n"",thread);}}}"
2056	"@Override public boolean canEnable() throws JavaModelException{return super.canEnable()&&(getSourceCu()!=null||getSourceClassFile()!=null);}"
2057	"public void onClick(ClickEvent clickEvent){if(saveDraftProcess){return ;}validate(true);}"
2058	"public UniReusableView getReusableView(int position,boolean includeAll){return contentView.getReusableView(position,includeAll);}"
2059	"@Override public List<Role> getRoleList() throws DALException{List<Role> rolesList=new ArrayList<>();try{db.connectToDatabase();}catch(ClassNotFoundException|SQLException e){throw new DALException(e);}ResultSet rsRoles=db.query(Queries.getSQL(""role.get.all""));try{String role;while(rsRoles.next()){role=rsRoles.getString(""role_name"");List<String> permissions=new ArrayList<>();ResultSet rsPermissions=db.query(Queries.getFormatted(""role.get.where.role"",role));while(rsPermissions.next()){String perm=rsPermissions.getString(""permission_name"");permissions.add(perm);}rolesList.add(new Role(rsRoles.getString(""role_name""),permissions));}}catch(SQLException e){throw new DALException(e);}finally{db.close();}return rolesList;}"
2060	"private void createIsilonSnapshotPolicySchedule(StorageSystem storageObj,FilePolicy filePolicy,String path,String snapshotSchedulePolicyName,FileDeviceInputOutput args,String filePolicyBasePath){String pattern=snapshotSchedulePolicyName+""_%Y-%m-%d_%H-%M"";String scheduleValue=getIsilonPolicySchedule(filePolicy);Integer expireValue=getIsilonSnapshotExpireValue(filePolicy);_log.info(""File Policy : {} creation started"",filePolicy.toString());try{IsilonApi isi=getIsilonDevice(storageObj);isi.createDir(path,true);isi.createSnapshotSchedule(snapshotSchedulePolicyName,path,scheduleValue,pattern,expireValue);_log.info(""Isilon File Policy {} created successfully."",snapshotSchedulePolicyName);FileOrchestrationUtils.updatePolicyStorageResource(_dbClient,storageObj,filePolicy,args,filePolicyBasePath,snapshotSchedulePolicyName);}catch(IsilonException e){throw e;}}"
2061	"@Override protected boolean start(SparseBitSet b){if(b==null){throw new NullPointerException();}return true;}"
2062	"@Override public boolean isColliding(RectangularObstacle o){if(position.squaredDistance(o.centreGeometrique)>=(radius+o.getDemieDiagonale())*(radius+o.getDemieDiagonale())){return false;}return o.squaredDistance(position)<radius*radius;}"
2063	"public boolean isValid(Object actualValue){return true;}"
2064	"@Override public boolean hasNext(){return next<list.size();}"
2065	"@Override int separatorEnd(int separatorPosition){return separatorPosition+1;}"
2066	"public void deleteLink(LinkEntity linkEntity,UserEntity userEntity){linkRepository.delete(linkEntity);System.out.println(""[FileService]User ""+userEntity.getUsername()+"" deleted link ""+linkEntity.getFilename());userEntity.setSpaceUsage(userEntity.getSpaceUsage()-linkEntity.getFileByFileId().getSize());userRepository.saveAndFlush(userEntity);logService.createLog(""Delete File ""+linkEntity.getFilename(),null,userEntity);}"
2067	"public static void move(){if(osm.loc.myPos==null){return ;}GeoPoint gp=new GeoPoint(osm.loc.myPos);osm.mks.myLocMarker.setPosition(gp);move(gp);}"
2068	"@Override public void execute(){JsArray<Data> children=data.getChildrenData();for(int i=0,n=children.length();i<n;i++){children.get(i).setVisible(true);}Data attributes=data.getObjectAttributes().cast();if(attributes!=null){attributes.setVisible(true);}synchronize();}"
2069	"public static AzureVMDeploymentInfo createDeployment(AzureVMAgentTemplate template,int numberOfAgents,TokenCache tokenCache,AzureVMAgentCleanUpTask.DeploymentRegistrar deploymentRegistrar) throws AzureCloudException,IOException{InputStream embeddedTemplate=null;try{LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Initializing deployment for agentTemplate {0}"",template.getTemplateName()); final Azure azureClient=tokenCache.getAzureClient(); final Date timestamp=new Date(System.currentTimeMillis()); final String deploymentName=AzureUtil.getDeploymentName(template.getTemplateName(),timestamp); final String vmBaseName=AzureUtil.getVMBaseName(template.getTemplateName(),deploymentName,template.getOsType(),numberOfAgents); final String locationName=getLocationName(template.getLocation()); final String storageAccountName=template.getStorageAccountName(); final String storageAccountType=template.getStorageAccountType()==null?SkuName.STANDARD_LRS.toString():template.getStorageAccountType();if(!template.getResourceGroupName().matches(Constants.DEFAULT_RESOURCE_GROUP_PATTERN)){LOGGER.log(Level.SEVERE,""AzureVMManagementServiceDelegate: createDeployment: ResourceGroup Name {0} is invalid. It should be 1-64 alphanumeric characters"",new Object{template.getResourceGroupName()});throw new Exception(""ResourceGroup Name is invalid"");} final String resourceGroupName=template.getResourceGroupName();LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Creating a new deployment {0} with VM base name {1}"",new Object{deploymentName,vmBaseName});createAzureResourceGroup(azureClient,locationName,resourceGroupName);createStorageAccount(azureClient,storageAccountType,storageAccountName,locationName,resourceGroupName);StorageAccount storageAccount=getStorageAccount(azureClient,storageAccountName,resourceGroupName);String blobEndpointSuffix=getBlobEndpointSuffixForTemplate(storageAccount); final boolean useCustomScriptExtension=template.getOsType().equals(Constants.OS_TYPE_WINDOWS)&&!StringUtils.isBlank(template.getInitScript())&&template.getAgentLaunchMethod().equals(Constants.LAUNCH_METHOD_JNLP);if(template.getImageReferenceType().equals(IMAGE_CUSTOM_REFERENCE)){if(useCustomScriptExtension){LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Use embedded deployment template {0}"",EMBEDDED_TEMPLATE_IMAGE_WITH_SCRIPT_FILENAME);embeddedTemplate=AzureVMManagementServiceDelegate.class.getResourceAsStream(EMBEDDED_TEMPLATE_IMAGE_WITH_SCRIPT_FILENAME);}else {LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Use embedded deployment template (with script) {0}"",EMBEDDED_TEMPLATE_IMAGE_FILENAME);embeddedTemplate=AzureVMManagementServiceDelegate.class.getResourceAsStream(EMBEDDED_TEMPLATE_IMAGE_FILENAME);}}else {if(useCustomScriptExtension){LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Use embedded deployment template (with script) {0}"",EMBEDDED_TEMPLATE_WITH_SCRIPT_FILENAME);embeddedTemplate=AzureVMManagementServiceDelegate.class.getResourceAsStream(EMBEDDED_TEMPLATE_WITH_SCRIPT_FILENAME);}else {LOGGER.log(Level.INFO,""AzureVMManagementServiceDelegate: createDeployment: Use embedded deployment template {0}"",EMBEDDED_TEMPLATE_FILENAME);embeddedTemplate=AzureVMManagementServiceDelegate.class.getResourceAsStream(EMBEDDED_TEMPLATE_FILENAME);}} final ObjectMapper mapper=new ObjectMapper(); final JsonNode tmp=mapper.readTree(embeddedTemplate); final ObjectNode count=mapper.createObjectNode();count.put(""type"",""int"");count.put(""defaultValue"",numberOfAgents);ObjectNode.class.cast(tmp.get(""parameters"")).replace(""count"",count);ObjectNode.class.cast(tmp.get(""variables"")).put(""vmName"",vmBaseName);ObjectNode.class.cast(tmp.get(""variables"")).put(""location"",locationName);ObjectNode.class.cast(tmp.get(""variables"")).put(""jenkinsTag"",Constants.AZURE_JENKINS_TAG_VALUE);ObjectNode.class.cast(tmp.get(""variables"")).put(""resourceTag"",deploymentRegistrar.getDeploymentTag().get());if(StringUtils.isNotBlank(template.getImagePublisher())){ObjectNode.class.cast(tmp.get(""variables"")).put(""imagePublisher"",template.getImagePublisher());}if(StringUtils.isNotBlank(template.getImageOffer())){ObjectNode.class.cast(tmp.get(""variables"")).put(""imageOffer"",template.getImageOffer());}if(StringUtils.isNotBlank(template.getImageSku())){ObjectNode.class.cast(tmp.get(""variables"")).put(""imageSku"",template.getImageSku());}if(StringUtils.isNotBlank(template.getOsType())){ObjectNode.class.cast(tmp.get(""variables"")).put(""osType"",template.getOsType());}if(StringUtils.isNotBlank(template.getImage())){ObjectNode.class.cast(tmp.get(""variables"")).put(""image"",template.getImage());}if(useCustomScriptExtension){ObjectNode.class.cast(tmp.get(""variables"")).put(""jenkinsServerURL"",Jenkins.getInstance().getRootUrl());ArrayNode clientSecretsNode=ObjectNode.class.cast(tmp.get(""variables"")).putArray(""clientSecrets"");for(int i=0;i<numberOfAgents;i++){clientSecretsNode.add(JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(String.format(""%s%d"",vmBaseName,i)));}String scriptName=String.format(""%s%s"",deploymentName,""init.ps1"");String scriptUri=uploadCustomScript(template,scriptName,tokenCache);ObjectNode.class.cast(tmp.get(""variables"")).put(""startupScriptURI"",scriptUri);ObjectNode.class.cast(tmp.get(""variables"")).put(""startupScriptName"",scriptName);List<StorageAccountKey> storageKeys=azureClient.storageAccounts().getByGroup(template.getResourceGroupName(),storageAccountName).getKeys();if(storageKeys.isEmpty()){throw new AzureCloudException(""AzureVMManagementServiceDelegate: createDeployment: ""+""Exception occured while fetching the storage account key"");}String storageAccountKey=storageKeys.get(0).value(); final ObjectNode storageAccountKeyNode=mapper.createObjectNode();storageAccountKeyNode.put(""type"",""secureString"");storageAccountKeyNode.put(""defaultValue"",storageAccountKey);ObjectNode.class.cast(tmp.get(""parameters"")).replace(""storageAccountKey"",storageAccountKeyNode);}ObjectNode.class.cast(tmp.get(""variables"")).put(""vmSize"",template.getVirtualMachineSize());StandardUsernamePasswordCredentials creds=template.getVMCredentials();ObjectNode.class.cast(tmp.get(""variables"")).put(""adminUsername"",creds.getUsername());ObjectNode.class.cast(tmp.get(""variables"")).put(""adminPassword"",creds.getPassword().getPlainText());if(StringUtils.isNotBlank(storageAccountName)){ObjectNode.class.cast(tmp.get(""variables"")).put(""storageAccountName"",storageAccountName);}if(StringUtils.isNotBlank(storageAccountType)){ObjectNode.class.cast(tmp.get(""variables"")).put(""storageAccountType"",storageAccountType);}if(StringUtils.isNotBlank(blobEndpointSuffix)){ObjectNode.class.cast(tmp.get(""variables"")).put(""blobEndpointSuffix"",blobEndpointSuffix);}if(StringUtils.isNotBlank(template.getVirtualNetworkName())){ObjectNode.class.cast(tmp.get(""variables"")).put(""virtualNetworkName"",template.getVirtualNetworkName());ObjectNode.class.cast(tmp.get(""variables"")).put(""subnetName"",template.getSubnetName());if(StringUtils.isNotBlank(template.getVirtualNetworkResourceGroupName())){ObjectNode.class.cast(tmp.get(""variables"")).put(""virtualNetworkResourceGroupName"",template.getVirtualNetworkResourceGroupName());}else {ObjectNode.class.cast(tmp.get(""variables"")).put(""virtualNetworkResourceGroupName"",resourceGroupName);}}else {AddDefaultVNetResourceNode(tmp,mapper,resourceGroupName);}if(!template.getUsePrivateIP()){AddPublicIPResourceNode(tmp,mapper);}if(StringUtils.isNotBlank(template.getNsgName())){AddNSGNode(tmp,mapper,template.getNsgName());}deploymentRegistrar.registerDeployment(template.getAzureCloud().name,template.getResourceGroupName(),deploymentName);azureClient.deployments().define(deploymentName).withExistingResourceGroup(template.getResourceGroupName()).withTemplate(tmp.toString()).withParameters(""{}"").withMode(DeploymentMode.INCREMENTAL).beginCreate();return new AzureVMDeploymentInfo(deploymentName,vmBaseName,numberOfAgents);}catch(Exception e){LOGGER.log(Level.SEVERE,""AzureVMManagementServiceDelegate: deployment: Unable to deploy"",e);template.handleTemplateProvisioningFailure(e.getMessage(),FailureStage.PROVISIONING);throw new AzureCloudException(e);}finally{if(embeddedTemplate!=null){embeddedTemplate.close();}}}"
2070	"@Override public String toString(){return toJson().toString();}"
2071	"public void onClick(DialogInterface dialog,int which){}"
2072	"public Stmt getSubStmt(){return subStmt;}"
2073	"@Override protected Object doInBackground() throws Exception{}"
2074	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);BookRepository repository=RemoteBookRepository.getInstance();bookListView=(ListView)findViewById(R.id.listView_booklist);bookAdapter=createAdapter(new ArrayList<Book>());bookListView.setAdapter(bookAdapter);presenter=new BookListPresenter(repository,this);presenter.initialize();titleBtn=(Button)findViewById(R.id.titleBtn);yearBtn=(Button)findViewById(R.id.yearBtn);radioGroup=(RadioGroup)findViewById(R.id.radioGroup);sortTitle=(CheckBox)findViewById(R.id.sortTitle);sortYear=(CheckBox)findViewById(R.id.sortYear);id=titleBtn.getId();editText=(EditText)findViewById(R.id.editText);editText.addTextChangedListener(new TextWatcher(){  @Override public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){  }  @Override public void onTextChanged(  CharSequence s,  int start,  int before,  int count){    if (s.toString().equals("""")) {      presenter.initialize();    } else {      if (id == titleBtn.getId()) {        searchByTitle(s.toString());      } else       if (id == yearBtn.getId()) {        searchByYear(s.toString());      }    }  }  @Override public void afterTextChanged(  Editable s){  }});}"
2075	"@Override public boolean isInUseableZone(Game game,MageObject source,GameEvent event){Permanent sourcePermanent;if(game.getState().getZone(getSourceId())==Zone.BATTLEFIELD){sourcePermanent=game.getPermanent(getSourceId());}else {sourcePermanent=(Permanent)game.getLastKnownInformation(getSourceId(),Zone.BATTLEFIELD);}if(sourcePermanent==null){return false;}return hasSourceObjectAbility(game,sourcePermanent,event);}"
2076	"@Override public Strategy queryById(int id){List<Strategy> strategy=sqlSessionTemplate.selectList(""query_All_Strategy"");Iterator<Strategy> iter=strategy.iterator();Strategy ste=null;while(iter.hasNext()){Strategy s=iter.next();if(s.getId()==id){ste=s;}}return ste;}"
2077	"public String toString(){String str=""{"";for(String proto : reservedSocketMap.keySet()){str+=""  ""+proto+"":""+reservedSocketMap.get(proto)+""\n"";}str+=""}"";return str;}"
2078	"@Override public int getValue(){return controller.hasDynmap?1:0;}"
2079	"@Override public int hashCode(){return (size()==0)?0:Sequence.hashCode(this);}"
2080	"@Override public boolean isDirEligible(){return true;}"
2081	"public int getMailboxId(){return mMailbox.getId();}"
2082	"public PluginSelectionList(HuzuniPlugins pluginsScreen,Minecraft mc,int width,int height,int top,int bottom,int itemSize){super(mc,width,height,top,bottom,itemSize);this.pluginsScreen=pluginsScreen;this.centerListVertically=false;this.setHasListHeader(true,(int)((float)mc.fontRenderer.FONT_HEIGHT*1.5));}"
2083	"@Override public Set<String> getSynonyms(String accession){Set<String> synonyms=synonymMapper.get(accession);return Collections.unmodifiableSet(synonyms);}"
2084	"private AppdefResourceValue[][] setupResources(int sessionId,ViewChartFormNG chartForm,AppdefResourceValue resource) throws SessionTimeoutException,SessionException,AppdefEntityNotFoundException,PermissionException,RemoteException,MeasurementNotFoundException{ final boolean debug=log.isDebugEnabled();StopWatch watch=new StopWatch();AppdefResourceValue[] resources=null;if(null!=chartForm.getCtype()&&!chartForm.getCtype().equals(ViewChartFormNG.NO_CHILD_TYPE)){AppdefEntityID adeId=resource.getEntityId();AppdefEntityTypeID atid=new AppdefEntityTypeID(chartForm.getCtype());if(debug){watch.markTimeBegin(""findChildResources"");}PageList<? extends AppdefResourceValue> children=appdefBoss.findChildResources(sessionId,adeId,atid,PageControl.PAGE_ALL);if(debug){watch.markTimeEnd(""findChildResources"");}String[] rids=getServletRequest().getParameterValues(""r"");Integer[] r=ArrayUtil.stringToInteger(rids);if(null!=r){log.debug(""r=""+StringUtil.arrayToString(r));for(Iterator<? extends AppdefResourceValue> it=children.iterator();it.hasNext();){AppdefResourceValue res=it.next();boolean found=false;for(int i=0;i<r.length;++i){if(found=res.getId().equals(r[i])){break;}}if(!found){log.debug(""removing resource: ""+res.getId());it.remove();}}}resources=new AppdefResourceValue[children.size()];resources=(AppdefResourceValue[])children.toArray(resources);}else {if(resource instanceof AppdefGroupValue){AppdefGroupValue grpVal=(AppdefGroupValue)resource;AppdefEntityID[] grpMembers=new AppdefEntityID[grpVal.getAppdefGroupEntries().size()];grpMembers=(AppdefEntityID[])grpVal.getAppdefGroupEntries().toArray(grpMembers);if(debug){watch.markTimeBegin(""findByIds"");}List<AppdefResourceValue> memVals=appdefBoss.findByIds(sessionId,grpMembers,PageControl.PAGE_ALL);if(debug){watch.markTimeEnd(""findByIds"");}resources=new AppdefResourceValue[memVals.size()];resources=memVals.toArray(resources);}else {resources=new AppdefResourceValue{resource};}}if(debug){watch.markTimeBegin(""pruneResourcesNotCollecting"");}resources=measurementBoss.pruneResourcesNotCollecting(sessionId,resources,chartForm.getM()[0]);if(debug){watch.markTimeEnd(""pruneResourcesNotCollecting"");}getServletRequest().setAttribute(""resources"",resources);getServletRequest().setAttribute(""resourcesSize"",new Integer(resources.length));String[] resourceIds=getServletRequest().getParameterValues(""resourceIds"");if(resourceIds==null&&request.getSession().getAttribute(""chartForm_resourceIds"")!=null){resourceIds=(String[])request.getSession().getAttribute(""chartForm_resourceIds"");request.getSession().removeAttribute(""chartForm_resourceIds"");}AppdefResourceValue[] checkedResources=null;if(debug){watch.markTimeBegin(""checkedResources"");}if(null==resourceIds||resourceIds.length==0){int maxResources=getMaxResources(getServletRequest(),resources.length);log.debug(""maxResources=""+maxResources);checkedResources=new AppdefResourceValue[maxResources];System.arraycopy(resources,0,checkedResources,0,maxResources);Integer[] rids=new Integer[checkedResources.length];for(int i=0;i<rids.length;++i){rids[i]=checkedResources[i].getId();}chartForm.setResourceIds(rids);if(debug){log.debug(""no resourceIds specified: ""+StringUtil.arrayToString(rids));}getServletRequest().setAttribute(""checkedResources"",checkedResources);getServletRequest().setAttribute(""checkedResourcesSize"",new Integer(checkedResources.length));}else {Integer[] rids=new Integer[resourceIds.length];for(int ind=0;ind<resourceIds.length;++ind){rids[ind]=Integer.parseInt(resourceIds[ind]);}checkedResources=new AppdefResourceValue[rids.length];for(int i=0;i<rids.length;++i){for(int j=0;j<resources.length;++j){if(resources[j].getId().equals(rids[i])){checkedResources[i]=resources[j];}}}if(debug){log.debug(""resourceIds specified: ""+org.hyperic.util.StringUtil.arrayToString(rids));}getServletRequest().setAttribute(""checkedResources"",checkedResources);getServletRequest().setAttribute(""checkedResourcesSize"",new Integer(resources.length));}if(debug){watch.markTimeEnd(""checkedResources"");log.debug(""_setupResources: ""+watch);}return new AppdefResourceValue{resources,checkedResources};}"
2085	"@Override public boolean apply(Object o){return true;}"
2086	"@Override protected void onProgressUpdate(Integer... progress){super.onProgressUpdate(progress);mProgressDialog.setIndeterminate(false);mProgressDialog.setMax(100);mProgressDialog.setProgress(progress[0]);}"
2087	"@Override public Comparable[] apply(Row row,Comparable[] key){for(int i=0;i<key.length;i++){ final Comparable val=inputRawSuppliers[i].get();key[i]=valueConvertFns[i].apply(val);}return key;}"
2088	"boolean isIdentity(double[] parameters){return parameters[0]==0&&parameters[1]==0;}"
2089	"public ExpandPanel(){initWidget(ourUiBinder.createAndBindUi(this));setOpen(false);header.addClickHandler(event -> {  setOpen(!isOpen());});}"
2090	"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{String methodName=method.getName();Class<?>[] parameterTypes=method.getParameterTypes();if(method.getDeclaringClass()==Object.class){return method.invoke(handler,args);}if(""toString"".equals(methodName)&&parameterTypes.length==0){return handler.toString();}if(""hashCode"".equals(methodName)&&parameterTypes.length==0){return handler.hashCode();}if(""equals"".equals(methodName)&&parameterTypes.length==1){return handler.equals(args[0]);}return handler.invoke(new DefaultInvokerContext(invokerConfig,methodName,parameterTypes,args)).getResult();}"
2091	"@XmlElement(name=""ID"",required=true) public void setId(Integer id){this.setRight(id);}"
2092	"public Builder clear(){super.clear();enqueued_=0;bitField0_=(bitField0_&~0x00000001);processed_=0;bitField0_=(bitField0_&~0x00000002);return this;}"
2093	"@Override public void onClick(View v){if(imageButtons[0].getBackground()==blueSquare){imageButtons[0].setBackground(redSquare);userPattern[0]=1;}else {imageButtons[0].setBackground(blueSquare);userPattern[0]=0;}}"
2094	"@Override boolean process(){System.out.println(""Blank button process."");return true;}"
2095	"@Override public void onClick(View v){int adapterPosition=getAdapterPosition();Movie movie=mMovieData[adapterPosition];mClickHandler.onClick(movie);}"
2096	"public int loop(){try{if(!Game.isLoggedIn()){return 500;}if(FailSafeThread.leaving()&&!MyPlayer.get().isInCombat()){if(MyPlayer.get().isInCombat()){MyPlayer.attack(MyPlayer.currentRoom().getNearestEnemy());}else {return 500;}}if(Walking.getEnergy()>random(60,75)&&!Walking.isRunEnabled()){Walking.setRun(true);}if(Combat.isAutoRetaliateEnabled()){Combat.setAutoRetaliate(false);}if(Explore.getBossRoom()!=null){if(Explore.getBossRoom().contains(MyPlayer.location())&&MyPlayer.currentRoom().equals(Explore.getBossRoom())&&Npcs.getNearest(GameConstants.INROOM_ENEMY_FILTER)!=null){status=((Boss)Explore.getBossRoom()).status();return ((Boss)Explore.getBossRoom()).kill();}}if(false){if(MyPlayer.currentRoom()!=null){for(Plugin boss : bosses){if(boss.isValid()){boss.startupMessage();status=boss.getStatus();return boss.loop();}}}}Camera.setPitch(true);if(MyPlayer.hp()<50){MyPlayer.eat();}if(MyPlayer.currentRoom()!=null&&MyPlayer.currentRoom().contains(MyPlayer.location())){if(MyPlayer.getComplexity()>4&&Explore.inDungeon()&&MyPlayer.currentRoom().getType()==Room.PUZZLE&&!((Puzzle)MyPlayer.currentRoom()).isSolved()){if(MyPlayer.currentRoom().hasEnemies()){MyPlayer.attack(MyPlayer.currentRoom().getNearestEnemy());}Puzzle room=((Puzzle)MyPlayer.currentRoom());status=room.status();return room.solve();}}Npc smuggler=Npcs.getNearest(GameConstants.SMUGGLER);if(smuggler!=null){if(Explore.getRooms().indexOf(MyPlayer.currentRoom())==1&&MyPlayer.currentRoom().contains(smuggler)){clearAll();}}for(Strategy strategy : strategies){if(strategy.isValid()){status=strategy.getStatus();if(status==null||status.length()<1){status=""Switching strategy"";}return strategy.execute();}}log(""No strats valid"");}catch(Exception e){e.printStackTrace();}return random(400,600);}"
2097	"@Override public void onClick(View v){ScreenUtils.setStatusBarColor(this,Color.parseColor(""#148577""));FragmentTransaction ft=getSupportFragmentManager().beginTransaction();ft.setCustomAnimations(R.anim.fade_in,R.anim.fade_out);ft.replace(R.id.pharmacies_list,pharmacyListFragment);ft.addToBackStack(null);ft.commit();listLayout=(RelativeLayout)findViewById(R.id.pharmacies_list);listLayout.setVisibility(View.VISIBLE);if(pharmaciesListItems==null||pharmaciesListItems.size()==0){Toast.makeText(getBaseContext(),R.string.pharmacy_empty,Toast.LENGTH_SHORT);}pharmacyListFragment.setData(pharmaciesListItems);pharmacyListFragment.setSearch(searchTxt.getText().toString());pharmacyListFragment.updateData();}"
2098	"@Override public void execute() throws Exception{hostNames=ComputeUtils.removeExistingHosts(hostNames,cluster);List<Host> hosts=ComputeUtils.createHosts(cluster,computeVirtualPool,hostNames,virtualArray,serviceProfileTemplate);for(Host host : hosts){acquireHostLock(host,cluster);}logInfo(""compute.cluster.hosts.created"",ComputeUtils.nonNull(hosts).size());Map<Host,URI> hostToBootVolumeIdMap=ComputeUtils.makeBootVolumes(project,virtualArray,virtualPool,size,hosts,getClient(),portGroup);logInfo(""compute.cluster.boot.volumes.created"",hostToBootVolumeIdMap!=null?ComputeUtils.nonNull(hostToBootVolumeIdMap.values()).size():0);hostToBootVolumeIdMap=ComputeUtils.deactivateHostsWithNoBootVolume(hostToBootVolumeIdMap,cluster);Map<Host,URI> hostToEgIdMap=ComputeUtils.exportBootVols(hostToBootVolumeIdMap,project,virtualArray,hlu,portGroup);logInfo(""compute.cluster.exports.created"",hostToEgIdMap!=null?ComputeUtils.nonNull(hostToEgIdMap.values()).size():0);hostToBootVolumeIdMap=ComputeUtils.deactivateHostsWithNoExport(hostToBootVolumeIdMap,hostToEgIdMap,cluster);hosts=ComputeUtils.setHostBootVolumes(hostToBootVolumeIdMap,true);ComputeUtils.addHostsToCluster(hosts,cluster);hosts=ComputeUtils.deactivateHostsNotAddedToCluster(hosts,cluster);String orderErrors=ComputeUtils.getOrderErrors(cluster,copyOfHostNames,null,null);if(orderErrors.length()>0){if(ComputeUtils.nonNull(hosts).isEmpty()){throw new IllegalStateException(ExecutionUtils.getMessage(""compute.cluster.order.incomplete"",orderErrors));}else {logError(""compute.cluster.order.incomplete"",orderErrors);setPartialSuccess();}}}"
2099	"@Override public View getHeaderView(int position,View convertView,ViewGroup parent){HeaderViewHolder viewHolder=null;if(convertView==null){viewHolder=new HeaderViewHolder();convertView=getLayoutInflater().inflate(R.layout.header_inventory_list,null);viewHolder.cb_check_all=(CheckBox)convertView.findViewById(R.id.cb_check_all);viewHolder.btn_edit=(Button)convertView.findViewById(R.id.btn_edit);viewHolder.iv_drug_image=(ImageView)convertView.findViewById(R.id.iv_drug_image);viewHolder.tv_drug_name=(TextView)convertView.findViewById(R.id.tv_drug_name);viewHolder.tv_specification=(TextView)convertView.findViewById(R.id.tv_specification);viewHolder.tv_drug_type=(TextView)convertView.findViewById(R.id.tv_drug_type);convertView.setTag(viewHolder);}else {viewHolder=(HeaderViewHolder)convertView.getTag();}int drugID=mInventoryList.get(position).getDrugID();Drug drug=DrugDao.getInstance(getApplicationContext()).getDrugByDrugID(drugID);if(drug!=null){viewHolder.tv_drug_name.setText(drug.getDrugName());viewHolder.tv_specification.setText(drug.getSpecification());viewHolder.tv_drug_type.setText(drug.getDosageFrom());}viewHolder.cb_check_all.setChecked(getSectionHeaderCheckStatus(getSectionForPosition(position)));viewHolder.cb_check_all.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View view){    boolean isCheckedAll=((CheckBox)view).isChecked();    setCheckStatusInSection(getSectionForPosition(position),isCheckedAll);    notifyDataSetChanged();    refreshInventoryListCount();  }});boolean isEdit=getSectionHeaderEditStatus(getSectionForPosition(position));if(isEdit){viewHolder.btn_edit.setText(R.string.finish);}else {viewHolder.btn_edit.setText(R.string.edit);}viewHolder.btn_edit.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View view){    boolean isEdit=getSectionHeaderEditStatus(getSectionForPosition(position));    setEditStatusInSection(getSectionForPosition(position),!isEdit);    InputMethodManager im=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);    im.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);    mAdapter.notifyDataSetChanged();  }});return convertView;}"
2100	"@Override public int count(List<Entity> list){return list.isEmpty()?0:15;}"
2101	"public void a(OWorld var1,int var2,int var3,int var4,Random var5){if(!var1.B){int var6=var1.c(var2,var3,var4);if((var6&8)!=0){byte var7=4;int var8=var7+1;byte var9=32;int var10=var9*var9;int var11=var9/2;if(this.a==null){this.a=new int[var9*var9*var9];}int var12;if(var1.a(var2-var8,var3-var8,var4-var8,var2+var8,var3+var8,var4+var8)){int var13;int var14;int var15;for(var12=-var7;var12<=var7;++var12){for(var13=-var7;var13<=var7;++var13){for(var14=-var7;var14<=var7;++var14){var15=var1.a(var2+var12,var3+var13,var4+var14);if(var15==OBlock.K.bn){this.a[(var12+var11)*var10+(var13+var11)*var9+var14+var11]=0;}else {if(var15==OBlock.L.bn){this.a[(var12+var11)*var10+(var13+var11)*var9+var14+var11]=-2;}else {this.a[(var12+var11)*var10+(var13+var11)*var9+var14+var11]=-1;}}}}}for(var12=1;var12<=4;++var12){for(var13=-var7;var13<=var7;++var13){for(var14=-var7;var14<=var7;++var14){for(var15=-var7;var15<=var7;++var15){if(this.a[(var13+var11)*var10+(var14+var11)*var9+var15+var11]==var12-1){if(this.a[(var13+var11-1)*var10+(var14+var11)*var9+var15+var11]==-2){this.a[(var13+var11-1)*var10+(var14+var11)*var9+var15+var11]=var12;}if(this.a[(var13+var11+1)*var10+(var14+var11)*var9+var15+var11]==-2){this.a[(var13+var11+1)*var10+(var14+var11)*var9+var15+var11]=var12;}if(this.a[(var13+var11)*var10+(var14+var11-1)*var9+var15+var11]==-2){this.a[(var13+var11)*var10+(var14+var11-1)*var9+var15+var11]=var12;}if(this.a[(var13+var11)*var10+(var14+var11+1)*var9+var15+var11]==-2){this.a[(var13+var11)*var10+(var14+var11+1)*var9+var15+var11]=var12;}if(this.a[(var13+var11)*var10+(var14+var11)*var9+(var15+var11-1)]==-2){this.a[(var13+var11)*var10+(var14+var11)*var9+(var15+var11-1)]=var12;}if(this.a[(var13+var11)*var10+(var14+var11)*var9+var15+var11+1]==-2){this.a[(var13+var11)*var10+(var14+var11)*var9+var15+var11+1]=var12;}}}}}}}var12=this.a[var11*var10+var11*var9+var11];if(var12>=0){var1.d(var2,var3,var4,var6&-9);}else {this.g(var1,var2,var3,var4);}}}}"
2102	"private void doWork(){if(this.storage.getEnergyStored()>=ENERGY_USE){IBlockState state=this.worldObj.getBlockState(this.pos);EnumFacing sideToManipulate=WorldUtil.getDirectionByPistonRotation(state.getBlock().getMetaFromState(state));Lens currentLens=this.getLens();if(currentLens.canInvoke(this,sideToManipulate,ENERGY_USE)){this.storage.extractEnergy(ENERGY_USE,false);int distance=currentLens.getDistance();for(int i=0;i<distance;i++){BlockPos hitBlock=this.pos.offset(sideToManipulate,i+1);if(currentLens.invoke(this.worldObj.getBlockState(hitBlock),hitBlock,this)||i>=distance-1){shootLaser(this.worldObj,this.getX(),this.getY(),this.getZ(),hitBlock.getX(),hitBlock.getY(),hitBlock.getZ(),currentLens);break;}}}}}"
2103	"@Override public void run(){mRefreshLayout.setRefreshing(true);}"
2104	"public XIndexContainer xIndexContainer(){return (XIndexContainer)queryInterface(XIndexContainer.class);}"
2105	"public ResourcePathRoot(String rootPath){if(!rootPath.startsWith(""/"")){throw new IllegalArgumentException(""resource root path is not absolute: ""+rootPath);}this.rootPath=rootPath;}"
2106	"private void updateBookletsView(){bookletListview.setAdapter(new BookletAdapter(bookletListview,Booklet.getBooklets()));if(ContentManager.getActiveBooklet()==null){Booklet booklet=ContentManager.getLatestBooklet();if(booklet!=null){booklet.goDownloadAndOpen();}}}"
2107	"@Override public boolean uploadSegmentFromFD(ParcelFileDescriptor source,UserLiveEvent.Result.UploadSegment callback,Handler handler,Object closure){AsyncWorkQueue<ClientWorkItemType,ClientWorkItem<?>> workQueue=getContainer().getContainer().getAsyncUploadQueue();UserLiveEventImpl.WorkItemNewSegmentUpload workItem=workQueue.obtainWorkItem(UserImpl.WorkItemNewVideoUpload.TYPE);workItem.set(this,Integer.toString(++mSegmentId),source,callback,handler,closure);return workQueue.enqueue(workItem);}"
2108	"@Override protected boolean equals(E e1,E e2){return e1.compareTo(e2)==0;}"
2109	"public boolean allowsTarget(Object target,Scene scene,Person acting){if(!(target instanceof Person)){return false;}return true;}"
2110	"@Override public LayoutImpl parse(DelegateAdapter adapter,Paper data){return new PaperDelegate(data);}"
2111	"@Override public void actionPerformed(ActionEvent e){isRunning=false;state=false;ipCam=false;}"
2112	"public Collection<EligiblesContract> getEligiblesByHousehold(String clusterCode,String lhwCode,String hhno){SQLiteDatabase db=this.getReadableDatabase();Cursor c=null;String[] columns={singleWoman.COLUMN_NAME_LUID,singleWoman.COLUMN_NAME_WOMEN_NAME};String whereClause=singleWoman.COLUMN_NAME_SUBAREACODE+"" = ? AND ""+singleWoman.COLUMN_NAME_LHWCODE+"" = ? AND ""+singleWoman.COLUMN_NAME_HOUSEHOLD+"" = ?"";String[] whereArgs=new String{clusterCode,lhwCode,hhno};String groupBy=null;String having=null;String orderBy=singleWoman.COLUMN_NAME_WOMEN_NAME+"" ASC"";Collection<EligiblesContract> allEC=new ArrayList<>();try{c=db.query(singleWoman.TABLE_NAME,columns,whereClause,whereArgs,groupBy,having,orderBy);while(c.moveToNext()){EligiblesContract ec=new EligiblesContract();allEC.add(ec.Hydrate(c));}}finally{if(c!=null){c.close();}if(db!=null){db.close();}}return allEC;}"
2113	"protected boolean shouldFilter(Row<String,CompositeColumnName> row){return row.getColumns().isEmpty();}"
2114	"public boolean hasMoreConformations(RCTuple MAssignment){return lambdaHeaps.get(sourceProblem.mapSubproblemConfToIndex(MAssignment)).size()>0;}"
2115	"private void setElevationChart(){LineChart lineChart=fview.findViewById(R.id.chart3);lineChart.setDrawGridBackground(false);lineChart.setDrawBorders(false);Description description=new Description();description.setText("""");lineChart.setDescription(description);XAxis xAxis=lineChart.getXAxis();xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);xAxis.setDrawGridLines(false);xAxis.setGranularity(1.0);xAxis.setValueFormatter(new IAxisValueFormatter(){  @Override public String getFormattedValue(  float value,  AxisBase axis){    return timeList.get((int)value);  }});YAxis yAxis=lineChart.getAxisLeft();yAxis.setDrawGridLines(false);yAxis=lineChart.getAxisRight();yAxis.setDrawGridLines(false);LineDataSet lineDataSet=new LineDataSet(elevationList,""Elevation in (""+(useImperial?""FT"":""MTS"")+"")"");lineDataSet.setAxisDependency(YAxis.AxisDependency.LEFT);lineDataSet.setDrawCircleHole(false);lineDataSet.setDrawValues(false);lineDataSet.setMode(LineDataSet.Mode.HORIZONTAL_BEZIER);List<ILineDataSet> iLineDataSets=new ArrayList<>();iLineDataSets.add(lineDataSet);LineData lineData=new LineData(iLineDataSets);lineChart.setData(lineData);lineChart.invalidate();}"
2116	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_heart_rate);Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);Button button_test=(Button)findViewById(R.id.HeartResults);button_test.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent intent=new Intent(HeartRateActivity.this,ResultsActivity.class);    startActivity(intent);  }});}"
2117	"@Override public void process(EntityPlayer player,Side side){player.inventory.addItemStackToInventory(new ItemStack(RecipeRegistry.get(name).getResult()));Recipe r=RecipeRegistry.get(name);for(int i=0;i<r.getRequirements().size();i++){String s=r.getRequirements().get(i).toString().substring(0,r.getRequirements().get(i).toString().lastIndexOf(""."")-2);int index=0;if(s.equals(Strings.SM_BlazingShard)){index=GuiMaterialList.Index_BlazingShard;}if(s.equals(Strings.SM_BlazingStone)){index=GuiMaterialList.Index_BlazingStone;}if(s.equals(Strings.SM_BlazingGem)){index=GuiMaterialList.Index_BlazingGem;}if(s.equals(Strings.SM_BlazingCrystal)){index=GuiMaterialList.Index_BlazingCrystal;}if(s.equals(Strings.SM_BrightShard)){index=GuiMaterialList.Index_BrightShard;}if(s.equals(Strings.SM_BrightStone)){index=GuiMaterialList.Index_BrightStone;}if(s.equals(Strings.SM_BrightGem)){index=GuiMaterialList.Index_BrightGem;}if(s.equals(Strings.SM_BrightCrystal)){index=GuiMaterialList.Index_BrightCrystal;}if(s.equals(Strings.SM_DarkShard)){index=GuiMaterialList.Index_DarkShard;}if(s.equals(Strings.SM_DarkStone)){index=GuiMaterialList.Index_DarkStone;}if(s.equals(Strings.SM_DarkGem)){index=GuiMaterialList.Index_DarkGem;}if(s.equals(Strings.SM_DarkCrystal)){index=GuiMaterialList.Index_DarkCrystal;}if(s.equals(Strings.SM_DenseShard)){index=GuiMaterialList.Index_DenseShard;}if(s.equals(Strings.SM_DenseStone)){index=GuiMaterialList.Index_DenseStone;}if(s.equals(Strings.SM_DenseGem)){index=GuiMaterialList.Index_DenseGem;}if(s.equals(Strings.SM_DenseCrystal)){index=GuiMaterialList.Index_DenseCrystal;}if(s.equals(Strings.SM_EnergyShard)){index=GuiMaterialList.Index_EnergyShard;}if(s.equals(Strings.SM_EnergyStone)){index=GuiMaterialList.Index_EnergyStone;}if(s.equals(Strings.SM_EnergyGem)){index=GuiMaterialList.Index_EnergyGem;}if(s.equals(Strings.SM_EnergyCrystal)){index=GuiMaterialList.Index_EnergyCrystal;}if(s.equals(Strings.SM_FrostShard)){index=GuiMaterialList.Index_FrostShard;}if(s.equals(Strings.SM_FrostStone)){index=GuiMaterialList.Index_FrostStone;}if(s.equals(Strings.SM_FrostGem)){index=GuiMaterialList.Index_FrostGem;}if(s.equals(Strings.SM_FrostCrystal)){index=GuiMaterialList.Index_FrostCrystal;}if(s.equals(Strings.SM_LightningShard)){index=GuiMaterialList.Index_LightningShard;}if(s.equals(Strings.SM_LightningStone)){index=GuiMaterialList.Index_LightningStone;}if(s.equals(Strings.SM_LightningGem)){index=GuiMaterialList.Index_LightningGem;}if(s.equals(Strings.SM_LightningCrystal)){index=GuiMaterialList.Index_LightningCrystal;}if(s.equals(Strings.SM_LostIllusion)){index=GuiMaterialList.Index_LostIllusion;}if(s.equals(Strings.SM_LucidShard)){index=GuiMaterialList.Index_LucidShard;}if(s.equals(Strings.SM_LucidStone)){index=GuiMaterialList.Index_LucidStone;}if(s.equals(Strings.SM_LucidGem)){index=GuiMaterialList.Index_LucidGem;}if(s.equals(Strings.SM_LucidCrystal)){index=GuiMaterialList.Index_LucidCrystal;}if(s.equals(Strings.SM_ManifestIllusion)){index=GuiMaterialList.Index_ManifestIllusion;}if(s.equals(Strings.SM_MythrilShard)){index=GuiMaterialList.Index_MythrilShard;}if(s.equals(Strings.SM_MythrilStone)){index=GuiMaterialList.Index_MythrilStone;}if(s.equals(Strings.SM_MythrilGem)){index=GuiMaterialList.Index_MythrilGem;}if(s.equals(Strings.SM_MythrilCrystal)){index=GuiMaterialList.Index_MythrilCrystal;}if(s.equals(Strings.SM_Orichalcum)){index=GuiMaterialList.Index_Orichalcum;}if(s.equals(Strings.SM_OrichalcumPlus)){index=GuiMaterialList.Index_OrichalcumPlus;}if(s.equals(Strings.SM_PowerShard)){index=GuiMaterialList.Index_PowerShard;}if(s.equals(Strings.SM_PowerStone)){index=GuiMaterialList.Index_PowerStone;}if(s.equals(Strings.SM_PowerGem)){index=GuiMaterialList.Index_PowerGem;}if(s.equals(Strings.SM_PowerCrystal)){index=GuiMaterialList.Index_PowerCrystal;}if(s.equals(Strings.SM_RemembranceShard)){index=GuiMaterialList.Index_RemembranceShard;}if(s.equals(Strings.SM_RemembranceStone)){index=GuiMaterialList.Index_RemembranceStone;}if(s.equals(Strings.SM_RemembranceGem)){index=GuiMaterialList.Index_RemembranceGem;}if(s.equals(Strings.SM_RemembranceCrystal)){index=GuiMaterialList.Index_RemembranceCrystal;}if(s.equals(Strings.SM_SerenityShard)){index=GuiMaterialList.Index_SerenityShard;}if(s.equals(Strings.SM_SerenityStone)){index=GuiMaterialList.Index_SerenityStone;}if(s.equals(Strings.SM_SerenityGem)){index=GuiMaterialList.Index_SerenityGem;}if(s.equals(Strings.SM_SerenityCrystal)){index=GuiMaterialList.Index_SerenityCrystal;}if(s.equals(Strings.SM_TranquilShard)){index=GuiMaterialList.Index_TranquilShard;}if(s.equals(Strings.SM_TranquilStone)){index=GuiMaterialList.Index_TranquilStone;}if(s.equals(Strings.SM_TranquilGem)){index=GuiMaterialList.Index_TranquilGem;}if(s.equals(Strings.SM_TranquilCrystal)){index=GuiMaterialList.Index_TranquilCrystal;}if(s.equals(Strings.SM_TwilightShard)){index=GuiMaterialList.Index_TwilightShard;}if(s.equals(Strings.SM_TwilightStone)){index=GuiMaterialList.Index_TwilightStone;}if(s.equals(Strings.SM_TwilightGem)){index=GuiMaterialList.Index_TwilightGem;}if(s.equals(Strings.SM_TwilightCrystal)){index=GuiMaterialList.Index_TwilightCrystal;}ExtendedPlayerMaterials.get(player).setMaterialArray(ExtendedPlayerMaterials.get(player).arrayOfAmounts[index]-=Integer.parseInt(r.getRequirements().get(i).substring(r.getRequirements().get(i).lastIndexOf(""."")+1)),index);}}"
2118	"private int size(Operand operand) throws Exception{if(clazz(operand,DEFAULT_STRING)){if(MachineManager.instance().dalvik()){return field(operand,""count"").intValue();}return field(operand,""value"").arrayValue().length();}else {if(clazz(operand,BUILDER_STRING)){return field(operand,""count"").intValue();}else {if(clazz(operand,BUFFER_STRING)){return field(operand,""count"").intValue();}}}throw new Exception(""invalid operand"");}"
2119	"@Override public void configure(WebSocketServletFactory factory){factory.register(TreasureServerEndpoint.class);}"
2120	"@NotNull @Override public HttpMethod createRequest(ObjectMapper mapper,String url) throws IOException{return new GetMethod(url);}"
2121	"public static String createContainer(DockerClient client,CreateContainerCmd createContainerCmd) throws Exception{int attempts=0;Exception cause=null;String response=null;while(attempts<MAX_RETRIES&&response==null){try{response=createContainerCmd.exec().getId();}catch(ProcessingException e){if(e.getCause() instanceof SocketTimeoutException){LOGGER.info(""Read timed out while creating container, checking if container was created...."");InspectContainerResponse inspectResponse=inspectContainer(client.inspectContainerCmd(createContainerCmd.getName()));if(inspectResponse!=null&&inspectResponse.getId()!=null){response=inspectResponse.getId();}else {attempts++;cause=e;}}else {throw e;}}}if(response==null){throw cause;}return response;}"
2122	"@Override public boolean calculate(){}"
2123	"protected Dialog onCreateDialog(int id){if(id==DIALOG_DATE_ID){DatePickerDialog dpd;if(dream==null){dpd=new DatePickerDialog(this,dpickerListener,yearX,monthX,dayX);}else {dpd=new DatePickerDialog(this,dpickerListener,dream.getYear(),dream.getMonth()-1,dream.getDay());}dpd.getDatePicker().setMaxDate(System.currentTimeMillis());return dpd;}return null;}"
2124	"@Override public boolean apply(T t){return !predicate.apply(t);}"
2125	"public ArrayList<ArrayList<String>> getWhereInformation(){ArrayList<ArrayList<String>> whereInformation=new ArrayList<>();String[] splitWhere=this.selectStatement.split(""where"");String[] splitAnd=splitWhere[1].split(""and"");for(String whereClause : splitAnd){ArrayList<String> whereInformationRow=new ArrayList<>();StringTokenizer st=new StringTokenizer(whereClause);StringTokenizer stt=new StringTokenizer(st.nextToken(),""."");String columnName=stt.nextToken();if(stt.hasMoreTokens()){columnName=stt.nextToken();}whereInformationRow.add(columnName);String comparisonType=st.nextToken();whereInformationRow.add(comparisonType);String comparison=st.nextToken();whereInformationRow.add(comparison);whereInformation.add(whereInformationRow);}return whereInformation;}"
2126	"public boolean isRunning(){return exifProxy!=null&&!exifProxy.isRunning();}"
2127	"@Override public void doExpandAsMetaVolume(StorageSystem storageSystem,StoragePool storagePool,Volume volume,long size,MetaVolumeRecommendation recommendation,VolumeExpandCompleter volumeCompleter){StringBuilder logMsgBuilder=new StringBuilder(String.format(""Expand Meta Volume Start - Array:%s, Pool:%s %n    Volume: %s, id: %s"",storageSystem.getSerialNumber(),storagePool.getNativeId(),volume.getLabel(),volume.getId()));_log.info(logMsgBuilder.toString());String recommendedMetaVolumeType=recommendation.getMetaVolumeType().toString();String expansionType=null;long metaMemberCapacity=recommendation.getMetaMemberSize();int metaMemberCount=(int)recommendation.getMetaMemberCount();MetaVolumeTaskCompleter metaVolumeTaskCompleter=new MetaVolumeTaskCompleter(volumeCompleter);try{boolean tagSet=_helper.doApplyRecoverPointTag(storageSystem,volume,false);if(!tagSet){TaskCompleter taskCompleter=metaVolumeTaskCompleter.getVolumeTaskCompleter();ServiceError error=DeviceControllerErrors.smis.errorSettingRecoverPointTag(""disable"");taskCompleter.error(_dbClient,error);return ;}boolean cleanupSuccess=cleanupDanglingMetaMembers(storageSystem,volume);if(!cleanupSuccess){String errorMessage=String.format(""Failed to delete meta volume: %s ,  nativeId: %s . \n""+"" Could not cleanup dangling meta members."",volume.getId(),volume.getNativeId());ServiceError error=DeviceControllerErrors.smis.methodFailed(""doExpandAsMetaVolume"",errorMessage);TaskCompleter taskCompleter=metaVolumeTaskCompleter.getVolumeTaskCompleter();taskCompleter.error(_dbClient,error);_log.error(String.format(errorMessage));return ;}if(size==volume.getCapacity()){_log.info(String.format(""Zero-capacity expansion completed. Array: %s Pool:%s Volume:%s, Capacity: %s  "",storageSystem.getId(),storagePool.getId(),volume.getId(),volume.getCapacity()));TaskCompleter taskCompleter=metaVolumeTaskCompleter.getVolumeTaskCompleter();taskCompleter.ready(_dbClient);return ;}if(recommendation.getMetaMemberCount()==0){volume.setCapacity(size);_dbClient.persistObject(volume);_log.info(String.format(""Expanded volume within its total meta volume capacity (simple case) - Array: %s Pool:%s, \n""+"" Volume: %s, IsMetaVolume: %s, Total meta volume capacity: %s, NewSize: %s"",storageSystem.getId(),storagePool.getId(),volume.getId(),volume.getIsComposite(),volume.getTotalMetaMemberCapacity(),volume.getCapacity()));TaskCompleter taskCompleter=metaVolumeTaskCompleter.getVolumeTaskCompleter();taskCompleter.ready(_dbClient);return ;}expansionType=_metaVolumeOperations.defineExpansionType(storageSystem,volume,recommendedMetaVolumeType,metaVolumeTaskCompleter);_log.info(String.format(""Meta volume type used for expansion: %s, recommended meta volume type: %s"",expansionType,recommendedMetaVolumeType));volumeCompleter.setMetaVolumeType(expansionType);_log.info(String.format(""Start of steps to expand volume as meta volume: %s, \n   volume ID: %s""+""\n   expansion type: %s, new member count: %s, member size: %s, is already meta volume: %s ."",volume.getLabel(),volume.getId(),expansionType,metaMemberCount,metaMemberCapacity,volume.getIsComposite()));List<String> metaMembers=null;metaMembers=_metaVolumeOperations.createMetaVolumeMembers(storageSystem,storagePool,volume,metaMemberCount,metaMemberCapacity,metaVolumeTaskCompleter);if(metaVolumeTaskCompleter.getLastStepStatus()==Job.JobStatus.SUCCESS){if(volume.getIsComposite()){_metaVolumeOperations.expandMetaVolume(storageSystem,storagePool,volume,metaMembers,metaVolumeTaskCompleter);if(expansionType.equals(Volume.CompositionType.STRIPED.toString())&&metaVolumeTaskCompleter.getLastStepStatus()==Job.JobStatus.SUCCESS&&storageSystem.getSystemType().equalsIgnoreCase(DiscoveredDataObject.Type.vmax.toString())){_metaVolumeOperations.deleteBCVHelperVolume(storageSystem,volume);}}else {_metaVolumeOperations.expandVolumeAsMetaVolume(storageSystem,storagePool,volume,metaMembers,expansionType,metaVolumeTaskCompleter);}}}catch(Exception e){_log.error(""Problem in doExpandMetaVolumes: failed to expand meta volume ""+volume.getLabel()+"" ."",e);}finally{_log.info(String.format(""End of steps to expand volume as meta volume: %s, \n   volume ID: %s""+""\n   type: %s, new member count: %s, member size: %s."",volume.getLabel(),volume.getId(),expansionType,metaMemberCount,metaMemberCapacity));}logMsgBuilder=new StringBuilder(String.format(""Expand Volume End - Array:%s, Pool:%s%n    Volume: %s, id: %s"",storageSystem.getSerialNumber(),storagePool.getNativeId(),volume.getLabel(),volume.getId()));_log.info(logMsgBuilder.toString());}"
2128	"public void show(){WIDTH_SCALE=0.0;if(cmp!=null){cmp.removeAllUpdateListeners();}}"
2129	"@Override public void modifyText(ModifyEvent e){inventoryIdModified=true;displaySinglePositions(false);canSaveSingleSpecimen.setValue(false);}"
2130	"@Override public boolean test(FilterBean filterBean) throws Exception{return filterBean.getType()==FilterType.CATEGORY;}"
2131	"public JSONObject getElementLessThanOrEqualTimestamp(ArrayList<String> sysmlIds,String timestamp){JSONObject jsonResult=null;JSONObject searchJson=new JSONObject();JSONObject bool=new JSONObject().put(""must"",new JSONObject().put(""terms"",new JSONObject().put(""id"",sysmlIds)));JSONObject filter=new JSONObject().put(""range"",new JSONObject().put(""_modified"",new JSONObject().put(""lte"",timestamp)));JSONArray sort=new JSONArray();JSONObject modifiedSortOpt=new JSONObject();modifiedSortOpt.put(""order"",""desc"");modifiedSortOpt.put(""mode"",""max"");sort.put(new JSONObject().put(""_modified"",modifiedSortOpt));bool.put(""filter"",filter);searchJson.put(""sort"",sort);searchJson.put(""size"",""1"");searchJson.put(""query"",new JSONObject().put(""bool"",bool));Search search=new Search.Builder(searchJson.toString()).addIndex(elementIndex).build();SearchResult result;try{result=client.execute(search);if(result.getTotal()>0){JsonArray hits=result.getJsonObject().getAsJsonObject(""hits"").getAsJsonArray(""hits"");jsonResult=new JSONObject(hits.get(0).getAsJsonObject().getAsJsonObject(""_source"").toString());}}catch(IOException e){e.printStackTrace();}return jsonResult;}"
2132	"@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();}"
2133	"@Override public boolean isEmpty(){return head.getNextInWriteQueue()==head;}"
2134	"public void limitStack(StringBuilder jvm,HIRTree ast){int max=0,curr=0;for(HIRTree op : ast.getChildren()){if(op.getId().equals(""Assign"")){if(op.getChild(0).getId().equals(""Array"")){curr=2;}if(op.getChild(1).getId().equals(""Arith"")){HIRTree child=op.getChild(1);if(child.getChild(0).getId().equals(""Array"")&&child.getChild(1).getId().equals(""Array"")){curr+=3;}else {curr+=2;}}else {if(op.getChild(1).getId().equals(""ArraySize"")){curr+=2;}else {curr++;}}}else {if(op.getId().equals(""Call"")){curr=op.getChild(op.getChildren().length-1).getChildren().length;}}if(curr>max){max=curr;}curr=0;}if(max>0){jvm.append("".limit stack ""+max+""\n"");}else {jvm.append("".limit stack 1\n"");}}"
2135	"public P3LX(PApplet applet,LXModel model){super(model);this.applet=applet;this.engine.script.setScriptPath(applet.sketchPath());for(Class<?> cls : applet.getClass().getDeclaredClasses()){if(!Modifier.isAbstract(cls.getModifiers())){if(LXPattern.class.isAssignableFrom(cls)){registerPattern(cls.asSubclass(LXPattern.class));}else {if(LXEffect.class.isAssignableFrom(cls)){registerEffect(cls.asSubclass(LXEffect.class));}}}}this.buffer=new ModelBuffer(this);this.colors=this.engine.getUIBufferNonThreadSafe();LX.initTimer.log(""P3LX: ModelBuffer"");this.ui=buildUI();LX.initTimer.log(""P3LX: UI"");applet.colorMode(PConstants.HSB,360,100,100,100);LX.initTimer.log(""P3LX: colorMode"");applet.registerMethod(""draw"",this);applet.registerMethod(""dispose"",this);LX.initTimer.log(""P3LX: registerMethod"");}"
2136	"@Inject public DemoData(Environment environment,EbeanConfig ebeanConfig){this.ebeanServer=Ebean.getServer(ebeanConfig.defaultServer());if(environment.isDev()||environment.isTest()){Logger.debug(""Loading demo data"");if(ebeanServer.find(Admin.class).findCount()==0){Logger.debug(""Loading first Admin"");Admin admin1=new Admin();admin1.setEmail(""admin1@demo.com"");admin1.setPassword(""password"");admin1.save();}else {Logger.debug(""Admin table is not empty"");}if(ebeanServer.find(UserInfo.class).findCount()==0){Logger.debug(""Loading demo Users"");UserInfo u1=new UserInfo();u1.setArrivalTime(Timestamp.from(Instant.now()));u1.setGallupId(""testgallupid1"");u1.setLanguage(""en"");u1.setRandomizedId(""ABCD1234"");u1.setStatus(""NEW"");u1.setSampleGroup(""1"");u1.save();UserInfo u2=new UserInfo();u2.setArrivalTime(Timestamp.from(Instant.now()));u2.setGallupId(""testgallupid2"");u2.setLanguage(""en"");u2.setRandomizedId(""EFGH5678"");u2.setStatus(""NEW"");u2.setSampleGroup(""2"");u2.save();UserInfo u3=new UserInfo();u3.setArrivalTime(Timestamp.from(Instant.now()));u3.setGallupId(""testgallupid3"");u3.setLanguage(""en"");u3.setRandomizedId(""IJKL2468"");u3.setStatus(""NEW"");u3.setSampleGroup(""3"");u3.save();UserInfo u4=new UserInfo();u4.setArrivalTime(Timestamp.from(Instant.now()));u4.setGallupId(""testgallupid4"");u4.setLanguage(""en"");u4.setRandomizedId(""MNOP1234"");u4.setStatus(""NEW"");u4.setSampleGroup(""4"");u4.save();}else {Logger.debug(""UserInfo table is not empty"");}if(ebeanServer.find(Experiment.class).findCount()==0){Logger.debug(""Loading demo Experiments"");Experiment e1=new Experiment();e1.setExperimentName(""experiment-1"");ExperimentInstance ei1=new ExperimentInstance();ei1.nParticipants=3;ei1.experiment=e1;ei1.experimentInstanceName=""e1_2017-08-08-01"";ei1.experimentInstanceUrlActual=""http://brdbrd.net"";ei1.experimentInstanceUrlShort="""";ei1.priority=1;ei1.status=""ACTIVE"";ExperimentInstance ei2=new ExperimentInstance();ei2.nParticipants=3;ei2.experiment=e1;ei2.experimentInstanceName=""e1_2017-08-08-02"";ei2.experimentInstanceUrlActual=""https://en.wikipedia.org/wiki/Peel_(tool)"";ei2.experimentInstanceUrlShort="""";ei2.priority=2;ei2.status=""ACTIVE"";ExperimentInstance ei3=new ExperimentInstance();ei3.nParticipants=3;ei3.experiment=e1;ei3.experimentInstanceName=""e1_2017-08-08-03"";ei3.experimentInstanceUrlActual=""https://brdbrd.net:9776/game/417/9253/{id}/connected"";ei3.experimentInstanceUrlShort="""";ei3.priority=3;ei3.status=""ACTIVE"";e1.experimentInstances.add(ei1);e1.experimentInstances.add(ei2);e1.experimentInstances.add(ei3);e1.save();}else {Logger.debug(""Experiment table is not empty"");}}}"
2137	"public void actionPerformed(ActionEvent e){for(int tb=1;tb<=10;tb++){if(e.getSource()==tableButton[tb]){TitledBorder topBorder=BorderFactory.createTitledBorder(""Actief"");topBorder.setBorder(BorderFactory.createLineBorder(Color.black));topBorder.setTitlePosition(TitledBorder.TOP);tableButton[tb].setBorder(topBorder);Table table=barmanager.getHashTable(tb);if(!table.equals(null)){if(table.getTableStatus().equals(""Bezet"")||table.getTableStatus().equals(""Hulp"")){panelCenter.removeAll();panelCenter.add(orderSection.getTableLeft(table,panelCenter));activeTable=tb;panelCenter.revalidate();}else {if(table.getTableStatus().equals(""Afrekenen"")){System.out.println(""Status afrekenen"");panelCenter.removeAll();Payment p=paymentManager.getActivePayment(tb);activeTable=tb;panelCenter.add(paymentSection.getPaymentPanel(p));revalidate();}else {panelCenter.removeAll();}}}}else {TitledBorder topBorderInactive=BorderFactory.createTitledBorder("""");topBorderInactive.setBorder(BorderFactory.createLineBorder(Color.decode(""#DFDFDF"")));topBorderInactive.setTitlePosition(TitledBorder.TOP);tableButton[tb].setBorder(topBorderInactive);tableButton[tb].setBorder(BorderFactory.createEtchedBorder());revalidate();}}revalidate();}"
2138	"@Override public boolean match(OsmPrimitive osm){return !match.match(osm);}"
2139	"public int compare(ItemStack itemStack1,ItemStack itemStack2){if(itemStack1!=null&&itemStack2!=null){if(Item.getIdFromItem(itemStack1.getItem())-Item.getIdFromItem(itemStack2.getItem())==0){if(itemStack1.getItem()==itemStack2.getItem()){if(itemStack1.getItemDamage()==itemStack2.getItemDamage()){if(itemStack1.hasTagCompound()&&itemStack2.hasTagCompound()){if(ItemStack.areItemStackTagsEqual(itemStack1,itemStack2)){return (itemStack1.stackSize-itemStack2.stackSize);}else {return (itemStack1.getTagCompound().hashCode()-itemStack2.getTagCompound().hashCode());}}else {if(!(itemStack1.hasTagCompound())&&itemStack2.hasTagCompound()){return -1;}else {if(itemStack1.hasTagCompound()&&!(itemStack2.hasTagCompound())){return 1;}else {return (itemStack1.stackSize-itemStack2.stackSize);}}}}else {return (itemStack1.getItemDamage()-itemStack2.getItemDamage());}}else {return itemStack1.getItem().getUnlocalizedName(itemStack1).compareToIgnoreCase(itemStack2.getItem().getUnlocalizedName(itemStack2));}}else {return Item.getIdFromItem(itemStack1.getItem())-Item.getIdFromItem(itemStack2.getItem());}}else {if(itemStack1!=null){return -1;}else {if(itemStack2!=null){return 1;}else {return 0;}}}}"
2140	"@Override public void run(){ArrayList<Chunk> chunks=ChunkManager.getLoadedChunkList();while(ThreadManager.running()){if(chunks.size()>0){int i=Meth.randomInt(0,chunks.size()-1);Chunk c=chunks.get(i);short[][][] wc=c.giveWaterCopy();int count=0;while(wc==null&&count++<5){i=Meth.randomInt(0,chunks.size()-1);c=chunks.get(i);wc=c.giveWaterCopy();}if(wc!=null){for(int x=0;x<SIZE;x++){for(int y=0;y<SIZE;y++){for(int z=0;z<SIZE;z++){if(wc[x][y][z]!=0){update(c.realX()+x+0.5,c.realY()+y,c.realZ()+z+0.5,wc[x][y][z]);}}}}}}}}"
2141	"public StageDeviceSimulator(String pDeviceName,StageType pStageType,boolean pFirstSetThenGo){super(pDeviceName);mStageType=pStageType;}"
2142	"@Override public int getMode(){return TreeSelectionModel.SINGLE_TREE_SELECTION;}"
2143	"private static void Deal(){d1.dealHand();System.out.println(""Dealer: ""+d1);System.out.println(""You: ""+human);System.out.println(""Robot: ""+robot);}"
2144	"public Collection<ImageData> getImages(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}IContainerPrx service=gateway.getPojosService(ctx);List<Image> images=service.getImages(PojoMapper.getModelType(ImageData.class).getName(),idsList,param);Collection<ImageData> result=new ArrayList<ImageData>(images.size());for(Image img : images){result.add((ImageData)PojoMapper.asDataObject(img));}return result;}catch(Throwable t){handleException(this,t,""Could not load images"");}return Collections.emptyList();}"
2145	"public void onClick(DialogInterface dialog,int which){}"
2146	"@Override public boolean isFormulaEvaluationSupported(){return true;}"
2147	"@Override public ClientMessage encodeAddRequest(boolean localOnly){return ReplicatedMapAddEntryListenerCodec.encodeRequest(name,localOnly);}"
2148	"@Override public boolean test(){return true;}"
2149	"public Map<Attribute,Float> getAttributeModifiers(GameCharacter target){return target.getPotionAttributes();}"
2150	"@Override public void handle(ActionEvent e){setProductID(ID);setProductName(nameField.getText());setManufactureCost(Double.parseDouble(costField.getText()));setSalesPrice(Double.parseDouble(salesField.getText()));profitPerUnit=(salesPrice-manufactureCost);quantity=0;stage.close();}"
2151	"@Override public void run(){try{while(true){synchronized(this){if(closed){return ;}if(!enabled){this.wait();continue;}if(state!=MemberState.STABLE){disable();continue;}client.pollNoWakeup();long now=time.milliseconds();if(coordinatorUnknown()){if(findCoordinatorFuture==null){lookupCoordinator();}else {this.wait(retryBackoffMs);}}else {if(heartbeat.sessionTimeoutExpired(now)){coordinatorDead();}else {if(heartbeat.pollTimeoutExpired(now)){maybeLeaveGroup();}else {if(!heartbeat.shouldHeartbeat(now)){this.wait(retryBackoffMs);}else {heartbeat.sentHeartbeat(now);sendHeartbeatRequest().addListener(new RequestFutureListener<Void>(){  @Override public void onSuccess(  Void value){synchronized (AbstractCoordinator.this) {      heartbeat.receiveHeartbeat(time.milliseconds());    }  }  @Override public void onFailure(  RuntimeException e){synchronized (AbstractCoordinator.this) {      if (e instanceof RebalanceInProgressException) {        heartbeat.receiveHeartbeat(time.milliseconds());      } else {        heartbeat.failHeartbeat();        AbstractCoordinator.this.notify();      }    }  }});}}}}}}}catch(InterruptedException e){log.error(""Unexpected interrupt received in heartbeat thread for group {}"",groupId,e);this.failed.set(new RuntimeException(e));}catch(RuntimeException e){log.error(""Heartbeat thread for group {} failed due to unexpected error"",groupId,e);this.failed.set(e);}}"
2152	"@Override public void onClick(View v){newQty--;if(newQty<0){newQty=0;}qtyEditText.setText(Integer.toString(newQty));}"
2153	"public boolean isWorkPending(){return !loaded||!seriesAndDataLabelsRendered;}"
2154	"@Override public void initItems(){try{ final Method itemMth=net.minecraft.server.v1_9_R2.Item.class.getDeclaredMethod(""a"",int.class,String.class,net.minecraft.server.v1_9_R2.Item.class);itemMth.setAccessible(true); final Field byId=Material.class.getDeclaredField(""byId"");byId.setAccessible(true); final Material[] materials=Arrays.copyOf((Material[])byId.get(null),5000);byId.set(null,materials); final Field byName=Material.class.getDeclaredField(""BY_NAME"");byName.setAccessible(true); @SuppressWarnings(""unchecked"") final Map<String,Material> names=(Map<String,Material>)byName.get(null); final Constructor<? extends MaterialData> ctor=MaterialData.class.getDeclaredConstructor(int.class,byte.class);for(int i=MclibConstants.MIN_ITEM_ID;i<=MclibConstants.MAX_ITEM_ID;i++){materials[i]=createBukkitMaterial(materials,names,i,""custom_""+i,ctor,64,(short)0); final CustomItem myItem=new CustomItem();itemMth.invoke(null,i,""custom_""+i,myItem.c(""mclib:custom_""+i));}}catch(Exception ex){LOGGER.log(Level.SEVERE,""Problems initializing modded items"",ex);}}"
2155	"@Override public List<RemotePatientSimilarityView> getSimilarityResults(OutgoingMatchRequest request){List<RemotePatientSimilarityView> resultsList=new LinkedList<>();if(request==null){return resultsList;}JSONObject replyJSON=request.getResponseJSON();if(replyJSON==null){return resultsList;}AccessType access=new DefaultAccessType(this.matchAccess,this.viewAccess,this.matchAccess);Patient reference=this.patientRepository.get(request.getLocalReferencePatientId());if(reference==null){return resultsList;}DefaultJSONToMatchingPatientConverter patientConverter=new DefaultJSONToMatchingPatientConverter();JSONArray matches=replyJSON.optJSONArray(""results"");if(matches==null){this.logger.error(""No key 'results' in reply JSON"");}for(int i=0;i<matches.length();++i){try{JSONObject next=matches.getJSONObject(i);JSONObject nextPatient=next.getJSONObject(""patient"");Patient modelRemotePatient=patientConverter.convert(nextPatient);double patientScore=0;try{patientScore=next.getJSONObject(""score"").getDouble(""patient"");}catch(Exception ex){this.logger.error(""Invalid score in JSON for patient [{}]"",modelRemotePatient.getId());throw new ApiViolationException(""Invalid score in JSON for patient [""+modelRemotePatient.getId()+""]"");}RemotePatientSimilarityView similarityView=new RemotePatientSimilarityView(modelRemotePatient,reference,access,patientScore);resultsList.add(similarityView);}catch(ApiViolationException ex){this.logger.error(""Parsing incoming patients: one of the patients did not satisfy API requirements: [{}]"",ex.getMessage());}catch(Exception ex){this.logger.error(""Error parsing one of the patients from JSON: [{}]"",ex);}}return resultsList;}"
2156	"@Override public void widgetSelected(SelectionEvent e){x=cb_Xaxis[0].getSelection();}"
2157	"public FuncMap(boolean isPublic,AST name,Ty returnType,AST[] paramNames,Ty[] paramTypes,AST body){super(0,name.getString(),""(uncompiled)"",returnType,paramTypes);this.at=name;this.funcId=seq++;this.isPublic=isPublic;this.paramNames=paramNames;this.body=body;}"
2158	"@Override protected void onFirstViewAttach(){super.onFirstViewAttach();getViewState().uploadResultPost();getViewState().toggleMessageLoading(true);getViewState().showMessage(""Loading"");new AsyncTask<Void,Void,Void>(){  @Override protected Void doInBackground(  Void... params){    try {      TimeUnit.SECONDS.sleep(Constants.INT_NUM_SECONDS_LOADING);    } catch (    InterruptedException e) {      e.printStackTrace();    }    return null;  }  @Override protected void onPostExecute(  Void aVoid){    getViewState().showMessage(""Uploaded"");    getViewState().toggleMessageLoading(false);    getViewState().showResultPost();  }}.execute();}"
2159	"public void addResult(Player player,Double time){scoreBoard.add(new RaceResult(player,time));}"
2160	"public void setPosition(int popupWidth,int popupHeight){if(cursorBounds_==null){assert (false):""Positioning popup but no cursor bounds available"";return ;}Coordinates coords=getPopupPosition(popupWidth,popupHeight,cursorBounds_.getLeft(),cursorBounds_.getBottom(),5);popup_.setPopupPosition(coords.getLeft(),coords.getTop());}"
2161	"public List<Alumno> buscarAsistenciaDeHoyApoderado(Apoderado apoderado){int idApoderado=apoderado.getIdApoderado();List<Alumno> alumnos=alumnoDAO.buscarPorApoderado(idApoderado);for(Alumno a : alumnos){Asistencia hoy=asistenciaDAO.asistenciaHoyAlumno(a.getIdAlumno());if(hoy==null){LocalDateTime now=LocalDateTime.now();int day=now.getDayOfMonth();int month=now.getMonthValue();int year=now.getYear();String date=year+"" ""+month+"" ""+day;hoy=new Asistencia();hoy.setMatricula(a.getMatriculas().get(0));hoy.setFecha(date);asistenciaDAO.crear(hoy);}List<Asistencia> asistencias=new ArrayList<>();asistencias.add(hoy);List<Matricula> matriculas=new ArrayList<>();Matricula matricula=new Matricula();matriculas.add(matricula);a.setMatriculas(matriculas);a.getMatriculas().get(0).setAsistencias(asistencias);}return alumnos;}"
2162	"public NavCntl(NavView navView){this.navView=navView;navView.addAddEntriesListener(new AddEntriesListener());navView.addViewRecsListener(new ViewRecsListener());navView.addViewEntriesListener(new ViewEntriesListener());navView.addViewProfileListener(new ViewProfileListener());navView.addLogoutListener(new LogoutButtonListener());navView.addNewFoodListener(new NewEntryListener());navView.addNewDrinkListener(new NewEntryListener());navView.addNewMoodListener(new NewEntryListener());navView.addBackListener(new BackListener());}"
2163	"public static MaplePacket sendDuey(byte operation,List<MapleDueyActions> packages){MaplePacketLittleEndianWriter mplew=new MaplePacketLittleEndianWriter();mplew.writeShort(SendPacketOpcode.DUEY.getValue());mplew.write(operation);switch (operation){case 9 :{mplew.write(1);break;}case 10 :{mplew.write(0);mplew.write(packages.size());for(MapleDueyActions dp : packages){mplew.writeInt(dp.getPackageId());mplew.writeAsciiString(dp.getSender(),15);mplew.writeInt(dp.getMesos());mplew.writeLong(KoreanDateUtil.getFileTimestamp(dp.getSentTime(),false));mplew.writeZeroBytes(205);if(dp.getItem()!=null){mplew.write(1);PacketHelper.addItemInfo(mplew,dp.getItem(),true,true);}else {mplew.write(0);}}mplew.write(0);break;}}return mplew.getPacket();}"
2164	"public void Register(String username,String password,String email,String phoneNumber,String gender,String address,int accountType){IDataBase IDataBase1=new DataBase();if(accountType==1){NormalUser user=new NormalUser(username,password,email,phoneNumber,gender,address,accountType);IDataBase1.InsertUser(user);}else {if(accountType==2){}else {if(accountType==3){}}}}"
2165	"@Override public void failure(RetrofitError error){Log.d(""ApiWrapper"",""Failed to load /api/today.json"",error);if(error.getKind()==RetrofitError.Kind.HTTP&&error.getResponse().getStatus()==401){startTokenExpiredActivity(c);}if(error.getKind()==RetrofitError.Kind.NETWORK){CanHazInternetListener.enable(c);}TodayEvent t=new TodayEvent(error);loadingToday=false;getEventBus().post(t);}"
2166	"@Override public void onClick(View v){int viewId=v.getId();int postion=(int)v.getTag();MessageModel msg=mListModel.get(postion);switch (viewId){case R.id.ll_comment :PostNewCommentActivity.start(mContext,msg);break;case R.id.ll_repost :PostNewRepostActivity.start(mContext,msg);break;case R.id.btn_more :StatusContextMenuManager.getInstance().toggleContextMenuFromView(v,postion,this);break;case R.id.ll_like :LikeDao likeDao=new LikeDao(msg.id,mContext);if(!msg.liked){likeDao.like();mListModel.get(postion).attitudes_count++;mListModel.get(postion).liked=true;ImageView iv_like=(ImageView)v.findViewById(R.id.iv_like);TextView tv_like_count=(TextView)v.findViewById(R.id.tv_like_count);setLikeBtn(iv_like,tv_like_count,postion);ScaleAnimation myAnimation_Scale=new ScaleAnimation(1.0,1.3,1.0,1.3,Animation.RELATIVE_TO_SELF,0.5,Animation.RELATIVE_TO_SELF,0.5);myAnimation_Scale.setDuration(300);iv_like.startAnimation(myAnimation_Scale);}else {likeDao.unLike();mListModel.get(postion).attitudes_count--;mListModel.get(postion).liked=false;ImageView iv_like=(ImageView)v.findViewById(R.id.iv_like);TextView tv_like_count=(TextView)v.findViewById(R.id.tv_like_count);setLikeBtn(iv_like,tv_like_count,postion);}break;}}"
2167	"@Override public int compare(Article art1,Article art2){return art1.getId()>art2.getId()?1:-1;}"
2168	"@PostMapping(value=""/add"") public String addingMember(Member member,BindingResult bindingResult,ModelMap modelMap){addPageAttributesOfNew(modelMap);addTeamListToModel(modelMap);if(bindingResult.hasErrors()){return MEMBER_ADD_FORM;}memberService.addMember(member);String message=getMessage(""msg.successful.add"",getMessage(""member""));modelMap.addAttribute(""message"",message);modelMap.addAttribute(""member"",Member.EMPTY);return MEMBER_ADD_FORM;}"
2169	"@Override protected Integer doInBackground(URL... params){URL url=params[0];int result=0;try{HttpURLConnection urlconn=(HttpURLConnection)url.openConnection();urlconn.setConnectTimeout(MovieUtils.TIMEOUT_INTERVAL);int statuscode=urlconn.getResponseCode();if(statuscode==HttpURLConnection.HTTP_OK){try{response=new StringBuilder();InputStream inputStream=urlconn.getInputStream();BufferedReader r=new BufferedReader(new InputStreamReader(inputStream));String line;while((line=r.readLine())!=null){response.append(line).append('\n');}}finally{urlconn.disconnect();result=1;}}}catch(IOException e){e.printStackTrace();}return result;}"
2170	"public Builder withDefaultTaxType(SageOneTaxType val){defaultSageOneTaxType=(this.isInitialized())?val:defaultSageOneTaxType;return this;}"
2171	"public Node insertNode(List<Point> pl){for(int i=0;i<pl.size();i++){root=insertNode(root,pl.get(i));}return root;}"
2172	"@Override public void doGetUrl(String parameter){view.onShowRefreshing();this.category=parameter;String url=NewsApi.getNewsArticle_PCUrl(category);doRequestData(url);}"
2173	"public static RetrySettings mergeToSettings(RetrySettings settings,RetryOption... options){if(options.length<=0){return settings;}RetrySettings.Builder builder=settings.toBuilder();for(RetryOption option : options){switch (option.type){case TOTAL_TIMEOUT :builder.setTotalTimeout((Duration)option.value);break;case INITIAL_RETRY_DELAY :builder.setInitialRetryDelay((Duration)option.value);break;case RETRY_DELAY_MULTIPLIER :builder.setRetryDelayMultiplier((Double)option.value);break;case MAX_RETRY_DELAY :builder.setMaxRetryDelay((Duration)option.value);break;case MAX_ATTEMPTS :builder.setMaxAttempts((Integer)option.value);break;case JITTERED :builder.setJittered((Boolean)option.value);break;}}return builder.build();}"
2174	"public static void importTranslation(long projectId,long langId,Map<String,String> map) throws SystemException{List<Term> termList=TermLocalServiceUtil.findByProjectId(projectId);for(Term t : termList){if(map.containsKey(t.getTermName())){addDictionary(langId,t.getTermId(),map.get(t.getTermName()));}}}"
2175	"@Override public void actionPerformed(ActionEvent e){if(travelsList.getSelectedIndex()>0){new AddReservationFrame(agency,travelsList.getSelectedValue());}}"
2176	"public static Object getIdentifiableValue(OIdentifiable iCurrent,String iFieldName){if(iFieldName==null||iFieldName.length()==0){return null;} final char begin=iFieldName.charAt(0);if(begin=='@'){if(iFieldName.equalsIgnoreCase(ATTRIBUTE_THIS)){return iCurrent.getRecord();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_RID)){return iCurrent.getIdentity();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_RID_ID)){return iCurrent.getIdentity().getClusterId();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_RID_POS)){return iCurrent.getIdentity().getClusterPosition();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_VERSION)){return iCurrent.getRecord().getRecordVersion().getCounter();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_CLASS)){return ((ODocument)iCurrent.getRecord()).getClassName();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_TYPE)){return Orient.instance().getRecordFactoryManager().getRecordTypeName(ORecordInternal.getRecordType(iCurrent.getRecord()));}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_SIZE)){ final byte[] stream=iCurrent.getRecord().toStream();return stream!=null?stream.length:0;}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_FIELDS)){return ((ODocument)iCurrent.getRecord()).fieldNames();}else {if(iFieldName.equalsIgnoreCase(ATTRIBUTE_RAW)){return new String(iCurrent.getRecord().toStream());}}}}}}}}}}}if(iCurrent==null){return null;} final ODocument doc=((ODocument)iCurrent.getRecord());doc.checkForFields(iFieldName);ODocumentEntry entry=doc._fields.get(iFieldName);return entry!=null?entry.value:null;}"
2177	"@RequestMapping(value=""/{appId}"",method=RequestMethod.PUT,consumes={""application/json""},produces={""application/json""}) public ApplicationDTO updateApplication(Long appId,ApplicationDTO appDto){Application application=new Application();NdIO obj=new NdIO();application=appService.getApplicationByAppId(appId);application.setAppName(appDto.getAppName());application.setAppDesc(appDto.getAppDesc());application.setUserName(appDto.getUserName());application=appService.saveApplication(application);DCTopoAssociation dcTopoAssoc=dcTopoAssocService.getTopologyByDcTopoId(appDto.getDcTopoAssocId());String pathOfDirToDel=ConfigWorkPath.getWorkPath()+""/ndprof/""+dcTopoAssoc.getTopology().getTopoName()+""/""+application.getAppName();obj.deleteDir(pathOfDirToDel);Topology topo=topoService.getTopologyBytopoId(appDto.getTopoId());dcTopoAssoc.setTopology(topo);dcTopoAssocService.saveandUpdateDCTopoAsso(dcTopoAssoc);appDto.setTopoName(topo.getTopoName());String dirPath=ConfigWorkPath.getWorkPath()+""/ndprof/""+dcTopoAssoc.getTopology().getTopoName()+""/""+application.getAppName();obj.createDir(dirPath,application.getUserName());return appDto;}"
2178	"@Override public void afterTextChanged(Editable s){String str=s.toString();if(!str.equalsIgnoreCase("""")){count=Integer.parseInt(str);}}"
2179	"public void onClick(DialogInterface dialog,int whichButton){dialog.dismiss();}"
2180	"@Override public void mousePressed(MouseEvent e){if(e.getButton()==MouseEvent.BUTTON1){}}"
2181	"private void check3Line4(Context context,Line line1){if(!isEmpty(line1.getRoutes())){for(Route route : line1.getRoutes()){if(!isEmpty(route.getStopPoints())){for(StopPoint stopPoint : route.getStopPoints()){StopArea containedInStopArea=stopPoint.getContainedInStopArea();if(!line1.getTransportModeName().equals(containedInStopArea.getTransportModeName())){DataLocation location=buildLocation(context,containedInStopArea);ValidationReporter reporter=ValidationReporter.Factory.getInstance();reporter.addCheckPointReportError(context,LINE_4,location,""Transport mode of StopArea ""+containedInStopArea.getName()+"" does not match the transport mode for this line "");}StopArea parentStopArea=stopPoint.getContainedInStopArea().getParent();if(!line1.getTransportModeName().equals(parentStopArea.getTransportModeName())){DataLocation location=buildLocation(context,parentStopArea);ValidationReporter reporter=ValidationReporter.Factory.getInstance();reporter.addCheckPointReportError(context,LINE_4,location,""Transport mode of StopArea ""+parentStopArea.getName()+"" does not match the transport mode for this line "");}}}if(!isEmpty(route.getJourneyPatterns())){for(JourneyPattern jp : route.getJourneyPatterns()){if(!isEmpty(jp.getStopPoints())){for(StopPoint stopPoint : jp.getStopPoints()){StopArea containedInStopArea=stopPoint.getContainedInStopArea();if(!line1.getTransportModeName().equals(containedInStopArea.getTransportModeName())){DataLocation location=buildLocation(context,containedInStopArea);ValidationReporter reporter=ValidationReporter.Factory.getInstance();reporter.addCheckPointReportError(context,LINE_4,location,""Transport mode of StopArea ""+containedInStopArea.getName()+"" does not match the transport mode for this line "");}StopArea parentStopArea=stopPoint.getContainedInStopArea().getParent();if(!line1.getTransportModeName().equals(parentStopArea.getTransportModeName())){DataLocation location=buildLocation(context,parentStopArea);ValidationReporter reporter=ValidationReporter.Factory.getInstance();reporter.addCheckPointReportError(context,LINE_4,location,""Transport mode of StopArea ""+parentStopArea.getName()+"" does not match the transport mode for this line "");}}}}}}}}"
2182	"@Override public GeoEvent process(GeoEvent ge) throws Exception{try{ownerId=ge.getGeoEventDefinition().getOwner();List<FieldDefinition> fldDefs=ge.getGeoEventDefinition().getFieldDefinitions();for(FieldDefinition fd : fldDefs){if(fd.getType()!=FieldType.Geometry&&fd.getType()!=FieldType.Group){String n=fd.getName();String tk=tokenizer.tokenize(""geoevent.""+n);eventTokenMap.put(tk,n);}}ArrayList<Object> queries=CreateQueries(ge);MapGeometry geo=ge.getGeometry();MapGeometry inGeo=null;if(geoSrc.equals(""Buffer"")){inGeometry=constructGeometry(geo);Unit u=queryUnit(units);inGeo=constructBuffer(geo.getGeometry(),radius,u);}else {if(geoSrc.equals(""Event_Definition"")){String geostr=(String)ge.getField(eventfld);MapGeometry g=constructGeometryFromString(geostr);Geometry polyGeo=constructGeometry(g);inGeometry=polyGeo;com.esri.core.geometry.Geometry projGeo=GeometryEngine.project(polyGeo,srBuffer,srOut);inGeo=new MapGeometry(projGeo,srOut);}else {Geometry polyGeo=constructGeometry(geo);inGeometry=polyGeo;com.esri.core.geometry.Geometry projGeo=GeometryEngine.project(polyGeo,srBuffer,srOut);inGeo=new MapGeometry(projGeo,srOut);}}Geometry newGeo=inGeo.getGeometry();String jsonGeo=GeometryEngine.geometryToJson(srOut.getID(),newGeo);String geotype=GeometryUtility.parseGeometryType(newGeo.getType());HashMap<String,Object> responseMap=ExecuteRestQueries(jsonGeo,geotype,queries);Set<String> keys=responseMap.keySet();Iterator<String> it=keys.iterator();String k=it.next(); @SuppressWarnings(""unchecked"") HashMap<String,Object> response=(HashMap<String,Object>)responseMap.get(k); @SuppressWarnings(""unchecked"") Map<String,Object> fset=(HashMap<String,Object>)response.get(""fset""); @SuppressWarnings(""unchecked"") HashMap<String,Object> tokenmap=(HashMap<String,Object>)response.get(""tokenmap""); @SuppressWarnings(""unchecked"") List<Object> fieldlist=(List<Object>)fset.get(""fields""); @SuppressWarnings(""unchecked"") List<HashMap<String,Object>> features=(ArrayList<HashMap<String,Object>>)fset.get(""features"");List<FieldDefinition> qflddefs=GenerateNewFieldDefs(fieldlist,tokenmap);GeoEventDefinition geoDef=ge.getGeoEventDefinition();GeoEventDefinition edOut;edOut=geoDef.augment(qflddefs);if(edOut.getFieldDefinition(""TRACK_ID"")==null){List<FieldDefinition> flddefs=new ArrayList<FieldDefinition>();FieldDefinition trackdef=new DefaultFieldDefinition(""trackid"",FieldType.String,""TRACK_ID"");flddefs.add(trackdef);edOut=edOut.augment(flddefs);}edOut.setOwner(definition.getUri().toString());edOut.setName(outDefName);manager.addGeoEventDefinition(edOut);try{GeoEventDefinition ged=getEventDefinition(edOut);List<FieldGroup> featureFieldGroups=new ArrayList<FieldGroup>();for(int i=0;i<features.size();++i){HashMap<String,Object> f=features.get(i);if(f!=null){GeoEvent featureGE=createFeatureGeoEvent(f,tokenmap,edOut,ge,i+1);send(featureGE);}}}catch(ConfigurationException e){LOG.error(e);return null;}catch(GeoEventDefinitionManagerException e){LOG.error(e);return null;}catch(MessagingException e){LOG.error(e);return null;}catch(FieldException e){LOG.error(e);return null;}}catch(MessagingException e){LOGGER.error(""EVENT_SENT_FAILURE"",e);}return null;}"
2183	"@SuppressWarnings(""deprecation"") @EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerDropItem(PlayerDropItemEvent ev){InventoryUpdateEvent.TriggerUpdateInventoryEvent(ev.getPlayer(),ev.getItemDrop().getItemStack(),UpdateReason.DROPPEDITEM);if(GenericFunctions.isArtifactEquip(ev.getItemDrop().getItemStack())){ev.getItemDrop().setInvulnerable(true);}if(ev.getItemDrop().getItemStack().hasItemMeta()){if(ev.getItemDrop().getItemStack().getItemMeta().hasLore()){if(ev.getItemDrop().getItemStack().getItemMeta().getLore().size()>=4){if(ev.getItemDrop().getItemStack().getItemMeta().getLore().get(3).contains(ChatColor.DARK_PURPLE+""ID#"")){int itemcube_id=Integer.parseInt(ev.getItemDrop().getItemStack().getItemMeta().getLore().get(3).split(""#"")[1]);if(ev.getPlayer().getOpenInventory().getTitle().split(""#"").length>1&&itemcube_id==Integer.parseInt(ev.getPlayer().getOpenInventory().getTitle().split(""#"")[1])){List<ItemStack> itemlist=new ArrayList<ItemStack>();for(int i=0;i<ev.getPlayer().getOpenInventory().getTopInventory().getSize();i++){itemlist.add(ev.getPlayer().getOpenInventory().getTopInventory().getItem(i));} final Player p=ev.getPlayer();itemCube_saveConfig(itemcube_id,itemlist,((ev.getItemDrop().getItemStack().getType()==Material.CHEST)?CubeType.NORMAL:(ev.getItemDrop().getItemStack().getType()==Material.STORAGE_MINECART)?CubeType.LARGE:((CustomItem.isVacuumCube(ev.getItemDrop().getItemStack())))?CubeType.VACUUM:CubeType.ENDER));Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  @Override public void run(){    p.closeInventory();  }},1);}}}}}if(PlayerMode.isSlayer(ev.getPlayer())&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);PlayerStructure pd=PlayerStructure.GetPlayerStructure(ev.getPlayer());if(pd.lastassassinatetime+GenericFunctions.GetModifiedCooldown(TwosideKeeper.ASSASSINATE_COOLDOWN,ev.getPlayer())<=TwosideKeeper.getServerTickTime()){GenericFunctions.PerformAssassinate(ev.getPlayer(),ev.getItemDrop().getItemStack().getType());}else {sendNotReadyCastMessage(ev.getPlayer(),ChatColor.DARK_BLUE+""Assassinate"");}return ;}if(ev.getItemDrop().getItemStack().getType()==Material.SHIELD&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);if(ev.getPlayer().getEquipment().getItemInMainHand()==null||ev.getPlayer().getEquipment().getItemInMainHand().getType()==Material.AIR){ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());PlayerStructure pd=PlayerStructure.GetPlayerStructure(ev.getPlayer());if(pd.last_rejuvenate+GenericFunctions.GetModifiedCooldown(TwosideKeeper.REJUVENATE_COOLDOWN,ev.getPlayer())<=TwosideKeeper.getServerTickTime()&&PlayerMode.isDefender(ev.getPlayer())){GenericFunctions.PerformRejuvenate(ev.getPlayer());pd.last_rejuvenate=TwosideKeeper.getServerTickTime();aPlugin.API.damageItem(ev.getPlayer(),ev.getItemDrop().getItemStack(),400);sendSuccessfulCastMessage(ev.getPlayer());}else {sendNotReadyCastMessage(ev.getPlayer(),ChatColor.GREEN+""Rejuvenation"");}ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));}return ;}if(ev.getItemDrop().getItemStack().getType().name().contains(""_AXE"")&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);if(ev.getPlayer().getEquipment().getItemInMainHand()==null||ev.getPlayer().getEquipment().getItemInMainHand().getType()==Material.AIR){ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());PlayerStructure pd=PlayerStructure.GetPlayerStructure(ev.getPlayer());Player p=ev.getPlayer();boolean hasFullSet=ItemSet.hasFullSet(p,ItemSet.DAWNTRACKER);if(PlayerMode.getPlayerMode(p)==PlayerMode.BARBARIAN&&((hasFullSet&&pd.last_mock+GenericFunctions.GetModifiedCooldown(TwosideKeeper.MOCK_COOLDOWN/2,ev.getPlayer())<=TwosideKeeper.getServerTickTime())||pd.last_mock+GenericFunctions.GetModifiedCooldown(TwosideKeeper.MOCK_COOLDOWN,ev.getPlayer())<=TwosideKeeper.getServerTickTime())){pd.last_mock=getServerTickTime();List<LivingEntity> le=GenericFunctions.getNearbyMobs(p.getLocation(),12);for(LivingEntity ent : le){boolean allowed=true;if(ent instanceof Player&&PVP.isFriendly(ev.getPlayer(),(Player)ent)){allowed=false;}if(allowed){if(ent instanceof LivingEntity){GenericFunctions.addStackingPotionEffect(ent,PotionEffectType.WEAKNESS,20*15,5,2);}if(ent instanceof Monster){CustomDamage.provokeMonster((Monster)ent,p,ev.getItemDrop().getItemStack());CustomDamage.setAggroGlowTickTime((Monster)ent,20*15);}}}SoundUtils.playLocalSound(p,Sound.ENTITY_VILLAGER_AMBIENT,1.0,0.3);aPlugin.API.displayEndRodParticle(p.getLocation(),0,0.0,0.0,5,20);if(hasFullSet){aPluginAPIWrapper.sendCooldownPacket(p,ev.getItemDrop().getItemStack().getType(),GenericFunctions.GetModifiedCooldown(TwosideKeeper.MOCK_COOLDOWN/2,ev.getPlayer()));}else {aPluginAPIWrapper.sendCooldownPacket(p,ev.getItemDrop().getItemStack().getType(),GenericFunctions.GetModifiedCooldown(TwosideKeeper.MOCK_COOLDOWN,ev.getPlayer()));}sendSuccessfulCastMessage(p);}else {sendNotReadyCastMessage(ev.getPlayer(),ChatColor.GOLD+""Mock"");}ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));}return ;}if(ev.getItemDrop().getItemStack().getType()==Material.BOW&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);if(ev.getPlayer().getEquipment().getItemInMainHand()==null||ev.getPlayer().getEquipment().getItemInMainHand().getType()==Material.AIR){ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());GenericFunctions.PerformDodge(ev.getPlayer());GenericFunctions.PerformArrowBarrage(ev.getPlayer());GenericFunctions.PerformSiphon(ev.getPlayer());ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));}return ;}if(ev.getItemDrop().getItemStack().getType().toString().contains(""SWORD"")&&!GenericFunctions.isViewingInventory(ev.getPlayer())){if(ItemSet.hasFullSet(ev.getPlayer(),ItemSet.WINDRY)){ev.setCancelled(true);ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());GenericFunctions.performWindSlash(ev.getPlayer());ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));return ;}else {if(ItemSet.hasFullSet(ev.getPlayer(),ItemSet.LUCI)){ev.setCancelled(true);ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());GenericFunctions.performBeastWithin(ev.getPlayer());ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));return ;}}}if(GenericFunctions.holdingNoShield(ev.getPlayer())&&ev.getItemDrop().getItemStack().getType().toString().contains(""SWORD"")&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);PlayerStructure pd=(PlayerStructure)playerdata.get(ev.getPlayer().getUniqueId());boolean second_charge=(CustomDamage.isInIframe(ev.getPlayer())||(ev.getPlayer().hasPotionEffect(PotionEffectType.SLOW)&&GenericFunctions.getPotionEffectLevel(PotionEffectType.SLOW,ev.getPlayer())==20));if((ev.getPlayer().isOnGround()||second_charge)&&pd.last_strikerspell+GenericFunctions.GetModifiedCooldown(TwosideKeeper.LINEDRIVE_COOLDOWN,ev.getPlayer())<getServerTickTime()){if(pd.target!=null&&!pd.target.isDead()){pd.target.setNoDamageTicks(0);}ev.getPlayer().getEquipment().setItemInMainHand(ev.getItemDrop().getItemStack());if(PlayerMode.isStriker(ev.getPlayer())){ev.getItemDrop().setPickupDelay(0);GenericFunctions.PerformLineDrive(ev.getPlayer(),ev.getItemDrop().getItemStack(),second_charge);}ev.getPlayer().getEquipment().setItemInMainHand(new ItemStack(Material.AIR));TwosideKeeper.sendSuccessfulCastMessage(ev.getPlayer());}else {TwosideKeeper.sendNotReadyCastMessage(ev.getPlayer(),ChatColor.RED+""Line Drive"");}}else {if(ev.getItemDrop().getItemStack().getType().toString().contains(""SWORD"")&&!GenericFunctions.isViewingInventory(ev.getPlayer())){ev.setCancelled(true);}}ItemSet.updateItemSets(ev.getPlayer());return ;}"
2184	"public void clickUndo(){if(paths.size()>1){undonePaths.add(paths.remove(paths.size()-2));invalidate();}}"
2185	"public static boolean find(int[][] mat,int x){int rowLow=0;int colLow=0;int rowHigh=mat.length;int colHigh=mat.length;if(mat[rowLow][colLow]<=x&&mat[rowHigh-1][colHigh-1]>=x){while(rowLow<rowHigh&&colLow<colHigh){int rowMid=(rowLow+rowHigh)/2;int colMid=(colLow+colHigh)/2;if(mat[rowMid][colMid]==x){return true;}if(mat[rowMid][colMid]>x){if(mat[rowMid][colLow]==x){return true;}if(mat[rowMid][colLow]>x){if(mat[rowLow][colMid]==x){return true;}if(mat[rowLow][colMid]>x){if(mat[rowLow][colLow]==x){return true;}if(mat[rowLow][colLow]<x){rowHigh=rowMid+1;colHigh=colMid;}}if(mat[rowLow][colMid]<x){colLow=colMid;rowHigh=rowMid;}}if(mat[rowMid][colLow]<x){colHigh=colMid;rowLow=rowMid;}}if(mat[rowMid][colMid]<x){colLow=colMid;rowLow=rowMid;}}}return false;}"
2186	"@Override public void run(){backPressedToExitOnce=false;}"
2187	"void applicationExitAction(){FovastApplication.getApplication().exit();}"
2188	"@Override public void create(Computer computer){Connection connexion=null;PreparedStatement preparedStatement=null;int resultSet;String name=computer.getName();Date introduced=computer.getIntroduced();Date discontinued=computer.getDiscontinued();long company_id=computer.getCompany().getId();try{connexion=DAO.connect;preparedStatement=initPreparedStatement(connexion,SQL_CREATE_COMPUTER,false,name,introduced,discontinued,company_id);resultSet=preparedStatement.executeUpdate();System.out.println(resultSet);}catch(SQLException e){throw new DAOException(e);}finally{silentCloses(preparedStatement,connexion);}}"
2189	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_plik);ButterKnife.bind(this);getSupportActionBar().setTitle(R.string.lekcje_nowy_modul_title);if(LekcjeHelper.getModul().getPlik()==0){changeViewToAdd();}else {PlikORM plik=Plik.getById(LekcjeHelper.getModul().getPlik(),true);plikView.setImageBitmap(FileHelper.getThumbnailFromStorage(plik.getThumb()));}buttonAdd.setOnClickListener(this);buttonNext.setOnClickListener(this);tourGuide=AppHelper.makeTourGuide(this,R.string.tourGuide_modul_dodaj_plik,Gravity.TOP,null);if(tourGuide!=null){tourGuide.playOn(buttonAdd);}}"
2190	"public int streampos(){return streampos;}"
2191	"public File handleSaveFile(CommonPara commonPara,String path) throws Exception{String md5=DigitalUtility.createDigestByIdentity(commonPara.getUserId());String deep1=md5.substring(0,2);String targetFileName=md5.substring(2);StringBuffer webTargetPath=new StringBuffer();webTargetPath.append(USER_HOME).append(path).append(deep1).append(""/"").append(targetFileName).append("".png"");File fileDir=new File(webTargetPath.toString());fileDir.getParentFile().mkdir();fileDir.createNewFile();File file=new File(fileDir.getParentFile(),fileDir.getName());return file;}"
2192	"@Override public void onPositiveClick(Bundle resultBundle){}"
2193	"public String toString(DbClient dbClient,ProtectionSystem ps,int... noOfTabs){StringBuffer buff=new StringBuffer(); final String TAB=""\t"";String printTabs=TAB;if(noOfTabs.length>0&&noOfTabs[0]>0){for(int i=0;i<noOfTabs[0];i++){printTabs+=TAB;}}VirtualArray varray=dbClient.queryObject(VirtualArray.class,getVirtualArray());VirtualPool vpool=getVirtualPool();StoragePool storagePool=dbClient.queryObject(StoragePool.class,getSourceStoragePool());StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getSourceStorageSystem());buff.append(printTabs+String.format(""Resource Count	: %s %n"",this.getResourceCount()));String siteName=((ps.getRpSiteNames()!=null)?ps.getRpSiteNames().get(this.getInternalSiteName()):"""");String siteId=this.getInternalSiteName();if(this.getInternalSiteName()==null){siteName=""(no RP protection specified)"";siteId="""";}buff.append(printTabs+String.format(""Internal Site	: %s %s %n"",siteName,siteId));buff.append(printTabs+String.format(""Virtual Array 	: %s %n"",varray.getLabel()));buff.append(printTabs+String.format(""Virtual Pool  	: %s %n"",vpool.getLabel()));if(virtualVolumeRecommendation!=null&&virtualVolumeRecommendation.getVPlexStorageSystem()!=null){StorageSystem vplexStorageSystem=dbClient.queryObject(StorageSystem.class,virtualVolumeRecommendation.getVPlexStorageSystem());buff.append(printTabs+String.format(""VPLEX Storage	: %s %n"",vplexStorageSystem.getLabel()));}buff.append(printTabs+String.format(""Storage Pool 	: %s %n"",storagePool.getLabel()));buff.append(printTabs+String.format(""Storage System	: %s %n"",storageSystem.getLabel()));buff.append(printTabs+String.format(""Resource Size	: %s GB %n"",SizeUtil.translateSize(this.getSize(),SizeUtil.SIZE_GB)));buff.append(String.format(""----------------------%n""));if(this.getHaRecommendation()!=null){buff.append(printTabs+String.format(""High Availability Recommendation : %n""));buff.append(getHaRecommendation().toString(dbClient,ps,1));if(this.getHaRecommendation().getTargetRecommendations()!=null&&!this.getHaRecommendation().getTargetRecommendations().isEmpty()){buff.append(printTabs+String.format(""High Availability Target : %n""));for(RPRecommendation haTargetRec : this.getHaRecommendation().getTargetRecommendations()){buff.append(String.format(""%s"",haTargetRec.toString(dbClient,ps,1)));}}}return buff.toString();}"
2194	"@Override public void onTextChanged(CharSequence charSequence,int i,int i1,int i2){}"
2195	"protected FilterMapResult<T,E> filterAdd(FilterMapResult<T,E> value,boolean before,boolean isAdding){FilterMapResult<T,I> top=theCollection.reverseTop((FilterMapResult<T,I>)value);if(top.error==null&&getParent()!=null){FilterMapResult<I,E> intermediate=(FilterMapResult<I,E>)top;intermediate.source=top.result;getParent().filterAdd(intermediate,before,isAdding);}return value;}"
2196	"@Override protected void onStart(){super.onStart();SexyTopo.context=this;setOrientation();}"
2197	"@Override public boolean apply(Object o){return true;}"
2198	"public void deleteProduit(Produit p){Produit produit_=null;for(Produit p_ : produits){if(p.getNom().equals(p_.getNom())){produit_=p_;break;}}}"
2199	"@Override public void onClick(View view){switch (view.getId()){case R.id.buttonNext :SharedPreferences.Editor ed=sPref.edit();Intent intent=new Intent(this,Launcher.class);if(viewPager.getCurrentItem()<fragmentsPagerAdapter.getCount()-1){viewPager.setCurrentItem(viewPager.getCurrentItem()+1);}else {if(viewPager.getCurrentItem()+1==fragmentsPagerAdapter.getCount()){isChecked=((RadioButton)findViewById(R.id.radioButton46)).isChecked();if(isChecked){ed.putInt(""portret"",4);ed.putInt(""landscape"",6);}else {ed.putInt(""portret"",5);ed.putInt(""landscape"",7);}ed.apply();startActivity(intent);this.finish();}}}}"
2200	"public synchronized String getPlayerName(User user,String uuid){if((uuid==null)||uuid.equalsIgnoreCase(""null"")){plugin.debug(""Null UUID"");return null;}String name="""";String storedName=user.getData().getString(""PlayerName"");java.util.UUID u=java.util.UUID.fromString(uuid);Player player=Bukkit.getPlayer(uuid);if(player==null){OfflinePlayer p=Bukkit.getOfflinePlayer(u);if(p.getFirstPlayed()!=0){name=p.getName();}else {name=storedName;if(name==null||name.equals("""")){name=Thread.getInstance().getThread().getName(u);}}}else {name=player.getName();}if(name!=null&&!name.equals("""")){if(!name.equals(storedName)&&!storedName.equals("""")){user.getData().setString(""PlayerName"",name);}}else {name=""Error getting name"";}return name;}"
2201	"@EventHandler(ignoreCancelled=true) public void onPlayerInterAct(PlayerInteractEvent e){if(e.getAction()!=Action.LEFT_CLICK_BLOCK){return ;}Game g=Main.getInstance().getGameManager().getArena(e.getPlayer());if(g==null){return ;}Spleef spleef=(Spleef)g;if(!spleef.containsBlock(e.getClickedBlock().getLocation())){e.setCancelled(true);}if(e.getItem().getType()!=Material.valueOf(Config.SETTINGS_PLAYER_TOOL.getString())){e.setCancelled(true);}spleef.breakBlock(e.getClickedBlock());}"
2202	"private String addInterest(ArrayList<String> interests){ArrayList<String> existingInterest=UserInfo.userInfo.getInterests();for(String interest : interests){interests.set(interests.indexOf(interest),interest.replace(""\"""",""""));}ArrayList<String> alreadyAddedList=new ArrayList<>();int size=interests.size();for(int i=0;i<size;i++){if(existingInterest.contains(interests.get(i))){alreadyAddedList.add(interests.get(i));}}for(String i : alreadyAddedList){interests.remove(i);}String ut="""";if(interests.size()>0){ut=""I've just added "";for(String i : interests){UserInfo.userInfo.addInterests(i);ut+=i+"", "";}UserInfo.userInfo.updateFirebase();ut=ut.substring(0,ut.length()-2)+"" to your interests. "";if(alreadyAddedList.size()>0){ut+=""I did not add "";for(String interest : alreadyAddedList){ut+=interest+"", "";}ut=ut.substring(0,ut.length()-2)+"", because it was already added to your interests. "";}return ut;}if(alreadyAddedList.size()>0){ut+=""I have already added: "";for(String interest : alreadyAddedList){ut+=interest+"", "";}ut=ut.substring(0,ut.length()-2)+""."";}return ut;}"
2203	"@RequestMapping(value=""/user/{username}"",method=RequestMethod.PUT) public void editUserController(String username,UserCustom userCustom,HttpServletRequest request,HttpServletResponse response) throws Exception{username=new String(username.getBytes(""ISO-8859-1""),""utf8"");String token=request.getHeader(""Access-Token"");String username_token=tokenManager.getUsername(token);if(!username_token.equals(username)){throw new TokenException();}userCustom.setUsername(username);UserQueryVo userQueryVo=new UserQueryVo();userQueryVo.setUserCustom(userCustom);UserCustom check=userService.findUserByUserName(userQueryVo);if(check==null){throw new UserNotFoundException();}if(userCustom.getEmail()!=null||userCustom.getAddress()!=null||userCustom.getOccupation()!=null||userCustom.getPhone()!=null||userCustom.getName()!=null){userService.updateUserInfo(userQueryVo);}response.setStatus(HttpStatus.OK.value());}"
2204	"public void run(){try{BufferedReader in=new BufferedReader(new InputStreamReader(System.in));while(!isInterrupted()){String message=in.readLine();this.out.println(message);this.out.flush();}}catch(IOException ioe){}}"
2205	"public void run(){try{while(mapIpLink.size()<4){Socket connection=serverSocket.accept();threadPool.submit(new ClientTask(mapIpLink,connection,localRouter));}}catch(IOException e){e.printStackTrace();}}"
2206	"public void validateRequiredData(PersonalDataDto dto,Errors err){ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.salutation"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.firstName"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.lastName"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.birthName"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.birthDay"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.placeOfBirth"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.countryOfBirth"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.citizenship"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.maritalStatus"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalInformationDto.noOfChildren"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.nameOfMother"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.birthOfMother"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.professionOfMother"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.nameOfFather"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.birthOfFather"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.parentsInformationDto.professionOfFather"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.street"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.residence"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.zipCode"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.country"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.phoneType1"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.telephoneNumber1"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.phoneType2"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.residentialAddressDto.telephoneNumber2"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.areaOfSpecializationDto.specialization"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.areaOfSpecializationDto.alternativeSpecialization"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.areaOfSpecializationDto.professional"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.areaOfSpecializationDto.federalState"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.travelPassportNameDto.firstName"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.travelPassportNameDto.lastName"",""required.field"");ValidationUtils.rejectIfEmptyOrWhitespace(err,""personalDataDto.personalDataOtherSectionDto.validPassport"",""required.field"");if(dto.getPersonalInformationDto().getPassportDto().getFile()==null||dto.getPersonalInformationDto().getPassportDto().getFile().isEmpty()){err.rejectValue(""personalDataDto.personalInformationDto.passportDto.file"",""required.field"");}if(dto.getUploadDocumentsDto().getBirthCertificate().getFile()==null||dto.getUploadDocumentsDto().getBirthCertificate().getFile().isEmpty()){err.rejectValue(""personalDataDto.uploadDocumentsDto.birthCertificate.file"",""required.field"");}if(dto.getUploadDocumentsDto().getNameChange().getFile()==null||dto.getUploadDocumentsDto().getNameChange().getFile().isEmpty()){err.rejectValue(""personalDataDto.uploadDocumentsDto.nameChange.file"",""required.field"");}if(dto.getUploadDocumentsDto().getGoodStanding().getFile()==null||dto.getUploadDocumentsDto().getGoodStanding().getFile().isEmpty()){err.rejectValue(""personalDataDto.uploadDocumentsDto.goodStanding.file"",""required.field"");}if(dto.getUploadDocumentsDto().getPreviousConviction().getFile()==null||dto.getUploadDocumentsDto().getPreviousConviction().getFile().isEmpty()){err.rejectValue(""personalDataDto.uploadDocumentsDto.previousConviction.file"",""required.field"");}}"
2207	"@Override public void exec(String[] c){super.exec(c);if(c[2].equals(""basicAttack"")&&basicAttack.isNotOnCooldown()&&!basicAttack.isSetup()){xTarget=basicAttack.getTarget().x;yTarget=basicAttack.getTarget().y;}}"
2208	"public String post(AccountDomainWrapper account,BindingResult errors,boolean userEnabled,String providerIdentifier,ProviderService providerService,MessageSource messageSource,MessageSourceService messageSourceService,AccountService accountService,AdministrationService administrationService,ProviderManagementService providerManagementService,AccountValidator accountValidator,PageModel model,HttpServletRequest request){accountValidator.validate(account,errors);Map<Integer,String> attributesMap=getAttributeMap(""providerAttributeId_"",request);Map<Integer,String> attributeTypesMap=getAttributeMap(""attributeTypeId_"",request);if(!errors.hasErrors()){try{Provider provider=account.getProvider();if(StringUtils.isNotBlank(providerIdentifier)){provider.setIdentifier(providerIdentifier);}if(attributesMap.size()>0){for(Integer id : attributesMap.keySet()){ProviderAttribute providerAttribute=providerService.getProviderAttribute(id);if(providerAttribute!=null){providerAttribute.setValueReferenceInternal(attributesMap.get(id));}}}else {if(attributeTypesMap.size()>0){for(Integer typeId : attributeTypesMap.keySet()){ProviderAttributeType providerAttributeType=providerService.getProviderAttributeType(typeId);if(providerAttributeType!=null){ProviderAttribute attr=new ProviderAttribute();attr.setAttributeType(providerAttributeType);attr.setValueReferenceInternal(attributeTypesMap.get(typeId));provider.addAttribute(attr);}}}}accountService.saveAccount(account);request.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,messageSourceService.getMessage(""Provider saved""));request.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE,""true"");return ""redirect:/providermanagement/editProvider.page?personId=""+account.getPerson().getId();}catch(Exception e){log.warn(""Some error occurred while saving account details:"",e);request.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_ERROR_MESSAGE,messageSourceService.getMessage(""Failed to save provider"",new Object{e.getMessage()},Context.getLocale()));}}else {sendErrorMessage(errors,messageSource,request);}model.addAttribute(""errors"",errors);model.addAttribute(""account"",account);model.addAttribute(""providerRoles"",providerManagementService.getAllProviderRoles(false));return ""redirect:/providermanagement/editProvider.page"";}"
2209	"private PostalCode getPostalCode(Optional<String> address,Optional<String> postalCode) throws IllegalValueException{Pattern pattern=Pattern.compile(""(?<postalCode>(?<!\\d)\\d{6}(?!\\d))"");Matcher match=pattern.matcher(address.get());if(!postalCode.isPresent()&&match.find()){return ParserUtil.parsePostalCode(Optional.ofNullable(match.group(""postalCode""))).get();}else {if(!postalCode.isPresent()){return new PostalCode("""");}else {return ParserUtil.parsePostalCode(postalCode).get();}}}"
2210	"public void update(Message lastMessage,int playerY,int playerTotalY){if(lastMessage!=null){x=lastMessage.x;y=playerY-playerTotalY+lastMessage.y;}}"
2211	"@Override public void keyPressed(KeyEvent e){if(state.equals(STATE.PLAY)){player.keyPressed(e);if(e.getKeyCode()==KeyEvent.VK_SPACE){bullets.add(new Bullet());}}}"
2212	"@Override public void setMergedData(ReductionData data){exists=data.exists;}"
2213	"public void pointerReleased(int x,int y){rippleMotion=null;boolean isScrollWheeling=Display.INSTANCE.impl.isScrollWheeling();if(buttonsAwatingRelease!=null&&buttonsAwatingRelease.size()==1){Component atXY=getComponentAt(x,y);Component pendingButton=(Component)buttonsAwatingRelease.get(0);if(atXY==pendingButton){buttonsAwatingRelease=null;pointerReleased(x,y);return ;}if(pendingButton instanceof Button){Button b=(Button)pendingButton;int relRadius=b.getReleaseRadius();if(relRadius>0){Rectangle r=new Rectangle(b.getAbsoluteX()-relRadius,b.getAbsoluteY()-relRadius,b.getWidth()+relRadius*2,b.getHeight()+relRadius*2);if(r.contains(x,y)){buttonsAwatingRelease=null;pointerReleased(b.getAbsoluteX()+1,b.getAbsoluteY()+1);return ;}}}}if(pointerReleasedListeners!=null&&pointerReleasedListeners.hasListeners()){ActionEvent ev=new ActionEvent(this,ActionEvent.Type.PointerReleased,x,y);pointerReleasedListeners.fireActionEvent(ev);if(ev.isConsumed()){return ;}}if(dragStopFlag){dragStopFlag=false;dragged=null;return ;}if(dragged==null){if(menuBar.contains(x,y)){Component cmp=menuBar.getComponentAt(x,y);if(cmp!=null&&cmp.isEnabled()){cmp.pointerReleased(x,y);}return ;}if(stickyDrag!=null){stickyDrag.pointerReleased(x,y);repaint();}else {Container actual=getActualPane();if(y>=actual.getY()&&x>=actual.getX()){Component cmp=actual.getComponentAt(x,y);while(cmp!=null&&cmp.isIgnorePointerEvents()){cmp=cmp.getParent();}if(cmp!=null&&cmp.isEnabled()){if(cmp.hasLead){Container leadParent;if(cmp instanceof Container){leadParent=((Container)cmp).getLeadParent();}else {leadParent=cmp.getParent().getLeadParent();}leadParent.repaint();if(!isScrollWheeling){setFocused(leadParent);}cmp.getLeadComponent().pointerReleased(x,y);}else {if(cmp.isEnabled()){if(!isScrollWheeling&&cmp.isFocusable()){setFocused(cmp);}cmp.pointerReleased(x,y);}}}}else {if(y<actual.getY()){Component cmp=getTitleArea().getComponentAt(x,y);while(cmp!=null&&cmp.isIgnorePointerEvents()){cmp=cmp.getParent();}if(cmp!=null&&cmp.isEnabled()){cmp.pointerReleased(x,y);}}else {Component cmp=((BorderLayout)super.getLayout()).getWest();if(cmp!=null){cmp=((Container)cmp).getComponentAt(x,y);while(cmp!=null&&cmp.isIgnorePointerEvents()){cmp=cmp.getParent();}if(cmp!=null&&cmp.isEnabled()){if(cmp.hasLead){Container leadParent;if(cmp instanceof Container){leadParent=((Container)cmp).getLeadParent();}else {leadParent=cmp.getParent().getLeadParent();}leadParent.repaint();if(!isScrollWheeling){setFocused(leadParent);}cmp=cmp.getLeadComponent();cmp.pointerReleased(x,y);}else {cmp.pointerReleased(x,y);}}}}}}}else {if(dragged.isDragAndDropInitialized()){dragged.dragFinishedImpl(x,y);dragged=null;}else {dragged.pointerReleased(x,y);dragged=null;}}stickyDrag=null;if(buttonsAwatingRelease!=null&&!Display.getInstance().isRecursivePointerRelease()){for(int iter=0;iter<buttonsAwatingRelease.size();iter++){Button b=(Button)buttonsAwatingRelease.get(iter);b.setState(Button.STATE_DEFAULT);b.repaint();}buttonsAwatingRelease=null;}}"
2214	"public void refreshMovieData(){if(sortBySetting!=""favorites""){MovieDataFetcher refresher=new MovieDataFetcher(getActivity(),getActivity(),mImageAdapter,sortBySetting);refresher.execute();}}"
2215	"public void process(CruiseConfig cruiseConfig){for(PipelineConfig pipelineConfig : cruiseConfig.getAllPipelineConfigs()){if(pipelineConfig.hasTemplate()){CaseInsensitiveString templateName=pipelineConfig.getTemplateName();PipelineTemplateConfig pipelineTemplate=cruiseConfig.findTemplate(templateName);if(pipelineTemplate!=null&&!pipelineConfig.hasTemplateApplied()){pipelineConfig.usingTemplate(pipelineTemplate);}}}}"
2216	"@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){if(!scaleListener.isScaling()){verses.get(position).setSelected(true);bookActivity.setSelectable(true);return true;}else {return false;}}"
2217	"@Override public void onResponse(Call<RestService<List<Book>>> call,Response<RestService<List<Book>>> response){if(response.body().getData().size()>0){tvNoMatchingBook.setVisibility(View.GONE);mBooks=response.body().getData();mAdapter=new SearchBookListAdapter(getContext(),mBooks);rvBooks.setAdapter(mAdapter);RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false);rvBooks.setLayoutManager(layoutManager);}else {tvNoMatchingBook.setVisibility(View.VISIBLE);}}"
2218	"@Override protected void codeTextFieldKeyTyped(java.awt.event.KeyEvent evt){this.actionPerformed(new ActionEvent(this,0,MaxLengthDocument.CHANGED_ACTION_STRING));if(dictionary!=null&&evt.getKeyChar()=='?'){if(categoryCombo.isVisible()){this.categoryCombo.showPopup();}else {if(descriptionCombo.isVisible()){this.descriptionCombo.showPopup();}}}else {if(evt.getKeyChar()==KeyEvent.VK_ENTER||evt.getKeyChar()==KeyEvent.VK_TAB){if(this.codeTextField.getBackground()==VARIABLE_OK_COLOR&&this.descriptionCombo.getSelectedIndex()!=-1){this.descriptionCombo.setFocusable(false);if(this.dictionary.isCompoundDictionary()){this.categoryCombo.setFocusable(false);}transferFocusToNext();this.descriptionCombo.setFocusable(true);if(this.dictionary.isCompoundDictionary()){this.categoryCombo.setFocusable(true);}}else {transferFocusToNext();}}else {if(evt.getKeyChar()=='+'){evt.consume();transferFocusToPrevious();}}}}"
2219	"@Override public void onSensorChanged(SensorEvent event){if(event.sensor.getType()==Sensor.TYPE_PROXIMITY){if(event.values[0]>=-SENSOR_SENSITIVITY&&event.values[0]<=SENSOR_SENSITIVITY){System.out.println(""####################################### near ######################################"");if(!wakeLock.isHeld()){wakeLock.acquire();}}else {System.out.println(""*************************************** far ****************************************"");if(wakeLock.isHeld()){wakeLock.release();}}}}"
2220	"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean b){super.addInformation(stack,player,list,b);IGunData data=getData(stack);if(data!=null){GunInstance gun=getGunInstance(stack,player);list.add(""Type: ""+data.getGunType());list.add(""Ammo: ""+data.getAmmoType().getDisplayString());if(gun!=null){list.add(""Chamber: ""+(gun.getChamberedRound()!=null?gun.getChamberedRound().getDisplayString():""empty""));if(gun.getLoadedClip()!=null){if(gun.getLoadedClip().getMaxAmmo()>1){list.add(""Rounds: ""+gun.getLoadedClip().getAmmoCount()+""/""+gun.getLoadedClip().getMaxAmmo());}}else {list.add(""ReloadType: ""+LanguageUtility.capitalizeFirst(data.getReloadType().name().toLowerCase()));}}else {list.add(""Error: Gun instance is null"");}}else {list.add(""Error: Gun data is null"");}}"
2221	"private void processVariable(DetailAST ast){if(!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)&&(ScopeUtils.isLocalVariableDef(ast)||ast.getType()==TokenTypes.PARAMETER_DEF)){ final DetailAST nameAST=ast.findFirstToken(TokenTypes.IDENT); final String name=nameAST.getText();if(isStaticOrInstanceField(ast,name)&&!isMatchingRegexp(name)&&!isIgnoredSetterParam(ast,name)&&!isIgnoredConstructorParam(ast)&&!isIgnoredParamOfAbstractMethod(ast)){log(nameAST,MSG_KEY,name);}}}"
2222	"public void run(){if(networkBound){if(networkBinder.isConnectedToServer()){if(G.mode==Mode.MAP){if(numUpdates>=5){networkBinder.sendGameStateRequest(new NetworkMessage(""GetGameObjects""));numUpdates=0;waitingForItems=true;Log.i(""Items"",""Requesting game objects"");}networkBinder.sendGameStateRequest(new NetworkMessage(""GetPlayers""));waitingForPlayers=true;numUpdates++;if(!waitingForAccept){if(currentRegion!=null&&currentRegion.ordinal()<7&&!foundPokeInRegion){double prob=G.random.nextDouble();double total=0;ArrayList<BasePokemon> pokes_in_region=G.pokemon_by_region[currentRegion.ordinal()];for(int i=0;i<pokes_in_region.size();i++){BasePokemon base=pokes_in_region.get(i);total+=base.catchrate/2.0;if(prob<total){networkReqLock=true;genPokemon=new Pokemon(base.index,base.baseLevel+G.random.nextInt(5));foundPokeInRegion=true;battleInitMessage=null;initiateBattle();break;}}}}}}else {if(!busyConnecting){Log.i(NetworkVariables.TAG,""Trying to connect to game server..."");networkBinder.ConnectToServer();busyConnecting=true;}}}else {if(!busyBinding){Log.i(NetworkVariables.TAG,""Trying to rebind network service"");createConnection();}}networkUpdater.postDelayed(updater,200);}"
2223	"private void stepAllCreep(float delta){for(int i=0;i<creepsManager.amountCreeps();i++){Creep creep=creepsManager.getCreep(i);Node oldPosition=creep.getNewPosition();if(creep.isAlive()){Node newPosition=creep.move(delta);if(newPosition!=null){if(!newPosition.equals(oldPosition)){field[oldPosition.getX()][oldPosition.getY()].removeCreep(creep);field[newPosition.getX()][newPosition.getY()].setCreep(creep);}}else {field[oldPosition.getX()][oldPosition.getY()].removeCreep(creep);if(creep.player==0){missedCreepsForPlayer1++;}else {if(creep.player==1){missedCreepsForComputer0++;}}creepsManager.removeCreep(creep);}}else {if(!creep.changeDeathFrame(delta)){field[oldPosition.getX()][oldPosition.getY()].removeCreep(creep);creepsManager.removeCreep(creep);}}}}"
2224	"public void actionPerformed(ActionEvent action){try{ final String databasePath=preferences.getFile(PreferencePanel.DATABASE).getAbsolutePath(); final String testFilePath=preferences.getFile(PreferencePanel.TEST_FILE).getAbsolutePath(); final boolean isCartCalc=!preferences.getCart();log.info(""Started Test with params: \r\nDatabase: ""+databasePath+""\r\nTest File: ""+testFilePath+""\r\nIs Cart Calculation: ""+isCartCalc);new Thread(){  public void run(){    runTests(databasePath,testFilePath,isCartCalc);    appendMainText(""Final Results:\r\nNumber Of Tests: "" + TxtAreaAppender.resultCounter + ""\r\nErrors: ""+ TxtAreaAppender.errorCounter);    TxtAreaAppender.resultCounter=0;    TxtAreaAppender.errorCounter=0;  }}.start();}catch(Exception e){log.error(""Something went wrong, please make sure files are correct"",e);}}"
2225	"@SuppressWarnings(""unchecked"") public SOCPlayerNumbers(SOCBoard board) throws IllegalArgumentException{ final int boardEncodingFormat=board.getBoardEncodingFormat();hasSeaBoard=boardEncodingFormat==SOCBoardLarge.BOARD_ENCODING_LARGE;landHexCoords=board.getLandHexCoords();numbersForResource=new Vector[SOCResourceConstants.MAXPLUSONE-1];for(int i=SOCResourceConstants.CLAY;i<=SOCResourceConstants.WOOD;i++){numbersForResource[i]=new Vector<Integer>();}resourcesForNumber=new Vector[13];for(int i=0;i<13;i++){resourcesForNumber[i]=new Vector<Integer>();}numberAndResourceForHex=new Hashtable<Integer,Vector<IntPair>>();}"
2226	"public static Profile getProfileOpt(Name name){if(!isAllowedProfileName(name.getName())){return null;}Name nameReloaded=DBSet.getInstance().getNameMap().get(name.getName());if(nameReloaded==null){return null;}return new Profile(nameReloaded);}"
2227	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);auth=FirebaseAuth.getInstance();if(auth.getCurrentUser()!=null){startActivity(new Intent(this,MainActivity.class));finish();}setContentView(R.layout.activity_login);Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar);inputEmail=(EditText)findViewById(R.id.email);inputPassword=(EditText)findViewById(R.id.password);progressBar=(ProgressBar)findViewById(R.id.progressBar);btnSignup=(Button)findViewById(R.id.btn_signup);btnLogin=(Button)findViewById(R.id.btn_login);btnReset=(Button)findViewById(R.id.btn_reset_password);auth=FirebaseAuth.getInstance();btnSignup.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(LoginActivity.this,SignupActivity.class));  }});btnReset.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(LoginActivity.this,ResetPasswordActivity.class));  }});btnLogin.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    String email=inputEmail.getText().toString();    final String password=inputPassword.getText().toString();    if (TextUtils.isEmpty(email)) {      Toast.makeText(getApplicationContext(),R.string.eamil,Toast.LENGTH_SHORT).show();      return;    }    if (TextUtils.isEmpty(password)) {      Toast.makeText(getApplicationContext(),R.string.pass,Toast.LENGTH_SHORT).show();      return;    }    progressBar.setVisibility(View.VISIBLE);    auth.signInWithEmailAndPassword(email,password).addOnCompleteListener(LoginActivity.this,new OnCompleteListener<AuthResult>(){      @Override public void onComplete(      @NonNull Task<AuthResult> task){        progressBar.setVisibility(View.GONE);        if (!task.isSuccessful()) {          if (password.length() < 6) {            inputPassword.setError(getString(R.string.minimum_password));          } else {            Toast.makeText(LoginActivity.this,getString(R.string.auth_failed),Toast.LENGTH_LONG).show();          }        } else {          Intent intent=new Intent(LoginActivity.this,MainActivity.class);          startActivity(intent);          finish();        }      }    });  }});}"
2228	"@Override public boolean process(Intent cptIntent) throws IOException,ClassNotFoundException{super.process(cptIntent);switch (cptIntent.getAction()){case Communication.ACTION_MESSAGE_ARRIVED : final IncomingMessage message=cptIntent.getParcelableExtra(Communication.EXTRA_MESSAGE_ARRIVED);Serializable data=message.getPayload().getAppData();if(data instanceof TicTacToeGame){GameFragment gameFragment=(GameFragment)getSupportFragmentManager().findFragmentByTag(GameFragment.TAG);if(gameFragment!=null){gameFragment.refreshGame();}return true;}}return false;}"
2229	"@Override public boolean test(int rowIndex){boolean result;if(Converters.checkNull(this.column).isMissing(rowIndex)){result=false;}else {switch (column.getDescription().kind){case Integer :result=column.getInt(rowIndex)==(Integer)this.compareValue;break;case Category :case String :case Json :default :result=Objects.equals(column.getString(rowIndex),this.compareValue);}}return this.complement?!result:result;}"
2230	"@Override public void onResume(){super.onResume();SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);haveDLd=MainActivity.onResume_helper(sp,DUPED_BOOL);wifi_Only=sp.getBoolean(""WIFI_ONLY"",false);dl_Id=sp.getLong(DOWNLOAD_TAG,0);IntentFilter intentFilter=new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE);registerReceiver(myReceiver,intentFilter);}"
2231	"public void valueChanged(ListSelectionEvent listSelectionEvent){boolean adjust=listSelectionEvent.getValueIsAdjusting();System.out.println(""OK: ""+ok);if(ok){ok=false;return ;}JList list=(JList)listSelectionEvent.getSource();int selected=list.getSelectedIndex();int previous=selected==listSelectionEvent.getFirstIndex()?listSelectionEvent.getLastIndex():listSelectionEvent.getFirstIndex();if(!adjust){if(!stopWatch.getIsStopped()){ok=true;System.out.println(""ok now: ""+ok);JOptionPane.showMessageDialog(mainPanel,""You have not stopped the clock"");taskJList.setSelectedIndex(previous);return ;}try{synchronized(this){int id=taskManager.parseId(taskJList.getSelectedValue().toString());currentTask=taskManager.getTask(id);stopWatch.associate(currentTask);countdownTimer.associate(currentTask);}}catch(Exception e){}}}"
2232	"public ParserContext process(ParserContext parserContext){InsertionModeFactory factory=InsertionModeFactory.getInstance();Token token=parserContext.getTokenizerContext().getCurrentToken();TokenType tokenType=token.getType();if(tokenType==TokenType.comment){Document document=parserContext.getDocument();InsertComment.run(parserContext,token,document);return parserContext;}if((tokenType==TokenType.DOCTYPE)||(tokenType==TokenType.start_tag&&token.getValue().equals(""html""))||(tokenType==TokenType.character&&(token.getValue().equals(String.valueOf(Character.toChars(0x0009)))||token.getValue().equals(String.valueOf(Character.toChars(0x000A)))||token.getValue().equals(String.valueOf(Character.toChars(0x000C)))||token.getValue().equals(String.valueOf(Character.toChars(0x000D)))||token.getValue().equals(String.valueOf(Character.toChars(0x0020)))))){IInsertionMode insertionMode=factory.getInsertionMode(InsertionMode.in_body);return parserContext=insertionMode.process(parserContext);}if(tokenType==TokenType.end_of_file){parserContext.setFlagStopParsing(true);return parserContext;}parserContext.addParseErrors(ParseErrorType.UnexpectedToken);parserContext.setInsertionMode(factory.getInsertionMode(InsertionMode.in_body));parserContext.setFlagReconsumeToken(true);return parserContext;}"
2233	"public void methodSetterFallID(PatientModelAttribute attributName,Object zellenWert,Patient patient){Method[] setterMethods=getSetterMethod(attributName);for(Method setterMethod : setterMethods){try{if(zellenWert==null||setterMethod.getParameterTypes()[0].equals(zellenWert.getClass())){setterMethod.invoke(patient.getFaelle().stream().findFirst().get().getFallID(),zellenWert);}else {if(attributName==PatientModelAttribute.ENUMMER&&zellenWert!=""""){patient.getFaelle().stream().findFirst().get().getFallID().geteNummer().setValue(zellenWert.toString());}}}catch(IllegalAccessException|InvocationTargetException e){e.printStackTrace();}}}"
2234	"private boolean formValidation(){Toast.makeText(this,""Validating This Section "",Toast.LENGTH_SHORT).show();if(mn0501.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0501),Toast.LENGTH_LONG).show();mn050102.setError(""This data is Required!"");Log.i(TAG,""mn0501: This data is Required!"");return false;}else {mn050102.setError(null);}if(mn050101.isChecked()){if(mn0502.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0502),Toast.LENGTH_LONG).show();mn050202.setError(""This data is Required!"");Log.i(TAG,""mn0502: This data is Required!"");return false;}else {mn050202.setError(null);}if(mn050201.isChecked()){if(mn0503.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0503),Toast.LENGTH_LONG).show();mn050303.setError(""This data is Required!"");Log.i(TAG,""mn0503: This data is Required!"");return false;}else {mn050303.setError(null);}}}if(mn0504.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0504),Toast.LENGTH_LONG).show();mn050402.setError(""This data is Required!"");Log.i(TAG,""mn0504: This data is Required!"");return false;}else {mn050402.setError(null);}if(mn050401.isChecked()){if(mn0505.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0505),Toast.LENGTH_LONG).show();mn050502.setError(""This data is Required!"");Log.i(TAG,""mn0505: This data is Required!"");return false;}else {mn050502.setError(null);}}if(mn0506.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0506),Toast.LENGTH_LONG).show();mn050602.setError(""This data is Required!"");Log.i(TAG,""mn0506: This data is Required!"");return false;}else {mn050602.setError(null);}if(mn050601.isChecked()){if(!(mn050701.isChecked()||mn050702.isChecked()||mn050703.isChecked()||mn050704.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0507),Toast.LENGTH_LONG).show();mn050704.setError(""This data is Required!"");Log.i(TAG,""mn0507: This data is Required!"");return false;}else {mn050704.setError(null);}if(mn0508.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0508),Toast.LENGTH_LONG).show();mn050802.setError(""This data is Required!"");Log.i(TAG,""mn0508: This data is Required!"");return false;}else {mn050802.setError(null);}if(mn050802.isChecked()){if(!(mn050901.isChecked()||mn050902.isChecked()||mn050903.isChecked()||mn050904.isChecked()||mn050905.isChecked()||mn050906.isChecked()||mn050907.isChecked()||mn050988.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0509),Toast.LENGTH_LONG).show();mn050988.setError(""This data is Required!"");Log.i(TAG,""mn0509: This data is Required!"");return false;}else {mn050988.setError(null);}if(mn050988.isChecked()&&mn050988x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0509)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn050988x.setError(""This data is Required!"");Log.i(TAG,""mn0509: This data is Required!"");return false;}else {mn050988x.setError(null);}}if(mn050701.isChecked()){if(mn051001.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn051001),Toast.LENGTH_LONG).show();mn051001.setError(""This data is Required!"");Log.i(TAG,""mn051001: This data is Required!"");return false;}else {mn051001.setError(null);}if(Integer.parseInt(mn051001.getText().toString())<1||Integer.parseInt(mn051001.getText().toString())>100){Toast.makeText(this,""Invalid: ""+getString(R.string.mn051001),Toast.LENGTH_LONG).show();mn051001.setError(""Invalid data. Range 1-100km"");Log.i(TAG,""mn051001: This data is Invalid!"");return false;}else {mn051001.setError(null);}}if(mn050702.isChecked()&&mn051002.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn051002),Toast.LENGTH_LONG).show();mn051002.setError(""This data is Required!"");Log.i(TAG,""mn051002: This data is Required!"");return false;}else {mn051002.setError(null);}if(mn050703.isChecked()&&mn051003.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn051003),Toast.LENGTH_LONG).show();mn051003.setError(""This data is Required!"");Log.i(TAG,""mn051003: This data is Required!"");return false;}else {mn051003.setError(null);}if(mn050704.isChecked()&&mn051004.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn051004),Toast.LENGTH_LONG).show();mn051004.setError(""This data is Required!"");Log.i(TAG,""mn051004: This data is Required!"");return false;}else {mn051004.setError(null);}}if(mn0511.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0511),Toast.LENGTH_LONG).show();mn051102.setError(""This data is Required!"");Log.i(TAG,""mn0511: This data is Required!"");return false;}else {mn051102.setError(null);}if(mn051101.isChecked()){if(mn051201.getText().toString().isEmpty()&&!(mn051202.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0512),Toast.LENGTH_LONG).show();mn051201.setError(""This data is Required!"");Log.i(TAG,""mn0512: This data is Required!"");return false;}else {mn051201.setError(null);}if(mn051301.getText().toString().isEmpty()&&!mn051302.isChecked()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0513),Toast.LENGTH_LONG).show();mn051301.setError(""This data is Required!"");Log.i(TAG,""mn0513: This data is Required!"");return false;}else {mn051301.setError(null);}if(!(mn051401.isChecked()||mn051402.isChecked()||mn051403.isChecked()||mn051404.isChecked()||mn051405.isChecked()||mn051406.isChecked()||mn051407.isChecked()||mn051488.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0514),Toast.LENGTH_LONG).show();mn051488.setError(""This data is Required!"");Log.i(TAG,""mn0514: This data is Required!"");return false;}else {mn051488.setError(null);}if(mn051488.isChecked()&&mn051488x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0514)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn051488x.setError(""This data is Required!"");Log.i(TAG,""mn0514: This data is Required!"");return false;}else {mn051488x.setError(null);}if(!(mn051501.isChecked()||mn051502.isChecked()||mn051503.isChecked()||mn051504.isChecked()||mn051505.isChecked()||mn051506.isChecked()||mn051507.isChecked()||mn051588.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0515),Toast.LENGTH_LONG).show();mn051588.setError(""This data is Required!"");Log.i(TAG,""mn0515: This data is Required!"");return false;}else {mn051588.setError(null);}if(mn051588.isChecked()&&mn051588x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0515)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn051588x.setError(""This data is Required!"");Log.i(TAG,""mn0515: This data is Required!"");return false;}else {mn051588x.setError(null);}if(!(mn051601.isChecked()||mn051602.isChecked()||mn051603.isChecked()||mn051604.isChecked()||mn051605.isChecked()||mn051606.isChecked()||mn051607.isChecked()||mn051608.isChecked()||mn051609.isChecked()||mn051610.isChecked()||mn051688.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0516),Toast.LENGTH_LONG).show();mn051688.setError(""This data is Required!"");Log.i(TAG,""mn0516: This data is Required!"");return false;}else {mn051688.setError(null);}if(mn051688.isChecked()&&mn051688x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0516)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn051688x.setError(""This data is Required!"");Log.i(TAG,""mn0516: This data is Required!"");return false;}else {mn051688x.setError(null);}if(mn0517a1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517a102.setError(""This data is Required!"");Log.i(TAG,""mn0517a: This data is Required!"");return false;}else {mn0517a102.setError(null);}if(mn0517a101.isChecked()){if(mn0517a2d.getText().toString().isEmpty()||mn0517a2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517vitd)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517a2d.setError(""This data is Required!"");Log.i(TAG,""mn0517a: This data is Required!"");return false;}else {mn0517a2d.setError(null);}if((Integer.parseInt(mn0517a2d.getText().toString())<0||Integer.parseInt(mn0517a2d.getText().toString())>29)&&(Integer.parseInt(mn0517a2m.getText().toString())<0||Integer.parseInt(mn0517a2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517vitd)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517a2d.setError(""This data is Required!"");Log.i(TAG,""mn0517a: This data is Required!"");return false;}else {mn0517a2d.setError(null);}if(mn0517a3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517vitd)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517a301.setError(""This data is Required!"");Log.i(TAG,""mn0517a: This data is Required!"");return false;}else {mn0517a301.setError(null);}}if(mn0517b1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517b102.setError(""This data is Required!"");Log.i(TAG,""mn0517b: This data is Required!"");return false;}else {mn0517b102.setError(null);}if(mn0517b101.isChecked()){if(mn0517b2d.getText().toString().isEmpty()||mn0517b2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517iron)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517b2d.setError(""This data is Required!"");Log.i(TAG,""mn0517b: This data is Required!"");return false;}else {mn0517b2d.setError(null);}if((Integer.parseInt(mn0517b2d.getText().toString())<0||Integer.parseInt(mn0517b2d.getText().toString())>29)&&(Integer.parseInt(mn0517b2m.getText().toString())<0||Integer.parseInt(mn0517b2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517iron)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517b2d.setError(""This data is Required!"");Log.i(TAG,""mn0517b: This data is Required!"");return false;}else {mn0517b2d.setError(null);}if(mn0517b3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517iron)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517b301.setError(""This data is Required!"");Log.i(TAG,""mn0517b: This data is Required!"");return false;}else {mn0517b301.setError(null);}}if(mn0517c1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517c102.setError(""This data is Required!"");Log.i(TAG,""mn0517c: This data is Required!"");return false;}else {mn0517c102.setError(null);}if(mn0517c101.isChecked()){if(mn0517c2d.getText().toString().isEmpty()||mn0517c2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517folic)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517c2d.setError(""This data is Required!"");Log.i(TAG,""mn0517c: This data is Required!"");return false;}else {mn0517c2d.setError(null);}if((Integer.parseInt(mn0517c2d.getText().toString())<0||Integer.parseInt(mn0517c2d.getText().toString())>29)&&(Integer.parseInt(mn0517c2m.getText().toString())<0||Integer.parseInt(mn0517c2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517folic)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517c2d.setError(""This data is Required!"");Log.i(TAG,""mn0517c: This data is Required!"");return false;}else {mn0517c2d.setError(null);}if(mn0517c3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517folic)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517c301.setError(""This data is Required!"");Log.i(TAG,""mn0517c: This data is Required!"");return false;}else {mn0517c301.setError(null);}}if(mn0517d1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517d102.setError(""This data is Required!"");Log.i(TAG,""mn0517d: This data is Required!"");return false;}else {mn0517d102.setError(null);}if(mn0517d101.isChecked()){if(mn0517d2d.getText().toString().isEmpty()||mn0517d2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517micro)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517d2d.setError(""This data is Required!"");Log.i(TAG,""mn0517d: This data is Required!"");return false;}else {mn0517d2d.setError(null);}if((Integer.parseInt(mn0517d2d.getText().toString())<0||Integer.parseInt(mn0517d2d.getText().toString())>29)&&(Integer.parseInt(mn0517d2m.getText().toString())<0||Integer.parseInt(mn0517d2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517micro)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517d2d.setError(""This data is Required!"");Log.i(TAG,""mn0517d: This data is Required!"");return false;}else {mn0517d2d.setError(null);}if(mn0517d3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517micro)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517d301.setError(""This data is Required!"");Log.i(TAG,""mn0517d: This data is Required!"");return false;}else {mn0517d301.setError(null);}}if(mn0517e1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517e102.setError(""This data is Required!"");Log.i(TAG,""mn0517e: This data is Required!"");return false;}else {mn0517e102.setError(null);}if(mn0517e101.isChecked()){if(mn0517e2d.getText().toString().isEmpty()||mn0517e2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517calcium)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517e2d.setError(""This data is Required!"");Log.i(TAG,""mn0517e: This data is Required!"");return false;}else {mn0517e2d.setError(null);}if((Integer.parseInt(mn0517e2d.getText().toString())<0||Integer.parseInt(mn0517e2d.getText().toString())>29)&&(Integer.parseInt(mn0517e2m.getText().toString())<0||Integer.parseInt(mn0517e2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517calcium)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517e2d.setError(""This data is Required!"");Log.i(TAG,""mn0517e: This data is Required!"");return false;}else {mn0517e2d.setError(null);}if(mn0517e3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517calcium)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517e301.setError(""This data is Required!"");Log.i(TAG,""mn0517e: This data is Required!"");return false;}else {mn0517e301.setError(null);}}if(mn0517f1.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517),Toast.LENGTH_LONG).show();mn0517f102.setError(""This data is Required!"");Log.i(TAG,""mn0517f: This data is Required!"");return false;}else {mn0517f102.setError(null);}if(mn0517f101.isChecked()){if(mn0517f2d.getText().toString().isEmpty()||mn0517f2m.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517ovit)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517f2d.setError(""This data is Required!"");Log.i(TAG,""mn0517f: This data is Required!"");return false;}else {mn0517f2d.setError(null);}if((Integer.parseInt(mn0517f2d.getText().toString())<0||Integer.parseInt(mn0517f2d.getText().toString())>29)&&(Integer.parseInt(mn0517f2m.getText().toString())<0||Integer.parseInt(mn0517f2m.getText().toString())>9)){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517ovit)+"" - ""+getString(R.string.mn0517dura),Toast.LENGTH_LONG).show();mn0517f2d.setError(""This data is Required!"");Log.i(TAG,""mn0517f: This data is Required!"");return false;}else {mn0517f2d.setError(null);}if(mn0517f3.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0517ovit)+"" - ""+getString(R.string.mn0517src),Toast.LENGTH_LONG).show();mn0517f301.setError(""This data is Required!"");Log.i(TAG,""mn0517f: This data is Required!"");return false;}else {mn0517f301.setError(null);}}if(!(mn051801.isChecked()||mn051802.isChecked()||mn051803.isChecked()||mn051804.isChecked()||mn051805.isChecked()||mn051806.isChecked()||mn051807.isChecked()||mn051808.isChecked()||mn051809.isChecked()||mn051888.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0518),Toast.LENGTH_LONG).show();mn051888.setError(""This data is Required!"");Log.i(TAG,""mn0518: This data is Required!"");return false;}else {mn051888.setError(null);}if(mn051888.isChecked()&&mn051888x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0518)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn051888x.setError(""This data is Required!"");Log.i(TAG,""mn0518: This data is Required!"");return false;}else {mn051888x.setError(null);}}if(!mn051101.isChecked()){if(!(mn051901.isChecked()||mn051902.isChecked()||mn051903.isChecked()||mn051904.isChecked()||mn051905.isChecked()||mn051906.isChecked()||mn051988.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0519),Toast.LENGTH_LONG).show();mn051988.setError(""This data is Required!"");Log.i(TAG,""mn0519: This data is Required!"");return false;}else {mn051988.setError(null);}if(mn051988.isChecked()&&mn051988x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0519)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn051988x.setError(""This data is Required!"");Log.i(TAG,""mn0519: This data is Required!"");return false;}else {mn051988x.setError(null);}}if(mn0520.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0520),Toast.LENGTH_LONG).show();mn052002.setError(""This data is Required!"");Log.i(TAG,""mn0520: This data is Required!"");return false;}else {mn052002.setError(null);}if(mn052001.isChecked()){if(mn0521.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0521),Toast.LENGTH_LONG).show();mn052102.setError(""This data is Required!"");Log.i(TAG,""mn0521: This data is Required!"");return false;}else {mn052102.setError(null);}if(mn052101.isChecked()){if(mn0522.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0522),Toast.LENGTH_LONG).show();mn052202.setError(""This data is Required!"");Log.i(TAG,""mn0522: This data is Required!"");return false;}else {mn052202.setError(null);}}}if(mn0523.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0523),Toast.LENGTH_LONG).show();mn052302.setError(""This data is Required!"");Log.i(TAG,""mn0523: This data is Required!"");return false;}else {mn052302.setError(null);}if(mn052301.isChecked()){if(mn0524.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0524),Toast.LENGTH_LONG).show();mn052402.setError(""This data is Required!"");Log.i(TAG,""mn0524: This data is Required!"");return false;}else {mn052402.setError(null);}if(mn052401.isChecked()||mn052402.isChecked()){if(!(mn052601.isChecked()||mn052602.isChecked()||mn052603.isChecked()||mn052604.isChecked()||mn052605.isChecked()||mn052606.isChecked()||mn052607.isChecked()||mn052608.isChecked()||mn052609.isChecked()||mn052610.isChecked()||mn052611.isChecked()||mn052612.isChecked()||mn052613.isChecked()||mn052614.isChecked()||mn052615.isChecked()||mn052688.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0526),Toast.LENGTH_LONG).show();mn052688.setError(""This data is Required!"");Log.i(TAG,""mn0526: This data is Required!"");return false;}else {mn052688.setError(null);}if(mn052688.isChecked()&&mn052688x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0526)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052688x.setError(""This data is Required!"");Log.i(TAG,""mn0526: This data is Required!"");return false;}else {mn052688x.setError(null);}}else {if(mn0525.getCheckedRadioButtonId()==-1){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0525),Toast.LENGTH_LONG).show();mn052588.setError(""This data is Required!"");Log.i(TAG,""mn0525: This data is Required!"");return false;}else {mn052588.setError(null);}if(mn052588.isChecked()&&mn052588x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0525)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052588x.setError(""This data is Required!"");Log.i(TAG,""mn0525: This data is Required!"");return false;}else {mn052588x.setError(null);}}if(!(mn052701.isChecked()||mn052702.isChecked()||mn052703.isChecked()||mn052704.isChecked()||mn052705.isChecked()||mn052706.isChecked()||mn052707.isChecked()||mn052777.isChecked()||mn052788.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0527),Toast.LENGTH_LONG).show();mn052788.setError(""This data is Required!"");Log.i(TAG,""mn0527: This data is Required!"");return false;}else {mn052788.setError(null);}if(mn052788.isChecked()&&mn052788x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0527)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052788x.setError(""This data is Required!"");Log.i(TAG,""mn0527: This data is Required!"");return false;}else {mn052788x.setError(null);}if(!(mn052777.isChecked())){if(!(mn052801.isChecked()||mn052802.isChecked()||mn052803.isChecked()||mn052804.isChecked()||mn052805.isChecked()||mn052806.isChecked()||mn052807.isChecked()||mn052877.isChecked()||mn052888.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0528),Toast.LENGTH_LONG).show();mn052888.setError(""This data is Required!"");Log.i(TAG,""mn0528: This data is Required!"");return false;}else {mn052888.setError(null);}if(mn052888.isChecked()&&mn052888x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0528)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052888x.setError(""This data is Required!"");Log.i(TAG,""mn0528: This data is Required!"");return false;}else {mn052888x.setError(null);}}else {if(mn052777.isChecked()){if(!(mn052901.isChecked()||mn052902.isChecked()||mn052903.isChecked()||mn052904.isChecked()||mn052905.isChecked()||mn052906.isChecked()||mn052988.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0529)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052988.setError(""This data is Required!"");Log.i(TAG,""mn0529: This data is Required!"");return false;}else {mn052988.setError(null);}}}}if(!(mn052302.isChecked())&&mn052777.isChecked()){if(!(mn052901.isChecked()||mn052902.isChecked()||mn052903.isChecked()||mn052904.isChecked()||mn052905.isChecked()||mn052906.isChecked()||mn052988.isChecked())){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0529),Toast.LENGTH_LONG).show();mn052988.setError(""This data is Required!"");Log.i(TAG,""mn0529: This data is Required!"");return false;}else {mn052988.setError(null);}if(mn052988.isChecked()&&mn052988x.getText().toString().isEmpty()){Toast.makeText(this,""ERROR(empty): ""+getString(R.string.mn0529)+"" - ""+getString(R.string.mnother),Toast.LENGTH_LONG).show();mn052988x.setError(""This data is Required!"");Log.i(TAG,""mn0529: This data is Required!"");return false;}else {mn052988x.setError(null);}}try{if(Integer.parseInt(mn051001.getText().toString())<0||Integer.parseInt(mn051001.getText().toString())>100){mn051001.setError(""Range is 0 - 100 km"");return false;}else {mn051001.setError(null);}}catch(NumberFormatException nfe){}try{if(Integer.parseInt(mn051002.getText().toString())<0||Integer.parseInt(mn051002.getText().toString())>100){mn051002.setError(""Range is 0 - 100 km"");return false;}else {mn051002.setError(null);}}catch(NumberFormatException nfe){}try{if(Integer.parseInt(mn051003.getText().toString())<0||Integer.parseInt(mn051003.getText().toString())>100){mn051003.setError(""Range is 0 - 100 km"");return false;}else {mn051003.setError(null);}}catch(NumberFormatException nfe){}try{if(Integer.parseInt(mn051004.getText().toString())<0||Integer.parseInt(mn051004.getText().toString())>100){mn051004.setError(""Range is 0 - 100 km"");return false;}else {mn051004.setError(null);}}catch(NumberFormatException nfe){}try{if(Integer.parseInt(mn051301.getText().toString())<1||Integer.parseInt(mn051004.getText().toString())>15){mn051301.setError(""Range is 0 - 15 times"");return false;}else {mn051301.setError(null);}}catch(NumberFormatException nfe){}return true;}"
2235	"@Override public boolean hasNext(){return !buffer.isEmpty()||iterator.hasNext();}"
2236	"private boolean canConnectTo(IBlockAccess worldIn,BlockPos pos){IBlockState iblockstate=worldIn.getBlockState(pos);Block block=iblockstate.getBlock();Material material=iblockstate.getMaterial();return block==net.minecraft.init.Blocks.BARRIER?false:(block!=this&&!(block instanceof BlockFenceGate)?(material.isOpaque()&&iblockstate.isFullCube()?material!=Material.GOURD:(block instanceof BlockWallBase)):true);}"
2237	"private void applyMetricUpdate(TransferFunctionParam p){if(_isExport){ArithExpr newValue;ArithExpr cost=_enc.mkInt(_addedCost);ArithExpr sum=_enc.mkSum(p.getOther().getMetric(),cost);if(_to.isBgp()){BoolExpr isBGP;String router=_conf.getName();boolean hasProtocolVar=_other.getProtocolHistory()!=null;boolean onlyBGP=_enc.getOptimizations().getSliceHasSingleProtocol().contains(router);if(hasProtocolVar){isBGP=_other.getProtocolHistory().checkIfValue(Protocol.BGP);}else {if(onlyBGP){isBGP=_enc.mkTrue();}else {isBGP=_enc.mkFalse();}}newValue=_enc.mkIf(isBGP,sum,cost);}else {newValue=sum;}p.getOther().setMetric(newValue);}}"
2238	"@Override public boolean onPrepareOptionsMenu(Menu menu){MenuItem closeIssue=menu.findItem(R.id.closeIssue);MenuItem lockIssue=menu.findItem(R.id.lockIssue);MenuItem milestone=menu.findItem(R.id.milestone);MenuItem labels=menu.findItem(R.id.labels);MenuItem assignees=menu.findItem(R.id.assignees);MenuItem edit=menu.findItem(R.id.edit);MenuItem editMenu=menu.findItem(R.id.editMenu);boolean isOwner=getPresenter().isOwner();boolean isLocked=getPresenter().isLocked();boolean isCollaborator=getPresenter().isCollaborator();boolean isRepoOwner=getPresenter().isRepoOwner();editMenu.setVisible(isOwner||isCollaborator);milestone.setVisible(isCollaborator||isRepoOwner);labels.setVisible(isCollaborator||isRepoOwner);assignees.setVisible(isCollaborator||isRepoOwner);edit.setVisible(isCollaborator||isRepoOwner||isOwner);if(getPresenter().getPullRequest()!=null){closeIssue.setVisible(isRepoOwner||(isOwner||isCollaborator)&&getPresenter().getPullRequest().getState()==IssueState.open);lockIssue.setVisible(isRepoOwner||(isOwner||isCollaborator)&&getPresenter().getPullRequest().getState()==IssueState.open);closeIssue.setTitle(getPresenter().getPullRequest().getState()==IssueState.closed?getString(R.string.re_open):getString(R.string.close));lockIssue.setTitle(isLocked?getString(R.string.unlock_issue):getString(R.string.lock_issue));}else {closeIssue.setVisible(false);lockIssue.setVisible(false);}return super.onPrepareOptionsMenu(menu);}"
2239	"private void remove(Files files,String scheme,String location,String pathIn,Credential credential) throws XenonException{FileSystem fs=files.newFileSystem(scheme,location,credential,null);Path path=files.newPath(fs,new RelativePath(pathIn));if(""local"".equals(scheme)||""file"".equals(scheme)){if(!pathIn.startsWith(""/"")){RelativePath workingDirectory=new RelativePath(System.getProperty(""user.dir""));path=files.newPath(fs,workingDirectory.resolve(pathIn));}}recursiveDelete(files,path);}"
2240	"public boolean tick(int dt){return (done);}"
2241	"@Override public void setOwner(ItemStack stack,String owner){if(stack.stackTagCompound==null){stack.setTagCompound(new NBTTagCompound());}if(owner==null||owner.isEmpty()){stack.stackTagCompound.removeTag(""owner"");return ;}stack.stackTagCompound.setString(""owner"",owner);}"
2242	"public static OWL2Datatype getDatatype(IRI datatype){if(!isBuiltIn(datatype)){throw new OWLRuntimeException(datatype+"" is not a built in datatype!"");}return Stream.of(values()).filter(v -> v.iri.equals(datatype)).findAny().orElseThrow(() -> new OWLRuntimeException(datatype + "" is not a built in datatype!""));}"
2243	"@SubscribeEvent public void entityHurt(LivingHurtEvent event){DamageSource source=event.source;Entity victim=event.entity;if((victim instanceof EntityPlayer)){EntityPlayer player=(EntityPlayer)victim;float damageMultiplier=1.0-(Stat.STAT_PROTECTION.getAppliedBonus(player,source)+Stat.STAT_TOUGH_SKIN.getAppliedBonus(player,source)+Stat.STAT_FEATHER_FALL.getAppliedBonus(player,source)+Stat.STAT_TEMPERING.getAppliedBonus(player,source));event.ammount*=damageMultiplier;}Entity src=source.getEntity();if((src instanceof EntityPlayer)){EntityPlayer player=(EntityPlayer)src;ItemStack heldItem=player.getHeldItem();Entity target=victim;float damage=event.ammount;float bonus=0.0;if(heldItem!=null){bonus=Math.round(damage*(Stat.STAT_SWORDSMANSHIP.getAppliedBonus(player,heldItem)+Stat.STAT_BOWMANSHIP.getAppliedBonus(player,heldItem)));}else {bonus=Math.round(damage+(Stat.STAT_PUGILISM.getBonus(DataHelper.getPlayerStatLevel(player,Stat.STAT_PUGILISM))));}event.ammount=(bonus+damage);if(Stat.STAT_REAPER.needAffectedByStat(target)){float reap=Stat.STAT_REAPER.getBonus(player);float reapBonus=0;if(Stat.STAT_STEALTH.needAffectedByStat(player)){reapBonus=reap*Stat.STAT_STEALTH.getSecondaryBonus(player)/100.0;}float reapChance=reap+reapBonus;if(player.getRNG().nextFloat()<=reapChance){player.onEnchantmentCritical(target);player.worldObj.playSoundAtEntity(player,""gokiStats:reaper"",1.0,1.0);event.ammount=100000.0;}}}}"
2244	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){if(position<mJobCategoryList.size()){String jobCategory=mJobCategoryList.get(position);if(!mCriteria.JobCategory.equals(jobCategory)){mRecyclerView.setVisibility(View.INVISIBLE);mProgress.setVisibility(View.VISIBLE);mCriteria.JobCategory=jobCategory;mCriteria.page=1;mAdapter.reset();mAdapter=null;requestJobs();}}}"
2245	"@Override public Object next(){int tmp=numbers[index];if(!hasNext()){throw new NoSuchElementException();}else {while(index<size){if(isEvenNumber(tmp)){index=tmp;break;}else {tmp=numbers[++index];}}}return tmp;}"
2246	"@Override public boolean shouldUseOxygen(){return this.hasEnoughEnergyToRun&&this.active&&this.sealed;}"
2247	"@Override public boolean isDelimiterChar(CharSequence buffer,int pos){return super.isDelimiterChar(buffer,pos)||(buffer.charAt(pos)=='.')||(buffer.charAt(pos)==';')||(buffer.charAt(pos)==':');}"
2248	"@Override public synchronized void setNeighbours(Node newPrevious,Node newNext) throws RemoteException{System.out.println(""Received new next: ""+(newNext==null?""Not set"":newNext.getIp()));System.out.println(""Received new previous: ""+(newPrevious==null?""Not set"":newPrevious.getIp()));boolean firstSetup=false;if((this.previous==null)||(this.next==null)){firstSetup=true;}else {if(this.previous==selfNode&&this.next==selfNode){firstSetup=true;}}if(newPrevious!=null){previous=newPrevious;}if(newNext!=null){next=newNext;}System.out.println(""New neighbours set"");if(firstSetup){doReplicationWhenSetup();}System.out.println(next.getIp()+""test2 robbe"");printNeighbours();}"
2249	"public static void main(String[] args){while(true){System.out.println("">"");if(cmd==""add""){System.out.println(""Entrez le contact sous le format suivant : nom email telephone"");String name=sc.next();String email=sc.next();String phone=sc.next();try{contactsManager.addContact(name,email,phone);}catch(InvalidContactNameException e1){System.out.println(""Nom incorrect"");}catch(InvalidEmailException e2){System.out.println(""Email incorrect"");}}else {if(cmd==""print""){contactsManager.printAllContacts();}else {if(cmd==""search""){String name=sc.next();contactsManager.searchContactByName(name);}else {if(cmd==""quit""){break;}else {System.out.println(""Cmd not found"");}}}}cmd=sc.next();}}"
2250	"@Override public boolean remove(Object object){if(!(object instanceof Vector)){throw new ClassCastException();}int index=indexOf(object);if(index<0){return false;}if(size()==1){data=null;return true;}Vector newData[]=new Vector[size()-1];if(index>0){System.arraycopy(data,0,newData,0,index);}if(index<size()-1){System.arraycopy(data,index+1,newData,index,size()-index-1);}data=newData;return true;}"
2251	"@SuppressWarnings(""nls"") protected void addChildrenJobsInAssembly(IFile assemblyFile) throws Exception{if(!assemblyFile.exists()){return ;} final File file=assemblyFile.getLocation().toFile();DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();DocumentBuilder db=dbf.newDocumentBuilder();Document document=db.parse(file);if(document==null){throw new IOException(""Can't parse the file: ""+file);}boolean modified=false;Node filesElem=getElement(document.getDocumentElement(),""files"",1);Node fileSetsElem=getElement(document.getDocumentElement(),""fileSets"",1);if(fileSetsElem==null){fileSetsElem=document.createElement(""fileSets"");document.appendChild(fileSetsElem);}List<String> childrenPomsIncludes=new ArrayList<String>();List<String> childrenFolderResourcesIncludes=new ArrayList<String>(); final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();for(JobInfo child : clonedChildrenJobInfors){modified=true;String jobClassPackageFolder=null;if(child.getProcessItem()!=null){jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());}else {String projectName=null;String jobId=child.getJobId();if(jobId!=null){IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);if(lastVersion!=null){Property property=lastVersion.getProperty();if(property!=null){Project project=ProjectManager.getInstance().getProject(property.getItem());projectName=project.getTechnicalLabel();}}}if(projectName==null){projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();}jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());}childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));childrenFolderResourcesIncludes.add(jobClassPackageFolder+""/**"");}if(modified){addAssemblyFileSets(fileSetsElem,""${basedir}"",""${talend.job.name}"",false,childrenPomsIncludes,null,null,null,null,false,""add children pom files."");addAssemblyFileSets(fileSetsElem,""${project.build.sourceDirectory}"",""${talend.job.name}/src/main/java/"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""add children src resources files."");addAssemblyFileSets(fileSetsElem,""${basedir}/src/main/resources/"",""${talend.job.name}/src/main/resources/"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""add children context files to resources."");addAssemblyFileSets(fileSetsElem,""${basedir}/src/main/resources/"",""${talend.job.name}"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""add children context files for running."");}if(modified){TransformerFactory transFactory=TransformerFactory.newInstance();Transformer transFormer=transFactory.newTransformer();transFormer.setOutputProperty(OutputKeys.INDENT,""yes"");transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));}}"
2252	"@Override public boolean isPermitted(Biome biome){return biome instanceof BiomeForest||biome==Biomes.RIVER||biome instanceof BiomePlains||biome==Biomes.BEACH||biome instanceof BiomeJungle;}"
2253	"public static int checkOneFunction(TransformFunction tf,String prefix,Vector<TNode> org,int i,String tar){if(i>=org.size()){if(prefix.compareTo(tar)==0){return i;}else {return -1;}}if(prefix.compareTo(tar)==0){return i;}Vector<TNode> tNodes=new Vector<TNode>();tNodes.add(org.get(i));String con=tf.convert(tNodes);if(con==null){return -1;}String tmp=prefix+tf.convert(tNodes);if(tar.indexOf(tmp)!=0){return -1;}else {int t=checkOneFunction(tf,tmp,org,i+1,tar);return t;}}"
2254	"private static boolean isSubtype(boolean sign,int n1,Node[] graph1,int n2,Node[] graph2,BitSet subtypeMatrix,BitSet suptypeMatrix){Node c1=graph1[n1];Node c2=graph2[n2];int g2Size=graph2.length;if(c1.kind==c2.kind){switch (c1.kind){case K_EXISTENTIAL :NameID nid1=(NameID)c1.data;NameID nid2=(NameID)c2.data;return nid1.equals(nid2);case K_SET :case K_LIST :case K_PROCESS :{int e1=(Integer)c1.data;int e2=(Integer)c2.data;return subtypeMatrix.get((e1*g2Size)+e2);}case K_DICTIONARY :{Pair<Integer,Integer> p1=(Pair<Integer,Integer>)c1.data;Pair<Integer,Integer> p2=(Pair<Integer,Integer>)c2.data;return subtypeMatrix.get((p1.first()*g2Size)+p2.first())&&subtypeMatrix.get((p1.second()*g2Size)+p2.second());}case K_TUPLE :{int[] elems1=(int[])c1.data;int[] elems2=(int[])c2.data;if(elems1.length!=elems2.length){return false;}for(int i=0;i<elems1.length;++i){int e1=elems1[i];int e2=elems2[i];if(!subtypeMatrix.get((e1*g2Size)+e2)){return false;}}return true;}case K_FUNCTION :{int[] elems1=(int[])c1.data;int[] elems2=(int[])c2.data;if(elems1.length!=elems2.length){return false;}int e1=elems1[0];int e2=elems2[0];if((e1==-1||e2==-1)&&e1!=e2){return false;}else {if(e1!=-1&&e2!=-1&&!suptypeMatrix.get((e1*g2Size)+e2)){return false;}}e1=elems1[1];e2=elems2[1];if(!subtypeMatrix.get((e1*g2Size)+e2)){return false;}for(int i=2;i<elems1.length;++i){e1=elems1[i];e2=elems2[i];if(!suptypeMatrix.get((e1*g2Size)+e2)){return false;}}return true;}case K_RECORD :Pair<String,Integer>[] fields1=(Pair<String,Integer>[])c1.data;Pair<String,Integer>[] _fields2=(Pair<String,Integer>[])c2.data;HashMap<String,Integer> fields2=new HashMap<String,Integer>();for(Pair<String,Integer> f : _fields2){fields2.put(f.first(),f.second());}for(int i=0;i!=fields1.length;++i){Pair<String,Integer> e1=fields1[i];Integer e2=fields2.get(e1.first());if(e2==null||!subtypeMatrix.get((e1.second()*g2Size)+e2)){return false;}}return true;case K_UNION :{if(sign){int[] bounds1=(int[])c1.data;for(int i : bounds1){if(!subtypeMatrix.get((i*g2Size)+n2)){return false;}}return true;}else {int[] bounds2=(int[])c2.data;for(int i : bounds2){if(!subtypeMatrix.get((n1*g2Size)+i)){return false;}}return true;}}case K_LABEL :throw new IllegalArgumentException(""attempting to minimise open recurisve type"");default :return true;}}else {if(sign&&c1.kind==K_INT&&c2.kind==K_RATIONAL){return true;}else {if(!sign&&c1.kind==K_RATIONAL&&c2.kind==K_INT){return true;}else {if(sign&&(c1.kind==K_VOID||c2.kind==K_ANY)){return true;}else {if(!sign&&(c1.kind==K_ANY||c2.kind==K_VOID)){return true;}else {if(sign&&c1.kind==K_LIST&&c2.kind==K_SET){int e1=(Integer)c1.data;int e2=(Integer)c2.data;return subtypeMatrix.get((e1*g2Size)+e2);}else {if(!sign&&c1.kind==K_SET&&c2.kind==K_LIST){int e1=(Integer)c1.data;int e2=(Integer)c2.data;return subtypeMatrix.get((e1*g2Size)+e2);}else {if(sign&&c1.kind==K_LIST&&c2.kind==K_DICTIONARY){int e1=(Integer)c1.data;Pair<Integer,Integer> p2=(Pair<Integer,Integer>)c2.data;return graph2[p2.first()].kind==K_INT&&subtypeMatrix.get((p2.second()*g2Size)+e1);}else {if(!sign&&c1.kind==K_DICTIONARY&&c2.kind==K_LIST){Pair<Integer,Integer> p1=(Pair<Integer,Integer>)c1.data;int e2=(Integer)c2.data;return graph1[p1.first()].kind==K_INT&&subtypeMatrix.get((p1.second()*g2Size)+e2);}else {if(sign&&c1.kind==K_UNION){int[] bounds1=(int[])c1.data;for(int i : bounds1){if(!subtypeMatrix.get((i*g2Size)+n2)){return false;}}return true;}else {if(!sign&&c1.kind==K_UNION){int[] bounds1=(int[])c1.data;for(int i : bounds1){if(subtypeMatrix.get((i*g2Size)+n2)){return true;}}return false;}else {if(sign&&c2.kind==K_UNION){int[] bounds2=(int[])c2.data;for(int j : bounds2){if(subtypeMatrix.get((n1*g2Size)+j)){return true;}}return false;}else {if(!sign&&c2.kind==K_UNION){int[] bounds2=(int[])c2.data;for(int j : bounds2){if(!subtypeMatrix.get((n1*g2Size)+j)){return false;}}return true;}}}}}}}}}}}}}return false;}"
2255	"@Override public void run(){shouldAutomaticallyReconnect=true;while(shouldAutomaticallyReconnect){int attempts=0;while(!networkMonitor.hasInternetConnection()){networkStatusSubject.onNext(StatusModel.CONNECTING);waitMillis(1000);if(attempts++==10){networkStatusSubject.onNext(StatusModel.NOT_CONNECTED);waitMillis(5000);attempts=0;}if(!shouldAutomaticallyReconnect){return ;}}networkStatusSubject.onNext(StatusModel.CONNECTED);isWaitingData=true;serverStatusSubject.onNext(StatusModel.CONNECTING);if(serverReconnectAttempts==3){serverReconnectAttempts=0;serverStatusSubject.onNext(StatusModel.NOT_CONNECTED);waitMillis(60000);}else {if(serverReconnectAttempts>0&&serverReconnectAttempts<3){waitMillis(3000);}}if(!shouldAutomaticallyReconnect){return ;}try{setupSocket();serverReconnectAttempts=0;while(isWaitingData){readData();}}catch(SocketTimeoutException e){serverStatusSubject.onNext(StatusModel.CONNECTING);e.printStackTrace();serverReconnectAttempts++;}catch(IOException e){waitMillis(300);if(networkMonitor.hasInternetConnection()){serverReconnectAttempts++;}}finally{closeSocket();if(!shouldAutomaticallyReconnect){serverReconnectAttempts=0;}}}}"
2256	"@Override protected void updateItem(PluginListItem item,boolean empty){super.updateItem(item,empty);if(item!=null){setText(item.toString());LocalizedManifestStrings labels=new LocalizedManifestStrings(Main.getString(""manifest.name""),Main.getString(""manifest.version""),Main.getString(""manifest.description""),Main.getString(""manifest.authors""),Main.getString(""manifest.license""));setTooltip(new Tooltip(item.manifest.toString(labels)));}}"
2257	"public ActionResult<Stmt> actOnWhileStmt(SourceLocation whileLoc,Expr cond,Stmt body){if(cond==null){return stmtError();}return new ActionResult<>(new WhileStmt(cond,body,whileLoc));}"
2258	"public boolean equals(Object obj){return obj!=null;}"
2259	"public static void TeleopPeriodic(boolean feedControl){System.out.println(""Gear Motor Current: ""+gearFeedMotor.getOutputCurrent());if(!feedControl){intakeState=0;}if(gearFeedMotor.getOutputCurrent()>GEAR_IN_BOT_CURRENT_THRESHOLD&&intakeState==0){intakeState++;}else {if(gearFeedMotor.getOutputCurrent()<GEAR_IN_BOT_CURRENT_THRESHOLD&&intakeState==1){intakeState++;}else {if(gearFeedMotor.getOutputCurrent()>GEAR_IN_BOT_CURRENT_THRESHOLD&&intakeState==2){intakeState++;}}}if(feedControl&&intakeState!=3){gearFeedMotor.set(INTAKE_SPEED);}else {gearFeedMotor.set(0.0);}}"
2260	"private Object parseItem(PageDefinition pgdef,NodeInfo parent,Element el,AnnotationHelper annHelper,boolean bNativeContent,ParsingState parsingState) throws Exception{ final String nm=el.getLocalName(); final Namespace ns=el.getNamespace(); final String pref=ns!=null?ns.getPrefix():""""; final String uri=ns!=null?ns.getURI():"""";LanguageDefinition langdef=pgdef.getLanguageDefinition(); final String langName=langdef.getName();if(LanguageDefinition.ANNOTATION_NAMESPACE.equals(uri)||""annotation"".equals(uri)){throw new UiException(message(""Namespace, ""+uri+"", no longer supported element's annotation"",el));}if(parsingState!=ParsingState.SECOND){if(""attribute"".equals(nm)&&isZkElement(langdef,nm,pref,uri,bNativeContent)){if(!(parent instanceof ComponentInfo)){throw new UiException(message(""<attribute> cannot be the root element"",el));}parseAttribute(pgdef,(ComponentInfo)parent,el,annHelper);}else {if(""custom-attributes"".equals(nm)&&isZkElement(langdef,nm,pref,uri,bNativeContent)){parseCustomAttributes(langdef,parent,el,annHelper);}else {if(""template"".equals(nm)&&isZkElement(langdef,nm,pref,uri,bNativeContent)){parseItems(pgdef,parseTemplate(parent,el,annHelper),el.getChildren(),annHelper,bNativeContent);}}}}if(parsingState!=ParsingState.FIRST){if(""attribute"".equals(nm)||""custom-attributes"".equals(nm)||""template"".equals(nm)){return null;}if(""zscript"".equals(nm)&&isZkElement(langdef,nm,pref,uri)){checkZScriptEnabled(el);parseZScript(parent,el,annHelper);}else {if(""variables"".equals(nm)&&isZkElement(langdef,nm,pref,uri,bNativeContent)){parseVariables(langdef,parent,el,annHelper);}else {if(""zk"".equals(nm)&&isZkElement(langdef,nm,pref,uri)){parseItems(pgdef,parseZk(parent,el,annHelper),el.getChildren(),annHelper,bNativeContent);}else {if(isShadowElement(langdef,pgdef,nm,pref,uri,bNativeContent)){parseItems(pgdef,parseShadowElement(pgdef,parent,el,annHelper),el.getChildren(),annHelper,bNativeContent);}else {if(isZkSwitch(parent)){throw new UiException(message(""Only <zk> can be used in <zk switch>"",el));}boolean prefRequired=uri.startsWith(LanguageDefinition.NATIVE_NAMESPACE_PREFIX);boolean bNative=bNativeContent||prefRequired||LanguageDefinition.NATIVE_NAMESPACE.equals(uri)||""native"".equals(uri);if(!bNative&&langdef.isNative()&&!langdef.getNamespace().equals(uri)){bNative=prefRequired=("""".equals(pref)&&"""".equals(uri))||!LanguageDefinition.exists(uri);} final ComponentInfo compInfo;if(bNative){if(annHelper.clear()){log.warn(message(""Annotations are ignored since native doesn't support them"",el));} final NativeInfo ni;compInfo=ni=new NativeInfo(parent,langdef.getNativeDefinition(),prefRequired&&pref.length()>0?pref+"":""+nm:nm); final Collection<Namespace> dns=el.getDeclaredNamespaces();if(!dns.isEmpty()){addDeclaredNamespace(ni,dns,langdef);}}else { final boolean defaultNS=isDefaultNS(langdef,pref,uri); final LanguageDefinition complangdef=defaultNS?langdef:LanguageDefinition.lookup(uri);ComponentDefinition compdef=defaultNS?pgdef.getComponentDefinitionMap().get(nm):null;if(compdef!=null){compInfo=new ComponentInfo(parent,compdef,nm);}else {if(complangdef.hasComponentDefinition(nm)){compdef=complangdef.getComponentDefinition(nm);compInfo=new ComponentInfo(parent,compdef,nm);langdef=complangdef;}else {compdef=complangdef.getDynamicTagDefinition();if(compdef==null){throw new DefinitionNotFoundException(message(""Component definition not found: ""+nm+"" in ""+complangdef,el));}compInfo=new ComponentInfo(parent,compdef,nm);langdef=complangdef;}}String use=el.getAttributeValue(""use"");if(use!=null){use=use.trim();if(use.length()!=0){compInfo.setImplementation(use);}}}String ifc=null,unless=null,forEach=null,forEachBegin=null,forEachEnd=null,forEachStep=null;AnnotationHelper attrAnnHelper=null;boolean isMVVM=false;for(Iterator it=el.getAttributeItems().iterator();it.hasNext();){ final Attribute attr=(Attribute)it.next(); final Namespace attrns=attr.getNamespace(); final String attURI=attrns!=null?attrns.getURI():""""; final String attnm=attr.getLocalName(); final String attval=attr.getValue(); final String attPref=attrns!=null?attrns.getPrefix():"""";if(isNativeNamespace(uri)||isXmlNamespace(uri)||""native"".equals(langName)||""xml"".equals(langName)){if(!isZkAttr(langdef,attrns)&&!isZKNamespace(attURI)&&!""xmlns"".equals(attPref)&&!(""xmlns"".equals(attnm)&&"""".equals(attPref))&&!""http://www.w3.org/2001/XMLSchema-instance"".equals(attURI)){compInfo.addProperty(attr.getName(),attval,null);continue;}else {if(isClientNamespace(attURI)||isClientAttrNamespace(attURI)){compInfo.addProperty(attnm,attval,null);continue;}}}if(""apply"".equals(attnm)&&isZkAttr(langdef,attrns)){compInfo.setApply(attval);}else {if(""forward"".equals(attnm)&&isZkAttr(langdef,attrns)){compInfo.setForward(attval);}else {if(""if"".equals(attnm)&&isZkAttr(langdef,attrns)){ifc=attval;}else {if(""unless"".equals(attnm)&&isZkAttr(langdef,attrns)){unless=attval;}else {if(""forEach"".equals(attnm)&&isZkAttr(langdef,attrns)){forEach=attval;}else {if(""forEachStep"".equals(attnm)&&isZkAttr(langdef,attrns)){forEachStep=attval;}else {if(""forEachBegin"".equals(attnm)&&isZkAttr(langdef,attrns)){forEachBegin=attval;}else {if(""forEachEnd"".equals(attnm)&&isZkAttr(langdef,attrns)){forEachEnd=attval;}else {if(""fulfill"".equals(attnm)&&isZkAttr(langdef,attrns,bNativeContent)){compInfo.setFulfill(attval);}else {if(LanguageDefinition.ANNOTATION_NAMESPACE.equals(attURI)||""annotation"".equals(attURI)){if(attrAnnHelper==null){attrAnnHelper=new AnnotationHelper();}applyAttrAnnot(attrAnnHelper,compInfo,attnm,attval.trim(),true,location(attr));}else {if(!""use"".equals(attnm)||!isZkAttr(langdef,attrns,bNativeContent)){ final String attvaltrim;if(!""xmlns"".equals(attPref)&&!(""xmlns"".equals(attnm)&&"""".equals(attPref))&&!""http://www.w3.org/2001/XMLSchema-instance"".equals(attURI)){if(!bNativeContent&&!bNative&&(attURI.length()==0||LanguageDefinition.ZK_NAMESPACE.endsWith(attURI))&&AnnotationHelper.isAnnotation(attvaltrim=attval.trim())){if(attrAnnHelper==null){attrAnnHelper=new AnnotationHelper();}applyAttrAnnot(attrAnnHelper,compInfo,attnm,attvaltrim,true,location(attr));Configuration config=WebApps.getCurrent().getConfiguration();if(config.getBinderInitAttribute().equals(attnm)){isMVVM=true;}Set<String> binderAnnotations=config.getBinderAnnotations();for(String annot : binderAnnotations){if(attvaltrim.indexOf(annot)!=-1){compInfo.enableBindingAnnotation();break;}}}else {boolean handled=false;for(NamespaceParser nsParser : _nsParsers){if(nsParser.isMatched(attURI)){if(nsParser.parse(attr,compInfo,pgdef)){handled=true;break;}}}if(!handled){addAttribute(compInfo,attrns,attnm,attval,null,attr.getLocator());if(attrAnnHelper!=null){attrAnnHelper.applyAnnotations(compInfo,attnm,true);}}}}}}}}}}}}}}}}if(isMVVM){String apply=compInfo.getApply();if(apply!=null&&apply.indexOf(""org.zkoss.bind.BindComposer"")!=-1){log.warn(message(""If the attribute of viewModel is being used, then \""org.zkoss.bind.BindComposer\"" will be applied automatically"",el));}else {if(apply==null||apply.length()==0){compInfo.setApply(""org.zkoss.bind.BindComposer"");}}}compInfo.setCondition(ConditionImpl.getInstance(ifc,unless));compInfo.setForEach(forEach,forEachBegin,forEachEnd,forEachStep);annHelper.applyAnnotations(compInfo,null,true);if(compInfo.getAnnotationMap()!=null&&el.getLocator()!=null){compInfo.addAnnotation(null,""ZKLOC"",null,Locators.toLocation(el.getLocator()));} final Collection<Item> items=el.getChildren();String textAs=null;if(!bNativeContent&&!items.isEmpty()&&(textAs=compInfo.getTextAs())!=null){if(compInfo.isChildAllowedInTextAs()||!textAsAllowed(langdef,items,bNativeContent)){textAs=null;}}if(textAs!=null){parseAsProperty(pgdef,compInfo,textAs,items,annHelper,null);}else {parseItems(pgdef,compInfo,items,annHelper,bNativeContent);}if(compInfo instanceof NativeInfo&&!compInfo.getChildren().isEmpty()){optimizeNativeInfos((NativeInfo)compInfo);return compInfo;}}}}}}return null;}"
2261	"private void runOnContext(Handler<Void> handler){if(Vertx.currentContext()==context){handler.handle(null);}else {context.runOnContext(handler);}}"
2262	"@Override public void handle(KeyEvent event){if(status!=ONGAME||event.getCharacter().equals("""")){event.consume();}else {char c=event.getCharacter().charAt(0);try{analyzer.putCharacter(c);if(Character.isAlphabetic(c)||Character.isDigit(c)){buf.append(c);}else {buf.setLength(0);}}catch(InterruptedException e){e.printStackTrace();}}}"
2263	"protected void writeJavaTypes(List<AbstractComplexJavaType> types) throws IOException,MojoExecutionException{for(AbstractComplexJavaType type : types){ final String srcPackagePath=type.getPackagePath().replaceAll(""\\."",File.separator); final Path filePath=Paths.get(targetClassesDirectory.getAbsolutePath(),srcPackagePath,type.getName()+"".java"");if(Files.exists(filePath)){Files.delete(filePath);}else {if(!Files.exists(filePath.getParent())){Files.createDirectories(filePath.getParent());}}Files.createFile(filePath);Writer writer=null;try{writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath.toFile()))); final String encodedType=encodeType(type);writer.write(encodedType);}finally{MiscUtil.closeQuietly(writer);}if(formatSource){formatSourceCode(filePath.toFile());}}}"
2264	"public void statementGeneration(){String statementMessage="""";String startingDate;String endingDate;String accountInformation=String.format(""%nAccount number: "",currentAccountNumber);boolean performOperation=false;startingDate=startDate.getText();endingDate=endDate.getText();if(CurrentDate.isThisDateValid(startingDate,""dd/MM/yyyy"")&&CurrentDate.isThisDateValid(endingDate,""dd/MM/yyyy"")){performOperation=true;}else {performOperation=false;}if(performOperation){DateFormat dateFormat=new SimpleDateFormat(""dd/MM/yyyy"");Date currentDate=new Date();DateFormat time=new SimpleDateFormat(""HH:mm:ss"");Calendar cal=Calendar.getInstance();threadMessage+=String.format(""Thread id:  %s.  Customer name:  %s.  Thread state: %s. Start time: %s    %s %n"",threadId,customerName,""Viewed statement"",dateFormat.format(currentDate),time.format(cal.getTime()));for(int i=0;i<data.size();i++){String dateString=data.get(i);String date=dateString.substring(1,11);try{if(CurrentDate.checkDatebetweenDates(startingDate,endingDate,date)){statementMessage+=data.get(i);statementMessage+=String.format(""%n"");}}catch(ParseException e1){JOptionPane.showMessageDialog(null,""Error!"");}}}if(statementMessage==""""){JOptionPane.showMessageDialog(null,""No transactions made during this period."");}else {accountInformation+=statementMessage;JOptionPane.showMessageDialog(null,accountInformation);}hidePanel(ModifiedWindowPanel);showPanel(OptionWindowPanel);startDate.setText("""");endDate.setText("""");statementMessage="""";}"
2265	"private void rangeCheck(int index){if(index>=size){throw new BallerinaException(""arrays index out of range: ""+outOfBoundsMsg(index));}}"
2266	"public int addData(int data,DataType dataType,boolean commit){if(this.dataType==DataStorage.DataType.UNDEFINED||dataType==DataStorage.DataType.UNDEFINED||dataType==this.dataType){if(this.dataType==DataStorage.DataType.UNDEFINED){this.dataType=dataType;}int amountToAdd=Math.min(data,this.maxData-this.data);if(commit){this.data+=amountToAdd;}return amountToAdd;}return 0;}"
2267	"public boolean checkoutByTitle(String title){Optional<Book> bookToCheckout=bookList.stream().filter(x -> x.getTitle().equalsIgnoreCase(title)).findFirst();return bookToCheckout!=null&&bookToCheckout.get().checkout();}"
2268	"public synchronized FutureTask<BoxAuthenticationInfo> refresh(BoxSession session) throws BoxException{BoxUser user=session.getUser();if(user==null){return doRefresh(session,session.getAuthInfo());}getAuthInfoMap(session.getApplicationContext());BoxAuthenticationInfo info=mCurrentAccessInfo.get(user.getId());if(info==null){mCurrentAccessInfo.put(user.getId(),session.getAuthInfo());info=mCurrentAccessInfo.get(user.getId());}if(!session.getAuthInfo().accessToken().equals(info.accessToken())){ final BoxAuthenticationInfo latestInfo=info;BoxAuthenticationInfo.cloneInfo(session.getAuthInfo(),info);return new FutureTask<BoxAuthenticationInfo>(new Callable<BoxAuthenticationInfo>(){  @Override public BoxAuthenticationInfo call() throws Exception {    return latestInfo;  }});}FutureTask task=mRefreshingTasks.get(user.getId());if(task!=null){return task;}return doRefresh(session,info);}"
2269	"private void updateToolbarActions(){TextView tv=(TextView)dashboardView.findViewById(R.id.toolbar_text);tv.setText("""");boolean waypointsVisible=visibleType==DashboardType.WAYPOINTS||visibleType==DashboardType.WAYPOINTS_FLAT;boolean waypointsEdit=visibleType==DashboardType.WAYPOINTS_EDIT;if(waypointsVisible||waypointsEdit){tv.setText(R.string.waypoints);}else {if(visibleType==DashboardType.CONFIGURE_MAP){tv.setText(R.string.configure_map);}else {if(visibleType==DashboardType.CONFIGURE_SCREEN){tv.setText(R.string.layer_map_appearance);}}}ImageView edit=(ImageView)dashboardView.findViewById(R.id.toolbar_edit);edit.setVisibility(View.GONE);ImageView sort=(ImageView)dashboardView.findViewById(R.id.toolbar_sort);sort.setVisibility(View.GONE);ImageView ok=(ImageView)dashboardView.findViewById(R.id.toolbar_ok);ok.setVisibility(View.GONE);ImageView flat=(ImageView)dashboardView.findViewById(R.id.toolbar_flat);flat.setVisibility(View.GONE);ImageView settings=(ImageView)dashboardView.findViewById(R.id.toolbar_settings);settings.setVisibility(View.GONE);IconsCache iconsCache=mapActivity.getMyApplication().getIconsCache();ImageView lst=(ImageView)dashboardView.findViewById(R.id.toolbar_list);lst.setVisibility(View.GONE);ImageView back=(ImageView)dashboardView.findViewById(R.id.toolbar_back);back.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    backPressed();  }});if(waypointsVisible){edit.setVisibility(View.VISIBLE);edit.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    setDashboardVisibility(true,DashboardType.WAYPOINTS_EDIT);  }});flat.setVisibility(View.VISIBLE); final boolean flatNow=visibleType==DashboardType.WAYPOINTS_FLAT;flat.setImageDrawable(iconsCache.getActionBarIcon(flatNow?R.drawable.ic_tree_list_dark:R.drawable.ic_flat_list_dark));flat.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    setDashboardVisibility(true,flatNow ? DashboardType.WAYPOINTS : DashboardType.WAYPOINTS_FLAT);  }});}if(waypointsEdit){ok.setVisibility(View.VISIBLE);ok.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    mapActivity.getMyApplication().getWaypointHelper().removeVisibleLocationPoint(deletedPoints);    hideDashboard();  }});if(mapActivity.getMyApplication().getTargetPointsHelper().getIntermediatePoints().size()>0){sort.setVisibility(View.VISIBLE);sort.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    hideDashboard();    IntermediatePointsDialog.openIntermediatePointsDialog(mapActivity,getMyApplication(),true);  }});}}if(visibleType==DashboardType.DASHBOARD||visibleType==DashboardType.LIST_MENU){settings.setVisibility(View.VISIBLE);settings.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Class<? extends Activity> sta=mapActivity.getMyApplication().getAppCustomization().getSettingsActivity();    visible=false;    mapActivity.startActivity(new Intent(mapActivity,sta));  }});lst.setVisibility(View.VISIBLE);if(visibleType==DashboardType.DASHBOARD){lst.setImageDrawable(iconsCache.getActionBarIcon(R.drawable.ic_navigation_drawer));}else {if(visibleType==DashboardType.LIST_MENU){lst.setImageDrawable(iconsCache.getActionBarIcon(R.drawable.ic_dashboard_dark));}}lst.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if (visibleType == DashboardType.DASHBOARD) {      setDashboardVisibility(true,DashboardType.LIST_MENU);    } else {      setDashboardVisibility(true,DashboardType.DASHBOARD);    }  }});}}"
2270	"@Override protected void onException(Exception e){if(!state.done){state.done=true;callback.setException(e);}}"
2271	"public List<List<String>> tokenize(String inputStringParam){this.createSentence=false;this.isCandidateAbrev=false;this.inputString=inputStringParam;this.tokenList=new ArrayList<>();this.sentenceList=new ArrayList<>();int il=this.inputString.length();int state=0;int start=0;int delimCnt=0;int end=0;char c='\0';logger.debug(""Input (#""+il+""): ""+this.inputString);while(true){logger.debug(""Start: ""+start+"" end: ""+end+"" State ""+state+"" c: ""+c);if(end>il){this.extendSentenceList();break;}if(end==il){c='\0';}else {c=this.inputString.charAt(end);}if(this.createSentence){this.extendSentenceList();}switch (state){case 1 :if((c=='\0')||TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);this.tokenList.add(newToken);state=0;start=(1+end);}else {if(this.splitString&&DELIMITER_CHARS.contains(c)){state=6;delimCnt++;}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);this.tokenList.add(newToken);this.setCandidateAbrev(newToken);this.tokenList.add(Character.toString(c));this.setCreateSentenceFlag(c);state=0;start=(1+end);}}}break;case 0 :if(TOKEN_SEP_CHARS.contains(c)){start++;}else {if((c=='\0')){this.createSentence=true;}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);this.tokenList.add(newToken);this.isCandidateAbrev=false;this.setCreateSentenceFlag(c);start++;}else {if(Character.isDigit(c)){state=2;}else {state=1;}}}}break;case 2 :if((c=='\0')||TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);state=0;start=(1+end);}else {if(c=='.'){state=4;}else {if(c==','){state=3;}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);this.tokenList.add(Character.toString(c));this.setCreateSentenceFlag(c);state=0;start=(1+end);}else {if(Character.isDigit(c)){}else {state=1;}}}}}break;case 3 :if((c=='\0')||TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,(end-1),this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);this.tokenList.add("","");state=0;start=(1+end);}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,(end-1),this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);this.tokenList.add("","");this.tokenList.add(Character.toString(c));state=0;start=(1+end);}else {if(Character.isDigit(c)){state=2;}else {String newToken=this.makeToken(start,(end-1),this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);this.tokenList.add("","");state=1;start=end;}}}break;case 4 :if((c=='\0')){String newToken=this.makeToken(start,end,this.lowerCase);String numberString=convertToCardinalAndOrdinal(newToken);this.tokenList.add(numberString);this.tokenList.add(""."");this.createSentence=true;state=0;start=(1+end);}else {if(TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String numberString=convertToOrdinal(newToken);this.tokenList.add(numberString);state=0;start=(1+end);}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String numberString=convertToOrdinal(newToken);this.tokenList.add(numberString);this.tokenList.add(Character.toString(c));this.setCreateSentenceFlag(c);state=0;start=(1+end);}else {if(Character.isDigit(c)){state=2;}else {String newToken=this.makeToken(start,end,this.lowerCase);String numberString=convertToOrdinal(newToken);this.tokenList.add(numberString);state=1;start=end;}}}}break;case 5 :if((c=='\0')||TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);state=0;start=(1+end);}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,end,this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);this.tokenList.add(Character.toString(c));this.setCreateSentenceFlag(c);state=0;start=(1+end);}else {if(!Character.isDigit(c)){String newToken=this.makeToken(start,end,this.lowerCase);String cardinalString=convertToCardinal(newToken);this.tokenList.add(cardinalString);state=1;start=end;}}}break;case 6 :if((c=='\0')||TOKEN_SEP_CHARS.contains(c)){String newToken=this.makeToken(start,(end-delimCnt),this.lowerCase);this.tokenList.add(newToken);state=0;delimCnt=0;start=(1+end);}else {if(DELIMITER_CHARS.contains(c)){delimCnt++;}else {if(SPECIAL_CHARS.contains(c)){String newToken=this.makeToken(start,(end-delimCnt),this.lowerCase);this.tokenList.add(newToken);this.tokenList.add(Character.toString(c));this.setCreateSentenceFlag(c);state=0;delimCnt=0;start=(1+end);}else {if(Character.isDigit(c)){state=0;}else {String newToken=this.makeToken(start,(end-delimCnt),this.lowerCase);this.tokenList.add(newToken);state=1;delimCnt=0;start=end;}}}}break;default :logger.error(""unknown state ""+state+"", will be ignored"");}end++;}return this.sentenceList;}"
2272	"@Override public View getView(int position,View convertView,ViewGroup parent){LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View row=inflater.inflate(layout_id,parent,false);overdueVisit=false;ImageView ivReportStatus=(ImageView)row.findViewById(R.id.ivReportStatus);TextView tvVisitDay=(TextView)row.findViewById(R.id.tvVisitDay);TextView tvVisitMonth=(TextView)row.findViewById(R.id.tvVisitMonth);TextView tvVisitTime=(TextView)row.findViewById(R.id.tvVisitTime);TextView clientNameTextView=(TextView)row.findViewById(R.id.tvClientName);TextView serviceTypeTextView=(TextView)row.findViewById(R.id.tvVisitTOS);TextView clientAddressTextView=(TextView)row.findViewById(R.id.tvClientAddress);VisitItem visitItem=visitItems.get(position);ClientData clientData=visitItem.getClientData();ProductData productData=visitItem.getProductData();GeaSopralluogo geaSopralluogo=visitItem.getGeaSopralluogo();String dataOraSopralluogo=geaSopralluogo.getData_ora_sopralluogo();int tech_id=geaSopralluogo.getId_tecnico();String techName="""";TechnicianItem technicianItem=realm.where(TechnicianItem.class).equalTo(""id"",tech_id).findFirst();if(technicianItem!=null){techName=technicianItem.getFullNameTehnic();}String productType=productData.getProductType();String clientName=clientData.getName();clientName=clientName.toLowerCase();String[] strArray=clientName.split("" "");StringBuilder builder=new StringBuilder();for(String s : strArray){String cap=s.substring(0,1).toUpperCase()+s.substring(1);builder.append(cap).append("" "");}clientNameTextView.setText(builder.toString());serviceTypeTextView.setText(productType);clientAddressTextView.setText(clientData.getAddress());boolean ownReport=selectedTech.getId()==tech_id;TextView tvTechName=(TextView)row.findViewById(R.id.tvTechName);tvTechName.setText(techName);Calendar calendarTodayFirstMin=Calendar.getInstance(Locale.ITALY);calendarTodayFirstMin.set(Calendar.HOUR_OF_DAY,0);calendarTodayFirstMin.set(Calendar.MINUTE,0);calendarTodayFirstMin.set(Calendar.SECOND,0);long firstMilliSecondsOfToday=calendarTodayFirstMin.getTimeInMillis();SimpleDateFormat sdf=new SimpleDateFormat(""yyyy-MM-dd hh:mm:ss"",Locale.ITALIAN);Date date=null;try{date=sdf.parse(dataOraSopralluogo);long time=date.getTime();if(time<firstMilliSecondsOfToday){overdueVisit=true;}}catch(ParseException e){e.printStackTrace();}if(tech_id!=0){Calendar calendar=Calendar.getInstance();try{calendar.setTime(sdf.parse(dataOraSopralluogo));}catch(ParseException e){e.printStackTrace();}if(ownReport){if(overdueVisit){ivReportStatus.setBackgroundResource(R.drawable.red_oval_shape);}else {ivReportStatus.setBackgroundResource(R.drawable.dot_green);}}else {ivReportStatus.setBackgroundResource(R.drawable.dot_gray);}tvVisitDay.setVisibility(View.VISIBLE);tvVisitMonth.setVisibility(View.VISIBLE);tvVisitDay.setText(Integer.toString(calendar.get(Calendar.DAY_OF_MONTH)));tvVisitMonth.setText(ItalianMonths.numToString(calendar.get(Calendar.MONTH)+1));String minuteStr=Integer.toString(calendar.get(Calendar.MINUTE));if(minuteStr.length()==1){minuteStr=""0""+minuteStr;}tvVisitTime.setText(Integer.toString(calendar.get(Calendar.HOUR_OF_DAY))+"":""+minuteStr);}else {ivReportStatus.setBackgroundResource(R.drawable.dot_yellow);tvVisitDay.setText("""");tvVisitMonth.setText("""");tvVisitTime.setText("""");}return row;}"
2273	"private int getHeuristicValue(Node node){int heuristicVal=0;if(winningState(node)==2){heuristicVal=20;if(!Game.TESTING){System.out.println(""**********************************FOUND WINNING STATE FOR BOT**************************************"");}}else {if(winningState(node)==1){heuristicVal=5;if(!Game.TESTING){System.out.println(""**********************************FOUND WINNING STATE FOR USER**************************************"");}}else {heuristicVal=(int)(Math.random()*10);if(!Game.TESTING){System.out.println(""**********************************RANDOM STATE GETTING US CLOSER TO A WIN****************************"");}}}return heuristicVal;}"
2274	"public List<ExerciseName> addExerciseName(UserOpenid user,List<ExerciseName> names) throws ConnectionException{if(logger.isLoggable(Level.FINE)){logger.log(Level.FINE,""Adding exercise names: ""+names.size());}List<ExerciseName> list=new ArrayList<ExerciseName>();try{List<ExerciseName> listAll=cache.getExerciseNames();if(listAll==null){listAll=dao.getExerciseNames();}for(ExerciseName name : names){if(!listAll.contains(name)){name.setUid(user.getUid());dao.addExerciseName(name);listAll.add(name);}list.add(name);}cache.setExerciseNames(listAll);}catch(Exception e){logger.log(Level.SEVERE,""Error adding exercise names"",e);throw new ConnectionException(""Error adding exercise names"",e);}return list;}"
2275	"@Override public void onReceive(Context context,Intent intent){String action=intent.getAction();if(action.equals(BroadCastHelper.ACTION_MUSIC_PLAY)||action.equals(BroadCastHelper.ACTION_MUSIC_PLAY_NEXT)||action.equals(BroadCastHelper.ACTION_MUSIC_PLAY_PREVIOUS)||action.equals(BroadCastHelper.ACTION_MUSIC_PLAY_RANDOM)){refreshPlayPanel();}}"
2276	"@ResponseBody @RequestMapping(value=""/orderItem/alter"",method=RequestMethod.POST) public String alterOrderItemInfo(OrderItemDB orderItem){OrderItemDB orderItemDB=orderService.updateItem(orderItem);OrderDB orderDB=orderItemDB.getOrderDB();if(orderDB.getIsSetPrice()&&orderDB.getFactoryStatus()==OrderStatus.WAIT_PRICE){orderDB.setFactoryStatus(OrderStatus.UN_PAY);}orderService.save(orderDB);Map<String,Object> resultData=Maps.newHashMap();resultData.put(""id"",orderItemDB.getId());resultData.put(""divPrice"",orderItemDB.getDivPrice());resultData.put(""standard"",orderItemDB.getStandard());resultData.put(""quantityOrdered"",orderItemDB.getQuantityOrdered());return AjaxResponseBodyFactory.createSuccessBody(true,resultData);}"
2277	"private boolean accepts(Watcher watcher,PatheShowing showing){int realWatcherCinemaId=Integer.parseInt(watcher.getFilters().getCinemaid().substring(getCinemaIdPrefix().length()));WatcherFilters d=watcher.getFilters();return showing.getMovieId()==watcher.getMovieid()&&showing.getStart()<watcher.getBegin()&&showing.getStart()>watcher.getEnd()&&showing.getCinemaId()==realWatcherCinemaId&&(d==null||(eq(d.isD3(),showing.getIs3d())&&eq(d.isImax(),showing.getImax())&&eq(d.isOv(),showing.getOv())&&eq(d.isNl(),showing.getNl())&&eq(d.isHfr(),showing.getHfr())&&eq(d.isDolbyatmos(),showing.getIsAtmos())&&eq(d.isK4(),showing.getIs4k())&&eq(d.isLaser(),showing.getIsLaser())));}"
2278	"@Override public boolean chk(){return !(type==null||keystore==null||alias==null||certPassword==null||name==null||identityCode==null||sex==null||country==null||province==null||city==null);}"
2279	"private int tryGetYear(String str){try{val year=Integer.parseInt(str);return year>=1900?year:-1;}catch(Exception e){return -1;}}"
2280	"public final EObject ruleEvoMappingBooleanValueExpression() throws RecognitionException{EObject current=null;Token lv_value_1_0=null;Token otherlv_2=null;enterRule();try{{{{current=forceCreateModelElement(grammarAccess.getEvoMappingBooleanValueExpressionAccess().getHyBooleanValueExpressionAction_0(),current);}int alt23=2;int LA23_0=input.LA(1);if((LA23_0==39)){alt23=1;}else {if((LA23_0==40)){alt23=2;}else {NoViableAltException nvae=new NoViableAltException("""",23,0,input);throw nvae;}}switch (alt23){case 1 :{{{lv_value_1_0=(Token)match(input,39,FOLLOW_2);newLeafNode(lv_value_1_0,grammarAccess.getEvoMappingBooleanValueExpressionAccess().getValueTrueKeyword_1_0_0());if(current==null){current=createModelElement(grammarAccess.getEvoMappingBooleanValueExpressionRule());}setWithLastConsumed(current,""value"",true,""true"");}}}break;case 2 :{otherlv_2=(Token)match(input,40,FOLLOW_2);newLeafNode(otherlv_2,grammarAccess.getEvoMappingBooleanValueExpressionAccess().getFalseKeyword_1_1());}break;}}}leaveRule();}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
2281	"@Override public void additionalLOR(String secondAssessmentFilename) throws Exception{if(currentMode==Mode.COHORTGRAPH||currentMode==Mode.STRUCTUREGRAPHWITHRESOURCE||currentMode==Mode.STRUCTUREGRAPHWITHASSESSMENT){assessmentFiles.add(secondAssessmentFilename);clearAndCreateCohortData(structureFiles,resourceFiles,assessmentFiles);}else {throw new Exception(""Wrong mode"");}}"
2282	"public static boolean checkEnabled(String key){return AppSettings.DEBUG||preferences.getBoolean(key,false);}"
2283	"private ServiceAdapter getServiceAdapter(GraniteContext context,Destination destination,String key,String adapterId){lock.lock();try{Map<String,Object> cache=Collections.synchronizedMap(context.getApplicationMap());Adapter config=destination.getAdapter();ServiceAdapter serviceAdapter=(ServiceAdapter)cache.get(key);if(serviceAdapter!=null&&serviceAdapter instanceof OSGiAdapterAbstraction){OSGiAdapterAbstraction adapterAbstraction=(OSGiAdapterAbstraction)serviceAdapter;if(adapterAbstraction.getAdapter()!=config){serviceAdapter=null;log.info(""Flush \""""+key+""\"" from cache"");}}if(serviceAdapter==null){log.debug("">> No cached factory for: %s"",adapterId);GraniteAdapter ga;synchronized(osgiServices){ga=osgiServices.get(config.getId());}if(ga==null){throw new ServiceException(""Could not get OSGi adapter: ""+destination.getId());}serviceAdapter=new OSGiAdapterAbstraction(ga,config);cache.put(key,serviceAdapter);}else {log.debug("">> Found a cached serviceAdapter for ref: %s"",destination.getAdapter());}log.debug(""<< Returning serviceAdapter: %s"",serviceAdapter);serviceAdapter.setDestination(destination);return serviceAdapter;}finally{lock.unlock();}}"
2284	"@Override public boolean apply(DetailAST ast){return !isExprAcceptable(frame,ast);}"
2285	"@Override public void execute(HttpServletRequest request,HttpServletResponse response){String login=request.getParameter(REQUEST_PARAM_LOGIN);String password=request.getParameter(REQUEST_PARAM_PASSWORD);HttpSession session=request.getSession(true);String page=PAGE_DEFAULT;User user;CookieController cookieController=new CookieController();try{user=authorizationService.userData(login,password);if(user!=null){List<FlightDirection> flightDirection=directionService.listDirections();session.setAttribute(REQUEST_PARAM_LIST_DIRECTION,flightDirection);session.setAttribute(REQUEST_PARAM_SESSION_USERNAME,user.getUserName());session.setAttribute(REQUEST_PARAM_SESSION_USER,user);Flight selectedChangedFlight=searchChangedFlightService.searchCancelledFlight(user);if(selectedChangedFlight!=null){session.setAttribute(REQUEST_PARAM_SESSION_CANCELLED_FLIGHT,selectedChangedFlight);request.setAttribute(REQUEST_PARAM_SESSION_CANCELLED_FLIGHT,selectedChangedFlight);}else {selectedChangedFlight=searchChangedFlightService.searchChangedFlight(user);session.setAttribute(REQUEST_PARAM_SESSION_CHANGED_FLIGHT,selectedChangedFlight);request.setAttribute(REQUEST_PARAM_SESSION_CHANGED_FLIGHT,selectedChangedFlight);}cookieController.doGet(request,response);String workingDir=System.getProperty(""user.dir"");System.out.println(workingDir);log.info(""?????????????? ?????????"");page=PAGE_HOME;}else {page=PAGE_ERROR;}}catch(ServiceException e){e.printStackTrace();}catch(ServletException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}ForwardPage.forwardPage(request,response,page);}"
2286	"@Override public void onEvent(Event event){if(event instanceof ReadyEvent){ final List<Guild> guilds=event.getJDA().getGuilds();for(Guild guild : guilds){Config config=serverConfigRepository.getConfigForServer(guild.getName().trim().toLowerCase());if(config!=null){ final String messageId=config.getOverviewMessageId();if(!StringUtils.isEmpty(messageId)){for(MessageChannel channel : guild.getTextChannels()){getAndAttachToOverviewMessageIfExists(guild,config,messageId,channel);}}}}}}"
2287	"@PostMapping(value=""/person/email/exists"") public ResponseEntity<Boolean> getInterview(Person person){Boolean exists=Boolean.FALSE;Person existingPerson=personService.findByEmail(person.getEmail());if(person.getId()!=null){if(!existingPerson.getId().equals(person.getId())){exists=Boolean.TRUE;}}else {if(existingPerson!=null){exists=Boolean.TRUE;}}return ResponseEntity.status(HttpStatus.OK).body(exists);}"
2288	"private synchronized void finalizePlayerTurn(){if(player_move==BattleMove.SWITCH_POKEMON){G.game.sendSwitchBattleMessage(player_next_poke);}else {G.game.sendSimpleBattleMessage(player_move,player_move_index);}waitingForPlayer=false;if(battleType==BattleType.TRAINER){if(!waitingForOpponent){executeTurn();}else {display.showProgressDialog(""Waiting for opponent..."");}}else {performAI();executeTurn();}}"
2289	"int pauseMusic(){if(currentPlayer!=null){musicPosition=currentPlayer.getCurrentPosition();if(currentPlayer!=null&&currentPlayer.isPlaying()){removeNextMediaPlayer();currentPlayer.pause();if(musicEngineListener!=null){musicEngineListener.onMusicEnginePause();}HXLog.d(LOG_TAG,""MUSIC: pause(): Music playback has been paused."");return musicPosition;}}HXLog.e(LOG_TAG,""ERROR: pause(): Music could not be paused."");return 0;}"
2290	"private boolean isFileNameAccepted(String name){if(name!=null&&name.trim().length()>0){return getExtensionsAccepted().stream().anyMatch(s -> name.endsWith(""."" + s));}return null!=name&&name.endsWith("".""+METADATA_EXTENSION);}"
2291	"@Override public boolean isAbleToBeUsed(GameCharacter target){if(target.getPenisType()!=PenisType.NONE&&target.isCoverableAreaExposed(CoverableArea.PENIS)&&!target.isWearingCondom()){return true;}else {return false;}}"
2292	"public void check() throws SQLException{if(this.connData.get()==null||this.connData.get().getConnection().isClosed()){try{ final ConnectionData cd=new ConnectionData(this.dataSource.getConnection(),this.queriesClass.newInstance());this.connData.set(cd);this.queries().init(this);if(this.debug){System.out.println(""Opened ID: ""+Integer.toHexString(cd.hashCode())+"" from ""+CommonUtils.shortStackTrace(2,0));connections.offer(new WeakReference<>(cd));Iterator<WeakReference<ConnectionData>> it=this.connections.iterator();while(it.hasNext()){WeakReference<ConnectionData> wcd=it.next();if(wcd.get()==null){it.remove();}else {if(wcd.get().getLastUsedTime()+30000<System.currentTimeMillis()){System.err.println(""Connection ID ""+Integer.toHexString(wcd.get().hashCode())+"" is unused for more than 30 seconds. Potential memory leak. Stack trace: ""+wcd.get().stackTrace);}}}}}catch(InstantiationException|IllegalAccessException|SecurityException e){throw new IllegalArgumentException(e);}}}"
2293	"@Override public final boolean repOK(){return P_CONSTRAINT!=null&&!P_CONSTRAINT.isEmpty()&&P_DEFAULT_MAX!=null&&!P_DEFAULT_MAX.isEmpty()&&P_DEFAULT_MIN!=null&&!P_DEFAULT_MIN.isEmpty()&&P_MAXES!=null&&!P_MAXES.isEmpty()&&P_MINS!=null&&!P_MINS.isEmpty()&&P_MUTATION_RATE!=null&&!P_MUTATION_RATE.isEmpty()&&P_NUM_DIMENSIONS!=null&&!P_NUM_DIMENSIONS.isEmpty()&&P_RANDOM!=null&&!P_RANDOM.isEmpty()&&mutationRate>=0&&!Double.isInfinite(mutationRate)&&!Double.isNaN(mutationRate)&&random!=null&&maxes!=null&&mins!=null&&maxes.length==mins.length&&Misc.arrayLessThanOrEqualTo(mins,maxes)&&constraint!=null&&!(stopOnConstraintViolation&&!constraint.isDefined());}"
2294	"private void choose_policies(boolean isPublic,String paymentProcessor,List<Object> policies){rateplan.add_policies_children(isPublic).click();if(String.valueOf(policies.get(0)).toLowerCase().equals(""children allowed"")){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_children_allowed()));rateplan.add_policies_children_allowed().click();rateplan.add_policies_children_allowed_age(isPublic).click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_children_allowed_age_value(String.valueOf(policies.get(1))))));driver.findElement(By.xpath(rateplan.add_policies_children_allowed_age_value(String.valueOf(policies.get(1))))).click();}else {if(String.valueOf(policies.get(0)).toLowerCase().equals(""children withcharge"")){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_children_withcharge()));rateplan.add_policies_children_withcharge().click();rateplan.add_policies_children_allowed_age(isPublic).click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_children_allowed_age_value(String.valueOf(policies.get(1))))));driver.findElement(By.xpath(rateplan.add_policies_children_allowed_age_value(String.valueOf(policies.get(1))))).click();wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_children_withcharge_value(isPublic)));rateplan.add_policies_children_withcharge_value(isPublic).sendKeys(String.valueOf(policies.get(2)));}else {wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_children_notallowed()));rateplan.add_policies_children_notallowed().click();}}if(String.valueOf(policies.get(3)).toLowerCase().contains(""booking"")){if(paymentProcessor.equals(""HPP_PB"")){if(!rateplan.add_policies_prepayment_booking().getAttribute(""checked"").equals("""")){rateplan.add_policies_prepayment_booking().click();}}if(isPublic){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_prepayment(isPublic)));rateplan.add_policies_prepayment(isPublic).click();if(String.valueOf(policies.get(4)).toLowerCase().contains(""full"")){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_prepayment_full()));rateplan.add_policies_prepayment_full().click();}else {wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_prepayment_partial()));rateplan.add_policies_prepayment_partial().click();}}}else {if(!rateplan.add_policies_prepayment_arrival().getAttribute(""checked"").equals("""")){rateplan.add_policies_prepayment_arrival().click();}}if(String.valueOf(policies.get(3)).toLowerCase().contains(""booking"")){if(!(paymentProcessor.equals(""DWH"")&&String.valueOf(policies.get(4)).toLowerCase().contains(""partial""))){if(String.valueOf(policies.get(5)).toLowerCase().equals(""refundable"")){rateplan.add_policies_prepayment_refundable().click();}else {rateplan.add_policies_prepayment_nonrefundable().click();}}}if(paymentProcessor.equals(""DWH"")||paymentProcessor.equals(""HPP_PA"")){if((String.valueOf(policies.get(4)).toLowerCase().contains(""full"")&&String.valueOf(policies.get(5)).toLowerCase().equals(""refundable""))||String.valueOf(policies.get(4)).toLowerCase().contains(""partial"")||String.valueOf(policies.get(3)).toLowerCase().contains(""arrival"")){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_modif_period()));rateplan.add_policies_modif_period().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))));driver.findElement(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))).click();if(!String.valueOf(policies.get(6)).toLowerCase().contains(""immediately"")){rateplan.add_policies_modif_period_value().sendKeys(String.valueOf(policies.get(7)));}wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_modif_chargetype()));rateplan.add_policies_modif_chargetype().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))));driver.findElement(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))).click();wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_cancel_period()));rateplan.add_policies_cancel_period().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))));driver.findElement(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))).click();if(!String.valueOf(policies.get(6)).toLowerCase().contains(""immediately"")){rateplan.add_policies_cancel_period_value().sendKeys(String.valueOf(policies.get(7)));}wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_cancel_chargetype()));rateplan.add_policies_cancel_chargetype().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))));driver.findElement(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))).click();wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_noshow_chargetype()));((JavascriptExecutor)driver).executeScript(""arguments[0].scrollIntoView(true);"",rateplan.add_policies_noshow_chargetype());rateplan.add_policies_noshow_chargetype().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))));driver.findElement(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))).click();}}else {wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_modif_period()));rateplan.add_policies_modif_period().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))));driver.findElement(By.xpath(rateplan.add_policies_periodtype(String.valueOf(policies.get(6))))).click();if(String.valueOf(policies.get(5)).toLowerCase().equals(""refundable"")){rateplan.add_policies_modif_period_value().sendKeys(String.valueOf(policies.get(7)));if(paymentProcessor.equals(""HPP_PB"")){wait.until(ExpectedConditions.elementToBeClickable(rateplan.add_policies_modif_chargetype()));rateplan.add_policies_modif_chargetype().click();wait.until(ExpectedConditions.elementToBeClickable(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))));driver.findElement(By.xpath(rateplan.add_policies_chargetype(String.valueOf(policies.get(8))))).click();}}}}"
2295	"public void resetImage(int w,int h){if(w>h){int temp=w;w=h;h=temp;}if(mBackgroundBitmapFile.exists()){mBitmap=FileUtils.getBitmapAccuratelyScaledToDisplay(mBackgroundBitmapFile,w,h).copy(Bitmap.Config.ARGB_8888,true);mCanvas=new Canvas(mBitmap);}else {mBitmap=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);mCanvas=new Canvas(mBitmap);mCanvas.drawColor(0xffffffff);if(isSignature){drawSignLine();}}}"
2296	"private void changeTab(int tabIndex){Log.w(""log"",""Current tab: ""+tabHost.getCurrentTab()+""\nIndex: ""+tabIndex);if(tabHost.getCurrentTab()==tabIndex){hideNav();tabHost.setCurrentTab(0);radioGroup.clearCheck();}else {showNav();tabHost.setCurrentTab(tabIndex);}}"
2297	"private boolean ignoreLonelyReturn(DetailAST aObjectBlockAst){return mAllowReturnInEmptyMethodsAndConstructors&&aObjectBlockAst.getFirstChild().getType()==TokenTypes.LITERAL_RETURN;}"
2298	"public void sendWebSocketBroadcast(SocketMessageDto socketMsg){Intent intent=new Intent(ContextVS.WEB_SOCKET_BROADCAST_ID);WebSocketSession socketSession=appVS.getWSSession(socketMsg.getUUID());try{if(socketSession==null&&socketMsg.isEncrypted()){byte[] decryptedBytes=appVS.decryptMessage(socketMsg.getAesParams().getBytes());AESParamsDto aesDto=JSON.readValue(decryptedBytes,AESParamsDto.class);AESParams aesParams=AESParams.load(aesDto);socketMsg.decryptMessage(aesParams);appVS.putWSSession(socketMsg.getUUID(),new WebSocketSession(socketMsg));}else {if(socketSession!=null&&socketMsg.isEncrypted()){socketMsg.decryptMessage(socketSession.getAESParams());}}LOGD(TAG+"".sendWebSocketBroadcast"",""statusCode: ""+socketMsg.getStatusCode()+"" - Operation: ""+socketMsg.getOperation()+"" - MessageType: ""+socketMsg.getMessageType());intent.putExtra(ContextVS.WEBSOCKET_MSG_KEY,JSON.writeValueAsString(socketMsg));switch (socketMsg.getOperation()){case MESSAGEVS_FROM_VS :if(socketSession!=null){LOGD(TAG,""MESSAGEVS_FROM_VS - pong - TypeVS: ""+socketSession.getTypeVS());socketMsg.setOperation(socketSession.getTypeVS());switch (socketSession.getTypeVS()){case INIT_SIGNED_SESSION :if(ResponseVS.SC_WS_CONNECTION_INIT_OK==socketMsg.getStatusCode()){appVS.setConnectedDevice(socketMsg.getConnectedDevice());appVS.setWithSocketConnection(true);}else {appVS.setWithSocketConnection(false);}LocalBroadcastManager.getInstance(this).sendBroadcast(intent);break;default :LOGD(TAG,""MESSAGEVS_FROM_VS unprocessed"");}}if(ResponseVS.SC_WS_CONNECTION_NOT_FOUND==socketMsg.getStatusCode()||ResponseVS.SC_ERROR==socketMsg.getStatusCode()){String message=socketMsg.getMessage();if(ResponseVS.SC_WS_CONNECTION_NOT_FOUND==socketMsg.getStatusCode()){message=getString(R.string.device_not_found_error_msg);}UIUtils.launchMessageActivity(ResponseVS.SC_ERROR,message,getString(R.string.error_lbl));}break;case WEB_SOCKET_CLOSE :if(ResponseVS.SC_OK==socketMsg.getStatusCode()){appVS.setWithSocketConnection(false);}LocalBroadcastManager.getInstance(this).sendBroadcast(intent);break;case MESSAGEVS :if(ResponseVS.SC_OK==socketMsg.getStatusCode()){ResponseVS responseVS=new ResponseVS(ResponseVS.SC_OK,socketMsg.getMessage());responseVS.setCaption(getString(R.string.message_lbl)).setNotificationMessage(socketMsg.getMessage());MessageContentProvider.insert(getContentResolver(),socketMsg);PrefUtils.addNumMessagesNotReaded(appVS,1);Utils.showNewMessageNotification(appVS);}else {LocalBroadcastManager.getInstance(this).sendBroadcast(intent);}break;case MESSAGEVS_SIGN :intent=new Intent(this,SMIMESignerActivity.class);intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);intent.putExtra(ContextVS.WEBSOCKET_MSG_KEY,JSON.writeValueAsString(socketMsg));startActivity(intent);break;case MESSAGEVS_SIGN_RESPONSE :LocalBroadcastManager.getInstance(this).sendBroadcast(intent);break;case CURRENCY_WALLET_CHANGE :if(socketMsg.getMessageType()==TypeVS.MESSAGEVS_FROM_DEVICE){if(ResponseVS.SC_OK==socketMsg.getStatusCode()&&socketSession!=null){Wallet.remove((Collection<Currency>)socketSession.getData());LocalBroadcastManager.getInstance(this).sendBroadcast(intent);}}else {if(socketMsg.getMessageType()==TypeVS.MESSAGEVS_TO_DEVICE){MessageContentProvider.insert(getContentResolver(),socketMsg);PrefUtils.addNumMessagesNotReaded(appVS,1);Utils.showNewMessageNotification(appVS);}}break;case TRANSACTIONVS_INFO :LocalBroadcastManager.getInstance(this).sendBroadcast(intent);if(ResponseVS.SC_ERROR!=socketMsg.getStatusCode()){TransactionVSDto dto=socketMsg.getMessage(TransactionVSDto.class);dto.setSocketMessageDto(socketMsg);dto.setQrMessageDto((QRMessageDto)socketSession.getData());Intent resultIntent=new Intent(this,FragmentContainerActivity.class);resultIntent.putExtra(ContextVS.FRAGMENT_KEY,PaymentFragment.class.getName());resultIntent.putExtra(ContextVS.TRANSACTION_KEY,dto);resultIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);startActivity(resultIntent);}else {UIUtils.launchMessageActivity(ResponseVS.SC_ERROR,socketMsg.getMessage(),getString(R.string.error_lbl));}break;case QR_MESSAGE_INFO :if(ResponseVS.SC_ERROR!=socketMsg.getStatusCode()){SocketMessageDto msgDto=null;try{QRMessageDto<TransactionVSDto> qrDto=AppVS.getInstance().getQRMessage(socketMsg.getMessage());qrDto.setHashCertVS(socketMsg.getContent().getHashCertVS());TransactionVSDto transactionDto=qrDto.getData();Currency currency=new Currency(AppVS.getInstance().getCurrencyServer().getServerURL(),transactionDto.getAmount(),transactionDto.getCurrencyCode(),transactionDto.isTimeLimited(),qrDto.getHashCertVS(),transactionDto.getTagName());qrDto.setCurrency(currency);SMIMEMessage simeMessage=AppVS.getInstance().signMessage(qrDto.getHashCertVS(),new String(currency.getCertificationRequest().getCsrPEM()),getString(R.string.currency_change_subject));transactionDto.setMessageSMIME(new String(Base64.encode(simeMessage.getBytes())));msgDto=socketMsg.getResponse(ResponseVS.SC_OK,JSON.getMapper().writeValueAsString(transactionDto),AppVS.getInstance().getConnectedDevice().getId(),simeMessage,TypeVS.TRANSACTIONVS_INFO);socketSession.setData(qrDto);}catch(Exception ex){ex.printStackTrace();msgDto=socketMsg.getResponse(ResponseVS.SC_ERROR,ex.getMessage(),AppVS.getInstance().getConnectedDevice().getId(),TypeVS.QR_MESSAGE_INFO);}finally{session.getBasicRemote().sendText(JSON.writeValueAsString(msgDto));}}else {UIUtils.launchMessageActivity(ResponseVS.SC_ERROR,socketMsg.getMessage(),getString(R.string.error_lbl));}break;case TRANSACTIONVS_RESPONSE :if(ResponseVS.SC_ERROR!=socketMsg.getStatusCode()){try{QRMessageDto<TransactionVSDto> qrDto=(QRMessageDto<TransactionVSDto>)socketSession.getData();SMIMEMessage smimeMessage=socketMsg.getSMIME();TypeVS typeVS=TypeVS.valueOf(smimeMessage.getHeader(""TypeVS"")[0]);if(TypeVS.CURRENCY_CHANGE==typeVS){Currency currency=qrDto.getCurrency();currency.initSigner(socketMsg.getMessage().getBytes());LOGD(TAG+"".sendWebSocketBroadcast"",""TODO - CURRENCY_CHANGE - save to wallet"");}TransactionVSDto transactionDto=qrDto.getData();String result=transactionDto.validateReceipt(smimeMessage,true);UIUtils.launchMessageActivity(ResponseVS.SC_OK,result,getString(R.string.ok_lbl));AppVS.getInstance().removeQRMessage(qrDto.getUUID());}catch(Exception ex){ex.printStackTrace();UIUtils.launchMessageActivity(ResponseVS.SC_ERROR,ex.getMessage(),getString(R.string.error_lbl));}}else {UIUtils.launchMessageActivity(ResponseVS.SC_ERROR,socketMsg.getMessage(),getString(R.string.error_lbl));}break;case OPERATION_CANCELED :socketMsg.setOperation(socketSession.getTypeVS());socketMsg.setStatusCode(ResponseVS.SC_CANCELED);intent.putExtra(ContextVS.WEBSOCKET_MSG_KEY,JSON.writeValueAsString(socketMsg));LocalBroadcastManager.getInstance(this).sendBroadcast(intent);break;default :LocalBroadcastManager.getInstance(this).sendBroadcast(intent);}}catch(Exception ex){ex.printStackTrace();}}"
2299	"@Override protected void mouseClicked(int mouseX,int mouseY,int mouseButton) throws IOException{if(tile.getField(2)==1){super.mouseClicked(mouseX,mouseY,mouseButton);nameField.mouseClicked(mouseX,mouseY,mouseButton);if(gearExtended&&mouseButton==0){updateTextField();}}else {super.mouseClicked(mouseX,mouseY,mouseButton);}}"
2300	"@Override public void onSetup(Context context,Dispatcher dispatcher){super.onSetup(context,dispatcher);if(dispatcher==null||dispatcher.type==null||dispatcher.type.expType==null){return ;}String groupKey=dispatcher.groupKey;String roomKey=dispatcher.roomKey;ExpType expType=dispatcher.expType!=null?dispatcher.expType:type.expType;if(expType!=null&&(expType==chessET||expType==checkersET)){mBoard=new Checkerboard(context);}if(expType!=null){mExperience=ExperienceManager.instance.getExperience(groupKey,roomKey,expType);if(mExperience==null&&dispatcher.expType!=null){createExperience(context,getPlayers(roomKey));}}}"
2301	"private void initCfg(){System.out.println(""Loading configuration file..."");try{cfg=new Config(configDir);}catch(ConfigurationException e){try{new File(configDir).createNewFile();cfg=new Config(configDir);cfg.set(""cfg_set"",""False"");System.out.println(""Configuration file created."");}catch(IOException e1){System.err.println(""Unable to create configuration file!"");}catch(ConfigurationException e1){System.err.println(""Unable to access configuration file. Error: ""+e1.getMessage());}}cfg_set=Boolean.parseBoolean(cfg.get(""cfg_set""));if(cfg_set){loadCfg();}else {createCfg();loadCfg();}}"
2302	"public void changeState(Integer clickednode){String oldstate=getState();String newstate="""";ArrayList<Integer> angles=new ArrayList<Integer>();if(oldstate.equals(""remove"")){if(activeplayer==Color.RED){bluecountonboard--;}else {redcountonboard--;}if((redcountoffboard!=0&&activeplayer==Color.RED)||(bluecountoffboard!=0&&activeplayer==Color.BLUE)){newstate=""place"";}else {newstate=""move"";if((activeplayer==Color.RED&&bluecountonboard<=2&&bluecountoffboard==0)||(activeplayer==Color.BLUE&&redcountonboard<=2&&redcountoffboard==0)){newstate=""win"";}if(activeplayer==Color.RED&&bluecountonboard==3&&!graph.MODE.equals(""six"")){bluestate=""fly"";}if(activeplayer==Color.BLUE&&redcountonboard==3&&!graph.MODE.equals(""six"")){redstate=""fly"";}}}else {if(oldstate.equals(""place"")){if(activeplayer==Color.RED){redcountonboard++;redcountoffboard--;}else {bluecountonboard++;bluecountoffboard--;}if((redcountoffboard==0&&activeplayer==Color.RED)||(bluecountoffboard==0&&activeplayer==Color.BLUE)){newstate=""move"";}else {newstate=""place"";}}else {if(oldstate.equals(""move"")){newstate=""move"";}else {if(oldstate.equals(""fly"")){newstate=""fly"";}}}}if(oldstate.equals(""place"")||oldstate.equals(""move"")||oldstate.equals(""fly"")){for(int n : graph.getNeighbors(clickednode)){if(!graph.getTokenStack(n).isEmpty()&&graph.getTokenStack(n).get(0).getColor()==activeplayer){if(angles.isEmpty()){angles.add(graph.getNeighborangle(clickednode,n));}else {for(int angle : angles){if(Math.abs(graph.getNeighborangle(clickednode,n)-angle)==180||Math.abs(graph.getNeighborangle(clickednode,n)-angle)==0){newstate=""remove"";}}}for(int nn : graph.getNeighbors(n)){if(nn!=clickednode){if(!graph.getTokenStack(nn).isEmpty()&&graph.getTokenStack(nn).get(0).getColor()==activeplayer){if(Math.abs(graph.getNeighborangle(clickednode,n)-graph.getNeighborangle(n,nn))==180||Math.abs(graph.getNeighborangle(clickednode,n)-graph.getNeighborangle(n,nn))==0){newstate=""remove"";}}}}}}}if(opponentmovesAvailable()==false){newstate=""win"";}else {if(repeatedPosition()){newstate=""draw"";}}setState(newstate);}"
2303	"@Override public WebResourceResponse shouldInterceptRequest(WebView view,String url){boolean ad;if(!loadedUrls.containsKey(url)){ad=AdBlocker.isAd(url,this);loadedUrls.put(url,ad);}else {ad=loadedUrls.get(url);}return ad&&(!currentURL.contains(""twitter.com""))&&SettingValues.tabletUI?AdBlocker.createEmptyResource():super.shouldInterceptRequest(view,url);}"
2304	"public HashMap<String,Boolean> getConstrain(){HashMap<String,Boolean> constrain=new HashMap<String,Boolean>();constrain.put(""password"",this.password==null?false:true);constrain.put(""captcha"",this.captcha==null?false:true);constrain.put(""mail"",this.mail==null?false:true);constrain.put(""start_date"",this.start_date==null?false:true);constrain.put(""end_date"",this.end_date==null?false:true);constrain.put(""mulPwd"",this.mulPwd==null?false:true);return constrain;}"
2305	"@POST @Path(""/create"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public RESTResponse<PolicyEntity> saveAsPolicyProto(PolicyEntity policyEntity,boolean needPolicyCreated){return RESTResponse.async(() -> {  Preconditions.checkNotNull(policyEntity,""entity should not be null"");  Preconditions.checkNotNull(policyEntity,""policy definition should not be null"");  Preconditions.checkNotNull(policyEntity.getAlertPublishmentIds(),""alert publisher list should not be null"");  PolicyDefinition policyDefinition=policyEntity.getDefinition();  if (needPolicyCreated) {    OpResult result=metadataResource.addPolicy(policyDefinition);    if (result.code != 200) {      throw new IllegalArgumentException(result.message);    }    result=metadataResource.addPublishmentsToPolicy(policyDefinition.getName(),policyEntity.getAlertPublishmentIds());    if (result.code != 200) {      throw new IllegalArgumentException(result.message);    }  }  return importPolicyProto(policyEntity);}).get();}"
2306	"public boolean keyDown(int keyEvent){return keys.get(keyEvent)!=null&&keys.get(keyEvent)==true;}"
2307	"private ClusterState getControlNodesState(RepositoryInfo targetGiven,Map<Service,RepositoryInfo> infos,PropertyInfoRestRep targetPropertiesGiven,Map<Service,ConfigVersion> configVersions,PowerOffState targetPowerOffState){if(targetGiven==null||targetPropertiesGiven==null||targetPowerOffState==null){return ClusterInfo.ClusterState.INITIALIZING;}if(infos==null||infos.size()!=getNodeCount()||configVersions==null||configVersions.size()!=getNodeCount()){return ClusterInfo.ClusterState.DEGRADED;}List<String> differentCurrents=getDifferentCurrentsCommon(targetGiven,infos);List<String> differentVersions=getDifferentVersionsCommon(targetGiven,infos);List<String> differentConfigVersions=getDifferentConfigVersionCommon(targetPropertiesGiven,configVersions);if(targetPowerOffState.getPowerOffState()!=PowerOffState.State.NONE){log.info(""Control nodes' state POWERINGOFF"");return ClusterInfo.ClusterState.POWERINGOFF;}else {if(differentConfigVersions.size()!=0){log.info(""Control nodes' state UPDATING: {}"",Strings.repr(targetPropertiesGiven));return ClusterInfo.ClusterState.UPDATING;}else {if(differentCurrents.size()==0&&differentVersions.size()==0){if(isDbSchemaVersionChanged()){MigrationStatus status=getMigrationStatus();if(status==null){log.info(""Control nodes state is UPGRADING_PREP_DB "");return ClusterInfo.ClusterState.UPGRADING_PREP_DB;}log.info(""Control nodes state is {}"",status);switch (status){case RUNNING :return ClusterInfo.ClusterState.UPGRADING_CONVERT_DB;case FAILED :return ClusterInfo.ClusterState.UPGRADING_FAILED;case DONE :break;default :log.error(""The current db schema version doesn't match the target db schema version, ""+""but the current migration status is {} "",status);}}log.info(""Control nodes' state STABLE"");return ClusterInfo.ClusterState.STABLE;}else {if(differentCurrents.size()==0){log.info(""Control nodes' state SYNCING: {}"",Strings.repr(differentVersions));return ClusterInfo.ClusterState.SYNCING;}else {if(differentVersions.size()==0){log.info(""Control nodes' state UPGRADING: {}"",Strings.repr(differentCurrents));return ClusterInfo.ClusterState.UPGRADING;}else {log.error(""Control nodes' in an UNKNOWN state. Target given: {} {}"",targetGiven,Strings.repr(infos));return ClusterInfo.ClusterState.UNKNOWN;}}}}}}"
2308	"public int analyticSolve(){updateAllCellPossibilities();HashMap<Integer,Integer> queue=new HashMap<>();int n;boolean updated=true;while(updated&&mSolvedCells<GridSpecs.ROWS*GridSpecs.COLS){updated=false;if((n=tryValReduction(queue))>0){updated=true;mValReductions+=n;}if(!updated){while((n=tryPosReduction(queue))>0){updated=true;mPosReductions+=n;n=tryValReduction(queue);mValReductions+=n;}}for(int key : queue.keySet()){Cell thisCell=mCells[key];int val=queue.get(key);if(thisCell.getPossibilities().contains(val)){thisCell.setValue(val);removePossibility(thisCell,val);}else {return IMPOSSIBLE;}}if(queue.keySet().size()==1){mBottlenecks++;}mSolveScans++;queue=new HashMap<>();}if(mSolvedCells==GridSpecs.ROWS*GridSpecs.COLS){Log.i(""SUDOKU"",""Attempted solve resulted in SOLVED"");return SOLVED;}else {Log.i(""SUDOKU"",""Attempted solve resulted in UNSOLVED"");for(Cell c : mCells){if(c.notSet()&&c.getPossibilities().size()==0){return IMPOSSIBLE;}}return UNSOLVED;}}"
2309	"public int getAmmo(WeaponTypes weaponType){return (myWeapons!=null)?myWeapons[myWeapon.ordinal()-weaponArrAdjustment].ammo:0;}"
2310	"public static String getSelfLockNodeName(InterProcessLock lock) throws Exception{if(lock instanceof InterProcessMutex){Collection<String> nodes=((InterProcessMutex)lock).getParticipantNodes();if(nodes==null||nodes.size()==0){return null;}String nodeName=nodes.iterator().next();int lastSlash=nodeName.lastIndexOf('/');if(lastSlash!=-1){nodeName=nodeName.substring(lastSlash+1);}return nodeName;}return null;}"
2311	"public void endElement(String uri,String name,String qName){if(""author"".equals(name)){inAuthor=false;}deep--;if(isAtom&&deep>=(inAuthor?4:3)){String content=data.getString();Key[] keys=data.keys();StringBuilder sb=new StringBuilder();sb.append(""<"");sb.append(qName);if(!parents.peek().getUri().equals(uri)){sb.append("" xmlns=\"""");sb.append(uri);sb.append(""\"""");}for(int i=0;i<keys.length;i++){sb.append("" "");sb.append(keys[i].getString());sb.append(""=\"""");sb.append(Caster.toString(data.get(keys[i],""""),""""));sb.append(""\"""");}if(!StringUtil.isEmpty(content)){sb.append("">"");sb.append(content);sb.append(""</""+qName+"">"");}else {sb.append(""/>"");}data=parents.pop();data.append(sb.toString().trim());path=data.getPath();inside=data.getInside();return ;}setContent(data.getString().trim());data=(FeedStruct)parents.pop();path=data.getPath();inside=data.getInside();}"
2312	"public void actionPerformed(ActionEvent e){for(int tb=1;tb<=10;tb++){if(e.getSource()==tableButton[tb]){TitledBorder topBorder=BorderFactory.createTitledBorder(""Actief"");topBorder.setBorder(BorderFactory.createLineBorder(Color.black));topBorder.setTitlePosition(TitledBorder.TOP);tableButton[tb].setBorder(topBorder);Table table=barmanager.getHashTable(tb);if(!table.equals(null)){if(table.getTableStatus().equals(""Bezet"")||table.getTableStatus().equals(""Hulp"")){panelCenter.removeAll();panelCenter.add(orderSection.getTableLeft(table,panelCenter));activeTable=tb;panelCenter.revalidate();}else {if(table.getTableStatus().equals(""Afrekenen"")){System.out.println(""Status afrekenen"");panelCenter.removeAll();Payment p=paymentManager.getActivePayment(tb);activeTable=tb;panelCenter.add(paymentSection.getPaymentPanel(p));revalidate();}else {panelCenter.removeAll();}}}}else {TitledBorder topBorderInactive=BorderFactory.createTitledBorder("""");topBorderInactive.setBorder(BorderFactory.createLineBorder(Color.decode(""#DFDFDF"")));topBorderInactive.setTitlePosition(TitledBorder.TOP);tableButton[tb].setBorder(topBorderInactive);tableButton[tb].setBorder(BorderFactory.createEtchedBorder());revalidate();}}revalidate();}"
2313	"@Override public void execute() throws ActivityException{String requestData=getRequestData();Response responseData=null;Object connection=null;StubHelper stubber=new StubHelper();isStubbing=stubber.isStubbing()||isStubMode();boolean logging=doLogging();try{init();if(!StringHelper.isEmpty(requestData)&&doLogging()){logRequest(requestData);}if(isStubbing){loginfo(""Adapter is running in StubMode"");if(stubber.isStubbing()){AdapterStubRequest stubRequest=getStubRequest(requestData);responseData=stubber.getStubResponse(getMasterRequestId(),stubRequest.getJson().toString(2));if(((AdapterStubResponse)responseData).isPassthrough()){loginfo(""Stub server instructs to get real response"");isStubbing=false;connection=openConnection();responseData=doInvoke(connection,requestData,getTimeoutForResponse(),getRequestHeaders());}else {loginfo(""Response received from stub server"");}}else {responseData=getStubbedResponse(requestData);}}else {connection=this.openConnection();responseData=doInvoke(connection,requestData,getTimeoutForResponse(),getRequestHeaders());}if(responseData.getContent()!=null&&(logging||!isSynchronous())){logResponse(responseData);}onSuccess(responseData.getContent());if(hasPostScript()){executePostScript();}}catch(Throwable ex){handleException(ex);}finally{if(connection!=null){closeConnection(connection);}}}"
2314	"@Override public boolean done(){return isDone;}"
2315	"@Override protected Void doInBackground(Void... params){try{volumeMeter.start();}catch(Exception e){Log.e(""MicSamplerTask"",""Failed to start VolumeMeter"");e.printStackTrace();if(listener!=null){listener.onMicError();}return null;}while(true){if(listener!=null){Log.i(""MicSamplerTask"",""Requesting amplitude"");publishProgress(volumeMeter.getAmplitude());}try{Thread.sleep(1000);}catch(InterruptedException e){e.printStackTrace();}if(terminated){volumeMeter.stop();return null;}}}"
2316	"protected void removeElement(Element element){if(element!=null){ElementView elementView=new ElementView(element);elementViews.remove(elementView);}}"
2317	"public static String refreshAccessToken(Context context){OSAuthenticationActivity currentInstance=((OSAuthenticationActivity)((OneStreamApplication)context.getApplicationContext()).getCurrentActivity());if(currentInstance!=null){currentInstance.getLoginHandler().refreshSpotifyToken(getToken(context,Constants.SPOTIFY_REFRESH_TOKEN));}return """";}"
2318	"public void onActivityResult(int requestCode,int resultCode,Intent data){if(requestCode==BluetoothState.REQUEST_CONNECT_DEVICE){if(resultCode==Activity.RESULT_OK){bluetooth.connect(data);}}else {if(requestCode==BluetoothState.REQUEST_ENABLE_BT){if(resultCode==Activity.RESULT_OK){bluetooth.setupService();}else {Toast.makeText(getApplicationContext(),""Bluetooth was not enabled."",Toast.LENGTH_SHORT).show();finish();}}}}"
2319	"public void mousePressed(MouseEvent e){int mx=e.getX();int my=e.getY();if(gamepanel.gameState==STATE.Menu){if(mouseOver(mx,my,GamePanel.WIDTH/80,GamePanel.WIDTH/13,GamePanel.WIDTH/4,GamePanel.WIDTH/16)){GamePanel.player.setLives(3);gamepanel.setWaveNumber(0);GamePanel.enemies.clear();GamePanel.player.setRecovering(false);GamePanel.player.setx(GamePanel.WIDTH/2);GamePanel.player.sety(GamePanel.HEIGHT/2);GamePanel.player.setPower(0);GamePanel.player.setPowerLevel(0);GamePanel.player.setPowerLevelChecker(0);Player.currentWeapon=1;GamePanel.player.setScore(0);GamePanel.bullets.clear();GamePanel.powerups.clear();GamePanel.bombs.clear();GamePanel.explosions.clear();GamePanel.texts.clear();gamepanel.setslowDownTimer(0);gamepanel.gameState=STATE.Game;}if(mouseOver(mx,my,GamePanel.WIDTH/80,(int)(GamePanel.WIDTH/6.5),GamePanel.WIDTH/4,GamePanel.WIDTH/16)){gamepanel.gameState=STATE.CharSelect;}}else {if(gamepanel.gameState==STATE.Game){if(gamepanel.getDetonateButton()){if(mouseOver(mx,my,GamePanel.WIDTH-(GamePanel.WIDTH/13)-(GamePanel.WIDTH/13/6),GamePanel.HEIGHT-(GamePanel.WIDTH/13)-(GamePanel.WIDTH/13/6),GamePanel.WIDTH/13,GamePanel.WIDTH/13)){for(int i=0;i<GamePanel.bombs.size();i++){pressingDetonate=true;GamePanel.bombs.get(i).detonate();}Player.currentWeapon=1;GamePanel.alpha=255;pressingDetonate=false;}else {pressingDetonate=false;}}if(gamepanel.powerLevelUpgrade1!=0&&gamepanel.powerLevelUpgrade2!=0){double imageheightwidth=GamePanel.WIDTH/3.2;double space=GamePanel.WIDTH/80;int widthdiv3pt2=(int)((int)GamePanel.WIDTH/3.2);if(mouseOver(mx,my,(int)(GamePanel.WIDTH/2-imageheightwidth-space),(GamePanel.HEIGHT/2)-(widthdiv3pt2/2),widthdiv3pt2,widthdiv3pt2)){if(gamepanel.powerLevelUpgrade1==1){gamepanel.setBombAmount(gamepanel.getBombAmount()+10);gamepanel.setRocketAmount(gamepanel.getRocketAmount()+20);gamepanel.setBouncerAmount(gamepanel.getBouncerAmount()+50);gamepanel.setCanonAmount(gamepanel.getCanonAmount()+10);gamepanel.setLaserAmount(gamepanel.getLaserAmount()+10);}else {if(gamepanel.powerLevelUpgrade1==2){gamepanel.addLife();}else {if(gamepanel.powerLevelUpgrade1==3){gamepanel.setslowDownLength(25000);gamepanel.setslowDownTimer(System.nanoTime());for(int j=0;j<GamePanel.enemies.size();j++){GamePanel.enemies.get(j).setSlow(true);}}}}Menu.firstwindowselected=false;Menu.secondwindowselected=false;gamepanel.powerLevelUpgrade1=0;gamepanel.powerLevelUpgrade2=0;GamePanel.alpha=255;}else {if(mouseOver(mx,my,(GamePanel.WIDTH/2+(GamePanel.WIDTH/80)),(int)((int)(GamePanel.HEIGHT/2)-((GamePanel.WIDTH/3.2)/2)),(int)(GamePanel.WIDTH/3.2),(int)(GamePanel.WIDTH/3.2))){if(gamepanel.powerLevelUpgrade2==1){gamepanel.setBombAmount(gamepanel.getBombAmount()+10);gamepanel.setRocketAmount(gamepanel.getRocketAmount()+20);gamepanel.setBouncerAmount(gamepanel.getBouncerAmount()+50);gamepanel.setCanonAmount(gamepanel.getCanonAmount()+10);gamepanel.setLaserAmount(gamepanel.getLaserAmount()+10);}else {if(gamepanel.powerLevelUpgrade2==2){gamepanel.addLife();}else {if(gamepanel.powerLevelUpgrade2==3){gamepanel.setslowDownLength(25000);gamepanel.setslowDownTimer(System.nanoTime());for(int j=0;j<GamePanel.enemies.size();j++){GamePanel.enemies.get(j).setSlow(true);}}}}Menu.firstwindowselected=false;Menu.secondwindowselected=false;gamepanel.powerLevelUpgrade1=0;gamepanel.powerLevelUpgrade2=0;GamePanel.alpha=255;}}}}else {if(gamepanel.gameState==STATE.Dead){if(mouseOver(mx,my,GamePanel.WIDTH/2-GamePanel.WIDTH/12,(int)((GamePanel.HEIGHT/3)*1.45),GamePanel.WIDTH/6,GamePanel.HEIGHT/14)){gamepanel.gameState=STATE.Menu;}if(mouseOver(mx,my,GamePanel.WIDTH/2-GamePanel.WIDTH/12,(int)((GamePanel.HEIGHT/3)*1.5)+GamePanel.HEIGHT/12,GamePanel.WIDTH/6,GamePanel.HEIGHT/14)){gamepanel.gameState=STATE.CharSelect;}}else {if(gamepanel.gameState==STATE.CharSelect){int length=(int)(GamePanel.WIDTH/4);int tallness=(int)(GamePanel.HEIGHT/3.5);if(mouseOver(mx,my,(int)(GamePanel.WIDTH/5-(length/2)+length*0.75+length+(length/5)),GamePanel.HEIGHT/5-(tallness/2)+tallness/10,GamePanel.WIDTH/28,GamePanel.HEIGHT/7)){if(gamepanel.getMasterScore()>20){gamepanel.setBombAmount(gamepanel.getBombAmount()+2);gamepanel.setMasterScore(gamepanel.getMasterScore()-20);}else {colorRed=Color.red;}}if(mouseOver(mx,my,(int)(GamePanel.WIDTH/5-(length/2)+length*0.75+length+(length/5)+length+(length/5)),GamePanel.HEIGHT/5-(tallness/2)+tallness/10,GamePanel.WIDTH/28,GamePanel.HEIGHT/7)){if(gamepanel.getMasterScore()>30){gamepanel.setRocketAmount(gamepanel.getRocketAmount()+2);gamepanel.setMasterScore(gamepanel.getMasterScore()-30);}else {colorRed=Color.red;}}if(mouseOver(mx,my,(int)(GamePanel.WIDTH/5-(length/2)+length*0.75),(int)(GamePanel.HEIGHT/5+(tallness/1.5)+tallness/10),GamePanel.WIDTH/28,GamePanel.HEIGHT/7)){if(gamepanel.getMasterScore()>40){gamepanel.setLaserAmount(gamepanel.getLaserAmount()+2);gamepanel.setMasterScore(gamepanel.getMasterScore()-40);}else {colorRed=Color.red;}}if(mouseOver(mx,my,(int)(GamePanel.WIDTH/5-(length/2)+length*0.75)+length+(length/5),(int)(GamePanel.HEIGHT/5+(tallness/1.5)+tallness/10),GamePanel.WIDTH/28,GamePanel.HEIGHT/7)){if(gamepanel.getMasterScore()>50){gamepanel.setCanonAmount(gamepanel.getCanonAmount()+2);gamepanel.setMasterScore(gamepanel.getMasterScore()-50);}else {colorRed=Color.red;}}if(mouseOver(mx,my,(int)(GamePanel.WIDTH/5-(length/2)+length*0.75)+length+(length/5)+length+(length/5),(int)(GamePanel.HEIGHT/5+(tallness/1.5)+tallness/10),GamePanel.WIDTH/28,GamePanel.HEIGHT/7)){if(gamepanel.getMasterScore()>45){gamepanel.setBouncerAmount(gamepanel.getBouncerAmount()+5);gamepanel.setMasterScore(gamepanel.getMasterScore()-45);}else {colorRed=Color.red;}}if(mouseOver(mx,my,GamePanel.WIDTH-GamePanel.WIDTH/6,GamePanel.HEIGHT-GamePanel.HEIGHT/6,GamePanel.WIDTH/8,GamePanel.HEIGHT/12)){gamepanel.gameState=STATE.Menu;}}}}}}"
2320	"public Collection<ScreenData> getScreens(SecurityContext ctx,long ownerId,Collection<Long> ids) throws DSOutOfServiceException,DSAccessException{if(ids==null||ids.isEmpty()){return Collections.emptyList();}try{IContainerPrx service=gateway.getPojosService(ctx);List<Long> idsList=new ArrayList<Long>(ids.size());for(long id : ids){idsList.add(id);}ParametersI param=null;if(ownerId>=0){param=new ParametersI();param.exp(omero.rtypes.rlong(ownerId));}List<IObject> screens=service.loadContainerHierarchy(PojoMapper.getModelType(ScreenData.class).getName(),idsList,param);Collection<ScreenData> result=new ArrayList<ScreenData>(screens.size());for(IObject s : screens){result.add((ScreenData)PojoMapper.asDataObject(s));}return result;}catch(Throwable t){handleException(this,t,""Could not load screens"");}return Collections.emptyList();}"
2321	"PercolatorFieldMapper(String simpleName,MappedFieldType fieldType,MappedFieldType defaultFieldType,Settings indexSettings,MultiFields multiFields,CopyTo copyTo,Supplier<QueryShardContext> queryShardContext,KeywordFieldMapper queryTermsField,KeywordFieldMapper extractionResultField,BinaryFieldMapper queryBuilderField,RangeFieldMapper rangeFieldMapper,Map<String,Float> boostFields){super(simpleName,fieldType,defaultFieldType,indexSettings,multiFields,copyTo);this.queryShardContext=queryShardContext;this.queryTermsField=queryTermsField;this.extractionResultField=extractionResultField;this.queryBuilderField=queryBuilderField;this.mapUnmappedFieldAsString=INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING.get(indexSettings);this.rangeFieldMapper=rangeFieldMapper;this.boostFields=boostFields;}"
2322	"private void handlePacket() throws IOException{Byte packetId=in.readByte();int x;byte y;int z;byte dimension;Coordinate coordinate;switch (packetId){case 0x00 :write(packetId);break;case 0x01 :write(packetId);if(isServerTunnel){player.setEntityId(in.readInt());write(player.getEntityId());}else {write(in.readInt());}write(readUTF16());write(in.readLong());dimension=in.readByte();if(isServerTunnel){player.setDimension(Dimension.get(dimension));}write(dimension);break;case 0x02 :String name=readUTF16();if(isServerTunnel||player.setName(name)){tunneler.setName(streamType+""-""+player.getName());write(packetId);write(name);}break;case 0x03 :String message=readUTF16();Matcher joinMatcher=JOIN_PATTERN.matcher(message);if(isServerTunnel&&joinMatcher.find()){if(server.bots.ninja(joinMatcher.group(1))){break;}}if(isServerTunnel&&server.options.getBoolean(""useMsgFormats"")){Matcher colorMatcher=COLOR_PATTERN.matcher(message);String cleanMessage=colorMatcher.replaceAll("""");Matcher messageMatcher=MESSAGE_PATTERN.matcher(cleanMessage);if(messageMatcher.find()){Player friend=server.findPlayerExact(messageMatcher.group(1));if(friend!=null){String color=""f"";String title="""";String format=server.options.get(""msgFormat"");Group group=friend.getGroup();if(group!=null){color=group.getColor();if(group.showTitle()){title=group.getName();format=server.options.get(""msgTitleFormat"");}}try{message=String.format(format,friend.getName(),title,color)+messageMatcher.group(2);}catch(IllegalFormatException e){System.out.println(""[SimpleServer] There is an error in your msgFormat/msgTitleFormat settings!"");}}}else {if(cleanMessage.matches(CONSOLE_CHAT_PATTERN)&&!server.options.getBoolean(""chatConsoleToOps"")){break;}}if(server.options.getBoolean(""msgWrap"")){sendMessage(message);}else {if(message.length()>MAXIMUM_MESSAGE_SIZE){message=message.substring(0,MAXIMUM_MESSAGE_SIZE);}write(packetId);write(message);}}else {if(!isServerTunnel){if(player.isMuted()&&!message.startsWith(""/"")&&!message.startsWith(""!"")){player.addTMessage(Color.RED,""You are muted! You may not send messages to all players."");break;}if(player.parseCommand(message)){break;}if(player.localChat()&&!message.startsWith(""/"")&&!message.startsWith(""!"")){player.execute(LocalSayCommand.class,message);break;}if(message.length()>MAXIMUM_MESSAGE_SIZE){message=message.substring(0,MAXIMUM_MESSAGE_SIZE);}write(packetId);write(message);}}break;case 0x04 :write(packetId);long time=in.readLong();server.setTime(time);write(time);break;case 0x05 :write(packetId);write(in.readInt());write(in.readShort());write(in.readShort());write(in.readShort());break;case 0x06 :write(packetId);copyNBytes(12);break;case 0x07 :int user=in.readInt();int target=in.readInt();Player targetPlayer=server.playerList.findPlayer(target);if(targetPlayer!=null){if(targetPlayer.godModeEnabled()){in.readBoolean();break;}}write(packetId);write(user);write(target);write(in.readBoolean());break;case 0x08 :write(packetId);copyNBytes(2);break;case 0x09 :write(packetId);dimension=in.readByte();write(dimension);player.setDimension(Dimension.get(dimension));break;case 0x0a :write(packetId);copyNBytes(1);if(!inGame&&!isServerTunnel){player.sendMOTD();if(server.options.getBoolean(""showListOnConnect"")){player.execute(PlayerListCommand.class);}inGame=true;}break;case 0x0b :write(packetId);copyPlayerLocation();copyNBytes(1);break;case 0x0c :write(packetId);copyPlayerLook();copyNBytes(1);break;case 0x0d :write(packetId);copyPlayerLocation();copyPlayerLook();copyNBytes(1);break;case 0x0e :if(!isServerTunnel){byte status=in.readByte();x=in.readInt();y=in.readByte();z=in.readInt();byte face=in.readByte();coordinate=new Coordinate(x,y,z,player);boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,0);if(!perms[2]&&status==0){player.addTMessage(Color.RED,""You can not use this block here!"");break;}if(!perms[1]&&status==2){player.addTMessage(Color.RED,""You can not destroy this block!"");break;}boolean locked=server.data.chests.isLocked(coordinate);if(!locked||player.isAdmin()){if(locked&&status==BLOCK_DESTROYED_STATUS){server.data.chests.releaseLock(coordinate);server.data.save();}write(packetId);write(status);write(x);write(y);write(z);write(face);if(player.instantDestroyEnabled()){packetFinished();write(packetId);write(BLOCK_DESTROYED_STATUS);write(x);write(y);write(z);write(face);}if(status==BLOCK_DESTROYED_STATUS){player.destroyedBlock();}}}else {write(packetId);copyNBytes(11);}break;case 0x0f :x=in.readInt();y=in.readByte();z=in.readInt();coordinate=new Coordinate(x,y,z,player); final byte direction=in.readByte(); final short dropItem=in.readShort();byte itemCount=0;short uses=0;if(dropItem!=-1){itemCount=in.readByte();uses=in.readShort();}boolean writePacket=true;boolean drop=false;boolean[] perms=server.permissions.getPlayerBlockPermissions(player,coordinate,dropItem);if(isServerTunnel||server.data.chests.isChest(coordinate)){}else {if((dropItem!=-1&&!perms[0])||(dropItem==-1&&!perms[2])){if(dropItem==-1){player.addTMessage(Color.RED,""You can not use this block here!"");}else {player.addTMessage(Color.RED,""You can not place this block here!"");}writePacket=false;drop=true;}else {if(dropItem==54){int xPosition=x;byte yPosition=y;int zPosition=z;switch (direction){case 0 :--yPosition;break;case 1 :++yPosition;break;case 2 :--zPosition;break;case 3 :++zPosition;break;case 4 :--xPosition;break;case 5 :++xPosition;break;}Coordinate targetBlock=new Coordinate(xPosition,yPosition,zPosition,player);Chest adjacentChest=server.data.chests.adjacentChest(targetBlock);if(adjacentChest!=null&&!adjacentChest.isOpen()&&!adjacentChest.ownedBy(player)){player.addTMessage(Color.RED,""The adjacent chest is locked!"");writePacket=false;drop=true;}else {player.placingChest(targetBlock);}}}}if(writePacket){write(packetId);write(x);write(y);write(z);write(direction);write(dropItem);if(dropItem!=-1){write(itemCount);write(uses);if(dropItem<=94&&direction>=0){player.placedBlock();}}player.openingChest(coordinate);}else {if(drop){write((byte)0x0e);write((byte)0x04);write(x);write(y);write(z);write(direction);}}break;case 0x10 :write(packetId);copyNBytes(2);break;case 0x11 :write(packetId);copyNBytes(14);break;case 0x12 :write(packetId);copyNBytes(5);break;case 0x13 :write(packetId);write(in.readInt());write(in.readByte());break;case 0x14 :int eid=in.readInt();name=readUTF16();if(!server.bots.ninja(name)){write(packetId);write(eid);write(name);copyNBytes(16);}else {skipNBytes(16);}break;case 0x15 :write(packetId);copyNBytes(24);break;case 0x16 :write(packetId);copyNBytes(8);break;case 0x17 :write(packetId);write(in.readInt());write(in.readByte());write(in.readInt());write(in.readInt());write(in.readInt());int flag=in.readInt();write(flag);if(flag>0){write(in.readShort());write(in.readShort());write(in.readShort());}break;case 0x18 :write(packetId);write(in.readInt());write(in.readByte());write(in.readInt());write(in.readInt());write(in.readInt());write(in.readByte());write(in.readByte());copyUnknownBlob();break;case 0x19 :write(packetId);write(in.readInt());write(readUTF16());write(in.readInt());write(in.readInt());write(in.readInt());write(in.readInt());break;case 0x1b :write(packetId);copyNBytes(18);break;case 0x1c :write(packetId);copyNBytes(10);break;case 0x1d :write(packetId);copyNBytes(4);break;case 0x1e :write(packetId);copyNBytes(4);break;case 0x1f :write(packetId);copyNBytes(7);break;case 0x20 :write(packetId);copyNBytes(6);break;case 0x21 :write(packetId);copyNBytes(9);break;case 0x22 :write(packetId);copyNBytes(18);break;case 0x26 :write(packetId);copyNBytes(5);break;case 0x27 :write(packetId);copyNBytes(8);break;case 0x28 :write(packetId);write(in.readInt());copyUnknownBlob();break;case 0x32 :write(packetId);copyNBytes(9);break;case 0x33 :write(packetId);copyNBytes(13);int chunkSize=in.readInt();write(chunkSize);copyNBytes(chunkSize);break;case 0x34 :write(packetId);copyNBytes(8);short arraySize=in.readShort();write(arraySize);copyNBytes(arraySize*4);break;case 0x35 :write(packetId);x=in.readInt();y=in.readByte();z=in.readInt();byte blockType=in.readByte();byte metadata=in.readByte();coordinate=new Coordinate(x,y,z,player);if(blockType==54&&player.placedChest(coordinate)){lockChest(coordinate);player.placingChest(null);}write(x);write(y);write(z);write(blockType);write(metadata);break;case 0x36 :write(packetId);copyNBytes(12);break;case 0x3c :write(packetId);copyNBytes(28);int recordCount=in.readInt();write(recordCount);copyNBytes(recordCount*3);break;case 0x3d :write(packetId);write(in.readInt());write(in.readInt());write(in.readByte());write(in.readInt());write(in.readInt());break;case 0x46 :write(packetId);copyNBytes(1);break;case 0x47 :write(packetId);copyNBytes(17);break;case 0x64 :byte id=in.readByte();byte invtype=in.readByte();String typeString=in.readUTF();byte unknownByte=in.readByte();if(invtype==0){if(!server.permissions.canOpenChests(player,player.openedChest())){player.addTMessage(Color.RED,""You can't use chests here"");break;}else {if(server.data.chests.canOpen(player,player.openedChest())||player.isAdmin()){if(server.data.chests.isLocked(player.openedChest())){if(player.isAttemptingUnlock()){server.data.chests.unlock(player.openedChest());server.data.save();player.setAttemptedAction(null);player.addTMessage(Color.RED,""This chest is no longer locked!"");typeString=t(""Open Chest"");}else {typeString=server.data.chests.chestName(player.openedChest());}}else {typeString=t(""Open Chest"");if(player.isAttemptLock()){lockChest(player.openedChest());typeString=player.nextChestName();}}}else {player.addTMessage(Color.RED,""This chest is locked!"");break;}}}write(packetId);write(id);write(invtype);write8(typeString);write(unknownByte);break;case 0x65 :write(packetId);write(in.readByte());break;case 0x66 :byte typeFrom=in.readByte();short slotFrom=in.readShort();byte typeTo=in.readByte();short slotTo=in.readShort();write(packetId);write(typeFrom);write(slotFrom);write(typeTo);write(slotTo);write(in.readBoolean());short moveItem=in.readShort();write(moveItem);if(moveItem!=-1){write(in.readByte());write(in.readShort());}break;case 0x67 :byte type67=in.readByte();short slot=in.readShort();short setItem=in.readShort();write(packetId);write(type67);write(slot);write(setItem);if(setItem!=-1){write(in.readByte());write(in.readShort());}break;case 0x68 :byte type=in.readByte();write(packetId);write(type);short count=in.readShort();write(count);for(int c=0;c<count;++c){short item=in.readShort();write(item);if(item!=-1){write(in.readByte());write(in.readShort());}}break;case 0x69 :write(packetId);write(in.readByte());write(in.readShort());write(in.readShort());break;case 0x6a :write(packetId);write(in.readByte());write(in.readShort());write(in.readByte());break;case (byte)0x82 :write(packetId);write(in.readInt());write(in.readShort());write(in.readInt());write(readUTF16());write(readUTF16());write(readUTF16());write(readUTF16());break;case (byte)0x83 :write(packetId);write(in.readShort());write(in.readShort());byte length=in.readByte();write(length);copyNBytes(0xff&length);break;case (byte)0xc8 :write(packetId);copyNBytes(5);break;case (byte)0xe6 :write(packetId);write(in.readInt());write(in.readInt());copyNBytes(write(in.readInt())*4);copyNBytes(write(in.readInt())*4);int sizeString=write(in.readInt());for(int i=0;i<sizeString;i++){copyNBytes(write(in.readInt()));}break;case (byte)0xff :write(packetId);String reason=readUTF16();write(reason);if(reason.startsWith(""Took too long"")){server.addRobot(player);}player.close();break;default :if(EXPENSIVE_DEBUG_LOGGING){while(true){skipNBytes(1);flushAll();}}else {throw new IOException(""Unable to parse unknown ""+streamType+"" packet 0x""+Integer.toHexString(packetId)+"" for player ""+player.getName()+"" (after 0x""+Integer.toHexString(lastPacket));}}packetFinished();lastPacket=packetId;}"
2323	"public static String formatNumber(int num){DecimalFormat df=new DecimalFormat(""0"");double i=num;if(i>=1000000){if(i%1000000==0){return df.format(i/1000000)+""M"";}else {return (i/1000000)+""M"";}}if(i>=1000){return df.format((i/1000))+""k"";}return """"+num;}"
2324	"public LiteratureList createLiteratureList(LiteratureList list,ResultSet rs,Connection con) throws SQLException{CallableStatement stmt;if(rs==null){return null;}else {while(rs.next()){Literature lit=new Literature();lit.setId(rs.getInt(1));lit.setTitle(rs.getString(3));lit.setDatePublished(rs.getDate(4));lit.setPublisher(rs.getString(5));lit.setDds(Integer.toString(rs.getInt(6)));ResultSet rs2=null;stmt=con.prepareCall(""{CALL get_all_authors_by_reservable(?)}"");stmt.setInt(1,(int)lit.getId());rs2=stmt.getResultSet();if(rs2==null){lit.addAuthor(new Name(""N/A"",""N/A"",""N/A""));}else {while(!rs2.isAfterLast()){lit.addAuthor(new Name(rs2.getString(1),rs2.getString(3),rs2.getString(2)));}}list.add(lit);}}return list;}"
2325	"public void webServicePaybox(ActionRequest request,ActionResponse response) throws Exception{Context context=request.getContext();PaymentVoucherPayboxService paymentVoucherPayboxService=Beans.get(PaymentVoucherPayboxService.class);String idPaymentVoucher=(String)context.get(""idPV"");String operation=(String)context.get(""retour"");String signature=(String)context.get(""sign"");if(idPaymentVoucher!=null&&operation!=null&&signature!=null){LOG.debug(""idPaymentVoucher :""+idPaymentVoucher);PaymentVoucher paymentVoucher=paymentVoucherPayboxService.find(Long.parseLong(idPaymentVoucher));LOG.debug(""paymentVoucher :""+paymentVoucher);boolean verified=false;if(paymentVoucher!=null&&paymentVoucher.getCompany()!=null&&!paymentVoucher.getPayboxPaidOk()){List<String> varList=new ArrayList<String>();String retourVars=paymentVoucher.getCompany().getAccountConfig().getPayboxConfig().getPayboxRetour();String[] retours=retourVars.split("";"");varList.add(""idPV=""+idPaymentVoucher);LOG.debug(""idPV=""+idPaymentVoucher);varList.add(""retour=""+operation);LOG.debug(""retour=""+operation);for(int i=0;i<retours.length-1;i++){String variableName=retours[i].split("":"")[0];String varValue=(String)context.get(variableName);String varBuilt=variableName+""=""+varValue;LOG.debug(varBuilt);if(varValue!=null){varList.add(varBuilt);}}verified=Beans.get(PayboxService.class).checkPaybox(signature,varList,paymentVoucher.getCompany());LOG.debug(""L'adresse URL est-elle correcte ? : {}"",verified);}if(verified){if(operation==""1""&&(String)context.get(""idtrans"")!=null&&(String)context.get(""montant"")!=null){paymentVoucherPayboxService.authorizeConfirmPaymentVoucher(paymentVoucher,(String)context.get(""idtrans""),(String)context.get(""montant""));response.setFlash(I18n.get(IExceptionMessage.PAYBOX_6));LOG.debug(""Paiement r?alis?"");}else {if(operation==""2""){response.setFlash(I18n.get(IExceptionMessage.PAYBOX_7));LOG.debug(""Paiement ?chou?"");}else {if(operation==""3""){response.setFlash(I18n.get(IExceptionMessage.PAYBOX_8));LOG.debug(""Paiement annul?"");}}}}else {response.setFlash(I18n.get(IExceptionMessage.PAYBOX_9));LOG.debug(""Retour d'information de Paybox erron?"");}}}"
2326	"public void validate(){if(Strings.isEmpty(pattern)){throw Exceptions.error(""path pattern must not be empty, pattern={}"",pattern);}if(pattern.charAt(0)!='/'){throw Exceptions.error(""path pattern must start with '/', pattern={}"",pattern);}Set<String> variables=Sets.newHashSet();String[] tokens=Strings.split(pattern,'/');for(String token : tokens){if(token.charAt(0)==':'){validateVariable(token,pattern,variables);}else {validatePathSegment(token,pattern);}}}"
2327	"@Override public void keyPressed(KeyEvent e){if(e.getKeyCode()==KeyEvent.VK_ESCAPE){resetGame();}else {if(!model.canMove()){view.isGameLost=true;}else {if(!view.isGameLost&&!view.isGameWon){switch (e.getKeyCode()){case KeyEvent.VK_LEFT :model.left();break;case KeyEvent.VK_RIGHT :model.right();break;case KeyEvent.VK_UP :model.up();break;case KeyEvent.VK_DOWN :model.down();break;case KeyEvent.VK_Z :model.rollback();break;case KeyEvent.VK_R :model.randomMove();break;case KeyEvent.VK_A :model.autoMove();break;}if(model.maxTile==WINNING_TILE){view.isGameWon=true;}}}}view.repaint();}"
2328	"public static void main(String args) throws FileNotFoundException{Territory game=new Territory();Player1 player1=new Player1();Player2 player2=new Player2();startGame();renderMap();System.out.println(""Each player must initially alternately place ""+player1InitialTroop+"" troops each\n"");int rounds=0;playerTurn=""player1"";boolean autoPlace=false;while(playerOrder.get(rounds%playerOrder.size())!=""""){endGame();playerTurn=playerOrder.get(rounds%playerOrder.size());String playColor=playerColor(playerTurn);System.out.println(""Order of Play: ""+playerOrder.toString().substring(1,playerOrder.toString().length()-1));System.out.println(""\nIt is ""+playColor+""'s turn"");System.out.println(playerTurn+"" has ""+findTroopNum(playerTurn)+"" troops left to place\n"");System.out.println(""Type the territory to place troops (To automatically place remaining troops, type 'autoPlace'): "");String initTerritory=cs1.Keyboard.readString();if(initTerritory.equals(""autoPlace"")){autoPlace=true;}while(territoryGraph.validTerritory(initTerritory)==false&&autoPlace==false){System.out.println(""The territory that you entered is incorrect and does not exist. Please try again."");initTerritory=cs1.Keyboard.readString();if(initTerritory.equals(""autoPlace"")){System.out.println(""hello"");autoPlace=true;}}while((territoryGraph.validTerritory(initTerritory)==false||(!(game.territory[game.findLocation(initTerritory)][2].equals(""no""))&&!(game.territory[game.findLocation(initTerritory)][2].equals(playerTurn))))&&autoPlace==false){System.out.println(""You had entered an invalid territory or that territory has already been taken. Please try again."");initTerritory=cs1.Keyboard.readString();if(initTerritory.equals(""autoPlace"")){autoPlace=true;}}if(autoPlace==false){endGame();if(game.territory[game.findLocation(initTerritory)][2]==""no""||game.territory[game.findLocation(initTerritory)][2]==playerTurn){int locat=game.findLocation(initTerritory);game.territory[locat][1]=Integer.toString(Integer.parseInt(game.territory[locat][1])+1);game.territory[locat][2]=playerTurn;System.out.println(game.territory[locat][1]);System.out.println(""You have placed one troop on territory: ""+initTerritory);System.out.println(game.territory[locat][1]);}terriInfo=game.getTerritoryInfo();troopPresent=game.troopPresent();occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");renderMap();rounds+=1;subtractTroops(playerTurn);if(initPlaceArmNum()==(playerOrder.size())){break;}endGame();}if(autoPlace==true){break;}}if(autoPlace==true){endGame();while(!(initPlaceArmNum()==(playerOrder.size()))){endGame();playerTurn=playerOrder.get(rounds%playerOrder.size());int availNumber=(int)(Math.random()*Territory.availTerr(playerTurn).size());int availToTerrNum=Territory.findLocation(Territory.availTerr(playerTurn).get(availNumber));int initialTroopNum=Integer.parseInt(game.territory[availToTerrNum][1]);game.territory[availToTerrNum][2]=playerTurn;game.territory[availToTerrNum][1]=Integer.toString(initialTroopNum+1);terriInfo=game.getTerritoryInfo();troopPresent=game.troopPresent();occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");subtractTroops(playerTurn);rounds+=1;endGame();}endGame();autoPlace=false;renderMap();}while((int)(victoryMargin*42)>game.territoryNumber(playerOrder.get(rounds%playerOrder.size()))){endGame();playerTurn=playerOrder.get(rounds%playerOrder.size());String playColor=playerColor(playerTurn);int additionalTroops=Territory.calcAddTroops(playerTurn);while(additionalTroops>0){System.out.println(playColor+"" may place ""+additionalTroops+"" more additional troops."");System.out.println(""Type the territory to place troops  (To automatically place remaining troops, type 'autoPlace'):"");String placeTerritory=cs1.Keyboard.readString();if(placeTerritory.equals(""autoPlace"")){autoPlace=true;}while(territoryGraph.validTerritory(placeTerritory)==false&&autoPlace==false){System.out.println(""The territory that you entered is incorrect and does not exist. Please try again."");placeTerritory=cs1.Keyboard.readString();if(placeTerritory.equals(""autoPlace"")){autoPlace=true;}}while((territoryGraph.validTerritory(placeTerritory)==false||(!(game.territory[game.findLocation(placeTerritory)][2].equals(""no""))&&!(game.territory[game.findLocation(placeTerritory)][2].equals(playerTurn))))&&autoPlace==false){System.out.println(""You had entered an invalid territory or that territory has already been taken. Please try again."");placeTerritory=cs1.Keyboard.readString();if(placeTerritory.equals(""autoPlace"")){autoPlace=true;}}if(autoPlace==false){endGame();if(game.territory[game.findLocation(placeTerritory)][2].equals(""no"")){endGame();game.territory[game.findLocation(placeTerritory)][2]=playerTurn;System.out.println(game.territory[game.findLocation(placeTerritory)][2]);int initTroopNum=Integer.parseInt(game.territory[game.findLocation(placeTerritory)][1]);game.territory[game.findLocation(placeTerritory)][1]=Integer.toString(initTroopNum+1);additionalTroops-=1;endGame();}else {endGame();int initTroopNum=Integer.parseInt(game.territory[game.findLocation(placeTerritory)][1]);game.territory[game.findLocation(placeTerritory)][1]=Integer.toString(initTroopNum+1);additionalTroops-=1;endGame();}}terriInfo=game.getTerritoryInfo();troopPresent=game.troopPresent();occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");renderMap();endGame();if(autoPlace==true){while(additionalTroops>0){endGame();playerTurn=playerOrder.get(rounds%playerOrder.size());int availNumber=(int)(Math.random()*Territory.availTerr(playerTurn).size());int availToTerrNum=Territory.findLocation(Territory.availTerr(playerTurn).get(availNumber));int initialTroopNum=Integer.parseInt(game.territory[availToTerrNum][1]);game.territory[availToTerrNum][2]=playerTurn;game.territory[availToTerrNum][1]=Integer.toString(initialTroopNum+1);terriInfo=game.getTerritoryInfo();troopPresent=game.troopPresent();if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");additionalTroops-=1;endGame();}endGame();autoPlace=false;renderMap();}}endGame();boolean button=true;while(button==true){System.out.println(""\nIt is ""+playColor+""'s turn"");System.out.println(""\nType the territory to send troops from"");String location=cs1.Keyboard.readString();while(game.findLocation(location)==-1||!game.territory[game.findLocation(location)][2].equals(playerTurn)||game.territory[game.findLocation(location)][1].equals(""1"")){if(Territory.findLocation(location)==-1){System.out.println(""\nSorry, this location is invalid, please try again"");location=cs1.Keyboard.readString();}if(!game.territory[game.findLocation(location)][2].equals(playerTurn)){System.out.println(""\nSorry, this is not your territory, please try again"");location=cs1.Keyboard.readString();}if(game.territory[game.findLocation(location)][1].equals(""1"")){System.out.println(""\nSorry, you need at least 2 troops on this territory, please try again"");location=cs1.Keyboard.readString();}}System.out.println(""\nType the territory that you want to attack"");String target=cs1.Keyboard.readString();territoryGraph.setUp();while(Territory.findLocation(target)==-1||game.territory[game.findLocation(target)][2].equals(playerTurn)||territoryGraph.isConnect(location,target)==false){if(Territory.findLocation(target)==-1){System.out.println(""\nSorry, this location is invalid, please try again"");target=cs1.Keyboard.readString();}if(game.territory[game.findLocation(target)][2].equals(playerTurn)){System.out.println(""\nSorry, this is your territory, please try again"");target=cs1.Keyboard.readString();}if(territoryGraph.isConnect(location,target)==false){System.out.println(""Sorry, these two territories is not connected, please try again"");target=cs1.Keyboard.readString();}}System.out.println(""\nType the number of troops to use, you can use a maximum of 3"");int attTroops=cs1.Keyboard.readInt();while(attTroops>3||attTroops<1||Integer.parseInt(game.territory[game.findLocation(location)][1])-attTroops==0||Integer.parseInt(game.territory[game.findLocation(location)][1])-attTroops<0){if(attTroops>3){System.out.println(""Sorry, you can only have a maximum number of 3, please try again"");attTroops=cs1.Keyboard.readInt();}if(attTroops<1){System.out.println(""Sorry, you need at least a minimum number of 1, please try again"");attTroops=cs1.Keyboard.readInt();}if(Integer.parseInt(game.territory[game.findLocation(location)][1])-attTroops==0){System.out.println(""Sorry, you need at least 1 troops to protect you current territory, please try again"");attTroops=cs1.Keyboard.readInt();}if(Integer.parseInt(game.territory[game.findLocation(location)][1])-attTroops<0){System.out.println(""Sorry, you don't have enough troops in this territory, please try again"");attTroops=cs1.Keyboard.readInt();}}int numWin=0;String defense=Territory.findOwner(target);if(playerTurn.equals(""player1"")){numWin=attack(attTroops,target,location,playerTurn,defense);}if(playerTurn.equals(""player2"")){numWin=attack(attTroops,target,location,playerTurn,defense);}if(playerTurn.equals(""player3"")){numWin=attack(attTroops,target,location,playerTurn,defense);}if(playerTurn.equals(""player4"")){numWin=attack(attTroops,target,location,playerTurn,defense);}if(playerTurn.equals(""player5"")){numWin=attack(attTroops,target,location,playerTurn,defense);}if(playerTurn.equals(""player6"")){numWin=attack(attTroops,target,location,playerTurn,defense);}boolean conquer;conquer=Territory.updateStat(target,playerTurn,numWin);if(conquer){game.territory[game.findLocation(target)][2]=playerTurn;game.territory[game.findLocation(location)][1]=Integer.parseInt(game.territory[game.findLocation(location)][1])-attTroops+"""";}terriInfo=game.getTerritoryInfo();troopPresent=game.troopPresent();occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");System.out.println(player1Occupied);System.out.println(player2Occupied);renderMap();System.out.println(""Do you want to continue on attacking? Type 'yes' to continue attack"");String sta=cs1.Keyboard.readString();if(!sta.equals(""yes"")){button=false;}}String territorySelect;String troopSelect;String placeTerritory;String End="""";int moveNum=0;while(End.equals(""exit"")==false){System.out.println(playColor+"" may move troops"");System.out.println(""Please select a territory to move troops"");territorySelect=cs1.Keyboard.readString();while(territoryGraph.validTerritory(territorySelect)==false||game.occupier(territorySelect).equals(playerTurn)==false||Integer.parseInt(game.territory[game.findLocation(territorySelect)][1])<=1){while(territoryGraph.validTerritory(territorySelect)==false){System.out.println(""You had entered an invalid territory. Please try again"");territorySelect=cs1.Keyboard.readString();}while(territoryGraph.validTerritory(territorySelect)==false||game.occupier(territorySelect).equals(playerTurn)==false){if(territoryGraph.validTerritory(territorySelect)==false){break;}System.out.println(""You had selected a territory that you do not occupy. Please try again"");territorySelect=cs1.Keyboard.readString();}while(territoryGraph.validTerritory(territorySelect)==false||game.occupier(territorySelect).equals(playerTurn)==false||Integer.parseInt(game.territory[game.findLocation(territorySelect)][1])<=1){if(territoryGraph.validTerritory(territorySelect)==false){break;}if(game.occupier(territorySelect).equals(playerTurn)==false){break;}System.out.println(""You cannot move if there is only one troop on a territory. Please try again."");territorySelect=cs1.Keyboard.readString();}}System.out.println(""Please select how much troops ""+playColor+"" would like to move"");troopSelect=cs1.Keyboard.readString();while(Helper.checkString(troopSelect)==false||(Integer.parseInt(troopSelect)>(Integer.parseInt(game.territory[game.findLocation(territorySelect)][1])-1))){while(Helper.checkString(troopSelect)==false){System.out.println(""You entered an invalid quantity. Please try again."");troopSelect=cs1.Keyboard.readString();}while(Helper.checkString(troopSelect)==false||(Integer.parseInt(troopSelect)>(Integer.parseInt(game.territory[game.findLocation(territorySelect)][1])-1))){if(Helper.checkString(troopSelect)==false){break;}System.out.println(""You must leave at least one troop on the territory when you move"");troopSelect=cs1.Keyboard.readString();}}int newtroopSelect=Integer.parseInt(troopSelect);System.out.println(""Please select the territory ""+playColor+"" would like to move to."");placeTerritory=cs1.Keyboard.readString();while(territoryGraph.validTerritory(placeTerritory)==false||game.occupier(placeTerritory).equals(playerTurn)==false){while(territoryGraph.validTerritory(placeTerritory)==false){System.out.println(""You had entered an invalid territory. Please try again"");placeTerritory=cs1.Keyboard.readString();}while(territoryGraph.validTerritory(placeTerritory)==false||game.occupier(placeTerritory).equals(playerTurn)==false){if(territoryGraph.validTerritory(placeTerritory)==false){break;}System.out.println(""You had selected a territory that you do not occupy. Please try again"");placeTerritory=cs1.Keyboard.readString();}}int initialTroop=Integer.parseInt(game.territory[game.findLocation(territorySelect)][1]);game.territory[game.findLocation(territorySelect)][1]=Integer.toString(initialTroop-Integer.parseInt(troopSelect));int finalTroop=Integer.parseInt(game.territory[game.findLocation(placeTerritory)][1]);game.territory[game.findLocation(placeTerritory)][1]=Integer.toString(finalTroop+Integer.parseInt(troopSelect));if(playerTurn.equals(""player1"")){player1Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player2"")){player2Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player3"")){player3Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player4"")){player4Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player5"")){player5Occupied=game.terriOccupier(playerTurn);}if(playerTurn.equals(""player6"")){player6Occupied=game.terriOccupier(playerTurn);}occupiedNorthAmerica=game.occupyContinent(""NorthAmerica"");occupiedSouthAmerica=game.occupyContinent(""SouthAmerica"");occupiedAfrica=game.occupyContinent(""Africa"");occupiedAsia=game.occupyContinent(""Asia"");occupiedEurope=game.occupyContinent(""Europe"");occupiedAustralia=game.occupyContinent(""Australia"");player1TroopNum=game.troopNumber(""player1"");player2TroopNum=game.troopNumber(""player2"");player3TroopNum=game.troopNumber(""player3"");player4TroopNum=game.troopNumber(""player4"");player5TroopNum=game.troopNumber(""player5"");player6TroopNum=game.troopNumber(""player6"");player1TerritoryNum=game.territoryNumber(""player1"");player2TerritoryNum=game.territoryNumber(""player2"");player3TerritoryNum=game.territoryNumber(""player3"");player4TerritoryNum=game.territoryNumber(""player4"");player5TerritoryNum=game.territoryNumber(""player5"");player6TerritoryNum=game.territoryNumber(""player6"");renderMap();System.out.println(""Would you like to continue the game? Enter 'exit' to end turn. Enter anything else to continue moving."");End=cs1.Keyboard.readString();}endGame();rounds+=1;}}"
2329	"@Override public String toString(){return ""Day{""+""name='""+name+'\''+"", hourOpen='""+hourOpen+'\''+"", hourClosed='""+hourClosed+'\''+"", isOpen=""+isOpen+'}';}"
2330	"@Override public void onOffsetChanged(AppBarLayout appBarLayout,int verticalOffset){if(toolbarLayout.getHeight()+verticalOffset<2*ViewCompat.getMinimumHeight(toolbarLayout)){}}"
2331	"private boolean isPositionOK(List<MediaSessionCompat.QueueItem> queue,int targetPosition,String targetID){String mediaID;if(queue==null||targetPosition<0||targetPosition>queue.size()||targetID==null||targetID.equals(Const.UNKNOWN)){return false;}mediaID=queue.get(targetPosition).getDescription().getMediaId();if(mediaID==null){return false;}return mediaID.equals(targetID);}"
2332	"public boolean isBooleanType(){return getJavaType()==boolean.class||getJavaType()==Boolean.class;}"
2333	"public void run(){while(true){try{Service service=serviceBlockingQueue.take();if(System.currentTimeMillis()-programStartTime>Tools.DEFAULTWORKINGTIME*Tools.TIMESCALE&&System.currentTimeMillis()-programStartTime<(Tools.DEFAULTWORKINGTIME+3*Tools.DEFAULTAVERAGESERVICETIME)*Tools.TIMESCALE){this.servicesNumberInTidalMigrationPeriod+=1;}Iterator areaMapIterator=this.areaHashMap.entrySet().iterator();while(areaMapIterator.hasNext()){Map.Entry entry=(Map.Entry)areaMapIterator.next();Area areaToInit=(Area)entry.getValue();areaToInit.initialLoad();}Iterator<SimpleEdge> edgeIterator=this.graph.edgeSet().iterator();while(edgeIterator.hasNext()){SimpleEdge currentEdge=edgeIterator.next();if(currentEdge.srcVertex.areaId==currentEdge.desVertex.areaId){Area currentArea=this.areaHashMap.get(currentEdge.srcVertex.areaId);currentArea.load+=currentEdge.numberOfOccupatedWavelength;}else {Area srcArea=this.areaHashMap.get(currentEdge.srcVertex.areaId);Area desArea=this.areaHashMap.get(currentEdge.desVertex.areaId);srcArea.load+=currentEdge.numberOfOccupatedWavelength;desArea.load+=currentEdge.numberOfOccupatedWavelength;}}areaMapIterator=this.areaHashMap.entrySet().iterator();FileWriter areaOneLoadFileWriter,areaTwoLoadFileWriter,areaThreeLoadFileWriter,totalLoadFileWriter,hopFileWriter;if(Integer.valueOf(service.serviceId)==0){areaOneLoadFileWriter=new FileWriter(""target/generated-sources/area1.txt"",false);areaTwoLoadFileWriter=new FileWriter(""target/generated-sources/area2.txt"",false);areaThreeLoadFileWriter=new FileWriter(""target/generated-sources/area3.txt"",false);totalLoadFileWriter=new FileWriter(""target/generated-sources/total.txt"",false);hopFileWriter=new FileWriter(""target/generated-sources/hop.txt"",false);}else {areaOneLoadFileWriter=new FileWriter(""target/generated-sources/area1.txt"",true);areaTwoLoadFileWriter=new FileWriter(""target/generated-sources/area2.txt"",true);areaThreeLoadFileWriter=new FileWriter(""target/generated-sources/area3.txt"",true);totalLoadFileWriter=new FileWriter(""target/generated-sources/total.txt"",true);hopFileWriter=new FileWriter(""target/generated-sources/hop.txt"",true);}while(areaMapIterator.hasNext()){Map.Entry entry=(Map.Entry)areaMapIterator.next();Area currentArea=(Area)entry.getValue();switch (Integer.valueOf(currentArea.areaId)){case 1 :areaOneLoadFileWriter.write(currentArea.load+""\n"");areaOneLoadFileWriter.close();break;case 2 :areaTwoLoadFileWriter.write(currentArea.load+""\n"");areaTwoLoadFileWriter.close();break;case 3 :areaThreeLoadFileWriter.write(currentArea.load+""\n"");areaThreeLoadFileWriter.close();}if(currentArea.load/currentArea.totalCapacity>=currentArea.threshold){System.out.println(""[area ""+currentArea.areaId+""] ???????,load:""+currentArea.load+""/""+currentArea.totalCapacity);}else {System.out.println(""[area ""+currentArea.areaId+""] ???????,load:""+currentArea.load+""/""+currentArea.totalCapacity);}}long nowTime=System.currentTimeMillis();if(nowTime-this.programStartTime>Tools.DEFAULTWORKINGTIME*Tools.TIMESCALE&&nowTime-this.programStartTime<(Tools.DEFAULTWORKINGTIME+3*Tools.DEFAULTAVERAGESERVICETIME)*Tools.TIMESCALE){double totalload=0;areaMapIterator=this.areaHashMap.entrySet().iterator();while(areaMapIterator.hasNext()){Map.Entry entry=(Map.Entry)areaMapIterator.next();Area currentArea=(Area)entry.getValue();totalload+=currentArea.load;}totalLoadFileWriter.write(totalload+""\n"");totalLoadFileWriter.close();}long alreadyRunTime=System.currentTimeMillis()-this.programStartTime;if(alreadyRunTime>Tools.DEFAULTWORKINGTIME*Tools.TIMESCALE&&alreadyRunTime<(Tools.DEFAULTWORKINGTIME+3*Tools.DEFAULTAVERAGESERVICETIME)*Tools.TIMESCALE){if(service.serviceTime<2.8*Tools.DEFAULTAVERAGESERVICETIME){reAllocateWeight();normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);}else {longTimeServiceInTidalMigrationPeriod+=1;if(service.srcNode.areaId==service.desNode.areaId){Area tempArea=this.areaHashMap.get(service.srcNode.areaId);if(tempArea.load/tempArea.totalCapacity<tempArea.threshold){allocatedWeightBack();normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);}else {if(service.srcNode.areaId==""1""){allocatedWeightBack();normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);if(service.isResourceAllocated()!=true){reAllocateWeight();normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);}}else {reAllocateWeight();normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);}}}else {edgeIterator=this.graph.edgeSet().iterator();while(edgeIterator.hasNext()){SimpleEdge currentedge=edgeIterator.next();if(this.graph.containsEdge(currentedge)){if(currentedge.srcVertex.areaId==""1""&&currentedge.desVertex.areaId==""1""){this.graph.setEdgeWeight(currentedge,currentedge.numberOfOccupatedWavelength*(1-Tools.LOADCHANGEPERCENT));}else {if(currentedge.srcVertex.areaId==""3""&&currentedge.desVertex.areaId==""3""){this.graph.setEdgeWeight(currentedge,currentedge.numberOfOccupatedWavelength*(1+Tools.LOADCHANGEPERCENT));}else {this.graph.setEdgeWeight(currentedge,currentedge.numberOfOccupatedWavelength);}}}}normalPeriodComputingPath(service,hopFileWriter);allocateResource(service);}}}else {reAllocateWeight();normalPeriodComputingPath(service);allocateResource(service);}if(service.isResourceAllocated()==true){Timer leavingTimer=new Timer();ServiceLeavingTask serviceLeavingTask=new ServiceLeavingTask(service);leavingTimer.schedule(serviceLeavingTask,service.serviceTime*Tools.TIMESCALE);}int num=Integer.valueOf(service.serviceId);if(num==Tools.DEFAULTSERVICENUMBER-1){FileWriter fw=new FileWriter(""target/generated-sources/blockedTimes.txt"");fw.write(Integer.toString(this.blockedTimes));System.out.println(""?????????:""+this.blockedTimes);System.out.println(""????????????""+this.longTimeServiceInTidalMigrationPeriod);System.out.println(""??????????????""+this.blockedTimesInTidalMigrationPeriod);System.out.println(""???????????""+this.servicesNumberInTidalMigrationPeriod);System.out.println(""????"");fw.close();}}catch(Exception e){e.printStackTrace();}}}"
2334	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){if(!isSavedChapter){setBook(bookList.get(position),1);invalidateOptionsMenu();}else {isSavedChapter=false;}}"
2335	"synchronized void handleTouchEventMove(float absoluteX,float absoluteY,float relativeX,float relativeY){if(draggingNode||draggingWay||draggingHandle){int lat;int lon;if((draggingNode&&selectedNodes!=null&&selectedNodes.size()==1&&selectedWays==null)||draggingHandle){if(draggingHandle){try{if(handleNode==null&&selectedHandle!=null){Log.d(""Logic"",""creating node at handle position"");handleNode=performAddOnWay(selectedHandle.x,selectedHandle.y);selectedHandle=null;}if(handleNode!=null){setSelectedNode(null);getDelegator().updateLatLon(handleNode,yToLatE7(absoluteY),xToLonE7(absoluteX));}}catch(OsmIllegalOperationException e){Toast.makeText(App.mainActivity,e.getMessage(),Toast.LENGTH_LONG).show();return ;}}else {displayAttachedObjectWarning(selectedNodes.get(0));if(prefs.largeDragArea()){startY=startY+relativeY;startX=startX-relativeX;lat=yToLatE7(startY);lon=xToLonE7(startX);}else {lat=yToLatE7(absoluteY);lon=xToLonE7(absoluteX);}getDelegator().updateLatLon(selectedNodes.get(0),lat,lon);}App.mainActivity.easyEditManager.invalidate();}else {lat=yToLatE7(absoluteY);lon=xToLonE7(absoluteX);ArrayList<Node> nodes=new ArrayList<Node>();if(selectedWays!=null&&selectedWays.size()>0){for(Way w : selectedWays){nodes.addAll(w.getNodes());}}if(selectedNodes!=null&&selectedNodes.size()>0){for(Node n : selectedNodes){nodes.add(n);}}displayAttachedObjectWarning(nodes);getDelegator().moveNodes(nodes,lat-startLat,lon-startLon);startLat=lat;startLon=lon;}translateOnBorderTouch(absoluteX,absoluteY);App.mainActivity.easyEditManager.invalidate();}else {if(rotatingWay){double aSq=(startY-absoluteY)*(startY-absoluteY)+(startX-absoluteX)*(startX-absoluteX);double bSq=(absoluteY-centroidY)*(absoluteY-centroidY)+(absoluteX-centroidX)*(absoluteX-centroidX);double cSq=(startY-centroidY)*(startY-centroidY)+(startX-centroidX)*(startX-centroidX);double cosAngle=(bSq+cSq-aSq)/(2*Math.sqrt(bSq)*Math.sqrt(cSq));int direction=1;if((startY<=centroidY)&&(absoluteY<=centroidY)){direction=(startX>absoluteX)?-1:1;}else {if((startX>=centroidX)&&(absoluteX>=centroidX)){direction=(startY>absoluteY)?-1:1;}else {if((startY>=centroidY)&&(absoluteY>=centroidY)){direction=(startX<absoluteX)?-1:1;}else {if((startX<centroidX)&&(absoluteX<centroidX)){direction=(startY<absoluteY)?-1:1;}else {if((startY<startX)&&(absoluteY<absoluteX)){direction=(startY>absoluteY)?-1:1;}else {if((startY>=startX)&&(absoluteY>=absoluteX)){direction=(startY<absoluteY)?-1:1;}}}}}}displayAttachedObjectWarning(selectedWays.get(0));getDelegator().rotateWay(selectedWays.get(0),(float)Math.acos(cosAngle),direction,centroidX,centroidY,map.getWidth(),map.getHeight(),viewBox);startY=absoluteY;startX=absoluteX;App.mainActivity.easyEditManager.invalidate();}else {if(mode==Mode.MODE_ALIGN_BACKGROUND){performBackgroundOffset(relativeX,relativeY);}else {performTranslation(relativeX,relativeY);}}}map.invalidate();}"
2336	"public static boolean isPrimitiveArray(Object o){String type=o.getClass().getCanonicalName();return type!=null&&isArray(o)&&(type.equals(""byte[]"")||type.equals(""short[]"")||type.equals(""int[]"")||type.equals(""long[]"")||type.equals(""float[]"")||type.equals(""double[]"")||type.equals(""boolean[]"")||type.equals(""char[]""));}"
2337	"@Override public boolean onCommand(CommandSender sender,Command arg1,String arg2,String[] arg3){if(!(sender instanceof ConsoleCommandSender)){sender.sendMessage(""You must be console to run this."");return true;}else {Bukkit.getScheduler().runTaskAsynchronously(myth,new UpgradeTablesTask(this,srv));}return true;}"
2338	"private void doLog(String level,String message){message=""[""+DateTimeUtils.getTimestamp()+""]""+level+"" -> ""+message;if(isSavingToFile){if(FileUtils.getFileSizeInKb(currentLoggingFile)>MAX_LOG_FILE_SIZE_IN_KB){CompressionUtils.gzipAndDelete(currentLoggingFile);currentLoggingFile=FileUtils.stripExtension(loggingFile)+""""+ConversionUtils.zeroPad(4,""""+logFileCounter++)+"".""+(FileUtils.getExtension(loggingFile).equals("""")?""txt"":FileUtils.getExtension(loggingFile));}if(!(!isSavingInfoAndDownInLoggingFile&&(level.equals(LEVEL_LOG)||level.equals(LEVEL_INFO)))){}else {FileUtils.writeInFile(message,currentLoggingFile,true);}}if(isPrintingToConsole){System.out.println(message);}}"
2339	"@Override public TransactionResult getTransactions(ResourceContext context,String q,String op,String sinceId,Integer count,String orderBy){TransactionResult result=new TransactionResult();if(op!=null){result.setSummary(transactionBO.getTransactions(q,op));}else {TransactionList l=new TransactionList();List<Transaction> transactionList=transactionBO.getTransactions(q,sinceId,count,orderBy);l.setTransactions(transactionList);l.setCount(transactionList.size());l.setSinceId(transactionList.get(transactionList.size()-1).getId());result.setTransactions(l);}return result;}"
2340	"@Override public void onNestedPreScroll(View target,int dx,int dy,int[] consumed){if(dy>0&&mTotalRefreshingUnconsumed>=0&&!isDisabledRefresh()&&!(isEnabledPinRefreshViewWhileLoading()&&isRefreshing())&&!mScrollChecker.mIsRunning&&(mMode==MODE_BOTH||mMode==MODE_REFRESH)&&(isMovingHeader()||isMovingContent()&&mTotalRefreshingUnconsumed==0)){if(mTotalRefreshingUnconsumed==0&&mStatus==SR_STATUS_REFRESHING&&mTotalRefreshingConsumed/mIndicator.getResistanceOfPullUp()<mIndicator.getHeaderHeight()){mTotalRefreshingConsumed+=dy;mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]-dy);moveHeaderPos(mIndicator.getOffsetY());consumed[1]=dy;}else {if(mTotalRefreshingUnconsumed!=0){mTotalRefreshingUnconsumed-=dy;if(mTotalRefreshingUnconsumed<=0){mTotalRefreshingUnconsumed=0;}mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]-dy);moveHeaderPos(mIndicator.getOffsetY());consumed[1]=dy;}else {if(!mIndicator.isInStartPosition()){mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]-dy);moveHeaderPos(mIndicator.getOffsetY());consumed[1]=dy;}}}}if(dy<0&&(mMode==MODE_BOTH||mMode==MODE_LOAD_MORE)&&!isDisabledLoadMore()&&!(isEnabledPinRefreshViewWhileLoading()&&isLoadingMore())&&!mScrollChecker.mIsRunning&&mTotalLoadMoreUnconsumed>=0){if(mStatus==SR_STATUS_LOADING_MORE&&mTotalLoadMoreUnconsumed==0&&mTotalLoadMoreConsumed/mIndicator.getResistanceOfPullDown()<mIndicator.getFooterHeight()&&(isMovingFooter()||isMovingContent())){mTotalLoadMoreConsumed+=Math.abs(dy);mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]+Math.abs(dy));moveFooterPos(mIndicator.getOffsetY());consumed[1]=dy;}else {if(mTotalLoadMoreUnconsumed!=0){mTotalLoadMoreUnconsumed+=dy;if(mTotalLoadMoreUnconsumed<=0){mTotalLoadMoreUnconsumed=0;}mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]+Math.abs(dy));moveFooterPos(mIndicator.getOffsetY());consumed[1]=dy;}else {if(!mIndicator.isInStartPosition()&&isMovingFooter()){mIndicator.onFingerMove(mIndicator.getLastMovePoint()[0],mIndicator.getLastMovePoint()[1]+Math.abs(dy));moveFooterPos(mIndicator.getOffsetY());consumed[1]=dy;}}}}if(isMovingFooter()&&mIndicator.hasLeftStartPosition()&&mStatus==SR_STATUS_COMPLETE){mScrollChecker.tryToScrollTo(IIndicator.DEFAULT_START_POS,0);} final int[] parentConsumed=mParentScrollConsumed;if(dispatchNestedPreScroll(dx-consumed[0],dy-consumed[1],parentConsumed,null)){consumed[0]+=parentConsumed[0];consumed[1]+=parentConsumed[1];}}"
2341	"@Override public boolean requirements(Combat c,Character user,Character target){return getSelf().getPure(Attribute.Submissive)>=10&&getSelf().has(Trait.oiledass)&&getSelf().hasPussy();}"
2342	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){if(!toLanguageTextView.getText().equals("""")){toLanguageTextView.setText("""");}translate();}"
2343	"public boolean covers(BoundingBox area){return this.bbox==null||this.bbox.intersects(area);}"
2344	"private static boolean isLocationValidToApplySettings(Location nearestLocation,android.location.Location location){return nearestLocation!=null&&nearestLocation.getLocation().distanceTo(location)<=nearestLocation.getRadius();}"
2345	"private void dumpObject(String name,Object o,Set<Object> visited,int level) throws Exception{if(visited.contains(o)){return ;}else {visited.add(o);}StringBuilder sb=new StringBuilder();for(int i=0;i<level*4;i++){sb.append(' ');}String sValue=String.valueOf(o);if(o instanceof char[]){sValue=new String((char[])o);}SysLib.cout(sb.toString()+name+"" [""+sValue+""] ""+(o==null?"""":o.getClass().getSimpleName())+""\n"");if(o==null){}else {if(o instanceof char[]){}else {if(o.getClass().isArray()){int len=Array.getLength(o);for(int i=0;i<len;i++){Object value=Array.get(o,i);dumpObject(name+""[""+i+""]"",value,visited,level+1);}}else {if(o instanceof Iterable){Iterable<?> iter=(Iterable<?>)o;int i=0;for(Object value : iter){dumpObject(name+""[""+i+""]"",value,visited,level+1);i++;}}else {if(o instanceof String||o.getClass().isPrimitive()){}else {for(Field field : o.getClass().getDeclaredFields()){if(!Modifier.isStatic(field.getModifiers())){field.setAccessible(true);Object value=field.get(o);dumpObject(field.getName(),value,visited,level+1);}}}}}}}}"
2346	"@Override public String verifyConnection(Map<String,String> propertiesSentToClient,Map<String,String> propertiesReadFromClient,String clientName,String hashedMac,SocketAddress remoteAddress){ final String versionString=propertiesReadFromClient.get(ClientLogin.ENGINE_VERSION_PROPERTY);if(versionString==null||versionString.length()>20||versionString.trim().length()==0){return ""Invalid version ""+versionString;} final Version clientVersion=new Version(versionString);if(!ClientContext.engineVersion().equals(clientVersion,false)){return ""Client is using ""+clientVersion+"" but server requires version ""+ClientContext.engineVersion();} final String realName=clientName.split("" "")[0];if(serverMessenger.isUsernameMiniBanned(realName)){return ErrorMessages.YOU_HAVE_BEEN_BANNED;} final String remoteIp=((InetSocketAddress)remoteAddress).getAddress().getHostAddress();if(serverMessenger.isIpMiniBanned(remoteIp)){return ErrorMessages.YOU_HAVE_BEEN_BANNED;}if(hashedMac==null){return ErrorMessages.UNABLE_TO_OBTAIN_MAC;}else {if(hashedMac.length()!=28||!hashedMac.startsWith(MD5Crypt.MAGIC+""MH$"")||!hashedMac.matches(""[0-9a-zA-Z$./]+"")){return ErrorMessages.INVALID_MAC;}else {if(serverMessenger.isMacMiniBanned(hashedMac)){return ErrorMessages.YOU_HAVE_BEEN_BANNED;}}}if(Boolean.TRUE.toString().equals(propertiesSentToClient.get(PASSWORD_REQUIRED_PROPERTY))){ final String errorMessage=authenticate(propertiesSentToClient,propertiesReadFromClient);if(!Objects.equals(errorMessage,ErrorMessages.NO_ERROR)){ThreadUtil.sleep((int)(4_000*Math.random()));return errorMessage;}}return ErrorMessages.NO_ERROR;}"
2347	"@Subscribe public void onGroupProfileChange(ProfileGroupChangeEvent event){String groupKey=event.key;if(groupKey==null||event.group==null){return ;}for(String key : event.group.memberList){MemberManager.instance.setWatcher(groupKey,key);}if(!groupKey.equals(AccountManager.instance.getMeGroupKey())){groupMap.put(event.key,event.group);}}"
2348	"public static List<ScheduleJoined> isBreakoutInSchedule(List<ScheduleJoined> mySchedule,Breakouts breakout,Context c){int index=0;Boolean isBreakoutInSchedule=false;Date mySchedTime=new Date(0);AppController.logTimes(""BEFORE INDEX TEST"");while(!isBreakoutInSchedule&&mySchedTime.getTime()<=breakout.getDateAndStartTime().getTime()){if(mySchedule.get(index)!=null){Breakouts mySchedBreakout=mySchedule.get(index).breakout;mySchedTime.setTime(mySchedBreakout.getDateAndStartTime().getTime());Date test=breakout.getDateAndStartTime();Date test2=mySchedTime;if(mySchedule.get(index).schedule.isPresentation()&&test.getTime()==test2.getTime()){isBreakoutInSchedule=true;}}index++;}AppController.logTimes(""AFTER INDEX TEST"");if(!isBreakoutInSchedule){Schedules schedule=new Schedules();schedule.setId(1000+index-1);schedule.setIsPresentation(false);schedule.setBreakout_id(breakout.getId());schedule.setIsEmptyBreakout(true);ScheduleJoined scheduleJoined=new ScheduleJoined(schedule,breakout,null,null);mySchedule.add(index-1,scheduleJoined);}return mySchedule;}"
2349	"public void clearLastUrl(){if(mVisitVectorUrl.size()>0){mVisitVectorUrl.remove(mVisitVectorUrl.size()-1);}}"
2350	"public CompositeModifyEvent validate(List<Edge> batchEdges) throws Exception{OntologyGraph graph=ModelController.getCollection().getGraph();this.totalEdges=batchEdges.size();if(batchEdges.size()>0&&validateClosed(batchEdges,graph)&&validateCircle(batchEdges,graph)){return validateAndCreate(batchEdges,graph);}else {return null;}}"
2351	"static public List<Base[]> list(JoinParam param,Restraint restraint) throws IllegalArgumentException,SQLException,InstantiationException{StringBuilder sb=new StringBuilder();sb.append(""SELECT "");boolean first=true;for(JoinParam.Part p : param.getList()){for(Field f : Field.getFields(p.getClazz())){if(first){first=false;}else {sb.append("" , "");}sb.append(f.getSQLField("".""));sb.append("" AS "");sb.append(JoinParam.ListFieldPrefix);sb.append(f.getSQLField(""_""));}}if(first){throw new IllegalArgumentException(""There is NO field in SELECT Field!"");}sb.append("" FROM "");sb.append(param.toString());if(restraint!=null){sb.append(restraint.getSQLString());}PreparedStatement pst=DB.con().prepareStatement(sb.toString());int parameterIndex=1;for(JoinParam.Part part : param.getList()){for(Object o : part.getOnCheckFieldsValue()){pst.setObject(parameterIndex++,o);}}if(restraint!=null){for(Restraint.Part part : restraint.getWhere()){parameterIndex=part.setSQLParam(pst,parameterIndex);}}ResultSet rs=pst.executeQuery();List<Base[]> res=new ArrayList<Base[]>();while(rs.next()){Base[] x=param.newInstance();for(int i=0;i<x.length;i++){Class<? extends Base> c=param.getClassByIndex(i);boolean flag=true;for(Field f : Field.getFields(c)){String columnName=JoinParam.ListFieldPrefix+f.getSQLField(""_"");Object o=null;try{o=rs.getObject(columnName);}catch(SQLException e){}if(flag&&o!=null){flag=false;}try{f.set(x[i],o);}catch(IllegalArgumentException e){throw e;}}if(flag){x[i]=null;}if(x[i]!=null&&!x[i].checkKeyField()){x[i]=null;}}res.add(x);}return res;}"
2352	"public void stop(){if(recorder!=null){recorder.stop();recorder=null;}}"
2353	"public Object getValueForCommittedAt(int revisionIndex,int columnIndex){if(revisionIndex<1||revisionIndex>=revisions.size()){throw new IllegalArgumentException(""Revision index not a committed revision, was: ""+revisionIndex);}Revision rev=revisions.get(revisionIndex);switch (columnIndex){case 0 :return (revisionIndex==revisions.size()-1)?""HEAD"":"""";case 1 :return rev.getAtomHandle();case 2 :return new java.util.Date(rev.timestamp());case 3 :return rev.user();case 4 :return rev.comment()==null?"""":rev.comment();case 5 :return VU.flattenChanges(versionedOntology.changes(rev)).size();default :return ""unknown col index"";}}"
2354	"public boolean isAvailable(){return isAvailable&&isPassable()&&myEnemy==null;}"
2355	"@Override public void setListVariableElementValue(String listName,int index,Value value){if(!listVariableValueMap.containsKey(listName)){throw new UndefinedVariableException(listName);}Value listValue=listVariableValueMap.get(listName);if(index<=0||index>listValue.list().size()+1){throw new InvalidDimensionException(""Invalid index: ""+index,index);}Complex complex=value.complex();List<Complex> modifiableList=Lists.newCopyOnWriteArrayList(listValue.list());if(index==modifiableList.size()+1){modifiableList.add(complex);listVariableValueMap.put(listName,Value.of(modifiableList));LOGGER.debug(""Appended element {} to list {} at index {}"",complex,listName,index);}else {modifiableList.set(index-1,complex);listVariableValueMap.put(listName,Value.of(modifiableList));LOGGER.debug(""Set element {} at index {} of list {}"",complex,index,listName);}}"
2356	"public static Color getIdealOutlineColor(Color color){Color idealColor=Color.white;if(pastIdealOutlineColors.indexOfKey(color.toInt())>=0){return pastIdealOutlineColors.get(color.toInt());}if(color!=null){int threshold=RendererSettings.getInstance().getTextBackgroundAutoColorThreshold();int r=color.getRed();int g=color.getGreen();int b=color.getBlue();float delta=((r*0.299)+(g*0.587)+(b*0.114));if((255-delta<threshold)){idealColor=Color.black;}else {idealColor=Color.white;}}pastIdealOutlineColors.put(color.toInt(),idealColor);return idealColor;}"
2357	"private void addMember(){System.out.println(""We need you to provide some details so that we can set up this account."");String memName="""";String memAddress="""";String memGender="""";double memHeight=0;double memWeight=0;char premiumOrStudent='n';System.out.println(""Please enter your name."");input.nextLine();memName=input.nextLine();while(memName.equals("""")){System.out.println(""Please try again. Enter your name."");memName=input.nextLine();}System.out.println(""Please enter your e-mail address."");String memEmail=input.nextLine();while(!isValidEmail(memEmail)){System.out.println(""Please enter member e-mail address, making sure it has an '@' symbol, and is not in use""+""by another member."");memEmail=input.nextLine();}while(memAddress.equals("""")){System.out.println(""Please enter member address."");memAddress=input.nextLine();}while((!memGender.equals(""M""))&&(!memGender.equals(""F""))){System.out.println(""Please enter member gender. Type 'M' for male, and 'F' for female."");memGender=input.nextLine();memGender=memGender.toUpperCase();}while((memHeight<1)||(memHeight>3)){System.out.println(""Please enter member height, in meters. This means that a valid height is between 1.0 and 3.0 meters."");memHeight=validNextDouble(""==>> "");}while((memWeight<35)||(memWeight>250)){System.out.println(""Please enter member current weight. This will be used as the starting weight, by which you can""+""measure progress. Starting weight should be in KG, and should be between 35 and 250."");memWeight=validNextDouble(""==>> "");}while((premiumOrStudent!='P')&&(premiumOrStudent!='p')&&(premiumOrStudent!='S')&&(premiumOrStudent!='s')){System.out.println(""Please state whether this is a Premium membership(P) or a Student membership(S)?"");System.out.println(""(P)remium or (S)tudent: "");premiumOrStudent=input.next().charAt(0);}if((premiumOrStudent=='S')||(premiumOrStudent=='s')){System.out.println(""Please enter your College Name."");input.nextLine();String stuCampus=input.nextLine();System.out.println(""Please enter your student ID."");String stuID=input.nextLine();gym.addMember(new StudentMember(memName,memEmail,memAddress,memGender,memHeight,memWeight,stuID,stuCampus));}else {gym.addMember(new PremiumMember(memName,memEmail,memAddress,memGender,memHeight,memWeight));}memberEmail=memEmail;}"
2358	"@Override public boolean emailEnabled(){return getEmailHostName()!=null;}"
2359	"public boolean isEndOfTheStage(){return listOfEnemies.size()==37||listOfEnemies.size()==48;}"
2360	"public boolean onTouchEvent(MotionEvent event){Log.d(TAG,""onTouchEvent()"");if(event.getAction()==MotionEvent.ACTION_DOWN){ImageView logotext=(ImageView)this.findViewById(R.id.Splash_LogoText);ImageView logoram=(ImageView)this.findViewById(R.id.Splash_LogoRam);logoram.clearAnimation();logotext.clearAnimation();}return true;}"
2361	"protected boolean stillNeedToWrite(boolean tblAndAncestorsUnchanged,int seq) throws UploaderException{if(!updateMatches){return true;}if(tblAndAncestorsUnchanged){return false;}if(getCurrentRecord(seq)!=null||!isBlankRow(wbCurrentRow,uploader.getUploadData(),seq)){return true;}else {return needToCreateRecordIfParentChanged(seq);}}"
2362	"@Override public String getCsvDetailedResponsesRow(FeedbackSessionResultsBundle fsrBundle,FeedbackResponseAttributes feedbackResponseAttributes,FeedbackQuestionAttributes question,boolean hasCommentsForResponses){String giverLastName=fsrBundle.getLastNameForEmail(feedbackResponseAttributes.giver);String giverFullName=fsrBundle.getNameForEmail(feedbackResponseAttributes.giver);String giverTeamName=fsrBundle.getTeamNameForEmail(feedbackResponseAttributes.giver);String giverEmail=fsrBundle.getDisplayableEmailGiver(feedbackResponseAttributes);String recipientLastName=fsrBundle.getLastNameForEmail(feedbackResponseAttributes.recipient);String recipientFullName=fsrBundle.getNameForEmail(feedbackResponseAttributes.recipient);String recipientTeamName=fsrBundle.getTeamNameForEmail(feedbackResponseAttributes.recipient);String recipientEmail=fsrBundle.getDisplayableEmailRecipient(feedbackResponseAttributes);boolean hasComments=hasCommentsForResponses;FeedbackRubricResponseDetails frd=(FeedbackRubricResponseDetails)feedbackResponseAttributes.getResponseDetails();StringBuilder detailedResponsesRow=new StringBuilder(100);for(int i=0;i<frd.answer.size();i++){hasComments=(i<1)?hasComments:false;int chosenIndex=frd.answer.get(i);String chosenChoiceNumber="""";String chosenChoiceValue="""";String chosenIndexString=StringHelper.integerToLowerCaseAlphabeticalIndex(i+1);if(chosenIndex==-1){chosenChoiceValue=Const.INSTRUCTOR_FEEDBACK_RESULTS_MISSING_RESPONSE;}else {chosenChoiceNumber=Integer.toString(chosenIndex+1);chosenChoiceValue=rubricChoices.get(frd.answer.get(i));}detailedResponsesRow.append(SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverTeamName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverFullName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverLastName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverEmail))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(recipientTeamName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(recipientFullName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(recipientLastName))+','+SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(recipientEmail))+','+SanitizationHelper.sanitizeForCsv(chosenIndexString)+','+SanitizationHelper.sanitizeForCsv(chosenChoiceValue)+','+SanitizationHelper.sanitizeForCsv(chosenChoiceNumber)+(hasComments?fsrBundle.getCsvDetailedFeedbackResponseCommentsRow(feedbackResponseAttributes):"""")+Const.EOL);}return detailedResponsesRow.toString();}"
2363	"public Profile getUserProfileFeed(String username,String minId,String maxId){String uImage;String profName;String profDesc;int postsCount;int followersCount;int followingCount;ArrayList<Post> thePosts=new ArrayList<>();try{MediaFeed mediaFeed;if(username==Parameters.selfLogin_key){mediaFeed=instagram.getRecentMediaFeed(""self"",MAX_USER_FEED_POSTS,minId,maxId,null,null);username=thisUserData.getUsername();uImage=thisUserData.getProfilePicture();profName=thisUserData.getFullName();profDesc=thisUserData.getBio();postsCount=thisUserData.getCounts().getMedia();followersCount=thisUserData.getCounts().getFollowedBy();followingCount=thisUserData.getCounts().getFollows();}else {mediaFeed=instagram.getRecentMediaFeed(username,MAX_USER_FEED_POSTS,minId,maxId,null,null);UserInfoData otherUser=instagram.getUserInfo(username).getData();uImage=otherUser.getProfilePicture();profName=otherUser.getFullName();profDesc=otherUser.getBio();postsCount=otherUser.getCounts().getMedia();followersCount=otherUser.getCounts().getFollowedBy();followingCount=otherUser.getCounts().getFollows();}List<MediaFeedData> mediaFeeds=mediaFeed.getData();thePosts=getPostsList(mediaFeeds,false);Log.v(""NETWORK"",""thePosts size() ""+Integer.toString(thePosts.size()));return new Profile(new User(username,uImage,profName),profDesc,postsCount,followersCount,followingCount,thePosts);}catch(InstagramException e){e.printStackTrace();return new Profile(Parameters.default_username);}}"
2364	"public void loadInitialHoldings(Calendar start){for(Security s : securities){if(start.getTime().after(s.buyDate)&&start.getTime().before(s.sellDate)){if(s instanceof Core){Double[] stats=new Double{100.0,getValue(start.getTime(),s),getValue(start.getTime(),s)};holdings.put(s,stats);}else {if(s instanceof Sector){buy(s,s.allocation,true);}}}}}"
2365	"public boolean launchMissile(Pos target,int gaoDu){ final ItemStack stack=getStackInSlot(0);if(stack!=null&&stack.getItem()==ICBMClassic.itemMissile){Explosive ex=Explosives.get(stack.getItemDamage()).handler;if(ex instanceof Missile){float inaccuracy;if(this.supportFrame!=null){inaccuracy=this.supportFrame.getInaccuracy();}else {inaccuracy=30.0;}inaccuracy*=(float)Math.random()*2-1;target=target.add(inaccuracy,0,inaccuracy);EntityMissile missile=new EntityMissile(world());missile.explosiveID=Explosives.get(stack.getItemDamage());missile.launcherPos=new Pos((TileEntity)this);missile.setPosition(xi(),yi()+3,zi());missile.launch(target,gaoDu);world().spawnEntityInWorld(missile);this.decrStackSize(0,1);return true;}}return false;}"
2366	"public void onClaim(Player player){if(this.worldDisabled(player)){player.sendMessage(lm.getString(""Disabled-World""));return ;}Chunk chunk=player.getWorld().getChunkAt(player.getLocation());OwnedLand pr=plugin.getWgHandler().getRegion(chunk);String landname=chunk.getWorld().getName()+""_""+chunk.getX()+""_""+chunk.getZ();if(!plugin.getWgHandler().canClaim(player,chunk)){if(plugin.getPlayerManager().getOffer(landname)==null){LandClaimEvent event=new LandClaimEvent(player,player.getLocation().getChunk().getX(),player.getLocation().getChunk().getZ(),LandClaimEvent.ClaimState.OVERLAPPINGREGION);plugin.getServer().getPluginManager().callEvent(event);if(!event.isCancelled()){player.sendMessage(lm.getString(""Commands.Claim.notAllowed""));return ;}}}if(pr!=null){Offers offer=plugin.getPlayerManager().getOffer(pr.getLandName());if(offer==null||pr.getOwner().equals(player.getUniqueId())){LandClaimEvent event=new LandClaimEvent(player,player.getLocation().getChunk().getX(),player.getLocation().getChunk().getZ(),LandClaimEvent.ClaimState.ALREADYCLAIMED);Bukkit.getServer().getPluginManager().callEvent(event);if(!event.isCancelled()){player.sendMessage(lm.getString(""Commands.Claim.alreadyClaimed"").replace(""%owner%"",pr.printOwners()));return ;}}}int regionCount=plugin.getWgHandler().getWG().getRegionManager(player.getWorld()).getRegionCountOfPlayer(plugin.getWgHandler().getWG().wrapPlayer(player));List<Integer> limitlist=plugin.getConfig().getIntegerList(""limits"");if(!player.hasPermission(""landlord.limit.override"")){int highestAllowedLandCount=-1;for(Integer integer : limitlist){if(regionCount<=integer){if(player.hasPermission(""landlord.limit.""+integer)){highestAllowedLandCount=integer;}}}if(regionCount>=highestAllowedLandCount){player.sendMessage(lm.getString(""Commands.Claim.hardcap"").replace(""%regions%"",highestAllowedLandCount+""""));return ;}}if(plugin.getConfig().getBoolean(""Shop.enable"")&&plugin.isVaultEnabled()){int claims=plugin.getPlayerManager().get(player.getUniqueId()).getClaims();if(regionCount>=claims){ComponentBuilder builder=new ComponentBuilder(lm.getString(""Commands.Claim.limit"").replace(""%regions%"",regionCount+"""").replace(""%claims%"",claims+"""")).color(ChatColor.YELLOW).event(new ClickEvent(ClickEvent.Action.RUN_COMMAND,""/ll shop""));player.spigot().sendMessage(builder.create());return ;}}boolean flag=false;if(plugin.isVaultEnabled()){Offers offer=plugin.getPlayerManager().getOffer(landname);if(offer!=null){if(plugin.getVaultHandler().hasBalance(player.getUniqueId(),offer.getPrice())){ConfirmationGUI confirm=new ConfirmationGUI(player,pr.getLandName(),player1 -> {  plugin.getVaultHandler().take(player.getUniqueId(),offer.getPrice());  plugin.getVaultHandler().give(offer.getSeller(),offer.getPrice());  plugin.getPlayerManager().removeOffer(offer.getLandname());  pr.getLand().getOwners().clear();  pr.getLand().getOwners().addPlayer(player.getUniqueId());  player.sendMessage(lm.getString(""Commands.Claim.success"").replace(""%chunk%"",OwnedLand.getLandName(chunk)).replace(""%world%"",chunk.getWorld().getName()));  OwnedLand.highlightLand(player,CParticle.VILLAGERHAPPY);  plugin.getMapManager().updateAll();  player.closeInventory();},player12 -> {  player.sendMessage(lm.getString(""Commands.Claim.aborted""));  player.closeInventory();  return;},null);confirm.display();}else {player.sendMessage(lm.getString(""Commands.Claim.notEnoughMoney"").replace(""%money%"",plugin.getVaultHandler().format(offer.getPrice())).replace(""%chunk%"",OwnedLand.getLandName(chunk)));return ;}}else {flag=true;double calculatedCost=OwnedLand.calculateCost(player);if(plugin.getVaultHandler().hasBalance(player.getUniqueId(),calculatedCost)){plugin.getVaultHandler().take(player.getUniqueId(),calculatedCost);if(calculatedCost>0){player.sendMessage(lm.getString(""Commands.Claim.moneyTook"").replace(""%money%"",plugin.getVaultHandler().format(calculatedCost)).replace(""%chunk%"",OwnedLand.getLandName(chunk)));}}else {LandClaimEvent event=new LandClaimEvent(player,player.getLocation().getChunk().getX(),player.getLocation().getChunk().getZ(),LandClaimEvent.ClaimState.NOTENOUGHMONEY);Bukkit.getServer().getPluginManager().callEvent(event);if(!event.isCancelled()){player.sendMessage(lm.getString(""Commands.Claim.notEnoughMoney"").replace(""%money%"",plugin.getVaultHandler().format(calculatedCost)).replace(""%chunk%"",OwnedLand.getLandName(chunk)));return ;}}}}if(flag){plugin.getWgHandler().claim(chunk,player.getUniqueId());player.sendMessage(lm.getString(""Commands.Claim.success"").replace(""%chunk%"",OwnedLand.getLandName(chunk)).replace(""%world%"",chunk.getWorld().getName()));OwnedLand.highlightLand(player,CParticle.VILLAGERHAPPY);if(plugin.getConfig().getBoolean(""Homes.enable"")){if(plugin.getPlayerManager().get(player.getUniqueId()).getHome()==null){Bukkit.dispatchCommand(player,""ll sethome"");}}plugin.getMapManager().updateAll();}}"
2367	"public boolean revivePlayer(MapleCharacter chr){if(disposed){return false;}try{Object b=em.getIv().invokeFunction(""playerRevive"",this,chr);if(b instanceof Boolean){return (Boolean)b;}}catch(Exception ex){FileoutputUtil.log(FileoutputUtil.ScriptEx_Log,""Event name""+em.getName()+"", Instance name : ""+name+"", method Name : playerRevive:\n""+ex);System.out.println(""Event name""+em.getName()+"", Instance name : ""+name+"", method Name : playerRevive:\n""+ex);}return true;}"
2368	"@Override public void pause(){MediaPlayerSingleton.getInstance().getMediaPlayer().pause();paused=true;isPlaying=false;updateService(PLAYSTATE_CHANGED);if(PermissionChecker.checkSelfPermission(this,Manifest.permission.SYSTEM_ALERT_WINDOW)==PermissionChecker.PERMISSION_GRANTED){if(!Extras.getInstance().floatingWidget()){trackingstop();audioWidget.controller().pause();}}}"
2369	"@Override public void mouseMoved(MouseEvent e){if(!root.isAreaInConstruction()){active=true;}redraw();}"
2370	"private void ParseCategoryRespose(String response){if(null!=mCategorylist){mCategorylist.clear();}updateModel(response);populateUI(mCategorylist);}"
2371	"private boolean isCurrentlyScheduledForDownload(){DateTimeFormatter dtf=DateTimeFormatter.ofPattern(""yyyy/MM/dd HH:mm:ss"");LocalDateTime now=LocalDateTime.now();boolean currentlyDownloading;int hour=now.getHour();int day=now.getDayOfWeek().getValue()-1;currentlyDownloading=weekSchedule[hour][day];if(currentlyDownloading&!this.autoDownloadState){log.info(""Scheduler started downloader"");}if(!currentlyDownloading&this.autoDownloadState){log.info(""Scheduler stopped downloader"");}this.autoDownloadState=currentlyDownloading;return weekSchedule[hour][day];}"
2372	"@Override public char[] findSource(IType type,IBinaryType info){IPreferenceStore prefs=JavaDecompilerPlugin.getDefault().getPreferenceStore();boolean always=prefs.getBoolean(JavaDecompilerPlugin.IGNORE_EXISTING);Collection exceptions=new LinkedList();IPackageFragment pkgFrag=type.getPackageFragment();IPackageFragmentRoot root=(IPackageFragmentRoot)pkgFrag.getParent();JavaDecompilerPlugin.getDefault().syncLibrarySource(root);char[] attachedSource=null;if(UIUtil.requestFromJavadocHover()&&!fromInput(type)&&always){sourceRanges.remove(type);attachedSource=originalSourceMapper.get(root).findSource(type,info);return attachedSource;}if(originalSourceMapper.containsKey(root)){attachedSource=originalSourceMapper.get(root).findSource(type,info);if(attachedSource!=null&&!always){attachedSource=DecompileUtil.getCopyRightContent(type.getClassFile(),new String(attachedSource)).toCharArray();updateSourceRanges(type,attachedSource);isAttachedSource=true;updateBreakPointStatus(type,new String(attachedSource));mapSource(type,attachedSource,true);((PackageFragmentRoot)root).getSourceMapper().mapSource(type,attachedSource,info);return attachedSource;}}if(info==null){if(always){return null;}return attachedSource;}try{if(root instanceof PackageFragmentRoot){PackageFragmentRoot pfr=(PackageFragmentRoot)root;SourceMapper sourceMapper=pfr.getSourceMapper();if(!originalSourceMapper.containsKey(root)){ReflectionUtils.setFieldValue(this,""options"",ReflectionUtils.getFieldValue(sourceMapper,""options""));originalSourceMapper.put(root,sourceMapper);}if(sourceMapper!=null&&!always&&!(sourceMapper instanceof DecompilerSourceMapper)){attachedSource=sourceMapper.findSource(type,info);if(attachedSource!=null){attachedSource=DecompileUtil.getCopyRightContent(type.getClassFile(),new String(attachedSource)).toCharArray();updateSourceRanges(type,attachedSource);isAttachedSource=true;updateBreakPointStatus(type,new String(attachedSource));mapSource(type,attachedSource,true);((PackageFragmentRoot)root).getSourceMapper().mapSource(type,attachedSource,info);return attachedSource;}}if(sourceMapper!=this){pfr.setSourceMapper(this);}}}catch(JavaModelException e){JavaDecompilerPlugin.logError(e,""Could not set source mapper."");}isAttachedSource=false;if(JavaDecompilerPlugin.getDefault().isAutoAttachSource()){JavaDecompilerPlugin.getDefault().attachSource(root,false);}String className=new String(info.getName());String fullName=new String(info.getFileName());className=fullName.substring(fullName.lastIndexOf(className));int index=className.lastIndexOf('/');className=className.substring(index+1);classLocation="""";usedDecompiler=decompile(null,type,exceptions,root,className);if(usedDecompiler.getSource()==null||usedDecompiler.getSource().length()==0){if(!DecompilerType.FernFlower.equals(usedDecompiler.getDecompilerType())){usedDecompiler=decompile(new FernFlowerDecompiler(),type,exceptions,root,className);if(usedDecompiler.getSource()==null||usedDecompiler.getSource().length()==0){return null;}}}String code=MarkUtil.getRandomMark(type.getClassFile())+""\r\n""+usedDecompiler.getSource();boolean showReport=prefs.getBoolean(JavaDecompilerPlugin.PREF_DISPLAY_METADATA);if(!showReport){code=usedDecompiler.removeComment(code);}boolean showLineNumber=prefs.getBoolean(JavaDecompilerPlugin.PREF_DISPLAY_LINE_NUMBERS);boolean align=prefs.getBoolean(JavaDecompilerPlugin.ALIGN);if((showLineNumber&&align)||UIUtil.isDebugPerspective()||JavaDecompilerPlugin.getDefault().isDebugMode()){if(showReport){code=usedDecompiler.removeComment(code);}DecompilerOutputUtil decompilerOutputUtil=new DecompilerOutputUtil(type.getClassFile(),usedDecompiler.getDecompilerType(),code);code=decompilerOutputUtil.realign();}StringBuffer source=new StringBuffer();if(!(UIUtil.isDebugPerspective()||JavaDecompilerPlugin.getDefault().isDebugMode())){boolean useSorter=prefs.getBoolean(JavaDecompilerPlugin.USE_ECLIPSE_SORTER);if(useSorter){className=new String(info.getName());fullName=new String(info.getFileName());if(fullName.lastIndexOf(className)!=-1){className=fullName.substring(fullName.lastIndexOf(className));}code=SortMemberUtil.sortMember(type.getPackageFragment().getElementName(),className,code);}source.append(formatSource(code));if(showReport){printDecompileReport(source,classLocation,exceptions,usedDecompiler.getDecompilationTime());}}else {source.append(code);}updateBreakPointStatus(type,source.toString());if(originalSourceMapper.containsKey(root)){if(originalSourceMapper.get(root).findSource(type,info)==null){originalSourceMapper.get(root).mapSource(type,source.toString().toCharArray(),null);}}updateSourceRanges(type,source.toString().toCharArray());return source.toString().toCharArray();}"
2373	"private Exception onActivate(ChangeGlobalStateContext cgsCtx){ final boolean client=ctx.clientNode();if(log.isInfoEnabled()){log.info(""Start activation process [nodeId=""+this.ctx.localNodeId()+"", client=""+client+"", topVer=""+cgsCtx.topVer+""]"");}try{if(!client){sharedCtx.database().lock();sharedCtx.wal().onActivate(ctx);sharedCtx.database().onActivate(ctx);if(sharedCtx.pageStore()!=null){sharedCtx.pageStore().onActivate(ctx);}}if(log.isInfoEnabled()){log.info(""Success activate wal, dataBase, pageStore [nodeId=""+ctx.localNodeId()+"", client=""+client+"", topVer=""+cgsCtx.topVer+""]"");}return null;}catch(Exception e){log.error(""Fail activate wal, dataBase, pageStore [nodeId=""+ctx.localNodeId()+"", client=""+client+"", topVer=""+cgsCtx.topVer+""]"",e);return e;}finally{if(!ctx.clientNode()){sharedCtx.database().unLock();}}}"
2374	"public BlobTable(File file,String name){super(file,StringUtils.removeMb(name));cache=new AllBlockCache();isEnd=isParsed=false;fields=Collections.emptyList();}"
2375	"private static void updateRKF(Map<Role,Map<AssrtDataTypeVar,AssrtArithFormula>> R,Map<Role,Set<AssrtDataTypeVar>> K,Map<Role,AssrtFormulaHolder> F,Role self,AssrtCoreEAction a,AssrtDataTypeVar v,AssrtBoolFormula h){putK(K,self,v);appendF(R,F,self,h);AssrtDataTypeVar annot=a.getAnnotVar();AssrtArithFormula expr=a.getArithExpr();if(!annot.equals(AssrtCoreESend.DUMMY_VAR)){Map<AssrtDataTypeVar,AssrtArithFormula> tmp=R.get(self);AssrtArithFormula curr=tmp.get(annot);if(!curr.equals(expr)){tmp.put(annot,expr);AssrtIntVarFormula iv=AssrtFormulaFactory.AssrtIntVar(annot.toString());AssrtFormulaHolder hh=F.get(self);List<AssrtBoolFormula> foo=new LinkedList<>();AssrtBoolFormula bar=AssrtFormulaFactory.AssrtExistsFormula(Arrays.asList(iv),hh.toFormula());foo.add(bar);if(expr.getVars().contains(annot)){expr=expr.subs(AssrtFormulaFactory.AssrtIntVar(annot.toString()),makeFreshIntVar(annot));}foo.add(AssrtFormulaFactory.AssrtBinComp(AssrtBinCompFormula.Op.Eq,iv,expr));hh=new AssrtForallFormulaHolder(Arrays.asList(AssrtFormulaFactory.AssrtIntVar(AssrtCoreESend.DUMMY_VAR.toString())),foo);F.put(self,hh);}}}"
2376	"public static void doAction(Friendly u){if(u.getX()<Main.b.getWidth()-50){nextWave=false;if(u.isInAction()){return ;}u.currentlyAttacking=false;for(int i=(int)u.getX()+50;i<(50+(int)u.getX())+(u.getAttackRange())*20;i++){for(Enemy e : enemies){if(!e.isDead()&&e.getX()==i&&e.getY()==u.getY()){u.attack(e);u.currentlyAttacking=true;}else {}}}if(u.getX()>=Main.b.getWidth()-51){double multiplier=u.getCurrentHealth()/u.getMaxHealth();addMoney((int)(u.getUnitCost(u)*multiplier));u.kill();}if(!u.currentlyAttacking){u.move();}}else {nextWave=true;}}"
2377	"@Override public void exitReturnStatement(MiracleParser.ReturnStatementContext ctx){List<MiracleASTreeNode> children=path.pop();if(functionBuffer.empty()){throw new MiracleExceptionStatementScope(""return"",""function"");}MiracleASTreeFunctionDeclaration function=functionBuffer.peek();if(ctx.expression()==null){if(!function.getReturnType().equals(MiracleASTreeVOID)){throw new MiracleExceptionReturn(function.getReturnType().toString(),MiracleASTreeVOID.toString());}path.peek().add(new MiracleASTreeReturn());}else {if(!function.getReturnType().equals(((MiracleASTreeExpression)children.get(0)).getType())){throw new MiracleExceptionReturn(function.getReturnType().toString(),((MiracleASTreeExpression)children.get(0)).getType().toString());}path.peek().add(new MiracleASTreeReturn((MiracleASTreeExpression)children.get(0)));}super.exitReturnStatement(ctx);}"
2378	"@RequestMapping(value=""addVehicleType"",method=RequestMethod.POST) public ModelAndView addVehicleType(VehicleType vehicleType,BindingResult result,ModelMap modelMap){ModelAndView model=new ModelAndView(""setup"");model.addObject(""parkingLevel"",new VehicleType());String name=vehicleType.getName();if(name==null){model.addObject(Constants.ERROR_MESSAGE,messageSource.getMessage(""NotEmpty.vehicleType.name"",null,Locale.getDefault()));return model;}vehicleTypeService.save(vehicleType);modelMap.addAttribute(""vehicleTypes"",getVehicleTypes());return setup();}"
2379	"@Override public boolean equals(Object o){if(this==o){return true;}else {if(o==null||!(o instanceof Span)){return false;}else {Span otherSpan=(Span)o;if(this.tokens.length==otherSpan.tokens.length){for(int i=0;i<tokens.length;++i){if(tokens[i]!=otherSpan.tokens[i]){return false;}}return true;}return false;}}}"
2380	"public void onFilterTabChanged(){logger.debug(""onFilterTabChanged()"");Tab selTab=((Tabbox)getFellow(""tabboxFilter"")).getSelectedTab();if(selTab.getIndex()==0){mode=MODE.CODESYSTEMS;createTabContent_CS();}else {if(selTab.getIndex()==1){mode=MODE.VALUESETS;createTabContent_VS();}else {if(selTab.getIndex()==2){mode=MODE.SEARCH;createTabContent_Search();}}}logger.debug(""save new mode in session: ""+mode.name());SessionHelper.setMainViewMode(mode);}"
2381	"private void prepareAllMultipleComponentNodes(Map<IMultipleComponentItem,AbstractNode> itemsMap,IMultipleComponentManager multipleComponentManager,INode graphicalNode){List<IMultipleComponentItem> itemList=multipleComponentManager.getItemList();for(IMultipleComponentItem curItem : itemList){String uniqueName=graphicalNode.getUniqueName()+""_""+curItem.getName();IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();String currentComponent=curItem.getComponent();IComponent component=componentsFactory.get(currentComponent,process.getComponentsType());if(component==null){component=componentsFactory.get(currentComponent,ComponentCategory.CATEGORY_4_DI.getName());}if(component==null){continue;}AbstractNode curNode;if(component.getPluginExtension()==null){curNode=new DataNode(component,uniqueName);}else {curNode=(AbstractNode)ExternalNodesFactory.getInstance(component.getPluginExtension());IExternalData externalData=graphicalNode.getExternalData();IExternalNode externalNode=graphicalNode.getExternalNode();if(curNode instanceof IExternalNode){if(externalData!=null){((IExternalNode)curNode).setExternalData(externalData);}((IExternalNode)curNode).setExternalEmfData(externalNode.getExternalEmfData());((IExternalNode)curNode).setInternalMapperModel(externalNode.getInternalMapperModel());}curNode.setStart(graphicalNode.isStart());curNode.setElementParameters(graphicalNode.getComponent().createElementParameters(curNode));curNode.setListConnector(graphicalNode.getListConnector());copyElementParametersValue(graphicalNode,curNode);curNode.setUniqueName(uniqueName);curNode.setSubProcessStart(graphicalNode.isSubProcessStart());curNode.setThereLinkWithHash(graphicalNode.isThereLinkWithHash());curNode.setHasConditionalOutputs(graphicalNode.hasConditionalOutputs());curNode.setIsMultiplyingOutputs(graphicalNode.isMultiplyingOutputs());curNode.setComponent(component);List<IMetadataTable> metaList=new ArrayList<IMetadataTable>();IMetadataTable metaTable=new MetadataTable();metaTable.setTableName(uniqueName);metaList.add(metaTable);curNode.setMetadataList(metaList);}updateVirtualComponentProperties(graphicalNode.getComponentProperties(),curItem,curNode);curNode.setActivate(graphicalNode.isActivate());IMetadataTable newMetadata=null;if(multipleComponentManager.isSetConnector()){newMetadata=graphicalNode.getMetadataFromConnector(multipleComponentManager.getConnector()).clone();}else {String sourceConnector=null;for(IMultipleComponentParameter param : multipleComponentManager.getParamList()){if(curItem.getName().equals(param.getTargetComponent())){for(IElementParameter paramComp : graphicalNode.getElementParameters()){if(param.getSourceValue().equals(paramComp.getName())){sourceConnector=paramComp.getContext();}}}}if(sourceConnector==null){sourceConnector=EConnectionType.FLOW_MAIN.getName();}IMetadataTable metadataTable=graphicalNode.getMetadataFromConnector(sourceConnector);if(metadataTable!=null){newMetadata=metadataTable.clone();}else {if(!graphicalNode.getMetadataList().isEmpty()){newMetadata=graphicalNode.getMetadataList().get(0).clone();}}}if(newMetadata!=null){newMetadata.setTableName(uniqueName);}if(graphicalNode.isDesignSubjobStartNode()){curNode.setDesignSubjobStartNode(null);}else {curNode.setDesignSubjobStartNode(graphicalNode.getDesignSubjobStartNode());}boolean isSAPBapi=graphicalNode.getComponent()!=null&&""tSAPBapi"".equals(graphicalNode.getComponent().getName());if(multipleComponentManager.isSetConnector()&&(multipleComponentManager.getOutputName().equals(curItem.getName())||isSAPBapi)){if(curNode.getComponentName().equals(""tDummyRow"")){curNode.setActivate(false);}else {List<IMetadataTable> newMetadataList=new ArrayList<IMetadataTable>();if(graphicalNode.getMetadataList()!=null){for(IMetadataTable metadataTable : graphicalNode.getMetadataList()){newMetadataList.add(metadataTable.clone());}}curNode.setMetadataList(newMetadataList);}}else {if(curNode.getMetadataList()!=null&&newMetadata!=null){curNode.getMetadataList().remove(0);curNode.getMetadataList().add(newMetadata);}}List<IConnection> outgoingConnections=new ArrayList<IConnection>();List<IConnection> incomingConnections=new ArrayList<IConnection>();curNode.setIncomingConnections(incomingConnections);curNode.setOutgoingConnections(outgoingConnections);curNode.setProcess(graphicalNode.getProcess());curNode.setVirtualGenerateNode(true);addDataNode(curNode);curNode.setRealGraphicalNode(graphicalNode);itemsMap.put(curItem,curNode);}}"
2382	"public String compart(Arquivo item){System.out.println(""-------- Open Compart"");System.out.println(item.toString());item.getNome();List<String> args=divideMigalha();String ref=args.get(0);String Base=args.get(1);String path=args.get(2);System.out.println(""Teste Nome Path:""+path);path+=item.getNome();path=ref+""/""+path;System.out.println(""PathCompart:""+path);System.out.println(""---------Open Bd"");String Users=stringField.getSubmittedValue().toString();System.out.println(""Teste:""+Users);System.out.println(item.getNome());if(item.getNome()!=null){cli.criaFolderCompart(path,Users,ref);}else {System.out.println(item.getNome());System.out.println(item.getNome());}System.out.println(""---------Exit Bd"");System.out.println(""-------- Exit Compart"");return ""sucesso"";}"
2383	"public static List<ItemStack> toItems(Object obj){List<ItemStack> item=new ArrayList<ItemStack>();if(obj==null){return item;}if(obj instanceof ItemStack){item.add((ItemStack)obj);}else {if(obj instanceof String){item.addAll(OreDictionary.getOres((String)obj));}else {if(obj instanceof Item){item.addAll(getItems(obj));}else {if(obj instanceof Block){item.addAll(getItems(obj));}else {if(obj instanceof ITEM_GROUP){item.addAll(((ITEM_GROUP)obj).toItems());}}}}}return item;}"
2384	"private void expectNext(int expectType,String message) throws XmpParsingException,XmpUnexpectedTypeException,XMLStreamException{try{int type=reader.get().next();while(type==XMLStreamReader.COMMENT){type=reader.get().next();}if(type!=expectType){throw new XmpUnexpectedTypeException(message);}}catch(NoSuchElementException e){throw new XmpParsingException(""XMP Stream did not end in a good way, invalid content"");}}"
2385	"@Override public void onPlayerInteract(PlayerInteractEvent event){Player player=event.getPlayer();if(event.getAction()==Action.PHYSICAL&&event.getClickedBlock()!=null&&isTelepadLapis(event.getClickedBlock().getRelative(BlockFace.DOWN))&&(!teleportTimeouts.containsKey(player.getName())||teleportTimeouts.get(player.getName())<System.currentTimeMillis())&&!teleportingPlayers.contains(player)){Block senderLapis=event.getClickedBlock().getRelative(BlockFace.DOWN);Block receiverLapis=getTelepadLapisReceiver(senderLapis);if(receiverLapis!=null){if(!player.hasPermission(""bluetelepads.use"")){msgPlayer(player,""You do not have permission to use telepads."");return ;}if(!TelepadsWithinDistance(senderLapis,receiverLapis)){msgPlayer(player,ChatColor.RED+""Error: Telepads are too far apart! (Distance:""+getDistance(senderLapis.getLocation(),receiverLapis.getLocation())+"",MaxAllowed:""+plugin.maxDistance+"")"");return ;}boolean isFree=isTelepadFree(senderLapis);if(!isFree&&!plugin.Method.getAccount(player.getName()).hasEnough(plugin.teleportCost)){msgPlayer(player,ChatColor.RED+""You don't have enough to pay for a teleport."");return ;}Sign receiverSign=(Sign)receiverLapis.getRelative(BlockFace.DOWN).getState();if(!plugin.disableTeleportMessage){String message;if(!plugin.disableTeleportWait){if(receiverSign.getLine(3).equals("""")){message=""Preparing to send you, stand still!"";}else {message=""Preparing to send you to ""+ChatColor.YELLOW+receiverSign.getLine(3)+ChatColor.AQUA+"", stand still!"";}}else {if(receiverSign.getLine(3).equals("""")){message=""You have been teleported!"";}else {message=""You have been teleported to ""+ChatColor.YELLOW+receiverSign.getLine(3);}}msgPlayer(player,message);}teleportingPlayers.add(player);if(plugin.disableTeleportWait){plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new BluePadTeleport(player,player.getLocation(),senderLapis,receiverLapis,isFree,plugin.disableTeleportWait));}else {plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new BluePadTeleport(player,player.getLocation(),senderLapis,receiverLapis,isFree,plugin.disableTeleportWait),plugin.sendWait*20L);}}}else {if(event.getItem()!=null&&event.getItem().getType()==Material.REDSTONE&&event.getClickedBlock()!=null&&isTelepadLapis(event.getClickedBlock().getRelative(BlockFace.DOWN))){if(!player.hasPermission(""bluetelepads.create"")){msgPlayer(player,""You do not have permission to create a telepad!"");return ;}if(isTelepadFree(event.getClickedBlock(),true)&&!player.hasPermission(""bluetelepads.createfree"")){msgPlayer(player,""You do not have permission to create a free telepad."");return ;}if(getTelepadLapisReceiver(event.getClickedBlock().getRelative(BlockFace.DOWN))!=null){msgPlayer(player,""Error: This telepad seems to be linked already!"");msgPlayer(player,ChatColor.YELLOW+""You can reset it by breaking the pressure pad on top of it, then clicking the lapis with redstone."");return ;}if(!lapisLinks.containsKey(player.getName())){lapisLinks.put(player.getName(),event.getClickedBlock().getRelative(BlockFace.DOWN).getLocation());msgPlayer(player,""Telepad location stored!"");return ;}else {if(event.getAction()==Action.RIGHT_CLICK_BLOCK){lapisLinks.remove(player.getName());msgPlayer(player,""Telepad location ditched! (right clicked)"");return ;}else {Block firstLapis=lapisLinks.get(player.getName()).getBlock();if(isTelepadLapis(firstLapis)){Block secondLapis=event.getClickedBlock().getRelative(BlockFace.DOWN);if(!TelepadsWithinDistance(firstLapis,secondLapis)){msgPlayer(player,ChatColor.RED+""Error: Telepads are too far apart! (Distance:""+getDistance(firstLapis.getLocation(),event.getClickedBlock().getLocation())+"",MaxAllowed:""+plugin.maxDistance+"")"");return ;}if(firstLapis==secondLapis){msgPlayer(player,ChatColor.RED+""Error: You cannot connect a telepad to itself."");lapisLinks.remove(player.getName());return ;}lapisLinks.remove(player.getName());linkTelepadLapisReceivers(firstLapis,event.getClickedBlock().getRelative(BlockFace.DOWN));msgPlayer(player,""Telepad location transferred!"");return ;}}}}else {if(event.getItem()!=null&&event.getItem().getType()==Material.REDSTONE&&event.getClickedBlock()!=null&&event.getClickedBlock().getTypeId()==plugin.telepadCenterID){Block resetLapis=event.getClickedBlock();if(resetLapis.getType()==Material.AIR&&(isTelepadLapis(resetLapis))){Sign resetSign=(Sign)resetLapis.getRelative(BlockFace.DOWN).getState();resetSign.setLine(1,"""");resetSign.setLine(2,"""");resetSign.update();msgPlayer(player,""Telepad Reset!"");return ;}}}}}"
2386	"@Override public void scanApps(){if(isBooting){return ;}synchronized(this){isBooting=true;mPersistenceLayer.read();if(StubManifest.ENABLE_GMS&&!GmsSupport.isGoogleFrameworkInstalled()){GmsSupport.installGms(0);}isBooting=false;}}"
2387	"public static ObjectWriter getObjectWriter(Object obj){ final ObjectWriter writer;if(obj instanceof Integer){writer=IntegerWriter.getInstance();}else {if(obj instanceof String){writer=StringWriter.getInstance();}else {if(obj instanceof Double){writer=DoubleWriter.getInstance();}else {if(obj instanceof Boolean){writer=BooleanWriter.getInstance();}else {if(obj instanceof Object[]){writer=ArrayWriter.getInstance();}else {if(obj instanceof List){writer=ListWriter.getInstance();}else {if(obj instanceof Map){writer=MapWriter.getInstance();}else {throw new BacklogException(""Unsupported object type :""+obj.getClass());}}}}}}}return writer;}"
2388	"public void alphaBeta(int depth,int alpha,int beta,int player,boolean isMaxPlayer,int appliedMoveNum,long timeLim){mustJump=false;int[] boardCopy=new int[4];if(System.nanoTime()>timeLim){return ;}if(depth==0){validMoves[appliedMoveNum][moveLen-1]=heuristic(player,isMaxPlayer);return ;}int sqVal;int anyMove=0;for(int sq=0;sq<32;sq++){sqVal=getSquareVal(sq);if(sqVal>0&&(sqVal&1)==player){anyMove+=findAnyMove(sq,player,sqVal>2?true:false);}}if(anyMove==0){validMoves[appliedMoveNum][moveLen-1]=isMaxPlayer?negINF:posINF;return ;}int firstValidMove=numValidMoves;for(int sq=0;sq<32;sq++){sqVal=getSquareVal(sq);if(sqVal>0&&(sqVal&1)==player){recursiveMoveFinder(sq,sq,0,player,(sqVal>2?true:false));}}int v;if(isMaxPlayer){v=negINF;for(int moveNum=firstValidMove;moveNum<numValidMoves;moveNum++){boardCopy=Arrays.copyOf(boardState,4);applySingleMove(player,moveNum);alphaBeta(depth-1,alpha,beta,(player+1)&1,!isMaxPlayer,moveNum,timeLim);boardState=Arrays.copyOf(boardCopy,4);v=v>validMoves[moveNum][moveLen-1]?v:validMoves[moveNum][moveLen-1];alpha=alpha>v?alpha:v;if(beta<alpha){break;}}}else {v=posINF;for(int moveNum=firstValidMove;moveNum<numValidMoves;moveNum++){boardCopy=Arrays.copyOf(boardState,4);applySingleMove(player,moveNum);alphaBeta(depth-1,alpha,beta,(player+1)&1,!isMaxPlayer,moveNum,timeLim);boardState=Arrays.copyOf(boardCopy,4);v=v<validMoves[moveNum][moveLen-1]?v:validMoves[moveNum][moveLen-1];beta=beta<v?beta:v;if(beta<alpha){break;}}}prevNumValidMoves=numValidMoves;while(numValidMoves>firstValidMove){numValidMoves--;}if(v>posINF-100){v--;}else {if(v<negINF+100){v++;}}validMoves[appliedMoveNum][moveLen-1]=v;if(DEBUG&&DEPTH_LIM<6){System.out.println(""Stack Level ""+appliedMoveNum+"": ""+Arrays.toString(validMoves[appliedMoveNum])+"". Alpha = ""+alpha+"" Beta = ""+beta);}return ;}"
2389	"@Override protected Query doConstructQuery(JSONObject jsonQuery) throws JSONException{BooleanQuery query=new BooleanQuery(jsonQuery.optBoolean(DISABLE_COORD_PARAM,false));Object obj=jsonQuery.opt(MUST_PARAM);if(obj!=null){if(obj instanceof JSONArray){for(int i=0;i<((JSONArray)obj).length();++i){query.add(QueryConstructor.constructQuery(((JSONArray)obj).getJSONObject(i),_qparser),BooleanClause.Occur.MUST);}}else {if(obj instanceof JSONObject){query.add(QueryConstructor.constructQuery((JSONObject)obj,_qparser),BooleanClause.Occur.MUST);}}}obj=jsonQuery.opt(MUST_NOT_PARAM);if(obj!=null){if(obj instanceof JSONArray){for(int i=0;i<((JSONArray)obj).length();++i){query.add(QueryConstructor.constructQuery(((JSONArray)obj).getJSONObject(i),_qparser),BooleanClause.Occur.MUST_NOT);}}else {if(obj instanceof JSONObject){query.add(QueryConstructor.constructQuery((JSONObject)obj,_qparser),BooleanClause.Occur.MUST_NOT);}}}JSONArray array=jsonQuery.optJSONArray(SHOULD_PARAM);if(array!=null){for(int i=0;i<array.length();++i){query.add(QueryConstructor.constructQuery(array.getJSONObject(i),_qparser),BooleanClause.Occur.SHOULD);}}query.setMinimumNumberShouldMatch(jsonQuery.optInt(MINIMUM_NUMBER_SHOULD_MATCH_PARAM,1));query.setBoost((float)jsonQuery.optDouble(BOOST_PARAM,1.0));return query;}"
2390	"@Override public boolean start() throws IOException{try{executeSalesforceBulkQuery();bulkResultSet=bulkRuntime.getQueryResultSet(bulkRuntime.nextResultId());currentRecord=bulkResultSet.next();return currentRecord!=null;}catch(ConnectionException|AsyncApiException e){throw new IOException(e);}}"
2391	"@Override public boolean shouldDecorate(CalendarDay day){return schedulePresenter.isCurrentMonth(day.getDate().getTime()/1000)&&schedulePresenter.getCalendarEventModel().listEvent.contains(day.getDay())&&!schedulePresenter.convertTimeToString(schedulePresenter.getCurrentTime()).equals((new SimpleDateFormat(""EEEE, dd MMM yyyy"")).format(day.getDate().getTime()));}"
2392	"private FunctionData writeFunctionDefinition(DefinitionSerialization defSerializer,FunctionDefinition definition){DefinitionProtos.Definition.FunctionData.Builder builder=DefinitionProtos.Definition.FunctionData.newBuilder();builder.addAllParam(defSerializer.writeParameters(definition.getParameters()));if(definition.getResultType()!=null){builder.setType(defSerializer.writeExpr(definition.getResultType()));}if(definition.getBody()!=null){builder.setBody(writeBody(defSerializer,definition.getBody()));}return builder.build();}"
2393	"private void loadInstanceInfo(){((Label)getFellow(""instanceTitle"")).setValue(Labels.getLabel(CommonConstants.LABEL_INSTANCE_TITLE)+"" ""+instance.getDbName());((Label)getFellow(""username"")).setValue(instance.getUsername());if(instance.getEGroup()!=null&&!instance.getEGroup().isEmpty()){((Label)getFellow(""eGroup"")).setValue(instance.getEGroup());((Textbox)getFellow(""eGroupEdit"")).setValue(instance.getEGroup());}else {((Label)getFellow(""eGroup"")).setValue(""-"");}((Label)getFellow(""category"")).setValue(Labels.getLabel(CommonConstants.LABEL_CATEGORY+instance.getCategory()));if(instance.getProject()!=null&&!instance.getProject().isEmpty()){((Label)getFellow(""project"")).setValue(instance.getProject());((Textbox)getFellow(""projectEdit"")).setValue(instance.getProject());}else {((Label)getFellow(""project"")).setValue(""-"");}((Label)getFellow(""creationDate"")).setValue(dateFormatter.format(instance.getCreationDate()));if(instance.getExpiryDate()!=null){((Label)getFellow(""expiryDate"")).setValue(dateFormatter.format(instance.getExpiryDate()));try{((Datebox)getFellow(""expiryDateEdit"")).setValue(instance.getExpiryDate());}catch(WrongValueException ex){((Label)getFellow(""expiryDate"")).setValue(""Incorrect date"");}}else {((Label)getFellow(""expiryDate"")).setValue(""-"");}((Label)getFellow(""dbType"")).setValue(Labels.getLabel(CommonConstants.LABEL_DB_TYPE+instance.getDbType()));((Label)getFellow(""dbSize"")).setValue(instance.getDbSize()+"" GB"");if(instance.getNoConnections()>0){((Label)getFellow(""noConnections"")).setValue(String.valueOf(instance.getNoConnections()));}else {((Label)getFellow(""noConnections"")).setValue(""-"");}if(instance.getVersion()!=null&&!instance.getVersion().isEmpty()){((Label)getFellow(""version"")).setValue(instance.getVersion());}else {((Label)getFellow(""version"")).setValue(""-"");}if(master!=null){((Label)getFellow(""master"")).setValue(master.getDbName());}if(slave!=null){((Label)getFellow(""slave"")).setValue(slave.getDbName());}((Label)getFellow(""host"")).setValue(instance.getHost());if(instance.getDescription()!=null&&!instance.getDescription().isEmpty()){((Label)getFellow(""description"")).setValue(instance.getDescription());((Textbox)getFellow(""descriptionEdit"")).setValue(instance.getDescription());}else {((Label)getFellow(""description"")).setValue(""-"");}Image stateImage=(Image)getFellow(""stateImage"");Label stateLabel=(Label)getFellow(""stateLabel"");stateImage.setWidth(""20px"");stateImage.setHeight(""20px"");stateLabel.setValue(Labels.getLabel(CommonConstants.LABEL_STATE+instance.getState()));stateImage.setTooltiptext(Labels.getLabel(CommonConstants.LABEL_STATE+instance.getState()));switch (instance.getState()){case CommonConstants.INSTANCE_STATE_AWAITING_APPROVAL :stateImage.setSrc(CommonConstants.IMG_AWAITING_APPROVAL);break;case CommonConstants.INSTANCE_STATE_JOB_PENDING :stateImage.setSrc(CommonConstants.IMG_PENDING);break;case CommonConstants.INSTANCE_STATE_RUNNING :stateImage.setSrc(CommonConstants.IMG_RUNNING);break;case CommonConstants.INSTANCE_STATE_STOPPED :stateImage.setSrc(CommonConstants.IMG_STOPPED);break;case CommonConstants.INSTANCE_STATE_MAINTENANCE :stateImage.setSrc(CommonConstants.IMG_MAINTENANCE);break;case CommonConstants.INSTANCE_STATE_BUSY :stateImage.setSrc(CommonConstants.IMG_BUSY);break;case CommonConstants.INSTANCE_STATE_UNKNOWN :stateImage.setSrc(CommonConstants.IMG_UNKNOWN);break;}User user=instance.getUser();if(user!=null){((Label)getFellow(""email"")).setValue(user.getEmail());((Label)getFellow(""fullname"")).setValue(user.getFirstName()+"" ""+user.getLastName());String telephone="""";String phoneLabel="""";if(user.getPhone1()!=null){phoneLabel=Labels.getLabel(CommonConstants.LABEL_PHONE);telephone+=user.getPhone1();if(user.getPhone2()!=null){phoneLabel+="" / ""+Labels.getLabel(CommonConstants.LABEL_PHONE)+"" 2"";telephone+="" / ""+user.getPhone2();}if(user.getPortable()!=null){phoneLabel+="" (""+Labels.getLabel(CommonConstants.LABEL_PORTABLE)+"")"";telephone+="" (""+user.getPortable()+"")"";}}else {if(user.getPortable()!=null){phoneLabel=Labels.getLabel(CommonConstants.LABEL_PORTABLE);telephone+=user.getPortable();}}if(!phoneLabel.isEmpty()){((Label)getFellow(""phoneLabel"")).setValue(phoneLabel+"":"");((Label)getFellow(""telephone"")).setValue(telephone);}String orgunit=""-"";if(user.getDepartment()!=null){orgunit=user.getDepartment();if(user.getGroup()!=null){orgunit+=""-""+user.getGroup();if(user.getSection()!=null){orgunit+=""-""+user.getSection();}}}((Label)getFellow(""orgunit"")).setValue(orgunit);}String port=instance.getPort();if(!port.isEmpty()){((Label)getFellow(""port"")).setValue(port);}if(admin){if(instance!=null&&instance.getState().equals(CommonConstants.INSTANCE_STATE_MAINTENANCE)){((Toolbarbutton)getFellow(""setMaintenanceBtn"")).setStyle(""display:none"");((Toolbarbutton)getFellow(""unsetMaintenanceBtn"")).setStyle(""display:block"");}else {((Toolbarbutton)getFellow(""setMaintenanceBtn"")).setStyle(""display:block"");((Toolbarbutton)getFellow(""unsetMaintenanceBtn"")).setStyle(""display:none"");}((Combobox)getFellow(""categoryEdit"")).getItemAtIndex(0).setValue(CommonConstants.CATEGORY_OFFICIAL);((Combobox)getFellow(""categoryEdit"")).getItemAtIndex(1).setValue(CommonConstants.CATEGORY_REFERENCE);((Combobox)getFellow(""categoryEdit"")).getItemAtIndex(2).setValue(CommonConstants.CATEGORY_TEST);switch (instance.getCategory()){case CommonConstants.CATEGORY_OFFICIAL :((Combobox)getFellow(""categoryEdit"")).setSelectedIndex(0);break;case CommonConstants.CATEGORY_REFERENCE :((Combobox)getFellow(""categoryEdit"")).setSelectedIndex(1);break;case CommonConstants.CATEGORY_TEST :((Combobox)getFellow(""categoryEdit"")).setSelectedIndex(2);break;}((Textbox)getFellow(""dbSizeEdit"")).setValue(String.valueOf(instance.getDbSize()));if(instance.getNoConnections()>0){((Textbox)getFellow(""noConnectionsEdit"")).setValue(String.valueOf(instance.getNoConnections()));}if(instance.getVersion()!=null&&!instance.getVersion().isEmpty()){((Textbox)getFellow(""versionEdit"")).setValue(String.valueOf(instance.getVersion()));}((Textbox)getFellow(""hostEdit"")).setValue(String.valueOf(instance.getHost()));if(user==null){((Caption)getFellow(""instanceCaption"")).setImage(""/img/warning-small.png"");((Label)getFellow(""instanceTitle"")).setTooltiptext(Labels.getLabel(CommonConstants.ERROR_NO_INSTANCE_ON_FIM));((Label)getFellow(""instanceTitle"")).setStyle(""text-decoration-line:underline; text-decoration-style:dashed; text-decoration-color:red;"");}else {if(!instance.getUsername().equalsIgnoreCase(user.getLogin())){((Label)getFellow(""username"")).setValue(instance.getUsername()+"" (""+user.getLogin()+"")"");((Label)getFellow(""username"")).setStyle(""color:red !important;text-decoration-line:underline;text-decoration-style:dashed;text-decoration-color:red;"");((Label)getFellow(""username"")).setTooltiptext(Labels.getLabel(CommonConstants.ERROR_NO_USER_ON_FIM));}}}}"
2394	"public static void p(String prefix,Throwable e){if(WXEnvironment.isApkDebugable()&&e!=null){WXLogUtils.p(prefix+WXLogUtils.getStackTrace(e));}}"
2395	"public void auditDebug(Object msg){defaultLog.debug(msg);if(synCtx.getServiceLog()!=null){synCtx.getServiceLog().debug(msg);}if(traceOn){traceLog.debug(msg);}}"
2396	"public static boolean canExistOnSide(World world,BlockPos pos,EnumFacing side,int meta){switch (meta){case 0 :return world.getTileEntity(pos.offset(side)) instanceof IInventory;case 1 :return world.getTileEntity(pos.offset(side)) instanceof IFluidHandler;}return false;}"
2397	"public Integer[] getChildren(){if(children==null){page.getByteBuffer().position(CHILDREN_OFFSET);children=new Integer[CHILDREN_CAPACITY+1];for(int i=0;i<getSize()+1;i++){children[i]=page.getByteBuffer().getInt();}}return children;}"
2398	"@SubscribeEvent public void onOrbUse(PlayerInteractEvent e){if(e.action.RIGHT_CLICK_BLOCK!=null&&e.world.isRemote==false){World w=e.entity.worldObj;BlockPos pos=e.pos;ItemStack stack=e.entityPlayer.getHeldItem();if(w.isRemote==false&&stack!=null&&stack.getItem() instanceof LightOrb){if(Darkness.darkLists.getDistanceToNearestTower(w.provider.getDimensionId(),pos)>(Reference.TOWER_RADIUS*2)){if(w.getChunkFromBlockCoords(pos).getBlock(pos) instanceof TowerBlock){}else {if(w.getChunkFromBlockCoords(pos).getBlock(pos.getX(),pos.getY()+1,pos.getZ()) instanceof BlockAir&&w.getChunkFromBlockCoords(pos).getBlock(pos.getX(),pos.getY()+2,pos.getZ()) instanceof BlockAir){IBlockState state=Darkness.towerBlock.getDefaultState();w.setBlockState(new BlockPos(pos.getX(),pos.getY()+1,pos.getZ()),state);Darkness.darkLists.removeLightOrb(stack);stack.stackSize--;}}}}}}"
2399	"public String validate(){if(!verifyDirectory(addTrailingSeparator(this.originalSrcDir))){return ""Invalid directory (Original source folder) : ""+this.originalSrcDir;}if(!verifyDirectory(addTrailingSeparator(this.originalBinDir))){return ""Invalid directory (Original binary folder) : ""+this.originalBinDir;}if(this.generation<=0){return ""Invalid generation (""+this.generation+"") , valid values are > 0"";}if(this.testsBinDir!=null&&!verifyDirectory(addTrailingSeparator(this.testsBinDir))){return ""Invalid directory (Tests binary folder) : ""+this.testsBinDir;}if(this.testsBinDir==null&&this.runMutationScore){return ""Mutation score is enabled but no tests binary folder has been selected"";}if(!getClassesInOriginalBinDir().contains(this.classToMutate)){return ""Class ""+this.classToMutate+"" can't be found inside ""+this.originalBinDir;}if(this.runMutationScore&&(this.testClasses==null||this.testClasses.isEmpty())){return ""Mutation score is enabled but no test classes has been selected"";}if(this.runMutationScore){for(String t : this.testClasses){if(!getTestClassesInTestsBinDir().contains(t)){return ""Class ""+t+"" can't be found inside ""+this.testsBinDir;}if(!isTestClass(loadClass(t,addTrailingSeparator(this.testsBinDir)))){return ""Class ""+t+"" is not a valid test class"";}}}for(Mutant m : this.operators){if(!MutatorsInfo.getInstance().isSupported(m)){return ""Operator ""+m.toString()+"" is not supported"";}}for(String method : this.methodsToMutate){boolean found=false;for(Method m : this.methodsInClassToMutate){if(m.getName().compareTo(method)==0){found=true;}if(!found){return ""Method ""+method+"" doesn't belong to class ""+this.classToMutate;}}}for(String apr : this.allowedPackagesToReload){if(!this.packagesInOriginalBinDir.contains(apr)){return ""Package ""+apr+"" is not present in ""+this.originalBinDir;}}if(!this.quickDeath&&this.runMutationScore){return ""Quick death option is enabled but mutation score is not"";}if(!this.runMutationScore&&this.showSurvivingMutants){return ""Show surviving mutants is enabled but mutation score is not"";}return null;}"
2400	"public void notifyWifiStatusChanged(boolean isConneted){MsgObject o=new MsgObject();o.id=WIFIUPDATE;Message msg=Message.obtain();msg.obj=o;sendMessage(msg);}"
2401	"public GroovyProposalTypeSearchRequestor(ContentAssistContext context,JavaContentAssistInvocationContext javaContext,int exprStart,int replaceLength,NameLookup nameLookup,IProgressMonitor monitor){this.context=context;this.offset=exprStart;this.javaContext=javaContext;Assert.isNotNull(javaContext.getCoreContext());this.module=context.unit.getModuleNode();this.unit=context.unit;this.replaceLength=replaceLength;this.actualCompletionPosition=context.completionLocation;this.monitor=monitor;this.nameLookup=nameLookup;this.isImport=context.location==ContentAssistLocation.IMPORT;this.contextOnly=context.location==ContentAssistLocation.METHOD_CONTEXT;this.shouldAcceptConstructors=(context.location==ContentAssistLocation.CONSTRUCTOR||context.location==ContentAssistLocation.METHOD_CONTEXT);this.completionExpression=(context.location==ContentAssistLocation.METHOD_CONTEXT?((MethodInfoContentAssistContext)context).methodName:context.completionExpression);this.groovyRewriter=new GroovyImportRewriteFactory(this.unit,this.module);this.options=new AssistOptions(javaContext.getProject().getOptions(true));try{this.allTypesInUnit=this.unit.getAllTypes();}catch(JavaModelException e){GroovyContentAssist.logError(""Problem with type completion"",e);this.allTypesInUnit=new IType[0];}}"
2402	"@Override public Number getNumber(String key){Object value=getObject(key);if(value!=null&&value instanceof Boolean){return new Integer(value==Boolean.TRUE?1:0);}else {return cast(value,Number.class);}}"
2403	"private void setAvatar(String path){if(!path.equals("""")){loadBitmap(path,image);}}"
2404	"public static ExprToken from(Tokenizable line){line.skipWS();if(!line.hasMore()){return null;}int mark=line.at();char c=line.nextChar();if(Character.isJavaIdentifierStart(c)){return new ExprToken(IDENTIFIER,ValidIdentifierToken.from(line));}else {if(c=='""'||c=='\''){String tok=StringToken.from(line);if(tok==null){return null;}return new ExprToken(STRING,tok);}else {if(Character.isDigit(c)||c=='.'&&line.still(1)&&Character.isDigit(line.charAt(1))){return new ExprToken(NUMBER,NumberToken.from(line));}else {if(""()[]{}.,"".indexOf(c)!=-1){line.advance();return new ExprToken(PUNC,line.fromMark(mark));}else {while(""~!$%^&|*/+-=:<>"".indexOf(line.nextChar())!=-1){line.advance();}if(line.at()==mark){return null;}return new ExprToken(SYMBOL,line.fromMark(mark));}}}}}"
2405	"private void handleFrameShiftCase(){if(so.overlapsWithSpliceDonorSite(changeInterval)){varType=VariantType.SPLICE_DONOR;}else {if(so.overlapsWithSpliceAcceptorSite(changeInterval)){varType=VariantType.SPLICE_ACCEPTOR;}else {if(so.overlapsWithSpliceRegion(changeInterval)){varType=VariantType.SPLICE_REGION;}else {if(so.overlapsWithTranslationalStopSite(changeInterval)){varType=VariantType.STOPLOSS;}else {varType=VariantType.FS_DELETION;}}}}while(aaChange.ref.length()>0&&aaChange.ref.charAt(0)==varAASeq.charAt(aaChange.pos)){aaChange=aaChange.shiftRight();}char wtAA=wtAASeq.charAt(aaChange.pos);char varAA=varAASeq.charAt(aaChange.pos);int delta=(wtAA=='*')?0:1;String suffix=""*?"";if(varAAStopPos>=0){int stopCodonOffset=varAAStopPos-aaChange.pos+delta;suffix=String.format(""*%d"",stopCodonOffset);}if(varType==VariantType.STOPLOSS){protAnno=String.format(""p.*%d%sext%s"",aaChange.pos+1,t.toLong(varAA),suffix);}else {protAnno=String.format(""p.%s%d%sfs%s"",t.toLong(wtAA),aaChange.pos+1,t.toLong(varAA),suffix);}}"
2406	"@Override void load(Transaction tran){if(tran!=null){addString(tran.getMemo());}}"
2407	"public void evaluateMappingSetProjection(MappingEvaluatorParams<V,D,T,F> params,Task task,OperationResult result) throws ExpressionEvaluationException,ObjectNotFoundException,SchemaException,CommunicationException,ConfigurationException,SecurityViolationException{String mappingDesc=params.getMappingDesc();LensElementContext<T> targetContext=params.getTargetContext();PrismObjectDefinition<T> targetObjectDefinition=targetContext.getObjectDefinition();ItemPath defaultTargetItemPath=params.getDefaultTargetItemPath();Map<ItemPath,MappingOutputStruct<V>> outputTripleMap=new HashMap<>();XMLGregorianCalendar nextRecomputeTime=null;Collection<MappingType> mappingTypes=params.getMappingTypes();Collection<Mapping<V,D>> mappings=new ArrayList<>(mappingTypes.size());for(MappingType mappingType : mappingTypes){Mapping.Builder<V,D> mappingBuilder=mappingFactory.createMappingBuilder(mappingType,mappingDesc);String mappingName=null;if(mappingType.getName()!=null){mappingName=mappingType.getName();}if(!mappingBuilder.isApplicableToChannel(params.getContext().getChannel())){LOGGER.trace(""Mapping {} not applicable to channel, skipping {}"",mappingName,params.getContext().getChannel());continue;}mappingBuilder.now(params.getNow());if(defaultTargetItemPath!=null&&targetObjectDefinition!=null){D defaultTargetItemDef=targetObjectDefinition.findItemDefinition(defaultTargetItemPath);mappingBuilder.defaultTargetDefinition(defaultTargetItemDef);mappingBuilder.defaultTargetPath(defaultTargetItemPath);}else {mappingBuilder.defaultTargetDefinition(params.getTargetItemDefinition());mappingBuilder.defaultTargetPath(defaultTargetItemPath);}mappingBuilder.targetContext(targetObjectDefinition);if(params.getSourceContext()!=null){mappingBuilder.sourceContext(params.getSourceContext());}mappingBuilder=params.getInitializer().initialize(mappingBuilder);Mapping<V,D> mapping=mappingBuilder.build();Boolean timeConstraintValid=mapping.evaluateTimeConstraintValid(task,result);if(params.getEvaluateCurrent()!=null){if(params.getEvaluateCurrent()&&!timeConstraintValid){LOGGER.trace(""Mapping {} is non-current, but evulating current mappings, skipping {}"",mappingName,params.getContext().getChannel());continue;}if(!params.getEvaluateCurrent()&&timeConstraintValid){LOGGER.trace(""Mapping {} is current, but evulating non-current mappings, skipping {}"",mappingName,params.getContext().getChannel());continue;}}mappings.add(mapping);}boolean hasFullTargetObject=params.hasFullTargetObject();PrismObject<T> aPrioriTargetObject=params.getAPrioriTargetObject();LOGGER.trace(""Going to process {} mappings for {}"",mappings.size(),mappingDesc);for(Mapping<V,D> mapping : mappings){if(mapping.getStrength()==MappingStrengthType.WEAK){continue;}ItemPath mappingOutputPath=mapping.getOutputPath();if(params.isFixTarget()&&mappingOutputPath!=null&&defaultTargetItemPath!=null&&!mappingOutputPath.equivalent(defaultTargetItemPath)){throw new ExpressionEvaluationException(""Target cannot be overridden in ""+mappingDesc);}if(params.getAPrioriTargetDelta()!=null&&mappingOutputPath!=null){ItemDelta<?,?> aPrioriItemDelta=params.getAPrioriTargetDelta().findItemDelta(mappingOutputPath);if(mapping.getStrength()!=MappingStrengthType.STRONG){if(aPrioriItemDelta!=null&&!aPrioriItemDelta.isEmpty()){continue;}}}evaluateMapping(mapping,params.getContext(),task,result);PrismValueDeltaSetTriple<V> mappingOutputTriple=mapping.getOutputTriple();if(LOGGER.isTraceEnabled()){LOGGER.trace(""Output triple of mapping {}\n{}"",mapping.getContextDescription(),mappingOutputTriple==null?null:mappingOutputTriple.debugDump(1));}if(mappingOutputTriple!=null){MappingOutputStruct<V> mappingOutputStruct=outputTripleMap.get(mappingOutputPath);if(mappingOutputStruct==null){mappingOutputStruct=new MappingOutputStruct<>();outputTripleMap.put(mappingOutputPath,mappingOutputStruct);}if(mapping.getStrength()==MappingStrengthType.STRONG){mappingOutputStruct.setStrongMappingWasUsed(true);}PrismValueDeltaSetTriple<V> outputTriple=mappingOutputStruct.getOutputTriple();if(outputTriple==null){mappingOutputStruct.setOutputTriple(mappingOutputTriple);}else {outputTriple.merge(mappingOutputTriple);}}}if(params.isEvaluateWeak()){for(Mapping<V,D> mapping : mappings){if(mapping.getStrength()!=MappingStrengthType.WEAK){continue;}ItemPath mappingOutputPath=mapping.getOutputPath();if(params.isFixTarget()&&mappingOutputPath!=null&&defaultTargetItemPath!=null&&!mappingOutputPath.equivalent(defaultTargetItemPath)){throw new ExpressionEvaluationException(""Target cannot be overridden in ""+mappingDesc);}MappingOutputStruct<V> mappingOutputStruct=outputTripleMap.get(mappingOutputPath);if(mappingOutputStruct==null){mappingOutputStruct=new MappingOutputStruct<>();outputTripleMap.put(mappingOutputPath,mappingOutputStruct);}PrismValueDeltaSetTriple<V> outputTriple=mappingOutputStruct.getOutputTriple();if(outputTriple!=null){continue;}Item<V,D> aPrioriTargetItem=null;if(aPrioriTargetObject!=null&&mappingOutputPath!=null){aPrioriTargetItem=aPrioriTargetObject.findItem(mappingOutputPath);}if(hasNoValue(aPrioriTargetItem)){mappingOutputStruct.setWeakMappingWasUsed(true);evaluateMapping(mapping,params.getContext(),task,result);PrismValueDeltaSetTriple<V> mappingOutputTriple=mapping.getOutputTriple();if(mappingOutputTriple!=null){if(!hasFullTargetObject&&params.getTargetLoader()!=null){if(!params.getTargetLoader().isLoaded()){aPrioriTargetObject=params.getTargetLoader().load(""weak mapping"",task,result);LOGGER.trace(""Loaded object because of weak mapping: {}"",aPrioriTargetObject);hasFullTargetObject=true;}}if(aPrioriTargetObject!=null&&mappingOutputPath!=null){aPrioriTargetItem=aPrioriTargetObject.findItem(mappingOutputPath);}if(!hasNoValue(aPrioriTargetItem)){continue;}if(outputTriple==null){mappingOutputStruct.setOutputTriple(mappingOutputTriple);}else {outputTriple.merge(mappingOutputTriple);}}}}}MappingOutputProcessor<V> processor=params.getProcessor();for(Entry<ItemPath,MappingOutputStruct<V>> outputTripleMapEntry : outputTripleMap.entrySet()){ItemPath mappingOutputPath=outputTripleMapEntry.getKey();MappingOutputStruct<V> mappingOutputStruct=outputTripleMapEntry.getValue();PrismValueDeltaSetTriple<V> outputTriple=mappingOutputStruct.getOutputTriple();boolean defaultProcessing=true;if(processor!=null){LOGGER.trace(""Executing processor to process mapping evaluation results: {}"",processor);defaultProcessing=processor.process(mappingOutputPath,mappingOutputStruct);}if(defaultProcessing){if(outputTriple==null){LOGGER.trace(""{} expression resulted in null triple for {}, skipping"",mappingDesc,targetContext);continue;}ItemDefinition targetItemDefinition=null;if(mappingOutputPath!=null){targetItemDefinition=targetObjectDefinition.findItemDefinition(mappingOutputPath);if(targetItemDefinition==null){throw new SchemaException(""No definition for item ""+mappingOutputPath+"" in ""+targetObjectDefinition);}}else {targetItemDefinition=params.getTargetItemDefinition();}ItemDelta<V,D> targetItemDelta=targetItemDefinition.createEmptyDelta(mappingOutputPath);Item<V,D> aPrioriTargetItem=null;if(aPrioriTargetObject!=null){aPrioriTargetItem=aPrioriTargetObject.findItem(mappingOutputPath);}if(targetContext.isAdd()){Collection<V> nonNegativeValues=outputTriple.getNonNegativeValues();if(nonNegativeValues==null||nonNegativeValues.isEmpty()){LOGGER.trace(""{} resulted in null or empty value for {}, skipping"",mappingDesc,targetContext);continue;}targetItemDelta.setValuesToReplace(PrismValue.cloneCollection(nonNegativeValues));}else {Collection<V> valuesToReplace;if(hasFullTargetObject&&mappingOutputStruct.isStrongMappingWasUsed()){valuesToReplace=outputTriple.getNonNegativeValues();}else {valuesToReplace=outputTriple.getPlusSet();}if(LOGGER.isTraceEnabled()){LOGGER.trace(""{}: hasFullTargetObject={}, isStrongMappingWasUsed={}, valuesToReplace={}"",new Object{mappingDesc,hasFullTargetObject,mappingOutputStruct.isStrongMappingWasUsed(),valuesToReplace});}if(valuesToReplace!=null&&!valuesToReplace.isEmpty()){if(hasFullTargetObject&&targetContext.isFresh()&&aPrioriTargetItem!=null){Collection<V> valuesPresent=aPrioriTargetItem.getValues();if(PrismValue.equalsRealValues(valuesPresent,valuesToReplace)){LOGGER.trace(""{} resulted in existing values for {}, skipping creation of a delta"",mappingDesc,targetContext);continue;}}targetItemDelta.setValuesToReplace(PrismValue.cloneCollection(valuesToReplace));}else {if(outputTriple.hasMinusSet()){LOGGER.trace(""{} resulted in null or empty value for {} and there is a minus set, resetting it (replace with empty)"",mappingDesc,targetContext);targetItemDelta.setValueToReplace();}else {LOGGER.trace(""{} resulted in null or empty value for {}, skipping"",mappingDesc,targetContext);}}}if(targetItemDelta.isEmpty()){continue;}LOGGER.trace(""{} adding new delta for {}: {}"",mappingDesc,targetContext,targetItemDelta);targetContext.swallowToSecondaryDelta(targetItemDelta);}}for(Mapping<V,D> mapping : mappings){XMLGregorianCalendar mappingNextRecomputeTime=mapping.getNextRecomputeTime();if(mappingNextRecomputeTime!=null){if(nextRecomputeTime==null||nextRecomputeTime.compare(mappingNextRecomputeTime)==DatatypeConstants.GREATER){nextRecomputeTime=mappingNextRecomputeTime;}}}if(nextRecomputeTime!=null){boolean alreadyHasTrigger=false;if(params.getAPrioriTargetObject()!=null){for(TriggerType trigger : params.getAPrioriTargetObject().asObjectable().getTrigger()){if(RecomputeTriggerHandler.HANDLER_URI.equals(trigger.getHandlerUri())&&nextRecomputeTime.equals(trigger.getTimestamp())){alreadyHasTrigger=true;break;}}}if(!alreadyHasTrigger){PrismContainerDefinition<TriggerType> triggerContDef=targetObjectDefinition.findContainerDefinition(ObjectType.F_TRIGGER);ContainerDelta<TriggerType> triggerDelta=triggerContDef.createEmptyDelta(new ItemPath(ObjectType.F_TRIGGER));PrismContainerValue<TriggerType> triggerCVal=triggerContDef.createValue();triggerDelta.addValueToAdd(triggerCVal);TriggerType triggerType=triggerCVal.asContainerable();triggerType.setTimestamp(nextRecomputeTime);triggerType.setHandlerUri(RecomputeTriggerHandler.HANDLER_URI);targetContext.swallowToSecondaryDelta(triggerDelta);}}}"
2408	"@Override public boolean evaluate(ItemInfo info,View view){return info==item;}"
2409	"public void compute(){try{initVars();System.out.println(""### BEGIN ###"");for(int i=1;i<=30;i++){if(i>=beginDay&&i<=endDay){for(int j=1;j<=24;j++){if(i==beginDay&&(j>=8&&j<16)){if(j!=beginHour&&j>=beginHour){resultHours++;}else {for(int x=1;x<=60;x++){if(x>beginMinute){resultMinutes++;}}}}if(i>beginDay&&i<endDay&&(j>=8&&j<16)){resultHours++;}if(i==endDay&&(j>=8&&j<=endHour&&j<16)){if(j!=endHour){resultHours++;}else {for(int x=1;x<=60;x++){if(x<=endMinute){resultMinutes++;}}}}}}}result.setText(resultHours+""h ""+resultMinutes+""min"");resultHours=0;resultMinutes=0;}catch(Exception e){result.setText(""enter valid date!"");System.out.println(""### ERROR ###"");}System.out.println(""### END ###"");}"
2410	"public boolean mousePressed(Minecraft mc,int x,int y){if(y>yPosition&&y<(yPosition+height)){this.dragging=true;return true;}else {return false;}}"
2411	"public void onEnable(){pdfFile=this.getDescription();logger.log(Level.INFO,String.format(""Loading %s version %s ..."",pdfFile.getName(),pdfFile.getVersion()));try{ItemDB.load(BSConfig.pluginFolder);}catch(Exception e){Log(Level.SEVERE,""cannot load items db: closing plugin"",e,false);this.setEnabled(false);return ;}if(config==null){config=new BSConfig();if(config.checkUpdates){if(config.autoUpdate){if(!Updater.isUpToDate(true)){Log(""Downloading & Installing Update"");if(Updater.downloadUpdate()){Log(""Update Downloaded: Restarting Server.."");try{(new ServerReload(getServer())).start(500);}catch(Exception e){this.getServer().reload();}return ;}}}else {Updater.check();}}}else {config.load();}pricelist=new BSPriceList();transactions=new BSTransactionLog();stock=new BSItemStock();if(!pricelist.load()){Log(Level.SEVERE,""cannot load pricelist: ""+pricelist.pricelistName(),false);this.setEnabled(false);return ;}else {if(!transactions.load()){Log(Level.SEVERE,""cannot load transaction log"",false);}else {if(config.useItemStock&&!stock.load()){Log(Level.SEVERE,""cannot load stock database"",false);stock=null;}}}pListener=new PluginListener(this);hookDepends();registerHelp();PluginManager pm=getServer().getPluginManager();pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.Normal,this);pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.Normal,this);pm.registerEvent(Event.Type.PLUGIN_ENABLE,pListener,Priority.Monitor,this);logger.log(Level.INFO,pdfFile.getName()+"" version ""+pdfFile.getVersion()+"" is enabled!"",new Object{pdfFile.getName(),pdfFile.getVersion()});}"
2412	"public void paintDayView(){String[] months={""January"",""February"",""March"",""April"",""May"",""June"",""July"",""August"",""September"",""October"",""November"",""December""};JPanel menuPanel=new JPanel();JPanel timePanel=new JPanel();JPanel lastAndNextPanel=new JPanel();JPanel buttonPanel=new JPanel();String recentDay=months[m.getMovedAroundCal().get(Calendar.MONTH)]+""  ""+m.getMovedAroundCal().get(Calendar.DAY_OF_MONTH);JLabel dayLabel=new JLabel(recentDay);dayLabel.setFont(new Font(""Elephant"",Font.BOLD,36));dayLabel.setHorizontalAlignment(JLabel.CENTER);dayLabel.setOpaque(false);JButton lastDayButton=new JButton(new ImageIcon(new ImageIcon(this.getClass().getResource(""/img/last.png"")).getImage()));beautifyNextAndLastButton(lastDayButton);JButton nextDayButton=new JButton(new ImageIcon(new ImageIcon(this.getClass().getResource(""/img/next.png"")).getImage()));beautifyNextAndLastButton(nextDayButton);lastDayButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    m.prevDay();    ;    calendarFrame.getContentPane().removeAll();    paintDayView();  }});nextDayButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    m.nextDay();    calendarFrame.getContentPane().removeAll();    paintDayView();  }});JButton createButton=beautifyButton(""Create"",""/img/create.png"");createButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    createEventBox();  }});JButton todayButton=beautifyButton(""Today"",""/img/today.png"");Dimension d=new Dimension(150,40);todayButton.setPreferredSize(d);todayButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    m.getMovedAroundCal().setTime(Calendar.getInstance().getTime());    calendarFrame.getContentPane().removeAll();    paintDayView();  }});JButton monthView=beautifyButton(""Month"",""/img/monthView.png"");monthView.setPreferredSize(d);monthView.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    calendarFrame.getContentPane().removeAll();    paintMonthView();    paintDays();  }});lastAndNextPanel.add(lastDayButton);lastAndNextPanel.add(nextDayButton);buttonPanel.add(createButton);buttonPanel.add(todayButton);buttonPanel.add(monthView);menuPanel.setOpaque(false);lastAndNextPanel.setOpaque(false);dayLabel.setOpaque(false);buttonPanel.setOpaque(false);BorderLayout bl=new BorderLayout();bl.setHgap(130);menuPanel.setLayout(bl);menuPanel.add(lastAndNextPanel,BorderLayout.WEST);menuPanel.add(dayLabel,BorderLayout.NORTH);menuPanel.add(buttonPanel,BorderLayout.EAST);menuPanel.setPreferredSize(new Dimension(1900,(int)menuPanel.getPreferredSize().getHeight()));JPanel contentPanel=new JPanel();Box scrollBox=Box.createVerticalBox();Box box=Box.createVerticalBox();for(int i=0;i<25;i++){JLabel l=new JLabel("" "");l.setFont(new Font(""SansSerif"",Font.PLAIN,80));scrollBox.createVerticalStrut(60);scrollBox.add(l);}JButton deleteButton=beautifyButton(""Delete"",""/img/delete.png"");deleteButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent event){    deleting=true;    if (event.getActionCommand().equals(""Cancel"")) {      deleting=false;    }    calendarFrame.getContentPane().removeAll();    paintDayView();  }});if(!deleting){int numOfNoEventBlock=0;boolean hasNoEventBlock=true;for(int i=0;i<m.getDaysArr().size();i++){boolean hasEventOnTheDay=m.getMovedAroundCal().get(Calendar.DAY_OF_MONTH)==m.getDaysArr().get(i).getDay()&&m.getMovedAroundCal().get(Calendar.MONTH)+1==m.getDaysArr().get(i).getMonth()&&m.getMovedAroundCal().get(Calendar.YEAR)==m.getDaysArr().get(i).getYear();if(hasEventOnTheDay){for(int j=0;j<m.getDaysArr().get(i).getEventsArr().size();j++){if(numOfNoEventBlock!=0){box.remove(0);numOfNoEventBlock=0;}Event currentEvent=m.getDaysArr().get(i).getEventsArr().get(j);String desc=currentEvent.getDescription();String strTime=currentEvent.getStrTime();if(allDay){strTime=""All Day"";}Color color=colorList[currentEvent.getColor()];Block block=new Block(false,0,40,1000,200,desc,strTime,color);block.setMaximumSize(new Dimension(1000,250));box.add(block);block.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent e){    updateEvent(currentEvent);  }});}hasNoEventBlock=false;continue;}else {if(hasNoEventBlock&&numOfNoEventBlock<1){Block noEventblock=new Block(false,0,40,1400,800,""No Event Has Been Scheduled Yet"","""",new Color(255,128,8));noEventblock.setMaximumSize(new Dimension(1400,850));box.add(noEventblock);hasNoEventBlock=true;numOfNoEventBlock++;}}}}else {Image cancellmg=new ImageIcon(this.getClass().getResource(""/img/cancel.png"")).getImage();for(int i=0;i<m.getDaysArr().size();i++){if(m.getMovedAroundCal().get(Calendar.DAY_OF_MONTH)==m.getDaysArr().get(i).getDay()&&m.getMovedAroundCal().get(Calendar.MONTH)+1==m.getDaysArr().get(i).getMonth()&&m.getMovedAroundCal().get(Calendar.YEAR)==m.getDaysArr().get(i).getYear()){for(int j=0;j<m.getDaysArr().get(i).getEventsArr().size();j++){deleteButton.setText(""Cancel"");deleteButton.setIcon(new ImageIcon(cancellmg));Day currentDay=m.getDaysArr().get(i);Event currentEvent=currentDay.getEventsArr().get(j);String desc=currentEvent.getDescription();String strTime=currentEvent.getStrTime();if(strTime.equals(""12:00 A.M.  -  11:45 P.M."")){strTime=""All Day"";}Color color=colorList[currentEvent.getColor()];Block block=new Block(true,0,40,1000,200,desc,strTime,color);Image deleteEventImg=new ImageIcon(getClass().getResource(""/img/deleteEvent.png"")).getImage();JButton deleteEventButton=new JButton(new ImageIcon(deleteEventImg));deleteEventButton.setBorderPainted(false);deleteEventButton.setOpaque(false);deleteEventButton.setContentAreaFilled(false);deleteEventButton.addActionListener(new ActionListener(){  public void actionPerformed(  ActionEvent arg0){    currentDay.getEventsArr().remove(currentEvent);    DB.delete(currentEvent);    calendarFrame.getContentPane().removeAll();    paintDayView();  }});block.add(deleteEventButton);deleteEventButton.setAlignmentX(Component.LEFT_ALIGNMENT);block.setMaximumSize(new Dimension(1000,250));box.add(block);}}}}buttonPanel.add(deleteButton);contentPanel.setLayout(new BorderLayout());contentPanel.add(scrollBox,BorderLayout.WEST);contentPanel.add(box,BorderLayout.CENTER);JScrollPane scrollPane=new JScrollPane(contentPanel);contentPanel.setOpaque(false);scrollPane.setOpaque(false);scrollPane.getViewport().setOpaque(false);calendarFrame.setLayout(new BorderLayout());calendarFrame.add(menuPanel,BorderLayout.NORTH);calendarFrame.add(scrollPane,BorderLayout.CENTER);calendarFrame.setVisible(true);calendarFrame.setLocationRelativeTo(null);calendarFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);}"
2413	"private void reopenFile(int attempt,IOException e) throws IOException{if(attempt>1){throw e;}acquireWriteLock();try{try{channel.close();}catch(IOException ioe){OLogManager.instance().error(this,""Error during channel close for file '""+osFile.getAbsolutePath()+""', during IO exception handling"",ioe);}try{accessFile.close();}catch(IOException ioe){OLogManager.instance().error(this,""Error during close of file '""+osFile.getAbsolutePath()+""', during IO exception handling"",ioe);}channel=null;accessFile=null;openChannel();}finally{releaseWriteLock();}}"
2414	"protected boolean consumeStart(ICharacterReader reader){return reader.read()=='\'';}"
2415	"@Override public boolean runCycle(){boolean ret=false;ret|=countDown(radd)||countDown(rmul)||countDown(rload)||countDown(rstore);for(CalcReservationStation r : radd){if(r.isBusy&&r.time<0){if(r.qj!=null&&!r.qj.isBusy){r.vj=r.qj.c.value;r.qj=null;ret=true;}if(r.qk!=null&&!r.qk.isBusy){r.vk=r.qk.c.value;r.qk=null;ret=true;}if(r.qj==null&&r.qk==null){r.time=2;}}}for(CalcReservationStation r : rmul){if(r.isBusy&&r.time<0){if(r.qj!=null&&!r.qj.isBusy){r.vj=r.qj.c.value;r.qj=null;ret=true;}if(r.qk!=null&&!r.qk.isBusy){r.vk=r.qk.c.value;r.qk=null;ret=true;}if(r.qj==null&&r.qk==null){if(r.c.op.equals(""MULD"")){r.time=10;}else {if(r.c.op.equals(""DIVD"")){r.time=40;}else {System.out.println(""Error! Undefined Operator."");}}}}}for(StoreReservationStation r : rstore){if(r.isBusy&&r.time<0){if(r.qj!=null&&!r.qj.isBusy){r.vj=r.qj.c.value;r.qj=null;ret=true;r.time=2;}}}for(FunctionUnit u : fu){if(u.r!=null&&!u.r.isBusy){u.v=u.r.c.value;u.r=null;ret=true;}}if(pc<commands.size()){Command c=commands.get(pc);if(c.op.equals(""ADDD"")||c.op.equals(""SUBD"")||c.op.equals(""MULD"")||c.op.equals(""DIVD"")){CalcReservationStation[] rs=radd;if(c.op.equals(""MULD"")||c.op.equals(""DIVD"")){rs=rmul;}for(CalcReservationStation r : rs){if(!r.isBusy){ret=true;c.issue=clk+1;pc++;r.op=c.op;r.c=c;r.isBusy=true;if(!(c.arg[0].matches(""F\\d+"")&&c.arg[1].matches(""F\\d+"")&&c.arg[2].matches(""F\\d+""))){System.out.println(""Error! Wrong Args."");}FunctionUnit tmp=fu[Integer.parseInt(c.arg[1].substring(1,c.arg[1].length()))];if(tmp.r==null){r.qj=null;r.vj=tmp.v;}else {r.qj=tmp.r;r.vj=0;}tmp=fu[Integer.parseInt(c.arg[2].substring(1,c.arg[2].length()))];if(tmp.r==null){r.qk=null;r.vk=tmp.v;}else {r.qk=tmp.r;r.vk=0;}if(r.qj==null&&r.qk==null){if(c.op.equals(""ADDD"")||c.op.equals(""SUBD"")){r.time=2;}else {if(c.op.equals(""MULD"")){r.time=10;}else {if(c.op.equals(""DIVD"")){r.time=40;}}}}else {r.time=-1;}tmp=fu[Integer.parseInt(c.arg[0].substring(1,c.arg[0].length()))];tmp.r=r;break;}}}else {if(c.op.equals(""ST"")){for(StoreReservationStation r : rstore){if(!r.isBusy){ret=true;c.issue=clk+1;pc++;r.c=c;r.isBusy=true;if(!(c.arg[0].matches(""F\\d+"")&&c.arg[1].matches(""\\d+"")&&c.arg[2].matches(""R\\d+""))){System.out.println(""Error! Wrong Args."");}r.addr=ru[Integer.parseInt(c.arg[2].substring(1,c.arg[2].length()))]+Integer.parseInt(c.arg[1]);FunctionUnit tmp=fu[Integer.parseInt(c.arg[0].substring(1,c.arg[0].length()))];if(tmp.r==null){r.qj=null;r.vj=tmp.v;r.time=-1;}else {r.qj=tmp.r;r.vj=0;r.time=2;}break;}}}else {if(c.op.equals(""LD"")){for(LoadReservationStation r : rload){if(!r.isBusy){ret=true;c.issue=clk+1;pc++;r.c=c;r.isBusy=true;if(!(c.arg[0].matches(""F\\d+"")&&c.arg[1].matches(""\\d+"")&&c.arg[2].matches(""R\\d+""))){System.out.println(""Error! Wrong Args."");}r.time=2;r.addr=ru[Integer.parseInt(c.arg[2].substring(1,c.arg[2].length()))]+Integer.parseInt(c.arg[1]);FunctionUnit tmp=fu[Integer.parseInt(c.arg[0].substring(1,c.arg[0].length()))];tmp.r=r;break;}}}else {System.out.println(""Error! issuing undefined Operator."");}}}}if(ret){clk++;}return ret;}"
2416	"private void drawBox(Graphics2D g,Rectangle2D rect){g.setColor(getLineColor());g.fill(rect);if(rect.getWidth()>4){if(decorateBoxes){int dwidth=(int)Math.round(rect.getWidth()/2.0);for(int i=0;i<dwidth;i++){g.setColor(new Color(1.0,1.0,1.0,(0.2)*(1.0-(float)i/(float)dwidth)));g.drawLine((int)Math.round(rect.getX()+i),(int)Math.round(rect.getY()),(int)Math.round(rect.getX()+i),(int)Math.round(rect.getY()+rect.getHeight()));}}g.setColor(boxOutlineColor);g.draw(rect);}}"
2417	"private void setArgumentsInternal(){for(Map.Entry<String,Integer> lEntry : mNameToIndexMap.entrySet()){ final String lArgumentName=lEntry.getKey(); final Integer lArgumentIndex=lEntry.getValue();if(mUpdatedArgumentsMap.get(lArgumentIndex)==null||mUpdatedArgumentsMap.get(lArgumentIndex)){try{Argument lArgument=mIndexToArgumentMap.get(lArgumentIndex);if(lArgument==null){ final Number lDefaultValue=mDefaultArgumentsMap.get(lArgumentName);if(lDefaultValue!=null){lArgument=new Argument(lDefaultValue);}}if(lArgument==null){throw new ClearCLArgumentMissingException(this,lArgumentName,lArgumentIndex);}if(lArgument.argument instanceof ClearCLLocalMemory){ @SuppressWarnings(""unused"") final ClearCLLocalMemory lLocalMemory=(ClearCLLocalMemory)lArgument.argument;getBackend().setKernelArgument(this.getPeerPointer(),lArgumentIndex,lArgument.argument);}else {getBackend().setKernelArgument(this.getPeerPointer(),lArgumentIndex,lArgument.argument);}}catch(Throwable e){throw new ClearCLException(String.format(""problem while setting argument '%s' at index %d \n"",lArgumentName,lArgumentIndex),e);}}}}"
2418	"@Override public void serverTick(){tickCounter++;if(tickCounter>TickManager.ticksPerSec*5){over();}if(tickCounter>TickManager.ticksPerSec*2&&tickCounter%(TickManager.ticksPerSec/2)==0){float dist=owner.getDistance(target);DungeonWizardProjectile1 p=(DungeonWizardProjectile1)ProjectileData.getProjectile(""dungeonwizard1"",level,owner.x,owner.y,target.x,target.y,100,(int)(dist+150),damage,0,owner);p.target=target;p.moveDist(60);level.entityManager.addProjectile(p);level.getServer().network.sendToClientsAt(new PacketSpawnProjectile(p),level);}}"
2419	"private List<Chunk> createClientAndSendReq(RegionTask regionTask){List<KeyRange> ranges=regionTask.getRanges();TiRegion region=regionTask.getRegion();Store store=regionTask.getStore();RegionStoreClient client;client=RegionStoreClient.create(region,store,session);try{SelectResponse resp=client.coprocess(request,ranges);if(resp==null){eof=true;return null;}return resp.getChunksList();}catch(GrpcRegionStaleException e){List<Chunk> resultChunk=new ArrayList<>();List<RegionTask> splitTasks=RangeSplitter.newSplitter(session.getRegionManager()).splitRangeByRegion(ranges);for(RegionTask t : splitTasks){List<Chunk> resFromCurTask=createClientAndSendReq(t);if(resFromCurTask!=null){resultChunk.addAll(resFromCurTask);}}return resultChunk;}}"
2420	"public int getGrade(){if(firstRun||(readyToRefresh&&isModified)){gaid=helper.getGradebookAssignmentId(gradebookId,assignment);}return grade;}"
2421	"public final void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException,ServletException{if(!preFilter(servletRequest,servletResponse,filterChain)){return ;} final HttpServletRequest request=(HttpServletRequest)servletRequest; final HttpServletResponse response=(HttpServletResponse)servletResponse; final String ticket=retrieveTicketFromRequest(request);if(CommonUtils.isNotBlank(ticket)){logger.debug(""Attempting to validate ticket: {}"",ticket);try{ final Assertion assertion=this.ticketValidator.validate(ticket,constructServiceUrl(request,response));logger.debug(""Successfully authenticated user: {}"",assertion.getPrincipal().getName());request.setAttribute(CONST_CAS_ASSERTION,assertion);if(this.useSession){request.getSession().setAttribute(CONST_CAS_ASSERTION,assertion);}onSuccessfulValidation(request,response,assertion);if(this.redirectAfterValidation){logger.debug(""Redirecting after successful ticket validation."");response.sendRedirect(constructServiceUrl(request,response));return ;}}catch(IOException|TicketValidationException e){logger.debug(e.getMessage(),e);onFailedValidation(request,response);if(this.exceptionOnValidationFailure){throw new ServletException(e);}response.sendError(HttpServletResponse.SC_FORBIDDEN,e.getMessage());return ;}}if(!(checkAccessToken(request,response))){return ;}filterChain.doFilter(request,response);}"
2422	"@Override public void onResponse(String response){super.onResponse(response);if(TextUtils.isEmpty(response)){return ;}BaseBean siteTable=new Gson().fromJson(response,BaseBean.class);if(siteTable.id>0){Bundle bundle=new Bundle();bundle.putInt(""type"",1);ConstentNew.GAMER_TABLE_MONEY+=money;AppPrefrence.setAmount(context,(AppPrefrence.getAmount(context)-money)<0?0:(AppPrefrence.getAmount(context)-money));if(popInterfacer!=null){popInterfacer.OnConfirm(flag,bundle);}}else {Tools.toastMsgCenter(context,siteTable.msg);}}"
2423	"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){boolean removed=false;for(int i=0;i<instances.size();i++){AirCombo combo=instances.get(i);if(combo.getPlayer().equals(player)){continue;}if(ability.equalsIgnoreCase(""Twister"")&&combo.ability.equalsIgnoreCase(""Twister"")){if(combo.currentLoc!=null&&Math.abs(combo.currentLoc.distance(loc))<=radius){instances.remove(combo);removed=true;}}else {if(ability.equalsIgnoreCase(""AirStream"")&&combo.ability.equalsIgnoreCase(""AirStream"")){if(combo.currentLoc!=null&&Math.abs(combo.currentLoc.distance(loc))<=radius){instances.remove(combo);removed=true;}}else {if(ability.equalsIgnoreCase(""AirSweep"")&&combo.ability.equalsIgnoreCase(""AirSweep"")){for(int j=0;j<combo.tasks.size();j++){FireComboStream fs=(FireComboStream)combo.tasks.get(j);if(fs.getLocation()!=null&&Math.abs(fs.getLocation().distance(loc))<=radius){fs.remove();removed=true;}}}}}}return removed;}"
2424	"static boolean checkDimensionvalueUnit(Sheet sheet,CellRangeAddress firstCellofTable,ArrayList<Dimensionvalue> horizonIndicators,ArrayList<Dimensionvalue> verticalIndicators){int zeroRow=firstCellofTable.getLastRow();int unitColomn=firstCellofTable.getLastColumn()+1;if(horizonIndicators.get(1)!=null&&horizonIndicators.get(1).getValueName().equals(""??"")){for(int rowIndex=zeroRow+1;rowIndex<=sheet.getLastRowNum();rowIndex++){int index=rowIndex-zeroRow;if(verticalIndicators.get(index)!=null){String unit=ExcelUtil.getCellStringValue(sheet,rowIndex,unitColomn,false);if(unit!=null){unit=unit.replaceAll(""[\\s\\u00A0]"","""");verticalIndicators.get(index).setUnit(unit);}}}horizonIndicators.remove(1);firstCellofTable.setLastColumn(unitColomn);}int zeroColomn=firstCellofTable.getLastColumn();int verticalIndicatorUnitRow=firstCellofTable.getLastRow()+1;if(verticalIndicators.get(1)!=null&&verticalIndicators.get(1).getValueName().equals(""??"")){Row row=sheet.getRow(verticalIndicatorUnitRow);for(Cell cell : row){int index=cell.getColumnIndex()-zeroColomn;if(index>0&&index<horizonIndicators.size()){String unit=ExcelUtil.getCellStringValue(sheet,cell.getRowIndex(),cell.getColumnIndex(),false);if(unit!=null){unit=unit.replaceAll(""[\\s\\u00A0]"","""");horizonIndicators.get(index).setUnit(unit);}}}verticalIndicators.remove(1);firstCellofTable.setLastRow(verticalIndicatorUnitRow);}return false;}"
2425	"private void transfer(Entry[] newTable){for(Entry<K,V> entry : table){if(entry==null){continue;}int index=calcIndex(entry.getKey());if(checkEquals(index,entry.getKey(),newTable)){newTable[index]=entry;}else {index=findEmpty(index,entry.getKey(),newTable);newTable[index]=entry;}}}"
2426	"@Override public Kunde erstelleKunde(String firstname,String lastname,String passwort,String address_Street,String address_Zip,String address_Town,Person p) throws MaxIDsException,AccessRestrictedException,InvalidPersonDataException,RemoteException{if(istMitarbeiter(p)||p==null){return kv.erstelleKunde(firstname,lastname,passwort,address_Street,address_Zip,address_Town,wv.erstelleWarenkorb());}else {throw new AccessRestrictedException(p,""\""Kunde anlegen\"""");}}"
2427	"public void add(boolean hadDisplay){if(this.displayInfo==null&&this.lastMapUUID!=null){this.displayInfo=getInfo(this.lastMapUUID.getUUID());this.displayInfo.itemFrames.add(this);}if(hadDisplay&&this.isDisplayTile&&!this.displayInfo.sessions.isEmpty()){this.displayInfo.resetDisplayRequest=true;}}"
2428	"public Location getLocation(){try{locationManager=(LocationManager)mContext.getSystemService(LOCATION_SERVICE);isGPSEnabled=locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);isNetworkEnabled=locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);if(!isGPSEnabled&&!isNetworkEnabled){}else {this.isGetLocation=true;if(isNetworkEnabled){locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,MIN_TIME_BW_UPDATES,MIN_DISTANCE_CHANGE_FOR_UPDATES,this);if(locationManager!=null){location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);if(location!=null){lat=location.getLatitude();lon=location.getLongitude();}}}if(isGPSEnabled){if(location==null){locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,MIN_TIME_BW_UPDATES,MIN_DISTANCE_CHANGE_FOR_UPDATES,this);if(locationManager!=null){location=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);if(location!=null){lat=location.getLatitude();lon=location.getLongitude();}}}}}}catch(Exception e){e.printStackTrace();}return location;}"
2429	"@Override public Serializer from(T object,String alias){this.object=object;if(alias==null){Class<?> type=getTypeOf(object);String name=getFieldName(type);if(isCollection(object.getClass())){name=name+""List"";}treeFields.setName(name);}else {treeFields.setName(alias);}rootClass=getTypeOf(object);if(!isNonPojo(rootClass)){includePrimitiveFields(rootClass,null);}return this;}"
2430	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_item);MediaProvider.checkPermission(this);view_only=getIntent().getBooleanExtra(VIEW_ONLY,false);if(!view_only&&Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP&&savedInstanceState==null){postponeEnterTransition();setEnterSharedElementCallback(sharedElementCallback);getWindow().getSharedElementEnterTransition().addListener(transitionListener);}toolbar=findViewById(R.id.toolbar);setSupportActionBar(toolbar); final ActionBar actionBar=getSupportActionBar();if(actionBar!=null){actionBar.setDisplayHomeAsUpEnabled(true);}bottomBar=findViewById(R.id.bottom_bar);if(view_only){ImageView delete=findViewById(R.id.delete_button);((View)delete.getParent()).setVisibility(View.GONE);} final ViewGroup rootView=findViewById(R.id.root_view);if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.KITKAT_WATCH){rootView.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener(){  @Override @RequiresApi(api=Build.VERSION_CODES.KITKAT_WATCH) public WindowInsets onApplyWindowInsets(  View view,  WindowInsets insets){    toolbar.setPadding(toolbar.getPaddingStart() + insets.getSystemWindowInsetLeft(),toolbar.getPaddingTop() + insets.getSystemWindowInsetTop(),toolbar.getPaddingEnd() + insets.getSystemWindowInsetRight(),toolbar.getPaddingBottom());    bottomBar.setPadding(bottomBar.getPaddingStart() + insets.getSystemWindowInsetLeft(),bottomBar.getPaddingTop(),bottomBar.getPaddingEnd() + insets.getSystemWindowInsetRight(),bottomBar.getPaddingBottom() + insets.getSystemWindowInsetBottom());    rootView.setOnApplyWindowInsetsListener(null);    return insets.consumeSystemWindowInsets();  }});}else {rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){  @Override public void onGlobalLayout(){    int[] screenSize=Util.getScreenSize(ItemActivity.this);    int[] windowInsets=new int[]{Math.abs(screenSize[0] - rootView.getLeft()),Math.abs(screenSize[1] - rootView.getTop()),Math.abs(screenSize[2] - rootView.getRight()),Math.abs(screenSize[3] - rootView.getBottom())};    toolbar.setPadding(toolbar.getPaddingStart() + windowInsets[0],toolbar.getPaddingTop() + windowInsets[1],toolbar.getPaddingEnd() + windowInsets[2],toolbar.getPaddingBottom());    bottomBar.setPadding(bottomBar.getPaddingStart() + windowInsets[0],bottomBar.getPaddingTop(),bottomBar.getPaddingEnd() + windowInsets[2],bottomBar.getPaddingBottom() + windowInsets[3]);    rootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);  }});}setSystemUiFlags();if(!view_only){String path;if(savedInstanceState!=null&&savedInstanceState.containsKey(ALBUM_PATH)){path=savedInstanceState.getString(ALBUM_PATH);}else {path=getIntent().getStringExtra(ALBUM_PATH);}MediaProvider.loadAlbum(this,path,new MediaProvider.OnAlbumLoadedCallback(){  @Override public void onAlbumLoaded(  Album album){    ItemActivity.this.album=album;    ItemActivity.this.onAlbumLoaded(savedInstanceState);  }});}else {album=getIntent().getExtras().getParcelable(ALBUM);onAlbumLoaded(savedInstanceState);}}"
2431	"private void decimalPointActionPerformed(java.awt.event.ActionEvent evt){int i;String orig;orig=value.getText();for(i=0;i<orig.length()&&orig.charAt(i)!='.';++i){;}if(i==orig.length()){value.setText(orig+'.');}}"
2432	"private void initCfg(){System.out.println(""Loading configuration file..."");try{cfg=new Config(configDir);}catch(ConfigurationException e){}if(uuid!=null){System.out.println(""Configuration file loaded."");}else {System.err.println(""Please initialize the Config with Nerv before proceeding!"");}}"
2433	"private List<Complication> getComplications(int firstIndex,int lastIndex,List<Complication> complications,Row row,int dbIndex){for(int excelCellNumber=firstIndex;excelCellNumber<=lastIndex;excelCellNumber++){Cell complicationCell=row.getCell(excelCellNumber);if(complicationCell!=null&&complicationCell.getNumericCellValue()==1){Complication complication=complicationService.getById(dbIndex);complication.setDescription(new ArrayList<>(Arrays.asList(complicationDescriptionService.getById(dbIndex))));complications.add(complication);}dbIndex++;}return complications;}"
2434	"public void checkIfHabitsAreAvailable(){boolean habitsAvailable=mHabitDatabase.getNumberOfHabits()!=0;mCurrentSessionCard.setVisibility(habitsAvailable?View.VISIBLE:View.GONE);ui.mainInclude.habitRecyclerView.setVisibility(habitsAvailable?View.VISIBLE:View.GONE);findViewById(R.id.no_habits_available_layout).setVisibility(habitsAvailable?View.GONE:View.VISIBLE);}"
2435	"@Override public boolean equals(Object other){return (other instanceof Integer&&other==i)||(other instanceof ModifiableIntegerProperty&&((ModifiableIntegerProperty)other).i==i);}"
2436	"@Override public boolean onMediaButtonEvent(Intent mediaButtonIntent){Log.v(TAG,""Got media button intent"");KeyEvent event=mediaButtonIntent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);if(event.getAction()==KeyEvent.ACTION_UP){switch (event.getKeyCode()){case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE :if(controllerInput){handlePlayRequest();}else {if(isPlaying()){handlePauseRequest();}else {handlePlayRequest();}}return true;case KeyEvent.KEYCODE_MEDIA_PLAY :onPlay();return true;case KeyEvent.KEYCODE_MEDIA_NEXT :onSkipToNext();return true;case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD :onFastForward();return true;case KeyEvent.KEYCODE_MEDIA_REWIND :onRewind();return true;case KeyEvent.KEYCODE_MEDIA_PREVIOUS :onSkipToPrevious();return true;case KeyEvent.KEYCODE_MEDIA_STOP :onPause();return true;default :return false;}}else {return false;}}"
2437	"@Override public void onConnect(Node node){if(node.host() instanceof Context){node.connect(oc_fs.node());}}"
2438	"private String validateReadRequest(Protocol.ReadRequest request){if(mRequest==null){return """";}if(request.getCancel()){if(request.getId()!=mRequest.mId){return String.format(""The IDs do not match: [actual: %d, expected: %d]."",mRequest.mId,request.getId());}return """";}return String.format(""Received a read request %s on a busy channel (used by block %d)."",request,mRequest.mId);}"
2439	"private String writeElement(XMLStreamReader reader,XMLStreamWriter writer,StringWriter sw) throws XMLStreamException{Vertex vertex=new Vertex();vertex.type=reader.getLocalName();vertex.contentPaths=new HashMap<String,List<Object>>();vertex.referencePaths=new HashMap<String,List<String>>();vertex.id=reader.getAttributeValue(null,""id"");Set<String> idrefSet=new HashSet<String>();ArrayDeque<String> path=new ArrayDeque<String>();Map<String,String> vertNS=new HashMap<String,String>();boolean done=false;String pathString=null;initElement(reader,writer,vertNS,path,vertex);reader.next();while(reader.hasNext()){switch (reader.getEventType()){case XMLEvent.START_ELEMENT :String localName=reader.getLocalName();path.add(localName);pathString=toString(path);if(stixElementMap.containsKey(localName)&&!reader.getNamespaceURI().equals(""http://stix.mitre.org/TTP-1"")){String idref=reader.getAttributeValue(null,""idref"");if(idref==null){String prefix=reader.getPrefix();String namespaceURI=reader.getNamespaceURI();vertNS.put(prefix,namespaceURI);StringWriter newSw=new StringWriter();XMLStreamWriter newWriter=outputFactory.createXMLStreamWriter(newSw);idref=(localName.equals(""Observable""))?writeObservable(reader,newWriter,newSw):writeElement(reader,newWriter,newSw);addToReferenceList(vertex.referencePaths,pathString,idref);writer.writeEmptyElement(prefix,localName,namespaceURI);writeIdrefAttribute(writer,idref,vertNS);if(!localName.equals(""Observable"")){writer.writeAttribute(""xsi"",""http://www.w3.org/2001/XMLSchema-instance"",""type"",stixTypes.get(localName));Namespace ns=stixElementMap.get(localName);prefix=ns.getPrefix();namespaceURI=ns.getURI();vertNS.put(prefix,namespaceURI);}path.removeLast();}else {addToReferenceList(vertex.referencePaths,pathString,idref);writeStartElement(reader,writer,localName,vertNS);}}else {writeStartElement(reader,writer,localName,vertNS);}break;case XMLEvent.END_ELEMENT :done=writeEndElement(writer,path);break;case XMLEvent.CHARACTERS :writeCharacters(reader,writer,pathString,vertex.contentPaths);break;}if(done){break;}else {reader.next();}}vertex.xml=sw.toString().replaceFirst("" "",toString(vertNS));vertices.put(vertex.id,vertex);return vertex.id;}"
2440	"public void removeVolumes(List<URI> volumes){if(_volumes!=null){for(URI uri : volumes){_volumes.remove(uri.toString());}}}"
2441	"public boolean isConnected(){return !mCommandSocket.isClosed()&&mCommandSocket.isConnected();}"
2442	"private void collisionWithBrickBlock(){if(!player.isCanJump()){for(Node block : bricks){if(block.getTranslateY()+BLOCK_SIZE_HEIGHT+1==player.getTranslateY()&&player.getTranslateX()<block.getTranslateX()+20&&player.getTranslateX()>=block.getTranslateX()-20&&player.isGrewUp()){gameRoot.getChildren().remove(block);platforms.remove(block);block=null;}}}}"
2443	"@Override public void run(){while(!shutdownSignal){try{Schedule next=workQueue.remove();List<Schedule> children=next.div(checkBest);workQueue.addAll(children);}catch(Exception e){}}System.out.println(""Shutting down: ""+workQueue.size());}"
2444	"public static void markInActiveUnManagedVolumes(StorageSystem storageSystem,Set<URI> discoveredUnManagedVolumes,DbClient dbClient,PartitionManager partitionManager){_log.info("" -- Processing {} discovered UnManaged Volumes Objects from -- {}"",discoveredUnManagedVolumes.size(),storageSystem.getLabel());if(discoveredUnManagedVolumes.isEmpty()){return ;}URIQueryResultList allAvailableUnManagedVolumesInDB=new URIQueryResultList();dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceUnManagedVolumeConstraint(storageSystem.getId()),allAvailableUnManagedVolumesInDB);Set<URI> unManagedVolumesInDBSet=new HashSet<URI>();Iterator<URI> allAvailableUnManagedVolumesItr=allAvailableUnManagedVolumesInDB.iterator();while(allAvailableUnManagedVolumesItr.hasNext()){unManagedVolumesInDBSet.add(allAvailableUnManagedVolumesItr.next());}SetView<URI> onlyAvailableinDB=Sets.difference(unManagedVolumesInDBSet,discoveredUnManagedVolumes);_log.info(""Diff :""+Joiner.on(""\t"").join(onlyAvailableinDB));if(!onlyAvailableinDB.isEmpty()){List<UnManagedVolume> unManagedVolumeTobeDeleted=new ArrayList<UnManagedVolume>();Iterator<UnManagedVolume> unManagedVolumes=dbClient.queryIterativeObjects(UnManagedVolume.class,new ArrayList<URI>(onlyAvailableinDB));while(unManagedVolumes.hasNext()){UnManagedVolume volume=unManagedVolumes.next();if(null==volume||volume.getInactive()){continue;}_log.info(""Setting unManagedVolume {} inactive"",volume.getId());volume.setStoragePoolUri(NullColumnValueGetter.getNullURI());volume.setStorageSystemUri(NullColumnValueGetter.getNullURI());volume.setInactive(true);unManagedVolumeTobeDeleted.add(volume);}if(!unManagedVolumeTobeDeleted.isEmpty()){partitionManager.updateAndReIndexInBatches(unManagedVolumeTobeDeleted,1000,dbClient,UNMANAGED_VOLUME);}}}"
2445	"private void adjust(){float groupSpace=0.15;float barSpace=(1.0-groupSpace)/entries.size()/10.0;float barWidth=barSpace*9;if(entries.size()>=2){barChart.getBarData().setBarWidth(barWidth);barChart.groupBars(0.0,groupSpace,barSpace);barChart.invalidate();}FontSize(fontSize);}"
2446	"public void handleKeyPress(KeyEvent ke){if(ke.getCode()==KeyCode.SPACE||ke.getCode()==KeyCode.ENTER){lastWordCoord=this.getCaretPosition();popup.hide();}else {if(ke.getCode()==KeyCode.TAB){this.deleteText(lastWordCoord,this.getCaretPosition());popup.hide();this.appendText(suggestion.getText());}else {suggestion.setText(content.getSuggestions(lastWordCoord,this.getCaretPosition()));if(suggestion.getText()!=null){popup.show(State.x.getApp().getStage());}}}}"
2447	"public int compareTo(SWGResourceClass o){return o.isSpawnable()&&o.isSub(c)&&(nonHarv||o.isHarvested())?0:-1;}"
2448	"public Series getSeriesByLink(String link){MongoCollection<Document> collection=Sirius.getMongoController().getCollection(""shows"");Document doc=collection.find(eq(""links"",link.toLowerCase())).projection(Projections.include(""id"")).first();return doc!=null?getSeries(doc.getString(""id""),true):null;}"
2449	"public void draw(){GL20 gl=Gdx.gl;gl.glClearColor(1,1,1,1);gl.glClear(GL20.GL_COLOR_BUFFER_BIT);guiCam.update();game.getBatch().setProjectionMatrix(guiCam.combined);game.getBatch().enableBlending();game.getBatch().begin();game.getBatch().draw(Assets.gameScreen,-150,-450,300,900);game.getBatch().draw(redBar,-120,350,120,50);game.getBatch().draw(redBar,-120,250,120,50);game.getBatch().draw(redBar,-120,150,120,50);game.getBatch().draw(greenBar,0,350,120,50);game.getBatch().draw(greenBar,0,250,120,50);game.getBatch().draw(greenBar,0,150,120,50);game.getBatch().draw(blackBar,2.4*gamePet.getHappiness()-120,350,1,50);game.getBatch().draw(blackBar,2.4*gamePet.getHunger()-120,250,1,50);game.getBatch().draw(blackBar,2.4*gamePet.getTiredness()-120,150,1,50);game.getBatch().draw(happinessLabel,-120,350,25,50);game.getBatch().draw(hungerLabel,-120,250,25,50);game.getBatch().draw(fatigueLabel,-120,150,25,50);game.getBatch().draw(settingsButton,120,420,30,30);if(gamePet.isAlive()){Tail tail=new Tail(100,100);tail.update((game.currentTailTime-game.lastTailTime));TextureRegion keyFrame=Assets.tailAnim.getKeyFrame(tail.stateTime,Animation.ANIMATION_LOOPING);game.getBatch().draw(keyFrame,18,-115,22,105);if(!eatButton&&playButton&&playButton){Blink blink=new Blink(100,100);blink.update(game.currentTailTime-game.lastTailTime);TextureRegion keyFrame1=Assets.blinkAnim.getKeyFrame(blink.stateTime,Animation.ANIMATION_LOOPING);game.getBatch().draw(keyFrame1,-25,20,10,30);game.getBatch().draw(keyFrame1,-8,25,10,30);}}if(!playButton){game.getBatch().draw(Assets.ball,-150,-450,75,150);}else {if(playButton){game.getBatch().draw(Assets.ball,-150,-450,100,300);}}if(!eatButton){game.getBatch().draw(Assets.bone,-38,-450,75,150);}else {if(eatButton){game.getBatch().draw(Assets.bone,-50,-450,100,300);}}if(sleepButton){game.getBatch().draw(Assets.bed,75,-450,75,150);}else {if(!sleepButton){game.getBatch().draw(Assets.bed,50,-450,100,300);}}if(!playButton&&!eatButton&&!sleepButton&&gamePet.isAlive()){game.getBatch().draw(gamePet.getPetImage(),-100,-400,200,800);Blink blink=new Blink(100,100);blink.update(game.currentTailTime-game.lastTailTime+12);TextureRegion keyFrame1=Assets.blinkAnim.getKeyFrame(blink.stateTime,Animation.ANIMATION_LOOPING);game.getBatch().draw(keyFrame1,-25,20,10,30);game.getBatch().draw(keyFrame1,-8,25,10,30);}else {if(playButton&&gamePet.isAlive()){CoolDown play=new CoolDown(100,100);play.update(game.currentTailTime-game.lastTailTime);TextureRegion keyFramePlay=Assets.playAnim.getKeyFrame(play.stateTime,Animation.ANIMATION_NONLOOPING);game.getBatch().draw(keyFramePlay,-100,-400,200,800);}else {if(eatButton&&gamePet.isAlive()){CoolDown eat=new CoolDown(100,100);eat.update(game.currentTailTime-game.lastTailTime);TextureRegion keyFrameEat=Assets.eatAnim.getKeyFrame(eat.stateTime,Animation.ANIMATION_NONLOOPING);game.getBatch().draw(keyFrameEat,-100,-400,200,800);}else {if(sleepButton&&gamePet.isAlive()){CoolDown sleep=new CoolDown(100,100);sleep.update(game.currentTailTime-game.lastTailTime);TextureRegion keyFrameSleep=Assets.sleepAnim.getKeyFrame(sleep.stateTime,Animation.ANIMATION_NONLOOPING);game.getBatch().draw(keyFrameSleep,-100,-400,200,800);}}}}if(!gamePet.isAlive()){game.getBatch().draw(Assets.deathMessage,-50,0,100,100);game.getBatch().draw(Assets.redBar,-50,-100,100,100);game.getBatch().draw(Assets.greenBar,-50,-100,(int)(100*(currentTime-timeOfDeath)/86400),100);System.out.println(currentTime-timeOfDeath);}game.getBatch().end();}"
2450	"@Override public boolean onTouch(View v,MotionEvent motionEvent){switch (motionEvent.getAction()){case MotionEvent.ACTION_DOWN :break;case MotionEvent.ACTION_UP :timesOp=true;divOp=plusOp=minusOp=false;current="""";break;case MotionEvent.ACTION_CANCEL :break;}return true;}"
2451	"public static void writeTo(Throwable t,Appendable to,Detail detail) throws IOException{Set<Throwable> dejaVu=Collections.newSetFromMap(new IdentityHashMap<Throwable,Boolean>());dejaVu.add(t);to.append(t.toString());to.append('\n');StackTraceElement[] trace=t.getStackTrace();writeTo(trace,to,detail);for(Throwable se : t.getSuppressed()){printEnclosedStackTrace(se,to,trace,SUPPRESSED_CAPTION,""\t"",dejaVu,detail);}Throwable ourCause=t.getCause();if(t instanceof Iterable){Iterator it=((Iterable)t).iterator();while(it.hasNext()){Object next=it.next();if(next instanceof Throwable){if(next==t||next==ourCause){continue;}Throwable mt=(Throwable)next;printEnclosedStackTrace(mt,to,trace,SUPPRESSED_CAPTION,"""",dejaVu,detail);}else {break;}}}if(ourCause!=null){printEnclosedStackTrace(ourCause,to,trace,CAUSE_CAPTION,"""",dejaVu,detail);}}"
2452	"private AdResponse formatHeaderBiddingResponse(PMBid bid){AdResponse pubResponse=new AdResponse();Map<String,String> adInfo=new HashMap<String,String>();ArrayList<String> impressionTrackers=new ArrayList<String>();ArrayList<String> clickTrackers=new ArrayList<String>();adInfo.put(""type"",""thirdparty"");try{String errorCode;if(bid!=null&&!TextUtils.isEmpty(bid.getCreative())&&!TextUtils.isEmpty(bid.getTrackingUrl())){adInfo.put(""content"",URLDecoder.decode(bid.getCreative(),UTF8_CHARSET));impressionTrackers.add(URLDecoder.decode(bid.getTrackingUrl(),UTF8_CHARSET));if(bid.getPrice()!=0){adInfo.put(""ecpm"",String.valueOf(bid.getPrice()));}if(bid.getTrackingUrl()!=null&&bid.getTrackingUrl()!=""""){}}BannerAdDescriptor adDescriptor=new BannerAdDescriptor(adInfo);adDescriptor.setImpressionTrackers(impressionTrackers);adDescriptor.setClickTrackers(clickTrackers);pubResponse.setRenderable(adDescriptor);}catch(UnsupportedEncodingException e){e.printStackTrace();}finally{}return pubResponse;}"
2453	"protected void syncAttachBox(Player player){if(!indexCache.containsKey(player)){return ;}int index=indexCache.get(player);indexCache.remove(player);MailData mail;Inventory inv;if(index==0){mail=parent.getMailManager().getEditmodeMail(MailSender.getMailSender(player));inv=editmodeBoxes.get(player);}else {mail=parent.getMailManager().getMail(index);inv=attachmentBoxes.get(index);}ArrayList<ItemStack> temp=new ArrayList<ItemStack>();for(ItemStack item : inv.getContents()){if(item!=null&&item.getType()!=Material.AIR){temp.add(item);}}inv.clear();for(ItemStack item : temp){inv.addItem(item);}ArrayList<ItemStack> array=new ArrayList<ItemStack>();for(ItemStack item : inv.getContents()){if(item!=null&&item.getType()!=Material.AIR){array.add(item);}}mail.setAttachments(array);parent.getMailManager().saveMail(mail);if(player.isOnline()){if(index==0){mail.displayEditmode(MailSender.getMailSender(player));}else {parent.getMailManager().displayMail(MailSender.getMailSender(player),mail);}}}"
2454	"protected SharedMemoryMap(int capacity,String fileName,long fileSize,long expirationTime) throws IOException{super(capacity);if(fileName==null){this.mmap=new MappedFile(fileSize);this.name=""anon.""+Long.toHexString(mmap.getAddr());}else {this.mmap=new MappedFile(fileName,fileSize);this.name=fileName;}long mallocOffset=MAP_OFFSET+(long)this.capacity*8;if(mmap.getSize()<=mallocOffset){long minSize=(mallocOffset+(MB-1))/MB;throw new IllegalArgumentException(""Minimum ""+className+"" size is ""+minSize+"" MB"");}init(expirationTime);createAllocator(mmap.getAddr()+mallocOffset,mmap.getSize()-mallocOffset);Management.registerMXBean(this,""one.nio.mem:type=SharedMemoryMap,name=""+name);}"
2455	"public static TileEntity[] getAdjacentFluidConnections(TileEntity tile,boolean ignoreConnect){TileEntity[] adjacentConnections=new TileEntity[EnumFacing.values().length];if(tile==null){return adjacentConnections;}boolean isMekLoaded=EnergyConfigHandler.isMekanismLoaded();BlockVec3 thisVec=new BlockVec3(tile);for(EnumFacing direction : EnumFacing.values()){TileEntity tileEntity=thisVec.getTileEntityOnSide(tile.getWorld(),direction);if(tileEntity instanceof IFluidHandler){if(ignoreConnect||!(tileEntity instanceof IConnector)||((IConnector)tileEntity).canConnect(direction.getOpposite(),NetworkType.FLUID)){adjacentConnections[direction.ordinal()]=tileEntity;}}}return adjacentConnections;}"
2456	"private JsonValue parseNumberValue(){StringBuilder val=new StringBuilder();boolean isDouble=false;while(Character.isDigit(lastRead)||"".eE-"".contains(""""+lastRead)){isDouble=isDouble||"".eE"".contains(""""+lastRead);val.append(lastRead);readNext();}if((!(Character.isSpaceChar(lastRead)||""}],"".contains(""""+lastRead)))&&(!""\n\r\t"".contains(""""+lastRead))){throw new JsonParseException(""Illegal value '""+val+lastRead+""'"");}if(isDouble){return new JsonNumber(Double.parseDouble(val.toString()));}return new JsonNumber(Long.parseLong(val.toString()));}"
2457	"public static void printByCategory(){String tempCate=null;String tempName=null;int tempPrice=0;float tempRating=0;for(int i=0;i<products.size();i++){String s=products.get(i).getCategory();if(s!=tempCate){tempCate=products.get(i).getCategory();System.out.println(""\n""+tempCate);}tempName=products.get(i).getName();tempPrice=products.get(i).getPrice();tempRating=products.get(i).getRating();System.out.println(tempName+"" [Price:$""+tempPrice+"" Rating:""+tempRating+"" stars]"");}}"
2458	"public boolean better(MatchResult other){return wordsUsed>=other.wordsUsed&&matchPercentage>=other.matchPercentage&&firstWordUsed<=other.firstWordUsed;}"
2459	"@SuppressWarnings(""deprecation"") @SubscribeEvent public void livingUpdate(LivingUpdateEvent event){if(!StellarAPIReference.isOpticalEntity(event.getEntityLiving())){return ;}EnumHand hand=event.getEntityLiving().getActiveHand();ItemStack itemstack=hand!=null?event.getEntityLiving().getHeldItem(hand):ItemStack.EMPTY;ItemStack itemInUse=event.getEntityLiving().getActiveItemStack();if(!ItemStack.areItemStacksEqual(itemstack,itemInUse)){boolean updateScope=false;boolean updateFilter=false;if(itemstack.hasCapability(StellarAPICapabilities.OPTICAL_PROPERTY,EnumFacing.UP)){IOpticalProperties property=itemstack.getCapability(StellarAPICapabilities.OPTICAL_PROPERTY,EnumFacing.UP);updateScope=updateScope||property.isScope();updateFilter=updateFilter||property.isFilter();}if(itemInUse.hasCapability(StellarAPICapabilities.OPTICAL_PROPERTY,EnumFacing.UP)){IOpticalProperties property=itemInUse.getCapability(StellarAPICapabilities.OPTICAL_PROPERTY,EnumFacing.UP);updateScope=updateScope||property.isScope();updateFilter=updateFilter||property.isFilter();}if(updateScope){LivingItemAccessHelper.setUsingItem(event.getEntityLiving(),itemInUse==ItemStack.EMPTY?ItemStack.EMPTY:itemstack);StellarAPIReference.updateScope(event.getEntityLiving());}if(updateFilter){LivingItemAccessHelper.setUsingItem(event.getEntityLiving(),itemInUse==ItemStack.EMPTY?ItemStack.EMPTY:itemstack);StellarAPIReference.updateFilter(event.getEntityLiving());}}else {if(itemstack!=itemInUse){LivingItemAccessHelper.setUsingItem(event.getEntityLiving(),itemstack);}}}"
2460	"public static boolean isSameNumber(Integer a,Integer b){return a==b;}"
2461	"public MFT(int windowSize,boolean normMean,boolean lower_bounding){this.normMean=normMean;this.windowSize=windowSize;this.fft=new DoubleFFT_1D(windowSize);this.startOffset=normMean?2:0;this.norm=lower_bounding?1.0/Math.sqrt(windowSize):1.0;}"
2462	"public OccurrenceProcessor(List<SimpleOccurrenceDataProvider> occurrences,PolygonTheme protectedAreas,long sizeOfSquare,PolygonTheme clippingPolygon,Integer minimumYear,Integer maximumYear){this.clippingPolygon=clippingPolygon;this.minimumYear=minimumYear;this.maximumYear=maximumYear;Polygon nullPolygon=new Polygon();this.protectedAreas=protectedAreas;this.sizeOfSquare=sizeOfSquare;pointsInPolygons=ArrayListMultimap.create();UTMCoordinate tmp;Point2D tmp1;Set<String> utmZones=new HashSet<>();this.occurrences=occurrences;if(this.size()==0){clusters=new ArrayList<>();return ;}for(SimpleOccurrence so : this){if(so.getOccurrence().getConfidence()==OccurrenceConstants.ConfidenceInIdentifiction.DOUBTFUL||(so.getOccurrence().getPresenceStatus()!=null&&so.getOccurrence().getPresenceStatus()!=OccurrenceConstants.PresenceStatus.ASSUMED_PRESENT)){continue;}tmp=so._getUTMCoordinates();if(tmp==null){continue;}tmp1=new Point2D(tmp);utmZones.add(((Integer)tmp.getXZone()).toString()+java.lang.Character.toString(tmp.getYZone()));if(protectedAreas!=null){for(Map.Entry<String,pt.floraon.geometry.Polygon> e : protectedAreas){if(e.getValue().contains(new Point2D(so.getLongitude(),so.getLatitude()))){pointsInPolygons.put(tmp1,e.getValue());}}}if(!pointsInPolygons.containsKey(tmp1)){pointsInPolygons.put(tmp1,nullPolygon);}}squares=new HashSet<>();for(Point2D u : pointsInPolygons.keySet()){squares.add(new Square(u));}this.nQuads=squares.size();this.AOO=(this.nQuads*sizeOfSquare*sizeOfSquare)/1000000.0;if(pointsInPolygons.keySet().size()>=3){convexHull=(Stack<Point2D>)new GrahamScan(pointsInPolygons.keySet().toArray(new Point2D[0])).hull();convexHull.add(convexHull.get(0));double sum=0.0;for(int i=0;i<convexHull.size()-1;i++){sum=sum+(convexHull.get(i).x()*convexHull.get(i+1).y())-(convexHull.get(i).y()*convexHull.get(i+1).x());}sum=0.5*sum;this.realEOO=sum/1000000;if(this.realEOO<this.AOO){this.EOO=this.AOO;}else {this.EOO=this.realEOO;}}else {EOO=(this.nQuads*sizeOfSquare*sizeOfSquare)/1000000.0;realEOO=null;}Iterator<Square> it=squares.iterator();List<Point2D> vertices=new ArrayList<>();while(it.hasNext()){vertices.addAll(it.next().getVertices());}if(vertices.size()>=3){Stack<Point2D> tmpConvexHull=(Stack<Point2D>)new GrahamScan(vertices.toArray(new Point2D[0])).hull();tmpConvexHull.add(tmpConvexHull.get(0));double sum=0.0;for(int i=0;i<tmpConvexHull.size()-1;i++){sum=sum+(tmpConvexHull.get(i).x()*tmpConvexHull.get(i+1).y())-(tmpConvexHull.get(i).y()*tmpConvexHull.get(i+1).x());}sum=0.5*sum;squareEOO=sum/1000000;}else {squareEOO=null;}DBSCANClusterer<Point2D> cls=new DBSCANClusterer<>(2500,0);clusters=cls.cluster(pointsInPolygons.keySet());}"
2463	"@Override public void actionPerformed(ActionEvent actionEvent){if(!this.getSignUpForm().equalPasswords(this.getSignUpForm().passwordField.getPassword(),this.getSignUpForm().repeatField.getPassword())){this.getSignUpForm().repeatPasswordOkLabel.setForeground(Color.RED);this.getSignUpForm().repeatPasswordOkLabel.setText(""passwords don't match"");return ;}if(!Validator.validEmail(this.getSignUpForm().emailField.getText())){this.getSignUpForm().emailOKlabel.setForeground(Color.RED);this.getSignUpForm().emailOKlabel.setText(""not a valid email"");return ;}String username=this.getSignUpForm().usernameField.getText();char[] password=this.getSignUpForm().passwordField.getPassword();String email=this.getSignUpForm().emailField.getText();String display_name=this.getSignUpForm().displayNameField.getText();String gender=this.getSignUpForm().genderField.getText();String preferred_lang=this.getSignUpForm().langTextField.getText();String birthdate=null;if(this.getSignUpForm().dayBox.getSelectedItem()!=null&&this.getSignUpForm().monthBox.getSelectedItem()!=null&&this.getSignUpForm().yearBox.getSelectedItem()!=null){birthdate=this.getSignUpForm().dayBox.getSelectedItem()+""-""+this.getSignUpForm().monthBox.getSelectedItem()+""-""+this.getSignUpForm().yearBox.getSelectedItem();}HTTPSClient client=new HTTPSClient();Response response=client.signUp(username,password,display_name,email,birthdate,gender,preferred_lang);if(response!=null){if(response.getContent().matches(""Username [\\w|\\d]+ already found."")){this.getSignUpForm().usernameOKLabel.setForeground(Color.RED);this.getSignUpForm().usernameOKLabel.setText(""username already taken"");}else {this.getSignUpForm().infoLabel.setText(""Success! log in to your new account:"");}}else {this.getSignUpForm().infoLabel.setText(""unable to create account"");}}"
2464	"public void submitStrategy(View view){try{double invest=Double.valueOf(investEditText.getText().toString());try{int period=Integer.valueOf(periodEditText.getText().toString());try{String date=endDateEditText.getText().toString();int dateAsInteger=DateParser.parseDateToInteger(date);int currentDate=Integer.valueOf(new SimpleDateFormat(""yyyyMMdd"").format(new Date()));if(dateAsInteger>currentDate){Toast.makeText(getApplicationContext(),""Please enter a past date"",Toast.LENGTH_SHORT);return ;}if(hoveredBasketName.length()>0&&hoveredStrategyName.length()>0){Intent intent=new Intent();Map<String,String> map=new HashMap<>();map.put(""invest"",""""+invest);map.put(""period"",""""+period);map.put(""endDate"",""""+dateAsInteger);map.put(""basketName"",hoveredBasketName);map.put(""strategyName"",hoveredStrategyName);try{intent.putExtra(""simulationJSON"",new JSONObject(map).toString());if(simulationName.length()>0){intent.putExtra(""simulationName"",simulationName);}setResult(RESULT_OK,intent);finish();}catch(Exception e){e.printStackTrace();}}else {Toast.makeText(getApplicationContext(),""Please select a basket and a strategy."",Toast.LENGTH_SHORT).show();}}catch(Exception e){e.printStackTrace();Toast.makeText(getApplicationContext(),""Please make sure input date is in right format."",Toast.LENGTH_SHORT).show();}}catch(Exception e){Toast.makeText(getApplicationContext(),""Please make sure input period is in correct format."",Toast.LENGTH_SHORT).show();}}catch(Exception e){Toast.makeText(getApplicationContext(),""Please make sure input invest is in correct format."",Toast.LENGTH_SHORT).show();}}"
2465	"public void getDistance(){if(getDestiny()!=null){mRules.setDistance(mLastLocation.distanceTo(getDestiny()));Log.e(TAG,""distance: ""+mRules.getDistance());prcUpdateIntervals(mRules.getDistance());if(isActiveAlive&&mCallback!=null){Log.e(TAG,""mCallback: ""+(mCallback==null)+"""");Log.e(TAG,""mRules: ""+(mRules==null)+"""");mCallback.onDistance(mRules);}else {prcShowNotification();}}}"
2466	"private boolean doSkip(Operation op){return !historyEnabled||((boolean)Optional.ofNullable(op).map(Operation::getProperties).orElse(Collections.emptyMap()).getOrDefault(SKIP_VERSIONING,false));}"
2467	"@Override public boolean apply(HProjectIteration input){return input.getStatus()!=EntityStatus.OBSOLETE;}"
2468	"public static void main(String[] args) throws IOException{HashMap<String,Integer> hashmap=new HashMap<String,Integer>();HashMap<String,Integer> userMap=new HashMap<String,Integer>();List<String> uniqueSet=new ArrayList<String>();Pattern p8=Pattern.compile("".{1,50}www.{1,500}"");String[] fileNames={""webmd_addiction"",""webmd_adhd"",""webmd_breast_cancer"",""webmd_diabetes"",""webmd_diet"",""webmd_fkids"",""webmd_heart"",""webmd_ms"",""webmd_pain"",""webmd_sexualhealth""};for(String fileLog : fileNames){hashmap=new HashMap<String,Integer>();userMap=new HashMap<String,Integer>();uniqueSet=new ArrayList<String>();BufferedReader br=new BufferedReader(new FileReader(""data/""+fileLog+"".csv""));List<String> qidArray=new ArrayList<String>();BufferedWriter writer=new BufferedWriter(new FileWriter(""test/""+fileLog+""_staff_qid.txt""));while(br.ready()){String check=br.readLine();String[] tokenizedTerms=check.split(""\"""");String nameToken=tokenizedTerms[3];if((check.contains(""www""))|(check.contains(""http""))){String check2="" "";String check3="" "";Matcher m8=p8.matcher(check);List<String> matchstring8=new ArrayList<String>();while(m8.find()){check2=check2+""""+m8.group();matchstring8.add(m8.group());}Pattern p9=Pattern.compile(""https?\\:\\/\\/[\\-w\\.]*(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]|www\\.(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]"");Matcher m9=p9.matcher(check2);List<String> matchstring9=new ArrayList<String>();while(m9.find()){check3=check3+""""+m9.group();matchstring9.add(m9.group());}Pattern p10=Pattern.compile(""www.*?(\\.com(?=\\W)|\\.com\\,?\\)?|\\.org(?=\\W)|\\.ORG(?=\\W)|\\.net(?=\\W)|\\.gov(?=\\W)|\\.co.uk|\\.html|\\.htm|\\.asp|\\.aspx|\\.edu|\\.us|treatment|\\-men(?=\\W)|\\.pdf|\\.ca\\/servlet|\\.ch(?=\\W)|\\.coream(?=\\W)|\\.ee(?=\\W))|www.*?(?=\\/)|(?<=http\\:\\/\\/).*?(?=\\/)|(?<=https\\:\\/\\/).*?(?=\\/)"");Matcher m10=p10.matcher(check3);List<String> matchstring10=new ArrayList<String>();while(m10.find()){matchstring10.add(m10.group());for(int i=0;i<matchstring10.size();i++){if(uniqueSet.contains(matchstring10.get(i))){int elementCount=Integer.parseInt(hashmap.get(matchstring10.get(i)).toString());elementCount++;hashmap.put(matchstring10.get(i),elementCount);}else {uniqueSet.add(matchstring10.get(i));hashmap.put(matchstring10.get(i),1);}}}}}br.close();SortedSet<Map.Entry<String,Integer>> sortedJournals=entriesSortedByValues(hashmap);for(Entry<String,Integer> ent : sortedJournals){writer.write(ent.getKey()+""\t""+ent.getValue()+'\n');System.out.println(ent.getKey()+""\t""+ent.getValue());}writer.close();}}"
2469	"@Override public boolean hasCapability(Capability<?> capability,EnumFacing facing){if(capability==CapabilityEnergy.ENERGY){return true;}return false;}"
2470	"public void disconnected(Connection c){if(c.getID()==opponentConnection.getID()){controller.opponentDisconnected();}}"
2471	"@Override public boolean isItemValid(ItemStack stack){return stack.getItem() instanceof ItemTool||stack.getItem().getToolClasses(stack).contains(""axe"");}"
2472	"public void dispatch(String[] args,FTPClient ftp){CommandLine line=ArgParser.parse(args);if(args.length<=0||line.hasOption('h')||line.hasOption(""help"")){HelpFormatter help=new HelpFormatter();help.printHelp(""FTPClient"",ArgParser.options());}else {if(line.hasOption('C')||line.hasOption(""connect"")){commands.connect(ftp,line.getOptionValue('C'));}if(line.hasOption(""l"")||line.hasOption(""list"")){commands.listFilesFolders(ftp);}if(line.hasOption('g')||line.hasOption(""get"")){commands.getRemoteFile(ftp,line.getOptionValue('g'));}if(line.hasOption('p')||line.hasOption(""put"")){commands.putRemoteFile(ftp,line.getOptionValues('p'));}commands.exit(ftp);}}"
2473	"public static boolean tickerNotFuture(String s){return !s.equals(""SGXA50"")&&!s.equals(""SGXA50BM"");}"
2474	"@Override @Nonnull @SideOnly(Side.CLIENT) public List<BakedQuad> getQuads(IBlockState state,EnumFacing side,long rand){IExtendedBlockState extendedState=(IExtendedBlockState)state;IBlockState camoState=extendedState.getValue(RENDERBLOCKSTATE).getRenderState();if(camoState.getBlock() instanceof BlockAbstractCamoTileEntity&&state!=null){return getModel(defaultModels,state).getQuads(state,side,rand);}else {return Minecraft.getMinecraft().getBlockRendererDispatcher().getBlockModelShapes().getModelForState(camoState).getQuads(camoState,side,rand);}}"
2475	"@Override protected boolean processIntern(String s){if(s.compareTo(COMCONSTANTS.PING)==0){linker.write(COMCONSTANTS.PING_AN);return true;}String[] st=s.split(COMCONSTANTS.DIV_HEADER);if(st.length<2){return false;}if(st[0].compareTo(COMCONSTANTS.KEY_EXCHANGE_START)==0){add(new KeyExchange(linker,key,false,st[1],clientName));return true;}if(st[1].compareTo(COMCONSTANTS.CONNECTION_ASK_START)==0){try{add(ConnectionBasics.connectionRequested(st,key.getMySuperKey(),clientName));}catch(Exception e){debug.Debug.println(""*Connection was Requested, but Failed: ""+e.toString(),debug.Debug.WARN);}return true;}return false;}"
2476	"private void fetchData(){mMessageData=mActivity.GetMessageData();if((mMessageData.getMessages()!=null)&&(mMessageData.getMessages().size()>0)){fillList();}else {mMessageListTask=new MessageListTask();mMessageListTask.addMessageListListener(new MessageListListener(){  public void success(  List<Message> messages){    if (getActivity() != null) {      mMessageData.setMessages(messages);      fillList();    }  }  public void fail(){  }});mMessageListTask.execute(mActivity,mMessageData.getThreadId(),Integer.toString(mMessageData.getCurrentPage()));}}"
2477	"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){if(holder instanceof RdoCashRatioViewHolder){if(position<getItemCount()&&(customHeaderView!=null?position<=mData.size():position<mData.size())&&(customHeaderView!=null?position>0:true)){ClassificationBean content=mData.get(customHeaderView!=null?position-1:position);if(content==null){return ;}String count=content.getCount();((RdoCashRatioViewHolder)holder).tvDesc.setText(content.getRemark());((RdoCashRatioViewHolder)holder).tvCount.setText(count);if(position==1){((RdoCashRatioViewHolder)holder).tvDesc.setTextSize(16);((RdoCashRatioViewHolder)holder).tvCount.setTextSize(16);((RdoCashRatioViewHolder)holder).tvPercent.setTextSize(16);((RdoCashRatioViewHolder)holder).tvDesc.getPaint().setFakeBoldText(true);((RdoCashRatioViewHolder)holder).tvCount.getPaint().setFakeBoldText(true);((RdoCashRatioViewHolder)holder).tvPercent.getPaint().setFakeBoldText(true);((RdoCashRatioViewHolder)holder).tvPercent.setText(""??"");}else {((RdoCashRatioViewHolder)holder).tvDesc.setTextSize(14);((RdoCashRatioViewHolder)holder).tvCount.setTextSize(14);((RdoCashRatioViewHolder)holder).tvPercent.setTextSize(14);((RdoCashRatioViewHolder)holder).tvDesc.getPaint().setFakeBoldText(false);((RdoCashRatioViewHolder)holder).tvCount.getPaint().setFakeBoldText(false);((RdoCashRatioViewHolder)holder).tvPercent.getPaint().setFakeBoldText(false);Pattern pattern=Pattern.compile(""[0-9]*"");Matcher isNum=pattern.matcher(count);if(isNum.matches()){double percent=(double)Integer.parseInt(count)*100/totalCount;NumberFormat nbf=NumberFormat.getInstance();nbf.setMinimumFractionDigits(2);((RdoCashRatioViewHolder)holder).tvPercent.setText(nbf.format(percent)+""%"");}}}}}"
2478	"public static T createInstance(Class<?> type,Iterable<OptionMetadata> options,Map<OptionMetadata,List<Object>> parsedOptions,ArgumentsMetadata arguments,Iterable<Object> parsedArguments,Iterable<Accessor> metadataInjection,Map<Class<?>,Object> bindings){T commandInstance=(T)ParserUtil.createInstance(type);for(OptionMetadata option : options){List<?> values=parsedOptions.get(option);if(option.getArity()>1&&!values.isEmpty()){values=(List<?>)values.stream().flatMap(value -> CollectionUtils.asList(((Iterable<Object>)value)).stream()).collect(Collectors.toList());}if(values!=null&&!values.isEmpty()){for(Accessor accessor : option.getAccessors()){accessor.addValues(commandInstance,values);}}}if(arguments!=null&&parsedArguments!=null){for(Accessor accessor : arguments.getAccessors()){accessor.addValues(commandInstance,parsedArguments);}}for(Accessor accessor : metadataInjection){Object injectee=bindings.get(accessor.getJavaType());if(injectee!=null){accessor.addValues(commandInstance,Arrays.asList(injectee));}}return commandInstance;}"
2479	"@Override public void visitVarDef(JCVariableDecl varDecl){if(context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_ERASED)){return ;}if(context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_STRING_TYPE)){return ;}if(getScope().enumScope){print(varDecl.name.toString());if(varDecl.init instanceof JCNewClass){JCNewClass newClass=(JCNewClass)varDecl.init;if(newClass.def!=null){initAnonymousClass(newClass);}}}else {JCTree parent=getParent();if(getScope().enumWrapperClassScope&&varDecl.type.equals(parent.type)){return ;}String name=getAdapter().getIdentifier(varDecl.sym);if(context.getFieldNameMapping(varDecl.sym)!=null){name=context.getFieldNameMapping(varDecl.sym);}boolean confictInDefinitionScope=false;if(parent instanceof JCClassDecl){MethodSymbol m=Util.findMethodDeclarationInType(context.types,((JCClassDecl)parent).sym,name,null);if(m!=null){if(!isDefinitionScope){report(varDecl,varDecl.name,JSweetProblem.FIELD_CONFLICTS_METHOD,name,m.owner);}else {confictInDefinitionScope=true;}}if(!getScope().interfaceScope&&name.equals(""constructor"")){report(varDecl,varDecl.name,JSweetProblem.CONSTRUCTOR_MEMBER);}}else {if(context.bundleMode){if(context.importedTopPackages.contains(name)){name=""__var_""+name;}}if(JSweetConfig.JS_KEYWORDS.contains(name)){report(varDecl,varDecl.name,JSweetProblem.JS_KEYWORD_CONFLICT,name,name);name=JSweetConfig.JS_KEYWORD_PREFIX+name;}}boolean globals=(parent instanceof JCClassDecl)&&JSweetConfig.GLOBALS_CLASS_NAME.equals(((JCClassDecl)parent).name.toString());if(globals&&!varDecl.mods.getFlags().contains(Modifier.STATIC)){report(varDecl,varDecl.name,JSweetProblem.GLOBALS_CAN_ONLY_HAVE_STATIC_MEMBERS);return ;}globals=globals||(parent instanceof JCClassDecl&&(((JCClassDecl)parent).sym.isInterface()||getScope().interfaceScope&&varDecl.sym.isStatic()));printDocComment(varDecl,false);if(!globals&&parent instanceof JCClassDecl){if(varDecl.mods.getFlags().contains(Modifier.PUBLIC)){if(!getScope().interfaceScope){print(""public "");}}if(varDecl.mods.getFlags().contains(Modifier.PRIVATE)){if(!getScope().interfaceScope){if(!getScope().innerClass&&!varDecl.mods.getFlags().contains(Modifier.STATIC)){print(""/*private*/ "");}}else {report(varDecl,varDecl.name,JSweetProblem.INVALID_PRIVATE_IN_INTERFACE,varDecl.name,((JCClassDecl)parent).name);}}if(varDecl.mods.getFlags().contains(Modifier.STATIC)){if(!getScope().interfaceScope){print(""static "");}}}if(!getScope().interfaceScope&&parent instanceof JCClassDecl){if(context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_OPTIONAL)){report(varDecl,varDecl.name,JSweetProblem.USELESS_OPTIONAL_ANNOTATION,varDecl.name,((JCClassDecl)parent).name);}}boolean ambient=context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_AMBIENT);if(globals||!(parent instanceof JCClassDecl||parent instanceof JCMethodDecl||parent instanceof JCLambda)){if(globals){if(context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_MODULE)){getContext().addExportedElement(context.getAnnotationValue(varDecl.sym,JSweetConfig.ANNOTATION_MODULE,null),varDecl.sym);}if(context.useModules){if(!varDecl.mods.getFlags().contains(Modifier.PRIVATE)){print(""export "");}}else {if(!globalModule){print(""export "");}}if(ambient||(getIndent()==0&&isDefinitionScope)){print(""declare "");}}if(!(inArgListTail&&(parent instanceof JCForLoop))){if(isDefinitionScope){print(""var "");}else {print(VAR_DECL_KEYWORD+"" "");}}}else {if(ambient){report(varDecl,varDecl.name,JSweetProblem.WRONG_USE_OF_AMBIENT,varDecl.name);}}if(Util.isVarargs(varDecl)){print(""..."");}print(name);if(!Util.isVarargs(varDecl)&&(getScope().eraseVariableTypes||(getScope().interfaceScope&&context.hasAnnotationType(varDecl.sym,JSweetConfig.ANNOTATION_OPTIONAL)))){print(""?"");}if(!getScope().skipTypeAnnotations&&!getScope().enumWrapperClassScope){if(typeChecker.checkType(varDecl,varDecl.name,varDecl.vartype)){print("" : "");if(confictInDefinitionScope){print(""any"");}else {if(getScope().eraseVariableTypes){print(""any"");if(Util.isVarargs(varDecl)){print(""[]"");}}else {if(context.hasAnnotationType(varDecl.vartype.type.tsym,ANNOTATION_STRING_TYPE)){print(""\"""");print(context.getAnnotationValue(varDecl.vartype.type.tsym,ANNOTATION_STRING_TYPE,varDecl.vartype.type.tsym.name.toString()).toString());print(""\"""");}else {getAdapter().substituteAndPrintType(varDecl.vartype);}}}}}if(context.lazyInitializedStatics.contains(varDecl.sym)&&!getScope().enumWrapperClassScope){JCClassDecl clazz=(JCClassDecl)parent;String prefix=clazz.getSimpleName().toString();if(GLOBALS_CLASS_NAME.equals(prefix)){prefix="""";}else {prefix+=""."";}print(""; "");if(globals){if(!globalModule){print(""export "");}print(""function "");}else {print(""public static "");}print(name).print(STATIC_INITIALIZATION_SUFFIX+""() : "");getAdapter().substituteAndPrintType(varDecl.vartype);print("" { "");int liCount=context.getStaticInitializerCount(clazz.sym);if(liCount>0){if(!globals){print(prefix+""__static_initialize(); "");}}if(varDecl.init!=null){print(""if(""+prefix).print(name).print("" == null) "").print(prefix).print(name).print("" = "");if(getScope().enumWrapperClassScope){JCNewClass newClass=(JCNewClass)varDecl.init;print(""new "").print(clazz.getSimpleName().toString()).print(""("").printArgList(newClass.args).print("")"");}else {print(varDecl.init);}print(""; "");}print(""return "").print(prefix).print(name).print(""; }"");if(!globals){String qualifiedClassName=getQualifiedTypeName(clazz.sym,globals);context.addTopFooterStatement((isBlank(qualifiedClassName)?"""":qualifiedClassName+""."")+name+STATIC_INITIALIZATION_SUFFIX+""();"");}}else {if(varDecl.init!=null){if(!(parent instanceof JCClassDecl&&getScope().innerClassNotStatic&&!Util.isConstantOrNullField(varDecl))){if(!globals&&parent instanceof JCClassDecl&&getScope().interfaceScope){report(varDecl,varDecl.name,JSweetProblem.INVALID_FIELD_INITIALIZER_IN_INTERFACE,varDecl.name,((JCClassDecl)parent).name);}else {if(!(getScope().hasConstructorOverloadWithSuperClass&&getScope().fieldsWithInitializers.contains(varDecl))){print("" = "");if(!getAdapter().substituteAssignedExpression(varDecl.type,varDecl.init)){print(varDecl.init);}}}}}}}}"
2480	"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){String addressString=""???????, ????????? ???????, ???????, ""+viewHolder.editText.getText().toString();if(validateAddress(addressString)&&!mapClick){LatLng latLng=AddressesConverter.getLocationFromAddress(getApplicationContext(),addressString);Marker marker=googleMap.addMarker(markerOptions.position(latLng));addAddressesToHashMap(latLng);getRoute();}}"
2481	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_story_element);Intent intent=getIntent();String storyElementId=intent.getStringExtra(""story-element-id"");originPosition=intent.getIntExtra(""origin-position"",-1);GlobalApplication application=(GlobalApplication)getApplicationContext();this.databaseHandler=application.getGlobalDatabaseHandler();StoryElement storyElement=databaseHandler.getStoryElementByStoryElementId(storyElementId);Story story=databaseHandler.getStoryByStoryElementId(storyElementId);String[] allIds=story.getStoryElementId();for(int i=0;i<allIds.length;i++){if(allIds[i].equals(storyElementId)){positionInStory=i;break;}}render(storyElement);nextStoryElementButton=(Button)findViewById(R.id.nextStoryButton);previousStoryElementButton=(Button)findViewById(R.id.previousStoryButton);backToMapButton=(Button)findViewById(R.id.backToMapButton);if(positionInStory<1){previousStoryElementButton.setVisibility(View.GONE);}else {previousStoryElementId=allIds[positionInStory-1];previousStoryElementButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    goToPreviousStory();  }});}if(positionInStory==allIds.length-1){nextStoryElementButton.setVisibility(View.GONE);}else {nextStoryElementId=allIds[positionInStory+1];nextStoryElementButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    goToNextStory();  }});}backToMapButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    goBackToMapStory();  }});speechInputHandler=new StoryElementSpeechInputHandler(this);btnSpeak=(ImageButton)findViewById(R.id.btnSpeak);btnSpeak.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    promptSpeechInput();  }});}"
2482	"public boolean check(String[] args){return prefix.size()+args_count==args.length&&ImmutableList.copyOf(args).subList(0,prefix.size()).equals(prefix);}"
2483	"@Override public DatabaseValue get(Object key){Entry<DatabaseKey,DatabaseValue> entry=null;if(key instanceof DatabaseKey){long optimistic=lock.tryOptimisticRead();entry=cache.ceilingEntry((DatabaseKey)key);if(!lock.validate(optimistic)){long stamp=lock.readLock();try{entry=cache.ceilingEntry((DatabaseKey)key);}finally{lock.unlockRead(stamp);}}}if(entry!=null&&!entry.getKey().isExpired()){return entry.getValue();}return null;}"
2484	"public void setIsWifiEnable(boolean isWifiEnable){isWifiP2pEnable=isWifiEnable;if(isRemainResult){remainWifiIsEnable=isWifiEnable;}if(mOnWiFiRecevieListener!=null){mOnWiFiRecevieListener.onWifiStatusResult(isWifiEnable);}else {if(!isWifiEnable){}}}"
2485	"@PUT @Path(""/send"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response send(String json){System.out.println(""Senden..."");try{System.out.println(json);Message msg=Message.fromJson(json);System.out.println(msg);if(msg.to!=null&&msg.from!=null&&msg.date!=null&&msg.text!=null){User user;User thisUser;if(!users.containsKey(msg.to)){user=new User(msg.to);users.put(msg.to,user);}else {user=users.get(msg.to);}if(!users.containsKey(msg.from)){thisUser=new User(msg.from);}else {thisUser=users.get(msg.to);}System.out.println(""Authentifizieren..."");if(thisUser.authenticateUser(msg.token)){msg=user.sendMessage(msg);}else {return Response.status(Response.Status.UNAUTHORIZED).build();}try{return Response.status(Response.Status.CREATED).entity(msg.toJson(true).toString()).build();}catch(JSONException e){e.printStackTrace();return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();}}}catch(ParseException e){}return Response.status(Response.Status.BAD_REQUEST).entity(""Message was not correctly formatted"").build();}"
2486	"public boolean validate(){if(value==null){return true;}try{String v=value;boolean decimal=Dictionary.ITEM_DECIMAL.equals(item.getDataType());if(decimal){if(!v.trim().matches(""^[-+]?[0-9]*[.]?[0-9]*$"")){throw new Exception(""Not valid number: ""+v);}}if(item.hasValueSets()){boolean found=false;for(ValueSet vs : item.getValueSets()){if(vs.containsKey(v)){found=true;break;}if(decimal&&item.isZeroFill()){String vv=v.replaceFirst(""^0*"","""");if(vv.isEmpty()){vv=""0"";}if(vs.containsKey(vv)){found=true;break;}}}if(!found){error=""[Col: ""+item.getName()+"" Val: ""+value+""]"";return false;}}}catch(Exception ex){error=""[Col: ""+item.getName()+"" Val: ""+value+"" (""+ex.getMessage()+"")]"";return false;}return true;}"
2487	"private void RegisterUser(){String email=EditTextEmail.getText().toString().trim();String password=EditTextPassword.getText().toString().trim();String Confirmpassword=EditTextConfirmPassword.getText().toString().trim();String phone=EditTextPhone.getText().toString().trim();if(TextUtils.isEmpty(email)){Toast.makeText(this,""Please enter an email ID"",Toast.LENGTH_SHORT).show();return ;}else {if(TextUtils.isEmpty(password)){Toast.makeText(this,""Please enter a password"",Toast.LENGTH_SHORT).show();return ;}else {if(TextUtils.isEmpty(Confirmpassword)||Confirmpassword!=password){Toast.makeText(this,""Passwords do not match! Try again"",Toast.LENGTH_SHORT).show();return ;}else {if(TextUtils.isEmpty(phone)){Toast.makeText(this,""Please enter a contact number"",Toast.LENGTH_SHORT).show();return ;}else {if(TextUtils.isDigitsOnly(phone)){Toast.makeText(this,""Please enter a valid contact number"",Toast.LENGTH_SHORT).show();return ;}}}}}ProgressDialog.setMessage(""Registering..."");ProgressDialog.show();mAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){  @Override public void onComplete(  @NonNull Task<AuthResult> task){    Log.d(TAG,""createUserWithEmail:onComplete:"" + task.isSuccessful());    if (!task.isSuccessful()) {      Toast.makeText(Register.this,""Registration Failed"",Toast.LENGTH_SHORT).show();    } else {      Toast.makeText(Register.this,""Registration Failed"",Toast.LENGTH_SHORT).show();    }  }});}"
2488	"public static void main(String[] args){Scanner sc=new Scanner(System.in);int T=sc.nextInt();while(T-->0){String inStr=sc.next();int len=inStr.length();boolean alreadyFound=false;int i=0,j=len-1;int removeIndex=-1;for(i=0,j=len-1;(i+1!=j&&i!=j&&i<=j);i++,j--){char i_char=inStr.charAt(i);char j_char=inStr.charAt(j);if(i_char!=j_char){if(inStr.charAt(i+1)==j_char&&i<=j){removeIndex=i;i++;continue;}else {if(i_char==inStr.charAt(j-1)&&j>=i){removeIndex=j;j--;continue;}else {System.out.println(-1);alreadyFound=true;break;}}}}if(!alreadyFound&&(i+1==j||i==j)&&removeIndex==-1){System.out.println(-1);}else {if(!alreadyFound&&(i+1==j||i==j)&&removeIndex!=-1){System.out.println(removeIndex);}}}}"
2489	"public void GO(GoogleMap googleMap){googleMap.clear();markers=new ArrayList<Marker>();Intent intent=getIntent(); final String fname=intent.getStringExtra(""file"");ActivityStat activityStat=null;if(fname!=null){mActivityList=deserialize(new File(fname));}else {mActivityList=(ArrayList<MyActivity>)intent.getSerializableExtra(""locations"");}if(mActivityList.size()>1){add1=MapUtil.getAddress(_ctx,mActivityList.get(0));add2=MapUtil.getAddress(_ctx,mActivityList.get(mActivityList.size()-1));marker_pos=mActivityList.size()-1;}Geocoder geocoder=new Geocoder(_ctx,Locale.getDefault());List<Address> addresses=null;try{addresses=geocoder.getFromLocation(mActivityList.get(0).latitude,mActivityList.get(0).longitude,1);}catch(Exception e){e.printStackTrace();Log.e(TAG,e.toString());}String addinfo=null;if(addresses==null||addresses.size()==0){Log.e(TAG,""No Addresses found !!"");}else {addinfo=addresses.get(0).getAddressLine(0).toString();}String inx_str=""Total ""+mActivityList.size()+"" locations"";tv_cursor.setText(inx_str);String date_str=ActivityUtil.getStartTime(mActivityList);activityStat=getActivityStat(mActivityList);if(activityStat!=null){String _minDist=String.format(""%.2f"",activityStat.distanceKm);String sinfo=""\n ""+date_str;tv_heading.setText(sinfo);tv_address.setText(addinfo);tv_distance.setText(_minDist);tv_duration.setText(activityStat.duration);tv_minperkm.setText(String.format(""  %.2f"",activityStat.minperKm));tv_carolies.setText(""   ""+activityStat.calories);}else {Toast.makeText(getApplicationContext(),""ERR: No Statistics Information !"",Toast.LENGTH_LONG).show();String _minDist=String.format(""-"");String sinfo=""\n ""+date_str+""\n  (""+_minDist+""Km)"";tv_heading.setText(sinfo);tv_distance.setText(_minDist);tv_duration.setText(""-"");tv_minperkm.setText(""-"");tv_carolies.setText(""-"");}if(!nomarker){drawMarkers(googleMap,mActivityList);}if(!notrack){drawTrack(googleMap,mActivityList);}if(!satellite){googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);}else {googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);}if(nomarker||notrack){drawStartMarker(googleMap,mActivityList);drawEndMarker(googleMap,mActivityList);}Display display=getWindowManager().getDefaultDisplay();DisplayMetrics metrics=new DisplayMetrics();display.getMetrics(metrics);int width=metrics.widthPixels;int height=metrics.heightPixels;boolean got_bound_wo_error=false;int try_cnt=0;do {try{Log.e(TAG,""Tying to get Bound with width:""+width+"", height:""+height);doBoundBuild(googleMap,width,height);got_bound_wo_error=true;}catch(Exception e){try_cnt++;Log.e(TAG,e.toString()+""Trying to get again... (try_cnt:""+try_cnt+"")"");}} while(!got_bound_wo_error&&try_cnt<3);if(!got_bound_wo_error){myzoom=16;moveCamera(googleMap,myzoom);}}"
2490	"private SimpleFilterTracker constructFilter(DataField attribute,FilterOperation op,Object value){if(attribute.getDataType()==DataType.DECIMAL){if(value!=null){WrappedBigDecimal wbd;if(value instanceof WrappedBigDecimal){wbd=(WrappedBigDecimal)value;}else {wbd=new WrappedBigDecimal(value.toString());if(!wbd.isSpecialValue()){wbd=wbd.setScale(attribute.getNumericScale(),BigDecimal.ROUND_HALF_UP);}}return new SimpleFilterTracker(attribute,op,wbd);}else {return new SimpleFilterTracker(attribute,op,null);}}else {return new SimpleFilterTracker(attribute,op,value);}}"
2491	"private void signIn(){username=mEdtUserName.getText().toString().trim();password=mEdtUserPassword.getText().toString().trim();mDBHelper.deleteKOTTable();if(mEdtUserName.getText().toString().trim().equals("""")){mEdtUserName.setError(""Username should not be empty"");}else {if(mEdtUserPassword.getText().toString().trim().equals("""")){mEdtUserPassword.setError(""Password should not be empty"");}else {if(!mAppManager.getUserName().equalsIgnoreCase(username)){mDBHelper.deleteAllTables();mAppManager.clearUserSessionData();mAppManager.setUsername(username);mAppManager.setPassword(password);showLoading();}else {if(mTerminalList.size()!=0){mTerminalId=mTerminalList.get(mCurrentTerminalSelection).getTerminalId();authenticate();}else {mDBHelper.deleteOrgRelatedTables();mAppManager.clearUserSessionData();mAppManager.setUsername(username);mAppManager.setPassword(password);showLoading();}}}}}"
2492	"@Override public boolean hasNext(){return nextPair!=null;}"
2493	"public void ackSpoutMsg(Executor executor,Task taskData,Long timeDelta,TupleInfo tupleInfo){try{ISpout spout=(ISpout)taskData.getTaskObject();int taskId=taskData.getTaskId();if(executor.getIsDebug()){LOG.info(""SPOUT Acking message {} {}"",tupleInfo.getId(),tupleInfo.getMessageId());}spout.ack(tupleInfo.getMessageId());new SpoutAckInfo(tupleInfo.getMessageId(),taskId,timeDelta).applyOn(taskData.getUserContext());if(timeDelta!=null){((SpoutExecutorStats)executor.getStats()).spoutAckedTuple(tupleInfo.getStream(),timeDelta);}}catch(Exception e){throw Utils.wrapInRuntime(e);}}"
2494	"void captureThumbnail(Canvas canvas){mSearchProviderLogoView.endAnimation();ViewUtils.captureBitmap(this,canvas);mSnapshotWidth=getWidth();mSnapshotHeight=getHeight();mSnapshotScrollY=mScrollView.getScrollY();mSnapshotMostVisitedChanged=false;}"
2495	"@Override public boolean isValid(int i,int j){if(!super.isValid(i,j)){return false;}if(!getWeightImage().isValid(i,j)){return false;}return weight.get(i,j).doubleValue()>0.0;}"
2496	"public static Tuple2<Map<Path,FilterPredicate>,Boolean> buildPathToFilterMap(SchemaUtils schemaUtils,View view,DirectedType directedType,SeededGraphFilters.IncludeIncomingOutgoingType includeIncomingOutgoingType,SeedMatching.SeedMatchingType seedMatchingType,Iterable<? extends ElementId> seeds,String dataDir,GraphIndex graphIndex) throws SerialisationException,OperationException{if(view==null){return noViewPathToFilter(includeIncomingOutgoingType,seedMatchingType,seeds,schemaUtils,graphIndex,dataDir);}else { final Set<String> viewEdgeGroups=view.getEdgeGroups(); final Set<String> viewEntityGroups=view.getEntityGroups();boolean needsValidation=false;if(viewEdgeGroups!=null||viewEntityGroups!=null){HashMap<Path,FilterPredicate> pathToFilter=new HashMap<>();if(viewEdgeGroups!=null){ final Tuple2<Map<Path,FilterPredicate>,Boolean> results=edgeViewPathToFilter(includeIncomingOutgoingType,seedMatchingType,directedType,seeds,schemaUtils,graphIndex,view,dataDir);if(results.get1()){needsValidation=true;}pathToFilter.putAll(results.get0());}if(viewEntityGroups!=null){ final Tuple2<Map<Path,FilterPredicate>,Boolean> results=entityViewPathToFilter(includeIncomingOutgoingType,seedMatchingType,directedType,seeds,schemaUtils,graphIndex,view,dataDir);if(results.get1()){needsValidation=true;}pathToFilter.putAll(results.get0());}return new Tuple2<>(pathToFilter,needsValidation);}else {return noViewPathToFilter(includeIncomingOutgoingType,seedMatchingType,seeds,schemaUtils,graphIndex,dataDir);}}}"
2497	"public void addUser(User userEntered){if(userEntered!=null){boolean found=false;for(User u : userList){if(u.Id.equals(userEntered.Id)){found=true;break;}}if(!found){userList.add(userEntered);if(adapter!=null){adapter.notifyDataSetChanged();}if(userList.size()!=0&&emptyRoom.getVisibility()==View.VISIBLE){emptyRoom.setVisibility(View.GONE);}}}}"
2498	"@Override public boolean onPrepareOptionsMenu(Menu menu){if(mCollectionDao.queryBuilder().where(CollectionDao.Properties.Id.eq(mId)).list().size()>0){getMenuInflater().inflate(R.menu.info_detail_collected,menu);}else {getMenuInflater().inflate(R.menu.info_detail,menu);}return super.onPrepareOptionsMenu(menu);}"
2499	"public boolean shouldPaint(){return DungeonMain.menuIndex==0;}"
2500	"public static boolean login(String UID,String pwd){DBManager dbManager=new DBManager();if(pwd!=null&&pwd.compareTo(dbManager.getPassword(UID))==0){return true;}else {return false;}}"
2501	"@Override public void onGetLiveRoomInfoDone(LiveRoomInfoEvent e){HashMap<String,Object> roomProperties=e.getProperties();if(!roomProperties.get(""hostUserName"").equals(player.getUserName())){Gdx.app.log(""MultiplayerSetupController"",""Updating room data to include our player."");String playersJson=(String)roomProperties.get(""players"");List<Player> playersList=getPlayersFromJson(playersJson);playersList.add(player);playersJson=new Gson().toJson(playersList);roomProperties.put(""players"",playersJson);if((e.getJoinedUsers().length+1)==RACE_SIZE){Gdx.app.log(""MultiplayerSetupController"",""Locking the room to prevent more players from joining"");roomProperties.put(""started"",true);}warpClient.updateRoomProperties(roomId,roomProperties,null);}else {if(e.getJoinedUsers().length==RACE_SIZE){raceReady();}}}"
2502	"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){int currentNumberOfOrders=shared.getInt(""CURRENT_NUMBER_OF_ORDERS"",10);int numberOfOrders=shared.getInt(""NUMBER_OF_ORDERS"",10);SharedPreferences.Editor editor=shared.edit();if(initialOrderStatus==0&&isChecked&&currentNumberOfOrders>0){editor.putInt(""CURRENT_NUMBER_OF_ORDERS"",currentNumberOfOrders-1);}else {if(initialOrderStatus==1&&!isChecked&&currentNumberOfOrders<numberOfOrders){editor.putInt(""CURRENT_NUMBER_OF_ORDERS"",currentNumberOfOrders+1);}}editor.commit();dbHelper.updateDelivered(order);if(!isChecked){requestPermission();}}"
2503	"@Override public int compare(GencodeFuncotation a,GencodeFuncotation b){if(isFuncotationInTranscriptList(a,userRequestedTranscripts)&&(!isFuncotationInTranscriptList(b,userRequestedTranscripts))){return -1;}else {if((!isFuncotationInTranscriptList(a,userRequestedTranscripts))&&isFuncotationInTranscriptList(b,userRequestedTranscripts)){return 1;}else {if((b.getVariantClassification().equals(GencodeFuncotation.VariantClassification.IGR))&&(!a.getVariantClassification().equals(GencodeFuncotation.VariantClassification.IGR))){return -1;}else {if((a.getVariantClassification().equals(GencodeFuncotation.VariantClassification.IGR))&&(!b.getVariantClassification().equals(GencodeFuncotation.VariantClassification.IGR))){return 1;}else {if(a.getVariantClassification().getSeverity()<b.getVariantClassification().getSeverity()){return -1;}else {if(a.getVariantClassification().getSeverity()>b.getVariantClassification().getSeverity()){return 1;}}}}}}if((a.getLocusLevel()!=null)&&(b.getLocusLevel()==null)){return -1;}else {if((a.getLocusLevel()==null)&&(b.getLocusLevel()!=null)){return 1;}else {if((a.getLocusLevel()!=null)&&(b.getLocusLevel()!=null)&&(!a.getLocusLevel().equals(b.getLocusLevel()))){return a.getLocusLevel().compareTo(b.getLocusLevel());}else {if((a.getApprisRank()!=null)&&(b.getApprisRank()==null)){return -1;}else {if((a.getApprisRank()==null)&&(b.getApprisRank()!=null)){return 1;}else {if((a.getApprisRank()!=null)&&(b.getApprisRank()!=null)&&(!a.getApprisRank().equals(b.getApprisRank()))){return a.getApprisRank().compareTo(b.getApprisRank());}else {if((a.getTranscriptLength()!=null)&&(b.getTranscriptLength()==null)){return -1;}else {if((a.getTranscriptLength()==null)&&(b.getTranscriptLength()!=null)){return 1;}else {if((a.getTranscriptLength()!=null)&&(b.getTranscriptLength()!=null)&&(!a.getTranscriptLength().equals(b.getTranscriptLength()))){return b.getTranscriptLength().compareTo(a.getTranscriptLength());}else {if((a.getAnnotationTranscript()!=null)&&(b.getAnnotationTranscript()==null)){return -1;}else {if((a.getAnnotationTranscript()==null)&&(b.getAnnotationTranscript()!=null)){return 1;}else {if((a.getAnnotationTranscript()==null)&&(b.getAnnotationTranscript()==null)){return -1;}else {return a.getAnnotationTranscript().compareTo(b.getAnnotationTranscript());}}}}}}}}}}}}}"
2504	"private boolean isFirstPriority(Unit other){return (!other.getType().isBuilding()||other.getType()==UnitType.Terran_Bunker||other.getType()==UnitType.Protoss_Photon_Cannon||other.getType()==UnitType.Zerg_Sunken_Colony||other.getType()==UnitType.Zerg_Spore_Colony||other.getType().isSpellcaster());}"
2505	"@Override public boolean analyze(PageAnalysis analysis,Collection<CheckErrorResult> errors,boolean onlyAutomatic){if(analysis==null){return false;}String contents=analysis.getContents();int maxLength=contents.length();int currentIndex=contents.indexOf(""[["");boolean result=false;while(currentIndex>=0){boolean shouldCount=true;if(shouldCount){PageElementInternalLink link=analysis.isInInternalLink(currentIndex);if((link!=null)&&(link.getBeginIndex()==currentIndex)){shouldCount=false;}}if(shouldCount){PageElementImage image=analysis.isInImage(currentIndex);if((image!=null)&&(image.getBeginIndex()==currentIndex)){shouldCount=false;}}if(shouldCount){PageElementCategory category=analysis.isInCategory(currentIndex);if((category!=null)&&(category.getBeginIndex()==currentIndex)){shouldCount=false;}}if(shouldCount){PageElementLanguageLink link=analysis.isInLanguageLink(currentIndex);if((link!=null)&&(link.getBeginIndex()==currentIndex)){shouldCount=false;}}if(shouldCount){PageElementInterwikiLink link=analysis.isInInterwikiLink(currentIndex);if((link!=null)&&(link.getBeginIndex()==currentIndex)){shouldCount=false;}}if(shouldCount){PageElementExternalLink link=analysis.isInExternalLink(currentIndex+1);if((link!=null)&&(link.getBeginIndex()==currentIndex+1)){shouldCount=false;}}if(shouldCount){if((analysis.isInComment(currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_NOWIKI,currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_MATH,currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_MATH_CHEM,currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_SCORE,currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_SOURCE,currentIndex)!=null)||(analysis.getSurroundingTag(PageElementTag.TAG_WIKI_SYNTAXHIGHLIGHT,currentIndex)!=null)||(analysis.isInTag(currentIndex)!=null)){shouldCount=false;}}if(shouldCount){PageElementTemplate template=analysis.isInTemplate(currentIndex+2);if((template!=null)&&(contents.startsWith(""]]"",template.getEndIndex()))){shouldCount=false;}}if(shouldCount){if(errors==null){return true;}result=true;int tmpIndex=currentIndex+2;boolean errorReported=false;boolean finished=false;while(!finished&&(tmpIndex<maxLength)){char tmpChar=contents.charAt(tmpIndex);if(REJECTED_CHARS.indexOf(tmpChar)>=0){finished=true;}else {if(tmpChar==']'){int tmpIndex2=tmpIndex+1;while((tmpIndex2<maxLength)&&(contents.charAt(tmpIndex2)!=']')&&(REJECTED_CHARS.indexOf(contents.charAt(tmpIndex2))<0)){tmpIndex2++;}String suffix="""";if((tmpIndex2<maxLength)&&(contents.charAt(tmpIndex2)==']')){suffix=contents.substring(tmpIndex+1,tmpIndex2+1);}else {tmpIndex2=tmpIndex;}CheckErrorResult errorResult=createCheckErrorResult(analysis,currentIndex,tmpIndex2+1);boolean protocolFound=PageElementExternalLink.isPossibleProtocol(contents,currentIndex+2);if(protocolFound){errorResult.addReplacement(contents.substring(currentIndex+1,tmpIndex2+1));}errorResult.addReplacement(contents.substring(currentIndex,tmpIndex+1)+""]""+suffix);if(suffix.length()>0){errorResult.addReplacement(contents.substring(currentIndex,tmpIndex)+suffix+""]"");}errors.add(errorResult);errorReported=true;finished=true;}else {if(tmpChar=='}'){int lastChar=tmpIndex;if((lastChar+1<maxLength)&&(contents.charAt(lastChar+1)=='}')){lastChar++;}CheckErrorResult errorResult=createCheckErrorResult(analysis,currentIndex,lastChar+1);errorResult.addReplacement(contents.substring(currentIndex,tmpIndex)+""]]"");errorResult.addReplacement(""{{""+contents.substring(currentIndex+2,tmpIndex)+""}}"");errors.add(errorResult);errorReported=true;finished=true;}}}tmpIndex++;}if(!errorReported){CheckErrorResult errorResult=createCheckErrorResult(analysis,currentIndex,currentIndex+2);errorResult.addReplacement("""",GT._(""Delete""));errors.add(errorResult);}}currentIndex=contents.indexOf(""[["",currentIndex+2);}for(PageElementInternalLink link : analysis.getInternalLinks()){String text=link.getText();if(text!=null){text=cleanText(text);if(text!=null){if(errors==null){return true;}result=true;CheckErrorResult errorResult=createCheckErrorResult(analysis,link.getBeginIndex(),link.getEndIndex());errorResult.addReplacement(PageElementInternalLink.createInternalLink(link.getLink(),link.getAnchor(),text));errors.add(errorResult);}}}for(PageElementImage image : analysis.getImages()){String text=image.getDescription();String modifiedText=cleanText(text);String alt=image.getAlternateDescription();String modifiedAlt=cleanText(alt);if((modifiedText!=null)||(modifiedAlt!=null)){if(errors==null){return true;}result=true;CheckErrorResult errorResult=createCheckErrorResult(analysis,image.getBeginIndex(),image.getEndIndex());errorResult.addReplacement(image.getDescriptionReplacement((modifiedText!=null)?modifiedText:text,(modifiedAlt!=null)?modifiedAlt:alt));errors.add(errorResult);}}for(PageElementExternalLink link : analysis.getExternalLinks()){int begin=link.getBeginIndex();if(link.hasSquare()){if((begin>0)&&(contents.charAt(begin-1)=='[')){int end=link.getEndIndex();if((end>=contents.length())||(contents.charAt(end)!=']')){if(errors==null){return true;}result=true;CheckErrorResult errorResult=createCheckErrorResult(analysis,begin-1,begin);errorResult.addReplacement(""["");errors.add(errorResult);}}}}return result;}"
2506	"private void didSwipe(MotionEvent event){switch (event.getAction()){case MotionEvent.ACTION_DOWN :x1=event.getX();break;case MotionEvent.ACTION_UP :x2=event.getX();if(x2==x1){break;}if(x2>x1){presenter.moveRight();}else {presenter.moveLeft();}break;}}"
2507	"@Override public void action(Invoker invoker,ArgumentList arguments,MessageEvent event){ final boolean set=arguments.isConsumed(Standard.ARGUMENT_SET,ArgumentConsumeType.CONSUME_FIRST_IGNORE_CASE); final boolean get=arguments.isConsumed(Standard.ARGUMENT_GET,ArgumentConsumeType.CONSUME_FIRST_IGNORE_CASE); final boolean remove=arguments.isConsumed(Standard.ARGUMENT_REMOVE,ArgumentConsumeType.CONSUME_FIRST_IGNORE_CASE); final boolean list=arguments.isConsumed(Standard.ARGUMENT_LIST,ArgumentConsumeType.CONSUME_FIRST_IGNORE_CASE);long guild_id=0;long user_id=0;if(set&&arguments.isSize(3,-1)){String first=arguments.getFirst();guild_id=Standard.resolveGuildId(event.getGuild(),first);if(guild_id>0){arguments.consumeFirst();}user_id=Standard.resolveUserId(event.getAuthor(),(guild_id>0&&arguments.isSize(3,-1))?arguments.getFirst():first);if(user_id>0){arguments.consumeFirst();}}else {if((remove||get)&&arguments.isSize(2,-1)){String first=arguments.getFirst();guild_id=Standard.resolveGuildId(event.getGuild(),first);if(guild_id>0){arguments.consumeFirst();}user_id=Standard.resolveUserId(event.getAuthor(),(guild_id>0&&arguments.isSize(2,-1))?arguments.getFirst():first);if(user_id>0){arguments.consumeFirst();}}else {if(list&&arguments.isSize(1,-1)){String first=arguments.getFirst();guild_id=Standard.resolveGuildId(event.getGuild(),first);if(guild_id>0){arguments.consumeFirst();}user_id=Standard.resolveUserId(event.getAuthor(),(guild_id>0&&arguments.isSize(1,-1))?arguments.getFirst():first);if(user_id>0){arguments.consumeFirst();}}}}guild_id=Math.max(0,guild_id);user_id=Math.max(0,user_id); final ConfigType configType=ConfigType.of(guild_id,user_id); final Guild guild=Standard.getGuildById(guild_id); final User user=Standard.getUserById(user_id);String key="""";String value=null;String value_temp=null;boolean sendPrivate=false;if(set){key=arguments.consumeFirst();if(!isPermissionGranted(configType,key,event)){PermissionHandler.sendNoPermissionMessage(event);return ;}sendPrivate=isPrivateNeeded(configType,key,event);value=arguments.consumeFirst();value_temp=Config.CONFIG.getValue(guild_id,user_id,key);Config.CONFIG.setValue(guild_id,user_id,key,value); final MessageEmbed message=Standard.getMessageEmbed(Color.YELLOW,getText(guild_id,user_id,guild,user,configType,""setted"",event)).addField(""\""""+key+""\"" old:"",""""+value_temp,false).addField(""\""""+key+""\"" new:"",""""+value,false).build();if(sendPrivate){Util.sendPrivateMessage(event.getAuthor(),message);}else {event.sendMessage(message);}}else {if(get){key=arguments.consumeFirst();if(!isPermissionGranted(configType,key,event)){PermissionHandler.sendNoPermissionMessage(event);return ;}sendPrivate=isPrivateNeeded(configType,key,event);if(arguments.isSize(1)){value_temp=arguments.consumeFirst();} final String value_temp_=value_temp;value=Config.CONFIG.getValue(guild_id,user_id,key,() -> value_temp_); final MessageEmbed message=Standard.getMessageEmbed(Color.YELLOW,getText(guild_id,user_id,guild,user,configType,""getted"",event)).addField(key,value,false).build();if(sendPrivate){Util.sendPrivateMessage(event.getAuthor(),message);}else {event.sendMessage(message);}}else {if(remove){key=arguments.consumeFirst();if(!isPermissionGranted(configType,key,event)){PermissionHandler.sendNoPermissionMessage(event);return ;}sendPrivate=isPrivateNeeded(configType,key,event);value=Config.CONFIG.getValue(guild_id,user_id,key); final ConfigData configData=Config.CONFIG.getConfigData(guild_id,user_id,key);if(configData!=null){configData.delete();} final MessageEmbed message=Standard.getMessageEmbed(Color.YELLOW,getText(guild_id,user_id,guild,user,configType,""removed""+(configData==null?"" not"":""""),event)).addField(key,value,false).build();if(sendPrivate){Util.sendPrivateMessage(event.getAuthor(),message);}else {event.sendMessage(message);}}else {if(list){sendPrivate=isPrivateNeeded(configType,null,event); final MessageEmbed message=Config.CONFIG.toEmbedBuilder(guild_id,user_id).setDescription(getText(guild_id,user_id,guild,user,configType,""listed"",event)).build();if(sendPrivate){Util.sendPrivateMessage(event.getAuthor(),message);}else {event.sendMessage(message);}}}}}}"
2508	"@Override public boolean signUp(String name,String pass,String email) throws InvalidInputParameters,InvalidIdException{if(name==null||name.length()==0){throw new InvalidInputParameters(""Incorrect user name"");}if(pass==null||pass.length()==0){throw new InvalidInputParameters(""Incorrect user pass"");}User u=new User.UserBuilder().setName(pass).setPass(pass).setEmail(email).build();return userDB.add(u);}"
2509	"private void processOnMore(){RecyclerView.LayoutManager layoutManager=mRecycler.getLayoutManager();int lastVisibleItemPosition=getLastVisibleItemPosition(layoutManager);int visibleItemCount=layoutManager.getChildCount();int totalItemCount=layoutManager.getItemCount();if(((totalItemCount-lastVisibleItemPosition)<=ITEM_LEFT_TO_LOAD_MORE||(totalItemCount-lastVisibleItemPosition)==0&&totalItemCount>visibleItemCount)&&!isLoadingMore){isLoadingMore=true;if(mOnMoreListener!=null){mMoreProgress.setVisibility(View.VISIBLE);mOnMoreListener.onMoreAsked(mRecycler.getAdapter().getItemCount(),ITEM_LEFT_TO_LOAD_MORE,lastVisibleItemPosition);}}}"
2510	"public static void addRoommateData(Connection sqlConn,EtoAuthentication auth,DbClient client,RoommateData data) throws Exception{log.info(""Adding roommate matching criteria..."");int programId=getAlphaProgramId(""home-finder"");if(programId==0){return ;}EtoServiceUtil.setCurrentProgram(programId,auth);JSONObject input=new JSONObject();input.put(""TouchPointID"",new Integer(54));input.put(""SubjectID"",client.etoSubjectId);Date now=new Date();input.put(""ResponseCreatedDate"",""/Date(""+now.getTime()+"")/"");input.put(""ProgramID"",new Integer(programId));JSONArray respElements=new JSONArray();JSONObject ele=new JSONObject();JSONArray respElementChoices=new JSONArray();JSONObject choice=new JSONObject();respElements.add(createYesNoElement(data.rentalSubsidy,814,1277,1278));if(data.rentalSubsidy){boolean psh=false;if(data.subsidyType.length()>0&&data.subsidyType.equalsIgnoreCase(""PSH"")){psh=true;}respElements.add(createYesNoElement(psh,815,1279,1280));ele=new JSONObject();ele.put(""ElementType"",new Integer(4));choice=new JSONObject();if(psh){ele.put(""ElementID"",new Integer(816));switch (data.pshSource){case ""CoC"" :choice.put(""TouchPointElementChoiceID"",new Integer(1281));break;case ""HUD VASH"" :choice.put(""TouchPointElementChoiceID"",new Integer(1282));break;case ""MHSA"" :choice.put(""TouchPointElementChoiceID"",new Integer(1283));break;case ""Section 8"" :choice.put(""TouchPointElementChoiceID"",new Integer(1284));break;default :choice.put(""TouchPointElementChoiceID"",new Integer(1285));break;}}else {ele.put(""ElementID"",new Integer(817));switch (data.rrhSource){case ""CoC"" :choice.put(""TouchPointElementChoiceID"",new Integer(1286));break;case ""ESG"" :choice.put(""TouchPointElementChoiceID"",new Integer(1287));break;case ""SSVF"" :choice.put(""TouchPointElementChoiceID"",new Integer(1288));break;default :choice.put(""TouchPointElementChoiceID"",new Integer(1289));break;}}respElementChoices=new JSONArray();respElementChoices.add(choice);ele.put(""ResponseElementChoices"",respElementChoices);respElements.add(ele);}if(data.monthlyIncomeAmount.length()>0||data.incomeSource.length()>0){respElements.add(createYesNoElement(true,818,1290,1291));}ele=new JSONObject();ele.put(""ElementID"",new Integer(819));ele.put(""ElementType"",new Integer(5));ele.put(""Value"",data.monthlyIncomeAmount);respElements.add(ele);ele=new JSONObject();ele.put(""ElementID"",new Integer(820));ele.put(""ElementType"",new Integer(5));ele.put(""Value"",data.incomeSource);respElements.add(ele);respElements.add(createYesNoElement(data.cleanupAfterThemselves,821,1292,1293));respElements.add(createYesNoElement(data.quietBy10pm,822,1294,1295));respElements.add(createYesNoElement(data.likeToTalk,823,1296,1297));respElements.add(createYesNoElement(data.keepToThemselves,824,1298,1299));respElements.add(createYesNoElement(data.noPet,825,1300,1301));respElements.add(createYesNoElement(data.noOvernightGuest,826,1302,1303));respElements.add(createYesNoElement(data.noSmoke,827,1304,1305));respElements.add(createYesNoElement(data.noAlcohol,828,1306,1307));respElements.add(createYesNoElement(data.noMarijuana,829,1308,1309));respElements.add(createYesNoElement(data.noIllegalSubstance,830,1310,1311));input.put(""ResponseElements"",respElements);String jsonStr=input.toString(""TouchPointResponse"",input);String inputStr=""{""+jsonStr+""}"";log.info(inputStr);ClientResponse response=EtoServiceUtil.postRequest(""https://services.etosoftware.com/API/TouchPoint.svc/TouchPointResponseAdd/"",auth,inputStr);if(response.getStatus()!=200){log.error(response.toString());}else {Long respId=EtoServiceUtil.parseResponse(response,""AddTouchPointResponseResult"",""TouchPointResponseID"");log.info(""Home Finder/Roommate Matching response ID: ""+respId);}DbRoommate roommate=DbRoommate.findByClientId(sqlConn,client.id);if(roommate==null){roommate=new DbRoommate();}roommate.clientId=client.id;roommate.rentalSubsidy=data.rentalSubsidy;roommate.subsidyType=data.subsidyType;roommate.pshSource=data.pshSource;roommate.rrhSource=data.rrhSource;roommate.incomeSource=data.incomeSource;roommate.monthlyIncomeAmount=data.monthlyIncomeAmount;roommate.cleanupAfterThemselves=data.cleanupAfterThemselves;roommate.quietBy10pm=data.quietBy10pm;roommate.likeToTalk=data.likeToTalk;roommate.keepToThemselves=data.keepToThemselves;roommate.noPet=data.noPet;roommate.noOvernightGuest=data.noOvernightGuest;roommate.noSmoke=data.noSmoke;roommate.noAlcohol=data.noAlcohol;roommate.noMarijuana=data.noMarijuana;roommate.noIllegalSubstance=data.noIllegalSubstance;if(roommate.id==0){log.info(""Inserting new roommate record..."");roommate.insert(sqlConn);}else {log.info(""Updating existing roommate record (id: ""+roommate.id+"")..."");roommate.update(sqlConn);}}"
2511	"public PersistenceState getFieldPersistenceState(Field object,PersistenceNameType spec,EntityExecutionContext entityExecutionContext,Connection connection) throws UPAException{PersistenceState status=PersistenceState.UNKNOWN;FlagSet<FieldModifier> fieldModifiers=object.getModifiers();if((object.getDataType() instanceof ManyToOneType)){status=PersistenceState.TRANSIENT;}else {if(fieldModifiers.contains(FieldModifier.TRANSIENT)){status=PersistenceState.TRANSIENT;}else {String tableName=getPersistenceName(object.getEntity());String columnName=getPersistenceName(object);status=PersistenceState.UNKNOWN;try{ResultSet rs=null;try{String catalog=connection.getCatalog();String schema=connection.getSchema();rs=connection.getMetaData().getColumns(catalog,schema,getIdentifierStoreTranslator().translateIdentifier(tableName),getIdentifierStoreTranslator().translateIdentifier(columnName));if(rs.next()){String COLUMN_NAME=rs.getString(""COLUMN_NAME"");int DATA_TYPE=rs.getInt(""DATA_TYPE"");status=PersistenceState.VALID;}}finally{if(rs!=null){rs.close();}}}catch(SQLException ex){throw createUPAException(ex,""UnableToGetEntityStorageStatus"",""Column ""+tableName+"".""+columnName);}}}if(status!=PersistenceState.VALID&&status!=PersistenceState.TRANSIENT){log.log(Level.FINE,""FieldStorageStatus {0} {1}"",new Object{object,status});}return status;}"
2512	"private Map<String,Object> bindAnnotationConfiurations(FacesContext context,String graphJSVar,Dygraph dygraph){Map<String,Object> map=new HashMap<String,Object>();AnnotationConfigurations configurations=null;Object dataModel=dygraph.getDyDataModel();if(dataModel instanceof DataModel){DataModel dyDataModel=(DyDataModel)dataModel;if(dyDataModel!=null){configurations=dyDataModel.getAnnotationConfigurations();}}else {if(dataModel instanceof DataSeries){DataSeries dataseries=(DataSeries)dataModel;if(dataseries!=null){configurations=dataseries.getAnnotationConfigurations();}}}if(configurations!=null){String clickHandler=configurations.getClickHandler();if(clickHandler!=null&&!clickHandler.isEmpty()){String annoClick=getScript(context,dygraph,Dygraph.EVENT_ANNOCLICKED,graphJSVar);map.put(""annotationClickHandler"",""dyAnnotationClickHandlerFn('""+clickHandler+""',\""""+annoClick+""\"",'""+graphJSVar+""')"");}String dblClickHandler=configurations.getDblClickHandler();if(dblClickHandler!=null&&!dblClickHandler.isEmpty()){String dblclick=getScript(context,dygraph,Dygraph.EVENT_ANNODBLCLICKED,graphJSVar);map.put(""annotationDblClickHandler"",""dyAnnotationDblClickHandlerFn('""+clickHandler+""',\""""+dblclick+""\"",'""+graphJSVar+""')"");}String mouseOutHandler=configurations.getMouseOutHandler();if(mouseOutHandler!=null&&!mouseOutHandler.isEmpty()){map.put(""annotationMouseOutHandler"",""dyAnnotationMouseOutHandlerFn('""+clickHandler+""')"");}String mouseOverHandler=configurations.getMouseOverHandler();if(mouseOverHandler!=null&&!mouseOverHandler.isEmpty()){map.put(""annotationMouseOverHandler"",""dyannotationMouseOverHandlerFn('""+clickHandler+""')"");}map.put(""displayAnnotations"",configurations.getShowAnnotations());}return map;}"
2513	"public boolean isHintsAdded(HTMLPanel hintsContainer){boolean hintsAdded=false;hintsListForProfanity=new ArrayList<ProfanityCheckDo>();if(hintsContainer.getWidgetCount()>=1){for(int i=0;i<hintsContainer.getWidgetCount();i++){ final AddHintsView addHints=(AddHintsView)hintsContainer.getWidget(i);ProfanityCheckDo profanitymodel=new ProfanityCheckDo();profanitymodel.setQuestionID(Integer.toString(i));String hintText=addHints.hintTextBox.getContent().toString().trim().replaceAll(""&nbsp;"","" "");hintText=hintText.replaceAll(""\\<.*?>"","""");if(hintText!=null&&!hintText.trim().equals("""")){String hintsText=addHints.hintTextBox.getContent().replaceAll(""\\<.*?>"","""");if(hintsText.trim().length()>ANSWER_CHOICE_HINTS_TEXT_LENGTH){Document.get().getElementById(addHints.hintTextBox.getID()+""_message"").setInnerText("""");addHints.errorMessageforHints.setText(ERROR_MSG_HINTS_LENGTH);hintsAdded=true;isAddBtnClicked=true;}else {hintsAdded=false;isAddBtnClicked=true;addHints.errorMessageforHints.setText("""");profanitymodel.setQuestionText(addHints.hintTextBox.getContent());}}else {addHints.errorMessageforHints.setText(ERROR_MSG_HINTS);hintsAdded=true;isAddBtnClicked=true;}hintsListForProfanity.add(profanitymodel);}}return hintsAdded;}"
2514	"protected void endPlayerTurn(){if(deck.getDeckSize()==0&&board.getNumOfUnrevealedCard()==0){gameOver=true;if(players[0].getScore()>players[1].getScore()){winnerPlayer=0;}else {winnerPlayer=1;}}this.roundCounter++;if(isGoldFishMode){board.ChangeAllCardsToUnreveal();}if(!isComputerMode()&&players[getCurrentPlayerTurn()] instanceof ComputerPlayer){((ComputerPlayer)players[getCurrentPlayerTurn()]).playTurn();}}"
2515	"@Override protected void onHandleIntent(Intent intent){Bundle extras=intent.getExtras();GoogleCloudMessaging gcm=GoogleCloudMessaging.getInstance(this);String messageType=gcm.getMessageType(intent);if(!extras.isEmpty()){if(GoogleCloudMessaging.MESSAGE_TYPE_MESSAGE.equals(messageType)){String number=extras.getString(""number"");String message=extras.getString(""message"");if(number!=null&&number.length()>0&&message!=null&&message.length()>0){try{SmsManager smsManager=SmsManager.getDefault();smsManager.sendTextMessage(number,null,message,null,null);String result=number+"": ""+message;Log.i(TAG,result);sendNotification(result);ContentValues values=new ContentValues();values.put(""address"",number);values.put(""body"",message);getApplicationContext().getContentResolver().insert(Uri.parse(""content://sms/sent""),values);}catch(Exception ex){Log.e(TAG,ex.toString());}}}}SmsBroadcastReceiver.completeWakefulIntent(intent);}"
2516	"@Override public boolean isApplicableFor(Component component,ComponentRenderPass pass){return component instanceof AreaComponent&&pass instanceof FillPass&&color.equals(((FillPass)pass).getColor((AreaComponent)component));}"
2517	"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){if(holder instanceof ReverseViewHolder){ final ReverseModel rev=reverseModelList.get(position);if(!isPaidMember){Glide.with(context).load(R.drawable.default_drawer).bitmapTransform(new BlurTransformation(context)).placeholder(R.drawable.default_drawer).error(R.drawable.default_drawer).fitCenter().into(((ReverseViewHolder)holder).dp);}else {Glide.with(context).load(rev.getImg_url()).placeholder(R.drawable.default_drawer).error(R.drawable.default_drawer).fitCenter().into(((ReverseViewHolder)holder).dp);}((ReverseViewHolder)holder).name.setText(rev.getName());((ReverseViewHolder)holder).age.setText(String.valueOf(rev.getAge())+"" yrs"");((ReverseViewHolder)holder).education.setText(rev.getEducationDegree());((ReverseViewHolder)holder).city.setText(rev.getLocation());((ReverseViewHolder)holder).dp.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent i=new Intent(context,UserProfileActivity.class);    i.putExtra(""from"",""reverseMatching"");    i.putExtra(""customerNo"",rev.getCustomerNo());    context.startActivity(i);  }});((ReverseViewHolder)holder).name.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent i=new Intent(context,UserProfileActivity.class);    i.putExtra(""from"",""reverseMatching"");    i.putExtra(""customerNo"",rev.getCustomerNo());    context.startActivity(i);  }});}}"
2518	"@Search() public List<Patient> searchPatient(StringType familyName,StringType givenName,StringType gender,DateParam birthDate,TokenParam identifierToken){try{if(identifierToken.getSystem()==null){throw new DataFormatException(""Incomplete identifier"");}JSONObject searchParams=new JSONObject();if(familyName!=null){searchParams.put(""family"",familyName.getValue());}if(givenName!=null){searchParams.put(""given"",givenName.getValue());}if(gender!=null){searchParams.put(""gender"",gender.getValue());}if(birthDate!=null){searchParams.put(""birthdate"",birthDate.getValueAsString());}if(identifierToken!=null){searchParams.put(""identifier_domain"",identifierToken.getSystem());searchParams.put(""identifier_value"",identifierToken.getValue());}LOGGER.info(""FamilyName: ""+familyName);LOGGER.info(""GivenName: ""+givenName);LOGGER.info(""Gender: ""+gender);LOGGER.info(""BirthDate: ""+birthDate);LOGGER.info(""Identifiers: ""+identifierToken);List<Patient> patients=new ArrayList<Patient>();return patients;}catch(DataFormatException e){LOGGER.info(""Invalid Parameter Received"",e);throw new InvalidRequestException(e.getMessage());}catch(Exception e){LOGGER.info(""Exception Caught"",e);throw new InternalErrorException(e.getMessage());}}"
2519	"public Input getLastPressedKey(){return hasLastPressedKey?lastPressedKey:null;}"
2520	"@Override public boolean handleMessage(Telegram msg){switch (msg.message){case EntityMsg.HAS_MOVED :if(targetEntity==msg.sender&&msg.sender!=null&&state==BehaviorState.CHASE){if(targetEntity.getCurrentTile()!=lastTargetTile){lastTargetTile=targetEntity.currentTile;this.goTo(targetEntity.position);baseSpeed=getBehaviorSpeed(behaviorTimeLeft);}return true;}else {return false;}case EntityMsg.HABITED_NOTICE :if(msg.sender instanceof Habitable){Habitable habitable=(Habitable)msg.sender;if(!eligibleTargets.contains(habitable,false)){if(vicinity.getNeighborEntities().contains(habitable,false)){this.entitySightNotice(habitable);}}return true;}else {return false;}case EntityMsg.VACATED_NOTICE :if(msg.sender instanceof Habitable){Habitable habitable=(Habitable)msg.sender;if(eligibleTargets.contains(habitable,false)){eligibleTargets.removeValue(habitable,false);if(habitable==targetEntity&&state==BehaviorState.CHASE){targetEntity=null;this.switchTo(BehaviorState.WANDER,currentTile);}}return true;}else {return false;}default :return false;}}"
2521	"@Override public boolean onPrepareOptionsMenu(Menu menu){menuBack=menu.findItem(R.id.IDM_BACK);menuSave=menu.findItem(R.id.IDM_SAVE).setEnabled(false);menuFacebook=menu.findItem(R.id.IDM_FACEBOOK);menuGoogle=menu.findItem(R.id.IDM_GOOGLE);if(!isOnline){menuFacebook.setVisible(false);menuGoogle.setVisible(false);}else {menuFacebook.setVisible(true);menuGoogle.setVisible(true);}if(detailsFragment==null){menuBack.setVisible(false);menuSave.setVisible(false);menuFacebook.setVisible(false);menuGoogle.setVisible(false);}return super.onPrepareOptionsMenu(menu);}"
2522	"public long persistedIdOf(Object record){Long id=Beany.getIdIfExists(record);if(id==null){return insert(record);}else {return id;}}"
2523	"@Override public void onCallEnded(SipAudioCall call){System.out.println(""On call End ""+call);if(call==sipCaller){System.out.println(""Dismiss the calling screen"");tempCaller=null;T.cancel();Activity callingActivity=Calling.getActivity();callingActivity.finish();Calling.player.stop();}else {System.out.println(""Don't dismiss the calling screen"");}}"
2524	"private static void analyzeRange(Lexeme range) throws WrongRangeException{ final Matcher matcher=Pattern.compile(Parser.RE_NUM).matcher(range.getValue());Double d[]={null,null,null};int i=0;while(matcher.find()){d[i]=(Double.valueOf(range.getValue().substring(matcher.start(),matcher.end())));++i;}if((i==2&&d[0]>d[1])||(i==3&&Math.signum(d[1]-d[0])!=Math.signum(d[2]))){throw new WrongRangeException();}}"
2525	"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){setSelectedPatientList(patientListsToShow.get(position));currentPage=1;adapter.clearItems();if(selectedPatientList.getUuid()==null){showNoPatientListSelected(true);setNumberOfPatientsView(0);List<PatientListContext> patientListContextList=new ArrayList<>();updatePatientListData(patientListContextList,false);}else {showNoPatientListSelected(false);mPresenter.getPatientListData(selectedPatientList.getUuid(),1,false);}}"
2526	"public void setDef(BlockPosition position){assert (position.pos%2==0):""Was not a definition"";LiveRange lifetime=getLifetimeInBlock(position.block);defAndUses.add(position);assert (lifetime!=null):""There should be no defs without a later use."";setLiveRange(lifetime.from(position.pos));}"
2527	"@Path(RootResource.APPLICATION_ID_PATH) public ApplicationResource getApplicationById(String applicationIdStr) throws Exception{if(""options"".equalsIgnoreCase(request.getMethod())){throw new NoOpException();}UUID applicationId=UUID.fromString(applicationIdStr);if(applicationId==null){return null;}OrganizationInfo org_info=management.getOrganizationByName(organizationName);UUID organizationId=null;if(org_info!=null){organizationId=org_info.getUuid();}if(organizationId==null){return null;}if(!hc.getRequest().getMethod().equalsIgnoreCase(""PUT"")){BiMap<UUID,String> apps=management.getApplicationsForOrganization(organizationId);if(apps.get(applicationId)==null){return null;}}return appResourceFor(applicationId);}"
2528	"public Set<Bean<? extends X>> resolve(Set<Bean<? extends X>> beans){if(beans.size()<=1){return beans;}beans=ImmutableSet.copyOf(beans);return disambiguatedBeans.getCastValue(beans);}"
2529	"public OpenStreetBug getBugFromPoint(PointF point){OpenStreetBug result=null;if(objects!=null){int ex=(int)point.x;int ey=(int)point.y;int radius=getRadiusBug(view.getZoom())*3/2;try{for(int i=0;i<objects.size();i++){OpenStreetBug n=objects.get(i);int x=view.getRotatedMapXForPoint(n.getLatitude(),n.getLongitude());int y=view.getRotatedMapYForPoint(n.getLatitude(),n.getLongitude());if(Math.abs(x-ex)<=radius&&Math.abs(y-ey)<=radius){radius=Math.max(Math.abs(x-ex),Math.abs(y-ey));result=n;}}}catch(IndexOutOfBoundsException e){}}return result;}"
2530	"public void addPoint(float value,int cd){int[] prevd=histogram.get(value);if(prevd==null){prevd=new int[numClasses];}else {for(int i=0;i<cd.length;i++){prevd[i]+=cd[i];}}histogram.put(value,prevd);for(int i=0;i<cd.length;i++){this.cd[i]+=cd[i];}if(value>end){end=value;}}"
2531	"public ArrayList<Thread> searchBy(Thread thread,int page){SQLServer.connect();int offset=0,total=0,totalPage=0;ResultSet rs=null;String filter="""";int count=0;if(thread.isWifi()==true){if(count==0){filter+="" WHERE "";}count++;filter+=""wifi = 1"";}if(thread.isWaterHeater()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" waterHeater = 1"";}if(thread.isConditioner()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" conditioner = 1 "";}if(thread.isFridge()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" fridge = 1 "";}if(thread.isAttic()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" attic = 1 "";}if(thread.isCamera()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" camera = 1 "";}if(thread.isKindOf()==true){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" kindOf = 1 "";}if(thread.isKindOf()==false){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" kindOf = 0 "";}if(thread.getWaterSource()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" waterSource =  ""+thread.getWaterSource();}if(thread.getCategoryId()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" categoryId =  ""+thread.getCategoryId();}if(thread.getObject()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" object = ""+thread.getObject();}if(thread.getArea()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;if(thread.getArea()==1){filter+="" area < 15"";}else {if(thread.getArea()==2){filter+="" area between 15 and 25 "";}else {if(thread.getArea()==3){filter+="" area between 25 and 35 "";}else {if(thread.getArea()==4){filter+="" area between 35 and 50 "";}else {if(thread.getArea()==5){filter+="" area > 50 "";}}}}}}if(thread.getPrice()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;if(thread.getPrice()==1){filter+="" price < 500000"";}else {if(thread.getPrice()==2){filter+="" price between 500000 and 1000000 "";}else {if(thread.getPrice()==3){filter+="" price between 1000000 and 1500000 "";}else {if(thread.getPrice()==4){filter+="" price between 1500000 and 2500000 "";}else {if(thread.getPrice()==5){filter+="" price between 2500000 and 5000000 "";}else {if(thread.getPrice()==6){filter+="" price > 5000000 "";}}}}}}}if(thread.getFar()>0){int meter=0;if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}if(thread.getFar()==1){meter=500;}else {if(thread.getFar()==2){meter=1500;}else {if(thread.getFar()==3){meter=3000;}else {if(thread.getFar()==4){meter=6000;}else {if(thread.getFar()==5){meter=10000;}else {if(thread.getFar()==6){meter=20000;}}}}}}double epxilong=8.998719E-6*meter;double lat=thread.getLatitude();double lng=thread.getLongitude();double latUp,latDown,lngUp,lngDown;latUp=lat+epxilong;lngUp=lng+epxilong;latDown=lat-epxilong;lngDown=lng-epxilong;filter+="" Thread.latitude between ""+latDown+"" and ""+latUp+"" and Thread.longitude between ""+lngDown+"" and ""+lngUp+"""";count++;}if(thread.getProvince().getProvinceId()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" Province.provinceId = ""+thread.getProvince().getProvinceId();}if(thread.getDistrict().getDistrictId()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" District.districtId = ""+thread.getDistrict().getDistrictId();}if(thread.getVillage().getVillageId()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;filter+="" Village.villageId = ""+thread.getVillage().getVillageId();}if(thread.getName().length()>0){if(count==0){filter+="" WHERE "";}else {filter+="" AND  "";}count++;String nameAscii=Check.removeAccent(thread.getName());filter+="" cast(Thread.name as varchar(100)) COLLATE SQL_Latin1_General_CP1253_CI_AI like '%""+thread.getName()+""%' or Thread.name like '%""+nameAscii+""' "";}filter+="" and status = 1 "";PreparedStatement pr=null;try{String sqlCount=""select count(Thread.threadId) as total from  Thread inner join Village on Village.villageId = Thread.villageId inner join District on District.districtId = Village.districtId inner join Province on Province.provinceId = District.provinceId""+filter;pr=SQLServer.connection.prepareStatement(sqlCount);rs=pr.executeQuery();if(rs.next()){total=rs.getInt(""total"");offset=(page-1)>0?((page-1)*Pagination.itemPerPageView):0;if(offset>=total){offset=offset-(Pagination.itemPerPageView)>0?offset-(Pagination.itemPerPageView):0;}totalPage=(int)Math.ceil(1.0*total/Pagination.itemPerPageView);}}catch(SQLException e){e.printStackTrace();}filter+="" order by threadId offset ""+offset+"" rows fetch next ""+Pagination.itemPerPageView+"" row only"";ArrayList<Thread> temp=new ArrayList<Thread>();try{String sql=""select Thread.*, temp.avgScore from Thread inner join Village on Village.villageId = Thread.villageId inner join District on District.districtId = Village.districtId inner join Province on Province.provinceId = District.provinceId inner join (select Thread.threadId, avg(Cast(Rate.score as Float)) as avgScore, avg(Rate.score) as avgScoreInt from Thread left join Rate on Thread.threadId = Rate.threadId group by Thread.threadId) temp on Thread.threadId = temp.threadId  ""+filter;Log.in(""SQL: ""+sql);pr=SQLServer.connection.prepareStatement(sql);rs=pr.executeQuery();DecimalFormat numberFormat=new DecimalFormat(""#.##"");while(rs.next()){Thread threadTemp=new Thread(rs.getInt(""threadId""),rs.getInt(""categoryId""),rs.getInt(""accountId""),rs.getString(""name""),rs.getString(""address""),rs.getDouble(""latitude""),rs.getDouble(""longitude""),rs.getString(""content""),rs.getLong(""price""),rs.getInt(""electricFee""),rs.getInt(""waterFee""),rs.getInt(""otherFee""),rs.getInt(""area""),rs.getBoolean(""wifi""),rs.getBoolean(""waterHeater""),rs.getBoolean(""conditioner""),rs.getBoolean(""fridge""),rs.getBoolean(""attic""),rs.getBoolean(""camera""),rs.getInt(""waterSource""),rs.getString(""direction""),rs.getInt(""numOfToilets""),rs.getInt(""numOfPeople""),rs.getInt(""object""),rs.getInt(""villageId""),rs.getString(""created""),rs.getInt(""viewed""),rs.getInt(""status""),rs.getString(""imageThumb""));threadTemp.setPriceString(Check.formatTien(threadTemp.getPrice()));DecimalFormat df=new DecimalFormat(""#.#"");String valueStr=df.format(rs.getFloat(""avgScore""));valueStr=valueStr.replace(',','.');threadTemp.setAvgScore(Float.parseFloat(valueStr));threadTemp.setAvgScoreInt((int)threadTemp.getAvgScore());threadTemp.setTotalPage(totalPage);threadTemp.setPage(page);threadTemp.setKindOf(rs.getBoolean(""kindOf""));if(threadTemp.isKindOf()==false){threadTemp.setName(""[T?M] ""+threadTemp.getName());}temp.add(threadTemp);Log.in(threadTemp.toString());}}catch(SQLException e){e.printStackTrace();}finally{try{rs.close();}catch(Exception e2){}try{pr.close();}catch(Exception e2){}SQLServer.disconnect();}return temp;}"
2532	"public DetailAdapter(Question question,String questionKey,Activity activity){this.question=question;this.questionKey=questionKey;this.activity=activity;answerList=new ArrayList<>();answerKeyList=new ArrayList<>();answerList.add(null);answerKeyList.add(null);if(question.answers!=null){for(String key : question.answers.keySet()){answerList.add(question.answers.get(key));answerKeyList.add(key);}}}"
2533	"@Override public void didRangeBeaconsInRegion(Collection<Beacon> beacons,Region region){if(beacons.size()>0){Log.i(TAG,""The first beacon I see is about ""+beacons.iterator().next().getDistance()+"" meters away."");}}"
2534	"boolean canRelease(long pageId,int lvl){return pageId!=0L;}"
2535	"private void buildColor(ExpressionContext context,StringBuilder builder,Map<String,CompilerVariable> scope,ASTFractal fractal){if(fractal!=null){compile(context,builder,scope,fractal.getStateVariables(),fractal.getColor());}}"
2536	"public synchronized boolean pushUp(String id){File zip=new File(""/sdcard/gamesync/""+id+"".zip"");if(!zip.exists()){System.out.println(""Fatal error in GameSyncEngine.pushUp: ""+zip.getName()+"" does not exist."");return false;}long cksum=-1;try{cksum=Utils.getChecksum(zip.getAbsolutePath());}catch(Exception e){e.printStackTrace();return false;}String err=syncclient.sendFile(id,zip,cksum);if(err!=null){System.out.println(""Fatal error in GameSyncEngine.pushUp: ""+err);return false;}AppInfo tinfo=syncclient.getInfo(id);if(tinfo==null){System.out.println(""Fata error in GameSyncEngine.pushUp: failed to pull newly pushed app from server!"");return false;}Date lmod=tinfo.last_modified;AppInfo info=syncdb.getInfo(id);if(info==null){info=new AppInfo(id);syncdb.addApp(info);info=syncdb.getInfo(id);}info.crc=cksum;info.enabled=true;info.hidden=false;info.last_modified=lmod;syncdb.updateApp(info);return true;}"
2537	"protected static int[] prepare(int[] parts){if(parts==null){return null;}A.notEmpty(parts,""Partitions"");boolean sorted=true;for(int i=0;i<parts.length;i++){if(i<parts.length-1){if(parts[i]>parts[i+1]){sorted=false;}else {if(sorted){A.ensure(parts[i]!=parts[i+1],""Partition duplicates are not allowed"");}}}A.ensure(0<=parts[i]&&parts[i]<CacheConfiguration.MAX_PARTITIONS_COUNT,""Illegal partition"");}if(!sorted){Arrays.sort(parts);}for(int i=0;i<parts.length;i++){if(i<parts.length-1){A.ensure(parts[i]!=parts[i+1],""Partition duplicates are not allowed"");}}return parts;}"
2538	"ErrorActeur(Acteur errSource,HttpEvent evt,Page page,Throwable t,boolean tryErrResponse,boolean log) throws IOException{while(t.getCause()!=null){t=t.getCause();}if(t instanceof ResponseException){ResponseException rt=(ResponseException)t;setState(new RespondWith(new Err(rt.status(),rt.getMessage())));return ;}if(tryErrResponse){Dependencies deps=page.application.getDependencies();if(t instanceof ProvisionException){t=t.getCause();}ExceptionEvaluatorRegistry reg=deps.getInstance(ExceptionEvaluatorRegistry.class);ErrorResponse resp=reg.evaluate(t,errSource,page,evt);if(log&&resp instanceof Err&&((Err)resp).unhandled){page.application.control().internalOnError(t);}if(resp!=null){ErrorRenderer ren=deps.getInstance(ErrorRenderer.class);ren.render(resp,response(),evt);setState(new RespondWith(resp.status()));return ;}}StringBuilder sb=new StringBuilder(""Page ""+page+"" (""+page.getClass().getName()+"" threw ""+t.getMessage()+'\n');try(ByteArrayOutputStream out=new ByteArrayOutputStream()){t.printStackTrace(new PrintStream(out));sb.append(new String(out.toByteArray()));}catch(IOException ioe){}setState(new RespondWith(HttpResponseStatus.INTERNAL_SERVER_ERROR,sb.toString()));}"
2539	"public String getSentence(){while(remoteParser.getSemaphore()==0){;}int choise=Math.random()>0.5?1:0;Log.i(""--> Parser "",""choise = ""+choise);if(remoteParser.recordResult==null){return getSentence(choise);}else {remoteParser.recordResult=null;return getSentence(remoteParser.sentimentResult);}}"
2540	"public static int runSystemATs(int blockHeight) throws NotValidException{int atCost;int totalSteps=0;long lastStateId=0L;int lastRanHeight=0;Logger.logDebugMessage(""System ATs will be  running"");int orderedATHeight=0;try(DbIterator<AT> ats=AT.getSystemATs(Constants.MAX_AUTOMATED_TRANSACTION_SYSTEM)){while(ats.hasNext()){AT at=ats.next();Account account=Account.getAccount(at.getLongId());if(account.getUnconfirmedBalanceNQT()<AT_Constants.getInstance().MAX_STEPS(blockHeight)*Constants.AUTOMATED_TRANSACTIONS_STEP_COST_NQT||at.getStartBlock()>blockHeight||at.getDelayBlocks()>=blockHeight-at.getCreationBlockHeight()){continue;}listCode(at,true,true);Logger.logDebugMessage(""atId ""+AT_API_Helper.getLong(at.getId()));try(DbIterator<AT.ATState> atStates=at.getATStates(0,1)){if(atStates.hasNext()){AT.ATState atState=atStates.next();lastRanHeight=atState.getLastRanHeight();if(atState.getPc()<0||at.getSleepBetween()>blockHeight-lastRanHeight){continue;}at.getMachineState().pc=atState.getPc();long timeStamp=atState.getTimeStamp();lastStateId=atState.getId();Logger.logDebugMessage(""height,pc ""+atState.getTimeStamp()+"" ""+at.getMachineState().pc);try(DbIterator<AT.ATState> atStateUpdates=at.getATStateUpdates(0,1)){if(atStateUpdates.hasNext()){atState=atStateUpdates.next();if(atState.getMachineData()!=null){at.setAp_data(atState.getMachineData());}}}at.setTimeStamp(timeStamp);}else {at.setTimeStamp(AT_API_Helper.getLongTimestamp(at.getCreationBlockHeight(),0));Logger.logDebugMessage(""AT doesn't have AT_State record, set timestamp to createion height "");}}at.setLastRanSteps(totalSteps);atCost=getATResult(at,AT_API_Helper.getLong(at.getId()),blockHeight,orderedATHeight,account);String atSecretPhrase=""SIGNED_BY_SYSMTEM_AT""+AT_API_Helper.getLong(at.getId());lastRanHeight=blockHeight;if(atCost>0){try{List<AT_Transaction> atTransactions=at.getTransactions();Transaction transaction=Nxt.getTransactionProcessor().parseTransaction(atTransactions,atSecretPhrase,at,lastStateId,lastRanHeight);transaction.validate();transaction.sign(atSecretPhrase);Nxt.getTransactionProcessor().broadcast(transaction);Logger.logDebugMessage(""FSM transactions broadcast succeed"");}catch(NxtException.ValidationException e){e.printStackTrace();}finally{}}if(totalSteps>=AT_Constants.getInstance().MAX_STEPS(blockHeight)){break;}}}return totalSteps;}"
2541	"public static Properties initialize(URI uri,Configuration conf,String scheme) throws IOException{LOG.debug(""COS driver: initialize start for {} "",uri.toString());String host=Utils.getHost(uri);LOG.debug(""extracted host name from {} is {}"",uri.toString(),host);String bucket=Utils.getContainerName(host,false);String service=null;try{service=Utils.getServiceName(host);}catch(IOException ex){LOG.warn(""Failed to extract service from the host {}"",host);}if(service==null){service=""service"";}String[] altPrefix=new String{S3_A_SERVICE_PREFIX+service,S3_D_SERVICE_PREFIX+service};String prefix=COS_SERVICE_PREFIX+service;LOG.debug(""Filesystem {}, using conf keys for {}. Alternative list {}"",uri,prefix,Arrays.toString(altPrefix));Properties props=new Properties();props.setProperty(COS_BUCKET_PROPERTY,bucket);LOG.debug(""bucket: {}, service: {}"",bucket,service);if(!Utils.validSchema(uri)){String accessKey=(String)props.setProperty(ACCESS_KEY_COS_PROPERTY,Utils.extractAccessKey(uri.toString()));Utils.updateProperty(conf,prefix,altPrefix,accessKey,props,ACCESS_KEY_COS_PROPERTY,false);String secretKey=(String)props.setProperty(SECRET_KEY_COS_PROPERTY,Utils.extractSecretKey(uri.toString()));Utils.updateProperty(conf,prefix,altPrefix,secretKey,props,SECRET_KEY_COS_PROPERTY,false);String endpointURL=(String)props.setProperty(ENDPOINT_URL_COS_PROPERTY,Utils.extractEndpointName(uri.toString()));Utils.updateProperty(conf,prefix,altPrefix,endpointURL,props,ENDPOINT_URL_COS_PROPERTY,false);}else {Utils.updateProperty(conf,prefix,altPrefix,ACCESS_KEY,props,ACCESS_KEY_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,SECRET_KEY,props,SECRET_KEY_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,ENDPOINT_URL,props,ENDPOINT_URL_COS_PROPERTY,false);}Utils.updateProperty(conf,prefix,altPrefix,AUTO_BUCKET_CREATE,props,AUTO_BUCKET_CREATE_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,V2_SIGNER_TYPE,props,V2_SIGNER_TYPE_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,INPUT_POLICY,props,INPUT_POLICY_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,READAHEAD_RANGE,props,READAHEAD_RANGE_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,BLOCK_SIZE,props,BLOCK_SIZE_COS_PROPERTY,false);Utils.updateProperty(conf,prefix,altPrefix,REGION,props,REGION_COS_PROPERTY,false);LOG.debug(""Initialize completed successfully"");return props;}"
2542	"private void setSubViewVisibility(int visibility){int childCount=getChildCount();for(int i=0;i<childCount;i++){View view=getChildAt(i);if(view!=mProgressBar&&view!=mTxvStatus){view.setVisibility(visibility);}}}"
2543	"private void buyArmorRepair(Player player,HumanNPC npc,ItemStack armor,String armorName,boolean plural){String msg="""";if(!EconomyHandler.useEconomy()||EconomyHandler.canBuy(Operation.BLACKSMITH_ARMOR_REPAIR,player)){if(EconomyHandler.useEconomy()){double paid=EconomyHandler.pay(Operation.BLACKSMITH_ARMOR_REPAIR,player);if(paid>0){if(armor.getDurability()>0){armor.setDurability((short)0);msg=ChatColor.GREEN+(""Your "")+StringUtils.yellowify(armorName);if(plural){msg+="" have been repaired by "";}else {msg+="" has been repaired by "";}msg+=StringUtils.yellowify(npc.getStrippedName())+"" for ""+StringUtils.yellowify(EconomyHandler.getPaymentType(Operation.BLACKSMITH_ARMOR_REPAIR,""""+paid,ChatColor.YELLOW))+""."";player.sendMessage(msg);}else {player.sendMessage(ChatColor.RED+""Your armor is already fully repaired."");}}}else {player.sendMessage(ChatColor.GRAY+""Your server has not turned economy on for Citizens."");}}else {if(EconomyHandler.useEconomy()){player.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BLACKSMITH_ARMOR_REPAIR,player));return ;}}}"
2544	"public void manage(){if(units.size()>0){for(Unit zergling : units){if(!zergling.exists()){units.remove(zergling);}else {if(attackTarget instanceof Position){zergling.move((Position)attackTarget);}else {if(lastFrameTarget!=attackTarget){if(attackTarget!=null){if(attackTarget instanceof Unit){zergling.attack((Unit)attackTarget);}}}}}}}}"
2545	"@Override public IInjectable getInjectableWrapper(TileEntity tile,ForgeDirection from){IInjectable wrapper=null;if(wrapper==null&&Loader.isModLoaded(""EnderIO"")){wrapper=getInjectableEnderIO(tile);}if(wrapper==null&&tile instanceof IItemDuct){wrapper=new ItemDuctInjectable((IItemDuct)tile);}return wrapper;}"
2546	"public static Set<Integer> getTrDataSet(Database db,Cluster cluster,WorkloadBatch wb,Set<Integer> trTupleSet){Set<Integer> trDataSet=new TreeSet<Integer>();SortedSet<Integer> deletedTuples=new TreeSet<Integer>();int s_id=1;for(int tpl_id : trTupleSet){if(!deletedTuples.contains(tpl_id)){String[] parts=cluster.breakDataId(tpl_id);int tpl_pk=Integer.parseInt(parts[0]);int tbl_id=Integer.parseInt(parts[1]);Tuple tpl=db.getTupleById(tbl_id,tpl_id);int _id=-1;if(tpl.getTuple_action().equals(""insert"")){tpl.setTuple_action(""initial"");switch (Global.setup){case ""range"" :Server s=cluster.getServer(s_id);int p_id=cluster.getRangePartition(s,tbl_id);_id=cluster.insertDataRangePartitioning(tpl_id,s_id,p_id);++s_id;if(s_id>Global.servers){s_id=1;}break;case ""consistenthash"" :_id=cluster.insertDataConsistentHash(tpl_id);break;default :Global.LOGGER.error(""Wrong cluster setup method is specified !!! Choose either 'range' or 'consistenthash'"");break;}trDataSet.add(_id);}else {if(tpl.getTuple_action().equals(""delete"")){if(!Cluster._setup){switch (Global.setup){case ""range"" :cluster.deleteDataRangePartitioning(tpl_id);break;case ""consistenthash"" :cluster.deleteDataConsistentHashing(tpl_id);break;default :Global.LOGGER.error(""Wrong cluster setup method is specified !!! Choose either 'range' or 'consistenthash'"");break;}db.deleteTupleByPk(tbl_id,tpl_pk);_id=cluster.getDataIdFromTupleId(tpl_id);wb.deleteTrDataFromWorkload(_id);SimpleVertex v=wb.hgr.getVertex(_id);if(v!=null){wb.hgr.removeVertex(v);if(Global.compressionEnabled){wb.hgr.removeCVertex(v);}}deletedTuples.add(tpl_id);}}else {_id=cluster.getDataIdFromTupleId(tpl_id);trDataSet.add(_id);}}}}return trDataSet;}"
2547	"public void showShops(){mMap.clear();int i=0;for(Product pro : productList){LatLng shopLocation=new LatLng(Double.parseDouble(pro.getLatitude()),Double.parseDouble(pro.getLongitude()));System.out.println(shopLocation);if(CalculationByDistance(shopLocation,ll)<distance){i++;System.out.println(i);setMarker(pro.getBrand(),shopLocation.latitude,shopLocation.longitude);}}}"
2548	"@Override public void onTextChanged(CharSequence s,int start,int before,int count){if(viewSource){return ;}if(firstTimeSetText){return ;}if(start>0&&getText().charAt(start-1)=='\n'&&(start==length()||getText().charAt(start)=='\n')){insertBefore(start,new SpannableString("" ""));}while(count>=0&&start<=s.length()){if(start+1<getText().length()&&getText().charAt(start)!='\n'&&getText().charAt(start+1)==' '&&(start+2==length()||getText().charAt(start+2)=='\n')&&(getText().getSpans(start,start,LinePrefixImageSpan.class).length==0)&&(prevWordIsNumber(start+1)==-1)){remove(start+1,start+2);}if(start==0||getText().charAt(start-1)=='\n'){Matcher matcher=linePrefixPattern.matcher(getText().subSequence(start,getText().length()));if(matcher.find()){for(CharacterStyle characterStyle : getText().getSpans(start+matcher.start(),start+matcher.end(),CharacterStyle.class)){toggleStyleSpan(copy(characterStyle),start+matcher.start(),start+matcher.end());}}}if(start<getText().length()&&getText().charAt(start)=='\n'){int linestart=start+1;for(TabSpan span : getText().getSpans(start,start,TabSpan.class)){int oldStart=getText().getSpanStart(span);int oldEnd=getText().getSpanEnd(span);if(oldStart<start&&oldEnd>start){getText().setSpan(span,oldStart,start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);getText().setSpan(new TabSpan(),linestart,oldEnd,Spanned.SPAN_INCLUSIVE_INCLUSIVE);}}for(MarginSpan span : getText().getSpans(start,start,MarginSpan.class)){int oldStart=getText().getSpanStart(span);int oldEnd=getText().getSpanEnd(span);if(oldStart<start&&oldEnd>start){getText().setSpan(span,oldStart,start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);}}for(CharacterStyle span : getText().getSpans(start,start,CharacterStyle.class)){int oldStart=getText().getSpanStart(span);int oldEnd=getText().getSpanEnd(span);if(oldStart<start&&oldEnd>start){getText().setSpan(span,oldStart,start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);if(oldEnd>linestart){getText().setSpan(copy(span),linestart,oldEnd,SPAN_INCLUSIVE_INCLUSIVE);}}}if(!formatterDisabled){Matcher matcher=linePrefixPattern.matcher(getText().subSequence(linestart,getText().length()));if(matcher.find()){String str=matcher.group();if(str.equals(bulletMarkdown)){getText().setSpan(getBulletImageSpan(),linestart,linestart+bulletMarkdown.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);setMargin(start+1,bullet);}else {if(str.equals(checkboxMarkdown)){getText().setSpan(getCheckboxImageSpan(),linestart,linestart+checkboxMarkdown.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);setCheckboxClickable(getText(),linestart,linestart+checkboxMarkdown.length(),false);setMargin(linestart,checkbox);}else {if(str.equals(checkboxCheckedMarkdown)){getText().setSpan(getCheckboxCheckedImageSpan(),linestart,linestart+checkboxCheckedMarkdown.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);setCheckboxClickable(getText(),linestart,linestart+checkboxCheckedMarkdown.length(),true);setMargin(linestart,checkboxChecked);}}}}else {int prevStart=start-1;if(!(prevStart>=0&&getText().charAt(prevStart)=='\n')){while(prevStart>0&&getText().charAt(prevStart-1)!='\n'){prevStart--;}}matcher=linePrefixPattern.matcher(getText().subSequence(prevStart,getText().length()));if(matcher.find()){String str=matcher.group();if(str.equals(bulletMarkdown)){insertBefore(linestart,getBulletSpannable());setMargin(linestart,bullet);}else {if(str.equals(checkboxMarkdown)||str.equals(checkboxCheckedMarkdown)){insertBefore(linestart,getCheckboxSpannable());setMargin(linestart,checkbox);}else {insertBefore(linestart,new SpannableString(String.valueOf(Integer.valueOf(matcher.group(2))+1)+"". ""));}}}else {if(linestart==s.length()||s.charAt(linestart)=='\n'){insertBefore(linestart,new SpannableString("" ""));}}}}else {if(linestart==s.length()||s.charAt(linestart)=='\n'){insertBefore(linestart,new SpannableString("" ""));}}}start++;before--;count--;}}"
2549	"private void tryScrollBackToTopByPercentDuration(int duration){float percent;if(isMovingHeader()){percent=mIndicator.getCurrentPercentOfHeader();percent=percent>1?1:percent;tryScrollBackToTop(duration>0?duration:Math.round(mDurationToCloseHeader*percent));}else {if(isMovingFooter()){percent=mIndicator.getCurrentPercentOfFooter();percent=percent>1?1:percent;tryScrollBackToTop(duration>0?duration:Math.round(mDurationToCloseFooter*percent));}else {tryScrollBackToTop(duration);}}}"
2550	"private boolean isDisplayWithTag(){return keyword.substring(0,0)==CONSTANT_HASHTAG;}"
2551	"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){dialog=ProgressDialog.show(this,""?????????"",""??????????? ??????????"",true);dc.itemsList.clear();choosedCab=parent.getItemAtPosition(position).toString();dc.selectedCar=position;if(choosed_date.length()>1){Log.e(""Tracking"",choosedCab+"" is choosed"");getCoordsFromServer();if(!ItemsCountIsNull){updateMapInfo();}}else {Toast dateToast=Toast.makeText(getApplicationContext(),""???????? ????"",Toast.LENGTH_SHORT);dateToast.show();dialog.dismiss();}}"
2552	"public void newAccount(String name){Random r=new Random();int id=10000000+(int)(r.nextFloat()*89999900);boolean exists=false;if(fDir.listFiles().length>0){for(File f : fDir.listFiles()){int fName=nameToInt(f.getName());if(fName==id){exists=true;}}}if(!exists){String f=dir+""\\""+id+"".txt"";PrintStream out;try{out=new PrintStream(new File(f));out.println(name);}catch(FileNotFoundException e){e.printStackTrace();}}else {newAccount(name);}}"
2553	"private List<RouteHolder> getRouteNames(Map<String,ProcessorHolder> processorHolders){if(!shouldCacheRouteHolders||routeHoldersCache==null||routeHoldersCache.size()<=0){routeHoldersCache=new ArrayList<RouteHolder>();Set<ObjectName> set=queryNames(null,null,StatisticsCollectorType.ALL_ROUTES);Iterator<ObjectName> iterator=set.iterator();while(iterator.hasNext()){ObjectName foundMBean=iterator.next();String uri=normalizeUri(getStringAttribute(foundMBean,""EndpointUri""));if(processorHolders.containsKey(uri)){RouteHolder holder=new RouteHolder();holder.setCamelContextName(getStringAttribute(foundMBean,""CamelId""));holder.setRouteName(getStringAttribute(foundMBean,""RouteId""));holder.setUri(uri);routeHoldersCache.add(holder);}}if(routeHoldersCache.size()<=0){throw new IllegalStateException(""Found no route holders based on keys '""+Arrays.toString(processorHolders.keySet().toArray())+""'"");}LOG.debug(""Found '{}' routes which match the processors"",routeHoldersCache.toArray());}return routeHoldersCache;}"
2554	"public void updateCurrentUser(){if(ParseUser.getCurrentUser()!=null&&isNetworkAvailable()){ final ParseUser currentUser=ParseUser.getCurrentUser();try{currentUser.fetchInBackground(new GetCallback<ParseObject>(){  public void done(  ParseObject object,  ParseException e){    if (e == null) {      syncUser(object);    } else {      e.printStackTrace();    }  }});}catch(Exception ex){ex.printStackTrace();}}else {if(isNetworkAvailable()&&!inAppBillingSetup){setupInAppBilling();}}}"
2555	"private static LinkedList<Edge> A_star(Node startingNode,Node endingNode) throws PathfinderException{MapEntity map=MapEntity.getInstance();StartNode startNode=new StartNode(startingNode);PathfinderNode endNode=new PathfinderNode(endingNode);HashMap<String,PathfinderNode> exploredNodes=new HashMap<>();HashMap<String,PathfinderNode> frontierNodes=new HashMap<>();LinkedList<Node> allNodes=map.getAllNodes();HashMap<String,PathfinderNode> unexploredNodes=new HashMap<>();for(Node node : allNodes){if(!unexploredNodes.containsKey(node.getNodeID())){unexploredNodes.put(node.getNodeID(),new PathfinderNode(node));}}if(!(unexploredNodes.containsKey(startNode.getNode().getNodeID())&&unexploredNodes.containsKey(endNode.getNode().getNodeID()))){throw new PathfinderException(""Nodes are not on map"");}unexploredNodes.remove(startNode.getNode().getNodeID());startNode.prepForFrontier(null,endNode);frontierNodes.put(startNode.getNode().getNodeID(),startNode);PathfinderNode lowestCost=null;while(true){if(frontierNodes.isEmpty()){break;}for(PathfinderNode node : frontierNodes.values()){lowestCost=node;break;}for(Map.Entry<String,PathfinderNode> entry : frontierNodes.entrySet()){if(entry.getValue().getTotalCost()<lowestCost.getTotalCost()){lowestCost=entry.getValue();}}exploredNodes.put(lowestCost.getNode().getNodeID(),lowestCost);frontierNodes.remove(lowestCost.getNode().getNodeID());if(lowestCost==endNode){break;}LinkedList<Node> adjacentNodes=map.getConnectedNodes(lowestCost.getNode());for(Node node : adjacentNodes){if(!(exploredNodes.containsKey(node.getNodeID())||frontierNodes.containsKey(node.getNodeID()))){unexploredNodes.get(node.getNodeID()).prepForFrontier(lowestCost,endNode);frontierNodes.put(node.getNodeID(),unexploredNodes.get(node.getNodeID()));unexploredNodes.remove(node.getNodeID());}}}PathfinderNode lastNode=lowestCost;LinkedList<Edge> pathEdges=lastNode.buildPath();if(pathEdges==null){throw new PathfinderException(""No Path was found, Please choose another path"");}return pathEdges;}"
2556	"private boolean validateOrder(OrderDTO orderDTO){boolean b=orderDTO.getFIK()==null;if(!b){AlertHelper.showInfoDialog(""Objedn\u00E1vka u\u017E byla odesl\u00E1na na finan\u010Dn\u00ED spr\u00E1vu."",""\u00DA\u010Dtenku lze stornovat v sekci 'Historie'."");return b;}return b;}"
2557	"Mnemonic(int opcode){this.opcode=opcode;this.name=super.toString().toLowerCase();if(name.indexOf('_')==name.length()-1){name=name.substring(0,name.length()-1);}}"
2558	"@Override public void updateEntity(){super.updateEntity();if(!this.worldObj.isRemote){boolean needUpdate=false;if(this.fluidTank.getFluidAmount()<=this.fluidTank.getCapacity()){for(TileSlot tileSlot : this.tileSlots){if(tileSlot instanceof TileSlotFluidInput){((TileSlotFluidInput)tileSlot).drainToTank(this.fluidTank);needUpdate=true;}}}if(this.maxrequestkineticenergyTick(ForgeDirection.VALID_DIRECTIONS[this.facing])>0){int amount=0;for(FluidStack fluidStack : FluidKineticGeneratorRecipes.instance.getProcessRecipesList()){if(fluidStack.isFluidEqual(this.fluidTank.getFluid())){amount=fluidStack.amount;}}if(this.fluidTank.getFluidAmount()>=amount){this.setActive(true);if(this.timer==20){this.timer=0;this.fluidTank.getFluid().amount-=amount;}this.timer++;}else {this.setActive(false);this.timer=0;}if(this.fluidTank.getFluidAmount()<0){this.fluidTank.getFluid().amount=0;}}else {this.setActive(false);}if(needUpdate){this.markDirty();}}}"
2559	"@Override public void afterTextChanged(Editable s){if(!lock){lock=true;int start=spannable.getSpanStart(span);if(s.charAt(start)=='{'){String finishCurly=""\n\n}"";Log.d(""klid"",""123"");}spannable.removeSpan(span);spannable=null;span=null;lock=false;}}"
2560	"@Override public Course createFromParcel(Parcel in){return Course.builder().id(in.readInt()).name(in.readString()).subjectCode(in.readString()).courseNumber(in.readString()).sections(in.createStringArrayList()).meetingTimes(in.createTypedArrayList(MeetingTime.CREATOR)).numMembers(in.readInt()).isCancelled(in.readByte()!=0).build();}"
2561	"private boolean isAdminProcedure(String procedureName){return name.startsWith(""dbms.security."")&&ADMIN_PROCEDURES.contains(procedureName);}"
2562	"@Override public int getHeight(){return sequenceVisible?SEQUENCE_HEIGHT+(shouldShowTranslation?SequenceRenderer.TranslatedSequenceDrawer.TOTAL_HEIGHT:0):0;}"
2563	"@Subscribe public void handleDBEvents(DbEvent event){realm.refresh();Log.i(TAG,""Handle DB Event: ""+event.getDbEventType());switch (event.getDbEventType()){case UserListActivity_USER_READY :User user=realm.where(User.class).equalTo(""id"",event.getDbObjectId()).notEqualTo(""id"",MainTabbedActivity.getMainUserId()).findFirst();if(!usersWithBook.contains(user)){usersWithBook.add(user);listAdapter.notifyDataSetChanged();}break;}}"
2564	"@Override public boolean apply(Node input){return input.field.getType() instanceof ReferenceType;}"
2565	"@Override public void userClicked(User user,String msgId,String autoModMsgId,MouseEvent e){if(e!=null&&SwingUtilities.isMiddleMouseButton(e)){String n=user.getName();String set=client.settings.getString(""mentionByNickname"");if(set==""normal""){n=user.getDisplayNick();}else {if(set==""custom""){n=user.getCustomNick();}else {if(set==""customReal""){n=user.getCustomNickOrReal();}}}channels.getActiveChannel().insertText(n+"", "",true);return ;}if(e==null||(!e.isControlDown()&&!e.isAltDown())){openUserInfoDialog(user,msgId,autoModMsgId);return ;}String command=client.settings.getString(""commandOnCtrlClick"");if(command.startsWith(""/"")){command=command.substring(1);}if(e.isControlDown()&&!command.isEmpty()){client.command(user.getChannel(),command,user.getRegularDisplayNick());}else {if(!e.isAltDown()){openUserInfoDialog(user,msgId,autoModMsgId);}}}"
2566	"public static void update(Player player){int baseBlockSize=128;int stateBlockSize=stateBlockSize(player);for(Player other : player.getPlayers()){if(player.updatableForPlayer(other)){baseBlockSize+=3;stateBlockSize+=stateBlockSize(other);}}List<Player> regionalPlayers=new ArrayList<>();for(Player other : WorldHandler.getInstance().getPlayers()){if(player.getPlayers().size()+regionalPlayers.size()>=REGION_PLAYERS_LIMIT){break;}if(other==null||other==player||other.getStage()!=Client.Stage.LOGGED_IN){continue;}if(player.updatableForPlayer(other)){regionalPlayers.add(other);baseBlockSize+=3;stateBlockSize+=stateBlockSize(other);}}StreamBuffer.WriteBuffer out=StreamBuffer.createWriteBuffer(baseBlockSize+stateBlockSize);StreamBuffer.WriteBuffer stateBlock=StreamBuffer.createWriteBuffer(stateBlockSize);out.writeVariableShortHeader(player.getEncryptor(),81);out.setAccessType(StreamBuffer.AccessType.BIT_ACCESS);PlayerUpdating.updateLocalPlayerMovement(player,out);if(player.getUpdateContext().isUpdateRequired()){PlayerUpdating.updateState(player,stateBlock,false,true);}out.writeBits(8,player.getPlayers().size());for(Iterator<Player> i=player.getPlayers().iterator();i.hasNext();){Player other=i.next();if(player.updatableForPlayer(other)){PlayerUpdating.updateOtherPlayerMovement(other,out);if(other.getUpdateContext().isUpdateRequired()){boolean ignored=player.getAttributes().isIgnored(other.getUsername())&&other.getAttributes().getPrivilege()==Player.Privilege.REGULAR;PlayerUpdating.updateState(other,stateBlock,false,ignored);}}else {out.writeBit(true);out.writeBits(2,3);i.remove();}}for(Player other : regionalPlayers){boolean ignored=player.getAttributes().isIgnored(other.getUsername())&&other.getAttributes().getPrivilege()==Player.Privilege.REGULAR;player.getPlayers().add(other);PlayerUpdating.addPlayer(out,player,other);PlayerUpdating.updateState(other,stateBlock,true,ignored);}if(stateBlock.getBuffer().position()>0){out.writeBits(11,2047);out.setAccessType(StreamBuffer.AccessType.BYTE_ACCESS);out.writeBytes(stateBlock.getBuffer());}else {out.setAccessType(StreamBuffer.AccessType.BYTE_ACCESS);}out.finishVariableShortPacketHeader();player.send(out.getBuffer());}"
2567	"protected void noticeOfImminentRisk(DriftingEntity driftingThreat){this.setThreatened(true);if(squadSelectButton!=null){uiDispatcher.dispatchMessage(this,squadSelectButton,AdvButtonNoticeHandler.FLASHTHREAT,driftingThreat);}if(targetEntity instanceof Shuttle||targetEntity instanceof Habitable){this.commandAtTarget=CommandType.TAKE_SHELTER;}}"
2568	"public void swap(){if(firstClick){try{ItemStack tempStack=player.getItemByCoord(new Vector2d(x,y));if(tempStack!=null){oldStack=tempStack;firstClick=false;}}catch(Exception e){}}else {if(!firstClick){try{for(int i=0;i<player.getItems().size();i++){ItemStack tempStack=(ItemStack)player.getItems().get(i);if(tempStack.getX()==x&&tempStack.getY()==y&&tempStack.getItem().getID()!=oldStack.getItem().getID()){newStack=tempStack;Vector2d tempVec=oldStack.getCoords();oldStack.setCoords(newStack.getCoords());newStack.setCoords(tempVec);firstClick=true;return ;}else {if(tempStack.getX()==x&&tempStack.getY()==y&&tempStack.getItem().getID()==oldStack.getItem().getID()){oldStack.addQuant(tempStack.getQuant());player.getItems().remove(tempStack);}}}oldStack.setCoords(new Vector2d(x,y));firstClick=true;}catch(Exception e){}}}splitFirstClick=true;}"
2569	"public void mouseMoved(MouseEvent e){int x=(int)Math.round(e.getX()/scalingFactor);int y=(int)Math.round(e.getY()/scalingFactor);int xa,ya;arrowRoot=null;if(panSwitch){Rectangle r=curDiag.area.getBounds();r=new Rectangle(r.x,r.y,r.width-20,r.height-40);if(r.contains(x,y)){frame.setCursor(openPawCursor);}else {frame.setCursor(defaultCursor);}}Point p=new Point(x,y);p=gridAlign(p);xa=(int)p.getX();ya=(int)p.getY();if(enclSelForArrow!=null){enclSelForArrow.corner=null;enclSelForArrow=null;repaint();return ;}selBlockM=null;for(Block block : curDiag.blocks.values()){if(block instanceof Enclosure){Enclosure enc=(Enclosure)block;if(between(xa,block.leftEdge-6,block.leftEdge+6)&&between(ya,block.topEdge-6,block.topEdge+6)){enclSelForArrow=enc;enc.corner=Corner.TOPLEFT;break;}if(between(xa,block.leftEdge-6,block.leftEdge+6)&&between(ya,block.botEdge-6,block.botEdge+6)){enclSelForArrow=enc;enc.corner=Corner.BOTTOMLEFT;break;}if(between(xa,block.rgtEdge-6,block.rgtEdge+6)&&between(ya,block.topEdge-6,block.topEdge+6)){enclSelForArrow=enc;enc.corner=Corner.TOPRIGHT;break;}if(between(xa,block.rgtEdge-6,block.rgtEdge+6)&&between(ya,block.botEdge-6,block.botEdge+6)){enclSelForArrow=enc;enc.corner=Corner.BOTTOMRIGHT;break;}}if(between(xa,block.leftEdge+6*scalingFactor,block.rgtEdge-6*scalingFactor)&&between(ya,block.topEdge+6*scalingFactor,block.botEdge-6*scalingFactor)){selBlockM=block;if(!use_drag_icon){if(curDiag.jpm==null&&!panSwitch){frame.setCursor(drag_icon);}use_drag_icon=true;}break;}}if(selBlockM==null){if(use_drag_icon){use_drag_icon=false;}if(!panSwitch){frame.setCursor(defaultCursor);}}FoundPoint fp=findArrowStart(xa,ya);if(fp!=null){arrowRoot=fp;}repaint();}"
2570	"@Override public boolean onOptionsItemSelected(MenuItem item){if(item.getItemId()==R.id.nav_view_option_grid){setCurruntView(getFragments()[0]);}else {if(item.getItemId()==R.id.nav_view_option_list){setCurruntView(getFragments()[1]);}}return super.onOptionsItemSelected(item);}"
2571	"@Override public boolean equals(Object o){return o instanceof DrawableIconWithRes&&((DrawableIconWithRes)o).mId==mId;}"
2572	"public List<VolumeRestRep> findVolumesBackingDatastore(HostSystem host,URI hostId,Datastore datastore){Set<String> luns=execute(new FindLunsBackingDatastore(host,datastore));List<VolumeRestRep> volumes=Lists.newArrayList();for(String lun : luns){VolumeRestRep volume=execute(new GetBlockVolumeByWWN(lun));if(volume!=null){String tagValue=KnownMachineTags.getBlockVolumeVMFSDatastore(hostId,volume);if(!tagValue.equalsIgnoreCase(datastore.getName())){logError(""vmware.support.datastore.doesntmatchvolume"",datastore.getName());return null;}volumes.add(volume);}else {logError(""vmware.support.datastore.volumenotfound"",datastore.getName());return null;}}return volumes;}"
2573	"@Override public Number getMin(boolean update,boolean handleOutOfMemoryError){try{Number result=getMin(update);ge.tryToEnsureThereIsEnoughMemoryToContinue(handleOutOfMemoryError);return result;}catch(OutOfMemoryError e){if(handleOutOfMemoryError){ge.clearMemoryReserve();if(ge.swapChunkExcept_Account(Grid,handleOutOfMemoryError)<1L){if(ge.swapChunk_Account(handleOutOfMemoryError)<1L){throw e;}}ge.initMemoryReserve(ge.HandleOutOfMemoryErrorFalse);return getMin(update,handleOutOfMemoryError);}else {throw e;}}}"
2574	"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{String userEmail=request.getParameter(""userEmail"");String userPassword=request.getParameter(""userPassword"");if(AccountFunctions.checkLogin(AccountFunctions.OpenDatabase(),userEmail,userPassword)==true){response.sendRedirect(""homeloggedin.jsp"");}else {response.sendRedirect(""login.jsp"");}}"
2575	"public void actionPerformed(ActionEvent e){if(nameField.getText().isEmpty()||emailField.getText().isEmpty()||descriptionField.getText().isEmpty()){showWarning();return ;}close();}"
2576	"@Override public void execute(CommonProcessor mainProcessor){MongoDBClient mongoClient=mainProcessor.getMongoDBClient();if(user.getShoppingItem()==null||user.getShoppingItem().size()<=0){log.info(""find user(""+user.getUserId()+"") but user has no shopping item"");return ;}String userId=user.getUserId();for(int i=0;i<user.getShoppingItem().size();i++){try{BasicDBObject item=(BasicDBObject)(user.getShoppingItem().get(i));String city=item.getString(DBConstants.F_CITY);String cate=item.getString(DBConstants.F_CATEGORY_NAME);String subcate=item.getString(DBConstants.F_SUB_CATEGORY_NAME);String itemId=item.getString(DBConstants.F_ITEM_ID);String keyword=item.getString(DBConstants.F_KEYWORD);String latitude=item.getString(DBConstants.F_LATITUDE);String longitude=item.getString(DBConstants.F_LONGITUDE);String radius=item.getString(DBConstants.F_RADIUS);Double maxPrice=null;if(item.containsField(DBConstants.F_MAX_PRICE)){Object value=item.get(DBConstants.F_MAX_PRICE);if(value!=null){maxPrice=(Double)value;}}Date expireDate=(Date)item.get(DBConstants.F_EXPIRE_DATE);String appId=item.getString(DBConstants.F_APPID);if(RecommendItemManager.isExpire(expireDate)){log.info(""user already expired, skip. userId = ""+user.getUserId()+"", itemId = ""+itemId+"",  expireDate = ""+expireDate);continue;}String keywords=RecommendItemManager.generateKeyword(cate,subcate,keyword);RecommendItem recommendItem=RecommendItemManager.findAndUpsertRecommendItem(mongoClient,user.getUserId(),itemId,appId);RecommendItemManager.cleanExpireProduct(mongoClient,recommendItem);if(recommendItem.hasRecommendToday()){log.info(""user item ""+itemId+"" has been recommended today, skip matching action"");continue;}List<Product> productList=null;if(latitude!=null&&latitude.length()>0&&longitude!=null&&longitude.length()>0&&radius!=null&&radius.length()>0){Double latitudeValue=Double.valueOf(latitude);Double longitudeValue=Double.valueOf(longitude);Double radiusValue=Double.valueOf(radius)/1000;productList=ProductManager.searchProductBySolr(SolrClient.getInstance(),mongoClient,city,null,false,keywords,maxPrice,latitudeValue,longitudeValue,radiusValue,0,MAX_RECOMMEND_COUNT);}else {productList=ProductManager.searchProductBySolr(SolrClient.getInstance(),mongoClient,city,null,false,keywords,maxPrice,0,MAX_RECOMMEND_COUNT);log.info(""<RecommendRequest> location match switch is turned off or null,latitude ""+latitude+"" longitude is ""+longitude+"" radius is ""+radius);}if(productList==null||productList.size()<=0){log.info(""no product match to recommend for user=""+userId+"", itemId = ""+itemId);UserManager.recommendFailure(mongoClient,user);continue;}boolean hasChange=false;int addCount=0;for(Product product : productList){if(RecommendItemManager.addOrUpdateProduct(recommendItem,product)){log.info(""add or update product (""+product.getId()+""), score = ""+product.getScore()+"" into recommend item = ""+itemId);hasChange=true;addCount++;}}log.info(productList.size()+"" product found, ""+addCount+"" are added/updated for user=""+userId+"", itemId = ""+itemId);if(hasChange){String productId=recommendItem.sortAndSelectProduct(user);if(productId==null){log.info(""No product to recommend"");continue;}Product product=ProductManager.findProductById(mongoClient,productId);if(product!=null){saveProductToPushMessage(mongoClient,product,user,recommendItem);}mongoClient.save(DBConstants.T_USER,user.getDbObject());mongoClient.save(DBConstants.T_RECOMMEND,recommendItem.getDbObject());}UserManager.recommendClose(mongoClient,user);}catch(Exception e){log.error(""Processing user(""+user.getUserId()+"") shopping item, but catch exception = ""+e.getMessage(),e);UserManager.recommendFailure(mongoClient,user);}}}"
2577	"private void saveSelectedTab(){try{System.out.println(""Save!"");JViewport viewport=((JScrollPane)tabbedPane.getSelectedComponent()).getViewport();EditorArea ea=(EditorArea)viewport.getView();if(ea.getPath()==null){saveSelectedTabAs();}else {PrintWriter writer=new PrintWriter(ea.getPath(),""UTF-8"");String[] lines=ea.getText().split(""\\n"");for(String line : lines){writer.println(line);}writer.flush();writer.close();ea.setSaved(true);if(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).endsWith(""*"")){String currentTitle=tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());String newTitle=currentTitle.substring(0,currentTitle.indexOf(""*""));tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(),newTitle);}}}catch(Exception e){System.out.println(""Something went wrong:\n""+e.getMessage());}}"
2578	"@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){if(getItemCount()==0){detachAndScrapAttachedViews(recycler);offset=0;return ;}if(getChildCount()==0){View scrap=recycler.getViewForPosition(0);addView(scrap);measureChildWithMargins(scrap,0,0);mDecoratedChildWidth=getDecoratedMeasuredWidth(scrap);mDecoratedChildHeight=getDecoratedMeasuredHeight(scrap);startLeft=(getHorizontalSpace()-mDecoratedChildWidth)/2;startTop=(getVerticalSpace()-mDecoratedChildHeight)/2;interval=setInterval();setUp();detachAndScrapView(scrap,recycler);}offset=mShouldReverseLayout?scrollToPosition*interval:-scrollToPosition*interval;detachAndScrapAttachedViews(recycler);handleOutOfRange();layoutItems(recycler,state);}"
2579	"@Override protected void processEntity(Entity entity,float deltaTime){MapCursorComponent cursor=cursorM.get(entity);MapPositionComponent cursorPos=mapPosM.get(entity);Entity newSelection=null;if(Gdx.input.isKeyJustPressed(Input.Keys.Z)){newSelection=parentScreen.getMap().getUnitAt(cursorPos.row,cursorPos.col);if(newSelection!=null){clearToggledUnits();cursor.selection=newSelection;cursor.selection.add(new ShowValidMovesComponent());return ;}if(cursor.selection!=null){if(readyPlayerControlledFamily.matches(cursor.selection)){if(parentScreen.getMap().computeValidMoves(cursor.selection).contains(new MapPositionComponent(cursorPos.row,cursorPos.col))){Entity prevUnit=parentScreen.getMap().getUnitAt(cursorPos.row,cursorPos.col);if(prevUnit!=null){if(aiControlledFamily.matches(prevUnit)){System.out.println(""STARTING COMBAT"");UnitStatsComponent playerUnitStats=statsM.get(cursor.selection);UnitStatsComponent aiUnitStats=statsM.get(newSelection);this.parentScreen.game.setScreen(new BattleScreen(this.parentScreen.game,this.parentScreen,playerUnitStats.base,aiUnitStats.base));return ;}}else {parentScreen.getMap().move(cursor.selection,cursorPos.row,cursorPos.col);clearToggledUnits();cursor.selection=null;}}else {clearToggledUnits();cursor.selection=null;}}else {clearToggledUnits();cursor.selection=null;}}}if(Gdx.input.isKeyJustPressed(Input.Keys.X)){cursor.selection=null;clearToggledUnits();}}"
2580	"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){super.onScrollStateChanged(recyclerView,newState);if(newState!=0){return ;}if(temp.canScrollVertically(1)){if(manager instanceof GridLayoutManager){GridLayoutManager temp=(GridLayoutManager)manager; final int itemCount=temp.getItemCount(); final int lastVisibleItemPositionReal=temp.findLastVisibleItemPosition()+1;if(itemCount!=lastVisibleItemPositionReal){return ;}onLoad(holder,isLoadOver);}else {if(manager instanceof LinearLayoutManager){LinearLayoutManager temp=(LinearLayoutManager)manager; final int itemCount=temp.getItemCount(); final int lastVisibleItemPositionReal=temp.findLastVisibleItemPosition()+1;if(itemCount!=lastVisibleItemPositionReal){return ;}onLoad(holder,isLoadOver);}else {StaggeredGridLayoutManager temp=(StaggeredGridLayoutManager)manager;temp.findLastVisibleItemPositions(positions); final int itemCount=temp.getItemCount(); final int lastVisibleItemPositionReal=positions[0]+1;if(itemCount!=lastVisibleItemPositionReal){return ;}onLoad(holder,isLoadOver);}}}else {onLoad(holder,isLoadOver);}}"
2581	"@Override public int read() throws IOException{if(idx++>=limit){return -1;}return src.read();}"
2582	"public void setUnitSelected(boolean unitSelected){this.unitSelected=unitSelected;}"
2583	"public static TvTrackInfo buildTvTrackInfo(Format format){String trackName=ExoPlayerUtils.buildTrackName(format);Log.d(TAG,""Processing track: ""+trackName);if(format.id==null){Log.e(TAG,""Track ID invalid, skipping track ""+trackName);return null;}TvTrackInfo.Builder builder;int trackType=MimeTypes.getTrackType(format.sampleMimeType);switch (trackType){case C.TRACK_TYPE_VIDEO :builder=new TvTrackInfo.Builder(TvTrackInfo.TYPE_VIDEO,format.id);builder.setVideoFrameRate(format.frameRate);if(format.width!=Format.NO_VALUE&&format.height!=Format.NO_VALUE){if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.M){builder.setVideoWidth(format.width);builder.setVideoHeight(format.height);builder.setVideoPixelAspectRatio(format.pixelWidthHeightRatio);}else {builder.setVideoWidth((int)(format.width*format.pixelWidthHeightRatio));builder.setVideoHeight(format.height);}}break;case C.TRACK_TYPE_AUDIO :builder=new TvTrackInfo.Builder(TvTrackInfo.TYPE_AUDIO,format.id);builder.setAudioChannelCount(format.channelCount);builder.setAudioSampleRate(format.sampleRate);break;case C.TRACK_TYPE_TEXT :builder=new TvTrackInfo.Builder(TvTrackInfo.TYPE_SUBTITLE,format.id);break;default :Log.w(TAG,""Unsupported track type: ""+format.sampleMimeType+"" / ""+trackName);return null;}if(!TextUtils.isEmpty(format.language)&&!format.language.equals(""und"")&&!format.language.equals(""nar"")&&!format.language.equals(""syn"")&&!format.language.equals(""mis"")){builder.setLanguage(format.language);}return builder.build();}"
2584	"public static void main(String[] args){String output="""";File file=new File(""Daten9A.txt"");int i=JOptionPane.showConfirmDialog(null,""Bitte geben sie eine Datei mit Kanteneintraegen an.\nStandardmaessig wird die \""Daten9A.txt\"" benutzt, falls keine Datei ausgewaehlt wurde."",""Hinweis"",JOptionPane.CANCEL_OPTION);if(i==JOptionPane.CANCEL_OPTION){System.exit(0);}JFileChooser fileChooser=new JFileChooser();FileNameExtensionFilter filter=new FileNameExtensionFilter(""TEXT FILES"",""txt"",""text"");fileChooser.setFileFilter(filter);int returnVal=fileChooser.showOpenDialog(null);if(returnVal==JFileChooser.APPROVE_OPTION){file=fileChooser.getSelectedFile();}output+=""-- Es wurde die Datei ""+file.getName()+"" verwendet. --\n\n"";InputReader reader=new InputReader(file);ArrayList<Node> nodeList;PriorityQueue<Edge> queue;ArrayList<Edge> tree=new ArrayList<Edge>();nodeList=reader.readNodes();Collections.sort(nodeList,new SortList());queue=reader.readEdges(nodeList);while(!queue.isEmpty()){Edge entry=queue.poll();Node firstNode=entry.getFirstNode();Node secondNode=entry.getSecondNode();if(!firstNode.isVisited()&&!secondNode.isVisited()){firstNode.visit();secondNode.visit();firstNode.setRoot(true);firstNode.setRootNode(firstNode);secondNode.addParent(firstNode);secondNode.removeParent(secondNode);secondNode.setRootNode(firstNode);tree.add(entry);output+=""added edge ""+firstNode.getName()+"" - ""+secondNode.getName()+"" Gewicht: ""+entry.getWeight()+""\n"";}if(firstNode.isVisited()&&secondNode.isVisited()&&!firstNode.getRootNode().equals(secondNode.getRootNode())){secondNode.addParent(firstNode);secondNode.getRootNode().setRoot(false);secondNode.setRootNode(firstNode.getRootNode());tree.add(entry);output+=""added edge ""+firstNode.getName()+"" - ""+secondNode.getName()+"" Gewicht: ""+entry.getWeight()+""\n"";}if(firstNode.isVisited()&&!secondNode.isVisited()){secondNode.visit();secondNode.addParent(firstNode);secondNode.removeParent(secondNode);secondNode.setRootNode(firstNode.getRootNode());tree.add(entry);output+=""added edge ""+firstNode.getName()+"" - ""+secondNode.getName()+"" Gewicht: ""+entry.getWeight()+""\n"";}if(!firstNode.isVisited()&&secondNode.isVisited()){firstNode.visit();firstNode.addParent(secondNode);firstNode.removeParent(firstNode);firstNode.setRootNode(secondNode.getRootNode());tree.add(entry);output+=""added edge ""+firstNode.getName()+"" - ""+secondNode.getName()+"" Gewicht: ""+entry.getWeight()+""\n"";}String printOut=""Noch nicht besucht:"";String liste="""";for(Node node : nodeList){if(node.isVisited()==false){liste+="" ""+node.getName();}}if(liste!=""""){output+=printOut+liste+""\n"";}output+=""Rootknoten:"";for(Node node : nodeList){if(node.isRoot()){output+="" ""+node.getName();}}output+=""\n"";}output+=""\n-- Alle Knoten wurden besucht! --\n"";output+=""\n-- Alle Kanten des Minimalgeruests im Ueberblick --\n"";for(Edge edge : tree){output+=""{ ""+edge.getFirstNode().getName()+"" , ""+edge.getSecondNode().getName()+"" , ""+edge.getWeight()+"" }""+""\n"";}JFrame frame=new JFrame(""Minimalgeruest"");frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);frame.setSize(600,800);frame.setLocationRelativeTo(null);JTextArea area=new JTextArea();area.setEditable(false);area.setText(output);JScrollPane scrollPane=new JScrollPane(area);frame.add(scrollPane);frame.setVisible(true);}"
2585	"public void createSequence(EObject context,EObject semanticObject){if(semanticObject.eClass().getEPackage()==FlowPackage.eINSTANCE){switch (semanticObject.eClass().getClassifierID()){case FlowPackage.ADDITION_OPERATOR :if(context==grammarAccess.getAdditionOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_AdditionOperator(context,(AdditionOperator)semanticObject);return ;}else {break;}case FlowPackage.AVERAGE_OPERATOR :if(context==grammarAccess.getAverageOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_AverageOperator(context,(AverageOperator)semanticObject);return ;}else {break;}case FlowPackage.BOOLEAN_DATA_TYPE :if(context==grammarAccess.getBooleanDataTypeRule()||context==grammarAccess.getDataTypeRule()||context==grammarAccess.getSimpleDataTypeRule()){sequence_DataType(context,(BooleanDataType)semanticObject);return ;}else {break;}case FlowPackage.BOOLEAN_OPERATION :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_And(context,(BooleanOperation)semanticObject);return ;}else {break;}case FlowPackage.BOOLEAN_VARIABLE_DEFINITION :if(context==grammarAccess.getBooleanVariableDefinitionRule()||context==grammarAccess.getModelElementRule()||context==grammarAccess.getVariableDefinitionRule()){sequence_BooleanVariableDefinition(context,(BooleanVariableDefinition)semanticObject);return ;}else {break;}case FlowPackage.COUNT_OPERATOR :if(context==grammarAccess.getCountOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_CountOperator(context,(CountOperator)semanticObject);return ;}else {break;}case FlowPackage.DECISION_TREE_ATTRIBUTE :if(context==grammarAccess.getDecisionTreeAttributeRule()){sequence_DecisionTreeAttribute(context,(DecisionTreeAttribute)semanticObject);return ;}else {break;}case FlowPackage.DECISION_TREE_OPERATOR :if(context==grammarAccess.getDecisionTreeOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_DecisionTreeOperator(context,(DecisionTreeOperator)semanticObject);return ;}else {break;}case FlowPackage.DIV :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_Multiplication(context,(Div)semanticObject);return ;}else {break;}case FlowPackage.DIVISION_OPERATOR :if(context==grammarAccess.getDivisionOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_DivisionOperator(context,(DivisionOperator)semanticObject);return ;}else {break;}case FlowPackage.ELEMENT_JOIN_OPERATOR :if(context==grammarAccess.getElementJoinOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_ElementJoinOperator(context,(ElementJoinOperator)semanticObject);return ;}else {break;}case FlowPackage.FILTER_OPERATOR :if(context==grammarAccess.getFilterOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_FilterOperator(context,(FilterOperator)semanticObject);return ;}else {break;}case FlowPackage.FLOAT_DATA_TYPE :if(context==grammarAccess.getDataTypeRule()||context==grammarAccess.getFloatDataTypeRule()||context==grammarAccess.getSimpleDataTypeRule()){sequence_DataType(context,(FloatDataType)semanticObject);return ;}else {break;}case FlowPackage.IMPORT :if(context==grammarAccess.getImportRule()||context==grammarAccess.getModelElementRule()){sequence_Import(context,(Import)semanticObject);return ;}else {break;}case FlowPackage.INPUT_OPERATOR :if(context==grammarAccess.getInputOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_InputOperator(context,(InputOperator)semanticObject);return ;}else {break;}case FlowPackage.INTEGER_DATA_TYPE :if(context==grammarAccess.getDataTypeRule()||context==grammarAccess.getIntegerDataTypeRule()||context==grammarAccess.getSimpleDataTypeRule()){sequence_DataType(context,(IntegerDataType)semanticObject);return ;}else {break;}case FlowPackage.JOIN_OPERATOR :if(context==grammarAccess.getJoinOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_JoinOperator(context,(JoinOperator)semanticObject);return ;}else {break;}case FlowPackage.LOG_OPERATOR :if(context==grammarAccess.getLogOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_LogOperator(context,(LogOperator)semanticObject);return ;}else {break;}case FlowPackage.MARKER_OPERATOR :if(context==grammarAccess.getBarrierOperatorRule()||context==grammarAccess.getMarkerOperatorRule()){sequence_MarkerOperator(context,(MarkerOperator)semanticObject);return ;}else {break;}case FlowPackage.MATCH_OPERATOR :if(context==grammarAccess.getMatchOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_MatchOperator(context,(MatchOperator)semanticObject);return ;}else {break;}case FlowPackage.MINUS :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_Addition(context,(Minus)semanticObject);return ;}else {break;}case FlowPackage.MODEL :if(context==grammarAccess.getModelRule()){sequence_Model(context,(Model)semanticObject);return ;}else {break;}case FlowPackage.MODULO_OPERATOR :if(context==grammarAccess.getModuloOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_ModuloOperator(context,(ModuloOperator)semanticObject);return ;}else {break;}case FlowPackage.MULTI :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_Multiplication(context,(Multi)semanticObject);return ;}else {break;}case FlowPackage.MULTIPLICATION_OPERATOR :if(context==grammarAccess.getMultiplicationOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_MultiplicationOperator(context,(MultiplicationOperator)semanticObject);return ;}else {break;}case FlowPackage.NUMBER_LITERAL :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_PrimaryExpression(context,(NumberLiteral)semanticObject);return ;}else {break;}case FlowPackage.NUMBER_VARIABLE_DEFINITION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getNumberVariableDefinitionRule()||context==grammarAccess.getVariableDefinitionRule()){sequence_NumberVariableDefinition(context,(NumberVariableDefinition)semanticObject);return ;}else {break;}case FlowPackage.OUTPUT_OPERATOR :if(context==grammarAccess.getOutputOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_OutputOperator(context,(OutputOperator)semanticObject);return ;}else {break;}case FlowPackage.PACKAGE_DECLARATION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getPackageDeclarationRule()){sequence_PackageDeclaration(context,(PackageDeclaration)semanticObject);return ;}else {break;}case FlowPackage.PLUS :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_Addition(context,(Plus)semanticObject);return ;}else {break;}case FlowPackage.QUERY_TAG_OPERATOR :if(context==grammarAccess.getQueryTagOperatorRule()){sequence_QueryTagOperator(context,(QueryTagOperator)semanticObject);return ;}else {break;}case FlowPackage.RANDOM_OPERATOR :if(context==grammarAccess.getRandomOperatorRule()||context==grammarAccess.getReturnTypeOperatorRule()){sequence_RandomOperator(context,(RandomOperator)semanticObject);return ;}else {break;}case FlowPackage.RULE :if(context==grammarAccess.getRuleRule()){sequence_Rule(context,(Rule)semanticObject);return ;}else {break;}case FlowPackage.SPARQL_OPERATOR :if(context==grammarAccess.getSPARQLOperatorRule()){sequence_SPARQLOperator(context,(SPARQLOperator)semanticObject);return ;}else {break;}case FlowPackage.SWRL_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getSWRLOperatorRule()){sequence_SWRLOperator(context,(SWRLOperator)semanticObject);return ;}else {break;}case FlowPackage.SWRL_RULE :if(context==grammarAccess.getSWRLRuleRule()){sequence_SWRLRule(context,(SWRLRule)semanticObject);return ;}else {break;}case FlowPackage.SPARQL_QUERY :if(context==grammarAccess.getSparqlQueryRule()){sequence_SparqlQuery(context,(SparqlQuery)semanticObject);return ;}else {break;}case FlowPackage.SPARQL_QUERY_VARIABLE :if(context==grammarAccess.getSparqlQueryVariableRule()){sequence_SparqlQueryVariable(context,(SparqlQueryVariable)semanticObject);return ;}else {break;}case FlowPackage.SPLIT_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getSplitOperatorRule()){sequence_SplitOperator(context,(SplitOperator)semanticObject);return ;}else {break;}case FlowPackage.STANDARD_DEVIATION_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getStandardDeviationOperatorRule()){sequence_StandardDeviationOperator(context,(StandardDeviationOperator)semanticObject);return ;}else {break;}case FlowPackage.STREAM_ACCESS :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_PrimaryExpression(context,(StreamAccess)semanticObject);return ;}else {if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStreamAccessRule()){sequence_StreamAccess(context,(StreamAccess)semanticObject);return ;}else {break;}}case FlowPackage.STREAM_DECLARATION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStreamDeclarationRule()){sequence_StreamDeclaration(context,(StreamDeclaration)semanticObject);return ;}else {break;}case FlowPackage.STREAM_DECLARATION_ACCESS :if(context==grammarAccess.getStreamDeclarationAccessRule()){sequence_StreamDeclarationAccess(context,(StreamDeclarationAccess)semanticObject);return ;}else {break;}case FlowPackage.STREAM_DEFINITION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStreamDefinitionRule()){sequence_StreamDefinition(context,(StreamDefinition)semanticObject);return ;}else {break;}case FlowPackage.STREAM_OPERATOR_PARAMETER :if(context==grammarAccess.getStreamOperatorParameterRule()){sequence_StreamOperatorParameter(context,(StreamOperatorParameter)semanticObject);return ;}else {break;}case FlowPackage.STREAM_STATEMENT :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStreamStatementRule()){sequence_StreamStatement(context,(StreamStatement)semanticObject);return ;}else {break;}case FlowPackage.STREAM_VARIABLE_STATEMENT :if(context==grammarAccess.getStreamVariableStatementRule()){sequence_StreamVariableStatement(context,(StreamVariableStatement)semanticObject);return ;}else {break;}case FlowPackage.STRING_DATA_TYPE :if(context==grammarAccess.getComplexDataTypeRule()||context==grammarAccess.getDataTypeRule()||context==grammarAccess.getStringDataTypeRule()){sequence_DataType(context,(StringDataType)semanticObject);return ;}else {break;}case FlowPackage.STRING_VARIABLE_DEFINITION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStringVariableDefinitionRule()||context==grammarAccess.getVariableDefinitionRule()){sequence_StringVariableDefinition(context,(StringVariableDefinition)semanticObject);return ;}else {break;}case FlowPackage.STRUCTURE_DECLARATION :if(context==grammarAccess.getModelElementRule()||context==grammarAccess.getStructureDeclarationRule()){sequence_StructureDeclaration(context,(StructureDeclaration)semanticObject);return ;}else {break;}case FlowPackage.STRUCTURE_ELEMENTS :if(context==grammarAccess.getStreamElementRule()||context==grammarAccess.getStructureElementsRule()){sequence_StructureElements(context,(StructureElements)semanticObject);return ;}else {break;}case FlowPackage.SUBTRACTION_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getSubtractionOperatorRule()){sequence_SubtractionOperator(context,(SubtractionOperator)semanticObject);return ;}else {break;}case FlowPackage.TAG_CLASS_ELEMENT :if(context==grammarAccess.getTagClassElementRule()||context==grammarAccess.getTagElementRule()){sequence_TagClassElement(context,(TagClassElement)semanticObject);return ;}else {break;}case FlowPackage.TAG_DATA_TYPE_PROPERTY_ELEMENT :if(context==grammarAccess.getTagDataTypePropertyElementRule()||context==grammarAccess.getTagElementRule()){sequence_TagDataTypePropertyElement(context,(TagDataTypePropertyElement)semanticObject);return ;}else {break;}case FlowPackage.TAG_OBJECT_PROPERTY_ELEMENT :if(context==grammarAccess.getTagElementRule()||context==grammarAccess.getTagObjectPropertyElementRule()){sequence_TagObjectPropertyElement(context,(TagObjectPropertyElement)semanticObject);return ;}else {break;}case FlowPackage.TAG_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getTagOperatorRule()){sequence_TagOperator(context,(TagOperator)semanticObject);return ;}else {break;}case FlowPackage.UN_TAG_ELEMENT :if(context==grammarAccess.getUnTagElementRule()){sequence_UnTagElement(context,(UnTagElement)semanticObject);return ;}else {break;}case FlowPackage.UN_TAG_OPERATOR :if(context==grammarAccess.getReturnTypeOperatorRule()||context==grammarAccess.getUnTagOperatorRule()){sequence_UnTagOperator(context,(UnTagOperator)semanticObject);return ;}else {break;}case FlowPackage.VARIABLE_CALL :if(context==grammarAccess.getAdditionRule()||context==grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()||context==grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()||context==grammarAccess.getAndRule()||context==grammarAccess.getAndAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getExpressionRule()||context==grammarAccess.getMultiplicationRule()||context==grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()||context==grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()||context==grammarAccess.getOrRule()||context==grammarAccess.getOrAccess().getBooleanOperationLeftAction_1_0()||context==grammarAccess.getPrimaryExpressionRule()||context==grammarAccess.getRelationalExpressionRule()||context==grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()){sequence_PrimaryExpression(context,(VariableCall)semanticObject);return ;}else {break;}case FlowPackage.VARIABLE_DECLARATION :if(context==grammarAccess.getStreamElementRule()||context==grammarAccess.getVariableDeclarationRule()){sequence_VariableDeclaration(context,(VariableDeclaration)semanticObject);return ;}else {break;}case FlowPackage.WINDOW_OPERATOR :if(context==grammarAccess.getBarrierOperatorRule()||context==grammarAccess.getWindowOperatorRule()){sequence_WindowOperator(context,(WindowOperator)semanticObject);return ;}else {break;}}}if(errorAcceptor!=null){errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject,context));}}"
2586	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}UserExpressionViewModel that=(UserExpressionViewModel)o;if(active!=that.active){return false;}return type==that.type;}"
2587	"@Override public Set<HeldLocksToken> getTokens(LockClient client){Preconditions.checkNotNull(client);if(client.isAnonymous()){throw new IllegalArgumentException(""client must not be anonymous"");}else {if(client==INTERNAL_LOCK_GRANT_CLIENT){throw new IllegalArgumentException(""Illegal client!"");}}ImmutableSet.Builder<HeldLocksToken> tokens=ImmutableSet.builder();synchronized(lockClientMultimap){for(HeldLocksToken token : lockClientMultimap.get(client)){ @Nullable HeldLocks<HeldLocksToken> heldLocks=heldLocksTokenMap.get(token);if((heldLocks!=null)&&!isFrozen(heldLocks.locks.getKeys())){tokens.add(token);}}}ImmutableSet<HeldLocksToken> tokenSet=tokens.build();if(log.isTraceEnabled()){log.trace("".getTokens({}) returns {}"",client,Iterables.transform(tokenSet,TOKEN_TO_ID));}return tokenSet;}"
2588	"@Override public double get(int row,int col,double defaultValue){checkIndex(row,col,numRows,numColumns); final double[] colData=data[col];if(row>=colData.length){return defaultValue;}return colData[row];}"
2589	"@SuppressWarnings({""deprecation""}) private Set<Obs> getHeadCircumferenceConceptObsForAPatient(Patient patient){Concept headCircumferenceConcept=new IsantePlusGlobalProps().HEAD_CIRCUMFERENC_CONCEPT;return headCircumferenceConcept!=null?Context.getObsService().getObservations(patient,headCircumferenceConcept,false):null;}"
2590	"public void logPurchaseCollect(String owner,String renter,PurchaseEntry purchase){if(plugin.getSettingsManager().isLogRentsAndPurchases()){PreciousStones.log(""logPurchaseCollect"",owner,purchase.getAmount(),(purchase.getItem()!=null)?purchase.getItem():"""",renter,purchase.getCoords());}}"
2591	"protected void softDiversification(){System.out.println(""go soft diversification"");branchLog.addLog(""left"",k,elapsed_time,solver.getFunctionObjective(),false);solver.removeConstraints(lastConstraintLocBra);lastConstraintLocBra=solver.addConstraints(last_decision_variable,k/2,""<="");modeDivers=true;isStart=false;}"
2592	"private synchronized boolean isInterested(int peerId){Boolean isInterested=false;byte[] myBitfieldArray=process.getBitField(myPeerID).getBitFieldByteArray();byte[] neighborBitfieldArray=process.getBitField(peerId).getBitFieldByteArray();for(int i=5;i<myBitfieldArray.length;i++){byte myByte=myBitfieldArray[i];byte neighborByte=neighborBitfieldArray[i];for(int j=7;j>-1;j--){if((((1<<j)&myByte)==0)&&(((1<<j)&neighborByte)==1)){isInterested=true;process.getInterestedPieces().add((i-5)*8+7-j);}else {if(process.getNotInterestedPieces().contains(new Integer((i-5)*8+7-j))){process.getNotInterestedPieces().remove(new Integer((i-5)*8+7-j));}}}}this.interested=isInterested;System.out.println(""myByte: ""+bytesToHex(myBitfieldArray));System.out.println(""neighborByte: ""+bytesToHex(neighborBitfieldArray));System.out.println(""Interested pieces : ""+process.getInterestedPieces().size());return isInterested;}"
2593	"@Override public Integer doInBackground(Void... params){if(!Utility.isNetworkAvailable(mContext)){return 0;}switch (mRequestType){case GET :Utility.showLog(""Request URL "",mUrl);Utility.showLog(""Request mParams "",""""+mParams);if(mUrl.contains(APIConstants.MY_EVENTS)||mUrl.contains(APIConstants.EVENT_GOING)||mUrl.contains(APIConstants.WHOIS_GOING)||mUrl.contains(APIConstants.GET_EVENT_DETAILS)||mUrl.contains(APIConstants.GET_MY_CLASSIFIEDS)||mUrl.contains(APIConstants.DELETE_CLASSIFIED)||mUrl.contains(APIConstants.DELETE_EVENT)){mResponse=Utility.getWithHeader(Utility.getURL(mUrl,mParams),mContext);}else {mResponse=Utility.httpGetRequestToServer(Utility.getURL(mUrl,mParams));}if(mResponse!=null){Utility.showLog(""mResponse  "",mResponse);}return parseResposnse(mResponse);case POST :Utility.showLog(""Request URL "",mUrl);Utility.showLog(""Request mParams != null getParams  "",""""+Utility.getParams(mParams));if(mUrl.contains(APIConstants.LOGIN)||mUrl.contains(APIConstants.SIGN_UP)){mResponse=Utility.httpLoginCookiesPostRequest(mUrl,Utility.getParams(mParams),mContext);}else {if(mUrl.contains(APIConstants.FORGOT_PASSWORD)||mUrl.contains(APIConstants.RESET_PASSWORD)||mUrl.contains(APIConstants.UPDATE_PASSWORD)||mUrl.contains(APIConstants.UPDATE_PROFILE)||mUrl.contains(APIConstants.UPDATE_EVENT)||mUrl.contains(APIConstants.ADD_EVENT)){mResponse=Utility.httpPostRequestToServerWithHeaderCookies(mUrl,Utility.getParams(mParams),mContext);}}if(mResponse!=null){Utility.showLog(""mResponse  "",mResponse);}return parseResposnse(mResponse);default :return -1;}}"
2594	"public String deduceMove(){currentTime=System.currentTimeMillis();System.out.println(""Thinking..."");HashMap<String,HashSet<Integer[]>> validMoves=othelloGame.getValidMoves();String move="""";int score=Integer.MIN_VALUE;int iterations=1;while(System.currentTimeMillis()-currentTime<timeLimit){if(!validMoves.isEmpty()){for(String s : validMoves.keySet()){OthelloGame copy=othelloGame.getCopyBoard();copy.makeMove(s);copy.nextTurn();int temp=recursiveMin(copy,iterations,Integer.MIN_VALUE);if(temp>score){score=temp;move=s;}}}iterations++;}System.out.println(""Time it took: ""+(System.currentTimeMillis()-currentTime)/1000.0);return move;}"
2595	"public boolean accept(File dir,String name){return !name.startsWith(""."");}"
2596	"@Override public boolean onTouchEvent(MotionEvent event){switch (event.getAction()){case MotionEvent.ACTION_DOWN :mDragging=true;if(mFlingAnimator!=null){mFlingAnimator.cancel();}mHasMessage=mHandler.hasMessages(CLEAR_DRAGGED);if(mHasMessage){mHandler.removeMessages(CLEAR_DRAGGED);}reDraw();break;case MotionEvent.ACTION_MOVE :break;case MotionEvent.ACTION_UP :if(mHasMessage){mHandler.sendEmptyMessageDelayed(CLEAR_DRAGGED,mClearTime);}mDragging=false;reDraw();break;}mGestureDetector.onTouchEvent(event);return true;}"
2597	"@Override public void onBeforeScroll(int dx,int dy){if(mStickyMap==null){return ;}HashMap<String,WXComponent> stickyMap=mStickyMap.get(getRef());if(stickyMap==null){return ;}Iterator<Map.Entry<String,WXComponent>> iterator=stickyMap.entrySet().iterator();Map.Entry<String,WXComponent> entry;WXComponent stickyComponent;while(iterator.hasNext()){entry=iterator.next();stickyComponent=entry.getValue();if(stickyComponent!=null&&stickyComponent.getDomObject()!=null&&stickyComponent instanceof WXCell){WXCell cell=(WXCell)stickyComponent;if(cell.getHostView()==null){return ;}if(stickyComponent!=null&&stickyComponent.getDomObject()!=null&&stickyComponent instanceof WXCell){if(stickyComponent.getHostView()==null){return ;}RecyclerView.LayoutManager layoutManager;boolean beforeFirstVisibleItem=false;if((layoutManager=getHostView().getInnerView().getLayoutManager()) instanceof LinearLayoutManager){int fVisible=((LinearLayoutManager)layoutManager).findFirstVisibleItemPosition();int pos=mChildren.indexOf(cell);if(pos<=fVisible){beforeFirstVisibleItem=true;}}int[] location=new int[2];stickyComponent.getHostView().getLocationOnScreen(location);int[] parentLocation=new int[2];stickyComponent.getParentScroller().getView().getLocationOnScreen(parentLocation);int top=location[1]-parentLocation[1];boolean showSticky=beforeFirstVisibleItem&&cell.getLocationFromStart()>=0&&top<=0&&dy>=0;boolean removeSticky=cell.getLocationFromStart()<=0&&top>0&&dy<=0;if(showSticky){bounceRecyclerView.notifyStickyShow(cell);}else {if(removeSticky){bounceRecyclerView.notifyStickyRemove(cell);}}cell.setLocationFromStart(top);}}}}"
2598	"private boolean isEmptyTag(DetailNode tagNode){ final DetailNode tagDescription=JavadocUtils.findFirstToken(tagNode,JavadocTokenTypes.DESCRIPTION);return tagDescription==null;}"
2599	"@Override protected void onResume(){super.onResume();if((AnkiDroidApp.zeemoteController()!=null)&&(AnkiDroidApp.zeemoteController().isConnected())){Log.d(""Zeemote"",""Adding listener in onResume"");AnkiDroidApp.zeemoteController().addButtonListener(this);adapter=new JoystickToButtonAdapter();AnkiDroidApp.zeemoteController().addJoystickListener(adapter);adapter.addButtonListener(this);}if((mCurrentContentView==CONTENT_STUDY_OPTIONS||mCurrentContentView==CONTENT_SESSION_COMPLETE)){if(mTextDeckName.getVisibility()!=View.VISIBLE&&(mProgressDialog==null||!mProgressDialog.isShowing())){showDeckInformation(true);}else {updateValuesFromDeck();}}if(Utils.isNewDay(PrefSettings.getSharedPrefs(getBaseContext()).getLong(""lastTimeOpened"",0))&&(mCurrentContentView==CONTENT_STUDY_OPTIONS||mCurrentContentView==CONTENT_SESSION_COMPLETE)){BackupManager.initBackup();if(!DeckTask.taskIsRunning()){displayProgressDialogAndLoadDeck();}}BroadcastMessages.showDialog();}"
2600	"private List<TruckStop> performTruckSearch(Interval range,Truck truck){ImmutableList.Builder<TruckStop> builder=ImmutableList.builder();try{ final String calendarId=truck.getCalendarUrl();String pageToken=null;int timezoneAdjustment=truck.getTimezoneAdjustment();do {Calendar.Events.List query=calendarClient.events().list(calendarId).setSingleEvents(true).setTimeMin(toGoogleDateTime(range.getStart())).setTimeMax(toGoogleDateTime(range.getEnd())).setPageToken(pageToken);Events events=query.execute();List<Event> items=events.getItems();for(Event event : items){ final String titleText=event.getSummary();String where=event.getLocation();Location location=null;if(!Strings.isNullOrEmpty(where)){if(where.endsWith("", United States"")){where=where.substring(0,where.lastIndexOf("",""));}else {if(where.lastIndexOf("", IL "")!=-1){where=where.substring(0,where.lastIndexOf("", IL ""))+"", IL"";}}if(!where.endsWith("", IL"")){where=coalesce(Iterables.getFirst(addressExtractor.parse(where,truck),null),where);}location=geoLocator.locate(where,GeolocationGranularity.NARROW);}if(location==null||!location.isResolved()){if(!Strings.isNullOrEmpty(titleText)){where=titleText;log.info(""Trying title text: ""+titleText); final List<String> parsed=addressExtractor.parse(titleText,truck);String locString=Iterables.getFirst(parsed,null);if(locString==null){log.info(""Failed to parse titletext for address, trying whole thing: ""+titleText);locString=titleText;}if(locString!=null){location=geoLocator.locate(locString,GeolocationGranularity.NARROW);}}}if(location!=null&&location.isResolved()){String note=""Stop added from vendor's calendar"";Confidence confidence=Confidence.MEDIUM; final TruckStop truckStop=TruckStop.builder().truck(truck).origin(StopOrigin.VENDORCAL).location(location).confidence(confidence).appendNote(note).startTime(new DateTime(event.getStart().getDateTime().getValue(),clock.zone()).plusHours(timezoneAdjustment)).endTime(new DateTime(event.getEnd().getDateTime().getValue(),clock.zone()).plusHours(timezoneAdjustment)).build();log.log(Level.INFO,""Loaded truckstop: {0}"",truckStop);builder.add(truckStop);}else {log.log(Level.WARNING,""Location could not be resolved for {0}, {1} between {2} and {3}. Link: {4}"",new Object{truck.getId(),where,range.getStart(),range.getEnd(),event.getHtmlLink()});}}pageToken=events.getNextPageToken();} while(pageToken!=null);}catch(IOException e){log.log(Level.SEVERE,""An error occurred while caching the schedule"",e);}return builder.build();}"
2601	"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){if(key.equals(""setting_show_home_music"")||key.equals(""setting_show_home_movies"")||key.equals(""setting_show_home_tv"")||key.equals(""setting_show_home_pictures"")){setupMenuItems(mMenuGrid);}}"
2602	"public void onTick(){this.tickNum+=1;if(this.info.yardstogo==0){this.info.yardstogo=10;this.firstDown=true;}for(Defense d : defenders){if(d.position.equals(player.position)&&this.info.down==4&&!this.firstDown){this.homepossesion=!this.homepossesion;this.info.yardstogo=10;this.firstDown=true;this.player.tackled=true;}else {if(d.position.equals(player.position)){this.info.down+=1;this.player.tackled=true;}else {if(d.position.equals(player.position)&&this.firstDown){this.player.tackled=true;}else {if(d.position.equals(player.position)&&this.info.down==4&&this.firstDown){this.player.tackled=true;}}}}}if(tickNum%10==0&&this.firstMove){this.defenders.get((int)(Math.random()*5)).move(this.player.position);}if(this.player.tackled&&homepossesion){this.resetHomePosition();}else {if(this.player.tackled&&!homepossesion){this.resetAwayPosition();}}}"
2603	"public boolean isEnabled(){return true;}"
2604	"public boolean isPlayer(){return sender instanceof Player;}"
2605	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}Weather weather=(Weather)o;return (temperatureMin!=null?temperatureMin.equals(weather.temperatureMin):weather.temperatureMin==null)&&(temperatureMax!=null?temperatureMax.equals(weather.temperatureMax):weather.temperatureMax==null)&&(pressure!=null?pressure.equals(weather.pressure):weather.pressure==null)&&(humidity!=null?humidity.equals(weather.humidity):weather.humidity==null)&&(windSpeed!=null?windSpeed.equals(weather.windSpeed):weather.windSpeed==null)&&(windDirection!=null?windDirection.equals(weather.windDirection):weather.windDirection==null)&&(cloudsDensity!=null?cloudsDensity.equals(weather.cloudsDensity):weather.cloudsDensity==null)&&(rainVolume!=null?rainVolume.equals(weather.rainVolume):weather.rainVolume==null)&&(snowVolume!=null?snowVolume.equals(weather.snowVolume):weather.snowVolume==null);}"
2606	"public void toChallenge(View view){Intent intent=new Intent(this,CreateTextActivity.class);if(mImageView!=null){intent.putExtra(""photo"",((BitmapDrawable)mImageView.getDrawable()).getBitmap());}intent.putExtra(""text"",this.text);startActivity(intent);finish();}"
2607	"private boolean isValidCandidateForRestart(AbstractProject<?,?> project){boolean isLocallyDeactivated=false;JobLocalConfiguration property=(JobLocalConfiguration)project.getProperty(JobLocalConfiguration.class);if(property!=null){isLocallyDeactivated=property.getIsLocallyDeactivated();}return project!=null&&!isLocallyDeactivated&&!project.isDisabled()&&project.isBuildable()&&project.getLastBuild()!=null&&project.getLastBuild().getResult()!=null&&project.getLastBuild().getResult().isWorseOrEqualTo(Result.FAILURE)&&!project.isBuilding()&&!project.isInQueue();}"
2608	"private static ConnectionType getConnectionType(CityResponse location){ConnectionType connectionType=ConnectionType.CONNECTION_UNKNOWN;if(location.getTraits().getConnectionType()!=null){if(location.getTraits().getConnectionType().toString().equals(""Cellular"")){connectionType=ConnectionType.CELL_UNKNOWN;}else {if(location.getTraits().getConnectionType().toString().equals(""Cable/DSL"")){connectionType=ConnectionType.ETHERNET;}else {if(location.getTraits().getConnectionType().toString().equals(""Corporate"")){connectionType=ConnectionType.WIFI;}}}}return connectionType;}"
2609	"public void moveToButtom(){int targetDistance=0;int destinationY=Tetris.playGroundHeight;int brick=Tetris.currentBrickState.getBrick();int rotate=Tetris.currentBrickState.getRotate();int currentX=(int)Tetris.currentBrickPosition.getX();int currentY=(int)Tetris.currentBrickPosition.getY();BrickPoint target[]=Tetris.bricks[brick][rotate];ArrayList<BrickPoint> fillBricks=new ArrayList<BrickPoint>(Tetris.tetris.fillBricks);ArrayList<Point> topPoints=new ArrayList<Point>();for(int i=0;i<target.length;i++){if(target[i].isRender){double nowX=target[i].getX();int bottomY=(int)target[i].getY();for(int j=0;j<target.length;j++){if(target[j].isRender&&target[j].getX()==nowX){if(bottomY<target[j].getY()){bottomY=(int)target[j].getY();}}}Point topPoint=new Point((int)nowX+Tetris.playGroundOffset+currentX,bottomY+currentY);if(!(topPoints.contains(topPoint))){topPoints.add(topPoint);}}}ArrayList<Point> bottomPoints=new ArrayList<Point>();for(int i=0;i<fillBricks.size();i++){double targetX=fillBricks.get(i).getX();double bottomY=fillBricks.get(i).getY();boolean checkFlag=false;for(int j=0;j<topPoints.size();j++){double topPointX=topPoints.get(j).getX();if(targetX==topPointX){checkFlag=true;break;}}if(checkFlag){for(int r=0;r<fillBricks.size();r++){double nowX=fillBricks.get(r).getX();double nowY=fillBricks.get(r).getY();if(nowX==targetX){if(bottomY>nowY){bottomY=nowY;}}}Point bottomPoint=new Point((int)targetX,(int)bottomY);if(!(bottomPoints.contains(bottomPoint))){bottomPoints.add(bottomPoint);}}}int distance[]=new int[topPoints.size()];for(int i=0;i<topPoints.size();i++){double topX=topPoints.get(i).getX();double topY=topPoints.get(i).getY();for(int j=0;j<bottomPoints.size();j++){double bottomX=bottomPoints.get(j).getX();double bottomY=bottomPoints.get(j).getY();if(topX==bottomX){distance[i]=(int)bottomY-(int)topY-Tetris.playGroundOffset-this.cubeSize;}}}for(int i=0;i<topPoints.size();i++){if(distance[i]==0){double bottomY=topPoints.get(0).getY();for(int j=0;j<topPoints.size();j++){if(bottomY<topPoints.get(j).getY()){bottomY=topPoints.get(j).getY();}}distance[i]=Tetris.playGroundHeight-(int)bottomY-this.cubeSize;}}targetDistance=distance[0];for(int i=0;i<topPoints.size();i++){int nowDistance=distance[i];if(targetDistance>nowDistance){targetDistance=nowDistance;}}Tetris.currentBrickPosition.move((int)Tetris.currentBrickPosition.getX(),(int)Tetris.currentBrickPosition.getY()+targetDistance);this.processKeyInput(KeyEvent.VK_DOWN);}"
2610	"public void onBlockPlace(BlockPlaceEvent event){if(edit||!inRegion(event.getBlock().getLocation())){return ;}Block b=event.getBlock();if(running&&livePlayers.contains(event.getPlayer())){blocks.add(b);Material mat=b.getType();if(mat==Material.WOODEN_DOOR||mat==Material.IRON_DOOR_BLOCK){blocks.add(b.getRelative(0,1,0));}return ;}event.setCancelled(true);}"
2611	"public void onChronometerTick(Chronometer chrono){if(!resume){minutes=((SystemClock.elapsedRealtime()-timer.getBase())/1000)/60;seconds=((SystemClock.elapsedRealtime()-timer.getBase())/1000)%60;String secs=(seconds<10)?(""0""+((Integer)(int)seconds).toString()):((Integer)(int)seconds).toString();String mins=(minutes<10)?(""0""+((Integer)(int)minutes).toString()):((Integer)(int)minutes).toString();String currentTime=mins+"":""+secs;chrono.setText(currentTime);chrono.setPadding(10,10,10,10);elapsedTime=SystemClock.elapsedRealtime();}else {minutes=((elapsedTime-timer.getBase())/1000)/60;seconds=((elapsedTime-timer.getBase())/1000)%60;String secs=(seconds<10)?(""0""+((Integer)(int)seconds).toString()):((Integer)(int)seconds).toString();String mins=(minutes<10)?(""0""+((Integer)(int)minutes).toString()):((Integer)(int)minutes).toString();String currentTime=mins+"":""+secs;chrono.setText(currentTime);chrono.setPadding(10,10,10,10);elapsedTime=elapsedTime+1000;}}"
2612	"private Beer getCheapestQuantity(int quantity){ScanRequest scanRequest=new ScanRequest().withTableName(""beer-""+quantity);ScanResult result=client.scan(scanRequest);Beer cheapest=null;for(Map<String,AttributeValue> item : result.getItems()){Beer current=new Beer();current.setName(item.get(""name"").getS());current.setPrice(Double.parseDouble(item.get(""price"").getN()));current.setStoreName(item.get(""storeName"").getS());current.setTimestamp(Long.parseLong(item.get(""timestamp"").getN()));current.setQuantity(quantity);if(cheapest==null){cheapest=current;}if(current.getPrice()<cheapest.getPrice()||(current.getPrice()==cheapest.getPrice()&&current.getTimestamp()>cheapest.getTimestamp())){cheapest=current;}}return cheapest;}"
2613	"@Override public void run(){try{boolean hasMoreWork=true;do {assert (confirmRunStart(stage));hasMoreWork=stage.exhaustedPoll();assert (confirmRunStop(stage));Thread.yield();} while(!isShutDownNow&&hasMoreWork);}catch(Throwable t){log.error(""Unexpected error in stage {}"",stage);log.error(""Stacktrace"",t);GraphManager.shutdownNeighbors(graphManager,stage);}}"
2614	"public static boolean isVplexBackendVolume(UnManagedVolume volume){if(null==volume.getVolumeCharacterstics()){return false;}String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString());return TRUE.equals(status);}"
2615	"public boolean allowsTarget(Object target,Scene scene,Person acting){if(target instanceof Prop){return !((Prop)target).blocksFull();}return target instanceof Tile;}"
2616	"public final void onScrollStateChanged(AbsListView view,int state){if(state==OnScrollListener.SCROLL_STATE_IDLE&&null!=mOnLastItemVisibleListener&&mLastItemVisible){mOnLastItemVisibleListener.onLastItemVisible();}if(null!=mOnScrollListener){mOnScrollListener.onScrollStateChanged(view,state);}}"
2617	"@SuppressWarnings(""rawtypes"") public static Map parseMap(DefaultJSONParser parser,Map<String,Object> map,Type valueType,Object fieldName){JSONLexer lexer=parser.getLexer();if(lexer.token()!=JSONToken.LBRACE){throw new JSONException(""syntax error, expect {, actual ""+lexer.token());}ParseContext context=parser.getContext();try{for(;;){lexer.skipWhitespace();char ch=lexer.getCurrent();if(parser.isEnabled(Feature.AllowArbitraryCommas)){while(ch==','){lexer.next();lexer.skipWhitespace();ch=lexer.getCurrent();}}String key;if(ch=='""'){key=lexer.scanSymbol(parser.getSymbolTable(),'""');lexer.skipWhitespace();ch=lexer.getCurrent();if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.pos());}}else {if(ch=='}'){lexer.next();lexer.resetStringPosition();lexer.nextToken(JSONToken.COMMA);return map;}else {if(ch=='\''){if(!parser.isEnabled(Feature.AllowSingleQuotes)){throw new JSONException(""syntax error"");}key=lexer.scanSymbol(parser.getSymbolTable(),'\'');lexer.skipWhitespace();ch=lexer.getCurrent();if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.pos());}}else {if(!parser.isEnabled(Feature.AllowUnQuotedFieldNames)){throw new JSONException(""syntax error"");}key=lexer.scanSymbolUnQuoted(parser.getSymbolTable());lexer.skipWhitespace();ch=lexer.getCurrent();if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.pos()+"", actual ""+ch);}}}}lexer.next();lexer.skipWhitespace();ch=lexer.getCurrent();lexer.resetStringPosition();if(key==JSON.DEFAULT_TYPE_KEY){String typeName=lexer.scanSymbol(parser.getSymbolTable(),'""');Class<?> clazz=TypeUtils.loadClass(typeName);if(clazz==map.getClass()){lexer.nextToken(JSONToken.COMMA);if(lexer.token()==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);return map;}continue;}ObjectDeserializer deserializer=parser.getConfig().getDeserializer(clazz);lexer.nextToken(JSONToken.COMMA);parser.setResolveStatus(DefaultJSONParser.TypeNameRedirect);if(context!=null&&!(fieldName instanceof Integer)){parser.popContext();}return (Map)deserializer.deserialze(parser,clazz,fieldName);}Object value;lexer.nextToken();if(lexer.token()==JSONToken.NULL){value=null;lexer.nextToken();}else {value=parser.parseObject(valueType);}map.put(key,value);parser.checkMapResolve(map,key);parser.setContext(context,value,key); final int tok=lexer.token();if(tok==JSONToken.EOF||tok==JSONToken.RBRACKET){return map;}if(tok==JSONToken.RBRACE){lexer.nextToken();return map;}}}finally{parser.setContext(context);}}"
2618	"public final Enumerator ruleHyFeatureTypeEnum() throws RecognitionException{Enumerator current=null;Token enumLiteral_0=null;Token enumLiteral_1=null;enterRule();try{{int alt63=2;int LA63_0=input.LA(1);if((LA63_0==75)){alt63=1;}else {if((LA63_0==76)){alt63=2;}else {NoViableAltException nvae=new NoViableAltException("""",63,0,input);throw nvae;}}switch (alt63){case 1 :{{enumLiteral_0=(Token)match(input,75,FOLLOW_2);current=grammarAccess.getHyFeatureTypeEnumAccess().getOPTIONALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();newLeafNode(enumLiteral_0,grammarAccess.getHyFeatureTypeEnumAccess().getOPTIONALEnumLiteralDeclaration_0());}}break;case 2 :{{enumLiteral_1=(Token)match(input,76,FOLLOW_2);current=grammarAccess.getHyFeatureTypeEnumAccess().getMANDATORYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();newLeafNode(enumLiteral_1,grammarAccess.getHyFeatureTypeEnumAccess().getMANDATORYEnumLiteralDeclaration_1());}}break;}}leaveRule();}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
2619	"public static int validate(String email){int pass=4;if(countChar(email,'@')!=1){pass--;}else {if(email.indexOf('@')==0){pass--;}if(email.indexOf('@')==email.length()-1){pass--;}}if(countChar(email,'.')<1){pass--;}return pass;}"
2620	"public boolean hasNext(){return it<base.size();}"
2621	"public Message receive(){Message message=null;boolean multi=false;boolean nonMulti=false;if(multicastCoordinator.holdBackQueue.size()>0){for(int i=0;i<multicastCoordinator.holdBackQueue.size();i++){if(multicastCoordinator.releaseGroupMessage(multicastCoordinator.holdBackQueue.get(i))&&!multi){message=multicastCoordinator.holdBackQueue.get(i);multicastCoordinator.holdBackQueue.remove(i);multi=true;}}}if(receiveMessagesQueue.peek()==null){return null;}while((receiveMessagesQueue.size()>0)&&!multi&&!nonMulti){numMsgReceived++;message=receiveMessagesQueue.poll();if(message!=null&&!this.block){while(this.receiveDelayMessageQueue.peek()!=null){this.receiveMessagesQueue.offer(this.receiveDelayMessageQueue.poll());}}if(message instanceof GroupMessage){if(!multicastMessageWasReceived(message)){multicastReceived.add(message);if(!localName.equalsIgnoreCase(message.getSrc())){this.recast((GroupMessage)message);}if(multicastCoordinator.releaseGroupMessage((GroupMessage)message)){multi=true;multicastCoordinator.updateTime(((GroupMessage)message).getGroupName(),(GroupMessage)message);}else {handleGroupMessage((GroupMessage)message);message=null;}}else {message=null;}}else {nonMulti=true;}}if(message!=null){clockService.updateTime(((TimeStampedMessage)message).getTimeStamp());}if(message!=null){switch (message.getMessageType()){case RELEASE :receiveReleaseMessage();break;case REQUEST :receiveRequestMessage((TimeStampedMessage)message);break;case REPLY :repliesCounter.countDown();if(repliesCounter.getCount()==0){this.requestState=RequestState.HELD;}break;default :}}return message;}"
2622	"private boolean[] checkCheckBoxCorrectAnswers(){boolean[] CBCorrectAnswers=new boolean[question3CheckBoxAnswers.length];for(int i=0;i<question3CheckBoxAnswers.length;i+=1){CBCorrectAnswers[i]=(question3CheckBoxAnswers[i].isChecked()==question3CorrectCheckBoxAnswers[i]);}return CBCorrectAnswers;}"
2623	"@Override protected void doUpdate(AnalysisContextRisk context){if(!this.isEnabled()){if(manager!=null){manager.stop();}this.setStatusEmpty();return ;} final RiskEstimateBuilderInterruptible builder=getBuilder(context);Analysis analysis=new Analysis(){  private boolean stopped=false;  private double lowestRisk;  private double fractionOfTuplesAffectedByLowestRisk;  private double averageRisk;  private double highestRisk;  private double fractionOfTuplesAffectedByHighestRisk;  private double fractionOfUniqueTuples;  private double fractionOfUniqueTuplesDankar;  private StatisticalPopulationModel dankarModel;  @Override public int getProgress(){    return 0;  }  @Override public void onError(){    setStatusEmpty();  }  @Override public void onFinish(){    if (stopped || !isEnabled()) {      return;    }    table.setRedraw(false);    for (    final TableItem i : items) {      i.dispose();    }    items.clear();    createItem(Resources.getMessage(""RiskAnalysis.14""),lowestRisk);    createItem(Resources.getMessage(""RiskAnalysis.17""),fractionOfTuplesAffectedByLowestRisk);    createItem(Resources.getMessage(""RiskAnalysis.8""),averageRisk);    createItem(Resources.getMessage(""RiskAnalysis.9""),highestRisk);    createItem(Resources.getMessage(""RiskAnalysis.10""),fractionOfTuplesAffectedByHighestRisk);    createItem(Resources.getMessage(""RiskAnalysis.11""),fractionOfUniqueTuples);    createItem(Resources.getMessage(""RiskAnalysis.12""),fractionOfUniqueTuplesDankar);    createItem(Resources.getMessage(""RiskAnalysis.18""),dankarModel);    createItem(Resources.getMessage(""RiskAnalysis.25""),getQuasiIdentifiers(context));    table.setRedraw(true);    setStatusDone();  }  @Override public void onInterrupt(){    if (!isEnabled() || !isValid()) {      setStatusEmpty();    } else {      setStatusWorking();    }  }  @Override public void run() throws InterruptedException {    long time=System.currentTimeMillis();    RiskModelSampleBasedReidentificationRisk samReidModel=builder.getSampleBasedReidentificationRisk();    RiskModelSampleBasedUniquenessRisk samUniqueModel=builder.getSampleBasedUniquenessRisk();    RiskModelPopulationBasedUniquenessRisk popUniqueModel=builder.getPopulationBasedUniquenessRisk();    lowestRisk=samReidModel.getLowestRisk();    fractionOfTuplesAffectedByLowestRisk=samReidModel.getFractionOfTuplesAffectedByLowestRisk();    averageRisk=samReidModel.getAverageRisk();    highestRisk=samReidModel.getHighestRisk();    fractionOfTuplesAffectedByHighestRisk=samReidModel.getFractionOfTuplesAffectedByHighestRisk();    fractionOfUniqueTuples=samUniqueModel.getFractionOfUniqueTuples();    fractionOfUniqueTuplesDankar=popUniqueModel.getFractionOfUniqueTuplesDankar();    dankarModel=popUniqueModel.getDankarModel();    while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {      Thread.sleep(10);    }  }  @Override public void stop(){    builder.interrupt();    this.stopped=true;  }};this.manager.start(analysis);}"
2624	"@Override public void update(float timeStep){Material currentTransfer=Material.makeFromWeight(content.mol,transferRate*timeStep);if(content.empty()&&owner.getMachine(getStart())!=null){currentTransfer=Material.makeFromWeight(owner.getMachine(getStart()).getMol(inPort),transferRate*timeStep);}if(owner.getMachine(getDestination())!=null){owner.transfer(this,0,owner.getMachine(getDestination()),outPort,currentTransfer);}if(owner.getMachine(getStart())!=null){owner.transfer(owner.getMachine(getStart()),inPort,this,0,currentTransfer);}}"
2625	"public void initializeExtendsBound(AnnotatedWildcardType wildcard){ final AnnotatedTypeFactory typeFactory=wildcard.atypeFactory; final WildcardType underlyingType=wildcard.getUnderlyingType();TypeMirror underlyingExtendsBound=underlyingType.getExtendsBound();if(underlyingExtendsBound==null){underlyingExtendsBound=TypesUtils.wildUpperBound(wildcard.atypeFactory.processingEnv,underlyingType);} final AnnotatedTypeMirror extendsBound=AnnotatedTypeMirror.createType(underlyingExtendsBound,typeFactory,false);wildcard.setExtendsBound(extendsBound);this.wildcards.put(wildcard.getUnderlyingType(),wildcard); final BoundPathNode extendsNode=addPathNode(new ExtendsNode());visit(extendsBound);removePathNode(extendsNode);}"
2626	"@Override public SecureUserProfile sourceSelect(SecureUserProfile userProfile,List<PartnerBadge> partners){selectedPartners.clear();if(userProfile.partnerList.size()<=0){if(userProfile.languages.size()>0){for(Language userLangDetails : userProfile.languages){String userLanguage=userLangDetails.getIso2();collectPartnersOnLanguageMatch(userLanguage,partners,userProfile.partnerList);}}else {LOGGER.info(""refusing to select partners due to no specified languages"");return userProfile;}}else {LOGGER.info(""refusing to select partners due to [""+userProfile.partnerList.size()+""] prevoiously selected partners"");return userProfile;}if(selectedPartners.size()>0){LOGGER.info(""language-based source selection:"");for(Map.Entry<PartnerBadge,List<String>> entry : selectedPartners.entrySet()){StringBuilder info=new StringBuilder();info.append(""partner [""+entry.getKey().getSystemId()+""] matching language(s):"");for(String language : entry.getValue()){info.append("" [""+language+""]"");}LOGGER.info(info.toString());}}else {LOGGER.info(""unsuccessfull partner selection"");}return userProfile;}"
2627	"private static String parseFileOrder(ParadoxConnection conn,ParadoxView view,BufferedReader reader,String oldLine) throws IOException,SQLException{String line=oldLine;if(line!=null&&line.startsWith(""FIELDORDER: "")){ final ArrayList<ParadoxField> fields=readFields(conn,reader,line);view.setFieldsOrder(fields);line=fixExtraLine(reader);}return line;}"
2628	"private String getDisplayName(RendererConfiguration mediaRenderer,boolean withSuffix){PmsConfiguration configurationSpecificToRenderer=PMS.getConfiguration(mediaRenderer);displayName=StringEscapeUtils.unescapeJava(getName());nameSuffix="""";String subtitleFormat;String subtitleLanguage;boolean isNamedNoEncoding=false;boolean subsAreValidForStreaming=media_subtitle!=null&&media_subtitle.isStreamable()&&mediaRenderer!=null&&mediaRenderer.streamSubsForTranscodedVideo();if(this instanceof RealFile&&!isFolder()){RealFile rf=(RealFile)this;if(configurationSpecificToRenderer.isPrettifyFilenames()&&getFormat()!=null&&getFormat().isVideo()){displayName=FileUtil.getFileNamePrettified(displayName,rf.getFile());}else {if(configurationSpecificToRenderer.isHideExtensions()){displayName=FileUtil.getFileNameWithoutExtension(displayName);}}displayName=FullyPlayed.prefixDisplayName(displayName,rf,mediaRenderer);}if(player!=null){if(isNoName()){displayName=""[""+player.name()+""]"";}else {if(media!=null&&this instanceof DVDISOTitle&&mediaRenderer!=null&&media.getDurationInSeconds()>0&&mediaRenderer.isShowDVDTitleDuration()){nameSuffix+="" (""+StringUtil.convertTimeToString(media.getDurationInSeconds(),""%01d:%02d:%02.0f"")+"")"";}if(!configurationSpecificToRenderer.isHideEngineNames()){nameSuffix+="" [""+player.name()+""]"";}}}else {if(isNoName()){displayName=Messages.getString(""DLNAResource.0"");isNamedNoEncoding=true;if(subsAreValidForStreaming){isNamedNoEncoding=false;}}else {if(nametruncate>0){displayName=displayName.substring(0,nametruncate).trim();}}}if(hasExternalSubtitles()&&!isNamedNoEncoding&&media_audio==null&&media_subtitle==null&&!configurationSpecificToRenderer.hideSubsInfo()&&(player==null||player.isExternalSubtitlesSupported())){nameSuffix+="" ""+Messages.getString(""DLNAResource.1"");}if(getMediaAudio()!=null){String audioLanguage=""/""+getMediaAudio().getLangFullName();if(""/Undetermined"".equals(audioLanguage)){audioLanguage="""";}String audioTrackTitle="""";if(getMediaAudio().getAudioTrackTitleFromMetadata()!=null&&!"""".equals(getMediaAudio().getAudioTrackTitleFromMetadata())&&mediaRenderer!=null&&mediaRenderer.isShowAudioMetadata()){audioTrackTitle="" (""+getMediaAudio().getAudioTrackTitleFromMetadata()+"")"";}displayName=player!=null?(""[""+player.name()+""]""):"""";nameSuffix="" {Audio: ""+getMediaAudio().getAudioCodec()+audioLanguage+audioTrackTitle+""}"";}if(media_subtitle!=null&&media_subtitle.getId()!=-1&&!configurationSpecificToRenderer.hideSubsInfo()){subtitleFormat=media_subtitle.getType().getDescription();if(""(Advanced) SubStation Alpha"".equals(subtitleFormat)){subtitleFormat=""SSA"";}else {if(""Blu-ray subtitles"".equals(subtitleFormat)){subtitleFormat=""PGS"";}}subtitleLanguage=""/""+media_subtitle.getLangFullName();if(""/Undetermined"".equals(subtitleLanguage)){subtitleLanguage="""";}String subtitlesTrackTitle="""";if(media_subtitle.getSubtitlesTrackTitleFromMetadata()!=null&&!"""".equals(media_subtitle.getSubtitlesTrackTitleFromMetadata())&&mediaRenderer!=null&&mediaRenderer.isShowSubMetadata()){subtitlesTrackTitle="" (""+media_subtitle.getSubtitlesTrackTitleFromMetadata()+"")"";}String subsDescription=Messages.getString(""DLNAResource.2"")+subtitleFormat+subtitleLanguage+subtitlesTrackTitle;if(subsAreValidForStreaming){nameSuffix+="" {""+Messages.getString(""DLNAResource.3"")+subsDescription+""}"";}else {nameSuffix+="" {""+subsDescription+""}"";}}if(isAvisynth()){displayName=(player!=null?(""[""+player.name()):"""")+"" + AviSynth]"";}if(getSplitRange().isEndLimitAvailable()){displayName="">> ""+convertTimeToString(getSplitRange().getStart(),DURATION_TIME_FORMAT);}return withSuffix?(displayName+nameSuffix):displayName;}"
2629	"private void animateEnterToolbarLayout(float yOffset){if(headerAnimator==null){headerAnimator=ObjectAnimator.ofFloat(mHeader.toolbarLayout,""translationY"",0).setDuration(ENTER_TOOLBAR_ANIMATION_DURATION);headerAnimator.start();headerYOffset=yOffset;}}"
2630	"private String getEscapedValue(String value){return (value!=null)?AbstractPlugin.getURLEncode(value):"""";}"
2631	"private void decodeLoop(){ByteBuffer[] codecInputBuffers;ByteBuffer[] codecOutputBuffers;extractor=new MediaExtractor();try{extractor.setDataSource(this.mUrlString);}catch(Exception e){mDelegateHandler.onRadioPlayerError(this);return ;}MediaFormat format=extractor.getTrackFormat(0);String mime=format.getString(MediaFormat.KEY_MIME);if(!mime.startsWith(""audio/"")){Log.e(""MP3RadioStreamPlayer"",""??????!"");return ;}int channels=format.getInteger(MediaFormat.KEY_CHANNEL_COUNT);duration=format.getLong(MediaFormat.KEY_DURATION);try{codec=MediaCodec.createDecoderByType(mime);}catch(IOException e){e.printStackTrace();}codec.configure(format,null,null,0);codec.start();codecInputBuffers=codec.getInputBuffers();codecOutputBuffers=codec.getOutputBuffers();int sampleRate=format.getInteger(MediaFormat.KEY_SAMPLE_RATE);int channelConfiguration=channels==1?AudioFormat.CHANNEL_OUT_MONO:AudioFormat.CHANNEL_OUT_STEREO;Log.i(LOG_TAG,""mime ""+mime);Log.i(LOG_TAG,""sampleRate ""+sampleRate);audioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channelConfiguration,AudioFormat.ENCODING_PCM_16BIT,AudioTrack.getMinBufferSize(sampleRate,channelConfiguration,AudioFormat.ENCODING_PCM_16BIT),AudioTrack.MODE_STREAM);audioTrack.play();extractor.selectTrack(0); final long kTimeOutUs=10000;MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();boolean sawInputEOS=false;boolean sawOutputEOS=false;int noOutputCounter=0;int noOutputCounterLimit=50;while(!sawOutputEOS&&noOutputCounter<noOutputCounterLimit&&!doStop){if(pause){this.mState=State.Pause;try{Thread.sleep(500);}catch(InterruptedException e){e.printStackTrace();}continue;}noOutputCounter++;if(!sawInputEOS){if(seekOffsetFlag){seekOffsetFlag=false;extractor.seekTo(seekOffset,SEEK_TO_PREVIOUS_SYNC);}inputBufIndex=codec.dequeueInputBuffer(kTimeOutUs);bufIndexCheck++;if(inputBufIndex>=0){ByteBuffer dstBuf=codecInputBuffers[inputBufIndex];int sampleSize=extractor.readSampleData(dstBuf,0);long presentationTimeUs=0;if(sampleSize<0){Log.d(LOG_TAG,""saw input EOS."");sawInputEOS=true;sampleSize=0;}else {presentationTimeUs=extractor.getSampleTime();}curPosition=presentationTimeUs;codec.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,sawInputEOS?MediaCodec.BUFFER_FLAG_END_OF_STREAM:0);if(!sawInputEOS){extractor.advance();}}else {Log.e(LOG_TAG,""inputBufIndex ""+inputBufIndex);}}int res=codec.dequeueOutputBuffer(info,kTimeOutUs);if(res>=0){if(info.size>0){noOutputCounter=0;}int outputBufIndex=res;ByteBuffer buf=codecOutputBuffers[outputBufIndex]; final byte[] chunk=new byte[info.size];buf.get(chunk);buf.clear();if(chunk.length>0){audioTrack.write(chunk,0,chunk.length);short[] music=(!isBigEnd())?byteArray2ShortArrayLittle(chunk,chunk.length/2):byteArray2ShortArrayBig(chunk,chunk.length/2);sendData(music,music.length);calculateRealVolume(music,music.length);if(this.mState!=State.Playing){mDelegateHandler.onRadioPlayerPlaybackStarted(this);}this.mState=State.Playing;hadPlay=true;}codec.releaseOutputBuffer(outputBufIndex,false);if((info.flags&MediaCodec.BUFFER_FLAG_END_OF_STREAM)!=0){Log.d(LOG_TAG,""saw output EOS."");sawOutputEOS=true;}}else {if(res==MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED){codecOutputBuffers=codec.getOutputBuffers();Log.d(LOG_TAG,""output buffers have changed."");}else {if(res==MediaCodec.INFO_OUTPUT_FORMAT_CHANGED){MediaFormat oformat=codec.getOutputFormat();Log.d(LOG_TAG,""output format has changed to ""+oformat);}else {Log.d(LOG_TAG,""dequeueOutputBuffer returned ""+res);}}}}Log.d(LOG_TAG,""stopping..."");relaxResources(true);this.mState=State.Stopped;doStop=true;if(sawOutputEOS){try{if(isLoop||!hadPlay){this.play();return ;}}catch(IOException e){e.printStackTrace();}}if(noOutputCounter>=noOutputCounterLimit){mDelegateHandler.onRadioPlayerError(this);}else {mDelegateHandler.onRadioPlayerStopped(this);}}"
2632	"private boolean locationEditTextIsntEmpty(){return getTheLocationFieldText().length()>0;}"
2633	"private void validateNodeIds(List<String> nodeIds){if(nodeIds==null||nodeIds.size()==0){return ;}List<NodeInfo> nodeInfoList=ClusterNodesUtil.getClusterNodeInfo();List<String> validNodeIds=new ArrayList<String>(nodeInfoList.size());for(NodeInfo node : nodeInfoList){validNodeIds.add(node.getId());}List<String> nodeIdsClone=new ArrayList<String>(nodeIds);nodeIdsClone.removeAll(validNodeIds);if(nodeIdsClone.size()>0){throw APIException.badRequests.parameterIsNotValid(""node id"");}}"
2634	"public boolean isEmpty(){return bgValue==UNINITIALIZED_DOUBLE&&cgmValue==UNINITIALIZED_DOUBLE&&cgmRawValue==UNINITIALIZED_DOUBLE&&cgmAlertValue==UNINITIALIZED_DOUBLE&&glucoseAnnotation.isEmpty()&&basalValue==UNINITIALIZED_DOUBLE&&basalAnnotation.isEmpty()&&bolusValue==UNINITIALIZED_DOUBLE&&bolusAnnotation.isEmpty()&&bolusCalculationValue==UNINITIALIZED_DOUBLE&&mealValue==UNINITIALIZED_DOUBLE&&pumpAnnotation.isEmpty()&&exerciseTimeValue==UNINITIALIZED_DOUBLE&&exerciseAnnotation.isEmpty()&&heartRateValue==UNINITIALIZED_DOUBLE&&heartRateVariabilityValue==UNINITIALIZED_DOUBLE&&stressBalanceValue==UNINITIALIZED_DOUBLE&&stressValue==UNINITIALIZED_DOUBLE&&sleepValue==UNINITIALIZED_DOUBLE&&sleepAnnotation.isEmpty()&&locationAnnotation.isEmpty()&&mlCgmValue==UNINITIALIZED_DOUBLE&&mlAnnotation.isEmpty()&&insulinSensitivityFactor==UNINITIALIZED_DOUBLE;}"
2635	"public void updateFieldDistance(int fieldDistance){if(isPrimitive||this.fieldDistance<=fieldDistance){return ;}this.fieldDistance=fieldDistance;if(CanonizerLog.isLoggingOn()){CanonizerLog.logLine(""CANONICALIZER INFO: Updated class ""+name+"". Field distance=""+fieldDistance);}if(isArray){arrObjectsType.updateFieldDistance(fieldDistance);}else {ancestor.updateFieldDistance(fieldDistance);canonicalizeFields();}}"
2636	"public void collideCheck(){if(deadTime!=0){return ;}float xMarioD=world.mario.x-x;float yMarioD=world.mario.y-y;float w=16;if(xMarioD>-width*2-4&&xMarioD<width*2+4){if(yMarioD>-height&&yMarioD<world.mario.height){if(type!=Enemy.ENEMY_SPIKY&&world.mario.ya>0&&yMarioD<=0&&(!world.mario.onGround||!world.mario.wasOnGround)){world.mario.stomp(this);if(winged){winged=false;ya=0;}else {this.yPicO=31-(32-8);hPic=8;if(spriteTemplate!=null){spriteTemplate.isDead=true;}deadTime=10;winged=false;if(type==Enemy.ENEMY_RED_KOOPA){world.addSprite(new Shell(world,x,y,0));}else {if(type==Enemy.ENEMY_GREEN_KOOPA){world.addSprite(new Shell(world,x,y,1));}}}}else {world.mario.getHurt();}}}}"
2637	"public boolean isSingleTapEnabled(){return singleTapeEnabled&&prefs.getSavedSingleTapEnabled();}"
2638	"@Override public void process(K key,V value){initializeIfNotAndGet(this.stages);if(value!=null){Event<K,V> event=new Event<>(key,value,context.timestamp(),context.topic(),context.partition(),context.offset());List<Sequence<K,V>> sequences=this.nfa.matchPattern(event);KeyValueStore<TopicAndPartition,Queue<ComputationStage<K,V>>> store=getNFAStore();store.put(new TopicAndPartition(context.topic(),context.partition()),this.nfa.getComputationStages());sequences.forEach(seq -> this.context.forward(null,seq));}}"
2639	"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void monsterDeathEvent(EntityDeathEvent ev){log(""Has died."",5);if(ev.getEntity() instanceof Player){return ;}if(livingentitydata.containsKey(ev.getEntity().getUniqueId())){ev.setDroppedExp(ev.getDroppedExp()+5);}if(ev.getEntity() instanceof Snowman){Snowman snowy=(Snowman)ev.getEntity();if(snowy.getCustomName()!=null&&ChatColor.stripColor(snowy.getCustomName()).equalsIgnoreCase(HuntingForSnowman)){if(livingentitydata.containsKey(snowy.getUniqueId())){LivingEntityStructure led=livingentitydata.get(snowy.getUniqueId());if(led.GetTarget() instanceof Player){Player p=(Player)led.GetTarget();aPlugin.API.discordSendRaw(p.getName()+"" has claimed the bounty of **""+TwosideKeeper.HuntingForSnowman+""** earning 2 Tokens!"");Bukkit.broadcastMessage(ChatColor.YELLOW+p.getName()+ChatColor.RESET+"" has claimed the bounty of ""+ChatColor.BOLD+TwosideKeeper.HuntingForSnowman+ChatColor.RESET+"" earning 2 Tokens!"");Bukkit.broadcastMessage(ChatColor.AQUA+""   All other players have earned 1 Token!"");GenericFunctions.giveItem(p,Christmas.getChristmasEventToken());for(Player pl : Bukkit.getOnlinePlayers()){GenericFunctions.giveItem(pl,Christmas.getChristmasEventToken());}}}}if(snowy.getCustomName()!=null&&SnowmanHuntList.contains(ChatColor.stripColor(snowy.getCustomName()))){SnowmanHuntList.remove(ChatColor.stripColor(snowy.getCustomName()));}}if(ev.getEntity() instanceof Bat){if(Math.random()<=0.3){ev.getEntity().getLocation().getWorld().dropItemNaturally(ev.getEntity().getLocation(),Artifact.createArtifactItem(ArtifactItem.LOST_ESSENCE));}ev.getEntity().getLocation().getWorld().dropItemNaturally(ev.getEntity().getLocation(),Artifact.createArtifactItem(ArtifactItem.MYSTERIOUS_ESSENCE));}if(ev.getEntity() instanceof LivingEntity){List<ItemStack> droplist=ev.getDrops();LivingEntity m=(LivingEntity)ev.getEntity();double dropmult=0.0;boolean isBoss=false;boolean isElite=false;boolean killedByPlayer=false; final Location deathloc=m.getLocation();LivingEntityStructure ms=null;if(livingentitydata.containsKey(m.getUniqueId())){ms=(LivingEntityStructure)livingentitydata.get(m.getUniqueId());}if(m instanceof Silverfish||m instanceof Endermite){for(UUID id : custommonsters.keySet()){CustomMonster cm=custommonsters.get(id);if(cm instanceof Knight){Knight k=(Knight)cm;if(m instanceof Silverfish){k.triggerSilverfishKill(m);}else {k.triggerEndermiteKill(m);}}}}if(ms!=null&&(ms.GetTarget() instanceof Player)){if((m instanceof Slime)||(m instanceof MagmaCube)){if(m instanceof Slime){Slime ss=(Slime)m;if(ss.getSize()>=4){habitat_data.addKillToLocation(m);}}else {MagmaCube mm=(MagmaCube)m;if(mm.getSize()>=4){habitat_data.addKillToLocation(m);}}}else {habitat_data.addKillToLocation(m);}habitat_data.startinglocs.remove(m.getUniqueId());killedByPlayer=true;Player p=(Player)ms.GetTarget();AwardDeathAchievements(p,ev.getEntity());if(p!=null){if(GenericFunctions.isArtifactEquip(p.getEquipment().getItemInMainHand())&&GenericFunctions.isArtifactWeapon(p.getEquipment().getItemInMainHand())&&p.getEquipment().getItemInMainHand().getType()==Material.BOW){PlayerStructure pd=(PlayerStructure)playerdata.get(p.getUniqueId());if(pd.nextarrowxp>0){AwakenedArtifact.addPotentialEXP(p.getEquipment().getItemInMainHand(),pd.nextarrowxp,p);pd.nextarrowxp=0;}}PlayerStructure pd=(PlayerStructure)playerdata.get(p.getUniqueId());if(PlayerMode.isRanger(p)&&GenericFunctions.getBowMode(p)==BowMode.CLOSE){pd.fulldodge=true;}dropmult+=pd.partybonus*0.33;ItemStack item=p.getEquipment().getItemInMainHand();if(item!=null&&item.getType()!=Material.AIR&&GenericFunctions.isWeapon(item)){log(""Adding ""+(item.getEnchantmentLevel(Enchantment.LOOT_BONUS_MOBS)*0.1)+""to dropmult for Looting."",5);dropmult+=item.getEnchantmentLevel(Enchantment.LOOT_BONUS_MOBS)*0.1;}for(int i=0;i<p.getEquipment().getArmorContents().length;i++){ItemStack equip=p.getEquipment().getArmorContents()[i];if(ArtifactAbility.containsEnchantment(ArtifactAbility.GREED,equip)){dropmult+=GenericFunctions.getAbilityValue(ArtifactAbility.GREED,equip)/100.0;}}if(ArtifactAbility.containsEnchantment(ArtifactAbility.GREED,p.getEquipment().getItemInMainHand())){dropmult+=GenericFunctions.getAbilityValue(ArtifactAbility.GREED,p.getEquipment().getItemInMainHand())/100.0;}}else {killedByPlayer=false;}}if(m instanceof LivingEntity){isBoss=GenericFunctions.isBossMonster(m);isElite=GenericFunctions.isEliteMonster(m);if(killedByPlayer&&GenericFunctions.isBossMonster(m)&&Math.random()<RARE_DROP_RATE*dropmult*ARTIFACT_RARITY){switch ((int)(Math.random()*4)){case 0 :{droplist.add(Artifact.createArtifactItem(ArtifactItem.LOST_CORE));}break;case 1 :{droplist.add(Artifact.createArtifactItem(ArtifactItem.ANCIENT_CORE));}break;case 2 :{droplist.add(Artifact.createArtifactItem(ArtifactItem.ARTIFACT_CORE));}break;case 3 :{droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_CORE));}break;}}if(isBoss&&Math.random()<=0.5){LivingEntityDifficulty diff=MonsterController.getLivingEntityDifficulty(m);if(diff==LivingEntityDifficulty.END&&Math.random()<=0.5){diff=LivingEntityDifficulty.HELLFIRE;}if(diff==LivingEntityDifficulty.HELLFIRE&&Math.random()<=0.5){diff=LivingEntityDifficulty.DEADLY;}if(diff==LivingEntityDifficulty.DEADLY&&Math.random()<=0.5){diff=LivingEntityDifficulty.DANGEROUS;}if(diff==LivingEntityDifficulty.DANGEROUS&&Math.random()<=0.5){diff=LivingEntityDifficulty.NORMAL;}switch (diff){case DANGEROUS :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.ANCIENT_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.ANCIENT_CORE));}break;case DEADLY :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.LOST_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.LOST_CORE));}break;case ELITE :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_CORE));}break;case END :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_CORE));}break;case HELLFIRE :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.DIVINE_CORE));}break;default :if(m.getWorld().getName().equalsIgnoreCase(""world"")){droplist.add(Artifact.createArtifactItem(ArtifactItem.ARTIFACT_ESSENCE));}else {droplist.add(Artifact.createArtifactItem(ArtifactItem.ARTIFACT_CORE));}}}}if(killedByPlayer){int luckmult=0;int unluckmult=0;ms=(LivingEntityStructure)livingentitydata.get(m.getUniqueId());Player p=(Player)ms.GetTarget();boolean isRanger=PlayerMode.isRanger(p);boolean isSlayer=PlayerMode.isSlayer(p);boolean isBarbarian=PlayerMode.isBarbarian(p);boolean isInNether=p.getWorld().getName().equalsIgnoreCase(""world_nether"");GenericFunctions.knockOffGreed(p);PlayerStructure pd=PlayerStructure.GetPlayerStructure(p);if(PlayerMode.getPlayerMode(p)==PlayerMode.SLAYER){if(pd.lastusedassassinate+20>getServerTickTime()){pd.lastassassinatetime=0;ItemStack[] inv=p.getInventory().getContents();for(int i=0;i<9;i++){if(inv[i]!=null&&(inv[i].getType()!=Material.SKULL_ITEM||pd.lastlifesavertime+GenericFunctions.GetModifiedCooldown(TwosideKeeper.LIFESAVER_COOLDOWN,p)<TwosideKeeper.getServerTickTime())){aPlugin.API.sendCooldownPacket(p,inv[i],0);}}GenericFunctions.addStackingPotionEffect(p,PotionEffectType.SPEED,10*20,4);if(ItemSet.HasSetBonusBasedOnSetBonusCount(p,ItemSet.MOONSHADOW,7)){List<LivingEntity> mobs=CustomDamage.trimNonLivingEntities(m.getNearbyEntities(8,8,8));for(LivingEntity m1 : mobs){if(!m1.equals(m)){boolean allowed=true;if(m1 instanceof Player&&PVP.isFriendly(p,(Player)m1)){allowed=false;}if(allowed){pd.lastassassinatetime=0;CustomDamage.ApplyDamage(0,p,m1,p.getEquipment().getItemInMainHand(),""AoE Damage"",CustomDamage.NOAOE);if(m1.isDead()){GenericFunctions.addStackingPotionEffect(p,PotionEffectType.INCREASE_DAMAGE,10*20,39,2);GenericFunctions.addStackingPotionEffect(p,PotionEffectType.SPEED,10*20,4);}}}}GenericFunctions.addStackingPotionEffect(p,PotionEffectType.INCREASE_DAMAGE,10*20,39,2);}else {if(ItemSet.meetsSlayerSwordConditions(ItemSet.STEALTH,27,3,p)){GenericFunctions.addStackingPotionEffect(p,PotionEffectType.INCREASE_DAMAGE,20*60,19);}else {GenericFunctions.addStackingPotionEffect(p,PotionEffectType.INCREASE_DAMAGE,10*20,9);}}if(ItemSet.HasSetBonusBasedOnSetBonusCount(p,ItemSet.GLADOMAIN,7)){pd.slayermegahit=true;}GenericFunctions.applyStealth(p,false);}else {if(ItemSet.HasSetBonusBasedOnSetBonusCount(p,ItemSet.WOLFSBANE,2)){pd.lastassassinatetime-=GenericFunctions.GetModifiedCooldown(TwosideKeeper.ASSASSINATE_COOLDOWN,p)*(ItemSet.TotalBaseAmountBasedOnSetBonusCount(p,ItemSet.WOLFSBANE,2,2)/100.0);ItemStack[] inv=p.getInventory().getContents();for(int i=0;i<9;i++){if(inv[i]!=null&&(inv[i].getType()!=Material.SKULL_ITEM||pd.lastlifesavertime+GenericFunctions.GetModifiedCooldown(TwosideKeeper.LIFESAVER_COOLDOWN,p)<TwosideKeeper.getServerTickTime())){aPlugin.API.sendCooldownPacket(p,inv[i],GenericFunctions.GetRemainingCooldownTime(p,pd.lastassassinatetime,TwosideKeeper.ASSASSINATE_COOLDOWN));}}}}}if(isSlayer){int restore_amt=2;if(ItemSet.meetsSlayerSwordConditions(ItemSet.LORASYS,18,2,p)){restore_amt=4;}else {if(ItemSet.meetsSlayerSwordConditions(ItemSet.LORASYS,27,3,p)){restore_amt=6;}}if(pd.slayermodehp+restore_amt<p.getMaxHealth()){pd.slayermodehp+=restore_amt;}else {pd.slayermodehp=p.getMaxHealth();}p.setHealth(pd.slayermodehp);runServerHeartbeat.UpdatePlayerScoreboardAndHealth(p);}if(isBarbarian){if(pd.damagepool>0){pd.damagepool/=4;GenericFunctions.sendActionBarMessage(p,"""");}}if(isRanger){switch (GenericFunctions.getBowMode(p)){case CLOSE :{BowLogger.AddCloseMode();}break;case SNIPE :{BowLogger.AddSnipeMode();}break;case DEBILITATION :{BowLogger.AddDebilitationMode();}break;}}if(p.hasPotionEffect(PotionEffectType.LUCK)||p.hasPotionEffect(PotionEffectType.UNLUCK)){for(PotionEffect pe : p.getActivePotionEffects()){if(pe.getType().equals(PotionEffectType.LUCK)){luckmult=pe.getAmplifier()+1;}else {if(pe.getType().equals(PotionEffectType.UNLUCK)){unluckmult=pe.getAmplifier()+1;}}}}if(m instanceof Wither){GenericFunctions.spawnXP(m.getLocation().add(5,0,5),25000);GenericFunctions.spawnXP(m.getLocation().add(-5,0,-5),25000);GenericFunctions.spawnXP(m.getLocation().add(-5,0,5),25000);GenericFunctions.spawnXP(m.getLocation().add(5,0,-5),25000);AttemptToPlaceChest(m.getLocation(),1,1,1,aPlugin.API.Chests.LOOT_CUSTOM_5);AttemptToPlaceChest(m.getLocation(),1,-1,-1,aPlugin.API.Chests.LOOT_CUSTOM_5);double chance_to_place_reward_chest=0.0;for(UUID id : custommonsters.keySet()){if(id.equals(m.getUniqueId())){sig.plugin.TwosideKeeper.Monster.Wither w=(sig.plugin.TwosideKeeper.Monster.Wither)custommonsters.get(id);chance_to_place_reward_chest=(w.getActiveParticipants().size()-2)*(1/6.0);Integer[] chest_positions=new Integer{-1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,-1};PlaceWitherLootChestsWithDefinedLayout(m,chance_to_place_reward_chest,chest_positions);w.DisplaySuccessfulDPSReport();break;}}}if(custommonsters.containsKey(m.getUniqueId())){CustomMonster cm=custommonsters.get(m.getUniqueId());if(cm instanceof GenericBoss){GenericBoss gb=(GenericBoss)cm;gb.AnnounceDPSBreakdown();gb.setupBonusLoot();}}if(isElite&&m instanceof Monster){dropmult+=50;EliteMonster em=GenericFunctions.getEliteMonster((Monster)m);List<Player> participants=em.getParticipantList();StringBuilder participants_list=new StringBuilder();GlobalLoot gl=GlobalLoot.spawnGlobalLoot(m.getLocation(),ChatColor.LIGHT_PURPLE+""""+ChatColor.BOLD+""Elite Loot"");for(int i=0;i<participants.size();i++){UUID id=participants.get(i).getUniqueId();if(Bukkit.getPlayer(id)!=null&&Bukkit.getPlayer(id).isOnline()){ExperienceOrb exp=GenericFunctions.spawnXP(Bukkit.getPlayer(id).getLocation(),ev.getDroppedExp()*300);exp.setInvulnerable(true);}if(m instanceof Zombie){Zombie z=(Zombie)m;if(z.isBaby()){gl.addNewDropInventory(id,aPlugin.API.getChestItem(Chests.ELITE));}}gl.addNewDropInventory(id,aPlugin.API.getChestItem(Chests.ELITE));log(""Dropping ""+aPlugin.API.getChestItem(Chests.ELITE).toString(),2);if(Bukkit.getPlayer(id)!=null){if(participants_list.length()<1){participants_list.append(Bukkit.getPlayer(id).getName());}else {if(i==participants.size()-1){if(participants.size()==2){participants_list.append("" and ""+Bukkit.getPlayer(id).getName());}else {participants_list.append("", and ""+Bukkit.getPlayer(id).getName());}}else {participants_list.append("", ""+Bukkit.getPlayer(id).getName());}}}}Bukkit.getServer().broadcastMessage(ChatColor.GREEN+participants_list.toString()+ChatColor.WHITE+"" ""+(participants.size()==1?""has single-handedly taken down the "":""have successfully slain "")+GenericFunctions.getDisplayName(m)+ChatColor.WHITE+""!"");aPlugin.API.discordSendRaw(ChatColor.GREEN+participants_list.toString()+ChatColor.WHITE+"" ""+(participants.size()==1?""has single-handedly taken down the "":""have successfully slain "")+""**""+GenericFunctions.getDisplayName(m)+ChatColor.WHITE+""**!"");m.getWorld().spawnEntity(m.getLocation(),EntityType.LIGHTNING);m.getWorld().setStorm(true);m.getWorld().setWeatherDuration(20*60*15);em.removeAllHealthbars();Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    Bukkit.getServer().broadcastMessage(ChatColor.YELLOW + ""DPS Breakdown:"");    Bukkit.getServer().broadcastMessage(em.generateDPSReport());    aPlugin.API.discordSendRaw(ChatColor.YELLOW + ""DPS Breakdown:"" + ""\n```\n""+ em.generateDPSReport()+ ""\n```"");    em.Cleanup();    elitemonsters.remove(em);  }},1);GenericFunctions.generateNewElite(null,"""");}if(isInNether){dropmult=dropmult+0.3;}dropmult=dropmult+(luckmult*0.5)-(unluckmult*0.5);if(CHRISTMASEVENT_ACTIVATED){dropmult+=dropmult*0.5;}if(luckmult>0||unluckmult>0){log(""Modified luck rate is now ""+dropmult,3);}List<ItemStack> originaldroplist=new ArrayList<ItemStack>();for(int i=0;i<droplist.size();i++){originaldroplist.add(droplist.get(i));droplist.remove(i);i--;}droplist.addAll(MonsterController.getLivingEntityDifficulty(ev.getEntity()).RandomizeDrops(dropmult,isBoss,isRanger,p,m)); final List<ItemStack> drop=new ArrayList<ItemStack>();drop.addAll(droplist);int totalexp=0;switch (MonsterController.getLivingEntityDifficulty(m)){case NORMAL :droplist.addAll(originaldroplist);break;case DANGEROUS :totalexp=ev.getDroppedExp()*4;droplist.addAll(originaldroplist);break;case DEADLY :SoundUtils.playGlobalSound(m.getLocation(),Sound.ENTITY_CREEPER_PRIMED,1.0,1.0);totalexp=ev.getDroppedExp()*8;ev.setDroppedExp((int)(totalexp*0.75)); final LivingEntity mer=m; final int expdrop=totalexp;if(!GenericFunctions.isSuppressed(m)){droplist.clear();droplist.addAll(originaldroplist);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    if (!mer.getLocation().getWorld().getName().equalsIgnoreCase(""world"") || mer.getLocation().getBlockY() < 48) {      mer.getWorld().createExplosion(mer.getLocation().getBlockX(),mer.getLocation().getBlockY(),mer.getLocation().getBlockZ(),1.5f,false,true);      aPlugin.API.sendSoundlessExplosion(mer.getLocation(),3.0f);      GenericFunctions.DealExplosionDamageToEntities(mer.getLocation(),20,3);    } else {      mer.getWorld().createExplosion(mer.getLocation().getBlockX(),mer.getLocation().getBlockY(),mer.getLocation().getBlockZ(),6.0f,false,false);      GenericFunctions.DealExplosionDamageToEntities(mer.getLocation(),20,6);    }  }},30);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    for (int i=0; i < drop.size(); i++) {      Item it=deathloc.getWorld().dropItemNaturally(mer.getLocation(),drop.get(i));      it.setInvulnerable(true);    }    GenericFunctions.spawnXP(mer.getLocation(),(int)(expdrop * 0.25));  }},50);}else {droplist.addAll(originaldroplist);}break;case HELLFIRE :SoundUtils.playGlobalSound(m.getLocation(),Sound.ENTITY_CREEPER_PRIMED,1.0,1.0);totalexp=ev.getDroppedExp()*20;ev.setDroppedExp((int)(totalexp*0.75)); final LivingEntity mer1=m; final int expdrop1=totalexp;if(!GenericFunctions.isSuppressed(m)){droplist.clear();droplist.addAll(originaldroplist);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    if (!mer1.getLocation().getWorld().getName().equalsIgnoreCase(""world"") || mer1.getLocation().getBlockY() < 48) {      mer1.getWorld().createExplosion(mer1.getLocation().getBlockX(),mer1.getLocation().getBlockY(),mer1.getLocation().getBlockZ(),2.0f,false,true);      aPlugin.API.sendSoundlessExplosion(mer1.getLocation(),5.0f);      GenericFunctions.DealExplosionDamageToEntities(mer1.getLocation(),36,5);      GenericFunctions.RandomlyCreateFire(mer1.getLocation(),2);    } else {      mer1.getWorld().createExplosion(mer1.getLocation().getBlockX(),mer1.getLocation().getBlockY(),mer1.getLocation().getBlockZ(),6.0f,false,false);      GenericFunctions.DealExplosionDamageToEntities(mer1.getLocation(),36,6);      GenericFunctions.RandomlyCreateFire(mer1.getLocation(),3);    }  }},30);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    for (int i=0; i < drop.size(); i++) {      Item it=deathloc.getWorld().dropItemNaturally(mer1.getLocation(),drop.get(i));      it.setInvulnerable(true);    }    GenericFunctions.spawnXP(mer1.getLocation(),(int)(expdrop1 * 0.25));  }},50);}else {droplist.addAll(originaldroplist);}break;case END :SoundUtils.playGlobalSound(m.getLocation(),Sound.ENTITY_CREEPER_PRIMED,1.0,1.0);totalexp=ev.getDroppedExp()*40;ev.setDroppedExp((int)(totalexp*0.75)); final LivingEntity mer4=m; final int expdrop4=totalexp;if(!GenericFunctions.isSuppressed(m)){droplist.clear();droplist.addAll(originaldroplist);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    if (!mer4.getLocation().getWorld().getName().equalsIgnoreCase(""world"") || mer4.getLocation().getBlockY() < 48) {      mer4.getWorld().createExplosion(mer4.getLocation().getBlockX(),mer4.getLocation().getBlockY(),mer4.getLocation().getBlockZ(),2.0f,false,true);      aPlugin.API.sendSoundlessExplosion(mer4.getLocation(),5.0f);      GenericFunctions.DealExplosionDamageToEntities(mer4.getLocation(),150,5);      GenericFunctions.RandomlyCreateFire(mer4.getLocation(),2);    } else {      mer4.getWorld().createExplosion(mer4.getLocation().getBlockX(),mer4.getLocation().getBlockY(),mer4.getLocation().getBlockZ(),6.0f,false,false);      GenericFunctions.DealExplosionDamageToEntities(mer4.getLocation(),150,6);      GenericFunctions.RandomlyCreateFire(mer4.getLocation(),3);    }  }},30);Bukkit.getScheduler().scheduleSyncDelayedTask(this,new Runnable(){  public void run(){    for (int i=0; i < drop.size(); i++) {      Item it=deathloc.getWorld().dropItemNaturally(mer4.getLocation(),drop.get(i));      it.setInvulnerable(true);    }    GenericFunctions.spawnXP(mer4.getLocation(),(int)(expdrop4 * 0.25));  }},50);}else {droplist.addAll(originaldroplist);}break;case ELITE :totalexp=ev.getDroppedExp()*300; final LivingEntity mer2=m;for(int i=0;i<originaldroplist.size();i++){Item it=deathloc.getWorld().dropItemNaturally(mer2.getLocation(),originaldroplist.get(i));it.setInvulnerable(true);}for(int i=0;i<drop.size();i++){if(drop.get(i)!=null){Item it=deathloc.getWorld().dropItemNaturally(mer2.getLocation(),drop.get(i));it.setInvulnerable(true);}}break;}log(""Drop list contains ""+(droplist.size()+originaldroplist.size())+"" elements."",5);log(""  Drops ""+""[""+(drop.size()+originaldroplist.size())+""]: ""+ChatColor.GOLD+ChatColor.stripColor(originaldroplist.toString())+ChatColor.WHITE+"",""+ChatColor.LIGHT_PURPLE+ChatColor.stripColor(drop.toString()),LOOT_DEBUG);}}}"
2640	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Log.i(FeedFragment.class.getName(),""onCreate()"");if(savedInstanceState==null){Log.i(FeedFragment.class.getName(),""savedInstanceState == null"");this.presenter=new FeedPresenter();this.presenter.init(context(),this);}}"
2641	"@Override public ProfileModel editProfile(ProfileDTO profileDTO) throws SQLException,ExecutionException{boolean isTitleModified=false;boolean isProductsModified=false;Integer profileRequestID=profileDTO.getProfileID();String newGivenTitle=profileDTO.getProfileTitle();List<ProductDTO> ProductDTOsInProfileDTO=profileDTO.getAssociatedProducts();ProfileModel newProfileModel=null;ProfileModel profileInCache=cache.getIfPresent(newGivenTitle);if(profileInCache==null){isTitleModified=true;String titleInDB=getTitleFromDB(profileRequestID);cache.invalidate(titleInDB);}if(isTitleModified){newProfileModel=updateProfiletitle(profileDTO);}if(!isProductsModified&&!isTitleModified){List<ProductDTO> productDTOs=profileDTO.getAssociatedProducts();List<ProductModel> profileModels=convertProductDTOsToProductModels(productDTOs);ProfileModel profileModel=new ProfileModel(profileRequestID,newGivenTitle,profileModels);return profileModel;}if(isProductsModified){cache.invalidate(newGivenTitle);newProfileModel=updateProducts(profileDTO);}List<ProductDTO> ProductDTOsFromProfileCache=newProfileModel.getAssociatedProducts();isProductsModified=checkForProductUpdate(ProductDTOsFromProfileCache,ProductDTOsInProfileDTO);List<ProductDTO> newProductDTOs=newProfileModel.getAssociatedProducts();List<ProductModel> newProductModels=convertProductDTOsToProductModels(newProductDTOs);ProfileModel profileModel=new ProfileModel(profileRequestID,newGivenTitle,newProductModels);cache.put(newGivenTitle,profileModel);return profileModel;}"
2642	"public static boolean update(CycleProcess process,Cycle cycle) throws PhysicsException{boolean processUpdated=false;if(Float.isNaN(process.heatChange)){process.heatChange=0;processUpdated=true;}else {if(process.heatChange!=0.0){throw new PhysicsException(""Adiaabatic process had heat added!"");}}if(!Float.isNaN(process.start.pressure)&&!Float.isNaN(process.end.pressure)&&!Float.isNaN(process.start.volume)&&!Float.isNaN(process.end.volume)){if(Float.isNaN(process.workChange)){if(!Float.isNaN(cycle.heatCapacityRatio)){process.workChange=gammaWork(process.start.volume,process.start.pressure,process.end.volume,process.end.pressure,cycle.heatCapacityRatio);processUpdated=true;if(!Float.isNaN(cycle.heatCapacityV)){float work=cvWork(process.start.volume,process.start.pressure,process.end.volume,process.end.pressure,cycle.heatCapacityV);if(work!=process.workChange){throw new PhysicsException(""Adiabatic work didn't match by Cv calculation!"");}}}else {if(!Float.isNaN(cycle.heatCapacityV)){process.workChange=cvWork(process.start.volume,process.start.pressure,process.end.volume,process.end.pressure,cycle.heatCapacityV);processUpdated=true;}}}else {if(!Float.isNaN(cycle.heatCapacityRatio)){float work=gammaWork(process.start.volume,process.start.pressure,process.end.volume,process.end.pressure,cycle.heatCapacityRatio);if(process.workChange!=work){throw new PhysicsException(""Adiabatic work didn't match by gamma calulation!"");}}}}else {if(!Float.isNaN(process.start.temperature)&&!Float.isNaN(process.end.temperature)&&!Float.isNaN(cycle.moles)&&!Float.isNaN(cycle.heatCapacityV)){if(Float.isNaN(process.workChange)){process.workChange=temperatureWork(process.start.temperature,process.end.temperature,cycle.heatCapacityV,cycle.moles);processUpdated=true;}else {if(process.workChange!=temperatureWork(process.start.temperature,process.end.temperature,cycle.heatCapacityV,cycle.moles)){throw new PhysicsException(""Adiabatic work didn't match by temperature calculation!"");}}}}if(pvCalculation(process.start,process.end,cycle)){processUpdated=true;}if(pvCalculation(process.end,process.start,cycle)){processUpdated=true;}if(tvCalculation(process.start,process.end,cycle)){processUpdated=true;}if(tvCalculation(process.end,process.start,cycle)){processUpdated=true;}return processUpdated;}"
2643	"@Override public void onEvent(EventData event){if(!isReceiving){endpoint.send(event);}}"
2644	"private Map<String,DataColumn> readTableColumnMetaData(String tableName,DatabaseMetaData meta) throws ODataServiceFault{ResultSet resultSet=null;Map<String,DataColumn> columnMap=new HashMap<>();try{resultSet=meta.getColumns(null,null,tableName,null);int i=1;while(resultSet.next()){String columnName=resultSet.getString(""COLUMN_NAME"");int columnType=resultSet.getInt(""DATA_TYPE"");int size=resultSet.getInt(""COLUMN_SIZE"");boolean nullable=resultSet.getBoolean(""NULLABLE"");String columnDefaultVal=resultSet.getString(""COLUMN_DEF"");int precision=resultSet.getMetaData().getPrecision(i);int scale=resultSet.getMetaData().getScale(i);DataColumn column=new DataColumn(columnName,getODataDataType(columnType),i,nullable,size);if(null!=columnDefaultVal){column.setDefaultValue(columnDefaultVal);}if(Types.DOUBLE==columnType||Types.FLOAT==columnType||Types.DECIMAL==columnType){column.setPrecision(precision);column.setScale(scale);}columnMap.put(columnName,column);addDataType(tableName,columnName,columnType);i++;}return columnMap;}catch(SQLException e){throw new ODataServiceFault(e,""Error in reading table meta data in ""+tableName+"" table. :""+e.getMessage());}finally{releaseResources(resultSet,null);}}"
2645	"private String validate(DetailAST aForLiteralNode){String warningMessageKey=null; final DetailAST forEachNode=aForLiteralNode.findFirstToken(TokenTypes.FOR_EACH_CLAUSE); final DetailAST keySetOrEntrySetNode=getKeySetOrEntrySetNode(forEachNode);boolean isMapClassField=false;if(keySetOrEntrySetNode!=null){if(keySetOrEntrySetNode.getPreviousSibling().getChildCount()!=0){isMapClassField=true;} final DetailAST variableDefNode=forEachNode.getFirstChild(); final String keyOrEntryVariableName=variableDefNode.getLastChild().getText(); final String currentMapVariableName=isMapClassField?keySetOrEntrySetNode.getPreviousSibling().getLastChild().getText():keySetOrEntrySetNode.getPreviousSibling().getText(); final DetailAST forEachOpeningBrace=aForLiteralNode.getLastChild();if(!isMapPassedIntoAnyMethod(forEachOpeningBrace)){if(mProposeKeySetUsage&&KEY_SET_METHOD_NAME.equals(keySetOrEntrySetNode.getText())){warningMessageKey=checkForWrongKeySetUsage(forEachOpeningBrace,keyOrEntryVariableName,currentMapVariableName,isMapClassField);}else {if(mProposeEntrySetUsage){warningMessageKey=checkForWrongEntrySetUsage(forEachOpeningBrace,keyOrEntryVariableName);}}}}return warningMessageKey;}"
2646	"public MoveStrategy(Piece controlledPiece,Board board,Rules rules){super(controlledPiece,board,rules,new MoveStrategyFactory(board,rules));onTurnBeginning();DirectionOnBoard playerSide=this.controlledPiece.getPlayer().getBoardSide();if(playerSide==DirectionOnBoard.UP){FORWARD_LEFT=DirectionOnBoard.DOWN_RIGHT;FORWARD_RIGHT=DirectionOnBoard.DOWN_LEFT;BACKWARD_LEFT=DirectionOnBoard.UP_RIGHT;BACKWARD_RIGHT=DirectionOnBoard.UP_LEFT;}else {assert (playerSide==DirectionOnBoard.DOWN);FORWARD_LEFT=DirectionOnBoard.UP_LEFT;FORWARD_RIGHT=DirectionOnBoard.UP_RIGHT;BACKWARD_LEFT=DirectionOnBoard.DOWN_LEFT;BACKWARD_RIGHT=DirectionOnBoard.DOWN_RIGHT;}}"
2647	"@EventHandler public void onBlockBreak(BlockBreakEvent event){Location loc=event.getBlock().getLocation();Player player=event.getPlayer();if(GamePhase.current!=GamePhase.GAME){if(!event.getPlayer().isOp()){event.setCancelled(true);}return ;}for(GameTeam team : GameMap.current.getTeams()){if(team.getTeamSpawn()!=null&&team.getTeamSpawn().equals(loc)){GamePlayer gp=GamePlayer.getGamePlayer(player);if(gp==null||gp.getTeam()==null){event.setCancelled(true);return ;}event.setDropItems(false);if(team.equals(gp.getTeam())){if(player.getInventory().firstEmpty()==-1){event.setCancelled(true);return ;}player.getInventory().addItem(team.getTeamItem());team.setTeamSpawn(null);Tools.broadcastMessageToTeam(team,team.getColor()+""""+ChatColor.BOLD+player.getName()+""""+ChatColor.WHITE+ChatColor.BOLD+"" is moving the ""+team.getColor()+ChatColor.BOLD+team.getName()+"" Spawn"");Tools.broadcastSoundToTeam(team,Sound.ITEM_BOTTLE_FILL_DRAGONBREATH,1.0,1.0);}else {team.setTeamSpawn(null);Bukkit.broadcastMessage(Message.GAME.getPrefix()+gp.getTeam().getColor()+""""+ChatColor.BOLD+player.getName()+""""+ChatColor.WHITE+ChatColor.BOLD+"" has destroyed the ""+team.getColor()+ChatColor.BOLD+team.getName()+"" Spawn"");Tools.broadcastSound(Sound.BLOCK_END_PORTAL_SPAWN,1.0,1.0);}}}}"
2648	"@Override public Component getTableCellRendererComponent(JTable p_table,Object p_value,boolean p_isSelected,boolean p_hasFocus,int p_row,int p_col){java.awt.Component x_awtComponent=super.getTableCellRendererComponent(p_table,p_value,p_isSelected,p_hasFocus,p_row,p_col);Item x_item=o_tableModel.getDataItem(p_row,p_col);x_awtComponent.setBackground(getColourForTime(x_item.getDueDate()));return x_awtComponent;}"
2649	"static boolean human() throws IOException{System.out.println(""???????"");System.out.println(""????x???????????(?????(15,15))"");Scanner scanner=new Scanner(System.in);int i=(scanner.nextInt()+10);System.out.println(""????y???????????(?????(15,15))"");int j=(scanner.nextInt()+10);rock[i][j]=2;int u=0;for(int k=0;k>=0;k++){if(rock[i+k][j]<=0||i-k==0||j-k==0){break;}if(rock[i+k][j]==1){u=1;}if(u==1&&rock[i+k][j]==2){for(int s=0;s<k;s++){rock[i+s][j]=2;}}}for(int k=0;k>=0;k++){if(rock[i-k][j]<=0||i-k==0||j-k==0){break;}if(rock[i-k][j]==1){u=1;}if(u==1&&rock[i-k][j]==2){for(int s=0;s<k;s++){rock[i-s][j]=2;}}}for(int k=0;k>=0;k++){if(rock[i][j-k]<=0||i-k==0||j-k==0){break;}if(rock[i][j-k]==1){u=1;}if(u==1&&rock[i][j-k]==2){for(int s=0;s<k;s++){rock[i][j-s]=2;}}}for(int k=0;k>=0;k++){if(rock[i][j+k]<=0||i-k==0||j-k==0){break;}if(rock[i][j+k]==1){u=1;}if(u==1&&rock[i][j+k]==2){for(int s=0;s<k;s++){rock[i][j+s]=2;}}}for(int k=0;k>=0;k++){if(rock[i+k][j-k]<=0||i-k==0||j-k==0){break;}if(rock[i+k][j-k]==1){u=1;}if(u==1&&rock[i+k][j-k]==2){for(int s=0;s<k;s++){rock[i+s][j-s]=2;}}}for(int k=0;k>=0;k++){if(rock[i+k][j+k]<=0||i-k==0||j-k==0){break;}if(rock[i+k][j+k]==1){u=1;}if(u==1&&rock[i+k][j+k]==2){for(int s=0;s<k;s++){rock[i+s][j+s]=2;}}}for(int k=0;k>=0;k++){if(rock[i-k][j+k]<=0||i-k==0||j-k==0){break;}if(rock[i-k][j+k]==1){u=1;}if(u==1&&rock[i-k][j+k]==2){for(int s=0;s<k;s++){rock[i-s][j+s]=2;}}}for(int k=0;k>=0;k++){if(rock[i-k][j-k]<=0||i-k==0||j-k==0){break;}if(rock[i-k][j-k]==1){u=1;}if(u==1&&rock[i-k][j-k]==2){for(int s=0;s<k;s++){rock[i-s][j-s]=2;}}}for(int s=11;s<19;s++){for(int t=11;t<19;t++){if(rock[t][s]==-1){rock[t][s]=0;}}}return (i==10);}"
2650	"@Override public Direction getMove(Tile[][] board){engine.setGameBoard(board);valueChanges=new Double[board.length];int i=0;for(Direction dir : Direction.values()){if(engine.isMoveValid(dir)){valueChanges[i]=calculateExpectedValue(engine.getBoard(),dir);}i++;}if(valueChanges[0]!=null){Tile[][] boardAfterUp=getBoardAfterSimulatedMove(engine.getBoard(),Direction.UP);if(riskOfDeadLockAfterUP(boardAfterUp,2)|riskOfDeadLockAfterUP(boardAfterUp,1)){valueChanges[0]=-10000.0;}}double maxVal=-1000000;for(Double v : valueChanges){if(v!=null&&v>maxVal){maxVal=v;}}i=0;for(Direction dir : Direction.values()){if(valueChanges[i]!=null&&valueChanges[i]==maxVal){return dir;}i++;}return null;}"
2651	"@Override protected void onHandleIntent(Intent intent){SharedPreferences sp=getSharedPreferences(""Settings"",Context.MODE_PRIVATE);String alarmSetting=sp.getString(""alarmTone"",INVALID_STRING_VALUE);if(alarmSetting==""Alarm""){alertToPlay=R.raw.alarm;}else {alertToPlay=R.raw.roostercrow;}mp=MediaPlayer.create(this,alertToPlay);mp.start();}"
2652	"@Override public boolean remove(Object obj){return (map.remove(obj)!=null);}"
2653	"private void configureDefaults(){if(System.getProperty(OGlobalConfiguration.DISK_CACHE_SIZE.getKey())==null){configureDefaultDiskCacheSize();}if(System.getProperty(OGlobalConfiguration.WAL_RESTORE_BATCH_SIZE.getKey())==null){configureDefaultWalRestoreBatchSize();}}"
2654	"@Override public void onMessage(Message message){super.onMessage(message);if(message.name().equals(""network.message"")){if(otherLaserTe==null){tryConnect(otherLaser.getDim(),otherLaser.getX(),otherLaser.getY(),otherLaser.getZ());}if(!otherLaserTe.isInvalid()&&connected){otherLaserTe.node.sendToReachable(""network.message"",message.data());}}}"
2655	"@Override public synchronized void handleSatisfiedConstraint(String ID,IConstraint satConstraint){System.out.println(""## handleSatisfiedConstraint(id,satConstraint) --> ""+ID+"" ""+runningStatemachines.get(ID).isActive()+"" ""+currentStates.get(ID).isActive());if(currentStates.get(ID)!=null&&currentStates.get(ID).isActive()&&runningStatemachines.containsKey(ID)&&runningStatemachines.get(ID).isActive()){ITransition transition=null;transition=currentStates.get(ID).getSatisfiedTransition(satConstraint);if(transition!=null){currentStates.get(ID).deactivate();IState nextState=transition.fire();currentStates.put(ID,nextState);RobotContextStateManager.getInstance().cleanContextState();handleTimeEventScheduling(ID);StartCondition.getInstance().setStateActiveTime(System.currentTimeMillis());RobotContextStateManager.getInstance().setGyroSensorStartCondition();if(Robot.getInstance().isMessageingEnabled()){Robot.getRobotController().getMessenger().sendMessage(IMessenger.SERVER_LOG,""Changed State to --> ""+currentStates.get(ID).getName());}currentStates.get(ID).activate();}}System.out.println(""StateMachine.handleSatisfiedConstraint() => ""+satConstraint);subscribeConstraints(ID);}"
2656	"private BlockNode processLoop(IRegion curRegion,LoopInfo loop,RegionStack stack){BlockNode loopStart=loop.getStart();Set<BlockNode> exitBlocksSet=loop.getExitNodes();List<BlockNode> exitBlocks=new ArrayList<BlockNode>(exitBlocksSet.size());BlockNode nextStart=getNextBlock(loopStart);if(nextStart!=null&&exitBlocksSet.remove(nextStart)){exitBlocks.add(nextStart);}if(exitBlocksSet.remove(loopStart)){exitBlocks.add(loopStart);}if(exitBlocksSet.remove(loop.getEnd())){exitBlocks.add(loop.getEnd());}exitBlocks.addAll(exitBlocksSet);LoopRegion loopRegion=makeLoopRegion(curRegion,loop,exitBlocks);if(loopRegion==null){BlockNode exit=makeEndlessLoop(curRegion,stack,loop,loopStart);insertContinue(loop);return exit;}curRegion.getSubBlocks().add(loopRegion);IRegion outerRegion=stack.peekRegion();stack.push(loopRegion);IfInfo condInfo=makeIfInfo(loopRegion.getHeader());condInfo=searchNestedIf(condInfo);confirmMerge(condInfo);if(!loop.getLoopBlocks().contains(condInfo.getThenBlock())){condInfo=IfInfo.invert(condInfo);}loopRegion.setCondition(condInfo.getCondition());exitBlocks.removeAll(condInfo.getMergedBlocks());if(!exitBlocks.isEmpty()){BlockNode loopExit=condInfo.getElseBlock();if(loopExit!=null){for(Edge exitEdge : loop.getExitEdges()){if(!exitBlocks.contains(exitEdge.getSource())){continue;}insertBreak(stack,loopExit,exitEdge);}}}BlockNode out;if(loopRegion.isConditionAtEnd()){BlockNode thenBlock=condInfo.getThenBlock();out=(thenBlock==loopStart?condInfo.getElseBlock():thenBlock);loopStart.remove(AType.LOOP);loop.getEnd().add(AFlag.SKIP);stack.addExit(loop.getEnd());loopRegion.setBody(makeRegion(loopStart,stack));loopStart.addAttr(AType.LOOP,loop);loop.getEnd().remove(AFlag.SKIP);}else {out=condInfo.getElseBlock();if(outerRegion!=null&&out.contains(AFlag.LOOP_START)&&!out.getAll(AType.LOOP).contains(loop)&&RegionUtils.isRegionContainsBlock(outerRegion,out)){out=null;}stack.addExit(out);BlockNode loopBody=condInfo.getThenBlock();Region body=makeRegion(loopBody,stack);BlockNode conditionBlock=condInfo.getIfBlock();if(loopStart!=conditionBlock){Set<BlockNode> blocks=BlockUtils.getAllPathsBlocks(loopStart,conditionBlock);blocks.remove(conditionBlock);for(BlockNode block : blocks){if(block.getInstructions().isEmpty()&&!block.contains(AFlag.SKIP)&&!RegionUtils.isRegionContainsBlock(body,block)){body.add(block);}}}loopRegion.setBody(body);}stack.pop();insertContinue(loop);return out;}"
2657	"@Subscribe public void onExperienceChange(ExperienceChangeEvent event){if(event.experience==null||event.experience.getExperienceType()!=tttET){return ;}mExperience=event.experience;resume();}"
2658	"@Override public void write(OutputStream os) throws IOException,WebApplicationException{Calendar start=null;Calendar end=null;try{if(year!=null){start=new GregorianCalendar(TimeZone.getTimeZone(""UTC""));start.setTimeInMillis(0);start.set(Calendar.YEAR,Integer.parseInt(year));end=(Calendar)start.clone();if(month!=null){int m=Integer.parseInt(month)-1;if(m<0||m>11){throw new NotFoundException();}start.set(Calendar.MONTH,m);end.set(Calendar.MONTH,m);if(day!=null){int d=Integer.parseInt(day);start.set(Calendar.DAY_OF_MONTH,d);end.set(Calendar.DAY_OF_MONTH,d);if(hour!=null){start.set(Calendar.HOUR_OF_DAY,Integer.parseInt(hour));end.set(Calendar.HOUR_OF_DAY,start.get(Calendar.HOUR_OF_DAY));end.add(Calendar.HOUR_OF_DAY,1);}else {end.add(Calendar.DAY_OF_MONTH,1);}}else {end.add(Calendar.MONTH,1);}}else {end.add(Calendar.YEAR,1);}}}catch(NumberFormatException e){throw new NotFoundException();}Connection con=null;try{con=getDataSource().getConnection();String query=""SELECT * FROM uploads WHERE device=""+deviceId;if(start!=null){query+="" AND system BETWEEN ""+start.getTimeInMillis()+"" AND ""+end.getTimeInMillis();}Statement st=con.createStatement();ResultSet result=st.executeQuery(query);Writer writer=new BufferedWriter(new OutputStreamWriter(os));writer.write(""[\n"");boolean first=true;while(result.next()){if(!first){writer.write("",\n"");}else {first=false;}long system=result.getLong(7);if(!result.wasNull()){writer.write(String.format(""[%d,%d,%d,%d,%d,%d,%d]"",result.getLong(3),result.getLong(4),result.getLong(5),result.getLong(6),system,result.getLong(8),result.getLong(9)));}}writer.write(""\n]"");writer.close();}catch(SQLException e){throw new ServerException(""Could not read uploads"",e);}catch(NamingException e){throw new ServerException(""Could not read uploads"",e);}finally{try{if(con!=null){con.close();}}catch(SQLException e){}}}"
2659	"private void disconnect(){try{if(socket!=null){socket.shutdownOutput();socket.shutdownInput();socket.close();}}catch(SocketException e){Log.e(""TCP Server"",""Transport endpoint is not connected"");}catch(Exception e){e.printStackTrace();}}"
2660	"public void dataStatusChanged(DataStatusEvent e){if(Executions.getCurrent()==null){return ;}int col=e.getChangedColumn();logger.config(""(""+gridTab+"") Col=""+col+"": ""+e.toString());GridField mField=gridTab.getField(col);if(mField!=null&&(mField.getCallout().length()>0||gridTab.hasDependants(mField.getColumnName()))){String msg=gridTab.processFieldChange(mField);if(msg.length()>0){FDialog.error(windowNo,this,msg);}ArrayList<GridField> list=gridTab.getDependantFields(mField.getColumnName());for(int i=0;i<list.size();i++){GridField dependentField=(GridField)list.get(i);if(dependentField!=null&&dependentField.getLookup() instanceof MLookup){MLookup mLookup=(MLookup)dependentField.getLookup();if(mLookup.getValidation().indexOf(""@""+mField.getColumnName()+""@"")!=-1){mLookup.refresh();}}}}if(!uiCreated){createUI();}dynamicDisplay(col);if(treePanel!=null){if(""Deleted"".equalsIgnoreCase(e.getAD_Message())){if(e.Record_ID!=null&&e.Record_ID instanceof Integer&&((Integer)e.Record_ID!=gridTab.getRecord_ID())){deleteNode((Integer)e.Record_ID);}else {setSelectedNode(gridTab.getRecord_ID());}}else {setSelectedNode(gridTab.getRecord_ID());}}if(listPanel.isVisible()){listPanel.updateListIndex();listPanel.dynamicDisplay(col);}if(!includedPanel.isEmpty()&&e.getChangedColumn()==-1){for(EmbeddedPanel panel : includedPanel){panel.tabPanel.query(false,0,0);}}if(!horizontalIncludedPanel.isEmpty()&&e.getChangedColumn()==-1){for(HorizontalEmbeddedPanel panel : horizontalIncludedPanel){panel.tabPanel.query(false,0,0);}}if(gridTab.isTreeTab()&&treePanel!=null){String treeName=""AD_Tree_ID"";String whereClause=gridTab.getWhereExtended();whereClause=Env.parseContext(Env.getCtx(),windowNo,whereClause,false,false);int m_AD_Tree_ID=Env.getContextAsInt(Env.getCtx(),windowNo,treeName,true);if(m_OldTree_ID!=m_AD_Tree_ID){treePanel=new ADTreePanel();treePanel.initTree(m_AD_Tree_ID,windowNo,whereClause);Borderlayout layout=new Borderlayout();layout.setParent(this);layout.setStyle(""width: 100%; height: 100%; position: absolute;"");West west=new West();west.appendChild(treePanel);west.setWidth(""300px"");west.setCollapsible(true);west.setSplittable(true);west.setAutoscroll(true);layout.appendChild(west);treePanel.getTree().addEventListener(Events.ON_SELECT,this);m_OldTree_ID=m_AD_Tree_ID;}}activate(true);}"
2661	"public static boolean logCheck(Frog frog,Lane[] items){boolean touchFlag=false;inter=new Area();if(frog.getCurrentLane()>=7&&frog.getCurrentLane()<=11){for(Lane item : items){for(int i=0;i<Lane.NB_OBJ_PER_LANE;i++){inter=new Area(item.getLaneObj()[i].getBoundingBox());inter.intersect(new Area(frog.getBoundingBox()));if(!inter.isEmpty()){touchFlag=true;if(item.getDirection()==Lane.LEFT){frog.moveLeftOnLog(item.getSpeed());}else {frog.moveRightOnLog(item.getSpeed());}}}}}else {touchFlag=true;}return touchFlag;}"
2662	"public void setScheduleNavigationArrows(){Date conferenceFirstDayNoTime=AppUtil.setTime(selectedConference.getStartTime(),0,0,0,0);Date conferenceLastDayNoTime=AppUtil.setTime(selectedConference.getEndTime(),0,0,0,0);Date currentScheduleDateNoTime=AppUtil.setTime(currentScheduleDate,0,0,0,0);if(currentScheduleDateNoTime.compareTo(conferenceFirstDayNoTime)==0){ivLeftArrow.setBackgroundResource(R.drawable.icon_left_arrow_inactive);}else {ivLeftArrow.setBackgroundResource(R.drawable.icon_left_arrow_active);}if(currentScheduleDateNoTime.compareTo(conferenceLastDayNoTime)==0){ivRightArrow.setBackgroundResource(R.drawable.icon_right_arrow_inactive);}else {ivRightArrow.setBackgroundResource(R.drawable.icon_right_arrow_active);}}"
2663	"void jComboBoxClassification_actionPerformed(ActionEvent event){int selectedIndex=jComboBoxClassification.getSelectedIndex();if(selectedIndex==jComboBoxClassification.getItemCount()-1){jComboBoxClassification.hidePopup();this.parentDialog.setVisible(false);JPanelForm.instance.manageLocalClassifications();}else {prevSelectedClassifIndex=selectedIndex;updateCurrentSelectedClassif();}}"
2664	"public WindowsVersion getVersion() throws WinRMException{List<WindowsVersion> versions=new GetWindowsVersionQuery(target).execute();return versions.size()>0?versions.get(0):null;}"
2665	"private LinkedList<CheckersMove> getJumpMoves(int row,int col,int player,int[][] board2,CheckersMove lastMove){LinkedList<CheckersMove> moves=new LinkedList<CheckersMove>();if((player==RED_PLAYER||board2[row][col]==WHITE_KING)&&row>1){if(col>=2&&board2[row-2][col-2]==EMPTY&&board2[row-1][col-1]!=EMPTY&&!isPlayersPiece(board2[row-1][col-1],player)){if(row-2==0||board2[row][col]==WHITE_KING||board2[row][col]==RED_KING){CheckersMove cm=new CheckersMove(row,col,row-2,col-2,true,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row-2,col-2,player,makeMove(board2,cm),cm));}else {CheckersMove cm=new CheckersMove(row,col,row-2,col-2,false,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row-2,col-2,player,makeMove(board2,cm),cm));}}if(col<=5&&board2[row-2][col+2]==EMPTY&&board2[row-1][col+1]!=EMPTY&&!isPlayersPiece(board2[row-1][col+1],player)){if(row-2==0||board2[row][col]==WHITE_KING||board2[row][col]==RED_KING){CheckersMove cm=new CheckersMove(row,col,row-2,col+2,true,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row-2,col+2,player,makeMove(board2,cm),cm));}else {CheckersMove cm=new CheckersMove(row,col,row-2,col+2,false,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row-2,col+2,player,makeMove(board2,cm),cm));}}}else {if((player==WHITE_PLAYER||board2[row][col]==RED_KING)&&row<6){if(col>=2&&board2[row+2][col-2]==EMPTY&&board2[row+1][col-1]!=EMPTY&&!isPlayersPiece(board2[row+1][col-1],player)){if(row+2==7||board2[row][col]==RED_KING||board2[row][col]==WHITE_KING){CheckersMove cm=new CheckersMove(row,col,row+2,col-2,true,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row+2,col-2,player,makeMove(board2,cm),cm));}else {CheckersMove cm=new CheckersMove(row,col,row+2,col-2,false,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row+2,col-2,player,makeMove(board2,cm),cm));}}if(col<=5&&board2[row+2][col+2]==EMPTY&&board2[row+1][col+1]!=EMPTY&&!isPlayersPiece(board2[row+1][col+1],player)){if(row+2==7||board2[row][col]==RED_KING||board2[row][col]==WHITE_KING){CheckersMove cm=new CheckersMove(row,col,row+2,col+2,true,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row+2,col+2,player,makeMove(board2,cm),cm));}else {CheckersMove cm=new CheckersMove(row,col,row+2,col+2,false,player,true,lastMove);moves.add(cm);moves.addAll(getJumpMoves(row+2,col+2,player,makeMove(board2,cm),cm));}}}}return moves;}"
2666	"@Override public void onResult(int state,String data){LogUtil.d(TAG,""state: ""+state+"" ,data: ""+data);if(mIHttpListener!=null){switch (state){case HTTPConstant.CONNECT_SUCCESS :case HTTPConstant.CONNECT_FAIL :mIHttpListener.onResult(state,data);break;case HTTPConstant.RECEIVE_SUCCESS :if(mHasResponsed){mIHttpListener.onResult(HTTPConstant.RECEIVE_SUCCESS,data);break;}else {if(System.currentTimeMillis()-mCmdSendTime<=MAX_RESPONSE_MILL_TIME&&HTTPConstant.RECEIVED_SUCCESS.equals(data)){response(HTTPConstant.SEND_SUCCESS,data);mSendTimes=0;mHasResponsed=true;mHanlder.removeCallbacksAndMessages(null);}else {retry(HTTPConstant.RECEIVE_CHECK_FAILED,data);}}break;case HTTPConstant.RECEIVE_CHECK_FAILED :retry(HTTPConstant.RECEIVE_CHECK_FAILED,data);break;case HTTPConstant.SEND_FAIL :retry(HTTPConstant.SEND_FAIL,data);break;default :break;}}}"
2667	"public void onSkipClicked(){this.canceled=true;if(callbacks!=null){callbacks.onSaveStep(StepCallbacks.ACTION_NEXT,this.getStep(),this.getStepResult(true));}}"
2668	"@Override public int getSpanSize(int position){if(mAdapter.isShowTopLoading()){position-=1;}if(mAdapter.isShowTopError()){position-=1;}if(position<0){return mSpanCount;}else {return mSpanSizeLookUpWrapped.getSpanSize(position);}}"
2669	"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){if(!world.isRemote){TileForge tile=(TileForge)world.getTileEntity(pos);if(tile!=null){ItemStack pItem=player.inventory.getCurrentItem();ItemStack fuelItem=tile.getSlotStack(0);if(pItem.isEmpty()){if(player.isSneaking()){if(!fuelItem.isEmpty()){if(facing==EnumFacing.NORTH||facing==EnumFacing.SOUTH||facing==EnumFacing.EAST||facing==EnumFacing.WEST){CommonUtils.spawnItemEntity(world,player,tile.getSlotStack(0));tile.setSlotStack(0,ItemStack.EMPTY);tile.markDirty();tile.updateBlock();return true;}}}if(!player.isSneaking()){if(world.getBlockState(pos).getValue(ACTIVE)==true){Integer tempInt=tile.getHeat();String tempString=tempInt.toString();ITextComponent itextcomponent=new TextComponentString(tempString);player.sendStatusMessage(itextcomponent,true);return true;}}}if((pItem.getItem()==Items.FLINT_AND_STEEL)||(pItem.getItem()==PrimalItems.FIRE_BOW)||pItem.getItem()==Item.getItemFromBlock(Blocks.TORCH)){world.setBlockState(pos,state.withProperty(ACTIVE,true),2);tile.setHeat(100);tile.markDirty();tile.updateBlock();return true;}if((!pItem.isEmpty())&&tile.isItemValidForSlot(0,pItem)){if(!fuelItem.isEmpty()){if(pItem.getItem()==fuelItem.getItem()){if(fuelItem.getCount()<64){if(fuelItem.getCount()+pItem.getCount()<=64){fuelItem.grow(pItem.getCount());player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);tile.markDirty();tile.updateBlock();return true;}if(fuelItem.getCount()+pItem.getCount()>64){pItem.setCount(64-pItem.getCount());fuelItem.setCount(64);tile.markDirty();tile.updateBlock();return true;}}}}if(fuelItem.isEmpty()){tile.setSlotStack(0,pItem);player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);return true;}}if(facing==EnumFacing.UP){if(pItem.isEmpty()){for(int i=2;i<tile.getSlotListSize();i++){if(!tile.getSlotStack(i).isEmpty()){if(tile.getSlotStack(i).getItem().equals(new ItemStack(ModBlocks.ironchunk).getItem())){CommonUtils.spawnItemEntity(world,player,tile.getSlotStack(i));tile.setSlotStack(i,ItemStack.EMPTY);return true;}if(tile.getSlotStack(i).getItem().equals(new ItemStack(ModBlocks.ironball).getItem())){CommonUtils.spawnItemEntity(world,player,tile.getSlotStack(i));tile.setSlotStack(i,ItemStack.EMPTY);return true;}if(tile.getSlotStack(i).hasTagCompound()==true){if(tile.getSlotStack(i).getTagCompound().getBoolean(""hot"")==false){CommonUtils.spawnItemEntity(world,player,tile.getSlotStack(i));tile.setSlotStack(i,ItemStack.EMPTY);return true;}}}}}if(pItem.getItem().equals(new ItemStack(ModBlocks.ironchunk).getItem())){for(int i=2;i<=tile.getSlotListSize();i++){if(tile.getSlotStack(i).isEmpty()){tile.setSlotStack(i,new ItemStack(pItem.getItem(),1));pItem.shrink(1);return true;}}}if(pItem.getItem().equals(new ItemStack(ModBlocks.ironball).getItem())){for(int i=2;i<tile.getSlotListSize();i++){if(tile.getSlotStack(i).isEmpty()){tile.setSlotStack(i,new ItemStack(pItem.getItem(),1));pItem.shrink(1);return true;}}}if(pItem.getItem().equals(new ItemStack(Items.IRON_INGOT).getItem())){for(int i=2;i<7;i++){if(tile.getSlotStack(i).isEmpty()){tile.setSlotStack(i,new ItemStack(Items.IRON_INGOT,1));pItem.shrink(1);return true;}}}if(pItem.getItem() instanceof ToolPart){if(tile.getSlotStack(4).isEmpty()){tile.setSlotStack(4,pItem);player.inventory.setInventorySlotContents(player.inventory.currentItem,ItemStack.EMPTY);return true;}}}}}return false;}"
2670	"@EventSubscriber public void onGuildCreate(GuildCreateEvent event){if(event.getGuild()==null){return ;}if(event.getGuild().getID().equalsIgnoreCase(""189377932429492224"")){plugin.getLogger().info(""DiscordGuild????????""+event.getGuild().getName());setGuild(event.getGuild());}if(guild==null){plugin.getLogger().info(""Discord???????????????(Guild?????????)"");}for(IChannel channel : event.getGuild().getChannels()){if(!channel.getID().equalsIgnoreCase(""250613942106193921"")){continue;}if(!channel.getGuild().getID().equalsIgnoreCase(Discord.guild.getID())){continue;}Discord.channel=channel;}if(channel==null){plugin.getLogger().info(""Discord???????????????(Channel?????????)"");}plugin.getLogger().info(""Discord???????????????ID: ""+event.getClient().getOurUser().getName());}"
2671	"public Indent getChildIndent(){val elementType=myNode.getElementType();if(elementType==CSharpStubElements.FILE){return Indent.getNoneIndent();}else {if(elementType==CSharpElements.TRY_STATEMENT){return Indent.getNoneIndent();}}return Indent.getNormalIndent();}"
2672	"private boolean checkStorageSystemType(StorageSystem system){if(StorageSystem.Type.scaleio.name().equalsIgnoreCase(system.getSystemType())||StorageSystem.Type.xtremio.name().equalsIgnoreCase(system.getSystemType())||StorageSystem.Type.hds.name().equalsIgnoreCase(system.getSystemType())){return true;}return false;}"
2673	"static Set<String> bow(String phrase){String[] tokens=phrase.split(""\\s+"");Set<String> bows=new LinkedHashSet<>();for(String tok : tokens){tok=tok.replaceAll(""^\\W+"","""");if(EnglishDictionary.stopWords.contains(tok)){continue;}List<String> subToks=new ArrayList<>();String buff="""";for(int ti=0;ti<tok.length();ti++){boolean cUc=Character.isUpperCase(tok.charAt(ti));boolean nUc=false,pUc=false;if(ti+1<tok.length()){nUc=Character.isUpperCase(tok.charAt(ti+1));}if(ti-1>=0){pUc=Character.isUpperCase(tok.charAt(ti-1));}if(cUc&&ti>0&&ti<tok.length()-1&&((!pUc&&!nUc)||(pUc&&!nUc)||tok.charAt(ti-1)=='.')){if(buff.length()>2||(buff.length()==2&&buff.charAt(buff.length()-1)!='.')){subToks.add(buff);}buff=""""+tok.charAt(ti);}else {buff+=tok.charAt(ti);}}if(buff.length()>2||(buff.length()==2&&buff.charAt(buff.length()-1)!='.')){subToks.add(buff);}for(String st : subToks){String ct=EnglishDictionary.getSingular(st.toLowerCase());bows.add(ct);}}return bows;}"
2674	"public VBD createVbd(Connection conn,DiskTO volume,String vmName,VM vm,BootloaderType bootLoaderType,VDI vdi) throws XmlRpcException,XenAPIException{ final Volume.Type type=volume.getType();if(vdi==null){vdi=mount(conn,vmName,volume);}if(vdi!=null){if(""detached"".equals(vdi.getNameLabel(conn))){vdi.setNameLabel(conn,vmName+""-DATA"");} final Map<String,String> smConfig=vdi.getSmConfig(conn);for(String key : smConfig.keySet()){if(key.startsWith(""host_"")){vdi.removeFromSmConfig(conn,key);break;}}} final VBD.Record vbdr=new VBD.Record();vbdr.VM=vm;if(vdi!=null){vbdr.VDI=vdi;}else {vbdr.empty=true;}if(type==Volume.Type.ROOT&&bootLoaderType==BootloaderType.PyGrub){vbdr.bootable=true;}else {if(type==Volume.Type.ISO&&bootLoaderType==BootloaderType.CD){vbdr.bootable=true;}}if(volume.getType()==Volume.Type.ISO){vbdr.mode=Types.VbdMode.RO;vbdr.type=Types.VbdType.CD;vbdr.userdevice=""3"";}else {vbdr.mode=Types.VbdMode.RW;vbdr.type=Types.VbdType.DISK;vbdr.unpluggable=(volume.getType()==Volume.Type.ROOT)?false:true;vbdr.userdevice=""autodetect""; final Long deviceId=volume.getDiskSeq();if(deviceId!=null&&!isDeviceUsed(conn,vm,deviceId)){vbdr.userdevice=deviceId.toString();}} final VBD vbd=VBD.create(conn,vbdr);if(s_logger.isDebugEnabled()){s_logger.debug(""VBD ""+vbd.getUuid(conn)+"" created for ""+volume);}return vbd;}"
2675	"private boolean store(long me,FileItem file,JSONObject jo){String tag=this.getString(""tag"");try{String range=this.getHeader(""Content-Range"");if(range==null){range=this.getString(""Content-Range"");}long position=0;long total=0;String lastModified=this.getHeader(""lastModified"");if(lastModified==null){lastModified=this.getString(""lastModified"");}if(range!=null){String[] ss=range.split("" "");if(ss.length>1){range=ss[1];}ss=range.split(""-|/"");if(ss.length==3){position=Bean.toLong(ss[0]);total=Bean.toLong(ss[2]);}}String id=UID.id(me,tag,file.getName(),total,lastModified);String share=this.getString(""share"");String folder=this.getString(""folder"");long pos=Repo.store(folder,id,file.getName(),tag,position,total,file.getInputStream(),-1,!""no"".equals(share),me);if(pos>=0){if(jo==null){this.put(""url"",""/repo/""+id+""/""+file.getName());this.put(X.ERROR,0);this.put(""repo"",id);if(total>0){this.put(""name"",file.getName());this.put(""pos"",pos);this.put(""size"",total);}}else {jo.put(""url"",""/repo/""+id+""/""+file.getName());jo.put(""repo"",id);jo.put(X.ERROR,0);if(total>0){jo.put(""name"",file.getName());jo.put(""pos"",pos);jo.put(""size"",total);}}}else {if(jo==null){this.set(X.ERROR,X.FAIL201);this.put(X.MESSAGE,lang.get(""repo.locked""));}else {jo.put(X.ERROR,X.FAIL201);jo.put(X.MESSAGE,lang.get(""repo.locked""));}return false;}return true;}catch(Exception e){log.error(e.getMessage(),e);if(jo==null){this.set(X.ERROR,X.FAIL401);this.put(X.MESSAGE,lang.get(e.getMessage()));}else {jo.put(X.ERROR,X.FAIL401);jo.put(X.MESSAGE,lang.get(e.getMessage()));}}return false;}"
2676	"@Override public void onSuccess(Call<OAuthToken> call,Response<OAuthToken> response){OAuthToken token=response.body();if(!token.isValid()){onFailure(call,null);return ;}token.setSandbox(AuthConstants.USE_SANDBOX);String serializedToken=new Gson().toJson(token.setupExpireDate());String username=token.getNetId();if(username==null){onFailure(call,new ByuError(""The token received was invalid. Please try again.""));}else {setResult(username,serializedToken);startService(new Intent(this,RegisterWithMpnService.class).putExtra(RegisterWithMpnService.ACTION,RegisterWithMpnService.Action.LOGIN));Account account=createAccount(accountManager,username,serializedToken);ContentResolver.setSyncAutomatically(account,getString(R.string.fakeContentAuthority),true);ContentResolver.addPeriodicSync(account,getString(R.string.fakeContentAuthority),Bundle.EMPTY,ONE_WEEK);AccountInformation.sync(this,account,new AccountInformation.AccountInformationCallback(){  @Override public void doneLoading(  AccountInformation result){    progressDialog.dismiss();    finish();  }});}}"
2677	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}User user=(User)o;return salt==user.salt&&(username!=null?username.equals(user.username):user.username==null)&&(password!=null?password.equals(user.password):user.password==null);}"
2678	"public void activate(NEntity entity){CooldownComponent cc=(CooldownComponent)entity.getComponent(ComponentType.COOLDOWN);if(cc.getCd()==0){((RenderComponent)effect.getComponent(ComponentType.RENDER)).setVisible(true);NEntity parent=((LinkComponent)entity.getComponent(ComponentType.LINK)).getLink();PositionComponent pc=(PositionComponent)parent.getComponent(ComponentType.POSITION);Set<NEntity> projectiles=Engine.getEngine().getNEntityStream().getEntities(ComponentType.HIT);for(NEntity p : projectiles){PositionComponent ppc=(PositionComponent)p.getComponent(ComponentType.POSITION);if(pc.getCoord().sum(ppc.getCoord().multiplicate(-1)).length()<100){HitComponent phc=(HitComponent)p.getComponent(ComponentType.HIT);if(phc.getDamage()<capacity){capacity-=phc.getDamage();Engine.getEngine().getNEntityStream().removeEntity(p);}else {phc.setDamage(phc.getDamage()-capacity);capacity=maxCapacity;cc.setCd(cc.getCdAmount());((RenderComponent)effect.getComponent(ComponentType.RENDER)).setVisible(false);}}}}}"
2679	"public WindowStatisticSaleGoods(Frame parent){super(parent,true);setLocation(500,200);setSize(320,200);setResizable(false);getContentPane().setLayout(null);title=new JLabel(""Statistics"");title.setHorizontalAlignment(SwingConstants.CENTER);title.setFont(new Font(""Times New Roman"",Font.BOLD,12));title.setBounds(42,10,200,30);getContentPane().add(title);int totalValue=0;double totalQuant=0;for(int i=0;i<Main.mainWindow.saleGoods.size();i++){double tempPrice=0;for(Goods g : Main.mainWindow.goods){if(Main.mainWindow.saleGoods.get(i).getSaleGoodsID()==g.getID()){tempPrice=g.getPrice();break;}}double temp=tempPrice*Main.mainWindow.saleGoods.get(i).getQuantity();totalQuant+=Main.mainWindow.saleGoods.get(i).getQuantity();totalValue+=temp;}lTotalValue=new JLabel(""Total value of All Sold goods in stock: ""+totalValue+"" uah"");lTotalValue.setHorizontalAlignment(SwingConstants.CENTER);lTotalValue.setFont(new Font(""Times New Roman"",Font.BOLD,12));lTotalValue.setBounds(10,80,280,30);getContentPane().add(lTotalValue);lTotalQuantity=new JLabel(totalQuant+"" items were sold"");lTotalQuantity.setHorizontalAlignment(SwingConstants.CENTER);lTotalQuantity.setFont(new Font(""Times New Roman"",Font.BOLD,12));lTotalQuantity.setBounds(10,50,280,30);getContentPane().add(lTotalQuantity);ok=new JButton(""Close"");ok.setBounds(100,120,100,23);getContentPane().add(ok);ok.addActionListener(new ActionListener(){  @Override public void actionPerformed(  ActionEvent arg0){    dispose();  }});}"
2680	"public static String getCorrectUrl(String url){return (!url.startsWith(""http://"")&&!url.startsWith(""https://""))?""http://""+url:url;}"
2681	"public ArrayList<News> getNews(){Response res=makeRequest(Constants.URL_NEWS_ALL,""GET"",null);System.out.println(""status: ""+res.status);System.out.println(""text: ""+res.text);if(res.status==200){try{return parseNewsArray(new JSONArray(res.text));}catch(JSONException e){e.printStackTrace();}}return null;}"
2682	"@SuppressWarnings({""unchecked"",""rawtypes""}) protected T deserialze(DefaultJSONParser parser,Type type,Object fieldName,Object object,int features){if(type==JSON.class||type==JSONObject.class){return (T)parser.parse();} final JSONLexerBase lexer=(JSONLexerBase)parser.lexer;int token=lexer.token();if(token==JSONToken.NULL){lexer.nextToken(JSONToken.COMMA);return null;}ParseContext context=parser.getContext();if(object!=null&&context!=null){context=context.parent;}ParseContext childContext=null;try{Map<String,Object> fieldValues=null;if(token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);if(object==null){object=createInstance(parser,type);}return (T)object;}if(token==JSONToken.LBRACKET){ final int mask=Feature.SupportArrayToBean.mask;boolean isSupportArrayToBean=(beanInfo.parserFeatures&mask)!=0||lexer.isEnabled(Feature.SupportArrayToBean)||(features&mask)!=0;if(isSupportArrayToBean){return deserialzeArrayMapping(parser,type,fieldName,object);}}if(token!=JSONToken.LBRACE&&token!=JSONToken.COMMA){if(lexer.isBlankInput()){return null;}if(token==JSONToken.LITERAL_STRING){String strVal=lexer.stringVal();if(strVal.length()==0){lexer.nextToken();return null;}}if(token==JSONToken.LBRACKET&&lexer.getCurrent()==']'){lexer.next();lexer.nextToken();return null;}StringBuffer buf=(new StringBuffer()).append(""syntax error, expect {, actual "").append(lexer.tokenName()).append("", pos "").append(lexer.pos());if(fieldName instanceof String){buf.append("", fieldName "").append(fieldName);}throw new JSONException(buf.toString());}if(parser.resolveStatus==DefaultJSONParser.TypeNameRedirect){parser.resolveStatus=DefaultJSONParser.NONE;}for(int fieldIndex=0;;fieldIndex++){String key=null;FieldDeserializer fieldDeser=null;FieldInfo fieldInfo=null;Class<?> fieldClass=null;if(fieldIndex<sortedFieldDeserializers.length){fieldDeser=sortedFieldDeserializers[fieldIndex];fieldInfo=fieldDeser.fieldInfo;fieldClass=fieldInfo.fieldClass;}boolean matchField=false;boolean valueParsed=false;Object fieldValue=null;if(fieldDeser!=null){char[] name_chars=fieldInfo.name_chars;if(fieldClass==int.class||fieldClass==Integer.class){fieldValue=lexer.scanFieldInt(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass==long.class||fieldClass==Long.class){fieldValue=lexer.scanFieldLong(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass==String.class){fieldValue=lexer.scanFieldString(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass==boolean.class||fieldClass==Boolean.class){fieldValue=lexer.scanFieldBoolean(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass==float.class||fieldClass==Float.class){fieldValue=lexer.scanFieldFloat(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass==double.class||fieldClass==Double.class){fieldValue=lexer.scanFieldDouble(name_chars);if(lexer.matchStat>0){matchField=true;valueParsed=true;}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(fieldClass.isEnum()&&parser.getConfig().getDeserializer(fieldClass) instanceof EnumDeserializer){String enumName=lexer.scanFieldSymbol(name_chars,parser.symbolTable);if(lexer.matchStat>0){matchField=true;valueParsed=true;fieldValue=Enum.valueOf((Class<Enum>)fieldClass,enumName);}else {if(lexer.matchStat==JSONLexer.NOT_MATCH_NAME){continue;}}}else {if(lexer.matchField(name_chars)){matchField=true;}else {continue;}}}}}}}}}if(!matchField){key=lexer.scanSymbol(parser.symbolTable);if(key==null){token=lexer.token();if(token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);break;}if(token==JSONToken.COMMA){if(lexer.isEnabled(Feature.AllowArbitraryCommas)){continue;}}}if(""$ref""==key){lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);token=lexer.token();if(token==JSONToken.LITERAL_STRING){String ref=lexer.stringVal();if(""@"".equals(ref)){object=context.object;}else {if("".."".equals(ref)){ParseContext parentContext=context.parent;if(parentContext.object!=null){object=parentContext.object;}else {parser.addResolveTask(new ResolveTask(parentContext,ref));parser.resolveStatus=DefaultJSONParser.NeedToResolve;}}else {if(""$"".equals(ref)){ParseContext rootContext=context;while(rootContext.parent!=null){rootContext=rootContext.parent;}if(rootContext.object!=null){object=rootContext.object;}else {parser.addResolveTask(new ResolveTask(rootContext,ref));parser.resolveStatus=DefaultJSONParser.NeedToResolve;}}else {parser.addResolveTask(new ResolveTask(context,ref));parser.resolveStatus=DefaultJSONParser.NeedToResolve;}}}}else {throw new JSONException(""illegal ref, ""+JSONToken.name(token));}lexer.nextToken(JSONToken.RBRACE);if(lexer.token()!=JSONToken.RBRACE){throw new JSONException(""illegal ref"");}lexer.nextToken(JSONToken.COMMA);parser.setContext(context,object,fieldName);return (T)object;}if(JSON.DEFAULT_TYPE_KEY==key){lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);if(lexer.token()==JSONToken.LITERAL_STRING){String typeName=lexer.stringVal();lexer.nextToken(JSONToken.COMMA);if(typeName.equals(beanInfo.typeName)){if(lexer.token()==JSONToken.RBRACE){lexer.nextToken();break;}continue;}ParserConfig config=parser.getConfig();ObjectDeserializer deserizer=getSeeAlso(config,this.beanInfo,typeName);Class<?> userType=null;if(deserizer==null){userType=TypeUtils.loadClass(typeName,config.getDefaultClassLoader());Class<?> expectClass=TypeUtils.getClass(type);if(expectClass==null||(userType!=null&&expectClass.isAssignableFrom(userType))){deserizer=parser.getConfig().getDeserializer(userType);}else {throw new JSONException(""type not match"");}}return (T)deserizer.deserialze(parser,userType,fieldName);}else {throw new JSONException(""syntax error"");}}}if(object==null&&fieldValues==null){object=createInstance(parser,type);if(object==null){fieldValues=new HashMap<String,Object>(this.fieldDeserializers.length);}childContext=parser.setContext(context,object,fieldName);}if(matchField){if(!valueParsed){fieldDeser.parseField(parser,object,type,fieldValues);}else {if(object==null){fieldValues.put(fieldInfo.name,fieldValue);}else {if(fieldValue==null){if(fieldClass!=int.class&&fieldClass!=long.class&&fieldClass!=float.class&&fieldClass!=double.class&&fieldClass!=boolean.class){fieldDeser.setValue(object,fieldValue);}}else {fieldDeser.setValue(object,fieldValue);}}if(lexer.matchStat==JSONLexer.END){break;}}}else {boolean match=parseField(parser,key,object,type,fieldValues);if(!match){if(lexer.token()==JSONToken.RBRACE){lexer.nextToken();break;}continue;}else {if(lexer.token()==JSONToken.COLON){throw new JSONException(""syntax error, unexpect token ':'"");}}}if(lexer.token()==JSONToken.COMMA){continue;}if(lexer.token()==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);break;}if(lexer.token()==JSONToken.IDENTIFIER||lexer.token()==JSONToken.ERROR){throw new JSONException(""syntax error, unexpect token ""+JSONToken.name(lexer.token()));}}if(object==null){if(fieldValues==null){object=createInstance(parser,type);if(childContext==null){childContext=parser.setContext(context,object,fieldName);}return (T)object;}FieldInfo[] fieldInfoList=beanInfo.fields;int size=fieldInfoList.length;Object[] params=new Object[size];for(int i=0;i<size;++i){FieldInfo fieldInfo=fieldInfoList[i];Object param=fieldValues.get(fieldInfo.name);if(param==null){Type fieldType=fieldInfo.fieldType;if(fieldType==byte.class){param=(byte)0;}else {if(fieldType==short.class){param=(short)0;}else {if(fieldType==int.class){param=0;}else {if(fieldType==long.class){param=0L;}else {if(fieldType==float.class){param=0.0;}else {if(fieldType==double.class){param=0.0;}else {if(fieldType==boolean.class){param=Boolean.FALSE;}}}}}}}}params[i]=param;}if(beanInfo.creatorConstructor!=null){try{object=beanInfo.creatorConstructor.newInstance(params);}catch(Exception e){throw new JSONException(""create instance error, ""+beanInfo.creatorConstructor.toGenericString(),e);}}else {if(beanInfo.factoryMethod!=null){try{object=beanInfo.factoryMethod.invoke(null,params);}catch(Exception e){throw new JSONException(""create factory method error, ""+beanInfo.factoryMethod.toString(),e);}}}}Method buildMethod=beanInfo.buildMethod;if(buildMethod==null){return (T)object;}Object builtObj;try{builtObj=buildMethod.invoke(object);}catch(Exception e){throw new JSONException(""build object error"",e);}return (T)builtObj;}finally{if(childContext!=null){childContext.object=object;}parser.setContext(context);}}"
2683	"@Override protected void postLoad(long start,long end,long total,List<ListGridEntry<DObjectRef>> entries){if(entries!=null&&!entries.isEmpty()){DObjectRef selected=_selectedMap.get(_parent);if(selected==null){select(0);}else {int selectedIdx=-1;int toSelectIdx=-1;for(int i=0;i<entries.size();i++){DObjectRef o=entries.get(i).data();if(_toSelect!=null&&_toSelect.equals(o)){toSelectIdx=i;}if(selected!=null&&selected.equals(o)){selectedIdx=i;}}if(toSelectIdx>=0){clearSelections();select(toSelectIdx);}else {if(selectedIdx>=0){select(selectedIdx);}else {select(0);}}}}else {notifyOfDeselectionInPage(_parent);}_toSelect=null;}"
2684	"public boolean exists(Settings settings){return settings.get(getKey())!=null;}"
2685	"@Override public void watch(GameEvent event,Game game){if(event.getType()==GameEvent.EventType.CYCLE_CARD){Card card=game.getCard(event.getSourceId());if(card!=null){Cards c=getCardsCycledThisTurn(event.getPlayerId());c.add(card);cycledCardsThisTurn.put(event.getPlayerId(),c);}}}"
2686	"public int specialStateTransition(int s,IntStream _input) throws NoViableAltException{IntStream input=_input;int _s=s;switch (s){case 0 :int LA18_31=input.LA(1);s=-1;if(((LA18_31>='\u0000'&&LA18_31<='\uFFFF'))){s=96;}else {s=35;}if(s>=0){return s;}break;case 1 :int LA18_32=input.LA(1);s=-1;if(((LA18_32>='\u0000'&&LA18_32<='\uFFFF'))){s=96;}else {s=35;}if(s>=0){return s;}break;case 2 :int LA18_0=input.LA(1);s=-1;if((LA18_0=='s')){s=1;}else {if((LA18_0=='i')){s=2;}else {if((LA18_0=='e')){s=3;}else {if((LA18_0=='n')){s=4;}else {if((LA18_0=='j')){s=5;}else {if((LA18_0=='r')){s=6;}else {if((LA18_0=='g')){s=7;}else {if((LA18_0=='d')){s=8;}else {if((LA18_0=='p')){s=9;}else {if((LA18_0=='c')){s=10;}else {if((LA18_0=='M')){s=11;}else {if((LA18_0=='m')){s=12;}else {if((LA18_0=='G')){s=13;}else {if((LA18_0=='b')){s=14;}else {if((LA18_0==':')){s=15;}else {if((LA18_0==';')){s=16;}else {if((LA18_0=='w')){s=17;}else {if((LA18_0=='v')){s=18;}else {if((LA18_0=='a')){s=19;}else {if((LA18_0=='f')){s=20;}else {if((LA18_0=='t')){s=21;}else {if((LA18_0=='.')){s=22;}else {if((LA18_0=='l')){s=23;}else {if((LA18_0=='!')){s=24;}else {if(((LA18_0>='0'&&LA18_0<='9'))){s=25;}else {if((LA18_0=='^')){s=26;}else {if(((LA18_0>='A'&&LA18_0<='F')||(LA18_0>='H'&&LA18_0<='L')||(LA18_0>='N'&&LA18_0<='Z')||LA18_0=='_'||LA18_0=='h'||LA18_0=='k'||LA18_0=='o'||LA18_0=='q'||LA18_0=='u'||(LA18_0>='x'&&LA18_0<='z'))){s=27;}else {if((LA18_0=='=')){s=28;}else {if((LA18_0=='{')){s=29;}else {if((LA18_0=='}')){s=30;}else {if((LA18_0=='\""')){s=31;}else {if((LA18_0=='\'')){s=32;}else {if((LA18_0=='/')){s=33;}else {if(((LA18_0>='\t'&&LA18_0<='\n')||LA18_0=='\r'||LA18_0==' ')){s=34;}else {if(((LA18_0>='\u0000'&&LA18_0<='\b')||(LA18_0>='\u000B'&&LA18_0<='\f')||(LA18_0>='\u000E'&&LA18_0<='\u001F')||(LA18_0>='#'&&LA18_0<='&')||(LA18_0>='('&&LA18_0<='-')||LA18_0=='<'||(LA18_0>='>'&&LA18_0<='@')||(LA18_0>='['&&LA18_0<=']')||LA18_0=='`'||LA18_0=='|'||(LA18_0>='~'&&LA18_0<='\uFFFF'))){s=35;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(s>=0){return s;}break;}NoViableAltException nvae=new NoViableAltException(getDescription(),18,_s,input);error(nvae);throw nvae;}"
2687	"@Override protected void onPostExecute(String s){JSONObject root;JSONObject user_data;switch (export){case ""Profile"" :{try{if(s.length()!=16){root=new JSONObject(s);user_data=root.getJSONObject(""user_data"");Users_Object uo=new Users_Object(user_data.getString(""id""),user_data.getString(""password""),user_data.getString(""firstName""),user_data.getString(""email""),user_data.getString(""address""),user_data.getString(""city""),user_data.getString(""gender""),user_data.getString(""dateOfBirth""),user_data.getString(""username""),user_data.getString(""mobilePhone""),user_data.getString(""phone""),user_data.getDouble(""scoreSingle""),user_data.getDouble(""scoreDouble""));Login.checkLoginInfo(uo);}else {Login.checkLoginInfo(null);}}catch(JSONException e){e.printStackTrace();}break;}case ""Register"" :{Register.succesfullRegister();break;}case ""Group"" :{String[] users=s.split(""&"");for(int i=0;i<users.length;++i){try{root=new JSONObject(users[i]);user_data=root.getJSONObject(""user_data"");Users_Object us=new Users_Object(user_data.getString(""id""),user_data.getString(""firstName""),user_data.getString(""lastName""),"""","""","""","""",null,user_data.getString(""userName""),null,null,0,0);Groups.personListObject.add(us);Groups.personList.add(user_data.getString(""firstName"")+"" ""+user_data.getString(""lastName""));}catch(JSONException e){e.printStackTrace();}}break;}case ""GetMatch"" :{Popup p=new Popup();if(s!=""""){p.CheckMatch(s);}}case ""GetMatchByID"" :{Popup p=new Popup();if(s!=""""){p.CheckForMatchToUpdate(s);}}case ""GetLanes"" :{if(s!=""""){NewMatchActivity.GetLanes(s);}}case ""GetGroup"" :{String[] users=s.split(""&"");for(int i=0;i<users.length;++i){try{root=new JSONObject(users[i]);user_data=root.getJSONObject(""user_data"");Groups_Object go=new Groups_Object(user_data.getString(""GroupName""),Integer.parseInt(user_data.getString(""GroupID"")));for(int j=1;j<15;j++){if(!user_data.getString(""Member""+j).equals(null)||!user_data.getString(""Member""+j).equals("""")){go.addMember(user_data.getString(""Member""+j));}}Groups.groupList.add(go);}catch(JSONException e){e.printStackTrace();}}break;}}}"
2688	"private List<RssItem> readFeed(XmlPullParser parser) throws XmlPullParserException,IOException{parser.require(XmlPullParser.START_TAG,null,TAG_RSS);String title=null;String link=null;double geoLat=0;double geoLong=0;List<RssItem> items=new ArrayList<RssItem>();while(parser.next()!=XmlPullParser.END_DOCUMENT){if(parser.getEventType()!=XmlPullParser.START_TAG){continue;}String name=parser.getName();if(name.equals(TAG_TITLE)){title=readTitle(parser);}else {if(name.equals(TAG_LINK)){link=readLink(parser);}else {if(name.equals(TAG_GEOLAT)){geoLat=readGeoLat(parser);}else {if(name.equals(TAG_GEOLONG)){geoLong=readGeoLong(parser);}}}}if(title!=null&&link!=null){RssItem item=new RssItem(title,link,geoLat,geoLong);items.add(item);title=null;link=null;geoLat=0;geoLong=0;}}return items;}"
2689	"void familyTreeRecurse(Person curPerson,Event curEvent,int width){LatLng curPosition=new LatLng(Double.parseDouble(curEvent.getLatitude()),Double.parseDouble(curEvent.getLongitude()));Settings settings=Settings.getInstance();int lineColor=settings.getFamilyTreeLinesColor();FamilyInfo familyInfo=FamilyInfo.getInstance();Person father=null;if(curPerson.getFather()!=null){father=familyInfo.getPersonFromID(curPerson.getFather());}Event[] fatherEvents=null;if(father!=null){fatherEvents=familyInfo.getEventsOfPerson(father.getPersonID());}if(fatherEvents!=null&&fatherEvents[0]!=null){LatLng fatherPos=new LatLng(Double.parseDouble(fatherEvents[0].getLatitude()),Double.parseDouble(fatherEvents[0].getLongitude()));drawLine(curPosition,fatherPos,width,lineColor,settings.getFamilyTreeLines());}Person mother=null;if(curPerson.getMother()!=null){mother=familyInfo.getPersonFromID(curPerson.getMother());}Event[] motherEvents=null;if(mother!=null){motherEvents=familyInfo.getEventsOfPerson(mother.getPersonID());}if(motherEvents!=null&&motherEvents[0]!=null){LatLng motherPos=new LatLng(Double.parseDouble(motherEvents[0].getLatitude()),Double.parseDouble(motherEvents[0].getLongitude()));drawLine(curPosition,motherPos,width,lineColor,settings.getFamilyTreeLines());}int nextWidth=(width/2>0)?(width/2):1;if(father!=null&&fatherEvents!=null&&fatherEvents[0]!=null){familyTreeRecurse(father,fatherEvents[0],nextWidth);}if(mother!=null&&motherEvents!=null&&motherEvents[0]!=null){familyTreeRecurse(mother,motherEvents[0],nextWidth);}}"
2690	"@Override public void writeContentData(ReadWriteParameterMap parameters,JPhyloIOEventReceiver receiver,String id) throws IOException,IllegalArgumentException{checkTokenSetID(id);IntegerIDManager idManager=new IntegerIDManager();T defaultGapToken=tokenSet.getGapToken();if(defaultGapToken!=null){writeSingleTokenDefinitionEvent(receiver,idManager,defaultGapToken);}T defaultMissingToken=tokenSet.getMissingInformationToken();if(defaultMissingToken!=null){writeSingleTokenDefinitionEvent(receiver,idManager,defaultMissingToken);}for(T token : tokenSet){if(!token.equals(defaultGapToken)&&!token.equals(defaultMissingToken)){writeSingleTokenDefinitionEvent(receiver,idManager,token);}}receiver.add(new CharacterSetIntervalEvent(start,end));}"
2691	"public static SparseArray<EventsUsers> get(AppClass app,ApiService apiService,List<Events> events) throws IOException{if(app==null||app.me==null){return null;}String eventsId;if(android.os.Build.VERSION.SDK_INT>=android.os.Build.VERSION_CODES.N){StringJoiner join=new StringJoiner("","");for(Events e : events){join.add(String.valueOf(e.id));}eventsId=join.toString();}else {StringBuilder builder=new StringBuilder();String join="""";for(Events e : events){builder.append(join).append(String.valueOf(e.id));join="","";}eventsId=builder.toString();}Call<List<EventsUsers>> callEventsUsers=apiService.getEventsUsers(app.me.id,eventsId);Response<List<EventsUsers>> responseEventsUsers=callEventsUsers.execute();if(!responseEventsUsers.isSuccessful()){return null;}SparseArray<EventsUsers> list=new SparseArray<>();for(EventsUsers u : responseEventsUsers.body()){list.put(u.eventId,u);}return list;}"
2692	"@Override public void update(){shiftAllUp();boolean trigger=false;if(!isRunning()){markDirty();return ;}this.spawnParticlesAbove();ItemStack stack=getStackInSlot(0);if(stack==null){timer=TIMER_FULL;}else {timer-=buildSpeed;if(timer<=0){timer=TIMER_FULL;trigger=true;}}if(trigger){Block stuff=Block.getBlockFromItem(stack.getItem());if(stuff!=null){if(UtilPlaceBlocks.placeStateSafe(getWorld(),null,pos.offset(this.getCurrentFacing()),UtilItemStack.getStateFromMeta(stuff,stack.getMetadata()))){if(getWorld().isRemote==false){this.decrStackSize(0,1);}}}}this.markDirty();}"
2693	"public boolean isMediaPlaying(){return (mPlayer!=null&&mState==PlaybackStateCompat.STATE_PLAYING)?true:false;}"
2694	"@Override protected void onSetUpView(){EMVoiceMessageBody voiceBody=(EMVoiceMessageBody)message.getBody();int len=voiceBody.getLength();if(len>0){voiceLengthView.setText(voiceBody.getLength()+""\"""");voiceLengthView.setVisibility(View.VISIBLE);}else {voiceLengthView.setVisibility(View.INVISIBLE);}if(message.direct()==EMMessage.Direct.RECEIVE){voiceImageView.setImageResource(R.drawable.ease_chatfrom_voice_playing);}else {voiceImageView.setImageResource(R.drawable.ease_chatto_voice_playing);}if(message.direct()==EMMessage.Direct.RECEIVE){if(message.isListened()){readStatusView.setVisibility(View.INVISIBLE);}else {readStatusView.setVisibility(View.VISIBLE);}EMLog.d(TAG,""it is receive msg"");if(EMClient.getInstance().getOptions().getAutodownloadThumbnail()){if(voiceBody.downloadStatus()==EMFileMessageBody.EMDownloadStatus.DOWNLOADING||voiceBody.downloadStatus()==EMFileMessageBody.EMDownloadStatus.PENDING){progressBar.setVisibility(View.VISIBLE);}else {progressBar.setVisibility(View.INVISIBLE);}}else {if(voiceBody.downloadStatus()==EMFileMessageBody.EMDownloadStatus.DOWNLOADING||voiceBody.downloadStatus()==EMFileMessageBody.EMDownloadStatus.PENDING){progressBar.setVisibility(View.INVISIBLE);}else {progressBar.setVisibility(View.INVISIBLE);}}EaseChatRowVoicePlayer voicePlayer=EaseChatRowVoicePlayer.getInstance(getContext());if(voicePlayer.isPlaying()&&message.getMsgId().equals(voicePlayer.getCurrentPlayingId())){startVoicePlayAnimation();}}}"
2695	"@SuppressWarnings({""rawtypes"",""unchecked""}) @Override public void process(StreamingInput<Tuple> stream,Tuple tuple) throws Exception{if(crContext!=null&&isResetting){logger.debug(""Operator is in the middle of resetting...skipping tuple processing!"");return ;}List<String> topicList=(this.topics!=null&&!this.topics.isEmpty())?this.topics:Arrays.asList(tuple.getString(topicAttrName));Object key=hasKeyAttr?toJavaPrimitveObject(keyType,tuple.getObject(keyAttrName)):null;Object value=toJavaPrimitveObject(messageType,tuple.getObject(messageAttrName));for(String topic : topicList){producer.processTuple(new ProducerRecord(topic,key,value));}}"
2696	"public void error(String message,Throwable error){if(error instanceof AuthorizationDeniedException){UserLogin.getInstance().showSuggestLoginDialog();}else {if(CURRENT_LOG_LEVEL<=ERROR){AsyncCallback<Void> errorcallback=new AsyncCallback<Void>(){  public void onFailure(  Throwable caught){    logger.log(Level.SEVERE,message,error);    logger.log(Level.SEVERE,""Error while logging another error"",caught);  }  public void onSuccess(  Void result){    logger.log(Level.SEVERE,message,error);  }};String errorDetails=extractErrorDetails(error);ClientLoggerService.Util.getInstance().error(classname,message+"", error: ""+errorDetails,errorcallback);if(SHOW_ERROR_MESSAGES&&error!=null){Toast.showError(message,error.getMessage()+(error.getCause()!=null?""\nCause: ""+error.getCause().getMessage():""""));}}}}"
2697	"@Override public void onSuccess(int statusCode,Header[] headers,JSONObject response){try{if(null!=response.getJSONArray(""fullInteractionTypeGroup"")){JSONArray fullInteractionType=response.getJSONArray(""fullInteractionTypeGroup"").getJSONObject(0).getJSONArray(""fullInteractionType"");for(int i=0;i<fullInteractionType.length();i++){JSONArray minConcept=fullInteractionType.getJSONObject(i).getJSONArray(""minConcept"");Medicine medicine1=new Medicine();medicine1.setRxcui(minConcept.getJSONObject(0).getString(""rxcui""));medicine1.setName(minConcept.getJSONObject(0).getString(""name""));Medicine medicine2=new Medicine();medicine2.setRxcui(minConcept.getJSONObject(1).getString(""rxcui""));medicine2.setName(minConcept.getJSONObject(1).getString(""name""));JSONArray interactionPair=fullInteractionType.getJSONObject(i).getJSONArray(""interactionPair"");JSONObject sourceConceptItem=interactionPair.getJSONObject(0).getJSONArray(""interactionConcept"").getJSONObject(0).getJSONObject(""sourceConceptItem"");String externalUrl=sourceConceptItem.getString(""url"");ConflictingMedicine pair=new ConflictingMedicine();pair.setMedicine1(medicine1);pair.setMedicine2(medicine2);pair.setExternalUrl(externalUrl);conflictingMedicines.add(pair);}conflictingMedicineAdapter=new ConflictingMedicineAdapter(getActivity(),conflictingMedicines);listViewConflictingMedicines.setAdapter(conflictingMedicineAdapter);Utility.setListViewHeightBasedOnChildren(listViewConflictingMedicines);}}catch(JSONException e){Toast.makeText(getContext(),""Error Occured [Server's JSON response might be invalid]!"",Toast.LENGTH_SHORT).show();Log.e(""Error Message: "",e.getMessage());}}"
2698	"public void askForRemoval(){this.needsClosing=true;}"
2699	"private void moveContentBreaks(int numOfBreaks,BreakIterator breakIterator,boolean followingNotPreceding){if(area.getLength()==0){return ;}breakIterator.setText(area.getText());if(followingNotPreceding){breakIterator.following(getPosition());}else {breakIterator.preceding(getPosition());}for(int i=1;i<numOfBreaks;i++){breakIterator.next();}moveTo(breakIterator.current());}"
2700	"public static boolean isConvertible(PropertyType fromType,PropertyType toType){if(fromType==toType){return true;}if(fromType==PropertyType.Raw){return false;}switch (fromType){case Int :{return false;}case Array :{return false;}case SQF :{return toType==PropertyType.String;}case Color :{return false;}case Float :{return false;}case Sound :{return false;}case ControlStyle :{return false;}case Texture :{return toType==PropertyType.String;}case String :{return toType==PropertyType.Texture||toType==PropertyType.FileName||toType==PropertyType.Image||toType==PropertyType.Font||toType==PropertyType.SQF;}case FileName :{return toType==PropertyType.String||toType==PropertyType.Image;}case Image :{return toType==PropertyType.String||toType==PropertyType.FileName;}case Font :{return toType==PropertyType.String;}case Boolean :{return false;}}return false;}"
2701	"@Override public void paint(Graphics g){super.paint(g);if(editor.isPaintable()&&editor.supportsCustomEditor()){Rectangle box=new Rectangle(0,0,getSize().width,getSize().height);editor.paintValue(g,box);return ;}else {if(editor.getAsText()!=null){String value=editor.getAsText();FontMetrics metrics=g.getFontMetrics(g.getFont());int x=(getSize().width-metrics.stringWidth(value))/2;int y=((getSize().height-metrics.getHeight())/2)+metrics.getAscent();g.drawString(value,x,y);return ;}}g.drawString(""Unable to print value!"",0,22);}"
2702	"public void delete(Nodo z){Nodo y=z,x;boolean yCorOriginal=y.cor;if(z.esq==null){x=z.dir;transplant(z,z.dir);}else {if(z.dir==null){x=z.esq;transplant(z,z.esq);}else {y=z.dir.minimo();yCorOriginal=y.cor;x=y.dir;if(y.pai==z){x.pai=y;}else {transplant(y,y.dir);y.dir=z.dir;y.dir.pai=y;}transplant(z,y);y.esq=z.esq;y.esq.pai=y;y.cor=z.cor;}}if(yCorOriginal==false){delFix(x);}}"
2703	"@Override public void storeSettings(){prefs.putBoolean(JabRefPreferences.NAMES_AS_IS,namesAsIs.isSelected());prefs.putBoolean(JabRefPreferences.NAMES_FIRST_LAST,namesFf.isSelected());prefs.putBoolean(JabRefPreferences.NAMES_NATBIB,namesNatbib.isSelected());prefs.putBoolean(JabRefPreferences.NAMES_LAST_ONLY,lastNamesOnly.isSelected());prefs.putBoolean(JabRefPreferences.ABBR_AUTHOR_NAMES,abbrNames.isSelected());prefs.putInt(JabRefPreferences.AUTO_RESIZE_MODE,autoResizeMode.isSelected()?JTable.AUTO_RESIZE_ALL_COLUMNS:JTable.AUTO_RESIZE_OFF);prefs.putBoolean(JabRefPreferences.TABLE_PRIMARY_SORT_DESCENDING,priDesc.isSelected());prefs.putBoolean(JabRefPreferences.TABLE_SECONDARY_SORT_DESCENDING,secDesc.isSelected());prefs.putBoolean(JabRefPreferences.TABLE_TERTIARY_SORT_DESCENDING,terDesc.isSelected());prefs.put(JabRefPreferences.TABLE_PRIMARY_SORT_FIELD,priField.getText().toLowerCase().trim());prefs.put(JabRefPreferences.TABLE_SECONDARY_SORT_FIELD,secField.getText().toLowerCase().trim());prefs.put(JabRefPreferences.TABLE_TERTIARY_SORT_FIELD,terField.getText().toLowerCase().trim());prefs.putBoolean(JabRefPreferences.FLOAT_MARKED_ENTRIES,floatMarked.isSelected());String oldVal=prefs.get(JabRefPreferences.NUMERIC_FIELDS);String newVal=numericFields.getText().trim();if(newVal.isEmpty()){newVal=null;}if(newVal!=null&&oldVal==null||newVal==null&&oldVal!=null||newVal!=null&&!newVal.equals(oldVal)){prefs.put(JabRefPreferences.NUMERIC_FIELDS,newVal);BibtexFields.setNumericFieldsFromPrefs();}}"
2704	"public boolean triggersAction(Actor actor,Plan current,Target subject){if(current instanceof Combat){return false;}if(actor.traits.hasTrait(asCondition)){return false;}return actor.senses.underAttack();}"
2705	"public static Character checkClassNameIfValid(String iName){if(iName==null){throw new IllegalArgumentException(""Name is null"");}iName=iName.trim(); final int nameSize=iName.length();if(nameSize==0){throw new IllegalArgumentException(""Name is empty"");}for(int i=0;i<nameSize;++i){ final char c=iName.charAt(i);if(c==':'||c==','||c==';'||c==' '||c=='%'||c=='@'){return c;}}return null;}"
2706	"public Throwable call(){try{for(CascadeJob predecessor : predecessors){if(!predecessor.isSuccessful()){return null;}}if(stop){return null;}try{if(LOG.isInfoEnabled()){logInfo(""starting flow: ""+flow.getName());}if(flowSkipStrategy==null?flow.isSkipFlow():flowSkipStrategy.skipFlow(flow)){if(LOG.isInfoEnabled()){logInfo(""skipping flow: ""+flow.getName());}flow.getFlowStats().markSkipped();return null;}flow.prepare();flow.complete();if(LOG.isInfoEnabled()){logInfo(""completed flow: ""+flow.getName());}}catch(Throwable exception){logWarn(""flow failed: ""+flow.getName(),exception);failed=true;return new CascadeException(""flow failed: ""+flow.getName(),exception);}finally{flow.cleanup();}}catch(Throwable throwable){failed=true;return throwable;}finally{latch.countDown();}return null;}"
2707	"public static void main(String[] args) throws CloneNotSupportedException,SQLException,ClassNotFoundException,DAOException,IOException,CustomException{if(GeneralDAO.getRooms().size()<2){TransactionStatus.setStatusMessage(""There must be atleast 2 rooms !"");throw new CustomException("""");}TimeTable TT=new TimeTable();Set<Integer> set=new HashSet<>();for(int h=0;h<TT.getSlot().length;h++){System.out.println(""**************************SLOT NO:""+(h+1)+""****************************"");TimeInterval time1=new TimeInterval(1);TimeInterval time2=new TimeInterval(2);int flag=0;TimeInterval[] array={time1,time2};int p=0;Slot slot=TT.getSlot()[h];if(h!=0){for(Course course : slot.getCourses()){if(set.contains(Integer.parseInt(course.getBatch()))){course.setFlag_clash(1);}}}set.removeAll(set);int k=0;buffer=new ArrayList<>();while(slot.slotProcessed()){Course tempCourse=slot.chosingCourse();buffer.add(new Course(tempCourse));Collections.sort(buffer,new CourseComparatorByCapacity());TimeInterval[] array2=null;buffer_copy=new ArrayList<>();Utility1 utility=null;if(h!=0){for(Course course : buffer){utility=TT.dynamicAllot(array2,course,slot,TT,0,0);k=utility.k;array2=utility.array;slot=utility.slot;buffer_copy.add(utility.course);}}if(h==0||!TT.courseIntact(array,array2)){if(h!=0&&!TT.courseIntact(array,array2)){k=0;}Utility1 utility2=TT.dynamicAllot(array,tempCourse,slot,TT,k,1);k=utility2.k;array=utility2.array;slot=utility2.slot;for(int n=0;n<slot.getCourses().size();n++){Course course2=slot.getCourses().get(n);if(course2.getCourse_id().equals(utility2.course.getCourse_id())){slot.getCourses().set(n,utility2.course);}}}else {array=array2;for(int n=0;n<slot.getCourses().size();n++){Course course2=slot.getCourses().get(n);for(Course course3 : buffer_copy){if(course2.getCourse_id().equals(course3.getCourse_id())){slot.getCourses().set(n,course3);}}}}slot.updateProcessCount();}array[0].print();array[1].print();TT.getStore().put(h+1,new StoreTT(h+1,array[0],array[1]));if(!array[1].getMap().isEmpty()){for(ArrayList<OccupationData> od : array[1].getMap().values()){for(int hh=0;hh<od.size();hh++){set.add(Integer.parseInt(od.get(hh).getCourse().getBatch()));}}}}PrintExcel excel=new PrintExcel();failedCourses=TT.getFailed();excel.createExcelSheet(TT);}"
2708	"public static UserInfo getUserInfo(){return GlobalApplication.getUserInfo()!=null?GlobalApplication.getUserInfo():new UserInfo();}"
2709	"public void runOpMode() throws InterruptedException{this.customInit();waitForStart();while(opModeIsActive()){Gamepad currentCommands=this.getCommands();this.handleReccording(currentCommands);if(currentCommands.y){this.isPrecisionSpeed=!this.isPrecisionSpeed;}boolean doTurn=this.eXOR(currentCommands.left_bumper,currentCommands.right_bumper);if(doTurn){if(currentCommands.right_bumper){double[] clockActivations={1.0,1.0,-1.0,-1.0};this.activateMotors(clockActivations,this.isPrecisionSpeed);}else {double[] cntrClockActivations={-1.0,-1.0,1.0,1.0};this.activateMotors(cntrClockActivations,this.isPrecisionSpeed);}}double stick_x=this.invertControlsXY[0]?-currentCommands.left_stick_x:currentCommands.left_stick_x;double stick_y=this.invertControlsXY[1]?-currentCommands.left_stick_y:currentCommands.left_stick_y;double[] horozontalActivations={-stick_x,stick_x,stick_x,-stick_x};double[] verticalActivations={-stick_y,-stick_y,-stick_y,-stick_y};boolean doForRev=this.isAboveThreshold(stick_y)&&!this.isAboveThreshold(stick_x);if(doForRev){this.activateMotors(verticalActivations,this.isPrecisionSpeed);}boolean doHorz=this.isAboveThreshold(stick_x)&&!this.isAboveThreshold(stick_y);if(doHorz){this.activateMotors(horozontalActivations,this.isPrecisionSpeed);}boolean doDiagonal=this.isAboveThreshold(stick_x)&&this.isAboveThreshold(stick_y);boolean diagonalOne=doDiagonal&&(0<(stick_x*stick_y));boolean diagonalTwo=doDiagonal&&(0>(stick_x*stick_y));double normalizedU=sqrt(pow(0.7071*stick_x,2.0)+pow(0.7071*stick_y,2.0))*(stick_y/abs(stick_y));double[] diagonalTopRightBackLeft={0,normalizedU,normalizedU,0};double[] diagonalTopLeftBackRight={normalizedU,0,0,normalizedU};if(diagonalOne){this.activateMotors(diagonalTopLeftBackRight,this.isPrecisionSpeed);}if(diagonalTwo){this.activateMotors(diagonalTopLeftBackRight,this.isPrecisionSpeed);}boolean[] willRunSequenceForOtherCommands={doForRev,doHorz,doTurn,diagonalOne,diagonalTwo};double[] stopActivations={0,0,0,0};if(this.allFalse(willRunSequenceForOtherCommands)){this.activateMotors(stopActivations,this.isPrecisionSpeed);}idle();}}"
2710	"public TaskSummary(TaskResourceRep task){id=task.getId();opId=task.getOpId();if(StringUtils.isBlank(task.getDescription())){description=WordUtils.capitalize(task.getName().toLowerCase()+"" ""+task.getResource().getName());}else {description=task.getDescription();}message=task.getMessage();name=task.getName();state=task.getState();progress=task.getProgress()==null?0:task.getProgress();startDate=task.getStartTime()==null?0:task.getStartTime().getTimeInMillis();endDate=task.getEndTime()==null?0:task.getEndTime().getTimeInMillis();systemTask=task.getTenant()==null;resourceType=task.getResource()==null?"""":URIUtil.getTypeName(task.getResource().getId());resourceName=task.getResource().getName();resourceId=task.getResource().getId().toString();isComplete=!task.getState().equals(""pending"");if(endDate==0){elapsedTime=new Date().getTime()-startDate;}else {elapsedTime=endDate-startDate;}if(Security.isSecurityAdmin()||Security.isSystemMonitor()){if(task.getWorkflow()!=null){workflowId=task.getWorkflow().getId().toString();}}if(task.getServiceError()!=null){serviceCode_error=task.getServiceError().getCode()+"""";serviceCode_errorDesc=task.getServiceError().getCodeDescription();serviceCode_message=task.getServiceError().getDetailedMessage();}if(task.getState().equals(""error"")){progress=100;isError=true;}}"
2711	"void populateArrays(){int total=tableViewer.getTable().getItemCount();for(int i=0;i<total;i++){Boolean checked=tableViewer.getTable().getItem(i).getChecked();Boolean mandatory;if(checked){String temp=comboItems[i].getText();if(temp==""Yes""){mandatory=true;}else {mandatory=false;}nameList.add(tableViewer.getTable().getItem(i).getText());importantList.add(mandatory);}}}"
2712	"@Override protected void drawGuiContainerBackgroundLayer(float partialTick,int mouseX,int mouseY){mc.renderEngine.bindTexture(guiLocation);GL11.glColor4f(1.0,1.0,1.0,1.0);int guiWidth=(width-xSize)/2;int guiHeight=(height-ySize)/2;drawTexturedModalRect(guiWidth,guiHeight,0,0,xSize,ySize);int xAxis=mouseX-guiWidth;int yAxis=mouseY-guiHeight;if(!tileEntity.autoMode){if(xAxis>=44&&xAxis<=60&&yAxis>=75&&yAxis<=91){drawTexturedModalRect(guiWidth+44,guiHeight+75,176+62,0,16,16);}else {drawTexturedModalRect(guiWidth+44,guiHeight+75,176+62,16,16,16);}}else {drawTexturedModalRect(guiWidth+44,guiHeight+75,176+62,32,16,16);}if(!tileEntity.autoMode&&tileEntity.isRecipe){if(canEncode()){if(xAxis>=7&&xAxis<=21&&yAxis>=45&&yAxis<=59){drawTexturedModalRect(guiWidth+7,guiHeight+45,176,0,14,14);}else {drawTexturedModalRect(guiWidth+7,guiHeight+45,176,14,14,14);}}else {drawTexturedModalRect(guiWidth+7,guiHeight+45,176,28,14,14);}if(xAxis>=71&&xAxis<=87&&yAxis>=75&&yAxis<=91){drawTexturedModalRect(guiWidth+71,guiHeight+75,176+14,0,16,16);}else {drawTexturedModalRect(guiWidth+71,guiHeight+75,176+14,16,16,16);}if(xAxis>=89&&xAxis<=105&&yAxis>=75&&yAxis<=91){drawTexturedModalRect(guiWidth+89,guiHeight+75,176+30,0,16,16);}else {drawTexturedModalRect(guiWidth+89,guiHeight+75,176+30,16,16,16);}}else {drawTexturedModalRect(guiWidth+7,guiHeight+45,176,28,14,14);drawTexturedModalRect(guiWidth+71,guiHeight+75,176+14,32,16,16);drawTexturedModalRect(guiWidth+89,guiHeight+75,176+30,32,16,16);}if(tileEntity.formula!=null){if(xAxis>=107&&xAxis<=123&&yAxis>=75&&yAxis<=91){drawTexturedModalRect(guiWidth+107,guiHeight+75,176+46,0,16,16);}else {drawTexturedModalRect(guiWidth+107,guiHeight+75,176+46,16,16,16);}}else {drawTexturedModalRect(guiWidth+107,guiHeight+75,176+46,32,16,16);}if(tileEntity.operatingTicks>0){int display=(int)((double)tileEntity.operatingTicks*22/(double)tileEntity.ticksRequired);drawTexturedModalRect(guiWidth+86,guiHeight+43,176,48,display,16);}mc.renderEngine.bindTexture(MekanismUtils.getResource(ResourceType.GUI_ELEMENT,""GuiSlot.png""));drawTexturedModalRect(guiWidth+90,guiHeight+25,tileEntity.isRecipe?2:20,39,14,12);if(tileEntity.formula!=null){for(int i=0;i<9;i++){ItemStack stack=tileEntity.formula.input.get(i);if(stack!=null){Slot slot=(Slot)inventorySlots.inventorySlots.get(i+20);GlStateManager.pushMatrix();if(slot.getStack()==null||!slot.getStack().isItemEqual(stack)){drawGradientRect(guiWidth+slot.xPos,guiHeight+slot.yPos,guiWidth+slot.xPos+16,guiHeight+slot.yPos+16,-2137456640,-2137456640);}RenderHelper.enableGUIStandardItemLighting();itemRender.renderItemAndEffectIntoGUI(stack,guiWidth+slot.xPos,guiHeight+slot.yPos);MekanismRenderer.resetColor();GlStateManager.popMatrix();}}}super.drawGuiContainerBackgroundLayer(partialTick,mouseX,mouseY);}"
2713	"@Override protected boolean isValidResourceDelta(IResourceDelta delta){VisitResourceHelper visitHelper=new VisitResourceHelper(delta);boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();Set<RepositoryNode> topLevelNodes=getTopNodes();for(RepositoryNode repoNode : topLevelNodes){IPath topLevelNodeWorkspaceRelativePath=null;if((repoNode.getContentType()==ERepositoryObjectType.METADATA_CONNECTIONS)||(repoNode.getContentType()==HadoopClusterRepositoryNodeType.HADOOPCLUSTER)){IProjectRepositoryNode root=repoNode.getRoot();if(root!=null){String projectName=root.getProject().getTechnicalLabel();topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/'+projectName).append(repoNode.getContentType().getFolder());}topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);}if(topLevelNodeWorkspaceRelativePath!=null&&visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)){return true;}}return false;}"
2714	"protected void annotateLoadedFiles(URI outdirUri,List<URI> files,List<StoragePipelineResult> results,ObjectMap options) throws StoragePipelineException{if(!files.isEmpty()&&options.getBoolean(Options.ANNOTATE.key(),Options.ANNOTATE.defaultValue())){try{VariantDBAdaptor dbAdaptor=getDBAdaptor();int studyId=options.getInt(Options.STUDY_ID.key());StudyConfiguration studyConfiguration=dbAdaptor.getStudyConfigurationManager().getStudyConfiguration(studyId,new QueryOptions(options)).first();List<Integer> fileIds=new ArrayList<>();for(URI uri : files){String fileName=VariantReaderUtils.getOriginalFromTransformedFile(uri);fileIds.add(studyConfiguration.getFileIds().get(fileName));}Query annotationQuery=new Query();if(!options.getBoolean(VariantAnnotationManager.OVERWRITE_ANNOTATIONS,false)){annotationQuery.put(VariantQueryParam.ANNOTATION_EXISTS.key(),false);}annotationQuery.put(VariantQueryParam.STUDY.key(),Collections.singletonList(studyId));annotationQuery.put(VariantQueryParam.FILE.key(),fileIds);QueryOptions annotationOptions=new QueryOptions().append(DefaultVariantAnnotationManager.OUT_DIR,outdirUri.getPath()).append(DefaultVariantAnnotationManager.FILE_NAME,dbName+"".""+TimeUtils.getTime());annotate(annotationQuery,annotationOptions);}catch(RuntimeException|StorageEngineException|VariantAnnotatorException|IOException e){throw new StoragePipelineException(""Error annotating."",e,results);}}}"
2715	"public static Array<Vector2[]> mergeTouchingPolygons(Vector2[][] polys){Set<Edge> uniqueEdges=new HashSet<Edge>();Set<Edge> duplicateEdges=new HashSet<Edge>();for(int i=0;i<polys.length;i++){for(int j=0;j<polys[i].length;j++){Edge edge=null;if(j<polys[i].length-1){edge=new Edge(polys[i][j].x,polys[i][j].y,polys[i][j+1].x,polys[i][j+1].y);}else {if(j==polys[i].length-1){edge=new Edge(polys[i][j].x,polys[i][j].y,polys[i][0].x,polys[i][0].y);}}if(uniqueEdges.contains(edge)){duplicateEdges.add(edge);}else {uniqueEdges.add(edge);}}}uniqueEdges.removeAll(duplicateEdges);Array<Vector2[]> result=new Array<Vector2[]>();while(uniqueEdges.size()>0){Vector2[] mesh=extractClosedLoop(uniqueEdges);mesh=clearUnnecessaryVertices(mesh);result.add(mesh);}return result;}"
2716	"public static PieChart makeChart(Context context,double[] dataValues,String[] legendValues,double maxValue){List<PieEntry> entries=new ArrayList<>();int cnt;float fMaxValue=Float.parseFloat(Double.valueOf(maxValue).toString());for(cnt=0;cnt<dataValues.length;cnt++){float value=Float.parseFloat(Double.valueOf(dataValues[cnt]).toString());if(value<=(fMaxValue*0.01)){continue;}entries.add(new PieEntry(value,legendValues[cnt]));}int[] barColorValues=new int[cnt];for(int i=0;i<cnt;i++){barColorValues[i]=WidgetItem.predefinedColors[i%9];}PieDataSet dataSet=new PieDataSet(entries,"""");dataSet.setSliceSpace(3);dataSet.setColors(barColorValues);dataSet.setValueTextSize(18.0);PieData data=new PieData(dataSet);PieChart chart=new PieChart(context);Legend l=chart.getLegend();l.setWordWrapEnabled(true);l.setForm(Legend.LegendForm.CIRCLE);chart.setUsePercentValues(true);chart.setHoleRadius(40.0);chart.setData(data);chart.invalidate();return chart;}"
2717	"private void validateContainer(List<InMemoryDocument> documents){documents.removeIf(d -> d.getName().equals(META_INF_FOLDER));long dataFileCount=documents.stream().filter(d -> !d.getName().startsWith(META_INF_FOLDER)).filter(d -> !d.getName().endsWith(MIME_TYPE)).count();long timeStampCount=documents.stream().filter(d -> d.getName().startsWith(META_INF_FOLDER)).filter(d -> d.getName().toUpperCase().endsWith(TIMESTAMP_FILE)).count();if(dataFileCount!=1||timeStampCount!=1){throw new DocumentRequirementsException();}}"
2718	"public void insertFATDMAAllocations(FATDMAChannel f,int stationID,int channelType) throws Exception{if(f==null){return ;}System.out.println(""Inserting FATDMA Allocations"");if(this.conn==null){this.conn=getDBConnection(null,false);}try{if(f.getDBID()<=0){PreparedStatement fp=conn.prepareStatement(""select max(id) from FATDMACHANNEL"");ResultSet rs=fp.executeQuery();if(rs.next()){int id=rs.getInt(1)+1;f.setDBID(id);}else {f.setDBID(1);}fp=conn.prepareStatement(""insert into FATDMACHANNEL values (?,?,?,?)"");fp.setInt(1,f.getDBID());fp.setInt(2,stationID);fp.setString(3,f.getChannelName());fp.setInt(4,channelType);fp.executeUpdate();rs.close();fp.close();}if(f instanceof AISAtonStationFATDMAChannel){AISAtonStationFATDMAChannel aton=(AISAtonStationFATDMAChannel)f;PreparedStatement p=conn.prepareStatement(""select max(id) from FATDMAATON"");ResultSet rs=p.executeQuery();int maxID=0;if(rs.next()){maxID=rs.getInt(1);}rs.close();p.close();for(AtonMessageBroadcastRate r : aton.getAtonMessageBroadcastList()){if(r.getDbID()==null||r.getDbID().intValue()<=0){maxID+=1;r.setDbID(new Integer(maxID));this.insertAtonMessageBroadcastRate(r,f.getDBID());}else {this.updateAtonMessageBroadcastRate(r);}}}else {AISBaseAndReceiverStationFATDMAChannel base=(AISBaseAndReceiverStationFATDMAChannel)f;PreparedStatement p=conn.prepareStatement(""select max(id) from FATDMABASE"");ResultSet rs=p.executeQuery();int maxID=0;if(rs.next()){maxID=rs.getInt(1);}rs.close();p.close();for(FATDMAReservation r : base.getFATDMAScheme()){if(r.getDbID()==null||r.getDbID().intValue()<=0){maxID+=1;r.setDbID(new Integer(maxID));this.insertFATDMAReservation(r,f.getDBID());}else {this.updateFATDMAReservation(r);}}}}catch(Exception e){e.printStackTrace();}}"
2719	"@Override protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory){super.customizeBeanFactory(beanFactory);if(parentBeanFactory!=null){this.prepareBeanFactory(parentBeanFactory,beanFactory);}}"
2720	"public BigNum add(BigNum augend){if(augend.isZero()){return this;}if(this.isZero()){return augend;}if(this.signed==augend.signed){int scaleS=this.scale;if(augend.scale>scaleS){scaleS=augend.scale;}int decS=this.length-this.scale-1;if((augend.length-augend.scale-1)>decS){decS=augend.length-augend.scale;}int lengthS=2+scaleS+decS;byte[] dataS=new byte[lengthS];System.out.println(""scaleS=""+scaleS+"",decS=""+decS+"",lengthS=""+lengthS);long a=0;for(int idx=decS;idx>0;idx--){System.out.println(""a1=""+a);if((this.scale+idx)<=this.length){System.out.println(""a=""+this.datas[this.scale+idx]);a=a+this.datas[this.scale+idx];}if((augend.scale+idx)<=augend.length){System.out.println(""a=""+augend.datas[augend.scale+idx]);a=a+augend.datas[augend.scale+idx];}System.out.println(""a=""+a);dataS[1+scaleS+idx]=(byte)(0xff&(a%10));a=a/10;}for(int idx=0;idx<=scaleS;idx++){System.out.println(""a2=""+a);if((this.scale-idx)>=0){a=a+this.datas[this.scale-idx];System.out.println(""a=""+this.datas[this.scale-idx]);}if((augend.scale-idx)>=0){System.out.println(""a=""+augend.datas[augend.scale-idx]);a=a+augend.datas[augend.scale-idx];}System.out.println(""a=""+a);dataS[1+scaleS-idx]=(byte)(0xff&(a%10));a=a/10;}System.out.println(""a3=""+a);dataS[0]=(byte)(0xff&a);return new BigNum(this.signed,dataS,lengthS,scaleS+1);}else {return this.subtract(new BigNum((byte)(0x00-augend.signed),augend.datas,augend.length,augend.scale));}}"
2721	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}PluggableSCMMaterialConfig that=(PluggableSCMMaterialConfig)o;if(folder!=null?!folder.equals(that.folder):that.folder!=null){return false;}if(scmConfig==null||that.scmConfig==null){return false;}return this.getFingerprint().equals(that.getFingerprint());}"
2722	"public void init(){closeBT();findBT();openBT();if(workerThread==null){workerThread=new Thread(this,""Bluetooth Listener"");}if(workerThread.isInterrupted()){workerThread.start();Log.d(""BT"",""thread start"");}}"
2723	"public void addEntity(int mx,int my){ final Media media=ProjectsModel.INSTANCE.getSelection();if(media!=null){ final Point tile=Tools.getMouseTile(map,camera,mx,my); final ObjectGame object=factory.create(media);if(object.hasTrait(Transformable.class)){setObjectLocation(object.getTrait(Transformable.class),tile.getX(),tile.getY(),1);}handlerObject.add(object);}}"
2724	"@POST @Timed @Path(""/deleteentry"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.TEXT_HTML) public Response deleteItem(String id,Cookie cookie) throws Exception{if(id==null||id.length()==0||SessionDAOConnector.instance().verifySessionCookie(cookie)==false){logger_.error(""ERROR: invalid delete books entry request for \'""+id+""\'"");return Response.serverError().build();}try{booksEntryDAOC.deleteByID(id);}catch(Exception e){e.printStackTrace();logger_.error(""Error : failed to delete new books entry \'""+id+""\' : ""+e.getMessage());return Response.serverError().build();}logger_.info(""Books entry \'""+id+""\' removed"");return Response.seeOther(URI.create(PATH_BOOKS)).build();}"
2725	"public boolean execute(){ final long currentTimestamp=CommonState.getTime(); final boolean removingElements=currentTimestamp>=this.REMOVING_START&&currentTimestamp<=this.REMOVING_END; final boolean addingElements=currentTimestamp>=this.ADDING_START&&currentTimestamp<=this.ADDING_END;if(removingElements){for(int i=0;i<this.REMOVING_COUNT&&DynamicNetwork.graph.size()>0;i++){ final int pos=CommonState.r.nextInt(DynamicNetwork.graph.size()); final Node rem=DynamicNetwork.graph.get(pos);DynamicNetwork.removeNode(rem);ARandomPeerSamplingProtocol d=(ARandomPeerSamplingProtocol)rem.getProtocol(pid);if(d.isUp()){d.leave();}DynamicNetwork.graph.remove(pos);DynamicNetwork.availableNodes.push(rem);}}if(addingElements){if(this.IS_PERCENTAGE){ final double log10=Math.floor(Math.log10(DynamicNetwork.graph.size())); final double dev10=Math.pow(10,log10);int count=Math.max(1,(int)dev10/this.ADDING_PERCENT);System.err.println(""QQ:""+graph.size()+"",""+log10+"",""+dev10+"",""+count);for(int i=0;i<count&&DynamicNetwork.availableNodes.size()>0;i++){insert();}}else {for(int i=0;i<this.ADDING_COUNT&&DynamicNetwork.availableNodes.size()>0;i++){insert();}}}return false;}"
2726	"protected static boolean isSupported(int formatSupport,boolean allowExceedsCapabilities){int maskedSupport=formatSupport&RendererCapabilities.FORMAT_SUPPORT_MASK;return maskedSupport==RendererCapabilities.FORMAT_HANDLED||(allowExceedsCapabilities&&maskedSupport==RendererCapabilities.FORMAT_EXCEEDS_CAPABILITIES);}"
2727	"private void stopRecording(){if(soundRecorder!=null){soundRecorder.stopRecording();isRecording=false;}}"
2728	"private void removeSuccesor(IStateRecord<T> state){INode<T> node=state.targetEdge.child;ISeekRecord<T> seekRecord=state.succesorRecord;IEdge<T> succesorEdge=seekRecord.lastEdge;int[] stamp=new int[1];INode<T> address=succesorEdge.child.child[IEdge.LEFT].get(stamp);if((!((stamp[0]&INode.PROMOTE_BIT)==INode.PROMOTE_BIT))||address!=node){node.readyToReplace=true;updateMode(state);return ;}markChildEdge(state,IEdge.RIGHT);node.mKey=new AtomicStampedReference<>(succesorEdge.child.mKey.getReference(),INode.REPLACEMENT);while(true){int dFlag;int which;if(succesorEdge.parent==node){dFlag=INode.DELETE_BIT;which=IEdge.RIGHT;}else {dFlag=0;which=IEdge.LEFT;}int stamp2=succesorEdge.parent.child[which].getStamp();int i=stamp2&INode.INJECT_BIT;int[] temp=new int[1];INode<T> right=succesorEdge.child.child[IEdge.RIGHT].get(temp);int n=temp[0]&INode.NULL_BIT;INode<T> oldRef=succesorEdge.child;int oldStamp=i|dFlag;INode<T> newRef;int newStamp;AtomicStampedReference<INode<T>> newValue;if(n==INode.NULL_BIT){newRef=succesorEdge.child;newStamp=INode.NULL_BIT|dFlag;}else {newRef=right;newStamp=dFlag;}boolean result=succesorEdge.parent.child[which].compareAndSet(oldRef,newRef,oldStamp,newStamp);if(result||dFlag==INode.DELETE_BIT){break;}int tempstamp=succesorEdge.parent.child[which].getStamp();int d=tempstamp&INode.DELETE_BIT;IEdge<T> pLastEdge=seekRecord.pLastEdge;if(d==INode.DELETE_BIT&&pLastEdge.parent!=null){helpTargetNode(pLastEdge);}result=findSmallest(state);IEdge<T> lastEdge=seekRecord.lastEdge;if(!result||lastEdge.child!=succesorEdge.child){break;}else {succesorEdge=seekRecord.lastEdge;}}node.readyToReplace=true;updateMode(state);}"
2729	"public void attackTargetEntityWithCurrentItem(EntityPlayer player,Entity targetEntity){if(!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(player,targetEntity)){return ;}if(targetEntity.canBeAttackedWithItem()){Random rand=new Random();if(!targetEntity.hitByEntity(player)){float attackDamage=(float)player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();attackDamage=((ItemSword)player.getHeldItemOffhand().getItem()).getDamageVsEntity()+4;float f1=0.0;if(targetEntity instanceof EntityLivingBase){f1=EnchantmentHelper.getModifierForCreature(player.getHeldItemOffhand(),((EntityLivingBase)targetEntity).getCreatureAttribute());}else {f1=EnchantmentHelper.getModifierForCreature(player.getHeldItemOffhand(),EnumCreatureAttribute.UNDEFINED);}float f2=MathHelper.clamp((float)(((float)20+0.5)/player.getCooldownPeriod()),0.0,1.0);attackDamage=attackDamage*(0.2+f2*f2*0.8);f1=f1*f2;player.resetCooldown();if(attackDamage>0.0||f1>0.0){boolean flag=f2>0.9;boolean flag1=false;boolean flag2=false;boolean flag3=false;int i=0;i=i+EnchantmentHelper.getKnockbackModifier(player);if(player.isSprinting()&&flag){player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_KNOCKBACK,player.getSoundCategory(),1.0,1.0);++i;flag1=true;}flag2=flag&&player.fallDistance>0.0&&!player.onGround&&!player.isOnLadder()&&!player.isInWater()&&!player.isPotionActive(MobEffects.BLINDNESS)&&!player.isRiding()&&targetEntity instanceof EntityLivingBase;flag2=flag2&&!player.isSprinting();if(flag2){attackDamage*=1.5;}attackDamage=attackDamage+f1;double d0=(double)(player.distanceWalkedModified-player.prevDistanceWalkedModified);if(flag&&!flag2&&!flag1&&player.onGround&&d0<(double)player.getAIMoveSpeed()){ItemStack itemstack=player.getHeldItem(EnumHand.OFF_HAND);if(itemstack!=null&&itemstack.getItem() instanceof ItemSword){flag3=true;}}float f4=0.0;boolean flag4=false;int j=EnchantmentHelper.getFireAspectModifier(player);if(targetEntity instanceof EntityLivingBase){f4=((EntityLivingBase)targetEntity).getHealth();if(j>0&&!targetEntity.isBurning()){flag4=true;targetEntity.setFire(1);}}if(player.getHeldItemOffhand()!=null){if(player.getHeldItemOffhand().getItem() instanceof ItemKeyblade){attackDamage=(float)(player.getCapability(ModCapabilities.PLAYER_STATS,null).getStrength()+((ItemKeyblade)player.getHeldItemOffhand().getItem()).getStrength());}}double d1=targetEntity.motionX;double d2=targetEntity.motionY;double d3=targetEntity.motionZ;boolean flag5=targetEntity.attackEntityFrom(DamageSource.causePlayerDamage(player),attackDamage);if(flag5){if(i>0){if(targetEntity instanceof EntityLivingBase){((EntityLivingBase)targetEntity).knockBack(player,(float)i*0.5,(double)MathHelper.sin(player.rotationYaw*0.017453292),(double)(-MathHelper.cos(player.rotationYaw*0.017453292)));}else {targetEntity.addVelocity((double)(-MathHelper.sin(player.rotationYaw*0.017453292)*(float)i*0.5),0.1,(double)(MathHelper.cos(player.rotationYaw*0.017453292)*(float)i*0.5));}player.motionX*=0.6;player.motionZ*=0.6;player.setSprinting(false);}if(flag3){for(EntityLivingBase entitylivingbase : player.world.getEntitiesWithinAABB(EntityLivingBase.class,targetEntity.getEntityBoundingBox().expand(1.0,0.25,1.0))){if(entitylivingbase!=player&&entitylivingbase!=targetEntity&&!player.isOnSameTeam(entitylivingbase)&&player.getDistanceSqToEntity(entitylivingbase)<9.0){entitylivingbase.knockBack(player,0.4,(double)MathHelper.sin(player.rotationYaw*0.017453292),(double)(-MathHelper.cos(player.rotationYaw*0.017453292)));entitylivingbase.attackEntityFrom(DamageSource.causePlayerDamage(player),attackDamage);}}player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_SWEEP,player.getSoundCategory(),1.0,1.0);player.spawnSweepParticles();}if(targetEntity instanceof EntityPlayerMP&&targetEntity.velocityChanged){((EntityPlayerMP)targetEntity).connection.sendPacket(new SPacketEntityVelocity(targetEntity));targetEntity.velocityChanged=false;targetEntity.motionX=d1;targetEntity.motionY=d2;targetEntity.motionZ=d3;}if(flag2){player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_CRIT,player.getSoundCategory(),1.0,1.0);player.onCriticalHit(targetEntity);}if(!flag2&&!flag3){if(flag){player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_STRONG,player.getSoundCategory(),1.0,1.0);}else {player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_WEAK,player.getSoundCategory(),1.0,1.0);}}if(f1>0.0){player.onEnchantmentCritical(targetEntity);}if(!player.world.isRemote&&targetEntity instanceof EntityPlayer){EntityPlayer entityplayer=(EntityPlayer)targetEntity;ItemStack itemstack2=player.getHeldItemOffhand();ItemStack itemstack3=entityplayer.isHandActive()?entityplayer.getActiveItemStack():null;if(itemstack2!=null&&itemstack3!=null&&itemstack2.getItem() instanceof ItemAxe&&itemstack3.getItem()==Items.SHIELD){float f3=0.25+(float)EnchantmentHelper.getEfficiencyModifier(player)*0.05;if(flag1){f3+=0.75;}if(rand.nextFloat()<f3){entityplayer.getCooldownTracker().setCooldown(Items.SHIELD,100);player.world.setEntityState(entityplayer,(byte)30);}}}player.setLastAttackedEntity(targetEntity);if(targetEntity instanceof EntityLivingBase){EnchantmentHelper.applyThornEnchantments((EntityLivingBase)targetEntity,player);}EnchantmentHelper.applyArthropodEnchantments(player,targetEntity);ItemStack itemstack1=player.getHeldItemOffhand();Entity entity=targetEntity;if(targetEntity instanceof EntityDragon){IEntityMultiPart ientitymultipart=((EntityDragon)targetEntity);if(ientitymultipart instanceof EntityLivingBase){entity=(EntityLivingBase)ientitymultipart;}}if(itemstack1!=ItemStack.EMPTY&&entity instanceof EntityLivingBase){itemstack1.hitEntity((EntityLivingBase)entity,player);if(itemstack1.getCount()<=0){player.setHeldItem(EnumHand.OFF_HAND,ItemStack.EMPTY);}}if(targetEntity instanceof EntityLivingBase){float f5=f4-((EntityLivingBase)targetEntity).getHealth();player.addStat(StatList.DAMAGE_DEALT,Math.round(f5*10.0));if(j>0){targetEntity.setFire(j*4);}if(player.world instanceof WorldServer&&f5>2.0){int k=(int)((double)f5*0.5);((WorldServer)player.world).spawnParticle(EnumParticleTypes.DAMAGE_INDICATOR,targetEntity.posX,targetEntity.posY+(double)(targetEntity.height*0.5),targetEntity.posZ,k,0.1,0.0,0.1,0.2,new int[0]);}}player.addExhaustion(0.3);}else {player.world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_PLAYER_ATTACK_NODAMAGE,player.getSoundCategory(),1.0,1.0);if(flag4){targetEntity.extinguish();}}}}}}"
2730	"public float getCargoFilledAmount(){float weight=1;for(ItemStack stack : this.cargoItems){if(stack!=null){weight+=0.1;}}return weight;}"
2731	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_vector_room);if(CommonActivityUtils.shouldRestartApp(this)){Log.e(LOG_TAG,""onCreate : Restart the application."");CommonActivityUtils.restartApp(this);return ;} final Intent intent=getIntent();if(!intent.hasExtra(EXTRA_ROOM_ID)){Log.e(LOG_TAG,""No room ID extra."");finish();return ;}mSession=MXCActionBarActivity.getSession(this,intent);if(mSession==null){Log.e(LOG_TAG,""No MXSession."");finish();return ;}String roomId=intent.getStringExtra(EXTRA_ROOM_ID);if(!intent.hasExtra(EXTRA_ROOM_PREVIEW_ID)){sRoomPreviewData=null;Matrix.getInstance(this).clearTmpStoresList();}if(CommonActivityUtils.isGoingToSplash(this,mSession.getMyUserId(),roomId)){Log.d(LOG_TAG,""onCreate : Going to splash screen"");return ;}mRoomHeaderView=(RelativeLayout)findViewById(R.id.action_bar_header);mActionBarHeaderRoomTopic=(TextView)findViewById(R.id.action_bar_header_room_topic);mActionBarHeaderRoomName=(TextView)findViewById(R.id.action_bar_header_room_title);mActionBarHeaderActiveMembersLayout=findViewById(R.id.action_bar_header_room_members_layout);mActionBarHeaderActiveMembersTextView=(TextView)findViewById(R.id.action_bar_header_room_members_text_view);mActionBarHeaderActiveMembersListButton=findViewById(R.id.action_bar_header_room_members_settings_view);mActionBarHeaderActiveMembersInviteButton=findViewById(R.id.action_bar_header_room_members_invite_view);mActionBarHeaderRoomAvatar=(ImageView)mRoomHeaderView.findViewById(R.id.avatar_img);mRoomPreviewLayout=findViewById(R.id.room_preview_info_layout);mVectorPendingCallView=(VectorPendingCallView)findViewById(R.id.room_pending_call_view);mVectorOngoingConferenceCallView=(VectorOngoingConferenceCallView)findViewById(R.id.room_ongoing_conference_call_view);mE2eImageView=(ImageView)findViewById(R.id.room_encrypted_image_view);findViewById(R.id.room_bottom_layout).setOnTouchListener(new View.OnTouchListener(){  @Override public boolean onTouch(  View view,  MotionEvent motionEvent){    enableActionBarHeader(HIDE_ACTION_BAR_HEADER);    return false;  }});mToolbar=(android.support.v7.widget.Toolbar)findViewById(R.id.room_toolbar);setSupportActionBar(mToolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);setActionBarDefaultCustomLayout();mCallId=intent.getStringExtra(EXTRA_START_CALL_ID);mEventId=intent.getStringExtra(EXTRA_EVENT_ID);mDefaultRoomName=intent.getStringExtra(EXTRA_DEFAULT_NAME);mDefaultTopic=intent.getStringExtra(EXTRA_DEFAULT_TOPIC);mIsUnreadPreviewMode=intent.getBooleanExtra(EXTRA_IS_UNREAD_PREVIEW_MODE,false);if((null!=intent.getAction())&&(intent.getAction().startsWith(NotificationUtils.TAP_TO_VIEW_ACTION))){NotificationManager notificationsManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);notificationsManager.cancelAll();}Log.d(LOG_TAG,""Displaying ""+roomId);mEditText=(VectorAutoCompleteTextView)findViewById(R.id.editText_messageBox);mEditText.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    enableActionBarHeader(HIDE_ACTION_BAR_HEADER);  }});mEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){  @Override public boolean onEditorAction(  TextView textView,  int actionId,  KeyEvent keyEvent){    int imeActionId=actionId & EditorInfo.IME_MASK_ACTION;    if (EditorInfo.IME_ACTION_DONE == imeActionId) {      sendTextMessage();    }    return false;  }});mSendingMessagesLayout=findViewById(R.id.room_sending_message_layout);mSendImageView=(ImageView)findViewById(R.id.room_send_image_view);mSendButtonLayout=findViewById(R.id.room_send_layout);mSendButtonLayout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if (!TextUtils.isEmpty(mEditText.getText())) {      sendTextMessage();    } else {      enableActionBarHeader(HIDE_ACTION_BAR_HEADER);      FragmentManager fm=getSupportFragmentManager();      IconAndTextDialogFragment fragment=(IconAndTextDialogFragment)fm.findFragmentByTag(TAG_FRAGMENT_ATTACHMENTS_DIALOG);      if (fragment != null) {        fragment.dismissAllowingStateLoss();      }      final Integer[] messages=new Integer[]{R.string.option_send_files,R.string.option_take_photo_video};      final Integer[] icons=new Integer[]{R.drawable.ic_material_file,R.drawable.ic_material_camera};      fragment=IconAndTextDialogFragment.newInstance(icons,messages,null,ContextCompat.getColor(VectorRoomActivity.this,R.color.vector_text_black_color));      fragment.setOnClickListener(new IconAndTextDialogFragment.OnItemClickListener(){        @Override public void onItemClick(        IconAndTextDialogFragment dialogFragment,        int position){          Integer selectedVal=messages[position];          if (selectedVal == R.string.option_send_files) {            VectorRoomActivity.this.launchFileSelectionIntent();          } else           if (selectedVal == R.string.option_take_photo_video) {            if (CommonActivityUtils.checkPermissions(CommonActivityUtils.REQUEST_CODE_PERMISSION_TAKE_PHOTO,VectorRoomActivity.this)) {              launchCamera();            }          }        }      });      fragment.show(fm,TAG_FRAGMENT_ATTACHMENTS_DIALOG);    }  }});mEditText.addTextChangedListener(new TextWatcher(){  @Override public void afterTextChanged(  android.text.Editable s){    if (null != mRoom) {      MXLatestChatMessageCache latestChatMessageCache=VectorRoomActivity.this.mLatestChatMessageCache;      String textInPlace=latestChatMessageCache.getLatestText(VectorRoomActivity.this,mRoom.getRoomId());      if (!mIgnoreTextUpdate && !textInPlace.equals(mEditText.getText().toString())) {        latestChatMessageCache.updateLatestMessage(VectorRoomActivity.this,mRoom.getRoomId(),mEditText.getText().toString());        handleTypingNotification(mEditText.getText().length() != 0);      }      manageSendMoreButtons();      refreshCallButtons();    }  }  @Override public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){  }  @Override public void onTextChanged(  CharSequence s,  int start,  int before,  int count){  }});mVectorPendingCallView.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    IMXCall call=VectorCallViewActivity.getActiveCall();    if (null != call) {      final Intent intent=new Intent(VectorRoomActivity.this,VectorCallViewActivity.class);      intent.putExtra(VectorCallViewActivity.EXTRA_MATRIX_ID,call.getSession().getCredentials().userId);      intent.putExtra(VectorCallViewActivity.EXTRA_CALL_ID,call.getCallId());      VectorRoomActivity.this.runOnUiThread(new Runnable(){        @Override public void run(){          VectorRoomActivity.this.startActivity(intent);        }      });    } else {      mVectorPendingCallView.onCallTerminated();    }  }});mNotificationsArea=findViewById(R.id.room_notifications_area);mNotificationIconImageView=(ImageView)mNotificationsArea.findViewById(R.id.room_notification_icon);mNotificationTextView=(TextView)mNotificationsArea.findViewById(R.id.room_notification_message);mCanNotPostTextView=findViewById(R.id.room_cannot_post_textview);findViewById(R.id.room_sending_message_layout).setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if (mEditText.requestFocus()) {      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);      imm.showSoftInput(mEditText,InputMethodManager.SHOW_IMPLICIT);    }  }});mStartCallLayout=findViewById(R.id.room_start_call_layout);mStartCallLayout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if ((null != mRoom) && mRoom.isEncrypted() && (mRoom.getActiveMembers().size() > 2)) {      AlertDialog.Builder permissionsInfoDialog=new AlertDialog.Builder(VectorRoomActivity.this);      Resources resource=getResources();      permissionsInfoDialog.setMessage(resource.getString(R.string.room_no_conference_call_in_encrypted_rooms));      permissionsInfoDialog.setIcon(android.R.drawable.ic_dialog_alert);      permissionsInfoDialog.setPositiveButton(resource.getString(R.string.ok),null);      permissionsInfoDialog.show();    } else     if (isUserAllowedToStartConfCall()) {      displayVideoCallIpDialog();    } else {      displayConfCallNotAllowed();    }  }});mStopCallLayout=findViewById(R.id.room_end_call_layout);mStopCallLayout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    IMXCall call=mSession.mCallsManager.getCallWithRoomId(mRoom.getRoomId());    if (null != call) {      call.hangup(null);    }  }});findViewById(R.id.room_button_margin_right).setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if (mStopCallLayout.getVisibility() == View.VISIBLE) {      mStopCallLayout.performClick();    } else     if (mStartCallLayout.getVisibility() == View.VISIBLE) {      mStartCallLayout.performClick();    } else     if (mSendButtonLayout.getVisibility() == View.VISIBLE) {      mSendButtonLayout.performClick();    }  }});mMyUserId=mSession.getCredentials().userId;CommonActivityUtils.resumeEventStream(this);mRoom=mSession.getDataHandler().getRoom(roomId,false);FragmentManager fm=getSupportFragmentManager();mVectorMessageListFragment=(VectorMessageListFragment)fm.findFragmentByTag(TAG_FRAGMENT_MATRIX_MESSAGE_LIST);if(mVectorMessageListFragment==null){Log.d(LOG_TAG,""Create VectorMessageListFragment""); final String previewMode=(null==sRoomPreviewData)?(mIsUnreadPreviewMode?VectorMessageListFragment.PREVIEW_MODE_UNREAD_MESSAGE:null):VectorMessageListFragment.PREVIEW_MODE_READ_ONLY;mVectorMessageListFragment=VectorMessageListFragment.newInstance(mMyUserId,roomId,mEventId,previewMode,org.matrix.androidsdk.R.layout.fragment_matrix_message_list_fragment);fm.beginTransaction().add(R.id.anchor_fragment_messages,mVectorMessageListFragment,TAG_FRAGMENT_MATRIX_MESSAGE_LIST).commit();}else {Log.d(LOG_TAG,""Reuse VectorMessageListFragment"");}mVectorRoomMediasSender=new VectorRoomMediasSender(this,mVectorMessageListFragment,Matrix.getInstance(this).getMediasCache());mVectorRoomMediasSender.onRestoreInstanceState(savedInstanceState);manageRoomPreview();addRoomHeaderClickListeners();if((!TextUtils.isEmpty(mEventId)||(null!=sRoomPreviewData))){mNotificationsArea.setVisibility(View.GONE);findViewById(R.id.bottom_separator).setVisibility(View.GONE);findViewById(R.id.room_notification_separator).setVisibility(View.GONE);findViewById(R.id.room_notifications_area).setVisibility(View.GONE);View v=findViewById(R.id.room_bottom_layout);ViewGroup.LayoutParams params=v.getLayoutParams();params.height=0;v.setLayoutParams(params);}mLatestChatMessageCache=Matrix.getInstance(this).getDefaultLatestChatMessageCache();if(intent.hasExtra(EXTRA_ROOM_INTENT)){ final Intent mediaIntent=intent.getParcelableExtra(EXTRA_ROOM_INTENT);if(null!=mediaIntent){mEditText.postDelayed(new Runnable(){  @Override public void run(){    intent.removeExtra(EXTRA_ROOM_INTENT);    sendMediasIntent(mediaIntent);  }},1000);}}mVectorOngoingConferenceCallView.initRoomInfo(mSession,mRoom);mVectorOngoingConferenceCallView.setCallClickListener(new VectorOngoingConferenceCallView.ICallClickListener(){  private void startCall(  boolean isVideo){    if (CommonActivityUtils.checkPermissions(isVideo ? CommonActivityUtils.REQUEST_CODE_PERMISSION_VIDEO_IP_CALL : CommonActivityUtils.REQUEST_CODE_PERMISSION_AUDIO_IP_CALL,VectorRoomActivity.this)) {      startIpCall(isVideo);    }  }  @Override public void onVoiceCallClick(){    startCall(false);  }  @Override public void onVideoCallClick(){    startCall(true);  }});View avatarLayout=findViewById(R.id.room_self_avatar);if(null!=avatarLayout){mAvatarImageView=(ImageView)avatarLayout.findViewById(R.id.avatar_img);}refreshSelfAvatar();mVectorRoomMediasSender.resumeResizeMediaAndSend();enableActionBarHeader(intent.getBooleanExtra(EXTRA_EXPAND_ROOM_HEADER,false)?SHOW_ACTION_BAR_HEADER:HIDE_ACTION_BAR_HEADER);intent.removeExtra(EXTRA_EXPAND_ROOM_HEADER);if(mIsUnreadPreviewMode||(mRoom!=null&&mRoom.getLiveTimeLine()!=null&&mRoom.getLiveTimeLine().isLiveTimeline())){mReadMarkerManager=new ReadMarkerManager(this,mVectorMessageListFragment,mSession,mRoom,mIsUnreadPreviewMode?ReadMarkerManager.PREVIEW_MODE:ReadMarkerManager.LIVE_MODE,findViewById(R.id.jump_to_first_unread));}Log.d(LOG_TAG,""End of create"");}"
2732	"private File(Post post,JSONObject data){mPost=post;mData=data;mUrl=Url(mPost.getThread().getBoard().getBoardName());try{mMd5Hash=Base64.decode(mData.getString(""md5""),Base64.DEFAULT).toString();mMd5HashHex=String.format(""%H"",mMd5Hash);mFilename=String.format(""%s%s"",mData.get(""tim""),mData.get(""ext""));mFileUrl=mUrl.getFileUrl(mData.getString(""tim""),mData.getString(""ext""));mFileExtension=mData.getString(""ext"");mFileSize=mData.getInt(""fsize"");mFileWidth=mData.getInt(""w"");mFileHeight=mData.getInt(""h"");mIsFileDeleted=(mData.getInt(""filedeleted"")==1)?true:false;mFileThumbnailHeight=mData.getInt(""tn_h"");mFileThumbnailWidth=mData.getInt(""tn_w"");mFileThumbnailName=String.format(""%ss.jpg"",mData.getString(""tim""));mFileThumbnailUrl=mUrl.getThumbURL(mData.getString(""tim""));}catch(JSONException e){e.printStackTrace();}}"
2733	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_login_data_input);Toolbar toolbar=findViewById(R.id.toolbar);setSupportActionBar(toolbar);if(getSupportActionBar()!=null){getSupportActionBar().setDisplayHomeAsUpEnabled(true);}mBtnLogin=findViewById(R.id.btnLogin);mEtUrl=findViewById(R.id.etUrl);mEtSchool=findViewById(R.id.etSchool);mEtUser=findViewById(R.id.etUser);mEtKey=findViewById(R.id.etKey);mBtnLogin.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    EditText error=null;    if (mEtUser.getText().length() == 0) {      mEtUser.setError(getString(R.string.error_field_empty));      error=mEtUser;    }    if (mEtSchool.getText().length() == 0) {      mEtSchool.setError(getString(R.string.error_field_empty));      error=mEtSchool;    }    if (mEtUrl.getText().length() == 0) {      mEtUrl.setError(getString(R.string.error_field_empty));      error=mEtUrl;    } else     if (!Patterns.DOMAIN_NAME.matcher(mEtUrl.getText()).matches()) {      mEtUrl.setError(getString(R.string.error_invalid_url));      error=mEtUrl;    }    if (error == null)     loadData(); else     error.requestFocus();  }});mRlConnectionStatus=findViewById(R.id.rlConnectionStatus);mPbConnectionStatus=findViewById(R.id.pbConnectionStatus);mIvConnectionStatusSuccess=findViewById(R.id.ivConnectionStatusSuccess);mIvConnectionStatusFailed=findViewById(R.id.ivConnectionStatusFailed);mTvConnectionStatus=findViewById(R.id.tvConnectionStatus);mRlLoadingStatus=findViewById(R.id.rlLoadingStatus);mPbLoadingStatus=findViewById(R.id.pbLoadingStatus);mIvLoadingStatusSuccess=findViewById(R.id.ivLoadingStatusSuccess);mIvLoadingStatusFailed=findViewById(R.id.ivLoadingStatusFailed);mTvLoadingStatus=findViewById(R.id.tvLoadingStatus);mRlConnectionStatus.setVisibility(View.GONE);mRlLoadingStatus.setVisibility(View.GONE);String[] servers=getResources().getStringArray(R.array.webuntis_servers);ArrayAdapter<String> adapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,servers);mEtUrl.setAdapter(adapter);Uri appLinkData=getIntent().getData();if(appLinkData!=null){if(appLinkData.getQueryParameter(""url"")!=null){mEtUrl.setText(appLinkData.getQueryParameter(""url""));}if(appLinkData.getQueryParameter(""school"")!=null){mEtSchool.setText(appLinkData.getQueryParameter(""school""));}if(appLinkData.getQueryParameter(""user"")!=null){mEtUser.setText(appLinkData.getQueryParameter(""user""));}if(appLinkData.getQueryParameter(""key"")!=null){mEtKey.setText(appLinkData.getQueryParameter(""key""));}}}"
2734	"public void setLength(){if(coordinates==null){throw new NullPointerException(""You must first set coordinates, and then you can set""+""the lenght!"");}int length=0;int i;for(i=0;i<coordinates.size()-1;i++){length+=coordinates.get(i).distanceTo(coordinates.get(i+1));}this.length=length;}"
2735	"@Override protected void mouseClicked(int mouseX,int mouseY,int button) throws IOException{int xAxis=(mouseX-(width-xSize)/2);int yAxis=(mouseY-(height-ySize)/2);if(button==0){if(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)){Slot hovering=null;for(int i=0;i<inventorySlots.inventorySlots.size();i++){Slot slot=inventorySlots.inventorySlots.get(i);if(isMouseOverSlot(slot,mouseX,mouseY)){hovering=slot;break;}}if(hovering!=null){ItemStack stack=hovering.getStack();if(stack!=null){itemType=stack.copy();itemType.setCount(1);scrollList.setText(MekanismUtils.getOreDictName(itemType));SoundHandler.playSound(SoundEvents.UI_BUTTON_CLICK);return ;}}}if(xAxis>=6&&xAxis<=22&&yAxis>=6&&yAxis<=22){ItemStack stack=mc.player.inventory.getItemStack();if(stack!=null&&!Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)){itemType=stack.copy();itemType.setCount(1);scrollList.setText(MekanismUtils.getOreDictName(itemType));}else {if(stack==null&&Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)){itemType=null;scrollList.setText(null);}}SoundHandler.playSound(SoundEvents.UI_BUTTON_CLICK);}}super.mouseClicked(mouseX,mouseY,button);}"
2736	"protected void updateActions(){if(transformAction==null||rerootAction==null){return ;}try{super.updateActions();boolean hasData=plotView.getDataModel()!=null&&plotView.getDataModel().size()>0;transformAction.setEnabled(hasData);boolean hasSelection=!plotView.getSelectionModel().isEmpty();rerootAction.setEnabled(hasData&&hasSelection);chooseStyleAction.setEnabled(getPlotView().getPlot()!=null);Clade node=(Clade)(hasSelection&&plotView.getSelectionModel().size()==1?plotView.getSelectionModel().iterator().next():null);taxonomyUrlAction.setEnabled(node!=null&&node.getTaxonomy().getUri()!=null);sequenceUrlAction.setEnabled(node!=null&&node.getSequence().getUri()!=null);}catch(NullPointerException npe){npe.printStackTrace();}}"
2737	"@OnClick(R.id.entryConfirmBTN) public void saveHandler(View view){String entryTitle=entryTitleET.getText().toString();String entryAuthor=mUser.getDisplayName();String entryNotes=entryNotesET.getText().toString();String entryObligations=entryObligationsET.getText().toString();String entryDecisions=entryDecisionsET.getText().toString();String entryOutcomes=entryOutcomesET.getText().toString();String date=new SimpleDateFormat(""dd/MM/yyyy hh:mm:ssa"",Locale.getDefault()).format(new Date());Entry entry=new Entry(entryTitle,entryNotes,date,0);EntryContent entryContent=new EntryContent(entryNotes,entryObligations,entryDecisions,entryOutcomes,date,0);DatabaseReference entryRef=mDatabase.getReference();if(!entryTitle.isEmpty()){ArrayList<String> entryContentsList=new ArrayList<>();entryContentsList.add(entryRef.push().getKey());entry.setEntryContentList(entryContentsList);String entryID=entryRef.push().getKey();entryRef.child(""Entries"").child(mUser.getDisplayName()).child(mJournalID).child(entryID).setValue(entry);entryRef.child(""EntryContents"").child(mUser.getDisplayName()).child(entryID).child(entryContentsList.get(0)).setValue(entryContent).addOnCompleteListener(new OnCompleteListener<Void>(){  @Override public void onComplete(  @NonNull Task<Void> task){    Toast.makeText(CreateEntryActivity.this,""You have successfully created an entry!"",Toast.LENGTH_SHORT).show();    finish();  }});}else {entryTitleET.setError(""Missing Entry Title!"");}}"
2738	"public boolean isRead(){return read;}"
2739	"@FlashException(keep=true,referrer={""assign""}) public static void saveAssignPolicy(AssignPolicyForm assignPolicy){if(assignPolicy==null){Logger.error(""No assign policy parameters passed"");badRequest(""No assign policy parameters passed"");return ;}assignPolicy.validate(""assignPolicy"");if(Validation.hasErrors()){Common.handleError();}assignPolicy.id=params.get(""id"");FilePolicyAssignParam assignPolicyParam=new FilePolicyAssignParam();if(assignPolicy.topologiesString==null||assignPolicy.topologiesString.equalsIgnoreCase(""[]"")){FilePolicyRestRep policy=getViprClient().fileProtectionPolicies().getFilePolicy(uri(assignPolicy.id));if(policy.getReplicationSettings()!=null&&policy.getReplicationSettings().getType().equalsIgnoreCase(FileReplicationType.REMOTE.name())){flash.error(""No source and target varry parameters passed"",policy.getName());if(StringUtils.isNotBlank(assignPolicy.referrerUrl)){redirect(assignPolicy.referrerUrl);}else {list();}}}try{updateAssignPolicyParam(assignPolicy,assignPolicyParam);TaskResourceRep taskRes=getViprClient().fileProtectionPolicies().assignPolicy(uri(assignPolicy.id),assignPolicyParam);if(isTaskSuccessful(assignPolicy.id,taskRes)){flash.success(MessagesUtils.get(""assignPolicy.request.saved"",assignPolicy.policyName));}}catch(Exception ex){flash.error(ex.getMessage(),assignPolicy.policyName);}if(StringUtils.isNotBlank(assignPolicy.referrerUrl)){redirect(assignPolicy.referrerUrl);}else {list();}}"
2740	"public static String validateEmail(String email,int userId){String errEmail="""";if(!checkPressTxt(email)){errEmail=MessageErrorProperties.getData(""ER001_EMAIL"");}else {Pattern pattern=Pattern.compile(ConfigProperties.getData(""regexEmail""));boolean validFormat=pattern.matcher(email).matches();boolean validEmail=new TblUserLogicImpl().existEmail(email,userId);if(!checkMaxLength(getlengthString(""maxLengthEmail""),email)){errEmail=MessageErrorProperties.getData(""ER006_EMAIL"");}else {if(!validFormat){errEmail=MessageErrorProperties.getData(""ER005_EMAIL"");}else {if(validEmail){errEmail=MessageErrorProperties.getData(""ER003_EMAIL"");}}}}return errEmail;}"
2741	"private boolean isHiddenEvent(int type){return type==EVT_NODE_METRICS_UPDATED;}"
2742	"@Override public boolean active(){return !Inventory.isFull();}"
2743	"private void send(JSONObject jsonObject,ResponseListener responseListener){if(mIsClosed||!mIsConnected){if(mTransportListener!=null){mTransportListener.onError(InternalErrorCodes.TRANSPORT_NOT_READY,null);}return ;}mNetworkHandler.post(new Runnable(){  @Override public void run(){    try {      if (responseListener != null) {        mResponseQueue.put(jsonObject.getString(MessageBuilder.ID),responseListener);      }      ServiceManager.requestService(mFullUrl,XHR_SEND,ServiceManager.Method.POST,jsonObject);    } catch (    JSONException|IOException e) {      Log.w(getClass().getCanonicalName(),e);    }  }});}"
2744	"@Override public void handle(MouseEvent event){if(event.getEventType()==MouseEvent.MOUSE_PRESSED){circle=new Circle(event.getSceneX(),event.getSceneY(),10,Color.TRANSPARENT);circle.setStroke(paint);circle.setStrokeWidth(strokeWidth);commitShape(circle);}else {if(event.getEventType()==MouseEvent.MOUSE_DRAGGED){double xDistance=event.getX()-circle.getCenterX();double yDistance=event.getY()-circle.getCenterY();circle.setRadius(pythagorize(xDistance,yDistance));}else {if(event.getEventType()==MouseEvent.MOUSE_RELEASED){redoStack.clear();circle=null;}}}}"
2745	"private int[] FindNextD(Tile s){int[] dir=new int[2];Tile u=grid.GetTile(s.getXPlace(),s.getYPlace()-1);Tile r=grid.GetTile(s.getXPlace()+1,s.getYPlace());Tile d=grid.GetTile(s.getXPlace(),s.getYPlace()+1);Tile l=grid.GetTile(s.getXPlace()+1,s.getYPlace());if(s.getType()==u.getType()){dir[0]=0;dir[1]=-1;}else {if(s.getType()==r.getType()){dir[0]=1;dir[1]=0;}else {if(s.getType()==d.getType()){dir[0]=0;dir[1]=1;}else {if(s.getType()==l.getType()){dir[0]=-1;dir[1]=0;}else {dir[0]=2;dir[1]=2;System.out.println(""NO DIRECTION FOUND"");}}}}return dir;}"
2746	"public Action service(HttpServletRequest req,HttpServletResponse response) throws IOException,ServletException{Continuation c=ContinuationSupport.getContinuation(req,null);Action action=null;if(!c.isResumed()&&!c.isPending()){action=suspended(req,response);if(action.type==Action.TYPE.SUSPEND){logger.debug(""Suspending response: {}"",response);if(action.timeout!=-1){c.suspend(action.timeout);}else {c.suspend(0);}}else {if(action.type==Action.TYPE.RESUME){logger.debug(""Resuming response: {}"",response);if(!resumed.remove(c)){c.reset();if(req.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT)==null){timedout(req,response);}else {resumed(req,response);}}}}}else {logger.debug(""Resuming response: {}"",response);if(!resumed.remove(c)){c.reset();if(req.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT)==null){timedout(req,response);}else {resumed(req,response);}}}return action;}"
2747	"@Override public void serializeInternal(Tile value){int length=0;if(value.getAqcuisitionDate()!=null){this.boolSerializer.buffer.clear();this.boolSerializer.serializeInternal(true);length+=this.boolSerializer.buffer.position();this.buffers.add(this.boolSerializer.buffer);String acqDate=value.getAqcuisitionDate();this.stringSerializer.buffer.clear();this.stringSerializer.serializeInternal(acqDate);length+=this.stringSerializer.buffer.position();this.buffers.add(this.stringSerializer.buffer);}else {this.boolSerializer.buffer.clear();this.boolSerializer.serializeInternal(false);length+=this.boolSerializer.buffer.position();this.buffers.add(this.boolSerializer.buffer);}this.intSerializer.buffer.clear();this.intSerializer.serializeInternal(value.getBand());length+=this.intSerializer.buffer.position();this.buffers.add(this.intSerializer.buffer);this.doubleSerializer.buffer.clear();this.doubleSerializer.serializeInternal(value.getLuCord().lon);length+=this.doubleSerializer.buffer.position();this.buffers.add(this.doubleSerializer.buffer);this.doubleSerializer2.buffer.clear();this.doubleSerializer2.serializeInternal(value.getLuCord().lat);length+=this.doubleSerializer2.buffer.position();this.buffers.add(this.doubleSerializer2.buffer);this.doubleSerializer3.buffer.clear();this.doubleSerializer3.serializeInternal(value.getRlCord().lon);length+=this.doubleSerializer3.buffer.position();this.buffers.add(this.doubleSerializer3.buffer);this.doubleSerializer4.buffer.clear();this.doubleSerializer4.serializeInternal(value.getRlCord().lat);length+=this.doubleSerializer4.buffer.position();this.buffers.add(this.doubleSerializer4.buffer);if(value.getPathRow()!=null){this.boolSerializer2.buffer.clear();this.boolSerializer2.serializeInternal(true);length+=this.boolSerializer2.buffer.position();this.buffers.add(this.boolSerializer2.buffer);try{this.stringSerializer2.buffer.clear();String pathRow=value.getPathRow();pathRow=new String(pathRow.getBytes(),""UTF-8"");this.stringSerializer2.serializeInternal(pathRow);length+=this.stringSerializer2.buffer.position();this.buffers.add(this.stringSerializer2.buffer);}catch(UnsupportedEncodingException ex){ex.printStackTrace();}}else {this.boolSerializer2.buffer.clear();this.boolSerializer2.serializeInternal(false);length+=this.boolSerializer2.buffer.position();this.buffers.add(this.boolSerializer2.buffer);}this.intSerializer2.buffer.clear();this.intSerializer2.serializeInternal(value.getTileHeight());length+=this.intSerializer2.buffer.position();this.buffers.add(this.intSerializer2.buffer);this.intSerializer3.buffer.clear();this.intSerializer3.serializeInternal(value.getTileWidth());length+=this.intSerializer3.buffer.position();this.buffers.add(this.intSerializer3.buffer);this.doubleSerializer5.buffer.clear();this.doubleSerializer5.serializeInternal(value.getxPixelWith());length+=this.doubleSerializer5.buffer.position();this.buffers.add(this.doubleSerializer5.buffer);this.doubleSerializer6.buffer.clear();this.doubleSerializer6.serializeInternal(value.getyPixelWidth());length+=this.doubleSerializer6.buffer.position();this.buffers.add(this.doubleSerializer6.buffer);if(value.pickle!=null){this.boolSerializer3.buffer.clear();this.boolSerializer3.serializeInternal(true);length+=this.boolSerializer3.buffer.position();this.buffers.add(this.boolSerializer3.buffer);this.bytesSerializer2.buffer.clear();this.bytesSerializer2.serializeInternal(value.pickle);length+=this.bytesSerializer2.buffer.position();this.buffers.add(this.bytesSerializer2.buffer);}else {this.boolSerializer3.buffer.clear();this.boolSerializer3.serializeInternal(false);length+=this.boolSerializer3.buffer.position();this.buffers.add(this.boolSerializer3.buffer);}buffer=ByteBuffer.allocate(length);for(ByteBuffer b : buffers){b.flip();buffer.put(b);}buffers.clear();}"
2748	"@SchedulerSupport(SchedulerSupport.CUSTOM) public static Observable<Long> intervalRange(long start,long count,long initialDelay,long period,TimeUnit unit,Scheduler scheduler){long end=start+(count-1);if(end<0){throw new IllegalArgumentException(""Overflow! start + count is bigger than Long.MAX_VALUE"");}ObjectHelper.requireNonNull(unit,""unit is null"");ObjectHelper.requireNonNull(scheduler,""scheduler is null"");return RxJavaPlugins.onAssembly(new ObservableIntervalRange(start,end,Math.max(0L,initialDelay),Math.max(0L,period),unit,scheduler));}"
2749	"private Activity doRounding(long roundToMinutes,long leawayMinutes,List<Activity> activities,Activity selectedActivity){Duration totalBillable=activities.parallelStream().map(Activity::getBillable).reduce(Duration.ZERO,(lhs,rhs) -> lhs.plus(rhs));long minutes=totalBillable.toMinutes();long rounded=minutes;long excess=minutes%roundToMinutes;if(minutes<roundToMinutes||excess>leawayMinutes){rounded=(long)(Math.ceil(minutes/(float)roundToMinutes)*roundToMinutes);}Activity oActivity=null;if(rounded!=minutes){Duration roundedBillable=Duration.ofMinutes(rounded).minus(totalBillable).plus(selectedActivity.getBillable());selectedActivity.setBillable(roundedBillable);if(selectedActivity.getDateTimeStarted()==Constants.DATETIMEZERO){selectedActivity.setDateTimeStarted(selectedActivity.getDateTimeCreated());}oActivity=new ActivityDao().replace(selectedActivity);}return oActivity;}"
2750	"public boolean hasParams(){return null!=params&&params.size()>0;}"
2751	"@Override public boolean accept(File dir,String name){return !name.endsWith(endsWith)&&!name.equals(""instant-run"");}"
2752	"private void uploadImage(String path,String filename){File file=new File(path);String url=null;FileInputStream fis=null;try{fis=new FileInputStream(file);mSize=fis.available();}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}url=mUploadedTable.hasUploaded(filename,mSize);DialogManager.showProgressDialog(this,null);if(url!=null){mUploadFileUrl=url;getSimiSameImage(mUploadFileUrl);return ;}BmobProFile bmobProFile=BmobProFile.getInstance(this);if(bmobProFile==null){DialogManager.dismissDialog();Toast.makeText(this,""??????!"",Toast.LENGTH_SHORT).show();return ;}if(bmobProFile!=null){bmobProFile.getLocalThumbnail(path,1,200,200,80,new LocalThumbnailListener(){  @Override public void onError(  int statuscode,  String errormsg){    DialogManager.dismissDialog();    Toast.makeText(RecognizeImageActivity.this,""??????: "" + errormsg,Toast.LENGTH_SHORT).show();  }  @Override public void onSuccess(  String thumbnailPath){    BmobFile bmobFile=new BmobFile(new File(thumbnailPath));    uploadBmobFile(bmobFile);  }});}}"
2753	"@Override public void onReceive(Context context,Intent intent){String action=intent.getAction();if(action==null){return ;}switch (action){case Constants.ACTION_REFRESH_UNITS :Log.i(TAG,""Received refresh units broadcast - calling updateUI()."");updateUI();return ;case Constants.SEND_RESULT_ACTION :String actionAttempted=intent.getStringExtra(Constants.ACTION_ATTEMPTED);Log.i(TAG,""onReceive() actionAttempted: ""+actionAttempted+"" for Run ""+mRunId);switch (actionAttempted){case Constants.ACTION_UPDATE_START_DATE :{int result=intent.getIntExtra(Constants.EXTENDED_RESULTS_DATA,-1);int toastTextRes;if(result==1){toastTextRes=R.string.update_run_start_date_success;}else {if(result==0){toastTextRes=R.string.update_run_start_date_failed;}else {if(result>1){toastTextRes=R.string.multiple_runs_dates_updated;}else {toastTextRes=R.string.unknown_start_date_error;}}}if(result!=1){if(isAdded()){Toast.makeText(getActivity(),toastTextRes,Toast.LENGTH_LONG).show();}}break;}case Constants.ACTION_UPDATE_START_ADDRESS :{int result=intent.getIntExtra(Constants.EXTENDED_RESULTS_DATA,-1);int toastTextRes;if(result==1){toastTextRes=R.string.update_run_start_address_success;}else {if(result==0){toastTextRes=R.string.update_run_start_address_failed;}else {if(result>1){toastTextRes=R.string.multiple_start_addresses_error;}else {toastTextRes=R.string.unknown_start_address_error;}}}if(result!=1){if(isAdded()){Toast.makeText(getActivity(),toastTextRes,Toast.LENGTH_LONG).show();}}break;}case Constants.ACTION_UPDATE_END_ADDRESS :{int result=intent.getIntExtra(Constants.EXTENDED_RESULTS_DATA,-1);int toastTextRes;if(result==1){toastTextRes=R.string.update_run_end_address_success;}else {if(result==0){toastTextRes=R.string.update_end_address_failed;}else {if(result>1){toastTextRes=R.string.multiple_runs_end_addresses_updated;}else {toastTextRes=R.string.unknown_end_address_update_error;}}}if(result!=1){if(isAdded()){Toast.makeText(getActivity(),toastTextRes,Toast.LENGTH_LONG).show();}}break;}case Constants.ACTION_INSERT_LOCATION :String resultsString=intent.getStringExtra(Constants.EXTENDED_RESULTS_DATA);Toast.makeText(getContext(),resultsString,Toast.LENGTH_LONG).show();case Constants.ACTION_REFRESH_MAPS :long runId=intent.getLongExtra(Constants.ARG_RUN_ID,-1);Log.i(TAG,""Received ACTION_REFRESH_MAPS in Run ""+mRunId+"" from Run ""+runId);if(runId!=mRunId){mViewMode=RunTracker2.getPrefs().getInt(Constants.TRACKING_MODE,Constants.SHOW_ENTIRE_ROUTE);setTrackingMode();}updateUI();break;default :Log.i(TAG,""How'd you get here!?! Not a defined ACTION!"");}}}"
2754	"public boolean equals(Object o){return o instanceof CRC&&((CRC)o).value==value;}"
2755	"public final void requestPermissions(){if(Build.VERSION.SDK_INT<Build.VERSION_CODES.M){return ;}else {if(checkSelfPermission(READ_CONTACTS)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(WRITE_CONTACTS)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(CAMERA)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(READ_EXTERNAL_STORAGE)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(WRITE_EXTERNAL_STORAGE)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(READ_SMS)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(SEND_SMS)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_GRANTED&&checkSelfPermission(ACCESS_COARSE_LOCATION)==PackageManager.PERMISSION_GRANTED){return ;}else { final List<String> permList=new ArrayList<>(); final int readContactsPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.READ_CONTACTS);if(readContactsPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.READ_CONTACTS);} final int writeContactsPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_CONTACTS);if(writeContactsPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.WRITE_CONTACTS);} final int cameraPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.CAMERA);if(cameraPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.CAMERA);} final int readStoragePermission=ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);if(readStoragePermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.READ_EXTERNAL_STORAGE);} final int writeStoragePermission=ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE);if(writeStoragePermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);} final int readSMSPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.READ_SMS);if(readSMSPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.READ_SMS);} final int sendSMSPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.SEND_SMS);if(sendSMSPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.SEND_SMS);} final int accessFineLocationPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION);if(accessFineLocationPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.ACCESS_FINE_LOCATION);} final int accessCoarseLocationPermission=ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_COARSE_LOCATION);if(accessCoarseLocationPermission!=PackageManager.PERMISSION_GRANTED){permList.add(Manifest.permission.ACCESS_COARSE_LOCATION);}if(permList.size()>0){String[] perms=new String[permList.size()];ActivityCompat.requestPermissions(this,permList.toArray(perms),REQUEST_CODE);}if(cameraPermission==PackageManager.PERMISSION_GRANTED&&writeStoragePermission==PackageManager.PERMISSION_GRANTED&&readStoragePermission==PackageManager.PERMISSION_GRANTED){Intent galleryIntent=new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI);startActivityForResult(galleryIntent,REQUEST_CODE);}else {if(cameraPermission!=PackageManager.PERMISSION_GRANTED&&writeStoragePermission!=PackageManager.PERMISSION_GRANTED&&readStoragePermission!=PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Pet Protector requires camera and ""+""external storage permissions."",Toast.LENGTH_SHORT).show();}else {if(cameraPermission!=PackageManager.PERMISSION_GRANTED){Toast.makeText(this,""Pet Protector requires camera permissions."",Toast.LENGTH_SHORT).show();}else {Toast.makeText(this,""Pet Protector requires external storage permissions."",Toast.LENGTH_SHORT).show();}}}}}}"
2756	"@Override protected boolean onExecute(CommandSender sender,String label,String[] args){if(args.length<2||args[0].trim().length()<2||args[1].trim().isEmpty()){throw new NotEnoughArgumentsException();}SinkUser executor=SinkLibrary.getInstance().getUser((Object)sender);SinkUser target=SinkLibrary.getInstance().getUser(args[0]);if(sender instanceof Player&&target instanceof IngameUser&&((IngameUser)target).getPlayer()!=null){if(!((Player)sender).canSee(((IngameUser)target).getPlayer())&&!sender.hasPermission(""sinklibrary.bypassvanish"")){throw new UserNotFoundException(args[0]);}}if(target==null||!target.isOnline()){throw new UserNotFoundException(args[0]);}String message=StringUtil.formatArrayToString(args,"" "",1);sendMessage(executor,target,message);return true;}"
2757	"@Override public void onLayoutChildren(Recycler recycler,State state){ final boolean restoringLanes=(mLanesToRestore!=null);if(restoringLanes){mLanes=mLanesToRestore;mItemEntries=mItemEntriesToRestore;mLanesToRestore=null;mItemEntriesToRestore=null;} final boolean refreshingLanes=ensureLayoutState();if(mLanes==null){return ;} final int itemCount=state.getItemCount(); final int anchorItemPosition=getAnchorItemPosition(state);if(anchorItemPosition>0&&(refreshingLanes||!restoringLanes)){handleUpdate();moveLayoutToPosition(anchorItemPosition,getPendingScrollOffset(),recycler,state);}mLanes.reset(Direction.START);super.onLayoutChildren(recycler,state);}"
2758	"public int findShiftClickDestinationSlot(Container container,int fromSlot){LinkedList<ItemStack> save=saveContainer(container);Slot slot=container.getSlot(fromSlot);ItemStack stack=slot.getStack();if(stack==null){return -1;}stack.setCount(1);slot.putStack(stack.copy());LinkedList<ItemStack> compareBefore=saveContainer(container);container.slotClick(fromSlot,0,ClickType.QUICK_MOVE,Minecraft.getMinecraft().player);LinkedList<ItemStack> compareAfter=saveContainer(container);try{for(int i=0;i<compareBefore.size();i++){if(i==fromSlot){continue;}ItemStack before=compareBefore.get(i);ItemStack after=compareAfter.get(i);if(!areStacksIdentical(before,after)&&after!=null){if(before==null?areStacksSameType(stack,after):areStacksSameType(stack,after)&&after.getCount()-before.getCount()>0){return i;}}}return -1;}finally{restoreContainer(container,save);}}"
2759	"@Override public Document preParse(Object data) throws ParseException{if(!initNewDocument()){throw new ParseException(StreamsResources.getString(StreamsResources.RESOURCE_BUNDLE_NAME,""XMLFromBinDataPreParser.doc.init.failure""),0);}InputStream is;boolean closeWhenDone=false;if(data instanceof String){switch (format){case base64Binary :is=new ByteArrayInputStream(Utils.base64Decode((String)data));break;case hexBinary :is=new ByteArrayInputStream(Utils.decodeHex((String)data));break;case bytes :case string :default :is=new ByteArrayInputStream(((String)data).getBytes());break;}closeWhenDone=true;}else {if(data instanceof byte[]){is=new ByteArrayInputStream((byte[])data);closeWhenDone=true;}else {if(data instanceof Reader){Reader reader=(Reader)data;is=new ReaderInputStream(reader,Utils.UTF8);}else {if(data instanceof InputStream){is=(InputStream)data;}else {throw new ParseException(StreamsResources.getString(StreamsResources.RESOURCE_BUNDLE_NAME,""XMLFromBinDataPreParser.input.unsupported""),0);}}}}if(!is.markSupported()){try{byte[] copy=IOUtils.toByteArray(is);is=new ByteArrayInputStream(copy);closeWhenDone=true;}catch(IOException e){throw new ParseException(StreamsResources.getStringFormatted(StreamsResources.RESOURCE_BUNDLE_NAME,""XMLFromBinDataPreParser.data.read.failed"",e.getLocalizedMessage()),0);}}try{parseBinInput(is);}catch(IOException e){throw new ParseException(StreamsResources.getString(StreamsResources.RESOURCE_BUNDLE_NAME,""XMLFromBinDataPreParser.bin.data.parse.failure""),0);}finally{if(closeWhenDone){Utils.close(is);}}return getDOM();}"
2760	"protected void internalPersistObject(Class<? extends T> clazz,Collection<T> dataobjects,boolean updateIndex) throws DatabaseException{if(dataobjects==null||dataobjects.size()==0){return ;}Keyspace ks=getKeyspace(clazz);List<URI> objectsToCleanup=insertNewColumns(ks,dataobjects);if(updateIndex&&objectsToCleanup.size()>0){Rows<String,CompositeColumnName> rows=fetchNewest(clazz,ks,objectsToCleanup);cleanupOldColumns(clazz,ks,rows);}}"
2761	"public void addInnerTask(TaskID<?> id){if(!dynamicTaskGroup&&innerTasks.size()==groupSize){throw new RuntimeException(""\nTHE NUMBER OF INNER TASKS IS NOW THE SAME AS THE SIZE THAT WAS SET FOR THIS GROUP! NO MORE TASKS CAN BE ADDED\n""+""FOR DYNAMIC GROUP SIZE USE DEAFULT CONSTRUCTOR OF TaskIDGroup!\n"");}innerTasks.add(id);if(dynamicTaskGroup){groupSize=innerTasks.size();}}"
2762	"@Override public boolean shouldSkipField(FieldAttributes f){return (f.getDeclaringClass()==Bank.class&&f.getName().equals(""user""));}"
2763	"public Graph(String mode){if(mode==""six""){setup(SIXSETUP);PIECENUMBER=6;NAME=""Six Men's Morris"";MODE=""six"";}else {if(mode==""nine""){setup(NINESETUP);PIECENUMBER=9;NAME=""Nine Men's Morris"";MODE=""nine"";}else {if(mode==""twelve""){setup(TWELVESETUP);PIECENUMBER=12;NAME=""Twelve Men's Morris"";MODE=""twelve"";}}}}"
2764	"private MapillaryImage[] getClosestImagesFromDifferentSequences(){if(!(this.data.getSelectedImage() instanceof MapillaryImage)){return new MapillaryImage{null,null};}MapillaryImage selected=(MapillaryImage)this.data.getSelectedImage();MapillaryImage[] ret=new MapillaryImage[2];double[] distances={SEQUENCE_MAX_JUMP_DISTANCE,SEQUENCE_MAX_JUMP_DISTANCE};LatLon selectedCoords=this.data.getSelectedImage().getLatLon();for(MapillaryAbstractImage imagePrev : this.data.getImages()){if(!(imagePrev instanceof MapillaryImage)){continue;}if(!imagePrev.isVisible()){continue;}MapillaryImage image=(MapillaryImage)imagePrev;if(image.getLatLon().greatCircleDistance(selectedCoords)<SEQUENCE_MAX_JUMP_DISTANCE&&selected.getSequence()!=image.getSequence()){if((ret[0]==null&&ret[1]==null)||(image.getLatLon().greatCircleDistance(selectedCoords)<distances[0]&&(ret[1]==null||image.getSequence()!=ret[1].getSequence()))){ret[0]=image;distances[0]=image.getLatLon().greatCircleDistance(selectedCoords);}else {if((ret[1]==null||image.getLatLon().greatCircleDistance(selectedCoords)<distances[1])&&image.getSequence()!=ret[0].getSequence()){ret[1]=image;distances[1]=image.getLatLon().greatCircleDistance(selectedCoords);}}}}if(ret[0]!=null){CacheUtils.downloadPicture(ret[0]);}if(ret[1]!=null){CacheUtils.downloadPicture(ret[1]);}return ret;}"
2765	"public void print(String message){File logfile=new File(filepath);if(logfile.exists()==false){try{System.out.println(""##???????????????????"");logfile.createNewFile();}catch(IOException e){}}else {System.out.println(""##logfile.length:""+logfile.length()+"" max_filesize:""+max_filesize);if(logfile.length()>max_filesize){System.out.println(""##?????"");logfile.delete();try{System.out.println(""##????"");logfile.createNewFile();}catch(IOException e){}}try{BufferedWriter bw=new BufferedWriter(new FileWriter(logfile,true));bw.write(DateTime.returnDatetime()+""  ""+message);bw.newLine();bw.close();}catch(IOException e){}}}"
2766	"private void onOK(){if(listener!=null){listener.onConfirm(fileds.getSelectedIndices());}dispose();}"
2767	"private Move PawnMove(String line){Move result=new Move();Pawn pwn=new Pawn('w');int firstFile=fileToInt(line.charAt(0));if(line.charAt(1)=='x'){int secondFile=fileToInt(line.charAt(2));int secondRank=Character.getNumericValue(line.charAt(3))-1;if(currBoard.getWhiteTurn()&&secondRank>=1&&spaceArr[secondRank-1][firstFile].getPiece()!=null&&spaceArr[secondRank-1][firstFile].getPiece().getTeam()=='w'){result.setBegin(spaceArr[secondRank-1][firstFile]);}else {if(!currBoard.getWhiteTurn()&&secondRank<=6&&spaceArr[secondRank+1][firstFile].getPiece()!=null&&spaceArr[secondRank+1][firstFile].getPiece().getTeam()=='b'){result.setBegin(spaceArr[secondRank+1][firstFile]);}}result.setEnd(spaceArr[secondRank][secondFile]);}else {int destRank=Character.getNumericValue(line.charAt(1))-1;if(destRank>=1&&spaceArr[destRank-1][firstFile].getPiece()!=null&&spaceArr[destRank-1][firstFile].getPiece().getClass()==pwn.getClass()&&spaceArr[destRank-1][firstFile].getPiece().getTeam()=='w'&&currBoard.getWhiteTurn()){result.setBegin(spaceArr[destRank-1][firstFile]);}else {if(spaceArr[destRank+1][firstFile].getPiece()!=null&&spaceArr[destRank+1][firstFile].getPiece().getClass()==pwn.getClass()&&spaceArr[destRank+1][firstFile].getPiece().getTeam()=='b'&&!currBoard.getWhiteTurn()){result.setBegin(spaceArr[destRank+1][firstFile]);}else {if(destRank==3&&spaceArr[destRank-2][firstFile].getPiece()!=null&&spaceArr[destRank-2][firstFile].getPiece().getClass()==pwn.getClass()&&spaceArr[destRank-2][firstFile].getPiece().getTeam()=='w'&&currBoard.getWhiteTurn()){result.setBegin(spaceArr[destRank-2][firstFile]);}else {if(destRank==4&&spaceArr[destRank+2][firstFile].getPiece()!=null&&spaceArr[destRank+2][firstFile].getPiece().getClass()==pwn.getClass()&&spaceArr[destRank+2][firstFile].getPiece().getTeam()=='b'&&!currBoard.getWhiteTurn()){result.setBegin(spaceArr[destRank+2][firstFile]);}else {return null;}}}}result.setEnd(spaceArr[destRank][firstFile]);}return result;}"
2768	"@Override public void update(){if(!world.isRemote){boolean topInsert=false;for(EnumFacing side : SIDES){TileEntity tileEntity=world.getTileEntity(pos.offset(side));if(tileEntity!=null&&tileEntity.hasCapability(SmokeCapability.DEFAULT_CAPABILITY,side.getOpposite())){SmokeStorage smokeStorage=tileEntity.getCapability(SmokeCapability.DEFAULT_CAPABILITY,side.getOpposite());if(smokeStorage!=null){if(smokeStorage.canReceive()&&smokeHandler.getSmokeAmount()>smokeStorage.getSmokeAmount()&&!smokeStorage.overloaded()){int delete=smokeHandler.extract(10,false);smokeStorage.receive(delete);}else {if(smokeStorage.canExtract()&&smokeHandler.getSmokeAmount()<smokeStorage.getSmokeAmount()&&!smokeHandler.overloaded()){int delete=smokeStorage.extract(10,false);smokeHandler.receive(delete);}else {if(smokeHandler.overloaded()){int delete=smokeHandler.extract(10,false);smokeStorage.receive(delete);}}}SmokeHandlerSynchronizer.synchronize(world,pos.offset(side),side.getOpposite());}}}TileEntity topTileEntity=world.getTileEntity(pos.offset(EnumFacing.UP));if(topTileEntity!=null&&topTileEntity.hasCapability(SmokeCapability.DEFAULT_CAPABILITY,EnumFacing.DOWN)){SmokeStorage smokeStorage=topTileEntity.getCapability(SmokeCapability.DEFAULT_CAPABILITY,EnumFacing.DOWN);if(smokeStorage!=null&&smokeStorage.canReceive()&&(!smokeStorage.overloaded()||(smokeStorage.overloaded()&&smokeHandler.overloaded()))&&smokeHandler.getSmokeAmount()>smokeStorage.getSmokeAmount()){int delete=smokeHandler.extract(100,false);smokeStorage.receive(delete);SmokeHandlerSynchronizer.synchronize(world,pos.offset(EnumFacing.UP),EnumFacing.DOWN);topInsert=true;}}if(!topInsert){TileEntity bottomTileEntity=world.getTileEntity(pos.offset(EnumFacing.DOWN));if(bottomTileEntity!=null&&bottomTileEntity.hasCapability(SmokeCapability.DEFAULT_CAPABILITY,EnumFacing.UP)){SmokeStorage smokeStorage=bottomTileEntity.getCapability(SmokeCapability.DEFAULT_CAPABILITY,EnumFacing.UP);if(smokeStorage!=null&&smokeStorage.canReceive()&&(!smokeStorage.overloaded()||(smokeStorage.overloaded()&&smokeHandler.overloaded()))&&smokeHandler.getSmokeAmount()>smokeStorage.getSmokeAmount()){int delete=smokeHandler.extract(20,false);smokeStorage.receive(delete);SmokeHandlerSynchronizer.synchronize(world,pos.offset(EnumFacing.DOWN),EnumFacing.UP);}}}}}"
2769	"public LightBox(AppCompatActivity activity,Runnable onDismissListener,LightBoxParams params){super(activity,R.style.LightBox);this.onDismissListener=onDismissListener;setOnDismissListener(this);requestWindowFeature(Window.FEATURE_NO_TITLE);createContent(activity,params);setCancelable(!params.overrideBackPress);getWindow().setWindowAnimations(android.R.style.Animation);if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE|View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);}}"
2770	"@Override public void widgetSelected(SelectionEvent event){updateFields();}"
2771	"@Override public boolean cancel(boolean mayInterruptIfRunning){return input.cancel(mayInterruptIfRunning);}"
2772	"public static boolean verifyUser(String userID,String password){CachedRowSet rs=DB.read(""SELECT userID, name, birthDate, email, hpNumber, gender FROM User WHERE userID='""+userID+""' && password='""+password+""'"");if(rs.size()==0){return false;}try{if(rs.next()){new UserAccess(new User(rs.getString(""userID""),rs.getString(""name""),rs.getDate(""birthDate""),rs.getString(""email""),rs.getInt(""hpNumber""),(rs.getString(""gender"")).charAt(0)));}}catch(SQLException e){e.printStackTrace();}MainSceneController.getReminders().loadDataBase();return true;}"
2773	"private List<Comparable<?>> getGroupByValues(ResultSet resultSet,List<OrderItem> groupByItems) throws SQLException{List<Comparable<?>> result=new ArrayList<>(groupByItems.size());for(OrderItem each : groupByItems){Object value=resultSet.getObject(each.getIndex());Preconditions.checkState(value instanceof Comparable,""Group by value must implements Comparable"");result.add((Comparable<?>)value);}return result;}"
2774	"private void populateComplaintsCardList(){if(mSJComplaintCFList!=null){mComplaintCFResultsList.setHasFixedSize(true);mComplaintCFResultsList.setLayoutManager(new LinearLayoutManager(this.mContext));mComplaintCFResultsList.setItemAnimator(new DefaultItemAnimator());mComplaintCFListAdapter.swapData(mSJComplaintCFList);}}"
2775	"public BabelNetSynset loadEdgesFromBabelNet() throws IOException{if(isDownloadedWithEdges){throw new EdgesAlreadyLoadedException();}if(babelSynset==null){babelSynset=babelNetManager.getBabelSynset(getId());}BabelNetSynset newSynset=new BabelNetSynset(this);List<BabelSynsetIDRelation> babelEdges=babelSynset.getEdges();babelEdges.sort(Comparator.comparing(BabelSynsetIDRelation::getWeight).reversed());int counter=10;for(BabelSynsetIDRelation edge : babelEdges){if(edgeIsRelevant(edge)){newSynset.addBabelNetEdge(edge);--counter;}if(counter<=0&&edge.getWeight()==0){break;}}newSynset.isExpanded=true;newSynset.isDownloadedWithEdges=true;return newSynset;}"
2776	"private XmlObject createMeasurementTimeseries(OmObservation sosObservation) throws OwsExceptionReport{MeasurementTimeseriesDocument measurementTimeseriesDoc=MeasurementTimeseriesDocument.Factory.newInstance();MeasurementTimeseriesType measurementTimeseries=measurementTimeseriesDoc.addNewMeasurementTimeseries();measurementTimeseries.setId(""timeseries.""+sosObservation.getObservationID());TimeseriesMetadata timeseriesMetadata=new MeasurementTimeseriesMetadata().setCumulative(false);if(sosObservation.isSetValue()&&sosObservation.getValue().isSetValue()&&sosObservation.getValue().getValue().getClass().isAssignableFrom(TVPValue.class)&&sosObservation.getObservationConstellation().isSetMetadata()&&sosObservation.getObservationConstellation().getMetadata().isSetTimeseriesMetadata()){timeseriesMetadata=sosObservation.getObservationConstellation().getMetadata().getTimeseriesmetadata();}addTimeseriesMetadata(measurementTimeseries,sosObservation.getPhenomenonTime().getGmlId(),timeseriesMetadata);TVPDefaultMetadataPropertyType xbMetaComponent=measurementTimeseries.addNewDefaultPointMetadata();DefaultTVPMeasurementMetadataDocument xbDefMeasureMetaComponent=DefaultTVPMeasurementMetadataDocument.Factory.newInstance();TVPMeasurementMetadataType defaultTVPMeasurementMetadata=xbDefMeasureMetaComponent.addNewDefaultTVPMeasurementMetadata();InterpolationType interpolationType=InterpolationType.Continuous;if(sosObservation.isSetValue()&&sosObservation.getValue().isSetValue()&&sosObservation.getValue().getValue().getClass().isAssignableFrom(TVPValue.class)&&sosObservation.getObservationConstellation().isSetDefaultPointMetadata()&&sosObservation.getObservationConstellation().getDefaultPointMetadata().isSetDefaultTVPMeasurementMetadata()&&sosObservation.getObservationConstellation().getDefaultPointMetadata().getDefaultTVPMeasurementMetadata().isSetInterpolationType()){interpolationType=sosObservation.getObservationConstellation().getDefaultPointMetadata().getDefaultTVPMeasurementMetadata().getInterpolationtype();}defaultTVPMeasurementMetadata.addNewInterpolationType().setHref(interpolationType.getIdentifier());xbDefMeasureMetaComponent.getDefaultTVPMeasurementMetadata().getInterpolationType().setTitle(interpolationType.getTitle());String unit=null;if(sosObservation.getValue() instanceof SingleObservationValue){SingleObservationValue<?> singleObservationValue=(SingleObservationValue<?>)sosObservation.getValue();String time=getTimeString(singleObservationValue.getPhenomenonTime());unit=singleObservationValue.getValue().getUnit();if(sosObservation.getValue().getValue() instanceof QuantityValue){QuantityValue quantityValue=(QuantityValue)singleObservationValue.getValue();if(!quantityValue.getValue().equals(Double.NaN)){String value=Double.toString(quantityValue.getValue().doubleValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}else {if(sosObservation.getValue().getValue() instanceof CountValue){CountValue countValue=(CountValue)singleObservationValue.getValue();if(countValue.getValue()!=null){String value=Integer.toString(countValue.getValue().intValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}}}else {if(sosObservation.getValue() instanceof MultiObservationValues){MultiObservationValues<?> observationValue=(MultiObservationValues<?>)sosObservation.getValue();TVPValue tvpValue=(TVPValue)observationValue.getValue();List<TimeValuePair> timeValuePairs=tvpValue.getValue();unit=tvpValue.getUnit();for(TimeValuePair timeValuePair : timeValuePairs){if(timeValuePair.getValue() instanceof QuantityValue){QuantityValue quantityValue=(QuantityValue)timeValuePair.getValue();if(!quantityValue.getValue().equals(Double.NaN)){String time=getTimeString(timeValuePair.getTime());String value=Double.toString(quantityValue.getValue().doubleValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}else {if(timeValuePair.getValue() instanceof CountValue){CountValue countValue=(CountValue)timeValuePair.getValue();if(countValue.getValue()!=null){String time=getTimeString(timeValuePair.getTime());String value=Integer.toString(countValue.getValue().intValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}}}}else {if(sosObservation.getValue() instanceof MultiObservationValues){MultiObservationValues<?> observationValue=(MultiObservationValues<?>)sosObservation.getValue();TVPValue tvpValue=(TVPValue)observationValue.getValue();List<TimeValuePair> timeValuePairs=tvpValue.getValue();unit=tvpValue.getUnit();for(TimeValuePair timeValuePair : timeValuePairs){if(timeValuePair.getValue() instanceof QuantityValue){QuantityValue quantityValue=(QuantityValue)timeValuePair.getValue();if(!quantityValue.getValue().equals(Double.NaN)){timeValuePair.getTime();String time=getTimeString(timeValuePair.getTime());String value=Double.toString(quantityValue.getValue().doubleValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}else {if(timeValuePair.getValue() instanceof ProfileValue){ProfileValue profileValue=(ProfileValue)timeValuePair.getValue();if(profileValue.isSetValue()){if(profileValue.getValue().iterator().next().getSimpleValue() instanceof QuantityValue){QuantityValue quantityValue=(QuantityValue)profileValue.getValue().iterator().next().getSimpleValue();if(!quantityValue.getValue().equals(Double.NaN)){timeValuePair.getTime();String time=getTimeString(timeValuePair.getTime());String value=Double.toString(quantityValue.getValue().doubleValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}}}else {if(timeValuePair.getValue() instanceof CountValue){CountValue countValue=(CountValue)timeValuePair.getValue();if(countValue.getValue()!=null){String time=getTimeString(timeValuePair.getTime());String value=Integer.toString(countValue.getValue().intValue());addValuesToMeasurementTVP(measurementTimeseries.addNewPoint().addNewMeasurementTVP(),time,value);}}}}}}}}if(unit!=null&&!unit.isEmpty()){defaultTVPMeasurementMetadata.addNewUom().setCode(unit);}else {OmObservableProperty observableProperty=(OmObservableProperty)sosObservation.getObservationConstellation().getObservableProperty();if(observableProperty.isSetUnit()){defaultTVPMeasurementMetadata.addNewUom().setCode(observableProperty.getUnit());}}xbMetaComponent.set(xbDefMeasureMetaComponent);return measurementTimeseriesDoc;}"
2777	"@Override public boolean equals(Object object){if(object instanceof Region){Region region1=(Region)object;return ((this.name==region1.name||(this.name!=null&&region1.name!=null&&this.name.equals(region1.name)))&&(this.type==region1.type||(this.type!=null&&region1.type!=null&&this.type.equals(region1.type)))&&(this.code==region1.code||(this.code!=null&&region1.code!=null&&this.code.equals(region1.code)))&&(this.id==region1.id));}else {return false;}}"
2778	"@Override public void walkthroughHints(){super.walkthroughHints();ArrayList<DomainSpecificDataHint> al=ConstraintsData.data.get(getKey());valueList=new ArrayList<DomainSpecificDataHint>();for(DomainSpecificDataHint entry : al){valueList.add(entry);}for(Hint hint : getHints()){if(DomainSpecificDataHint.class.isInstance(hint)){DomainSpecificDataHint dsdh=((DomainSpecificDataHint)hint);String key=dsdh.getKey();Comparable<?> value=dsdh.getValue();if(value!=null){Iterator<Entry<String,ArrayList<DomainSpecificDataHint>>> it=ConstraintsData.data.entrySet().iterator();while(it.hasNext()){Entry<String,ArrayList<DomainSpecificDataHint>> pairs=it.next();if(pairs.getKey()==key){ArrayList<DomainSpecificDataHint> intList=new ArrayList<DomainSpecificDataHint>();for(DomainSpecificDataHint c : al){if(c.notAppliesTo(dsdh)){intList.add(c);}}for(DomainSpecificDataHint c : intList){valueList.remove(c);}}}if(valueList.size()==0){System.out.println(""Null"");}}}}}"
2779	"public void writeLoadFromCursorDefinition(BaseTableDefinition tableDefinition,JavaWriter javaWriter,boolean isModelContainerAdapter) throws IOException{if(isForeignKey){javaWriter.emitEmptyLine();javaWriter.emitSingleLineComment(""Begin Loading %1s Model Foreign Key"",columnFieldName);if(!fieldIsModelContainer&&!isModelContainerAdapter&&isModel){ColumnAccessModel columnAccessModel=new ColumnAccessModel(manager,this,isModelContainerAdapter);for(ForeignKeyReference foreignKeyReference : foreignKeyReferences){javaWriter.emitStatement(ModelUtils.getColumnIndex(foreignKeyReference.columnName()));}ModelUtils.writeColumnIndexCheckers(javaWriter,foreignKeyReferences);MockConditionQueryBuilder conditionQueryBuilder=new MockConditionQueryBuilder().appendForeignKeyReferences(columnFieldType+tableDefinition.databaseWriter.classSeparator+TableDefinition.DBFLOW_TABLE_TAG,columnName,foreignKeyReferences);String rawConditionStatement=String.format(""new Select().from(%1s).where().%1s.querySingle()"",ModelUtils.getFieldClass(columnFieldType),conditionQueryBuilder);AdapterQueryBuilder adapterQueryBuilder=new AdapterQueryBuilder().appendVariable(false);adapterQueryBuilder.append(""."").append(columnAccessModel.getSetterReferenceColumnFieldName());if(!columnAccessModel.isPrivate()){adapterQueryBuilder.appendSpaceSeparated(""="");}adapterQueryBuilder.append(rawConditionStatement);if(columnAccessModel.isPrivate()){adapterQueryBuilder.append("")"");}javaWriter.emitStatement(adapterQueryBuilder.getQuery());javaWriter.endControlFlow();}else {if(isModelContainerAdapter){javaWriter.emitSingleLineComment(""Writing for container adapter load from cursor for containers"");}else {javaWriter.emitSingleLineComment(""Writing normal adapter load from cursor for containers"");}for(ForeignKeyReference foreignKeyReference : foreignKeyReferences){javaWriter.emitStatement(ModelUtils.getColumnIndex(foreignKeyReference.columnName()));}ModelUtils.writeColumnIndexCheckers(javaWriter,foreignKeyReferences);String modelContainerName="""";if(isModelContainerAdapter){if(isModel){modelContainerName=ModelUtils.getVariable(isModelContainerAdapter)+columnFieldName;javaWriter.emitStatement(""ModelContainer %1s = %1s.getInstance(%1s.newDataInstance(), %1s.class)"",modelContainerName,ModelUtils.getVariable(true),ModelUtils.getVariable(true),foreignKeyTableClassName);}else {modelContainerName=ModelUtils.getVariable(isModelContainerAdapter);}}else {if(fieldIsModelContainer){AdapterQueryBuilder containerBuilder=new AdapterQueryBuilder().appendVariable(isModelContainerAdapter).append(""."").append(columnFieldName).appendSpaceSeparated(""="").append(""new "").append(columnFieldActualType).appendParenthesisEnclosed(ModelUtils.getFieldClass(columnFieldType));javaWriter.emitStatement(containerBuilder.getQuery());}}for(ForeignKeyReference foreignKeyReference : foreignKeyReferences){ColumnAccessModel columnAccessModel=new ColumnAccessModel(this,foreignKeyReference);LoadFromCursorModel loadFromCursorModel=new LoadFromCursorModel(columnAccessModel);loadFromCursorModel.setIsNullable(isNullable());loadFromCursorModel.setModelContainerName(modelContainerName);loadFromCursorModel.setIsModelContainerAdapter(isModelContainerAdapter);loadFromCursorModel.write(javaWriter);}if(isModelContainerAdapter&&isModel&&fieldIsModelContainer){javaWriter.emitStatement(""%1s.put(\""%1s\"",%1s.getData())"",ModelUtils.getVariable(true),columnFieldName,modelContainerName);javaWriter.nextControlFlow(""else"");javaWriter.emitStatement(""%1s.put(\""%1s\"", null)"",ModelUtils.getVariable(true),columnFieldName);}javaWriter.endControlFlow();}javaWriter.emitSingleLineComment(""End"");javaWriter.emitEmptyLine();}else {ColumnAccessModel columnAccessModel=new ColumnAccessModel(manager,this,isModelContainerAdapter);LoadFromCursorModel loadFromCursorModel=new LoadFromCursorModel(columnAccessModel);loadFromCursorModel.setModelContainerName(columnName);loadFromCursorModel.setIsNullable(isNullable());loadFromCursorModel.writeSingleField(javaWriter);}}"
2780	"@Override protected void populateViewHolder(FirechatMsgViewHolder firechatMsgViewHolder,ChatMessage chatMessage,int i){mProgressBar.setVisibility(ProgressBar.INVISIBLE);if(chatMessage.getName().equals(mUsername)&&SingletonCM.getInstance().getUserIcon().equals(mPhotoUrl)){firechatMsgViewHolder.setIsSender(true);}else {firechatMsgViewHolder.setIsSender(false);}firechatMsgViewHolder.msgText.setText(chatMessage.getText());firechatMsgViewHolder.userText.setText(chatMessage.getName());mUsername=mFirebaseUser.getDisplayName();mPhotoUrl=mFirebaseUser.getPhotoUrl().toString();Glide.with(this).load(chatMessage.getPhotoUrl()).into(firechatMsgViewHolder.userImage);}"
2781	"public static String getUpdateTime(Activity activity,long time){int shift=(int)((Calendar.getInstance().getTimeInMillis()-time)/1000L);String message;if(shift<21600){if(shift<5){message=activity.getString(R.string.right_now);}else {if(shift<60){message=shift+"" ""+activity.getString(R.string.sec_past);}else {if(shift<3600){message=shift/60+"" ""+activity.getString(R.string.min_past);}else {message=shift/3600+"" ""+activity.getString(R.string.hour_past);}}}}else {message=new SimpleDateFormat(""dd.MM.yyyy HH:mm"",Locale.ROOT).format(new Date(time));}return message;}"
2782	"public void run(){BufferedReader inFromUser=new BufferedReader(new InputStreamReader(System.in));String command;TwitterEvent e;Object o;while(true){try{System.out.println(""Waiting for you to enter a command: "");command=inFromUser.readLine();o=parseCommand(command);if(o==null){continue;}if(o.getClass().equals(String.class)){if(o.equals(""view"")){}else {if(o.equals(""log"")){}}continue;}e=(TwitterEvent)o;if(e.getEventType().compareTo(""block"")==0){}else {if(e.getEventType().compareTo(""unblock"")==0){}}PaxosMessage message;TweetClient tc;SynodValues synodValues=new SynodValues();if(vars.getPaxosValues().get(vars.getLogSize()-1).getLeader()==vars.getMySite().getId()){message=new Accept(vars.getMySite(),vars.getLogSize(),1,e);for(Site site : sites){tc=new TweetClient(message,site);tc.start();}}else {synodValues.setMyProposal(e);message=new Prepare(vars.getMySite(),vars.getLogSize(),1);for(Site site : sites){tc=new TweetClient(message,site);tc.start();}}UtilityFunctions.writeVars(vars);}catch(IOException exception){exception.printStackTrace();}}}"
2783	"public boolean onTouchEvent(MotionEvent event){if(event.getAction()==MotionEvent.ACTION_DOWN){if(!paused){gameLayout.addView(pauseMenu.getLayout(),new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));}paused=!paused;}return super.onTouchEvent(event);}"
2784	"public String addStepForVcenterDataCenter(Workflow workflow,String waitFor,URI datacenterUri){VcenterDataCenter dataCenter=_dbClient.queryObject(VcenterDataCenter.class,datacenterUri);if(dataCenter!=null&&!dataCenter.getInactive()){List<NamedElementQueryResultList.NamedElement> hostUris=ComputeSystemHelper.listChildren(_dbClient,dataCenter.getId(),Host.class,""label"",""vcenterDataCenter"");for(NamedElementQueryResultList.NamedElement hostUri : hostUris){Host host=_dbClient.queryObject(Host.class,hostUri.getId());if(host!=null&&!host.getInactive()&&NullColumnValueGetter.isNullURI(host.getComputeElement())){waitFor=addStepsForExportGroups(workflow,waitFor,host.getId());waitFor=addStepsForFileShares(workflow,waitFor,host.getId());}}List<NamedElementQueryResultList.NamedElement> clustersUris=ComputeSystemHelper.listChildren(_dbClient,dataCenter.getId(),Cluster.class,""label"",""vcenterDataCenter"");for(NamedElementQueryResultList.NamedElement clusterUri : clustersUris){Cluster cluster=_dbClient.queryObject(Cluster.class,clusterUri.getId());if(cluster!=null&&!cluster.getInactive()){waitFor=addStepsForClusterExportGroups(workflow,waitFor,cluster.getId());}}}return waitFor;}"
2785	"@Override public void output(OutputEvent event){ final Room room=event.getRoom(); final PlayerCharacter player=event.getPlayer(); final String output=event.getOutput();if(isGlobalMsg(room,player)||isRoomMsg(room,player)||isPlayerMsg(room,player)){print(output);}}"
2786	"@Override public void useNetworkData(EntityPlayer player,Side side,byte id,NBTTagCompound nbt){if(id==0){player.openGui(LibVulpes.instance,guiId.MODULARFULLSCREEN.ordinal(),worldObj,this.xCoord,this.yCoord,this.zCoord);}else {if(id==1||id==3){int dimId=nbt.getInteger(""id"");container.setSelectedSystem(dimId);selectSystem(dimId);markDirty();worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);if(id==3){player.openGui(LibVulpes.instance,guiId.MODULARNOINV.ordinal(),worldObj,this.xCoord,this.yCoord,this.zCoord);}}else {if(id==2){SpaceObject station=getSpaceObject();if(station!=null&&station.hasUsableWarpCore()&&station.useFuel(getTravelCost())!=0){SpaceObjectManager.getSpaceManager().moveStationToBody(station,station.getDestOrbitingBody(),200);for(Object plr : worldObj.playerEntities){EntityPlayer player2=(EntityPlayer)plr;if(SpaceObjectManager.getSpaceManager().getSpaceStationFromBlockCoords((int)player2.posX,(int)player2.posZ)==station){player2.triggerAchievement(ARAchivements.givingItAllShesGot);if(!DimensionManager.hasReachedWarp){player2.triggerAchievement(ARAchivements.flightOfThePhoenix);}}}DimensionManager.hasReachedWarp=true;for(BlockPosition vec : station.getWarpCoreLocations()){TileEntity tile=worldObj.getTileEntity(vec.x,vec.y,vec.z);if(tile!=null&&tile instanceof TileWarpCore){((TileWarpCore)tile).onInventoryUpdated();}}}}}}}"
2787	"@Override public void move(int lx,int ly){if(lx==this.getLX()||ly==this.getLY()){Chess.board.spaces[this.getLY()][this.getLX()].setIcon(null);Chess.board.spaces[this.getLY()][this.getLX()].setPiece(null);this.setLX(lx);this.setLY(ly);if(Chess.board.spaces[ly][lx].getPiece()!=null){Piece capturedPiece=Chess.board.spaces[ly][lx].getPiece();capturedPiece.getPlayer().removePiece(capturedPiece);this.getPlayer().getKing().getOpponentsPieces().remove(Chess.board.spaces[ly][lx].getPiece());this.getPlayer().addPoints(capturedPiece.getPointsWorth());System.out.println(""Piece captured. ""+capturedPiece.getPointsWorth()+"" points rewarded to ""+this.getPlayer().name);}Chess.board.spaces[ly][lx].setIcon((Icon)image);Chess.board.spaces[this.getLY()][this.getLX()].setPiece(this);if(!(Chess.board.selected.equals(Chess.board.spaces[this.getLY()][this.getLX()]))){Chess.passTurn();System.out.println(""It is P1 turn: ""+Chess.isP1Turn);System.out.println(""Pass Turn"");this.hasMoved=true;}}}"
2788	"@Override protected void onPostExecute(Boolean desc){if(desc!=null){if(desc){callbackBase.onUpdatedVersion();}else {callbackBase.onNewInstallation();}}try{RepoModel repo=ServiceGenerator.createRepoService();repo.checkVersion().enqueue(new Callback<AppVersionTracking>(){  @Override public void onResponse(  Call<AppVersionTracking> call,  Response<AppVersionTracking> response){    if (response.isSuccessful() && response.body() != null) {      if (mContext != null) {        AppVersionTracking repo_version=response.body();        if (repo_version.checkAgainstCurrent()) {          getAppPrefs().saveRepoVersion(repo_version);          callbackBase.onNormalStart();        }      }    }  }  @Override public void onFailure(  Call<AppVersionTracking> call,  Throwable t){    t.printStackTrace();  }});}catch(Exception ex){ex.printStackTrace();Toast.makeText(mContext,R.string.text_update_check_failed,Toast.LENGTH_SHORT).show();}}"
2789	"public String[] getReceiptItemLines(FSSaleReceiptItem item) throws Exception{Vector<String> lines=new Vector<String>();if(item.getQuantity()<0){lines.add(""??????"");}for(TemplateLine templateLine : itemTemplate){String line=getReceiptItemLine(templateLine,item);lines.add(line);}return lines.toArray(new String[0]);}"
2790	"static public boolean isNumber(PsiElement expression){return expression!=null&&expression.getNode().getElementType()==PhpElementTypes.NUMBER;}"
2791	"public MapNode newNode(NodeType type,Point2D loc){MapNode n=MapNode.nodeFactory(type,loc);n.setOnDeleteRequested(e -> remove(n));if(type==NodeType.Elevator){addElevator(n);}else {currentFloor.addNode(n);}if(n instanceof Kiosk){getHospital().getKiosks().add((Kiosk)n);}nodesOnMap.add(n);return n;}"
2792	"@Override public void run(){while(true){updateRunningApp();if(runningAppCount>0){if(isTest){printTaskInfo();printHighLevelInfo();}else {sendInfo();}}try{Thread.sleep(reportInterval);}catch(InterruptedException e){e.printStackTrace();}}}"
2793	"private void DrawChessText(Canvas canvas){Paint paint=new Paint();paint.setTextSize(20);canvas.drawText(GetTimeDurationFormat(second,minute),text_timer_x,text_timer_y,paint);canvas.drawText(GetTurnedCountString(),text_turned_x,text_turned_y,paint);canvas.drawText(GetChessCountAll(),text_chess_data_x,text_chess_data_y,paint);String txt="""";if(bwAlgorithm.IfGameOver()){StopGameTimer();txt=getResources().getString(R.string.game_over);int black_count=bwAlgorithm.CalculateChessCount(Chessman.ChessmanType.BLACK);int white_count=bwAlgorithm.CalculateChessCount(Chessman.ChessmanType.WHITE);if(Computer_Role==Chessman.ChessmanType.BLACK){if(black_count>white_count){txt=txt+getResources().getString(R.string.computer_win);}else {if(black_count<white_count){txt=txt+getResources().getString(R.string.people_win);}else {txt=txt+getResources().getString(R.string.draw);}}}else {if(white_count>black_count){txt=txt+getResources().getString(R.string.computer_win);}else {if(white_count<black_count){txt=txt+getResources().getString(R.string.people_win);}else {txt=txt+getResources().getString(R.string.draw);}}}}else {txt=(Current_Player==CURRENT_PLAYER.COMPUTER)?getResources().getString(R.string.computer_run):getResources().getString(R.string.people_run);}canvas.drawText(txt,text_debug_data_x,text_debug_data_y,paint);if(computerchess!=null){canvas.drawText(computerchess.Text,text_debug_data_x,text_debug_data_y2,paint);}}"
2794	"@Override protected void onPause(){super.onPause();if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O&&player.getPlayWhenReady()){enterPictureInPictureMode();}}"
2795	"private void mergeRowHeaders(Sheet sheet,Pivot pivot){int rowOffset=pivot.getColumns().size();for(int c=0;c<pivot.getRows().size();++c){int lastNodeId=0;int firstRowWithSameHeader=0;int lastRowWithSameHeader=0;for(int r=0;r<pivot.getRowCount();++r){DimensionNode node=pivot.getRowAt(c,r);if(node.getSurrogateId()==lastNodeId){++lastRowWithSameHeader;}else {mergeInRow(sheet,c,firstRowWithSameHeader+rowOffset,lastRowWithSameHeader+rowOffset);firstRowWithSameHeader=r;lastRowWithSameHeader=r;lastNodeId=node.getSurrogateId();}}mergeInRow(sheet,c,firstRowWithSameHeader+rowOffset,lastRowWithSameHeader+rowOffset);}}"
2796	"public void addLot(String content){String[] lot=content.split(""\\^"",-1);String parentContent=lot[1].trim();String name=lot[2].trim();String description=lot[3].trim();String commod=lot[6].trim();String lotType=lot[7].trim();String visibleToParticipant=lot[4].trim();String teamAccessControl=lot[5].trim();String customOfflineResponse=lot[10].trim();String applyAllItems=lot[9].trim();String requiredResponseYesNo=lot[8].trim();String subContent=lot[14].trim();if(!parentContent.isEmpty()&&name.isEmpty()&&subContent.isEmpty()){click(Element.btnAdd);click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'Lot')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",parentContent);}else {if(!parentContent.isEmpty()&&!name.isEmpty()&&subContent.isEmpty()){clickAlt(By.xpath(""//a[contains(@class,'awmenuLink')]/b[text()='""+parentContent+""']""));click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'Lot')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",name);}else {if(!parentContent.isEmpty()&&!name.isEmpty()&&!subContent.isEmpty()){clickAlt(By.xpath(""//a[contains(@class,'awmenuLink')]/b[text()='""+name+""']""));click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'Lot')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",subContent);}}}inputDescription(Element.txtProjectDescription,description);waitFor(3);populateCommodity(""Commodity"",commod);writeToLogs("">>Lot Type: ""+lotType);switch (lotType){case ""Item Lot - Bid at Item level, compete at Lot level (collect item pricing during bidding)"" :click(Element.rdoItemLot);break;case ""Basket - Bid at Lot level, compete at Lot level (collect item pricing post bidding)"" :click(Element.rdoBasket);break;case ""Basket with No Items - Bid at Lot level, compete at Lot level (do not collect item pricing)"" :click(Element.rdoBasketNoItems);break;case ""Bundle - Bid discounted value at Item level, compete at Lot level (collect item pricing during bidding)"" :click(Element.rdoBundle);break;}waitFor(3);populateDropdown(""Visible to Participant"",visibleToParticipant);waitFor(2);if(lotType.equals(""Basket with No Items - Bid at Lot level, compete at Lot level (do not collect item pricing)"")){populateDropdownAlt(""Customized Offline Response"",customOfflineResponse);}populateChooserMultiple(""Team Access Control"",teamAccessControl);waitFor(2);waitFor(2);populateRadioButton(""Response required for this item or lot"",requiredResponseYesNo);if(applyAllItems.equals(""Yes"")){click(Element.chkApplyToAll);}clickButton(""Done"");}"
2797	"@action(name=""R_eval"",args={@arg(name=""command"",type=IType.STRING,optional=true,doc=@doc(""R command to be evalutated""))},doc=@doc(value=""evaluate the R command"",returns=""value in Gama data type"",examples={@example("" R_eval(\""data(iris)\"")"")})) public Object primREval(IScope scope) throws GamaRuntimeException{String env=System.getProperty(""java.library.path"");if(!env.contains(""jri"")){String RPath=GamaPreferences.External.LIB_R.value(scope).getPath(scope).replace(""libjri.jnilib"","""").replace(""libjri.so"","""").replace(""jri.dll"","""");if(System.getProperty(""os.name"").startsWith(""Windows"")){System.setProperty(""java.library.path"",RPath+"";""+env);}else {System.setProperty(""java.library.path"",RPath+"":""+env);}try{java.lang.reflect.Field fieldSysPath=ClassLoader.class.getDeclaredField(""sys_paths"");fieldSysPath.setAccessible(true);fieldSysPath.set(null,null);}catch(Exception ex){ex.printStackTrace();}}re=Rengine.getMainEngine();if(re==null){re=new Rengine(args,false,new TextConsole());} final String cmd[]=((String)scope.getArg(""command"",IType.STRING)).split(""\r\n"");REXP x=null;for(int i=0;i<cmd.length;i++){if(!cmd[i].equals(""\r\n"")){x=re.eval(cmd[i].trim());System.out.println(cmd[i]+"" ""+x);}}return dataConvert(x);}"
2798	"private EEGDataPackage retrieve(EpochExtraction epochExtraction){List<EEGMarker> markers=buffer.getMarkers();if(markers.size()==0){System.out.println(""No markers"");return null;}int bufferSize=buffer.size();EEGMarker m;int postStimulus=epochExtraction.getPostStimulus();int samples=0;for(int i=markers.size()-1;i>=0;i--){m=markers.get(i);samples=m.getOffset()+postStimulus;if(samples<=bufferSize){break;}}if(samples==0){return null;}return buffer.getAndRemove(samples);}"
2799	"public static TwoHandedVanillaSiteswap createTHS(String siteswap,SortingStrategy<VanillaState> sortingStrategy,boolean reduce) throws InvalidSiteswapException{InvalidSiteswapException cause=null;if(VANILLA_SITESWAP_FORMAT.matcher(siteswap).matches()){try{return createFHS(VanillaThroUtils.stringToIntArray(siteswap),sortingStrategy,reduce);}catch(InvalidSiteswapException ise){cause=ise;}}throw new InvalidSiteswapException(""Could not create siteswap from [""+siteswap+""]"",cause);}"
2800	"public boolean equals(Expression other){return (other!=null&&(other instanceof Polynomial)&&this.equals(other));}"
2801	"private synchronized void addAndNotifyDispatchers(TaskHandler newTask,TaskEntity tasqueEntity) throws InternalErrorException{Hashtable<String,TaskHandler> currentTasks=getCurrentTasks();String hash=tasqueEntity.getHash();if(hash==null){hash=newTask.getHash();TaskHandler oldTask=null;oldTask=currentTasks.get(hash);if(oldTask!=null&&!oldTask.getTask().getId().equals(newTask.getTask().getId())){oldTask.cancel();pushTaskToPersist(oldTask);}TaskEntityDao dao=getTaskEntityDao();for(Iterator<TaskEntity> it=dao.findByHash(hash).iterator();it.hasNext();){TaskEntity remoteTask=it.next();cancelRemoteTask(remoteTask);}newTask.getTask().setStatus(""P"");newTask.getTask().setServer(hostname);newTask.getTask().setHash(hash);tasqueEntity.setStatus(""P"");tasqueEntity.setServer(hostname);tasqueEntity.setHash(hash);getTaskEntityDao().update(tasqueEntity);}else {TaskHandler oldTask=null;oldTask=currentTasks.get(hash);if(oldTask!=null&&!oldTask.getTask().getId().equals(newTask.getTask().getId())){oldTask.cancel();pushTaskToPersist(oldTask);}}populateTaskLog(newTask,tasqueEntity);log.info(""Added task {}"",newTask.toString(),null);ArrayList<LinkedList<TaskHandler>> taskList=getTasksList();synchronized(taskList){LinkedList<TaskHandler> list=taskList.get(newTask.getPriority());list.add(newTask);currentTasks.put(hash,newTask);}if(newTask.getPriority()<MAX_PRIORITY){ArrayList<PriorityTaskQueue> priorityQueues=getPriorityQueues();synchronized(priorityQueues){for(int i=0;i<priorityQueues.size();i++){PriorityTaskQueue queue=priorityQueues.get(i);if(queue!=null){queue.addTask(newTask);}}}}}"
2802	"@Override public void update(){ final Color selected=Color.RED; final Color normal=Color.WHITE; final int x=Gdx.input.getX(); final int y=Gdx.graphics.getHeight()-Gdx.input.getY();playButton.animateColor(x,y,selected,normal);optionsButton.animateColor(x,y,selected,normal);exitButton.animateColor(x,y,selected,normal);gameButton.animateColor(x,y,selected,normal);soundButton.animateColor(x,y,selected,normal);graphicsButton.animateColor(x,y,selected,normal);optionsBackButton.animateColor(x,y,selected,normal);keyBindingsButton.animateColor(x,y,selected,normal);creditsButton.animateColor(x,y,selected,normal);resetPreferencesButton.animateColor(x,y,selected,normal);showGuiButton.animateColor(x,y,Constants.SHOW_GUI?Color.CYAN:Color.RED,Constants.SHOW_GUI?Color.GREEN:Color.GRAY);showPickupIndicatorButton.animateColor(x,y,Constants.SHOW_INDICATOR?Color.CYAN:Color.RED,Constants.SHOW_INDICATOR?Color.GREEN:Color.GRAY);showFPSButton.animateColor(x,y,Constants.SHOW_FPS?Color.CYAN:Color.RED,Constants.SHOW_FPS?Color.GREEN:Color.GRAY);showDamageButton.animateColor(x,y,Constants.SHOW_DAMAGE?Color.CYAN:Color.RED,Constants.SHOW_DAMAGE?Color.GREEN:Color.GRAY);gameBackButton.animateColor(x,y,selected,normal);moveUpBinding1Button.animateColor(x,y,selected,normal);moveUpBinding2Button.animateColor(x,y,selected,normal);moveDownBinding1Button.animateColor(x,y,selected,normal);moveDownBinding2Button.animateColor(x,y,selected,normal);moveLeftBinding1Button.animateColor(x,y,selected,normal);moveLeftBinding2Button.animateColor(x,y,selected,normal);moveRightBinding1Button.animateColor(x,y,selected,normal);moveRightBinding2Button.animateColor(x,y,selected,normal);primaryBinding1Button.animateColor(x,y,selected,normal);primaryBinding2Button.animateColor(x,y,selected,normal);boostBinding1Button.animateColor(x,y,selected,normal);boostBinding2Button.animateColor(x,y,selected,normal);moveSlowBinding1Button.animateColor(x,y,selected,normal);moveSlowBinding2Button.animateColor(x,y,selected,normal);bindingsBackButton.animateColor(x,y,selected,normal);soundBackButton.animateColor(x,y,selected,normal); final int range=4;for(int i=0;i<displayLabels.length;i++){Label displayLabel=displayLabels[i];float target=MathUtils.clamp(i-selectedDisplayMode,-range,range)/(float)range;float actual=1-displayLabel.color.a;if(displayLabel.position.x<0){actual=-actual;}float a=actual+((target-actual)/2)*Math.min(Gdx.graphics.getDeltaTime()*10,2.0);displayLabel.position.x=a*400;displayLabel.position.y=a*200+200;a=1-Math.abs(a);displayLabel.color.a=a;displayLabel.setText(displayLabel.getText(),Math.max(a*48,12));}leftButton.animateColor(x,y,selected,normal);rightButton.animateColor(x,y,selected,normal);fullscreenButton.animateColor(x,y,useFullscreen?Color.CYAN:Color.RED,useFullscreen?Color.GREEN:Color.GRAY);vsyncButton.animateColor(x,y,useVsync?Color.CYAN:Color.RED,useVsync?Color.GREEN:Color.GRAY);graphicsBackButton.animateColor(x,y,selected,normal);}"
2803	"private static boolean isChargeToken(String token){return norm(token.charAt(0))=='-'||token.charAt(0)=='+';}"
2804	"public void manageCounter(){if(_timerCounter!=null){if(_isClicked){if(iterations%2==0){_timerCounter=new TimerCounter(lowPaceSecondsToCount,iterations,1000,_intervalTextView);}else {_timerCounter=new TimerCounter(highPaceSecondsToCount,iterations,1000,_intervalTextView);}_timerCounter.startCounting();}else {_timerCounter.pause();}}else {if(iterations%2==0){_timerCounter=new TimerCounter(lowPaceSecondsToCount,iterations,1000,_intervalTextView);}else {_timerCounter=new TimerCounter(highPaceSecondsToCount,iterations,1000,_intervalTextView);}_timerCounter.startCounting();}}"
2805	"@Override protected Void doInBackground(Void... arg0){ServiceHandler sh=new ServiceHandler();String jsonStr=sh.makeServiceCall(url,ServiceHandler.GET);Log.d(""Response: "",""> ""+jsonStr);mAdapter=new HomeRecycleAdapter(getActivity(),input);if(jsonStr!=null){try{JSONObject json=new JSONObject(jsonStr);newsArray=json.getJSONArray(NEWSFEED);for(int i=0;i<newsArray.length();i++){JSONObject c=newsArray.getJSONObject(i);String id=c.getString(ID);String description=c.getString(DESCRIPTION);String date=c.getString(DATE);String newsurl=c.getString(NEWSURL);Announcement announcement=new Announcement();announcement.setId(Integer.parseInt(id));announcement.setDescription(description);announcement.setTime(date);announcement.setNewsurl(newsurl);input.add(announcement);}}catch(JSONException e){e.printStackTrace();}}else {Log.e(""ServiceHandler"",""Couldn't get any data from the url"");}return null;}"
2806	"private void join(Guild guild,MessageChannel msgChan,Message message,Member member){if(guild.getAudioManager().isConnected()||guild.getAudioManager().isAttemptingToConnect()){return ;}AudioManager audioManager=guild.getAudioManager();audioManager.openAudioConnection(member.getVoiceState().getChannel());audioPlayer.connectToMusicChannel(guild.getAudioManager(),member);}"
2807	"private static int calcVersionCode(int flags){return ((flags&B2_SEPARATE_APT_FLD)!=0?-6:-4);}"
2808	"private int searchInner(Board board,int depth,int ply,int alpha,int beta,boolean isPV,List<Move> pvLine){int score=-INFINITE;Move bestMove=NOMOVE;MoveInfo hashMove=new MoveInfo();int hashFlag=FLAG_ALPHA;int mateThreshold=INFINITE-ply;boolean inCheck=BitBoardUtils.isInCheck(board);if(shouldStop(depth,mNodes)){stop();}if(!isSearching()){return 0;}if(alpha<-mateThreshold){alpha=-mateThreshold;}if(beta>mateThreshold-1){beta=mateThreshold-1;}if(alpha>=beta){return alpha;}if(inCheck){depth+=1;}mNodes+=1;if(depth==0){return quiescenceSearch(board,alpha,beta);}if(board.isRepetition()){return contempt(board);}if(getHashTable().get(board,depth,alpha,beta,hashMove)){score=hashMove.score();Move move=hashMove.move();if(!isPV||(score>alpha&&score<beta)){Board child=board;while(move!=NOMOVE){child=move.tryExecute(child);if(!Move.isValidResult(child)){break;}pvLine.add(move);if(getHashTable().get(child,0,0,0,hashMove)){move=hashMove.move();}else {break;}}return score;}}Board[] moveList=board.getResultingPositions();int reductionDepth=0;int newDepth=depth-1;int legalMoves=0;int oldAlpha=alpha;for(int moveNum=0;moveNum<moveList.length;moveNum++){if(shouldStop(depth,mNodes)){stop();}if(!isSearching()){return 0;}List<Move> line=new LinkedList<Move>();Board currPos=moveList[moveNum];Move currMove=currPos.getLastMove();if(!isPV&&newDepth>3&&moveNum>3&&BitBoardUtils.isInCheck(currPos)&&!inCheck&&currMove.isQuiet(board)){reductionDepth=1;if(moveNum>8){reductionDepth+=1;}newDepth-=reductionDepth;}do {if(alpha==oldAlpha){score=-searchInner(currPos,newDepth,ply+1,-beta,-alpha,isPV,line);}else {if(-searchInner(currPos,newDepth,ply+1,-alpha-1,-alpha,NO_PV,line)>alpha){score=-searchInner(currPos,newDepth,ply+1,-beta,-alpha,IS_PV,line);}}if(reductionDepth>0&&score>alpha){newDepth+=reductionDepth;reductionDepth=0;}else {break;}} while(true);currPos.setScore(score);legalMoves+=1;if(score>alpha){bestMove=currMove;if(score>=beta){hashFlag=FLAG_BETA;alpha=beta;break;}pvLine.clear();pvLine.add(0,currMove);pvLine.addAll(line);hashFlag=FLAG_PV;alpha=score;}}if(legalMoves==0){bestMove=NOMOVE;if(inCheck){alpha=-INFINITE+ply;}else {alpha=contempt(board);}}getHashTable().put(board,bestMove,depth,alpha,hashFlag);return alpha;}"
2809	"@Override public void done(List<Food> list,BmobException e){if(e==null){adapter.addAll(list);if(list.size()<20){recyclerView.showNoMore();}else {int code=e.getErrorCode();if(code==9010||code==9016){Utils.SnackbarShort(recyclerView,""????????????"");}else {if(code==9009){Utils.Log(""????"");}else {Utils.SnackbarShort(recyclerView,""????"");}}}}}"
2810	"public static OutlookService getOutlookService(String accessTokenSource,String userEmailSource){ final String userEmail=userEmailSource; final String accessToken=accessTokenSource;RequestInterceptor requestInterceptor=new RequestInterceptor(){  @Override public void intercept(  RequestFacade request){    request.addHeader(""User-Agent"",""java-tutorial"");    request.addHeader(""client-request-id"",UUID.randomUUID().toString());    request.addHeader(""return-client-request-id"",""true"");    request.addHeader(""Authorization"",String.format(""Bearer %s"",accessToken));    request.addHeader(""Accept"",""application/json"");    if (userEmail != null && !userEmail.isEmpty()) {      request.addHeader(""X-AnchorMailbox"",userEmail);    }  }};OkHttpClient client=new OkHttpClient();String proxy=OwaNotifier.props.getProperty(""proxyHost"");int proxyPort=Integer.parseInt(OwaNotifier.props.getProperty(""proxyPort"",""0""));if(proxy!=null&&proxyPort!=0){client.setProxy(new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxy,proxyPort)));}RestAdapter restAdapter=new RestAdapter.Builder().setEndpoint(""https://graph.microsoft.com"").setRequestInterceptor(requestInterceptor).setLogLevel(LogLevel.FULL).setLog(new RestAdapter.Log(){  @Override public void log(  String msg){    System.out.println(msg);  }}).setClient(new OkClient(client)).build();return restAdapter.create(OutlookService.class);}"
2811	"@PostMapping(""/edit_userinfo"") public Map<String,Object> editUserinfo(JSONObject userinfoJSON){Map<String,Object> response=new LinkedHashMap<String,Object>();String token=userinfoJSON.getString(""token"");if(token==null){response.put(""status"",""error"");response.put(""message"",""lacking token!"");return response;}String wxID=UserEntity.checkAuthToken(token);if(wxID.length()==0){response.put(""status"",""error"");response.put(""message"",""invalid token!"");return response;}UserEntity user=userRepository.findFirstByWxID(wxID);user.setCollege(userinfoJSON.getString(""college""));user.setDepartment(userinfoJSON.getString(""college""));user.setGrade(userinfoJSON.getString(""grade""));user.setMajor(userinfoJSON.getString(""major""));if(userRepository.findFirstByEmail(userinfoJSON.getString(""email""))!=null){response.put(""status"",""error"");response.put(""message"",""duplicate email!"");return response;}user.setEmail(userinfoJSON.getString(""email""));if(userRepository.findFirstByQq(userinfoJSON.getString(""qq""))!=null){response.put(""status"",""error"");response.put(""message"",""duplicate qq!"");return response;}user.setQq(userinfoJSON.getString(""qq""));if(userRepository.findFirstByWechat(userinfoJSON.getString(""wechat""))!=null){response.put(""status"",""error"");response.put(""message"",""duplicate wechat!"");return response;}user.setWechat(userinfoJSON.getString(""wechat""));if(userRepository.findFirstByPhone(userinfoJSON.getString(""phone""))!=null){response.put(""status"",""error"");response.put(""message"",""duplicate phone!"");return response;}user.setPhone(userinfoJSON.getString(""phone""));user.setIntroduction(userinfoJSON.getString(""introduction""));userRepository.save(user);response.put(""status"",""success"");response.put(""id"",user.getId());return response;}"
2812	"public boolean met(MPSTreeNode tNode){return (tNode instanceof SNodeTreeNode)&&(((SNodeTreeNode)tNode).getSNode()==anc);}"
2813	"@Override public boolean onTouchEvent(MotionEvent event){CropImageActivity cropImageActivity=(CropImageActivity)context;if(cropImageActivity.isSaving()){return false;}switch (event.getAction()){case MotionEvent.ACTION_DOWN :for(HighlightView hv : highlightViews){int edge=hv.getHit(event.getX(),event.getY());if(edge!=HighlightView.GROW_NONE){motionEdge=edge;motionHighlightView=hv;lastX=event.getX();lastY=event.getY();motionHighlightView.setMode((edge==HighlightView.MOVE)?HighlightView.ModifyMode.Move:HighlightView.ModifyMode.Grow);break;}}break;case MotionEvent.ACTION_UP :if(motionHighlightView!=null){centerBasedOnHighlightView(motionHighlightView);motionHighlightView.setMode(HighlightView.ModifyMode.None);}motionHighlightView=null;break;case MotionEvent.ACTION_MOVE :if(motionHighlightView!=null){motionHighlightView.handleMotion(motionEdge,event.getX()-lastX,event.getY()-lastY);lastX=event.getX();lastY=event.getY();ensureVisible(motionHighlightView);}break;}switch (event.getAction()){case MotionEvent.ACTION_UP :center(true,true);break;case MotionEvent.ACTION_MOVE :if(getScale()==1.0){center(true,true);}break;}return true;}"
2814	"@Override public void run(){if(this.Mode==2){ChessStrategy chessStrategy=new ChessStrategy();chessStrategy.computerVscomputer(this);}if(this.Mode==1){ChessStrategy chessStrategy=new ChessStrategy();Point t;while(!this.gameOver&&this.Mode==1){System.out.println(""5"");if(!this.isBlack){t=chessStrategy.WhiteNextStep(this.getChesslist());WhiteAddChess(t.getX(),t.getY());}}}}"
2815	"@Override public ProposalVote updateImpl(com.ext.portlet.model.ProposalVote proposalVote) throws SystemException{proposalVote=toUnwrappedModel(proposalVote);boolean isNew=proposalVote.isNew();ProposalVoteModelImpl proposalVoteModelImpl=(ProposalVoteModelImpl)proposalVote;Session session=null;try{session=openSession();if(proposalVote.isNew()){session.save(proposalVote);proposalVote.setNew(false);}else {session.merge(proposalVote);}}catch(Exception e){throw processException(e);}finally{closeSession(session);}FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);if(isNew||!ProposalVoteModelImpl.COLUMN_BITMASK_ENABLED){FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);}else {if((proposalVoteModelImpl.getColumnBitmask()&FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALID.getColumnBitmask())!=0){Object[] args=new Object{proposalVoteModelImpl.getOriginalProposalId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_PROPOSALID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALID,args);args=new Object{proposalVoteModelImpl.getProposalId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_PROPOSALID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALID,args);}if((proposalVoteModelImpl.getColumnBitmask()&FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALIDCONTESTPHASEID.getColumnBitmask())!=0){Object[] args=new Object{proposalVoteModelImpl.getOriginalProposalId(),proposalVoteModelImpl.getOriginalContestPhaseId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_PROPOSALIDCONTESTPHASEID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALIDCONTESTPHASEID,args);args=new Object{proposalVoteModelImpl.getProposalId(),proposalVoteModelImpl.getContestPhaseId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_PROPOSALIDCONTESTPHASEID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_PROPOSALIDCONTESTPHASEID,args);}if((proposalVoteModelImpl.getColumnBitmask()&FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID.getColumnBitmask())!=0){Object[] args=new Object{proposalVoteModelImpl.getOriginalUserId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_USERID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID,args);args=new Object{proposalVoteModelImpl.getUserId()};FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_USERID,args);FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID,args);}}EntityCacheUtil.putResult(ProposalVoteModelImpl.ENTITY_CACHE_ENABLED,ProposalVoteImpl.class,proposalVote.getPrimaryKey(),proposalVote);clearUniqueFindersCache(proposalVote);cacheUniqueFindersCache(proposalVote,isNew);return proposalVote;}"
2816	"private void finishRoutine(){mCountdownTimer.cancel();mRoutineClock.finishRoutine();writeRoutineToDB();stopForeground(true);mNotificationManager.cancel((int)mRoutineClock.getmId());timerIsInitialised=false;if(mRepeatEndMessageTimer!=null){mRepeatEndMessageTimer.cancel();}shouldSpeak=true;routineIsSetUp=false;routineFinished=false;mBuilder=null;cancelItemVibrations();cancelEndVibration();updateLengthPref(0);stopSelf();}"
2817	"private Model(){log=Logger.getLogger(Model.class.getName());folderName=new File(FOLDER_NAME);folderName.mkdir();fileName=new File(FOLDER_NAME+FILE_NAME+FILE_TYPE);events=new EventList();if(!fileName.exists()){try{fileName.createNewFile();}catch(IOException e){log.log(Level.FINE,""Failed to create file"");e.printStackTrace();}}else {events=getFromFile(fileName);}if(AppSettings.getInstance().getIntSetting(SettingName.CURRENT_INDEX)!=null){currentUid=AppSettings.getInstance().getIntSetting(SettingName.CURRENT_INDEX);}else {currentUid=1;}}"
2818	"@Override public void run(){if(null==mHandler){return ;}isRunning=true; final int bufferLength=6; final int dataLength=2;int[] buffer=new int[bufferLength];float[] data=new float[dataLength];int i=0;DataInputStream dataInputStream=new DataInputStream(inputStream);buffer[0]=0xff;while(true){try{while(0==i){if(0==buffer[0]){++i;break;}buffer[0]=dataInputStream.readUnsignedByte();if(0xf1==buffer[0]){mHandler.obtainMessage(MSG_FINGER_LEFT).sendToTarget();}}for(;i<bufferLength;++i){buffer[i]=dataInputStream.readUnsignedByte();}if(!isRunning){return ;}if((0==buffer[0])&&(0xff==buffer[bufferLength-1])){for(int j=0;j<dataLength;++j){data[j]=(buffer[j*2+1]*256+buffer[j*2+2])/10.0;}dataArrayList.add(data);mHandler.obtainMessage(MSG_DATA_READ,-1,-1,dataArrayList.get(dataArrayList.size()-1)).sendToTarget();data=new float[dataLength];i=0;buffer[0]=0xff;while(100<dataArrayList.size()){dataArrayList.remove(0);}}else {int m;for(m=bufferLength-1;m>0;--m){if(0==buffer[m]){break;}}for(i=0;(0<m)&&(m<bufferLength);++i,++m){buffer[i]=buffer[m];}}}catch(IOException e){e.printStackTrace();break;}}mHandler.obtainMessage(MSG_LISTENING_FAILED).sendToTarget();}"
2819	"public boolean isValid(){return isValid;}"
2820	"public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);activity=this;setContentView(R.layout.tutor_home);Bundle data=getIntent().getExtras();if(data.getString(""mail"")!=null){Log.i(TAG,""username: ""+data.getString(""mail""));username=data.getString(""mail"");getUserIdFromMail();Log.i(TAG,""userid: ""+userId);}if(data.getString(""user_id"")!=null){Log.i(TAG,""userid: ""+data.getString(""user_id""));userId=data.getString(""user_id"");}else {}if(data.getInt(""position"")!=0){positionRequired=data.getInt(""position"");}mTitle=mDrawerTitle=getTitle();mDrawerOptions=getResources().getStringArray(R.array.tutor_drawer);mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);mDrawerList=(ListView)findViewById(R.id.tutor_drawer_list);mDrawerFragment=(RelativeLayout)findViewById(R.id.left_drawer_tutor);loadUserInfos();registerGCM();sessionManager=new SessionManager(getApplicationContext());sessionManager.createLoginSession(userId,""1"");toolbar=(Toolbar)findViewById(R.id.my_awesome_toolbar);if(toolbar!=null){toolbar.setTitle(R.string.app_name);setSupportActionBar(toolbar);}getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true);getSupportActionBar().setElevation(25);mDrawerItems=new ArrayList<NavDrawerItem>();mDrawerItems.add(new NavDrawerItem(mDrawerOptions[0],R.drawable.home_icon));mDrawerItems.add(new NavDrawerItem(mDrawerOptions[1],R.drawable.user_icon));mDrawerItems.add(new NavDrawerItem(mDrawerOptions[2],R.drawable.icon_materie));mDrawerItems.add(new NavDrawerItem(mDrawerOptions[3],R.drawable.prenot_icon));mDrawerItems.add(new NavDrawerItem(mDrawerOptions[4],R.drawable.icon_logout));mNavDrawerAdapter=new NavDrawerListAdapter(getApplicationContext(),mDrawerItems);mDrawerList.setAdapter(mNavDrawerAdapter);mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);mDrawerList.setOnItemClickListener(new DrawerItemClickListener());mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,toolbar,R.string.drawer_open,R.string.drawer_close){  public void onDrawerClosed(  View view){    getSupportActionBar().setTitle(mTitle);    invalidateOptionsMenu();  }  public void onDrawerOpened(  View drawerView){    getSupportActionBar().setTitle(mDrawerTitle);    invalidateOptionsMenu();  }};mDrawerLayout.setDrawerListener(mDrawerToggle);if(savedInstanceState==null){selectItem(0);}selectItem(positionRequired);}"
2821	"@Override public Builder withEnPassant(File file){setRightsByBitMask(file!=null?(file.getIndex()|EN_PASSANT_PERMISSION_MASK)<<EN_PASSANT_INDEX:~0b11110000,file!=null);return this;}"
2822	"public void addDclrs(Class clss){TypeEntry clssType=getTypeEntry(clss.name);SymbolTable instanceScope=clssType.getScope(TypeEntry.INSTANCE_SCOPE);Set<String> alreadySeen=new HashSet<String>();for(Dclr dclr : clss.dclrList.declarations){if(dclr.getClass()==Method.class){Method method=(Method)dclr;if(alreadySeen.contains(method.name)){handleSemanticError(""Duplicate definition ""+method.name+"" in type ""+clss.name,clss.line);}alreadySeen.add(method.name);SymbolEntry parentSymbol=instanceScope.getEntryByName(method.name);if(parentSymbol!=null&&parentSymbol instanceof MethodSymbolEntry){handleSemanticError(""Duplicate definition ""+method.name+"" in type ""+clss.name,clss.line);}TypeEntry methodType=null;if(method.type!=null){methodType=Validator.validateType(method.type,this);Validator.validateLibraryInstantiation(methodType,this,method.line);}MethodSymbolEntry methodSymbol=new MethodSymbolEntry(method.name,methodType,method.line);TypeEntry tmpArgType;for(Formals formal : method.formalsList.formals){tmpArgType=Validator.validateType(formal.type,this);methodSymbol.addToArgs(tmpArgType);}clssType.addToScopes(methodSymbol,method.isStatic);}else {Field field=(Field)dclr;TypeEntry fieldType=Validator.validateType(field.type,this);Validator.validateLibraryInstantiation(fieldType,this,field.line);addField(field.name,alreadySeen,instanceScope,fieldType,clssType,field.line);for(String id : field.extraIDs.ids){addField(id,alreadySeen,instanceScope,fieldType,clssType,field.line);}}}}"
2823	"@Override public void onClick(View v){CheckerActivity checkerActivity=(CheckerActivity)getActivity();mTotalMarksObtained=Integer.parseInt(mEditTextView.getText().toString());if(mTotalMarksPerQuestion<mTotalMarksObtained){Log.d(""check"",""Marks exceed the limit"");}else {checkerActivity.replaceFragment(mTotalMarksObtained);}}"
2824	"@Override @HotMethod public void run(){try{thread=Thread.currentThread();int count=0;while(running){boolean busy=false;for(int i=0;i<10;i++){loopStartNS=System.nanoTime();busy|=runAllHighHandlers();busy|=runOneTenthLowHandler(i);}if(lastTimerNS+timerIntervalNS<loopStartNS){lastTimerNS=loopStartNS;runTimerHandlers();}acceptNewHandlers();if(busy){System.out.println(""b ""+count);count=0;pauser.reset();}else {count++;runDaemonHandlers();loopStartNS=Long.MAX_VALUE;pauser.pause();}}}catch(Throwable e){e.printStackTrace();}}"
2825	"void updatePose(){int boneCount=model.bones.countBones();int numTransforms=model.pose.countTransforms();assert (numTransforms==boneCount):numTransforms;assert (skeleton.getBoneCount()==boneCount):boneCount;Transform transform=new Transform();Vector3f translation=new Vector3f();Quaternion rotation=new Quaternion();Vector3f scale=new Vector3f();for(int boneIndex=0;boneIndex<boneCount;boneIndex++){model.pose.copyTransform(boneIndex,transform);transform.getTranslation(translation);transform.getRotation(rotation);transform.getScale(scale);Bone bone=skeleton.getBone(boneIndex);bone.setUserTransforms(translation,rotation,scale);}}"
2826	"private void initializeJPQLFragmentFromSearchExpression(){String searchExpression=criteria.getSearchExpression();if(searchExpression==null){return ;}try{Class<?> entityClass=criteria.getPersistentClass();SearchTranslationManager searchManager=new SearchTranslationManager(criteria.getAlias(),subject,SearchSubsystem.get(entityClass));searchManager.setExpression(searchExpression);String translatedJPQL=searchManager.getJPQLWhereFragment();LOG.debug(""Translated JPQL Fragment was: ""+translatedJPQL);if(translatedJPQL!=null){searchExpressionWhereClause=translatedJPQL;}}catch(SearchExpressionException see){throw see;}catch(RuntimeException re){LOG.error(""Could not get JPQL translation for '""+searchExpression+""': ""+ThrowableUtil.getAllMessages(re,true));throw re;}catch(Exception e){LOG.error(""Could not get JPQL translation for '""+searchExpression+""': ""+ThrowableUtil.getAllMessages(e,true));throw new RuntimeException(e);}}"
2827	"@Override public void onClick(View v){holder.setBookmark(!holder.isBookmark);}"
2828	"public void setVarX(String varX){if(varX!=null){xBox.setSelectedItem(varX);}else {if(xBox.getItemCount()!=0){xBox.setSelectedIndex(0);}}}"
2829	"@Override public void drawOver(Tile tile){PowerEntity entity=tile.entity();if(entity.power>powerSpeed){Draw.alpha(1.0);}else {Draw.alpha(0.5);}for(int i=0;i<laserDirections;i++){drawLaserTo(tile,(tile.getRotation()+i)-laserDirections/2);}}"
2830	"public boolean isVisible(){if(user instanceof SuperUser){return true;}if(isHidden()){return false;}boolean visibleByTime=false;Date visStartDate=getVisibilityStartDate();long effectiveStartDate=0L;Date createdDate=getCreatedDate();if(createdDate!=null){effectiveStartDate=Math.max(createdDate.getTime(),0L);}visStartDate=(visStartDate==null?new Date(effectiveStartDate):visStartDate);Date visEndDate=getVisibilityEndDate();visEndDate=(visEndDate==null?new Date(Long.MAX_VALUE):visEndDate);Date now=new Date();visibleByTime=(now.after(visStartDate)&&now.before(visEndDate));if(user==null){if(isPublic()){return visibleByTime;}else {return false;}}else {if(isVisibleToAuthenticatedUsers()){return visibleByTime;}else {return false;}}}"
2831	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_login);if(android.os.Build.VERSION.SDK_INT>9){StrictMode.ThreadPolicy policy=new StrictMode.ThreadPolicy.Builder().permitAll().build();StrictMode.setThreadPolicy(policy);}prefs=getSharedPreferences(""E-Commerce"",MODE_PRIVATE);registerProgressDialog=new ProgressDialog(this);loginProgressDialog=new ProgressDialog(this);if(!prefs.getString(""LoginStatus"","""").equals("""")&&prefs.getString(""LoginStatus"","""").equals(""Logged in"")){prefs.edit().putString(""LoginStatus"",""Already Logged in"").apply();prefs.edit().putString(""LoginStatus"",""Already Logged in"").commit();Intent loginIntent=new Intent(this,Master.class);loginIntent.putExtra(""loginMethod"",prefs.getString(""LoginMode"",""""));startActivity(loginIntent);finish();}mSignInButton=(SignInButton)findViewById(R.id.googleAuthButton);if(savedInstanceState==null){mainFragment=new facebookLoginFragment();getSupportFragmentManager().beginTransaction().add(android.R.id.content,mainFragment).commit();}else {mSignInProgress=savedInstanceState.getInt(SAVED_PROGRESS,STATE_DEFAULT);mainFragment=(facebookLoginFragment)getSupportFragmentManager().findFragmentById(android.R.id.content);}mGoogleApiClient=buildGoogleApiClient();passwordEdit=(EditText)findViewById(R.id.passWord);emailEdit=(EditText)findViewById(R.id.emailId);loginSubmit=(Button)findViewById(R.id.loginSubmit);newUser=(TextView)findViewById(R.id.newUser);passwordChecked=(CheckBox)findViewById(R.id.checkboxShowPassword);facebookAuthButton=(LoginButton)findViewById(R.id.facebookAuthButton);facebookAuthButton.setReadPermissions(Arrays.asList(""public_profile""));facebookAuthButton.setFragment(mainFragment);newUser.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);customerEmail=prefs.getString(""Email"","""");customerPassword=prefs.getString(""Password"","""");passwordEdit.setHint(""Password"");emailEdit.setHint(""Email Id"");passwordChecked.setChecked(false);passwordChecked.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){  @Override public void onCheckedChanged(  CompoundButton buttonView,  boolean isChecked){    if (isChecked)     passwordEdit.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD); else     if (!isChecked)     passwordEdit.setInputType(129);  }});newUser.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    myDialog=new Dialog(LoginActivity.this);    registerDialog();  }});loginSubmit.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    userPassword=passwordEdit.getText().toString();    email=emailEdit.getText().toString();    if (!userPassword.isEmpty() && !email.isEmpty()) {      new LoginValidation().execute();    } else     if (userPassword.isEmpty() || email.isEmpty())     Toast.makeText(getApplicationContext(),""The email id or password you entered is incorrect"",Toast.LENGTH_SHORT).show();  }});}"
2832	"@Override public void onCompleteRev(Rev rev){revNumberOfChangedProjectFiles.track(projectFileDiffs.size());boolean checkoutSuccessful=true;Timer checkoutTimer=revCheckoutStat.timer();if(!potentialJavaDiffs.isEmpty()||!projectFileDiffs.isEmpty()){checkoutSuccessful=runJob(new CheckoutJob(rev.getName()));}checkoutTimer.track();if(checkoutSuccessful){Map<ICompilationUnit,Diff> javaDiffs=new HashMap<ICompilationUnit,Diff>();boolean refreshSuccessful=true;Timer refreshTimer=revRefreshStat.timer();if(!potentialJavaDiffs.isEmpty()||!projectFileDiffs.isEmpty()){refreshSuccessful=runJob(new RefreshJob(projectFileDiffs,potentialJavaDiffs,javaDiffs));}else {revNumberOfRefreshedResourcesStat.track(0);}refreshTimer.track();Timer importTimer=revImportTimeStat.timer();if(refreshSuccessful&&javaDiffs.size()>0){revImportSizeStat.track(javaDiffs.size());runJob(new ImportJavaCompilationUnits(javaDiffs));}else {revImportSizeStat.track(0);}importTimer.track();}else {revRefreshStat.timer().track();revImportTimeStat.timer().track();revImportSizeStat.track(0);revNumberOfRefreshedResourcesStat.track(0);}updateJavaProjectStructureForMerge=false;}"
2833	"@Override public void onServiceConnected(ComponentName className,IBinder service){AlertService.LocalBinder binder=(AlertService.LocalBinder)service;mService=binder.getService();mBound=true;Log.v(""ZZZ"",""Service bound"");}"
2834	"@Override public void onLocationChanged(Location location){if(!useOnlyGPS()){setLocation(location);}}"
2835	"@SuppressWarnings({""rawtypes"",""unchecked""}) public static T cast(Object obj,ParameterizedType type,ParserConfig mapping){Type rawTye=type.getRawType();if(rawTye==Set.class||rawTye==HashSet.class||rawTye==TreeSet.class||rawTye==List.class||rawTye==ArrayList.class){Type itemType=type.getActualTypeArguments()[0];if(obj instanceof Iterable){Collection collection;if(rawTye==Set.class||rawTye==HashSet.class){collection=new HashSet();}else {if(rawTye==TreeSet.class){collection=new TreeSet();}else {collection=new ArrayList();}}for(Iterator it=((Iterable)obj).iterator();it.hasNext();){Object item=it.next();collection.add(cast(item,itemType,mapping));}return (T)collection;}}if(rawTye==Map.class||rawTye==HashMap.class){Type keyType=type.getActualTypeArguments()[0];Type valueType=type.getActualTypeArguments()[1];if(obj instanceof Map){Map map=new HashMap();for(Map.Entry entry : ((Map<?,?>)obj).entrySet()){Object key=cast(entry.getKey(),keyType,mapping);Object value=cast(entry.getValue(),valueType,mapping);map.put(key,value);}return (T)map;}}if(obj instanceof String){String strVal=(String)obj;if(strVal.length()==0){return null;}}if(type.getActualTypeArguments().length==1){Type argType=type.getActualTypeArguments()[0];if(argType instanceof WildcardType){return (T)cast(obj,rawTye,mapping);}if(rawTye instanceof Class){if(mapping==null){mapping=ParserConfig.global;}ObjectDeserializer deserializer=mapping.getDeserializer(rawTye);if(deserializer!=null){String str=JSON.toJSONString(obj);DefaultJSONParser parser=new DefaultJSONParser(str,mapping);return (T)deserializer.deserialze(parser,type,null);}}}if(rawTye==Map.Entry.class&&obj instanceof Map&&((Map)obj).size()==1){Map.Entry entry=(Map.Entry)((Map)obj).entrySet().iterator().next();return (T)entry;}throw new JSONException(""can not cast to : ""+type);}"
2836	"public boolean hasPermission(User user,Guild guild){boolean hasNormalPerm=BotRole.hasRequiredRole(this.botRole,user,guild);if(!(this.botRole.ordinal()>=BotRole.GUILD_TRUSTEE.ordinal())||!ConfigHandler.getSetting(GuildSpecialPermsEnabledConfig.class,guild)){boolean disapproved=false;for(Role role : user.getRolesForGuild(guild)){if(!ConfigHandler.getSetting(SpecialPermsRoleEnable.class,role)){continue;}if(ConfigHandler.getSetting(PermsCommandWhitelistConfig.class,role).contains(this.getName())||ConfigHandler.getSetting(PermsModuleWhitelistConfig.class,role).contains(this.getName())&&!ConfigHandler.getSetting(PermsModuleWhitelistExemptionsConfig.class,role).contains(this.getName())){return true;}if(ConfigHandler.getSetting(PermsCommandBlacklistConfig.class,role).contains(this.getName())||ConfigHandler.getSetting(PermsModuleWhitelistConfig.class,role).contains(this.getName())&&!ConfigHandler.getSetting(PermsCommandBlacklistConfig.class,role).contains(this.getName())){disapproved=true;}}return !disapproved&&hasNormalPerm;}else {return hasNormalPerm;}}"
2837	"@Override public synchronized boolean connect(String host,int port) throws IOException{if(socket!=null){throw new IOException(""SimpleFTP is already connected. Disconnect first."");}socket=new Socket(host,port);ftpConnector=new SimpleFTPConnector(socket);int statusCode=ftpConnector.getResponse().getStatusCode();int connectionAttempt=0;while(statusCode!=220&&MAX_CONNECTION_ATTEMPTS>=connectionAttempt){statusCode=ftpConnector.getResponse().getStatusCode();connectionAttempt++;}if(statusCode==220){return true;}throw new IOException(""SimpleFTP received an unknown response when connecting to the FTP server: "");}"
2838	"public void clear(){dirModifCheckMap.clear();isMetadataFilesCorrupted=false;}"
2839	"public boolean onCoverRightclick(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity,EntityPlayer aPlayer,float aX,float aY,float aZ){if(((aX>0.375)&&(aX<0.625))||((aSide>3)&&(((aY>0.375)&&(aY<0.625))||((aSide<2)&&(((aZ>0.375)&&(aZ<0.625))||(aSide==2)||(aSide==3)))))){GregTech_API.sWirelessRedstone.put(Integer.valueOf(aCoverVariable),Byte.valueOf((byte)0));aCoverVariable=GT_Utility.stackToInt(aPlayer.inventory.getCurrentItem());aTileEntity.setCoverDataAtSide(aSide,aCoverVariable);GT_Utility.sendChatToPlayer(aPlayer,""Frequency: ""+aCoverVariable);return true;}return false;}"
2840	"public void addScreening(ActionEvent Event) throws IOException{if(datePicker.getValue()!=null&&timesBox.getSelectionModel().getSelectedItem()!=null){boolean clash=false;String datein=datePicker.getValue().toString();String year=datein.substring(0,4);String month=datein.substring(5,7);String day=datein.substring(8,10);String date=day+""/""+month+""/""+year;String movie=VariableTracker.movieTitle;String time=timesBox.getValue();try{JSONObject obj=new JSONObject();try{obj=JSONUtils.getJSONObjectFromFile(""database.json"");}catch(Exception e){System.out.println(e);}JSONArray screenings=obj.getJSONArray(""Screenings"");for(int i=0;i<screenings.length();i++){String sDate=screenings.getJSONObject(i).getString(""date"");String sTime=screenings.getJSONObject(i).getString(""time"");if(sDate.equals(date)&&sTime.equals(time)){clash=true;}}}catch(NullPointerException e){}if(!clash){Screening scr=new Screening(date,time,movie);Parent main=FXMLLoader.load(getClass().getResource(""/staff/ScreeningControl.fxml""));Scene loginscene=new Scene(main);Stage window=(Stage)((Node)Event.getSource()).getScene().getWindow();window.setScene(loginscene);window.show();loginscene.getWindow().centerOnScreen();}else {clashLbl.setText(""Screening already scheduled at this time"");}}}"
2841	"@Override protected void actionPerformed(GuiButton guibutton) throws IOException{super.actionPerformed(guibutton);if(guibutton.id==0){if(filter.materialItem!=null){if(isNew){Mekanism.packetHandler.sendToServer(new NewFilterMessage(Coord4D.get(tileEntity),filter));}else {Mekanism.packetHandler.sendToServer(new EditFilterMessage(Coord4D.get(tileEntity),false,origFilter,filter));}Mekanism.packetHandler.sendToServer(new LogisticalSorterGuiMessage(SorterGuiPacket.SERVER,Coord4D.get(tileEntity),0,0,0));}else {if(filter.materialItem==null){status=EnumColor.DARK_RED+LangUtils.localize(""gui.itemFilter.noItem"");ticker=20;}}}else {if(guibutton.id==1){Mekanism.packetHandler.sendToServer(new EditFilterMessage(Coord4D.get(tileEntity),true,origFilter,null));Mekanism.packetHandler.sendToServer(new LogisticalSorterGuiMessage(SorterGuiPacket.SERVER,Coord4D.get(tileEntity),0,0,0));}}}"
2842	"private void deleteInstanceSpecificationInModel(InstanceSpecification linkInstance,Element jointpointBaseModelElement,Model inBaseModel){InstanceSpecification linkInstanceInBaseModel=(InstanceSpecification)ModelAdapterUtilities.getEquivalentElementInModel(linkInstance,inBaseModel);if(linkInstanceInBaseModel==null){return ;}for(Slot slot : linkInstanceInBaseModel.getSlots()){ValueSpecification valueSpecification=slot.getValues().get(0);if(valueSpecification!=null){if(valueSpecification instanceof InstanceValue){InstanceSpecification instance=((InstanceValue)valueSpecification).getInstance();if(instance!=null&&!(instance==jointpointBaseModelElement)){log.debug(""Removing instance: ""+instance.getQualifiedName()+"" from base model since it is referenced in slot ""+slot.getDefiningFeature().getName());instance.destroy();}}}}linkInstanceInBaseModel.destroy();}"
2843	"protected DLNAThumbnailInputStream getThumbnailInputStream() throws IOException{String languageCode=null;if(media_audio!=null&&format.isVideo()){languageCode=media_audio.getLang();if(StringUtils.isBlank(languageCode)){languageCode=DLNAMediaLang.UND;}}if(languageCode!=null){String code=Iso639.getISO639_2Code(languageCode.toLowerCase());InputStream is=getResourceInputStream(""/images/codes/""+code+"".png"");if(is!=null){return DLNAThumbnailInputStream.toThumbnailInputStream(is);}else {LOGGER.trace(""Flag is missing for language '{}' so use undefined flag"",code);return DLNAThumbnailInputStream.toThumbnailInputStream(getResourceInputStream(""/images/codes/und.png""));}}if(isAvisynth()){return DLNAThumbnailInputStream.toThumbnailInputStream(getResourceInputStream(""/images/logo-avisynth.png""));}return getGenericThumbnailInputStream(null);}"
2844	"@Override public boolean apply(VariableTree variableTree){return !isSimpleType(variableTree.type());}"
2845	"@Override public boolean isReadOnly(){return super.isReadOnly()||(dataSource!=null&&dataSource.isReadOnly());}"
2846	"public static double getBalance(String playerName){try{if(playerName==null){return 0;}else {if(economyMethod!=null&&economyMethod.hasAccount(playerName)){return economyMethod.getAccount(playerName).balance();}}}catch(Exception e){if(!_pastBalanceErr){BetterShopLogger.Severe(""Error looking up player balance \n""+""(this error will only show once)"",e,false);_pastBalanceErr=true;}}return 0;}"
2847	"private static boolean isForeignKeyAssociationFetchAllowed(Field field){return (field.isAnnotationPresent(ManyToOne.class)&&field.getAnnotation(ManyToOne.class).fetch()==Fetch.EAGER)||(field.isAnnotationPresent(OneToOne.class)&&field.getAnnotation(OneToOne.class).fetch()==Fetch.EAGER)&&StringUtils.isBlank(field.getAnnotation(OneToOne.class).mappedBy())||(field.isAnnotationPresent(OneToOne.class)&&StringUtils.isBlank(field.getAnnotation(OneToOne.class).mappedBy()));}"
2848	"private boolean needsToBuildUrl(){if(url==null){return true;}int prevPage=Integer.parseInt(urlParameters.get(activity.getString(R.string.page_key)));if(prevPage!=currPage){return true;}String prevSortCriteria=urlParameters.get(MovieUtility.getSORT_KEY_NAME(activity));String currSortCriteria=MovieUtility.getStringSharedPreference(activity,getString(R.string.pref_sort_key),prevSortCriteria);if(prevSortCriteria==null||!prevSortCriteria.equals(currSortCriteria)){currPage=(int)getResources().getDimension(R.dimen.default_page);if(firstVisiblePositions!=null){firstVisiblePositions.clear();}else {firstVisiblePositions=new HashMap<Integer,Integer>();}return true;}return false;}"
2849	"static long readReverseUInt64(ByteBuffer buf,int numBytes) throws AtomLayerException{return ~readUInt64(buf,numBytes);}"
2850	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_calibration);try{File file=new File(DATABASE_LOCATION);if(file.exists()&&!file.isDirectory()){makeDB(DATABASE_LOCATION,TABLE);}else {Toast.makeText(this,""No file for database"",Toast.LENGTH_LONG).show();}}catch(SQLException e){Toast.makeText(this,e.getMessage(),Toast.LENGTH_LONG).show();Log.d(""exp"",e.getMessage());}}"
2851	"@Override public boolean equals(Object o){if(!(o instanceof Default)){return false;}Default tmp=(Default)o;return true&&tmp.optionalComma.equals(this.optionalComma)&&tmp.keywordArgumentList.equals(this.keywordArgumentList);}"
2852	"@Override public boolean isShowCursorTiming(){return this.showCursorTiming;}"
2853	"@Override public void controlEvent(ControlEvent arg0){if(arg0.isFrom(windowTabs)){String actLbl=windowTabs.getActButLbl();Fields.resetMessage();if(actLbl==null){updateView(null);}else {if(actLbl.equals(""ROBOT1"")){updateView(WindowTab.ROBOT1);background.setBackgroundHeight(0);}else {if(actLbl.equals(""ROBOT2"")){updateView(WindowTab.ROBOT2);background.setBackgroundHeight(0);}else {if(actLbl.equals(""CREATE"")){updateView(WindowTab.CREATE);}else {if(actLbl.equals(""EDIT"")){updateView(WindowTab.EDIT);}else {if(actLbl.equals(""SCENARIO"")){updateView(WindowTab.SCENARIO);}else {if(actLbl.equals(""CAMERA"")){updateView(WindowTab.CAMERA);}else {if(actLbl.equals(""MISC"")){updateView(WindowTab.MISC);}else {updateView(null);}}}}}}}}}else {if(arg0.isFrom(""WO"")||arg0.isFrom(""Shape"")||arg0.isFrom(""EditTab"")||arg0.isFrom(""ScenarioOpt"")||arg0.isFrom(""CamObjects"")||arg0.isFrom(""WOMgmt"")){updateUIContentPositions();}if(arg0.isFrom(""WO"")){WorldObject selectedWO=getSelectedWO();if(selectedWO!=null){updateEditWindowFields(selectedWO);}}else {if(arg0.isFrom(""Fixture"")){WorldObject selectedWO=getSelectedWO();if(menu==WindowTab.EDIT&&selectedWO instanceof Part){Part p=(Part)selectedWO;Fixture refFixture=(Fixture)getDropdown(""Fixture"").getSelectedItem();if(p.getFixtureRef()!=refFixture){app.updateScenarioUndo(new PartUndoFixRef(p));p.setFixtureRef(refFixture);}}}else {if(arg0.isFrom(""Scenario"")){getDropdown(""WO"").clear();}else {if(arg0.isFrom(""RobotEE"")){RoboticArm r=app.getActiveRobot();if(r!=null){MyDropdownList ddl=(MyDropdownList)arg0.getController();r.setActiveEE((Integer)ddl.getSelectedItem());}}else {if(arg0.isFrom(WGUI_Buttons.CamObjPreview)){CameraObject o=(CameraObject)getDropdown(""CamObjects"").getSelectedItem();RMatrix mdlOrient=o.getLocalOrientation();Pointer p=getButton(WGUI_Buttons.CamObjPreview).getPointer();int x=p.x();int y=p.y();CamSelectArea a=o.getSelectAreaClicked(x,y,mdlOrient);if(a!=null){if(app.mouseButton==PConstants.RIGHT&&!a.isIgnored()){a.ignoreArea();}else {if(app.mouseButton==PConstants.LEFT&&!a.isEmphasized()){a.emphasizeArea();}else {a.clearArea();}}}o.updateModelPreview(mdlOrient);updateUIContentPositions();}else {if(arg0.isFrom(""WOFillR"")||arg0.isFrom(""WOFillG"")||arg0.isFrom(""WOFillB"")){if(menu==WindowTab.CREATE){Textarea txa=getTextArea(""WOFillSmp"");if(txa!=null){txa.setColorBackground(getFillColor());}}else {if(menu==WindowTab.EDIT){WorldObject wo=getSelectedWO();if(wo!=null){int newFill=getFillColor();wo.getModel().setFillValue(newFill);}}}}else {if(arg0.isFrom(""WOOutlineR"")||arg0.isFrom(""WOOutlineG"")||arg0.isFrom(""WOOutlineB"")){if(menu==WindowTab.CREATE){Textarea txa=getTextArea(""WOOutlineSmp"");if(txa!=null){txa.setColorBackground(getStrokeColor());}}else {if(menu==WindowTab.EDIT){WorldObject wo=getSelectedWO();if(wo!=null&&!(wo.getModel() instanceof ComplexShape)){int newStroke=getStrokeColor();wo.getModel().setStrokeValue(newStroke);}}}}else {if(arg0.isFrom(WGUI_Buttons.Shift)){app.shiftUpkeep();}else {if(arg0.isFrom(WGUI_Buttons.RobotToggleTrace)){if(!app.traceEnabled()){app.getRobotTrace().addPt(null);}}else {if(arg0.isFrom(WGUI_Buttons.RobotToggleActive)){updateWindowTabs();updateUIContentPositions();if(app.getActiveRobot()!=app.getRobot(0)){app.setRobot(0);}}else {if(arg0.isFrom(WGUI_Buttons.CamToggleActive)){updateWindowTabs();updateUIContentPositions();}}}}}}}}}}}}}"
2854	"public void shoot(Player enemy){for(int i=0;i<Game.numMobs;i++){if(dir==RIGHT){if(enemy.mobs[i].getCurrRow()==currRow&&currColumn<enemy.mobs[i].getCurrColumn()){enemy.mobs[i].setHealth(enemy.mobs[i].getHealth()-1);}}if(dir==LEFT){if(enemy.mobs[i].getCurrRow()==currRow&&currColumn>enemy.mobs[i].getCurrColumn()){enemy.mobs[i].setHealth(enemy.mobs[i].getHealth()-1);}}if(dir==UP){if(enemy.mobs[i].getCurrColumn()==currColumn&&currRow<enemy.mobs[i].getCurrRow()){enemy.mobs[i].setHealth(enemy.mobs[i].getHealth()-1);}}if(dir==DOWN){if(enemy.mobs[i].getCurrColumn()==currColumn&&currRow>enemy.mobs[i].getCurrRow()){enemy.mobs[i].setHealth(enemy.mobs[i].getHealth()-1);}}}}"
2855	"private boolean shouldLoadMore(){return !loading&&mRecyclerViewHelper!=null&&mRecyclerViewHelper.recyclerView.isAttachedToWindow()&&(totalItemCount-visibleItemCount)<(firstVisibleItem+visibleThreshold-1)&&hasMoreElements();}"
2856	"public static boolean isBlockFree(Block block,int metadata){return block==null||BlockUtils.isWater(block.getDefaultState())||block.equals(Blocks.LEAVES)||block.equals(Blocks.LEAVES2)||(block.equals(Blocks.DOUBLE_PLANT)&&Utils.testFlag(metadata,0x08))||block.equals(Blocks.GRASS);}"
2857	"public String refresh0(){boolean isMobPulling=false;if(this.isSliderMode()){long value=0;for(Object be : listData){if(be instanceof IPersistentEntity){long id=((IPersistentEntity)be).getId();if(value==0){value=id;continue;}if(conditions.getPullAction().equals(""new"")&&(value<id)){value=id;}else {if(conditions.getPullAction().equals(""history"")&&(value>id)){value=id;}}}else {if(be instanceof Long){if(conditions.getPullAction().equals(""new"")&&(value<(Long)be)){value=(Long)be;}else {if(conditions.getPullAction().equals(""history"")&&(value>(Long)be)){value=(Long)be;}}}}}isMobPulling=true;conditions.setPullId(value);UserContext.getUserContext().setPullAction(conditions.getPullAction());UserContext.getUserContext().setPullId(value);}else {if(!this.disableRefreshClear&&this.listData!=null){this.listData.clear();}}try{OOEEContext ooeeContext=OOEEContextFactory.createOOEEContext();DefaultEvaluationContext evaContext=new DefaultEvaluationContext();evaContext.setVariableValue(""tableCondition"",conditions);evaContext.setVariableValue(""page"",AjaxContextHelper.getAjaxContext());evaContext.setVariableValue(""table"",this);evaContext.setVariableValue(""formId"",AjaxContextHelper.getAjaxContext().getEntityPrefix());ooeeContext.setDefaultEvaluationContext(evaContext);ooeeContext.setEvaluationContextObject(ODContext.LOCAL_TAG,evaContext);ooeeContext.setEvaluationContextObject(ODContext.GLOBAL_TAG,evaContext);List<Object> rows=(List<Object>)queryExpr.evaluate(ooeeContext);if(rows==null){rows=Collections.emptyList();}if(isMobPulling){String newRows=refreshPull0(rows);if(UserContext.getUserContext().isPullNew()){rows.addAll(this.listData);this.listData=rows;}else {if(UserContext.getUserContext().isPullRefresh()){this.listData=rows;}else {this.listData.addAll(rows);}}return newRows;}else {this.listData=rows;return refreshTable0(rows);}}catch(EvaluationException e){logger.error(""error occurrs while refreshing table: ""+this.getId(),e);return """";}finally{UserContext.getUserContext().setPullId(0);UserContext.getUserContext().setPullAction(null);}}"
2858	"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){int rotation=HexUtils.getMetaBitBiInt(META_ROTATION_0,META_ROTATION_1,world,x,y,z);if((rotation==0&&!world.isSideSolid(x,y,z+1,NORTH))||(rotation==1&&!world.isSideSolid(x-1,y,z,EAST))||(rotation==2&&!world.isSideSolid(x,y,z-1,SOUTH))||(rotation==3&&!world.isSideSolid(x+1,y,z,WEST))){this.dropBlockAsItem(world,x,y,z,0,0);world.setBlockToAir(x,y,z);}if(block.canProvidePower()){boolean state=HexUtils.getMetaBit(META_STATE,world,x,y,z);boolean powered=world.isBlockIndirectlyGettingPowered(x,y,z);if((!state&&powered)||(state&&!powered)){HexUtils.flipMetaBit(META_STATE,HexUtils.META_NOTIFY_UPDATE,world,x,y,z);world.playAuxSFXAtEntity(null,1003,x,y,z,0);}}}"
2859	"protected void applyHelper(JCExpression that){LinkedList<ListBuffer<JCStatement>> check0=markBlock();JCExpression savedCondition=condition;Symbol savedResultSym=resultSym;JCExpression savedResultExpr=resultExpr;Symbol savedExceptionSym=exceptionSym;JCIdent savedThisId=currentThisId;JCExpression savedThisExpr=currentThisExpr;Map<Object,JCExpression> savedParamActuals=paramActuals;Map<Symbol,JCVariableDecl> savedpreparams=preparams;ListBuffer<JCStatement> savedOldStatements=oldStatements;JCIdent savedFresh=currentFresh;JCIdent savedPreLabel=preLabel;Symbol savedEnclosingMethod=enclosingMethod;Symbol savedEnclosingClass=enclosingClass;Map<TypeSymbol,Type> savedTypeVarMapping=typevarMapping;Map<TypeSymbol,Type> newTypeVarMapping=typevarMapping;Name savedOldLabel=defaultOldLabel;applyNesting++;Map<Symbol,Map<Object,JCExpression>> mapParamActuals=new HashMap<Symbol,Map<Object,JCExpression>>();boolean isSuperCall=false;boolean isThisCall=false;JCVariableDecl exceptionDeclCall=translatingJML&&esc?null:treeutils.makeVarDef(syms.exceptionType,exceptionNameCall,methodDecl.sym,that.pos);try{JCIdent newThisId=null;JCExpression newThisExpr=null;List<JCExpression> trArgs;List<JCExpression> typeargs;JCExpression meth=null;JCMethodInvocation apply=null;JCNewClass newclass=null;MethodSymbol calleeMethodSym=null;if(that instanceof JCMethodInvocation){apply=(JCMethodInvocation)that;meth=apply.meth;trArgs=apply.args;typeargs=apply.typeargs;}else {if(that instanceof JCNewClass){newclass=(JCNewClass)that;trArgs=newclass.args;typeargs=newclass.typeargs;}else {error(that,""Invalid argument type for JmlAssertionAdder.applyHelper"");return ;}}JCExpression trExpr=null;Type receiverType;if(meth instanceof JCIdent){receiverType=currentThisExpr!=null?currentThisExpr.type:classDecl.type;JCIdent id=(JCIdent)meth;if(utils.isJMLStatic(id.sym)){meth=convertExpr(meth);}isSuperCall=id.name.equals(names._super);isThisCall=id.name.equals(names._this);typeargs=convert(typeargs);trArgs=convertArgs(that,trArgs,meth.type.asMethodType().argtypes,(id.sym.flags()&Flags.VARARGS)!=0);calleeMethodSym=(MethodSymbol)id.sym;newTypeVarMapping=typevarMapping=typemapping(receiverType,calleeMethodSym,typeargs);JCMethodInvocation mExpr=M.at(that).Apply(typeargs,meth,trArgs);mExpr.setType(that.type);mExpr.varargsElement=null;trExpr=mExpr;newThisExpr=utils.isJMLStatic(id.sym)?null:splitExpressions?newTemp(currentThisExpr):currentThisExpr;newThisId=newThisExpr instanceof JCIdent?(JCIdent)newThisExpr:null;enclosingMethod=id.sym;enclosingClass=id.sym.owner;}else {if(meth instanceof JCFieldAccess){JCFieldAccess fa=(JCFieldAccess)meth;receiverType=fa.selected.type;newTypeVarMapping=typevarMapping=typemapping(receiverType,fa.sym,null);JCExpression convertedReceiver=convertExpr(fa.selected);if(!utils.isJMLStatic(fa.sym)){if(splitExpressions){newThisExpr=newTemp(convertedReceiver);newThisId=(JCIdent)newThisExpr;}else {newThisExpr=convertedReceiver;newThisId=null;}if(translatingJML&&(fa.selected instanceof JCIdent&&localVariables.containsKey(((JCIdent)fa.selected).sym))){}else {if(javaChecks){JCExpression e=treeutils.makeNotNull(fa.selected.pos,newThisExpr);if(condition!=null){e=treeutils.makeImplies(fa.selected.pos,condition,e);}addAssert(fa,translatingJML?Label.UNDEFINED_NULL_DEREFERENCE:Label.POSSIBLY_NULL_DEREFERENCE,e);}}}typeargs=convert(typeargs);trArgs=convertArgs(that,trArgs,meth.type.asMethodType().argtypes,(fa.sym.flags()&Flags.VARARGS)!=0);JCFieldAccess fameth=(JCFieldAccess)M.at(meth.pos).Select(!utils.isJMLStatic(fa.sym)?newThisExpr:convertedReceiver,fa.sym);calleeMethodSym=(MethodSymbol)fa.sym;JCMethodInvocation mExpr=M.at(that).Apply(typeargs,fameth,trArgs);mExpr.setType(that.type);mExpr.varargsElement=null;trExpr=mExpr;enclosingMethod=fa.sym;enclosingClass=fa.sym.owner;}else {if(newclass!=null){calleeMethodSym=(MethodSymbol)newclass.constructor;enclosingMethod=calleeMethodSym;enclosingClass=calleeMethodSym.owner;JCExpression convertedReceiver=convertExpr(newclass.encl);receiverType=newclass.clazz.type;newTypeVarMapping=typevarMapping=typemapping(newclass.clazz.type,null,null);if(javaChecks&&convertedReceiver!=null&&!treeutils.isATypeTree(convertedReceiver)){JCExpression e=treeutils.makeNotNull(newclass.encl.pos,convertedReceiver);addAssert(newclass.encl,translatingJML?Label.UNDEFINED_NULL_DEREFERENCE:Label.POSSIBLY_NULL_DEREFERENCE,e);}typeargs=convert(typeargs);trArgs=convertArgs(that,trArgs,calleeMethodSym.type.asMethodType().argtypes,(calleeMethodSym.flags()&Flags.VARARGS)!=0);JCNewClass expr=M.at(that).NewClass(convertedReceiver,typeargs,convert(newclass.clazz),trArgs,convert(newclass.def));expr.constructor=newclass.constructor;expr.constructorType=newclass.constructorType;expr.varargsElement=null;expr.setType(that.type);trExpr=expr;}else {error(that,""Unknown alternative in interpreting method call"");return ;}}}java.util.List<Pair<MethodSymbol,Type>> overridden=parents(calleeMethodSym,receiverType);boolean uma=useMethodAxioms&&!calleeMethodSym.owner.getQualifiedName().toString().equals(Strings.jmlSpecsPackage+"".JML"")&&calleeMethodSym.params!=null;;boolean doTranslations=rac||!translatingJML||(!uma&&localVariables.isEmpty());if(!doTranslations&&that instanceof JCNewClass){doTranslations=true;}boolean calleeIsFunction=attr.isFunction(calleeMethodSym);if(calleeIsFunction&&translatingJML){doTranslations=false;}if(!doTranslations){List<JCExpression> ntrArgs=trArgs;if(useMethodAxioms||!localVariables.isEmpty()||calleeIsFunction){boolean details=true&&!calleeMethodSym.owner.getQualifiedName().toString().equals(Strings.JMLClass);currentThisId=newThisId;currentThisExpr=newThisExpr;if(details&&!isHelper(calleeMethodSym)&&!startInvariants(calleeMethodSym.owner,that)){for(Type t : parents(calleeMethodSym.owner.type,false)){ClassSymbol csym=(ClassSymbol)t.tsym;for(JmlTypeClause clause : specs.getSpecs(csym).clauses){if(clause.token!=JmlTokenKind.INVARIANT){continue;}if(utils.isJMLStatic(calleeMethodSym)&&!utils.isJMLStatic(clause.modifiers,csym)){continue;}if(!utils.jmlvisible(null,classDecl.sym,csym,clause.modifiers.flags,methodDecl.mods.flags)){continue;}JCExpression e=convertJML(((JmlTypeClauseExpr)clause).expression);e=treeutils.makeImplies(condition.pos,condition,e);if(assumingPureMethod){addAssume(that,Label.UNDEFINED_PRECONDITION,e,clause,clause.source());}else {if(!addingAxioms){addAssert(that,Label.UNDEFINED_PRECONDITION,e,clause,clause.source());}}}}endInvariants(calleeMethodSym.owner);}if(!utils.isJMLStatic(calleeMethodSym)){ntrArgs=ntrArgs.prepend(newThisExpr);}if(!attr.hasAnnotation(calleeMethodSym,JmlTokenKind.FUNCTION)&&!useNamesForHeap){JCExpression heap=treeutils.makeIdent(that.pos,heapSym);ntrArgs=ntrArgs.prepend(heap);}JCBlock bl=addMethodAxioms(that,calleeMethodSym,overridden);if(details){if(inOldEnv){escAddToOldList(oldenv,bl);}else {if(nonignoredStatements!=null){nonignoredStatements.add(bl);}else {if(axiomBlock!=null){axiomBlock.stats=axiomBlock.stats.append(bl);}else {addStat(bl);}}}WellDefined info=wellDefinedCheck.get(calleeMethodSym);if(info!=null&&!info.alltrue){MethodSymbol s=info.sym;if(s!=null&&localVariables.isEmpty()&&!treeutils.isTrueLit(info.wellDefinedExpression)){JCExpression e=treeutils.makeMethodInvocation(that,null,s,convertCopy(ntrArgs));e=treeutils.makeImplies(condition.pos,condition,e);if(assumingPureMethod){addAssume(that,Label.UNDEFINED_PRECONDITION,e,info.pos,info.source);}else {addAssert(that,Label.UNDEFINED_PRECONDITION,e,info.pos,info.source);}}}}MethodSymbol newCalleeSym=oldHeapMethods.get(oldenv==null?null:oldenv.name).get(calleeMethodSym);if(newCalleeSym==null){log.error(""jml.internal"",""No logical function for method ""+calleeMethodSym.getQualifiedName());}result=eresult=treeutils.makeMethodInvocation(that,null,newCalleeSym,ntrArgs);}else {if(utils.isJMLStatic(calleeMethodSym)||trArgs.isEmpty()){result=eresult=trExpr;}else {result=eresult=treeutils.makeMethodInvocation(that,newThisExpr,calleeMethodSym,trArgs);}}return ;}Type resultType=null;if(meth!=null){resultType=meth.type.getReturnType();}if(newclass!=null){resultType=newclass.clazz.type;}boolean isVoid=resultType.getTag()==TypeTag.VOID;JCIdent resultId=null;if(!isVoid){if(esc&&!doTranslations){result=eresult=trExpr;return ;}addStat(comment(that,""Declaration for return value: ""+that.toString(),methodDecl.source()));if(rac){if(resultType instanceof Type.CapturedType){resultType=((Type.CapturedType)resultType).getUpperBound();}resultSym=resultType.tsym;resultId=currentFresh=newTempNull(that,resultType);}else {if(newclass==null){if(resultType instanceof Type.CapturedType){resultType=((Type.CapturedType)resultType).getUpperBound();}resultSym=resultType.tsym;resultId=newTemp(that,resultType);}else {Type t=that.type;if(t instanceof Type.TypeVar){t=paramActuals.get(t.toString()).type;}JCVariableDecl decl=treeutils.makeVarDef(t,names.fromString(Strings.newObjectVarString+that.pos),null,that.pos);addStat(decl);resultSym=decl.sym;resultId=treeutils.makeIdent(that.pos,decl.sym);}}}resultExpr=resultId;if(newclass!=null){newThisId=resultId;newThisExpr=resultExpr;}if(!translatingJML&&calleeIsFunction){JCBlock bl=addMethodAxioms(that,calleeMethodSym,overridden);if(true){if(inOldEnv){escAddToOldList(oldenv,bl);}else {if(nonignoredStatements!=null){nonignoredStatements.add(bl);}else {if(axiomBlock!=null){axiomBlock.stats=axiomBlock.stats.append(bl);}else {addStat(bl);}}}WellDefined info=wellDefinedCheck.get(calleeMethodSym);if(info!=null&&!info.alltrue){MethodSymbol s=info.sym;if(s!=null&&localVariables.isEmpty()&&!treeutils.isTrueLit(info.wellDefinedExpression)){JCExpression e;List<JCExpression> convertedArgs=convertCopy(trArgs);if(!utils.isJMLStatic(calleeMethodSym)){convertedArgs=convertedArgs.prepend(newThisExpr);}if(!convertedArgs.isEmpty()){e=treeutils.makeMethodInvocation(that,null,s,convertedArgs);}else {e=treeutils.makeIdent(that,s);}e=condition==null?e:treeutils.makeImplies(condition.pos,condition,e);if(assumingPureMethod){addAssume(that,Label.UNDEFINED_PRECONDITION,e,info.pos,info.source);}else {addAssert(that,Label.UNDEFINED_PRECONDITION,e,info.pos,info.source);}}}}MethodSymbol newCalleeSym=oldHeapMethods.get(oldenv==null?null:oldenv.name).get(calleeMethodSym);if(newCalleeSym==null){log.error(""jml.internal"",""No logical function for method ""+calleeMethodSym.getQualifiedName());}List<JCExpression> convertedArgs=convertCopy(trArgs);if(!utils.isJMLStatic(calleeMethodSym)){convertedArgs=convertedArgs.prepend(newThisExpr);}JCExpression methCall=treeutils.makeMethodInvocation(that,null,newCalleeSym,convertedArgs);JCStatement stat;if(resultExpr==null){stat=M.at(that.pos).Exec(methCall);}else {stat=treeutils.makeAssignStat(that.pos,resultExpr,methCall);}addStat(stat);}if(esc&&newclass!=null){addAssume(that,Label.IMPLICIT_ASSUME,treeutils.makeNotNull(that.pos,convertCopy(resultExpr)));JmlMethodInvocation typeof=M.at(that).JmlMethodInvocation(JmlTokenKind.BSTYPEOF,convertCopy(resultExpr));typeof.javaType=false;typeof.type=jmltypes.TYPE;JmlMethodInvocation stype=M.at(that).JmlMethodInvocation(JmlTokenKind.BSTYPELC,treeutils.makeType(that.pos,newclass.type));stype.javaType=false;stype.type=jmltypes.TYPE;addAssume(that,Label.IMPLICIT_ASSUME,treeutils.makeEqObject(that.pos,typeof,stype));typeof=M.at(that).JmlMethodInvocation(JmlTokenKind.BSTYPEOF,convertCopy(resultExpr));typeof.javaType=true;typeof.type=jmltypes.TYPE;stype=M.at(that).JmlMethodInvocation(JmlTokenKind.BSTYPELC,treeutils.makeType(that.pos,newclass.type));stype.javaType=true;stype.type=jmltypes.TYPE;addAssume(that,Label.IMPLICIT_ASSUME,treeutils.makeEqObject(that.pos,typeof,stype));if(resultExpr!=null&&!resultExpr.type.isPrimitive()){newAllocation2(that,resultExpr);JCExpression e=allocCounterEQ(that,resultExpr,++allocCounter);addAssume(that,Label.IMPLICIT_ASSUME,e);}}ListBuffer<JCStatement> check1=pushBlock();Name calllabel=null;if(!translatingJML){JCBlock bl=M.at(that).Block(0L,List.nil());String label=""_JMLCALL_""+that.pos+""_""+(++count);calllabel=names.fromString(label);JmlLabeledStatement stat=M.at(that).JmlLabeledStatement(calllabel,null,bl);addStat(stat);preLabel=M.at(that).Ident(calllabel);labelOldLists.put(calllabel,currentStatements);oldStatements=currentStatements;defaultOldLabel=calllabel;labelStatements.put(calllabel,stat);stat.extraStatements.addAll(currentStatements);markLocation(calllabel,currentStatements,stat);}ListBuffer<JCStatement> saved=currentStatements;oldStatements=currentStatements;ClassSymbol calleeClass=(ClassSymbol)calleeMethodSym.owner;if(applyNesting<=1&&!(isHelper(calleeMethodSym)&&meth instanceof JCIdent)){addStat(comment(that,""Checking caller invariants before calling method ""+utils.qualifiedMethodSig(calleeMethodSym),null));if(!isSuperCall&&!isThisCall){if(meth instanceof JCFieldAccess){addInvariants(that,calleeClass.type,utils.isJMLStatic(calleeMethodSym)||calleeMethodSym.isConstructor()?null:newThisExpr,currentStatements,false,calleeMethodSym.isConstructor(),isSuperCall,isHelper(calleeMethodSym),false,false,Label.INVARIANT_EXIT_CALLER,""(Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"");}}clearInvariants();if(methodDecl.params!=null){for(JCVariableDecl v : methodDecl.params){if(v.type.isPrimitive()){continue;}JCVariableDecl d=preparams.get(v.sym);JCIdent id=treeutils.makeIdent(v.pos,d.sym);addStat(comment(v,""Checking invariants for caller parameter ""+v.sym+"" before calling method ""+utils.qualifiedMethodSig(calleeMethodSym),null));addInvariants(v,v.type,id,currentStatements,false,false,false,false,false,false,Label.INVARIANT_EXIT_CALLER,""(Parameter: ""+v.sym+"", Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"");clearInvariants();}}}JCExpression collectedInvariants=treeutils.trueLit;if(!isSuperCall&&!isThisCall&&!isHelper(calleeMethodSym)){String msg=""(Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"";addStat(comment(that,""Checking callee invariants by the caller ""+utils.qualifiedMethodSig(methodDecl.sym)+"" before calling method ""+utils.qualifiedMethodSig(calleeMethodSym),null));addInvariants(that,calleeClass.type,newThisExpr,currentStatements,false,calleeMethodSym.isConstructor(),false,isHelper(calleeMethodSym),false,false,Label.INVARIANT_ENTRANCE,msg);for(JCExpression arg : trArgs){if(arg.type.isPrimitive()){continue;}currentStatements.add(comment(arg,""Asserting invariants for callee parameter before calling the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));JCIdent id;if(arg instanceof JCIdent){id=(JCIdent)arg;}else {continue;}addInvariants(arg,arg.type,id,currentStatements,false,false,false,false,false,false,Label.INVARIANT_ENTRANCE,msg);}}if(calleeMethodSym.isConstructor()&&esc){for(JCExpression arg : trArgs){if(arg.type.isPrimitive()||jmltypes.isJmlType(arg.type)){continue;}JCExpression neq=treeutils.makeNeqObject(arg.pos,arg,newThisExpr);addAssume(arg,Label.IMPLICIT_ASSUME,neq);}}currentThisId=newThisId;currentThisExpr=newThisExpr;Map<JmlSpecificationCase,JCExpression> preExpressions=new HashMap<JmlSpecificationCase,JCExpression>();JCExpression combinedPrecondition=treeutils.falseLit;JmlMethodClauseExpr clauseToReference=null;boolean anyFound=false;for(Pair<MethodSymbol,Type> pair : overridden){MethodSymbol mpsym=pair.first;JmlMethodSpecs s=specs.getDenestedSpecs(mpsym);if(s!=null&&!s.cases.isEmpty()){anyFound=true;break;}}if(!anyFound){JmlSpecs.MethodSpecs s=specs.getSpecs(calleeMethodSym);if(s==null){JmlMethodSpecs defaults=JmlSpecs.defaultSpecs(context,methodDecl.sym,methodDecl.pos).cases;s=new JmlSpecs.MethodSpecs(methodDecl.mods,defaults);specs.putSpecs(calleeMethodSym,s);s.cases.deSugared=defaults;}else {JCMethodDecl decl=s.cases.decl;JmlMethodSpecs defaults=JmlSpecs.defaultSpecs(context,decl==null?null:decl.sym,decl==null?methodDecl.pos:decl.pos).cases;s.cases=defaults;s.cases.deSugared=defaults;}}{boolean combinedNoModel=false;if(calleeMethodSym.toString().equals(""ToString()"")){Utils.stop();}addStat(comment(that,""Checking preconditions of callee ""+calleeMethodSym+"" by the caller"",null));for(Pair<MethodSymbol,Type> pair : overridden){MethodSymbol mpsym=pair.first;Type classType=pair.second;typevarMapping=typemapping(classType,calleeMethodSym,typeargs,meth==null?null:meth.type instanceof Type.MethodType?(Type.MethodType)meth.type:null);JmlMethodSpecs calleeSpecs=specs.getDenestedSpecs(mpsym);if(calleeSpecs==null){continue;}paramActuals=new HashMap<Object,JCExpression>();mapParamActuals.put(mpsym,paramActuals);if(calleeSpecs.decl!=null){Iterator<JCVariableDecl> iter=calleeSpecs.decl.params.iterator();JCVariableDecl currentDecl=null;for(JCExpression arg : trArgs){if(iter.hasNext()){currentDecl=iter.next();}paramActuals.put(currentDecl.sym,arg);}}if(esc){if(newclass!=null&&newclass.clazz instanceof JCTypeApply){Iterator<Symbol.TypeVariableSymbol> tpiter=calleeClass.getTypeParameters().iterator();for(JCExpression tp : ((JCTypeApply)newclass.clazz).arguments){paramActuals.put(tpiter.next(),tp);}}if(newclass==null&&(typeargs==null||typeargs.isEmpty())){Type.MethodType t=null;if(calleeMethodSym.type instanceof Type.MethodType){t=(Type.MethodType)calleeMethodSym.type;}else {if(calleeMethodSym.type instanceof Type.ForAll){t=((Type.ForAll)calleeMethodSym.type).asMethodType();}}List<Type> list=t.argtypes;Iterator<Type> tpiter=list.iterator();for(Type tp : ((Type.MethodType)meth.type).argtypes){Type tt=tpiter.next();if(tt instanceof Type.TypeVar){paramActuals.put(tt.toString(),treeutils.makeType(that.pos,tp));}}}if(typeargs!=null&&!typeargs.isEmpty()){Iterator<Symbol.TypeVariableSymbol> tpiter=calleeMethodSym.getTypeParameters().iterator();for(JCExpression tp : typeargs){paramActuals.put(tpiter.next(),tp);}}}if(esc&&(!specs.isPure(calleeMethodSym)||newclass!=null)&&resultId!=null&&!resultType.isPrimitive()){if(esc&&resultId!=null&&!resultType.isPrimitive()){JCTree cs=that;{}}}for(JmlSpecificationCase cs : calleeSpecs.cases){if(!utils.visible(classDecl.sym,mpsym.owner,cs.modifiers.flags)){continue;}if(translatingJML&&cs.token==JmlTokenKind.EXCEPTIONAL_BEHAVIOR){continue;}if(mpsym!=calleeMethodSym&&cs.code){continue;}JCIdent preId=null;ListBuffer<JCStatement> oldStatements=currentStatements;if(rac){preId=newTemp(treeutils.falseLit);pushBlock();}JCExpression pre=convertCopy(translatingJML?savedCondition:treeutils.trueLit);JCExpression prex=treeutils.trueLit;boolean noModel=false;JavaFileObject prev=log.useSource(cs.source());try{JmlMethodClauseExpr mcc=null;for(JmlMethodClause clause : cs.clauses){switch (clause.token){case OLD :{for(JCVariableDecl decl : ((JmlMethodClauseDecl)clause).decls){if(paramActuals.get(decl.sym)==null){addTraceableComment(decl,clause.toString());Name name=names.fromString(decl.name.toString()+""__OLD_""+decl.pos);JCVariableDecl newdecl=treeutils.makeVarDef(decl.type,name,methodDecl.sym,decl.pos);newdecl.init=treeutils.makeZeroEquivalentLit(decl.init.pos,decl.init.type);JCExpression init=convertJML(treeutils.isTrueLit(prex)?decl.init:treeutils.makeConditional(decl.pos,prex,decl.init,treeutils.makeZeroEquivalentLit(decl.pos,decl.init.type)));addStat(oldStatements,newdecl);JCIdent id=treeutils.makeIdent(clause.pos,newdecl.sym);paramActuals.put(decl.sym,id);JCExpressionStatement stat=treeutils.makeAssignStat(init.pos,id,init);addStat(stat);exprBiMap.put(id,convertExpr(id));}}break;}case FORALL :notImplemented(clause,""forall clause in method specs"",clause.source());break;case REQUIRES :JmlMethodClauseExpr mce=(JmlMethodClauseExpr)clause;prex=treeutils.makeAndSimp(mce.expression.pos,prex,mce.expression);if(mcc==null){mcc=mce;}break;default :}}if(mcc!=null){clauseToReference=mcc;}pre=prex==null?treeutils.trueLit:convertJML(prex,pre,false);}catch(NoModelMethod e){pre=treeutils.falseLit;noModel=true;combinedNoModel=true;}catch(JmlNotImplementedException e){notImplemented(""requires clause containing "",e);pre=treeutils.falseLit;}finally{log.useSource(prev);}if(!rac){pre=newTemp(pre);}else {if(noModel){popBlock();}else {preId.pos=pre.pos;addStat(treeutils.makeAssignStat(pre.pos,convertCopy(preId),pre));addStat(wrapRuntimeException(pre,popBlock(0L,pre),""JML undefined precondition - exception thrown"",null));pre=preId;}}preExpressions.put(cs,pre);combinedPrecondition=combinedPrecondition==treeutils.falseLit?pre:pre==treeutils.falseLit?combinedPrecondition:treeutils.makeOr(pre.pos,combinedPrecondition,pre);if((!translatingJML||rac)&&methodDecl!=null&&methodDecl.sym!=null){ListBuffer<JCStatement> check2=pushBlock();boolean anyAssignableClauses=false;boolean anyCallableClauses=false;boolean anyAccessibleClauses=false;for(JmlMethodClause clause : cs.clauses){try{if(clause.token==JmlTokenKind.OLD){insertDeclarationsForOld(null,(JmlMethodClauseDecl)clause);}else {if(clause.token==JmlTokenKind.FORALL){notImplemented(clause,""forall clause in method specs"",clause.source());}else {if(clause.token==JmlTokenKind.ASSIGNABLE){List<JCExpression> storerefs=expandStoreRefList(((JmlMethodClauseStoreRef)clause).list,calleeMethodSym);for(JCExpression item : storerefs){addStat(comment(item,""Is ""+item+"" assignable? ""+utils.locationString(item.pos,clause.source()),clause.source()));checkAgainstCallerSpecs(clause.token,that,item,pre,savedThisId,newThisId,clause.source());}anyAssignableClauses=true;}else {if(clause.token==JmlTokenKind.ACCESSIBLE){if(checkAccessEnabled){List<JCExpression> storerefs=expandStoreRefList(((JmlMethodClauseStoreRef)clause).list,calleeMethodSym);for(JCExpression item : storerefs){addStat(comment(item,""Is ""+item+"" accessible?"",clause.source()));checkAgainstCallerSpecs(clause.token,that,item,pre,savedThisId,newThisId,clause.source());}anyAccessibleClauses=true;}}else {if(clause.token==JmlTokenKind.CALLABLE){anyCallableClauses=true;JmlMethodClauseCallable callableClause=(JmlMethodClauseCallable)clause;if(callableClause.keyword!=null){if(callableClause.keyword.token==JmlTokenKind.BSNOTHING){}else {if(callableClause.keyword.token==JmlTokenKind.BSEVERYTHING){checkThatMethodIsCallable(callableClause.keyword,null);}else {if(callableClause.keyword.token==JmlTokenKind.BSNOTSPECIFIED){checkThatMethodIsCallable(callableClause.keyword,null);}}}}else {List<JmlMethodSig> sigs=callableClause.methodSignatures;if(sigs!=null){for(JmlMethodSig item : sigs){addStat(comment(item,""Is ""+item+"" callable?"",clause.source()));checkThatMethodIsCallable(item,item.methodSymbol);}}}}}}}}}catch(NoModelMethod e){}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e);}}if(!anyAssignableClauses){if(mpsym.isConstructor()){checkAgainstCallerSpecs(JmlTokenKind.ASSIGNABLE,that,M.at(cs).JmlStoreRefKeyword(JmlTokenKind.BSNOTHING),pre,savedThisId,newThisId,cs.source());}else {if(isPure(mpsym)){checkAgainstCallerSpecs(JmlTokenKind.ASSIGNABLE,that,M.at(cs).JmlStoreRefKeyword(JmlTokenKind.BSNOTHING),pre,savedThisId,newThisId,cs.source());}else {checkAgainstCallerSpecs(JmlTokenKind.ASSIGNABLE,that,M.at(cs).JmlStoreRefKeyword(JmlTokenKind.BSEVERYTHING),pre,savedThisId,newThisId,cs.source());}}}if(!anyAccessibleClauses&&checkAccessEnabled){checkAgainstCallerSpecs(JmlTokenKind.ACCESSIBLE,that,M.at(cs).JmlStoreRefKeyword(JmlTokenKind.BSEVERYTHING),pre,savedThisId,newThisId,cs.source());}if(!anyCallableClauses){checkThatMethodIsCallable(cs,null);}JCBlock bl=popBlock(0,cs,check2);if(!bl.stats.isEmpty()){addStat(M.at(cs).If(pre,bl,null));}}}paramActuals=null;}if(clauseToReference!=null){ListBuffer<JCStatement> check3=pushBlock();if(combinedNoModel){}else {if(translatingJML){addAssert(that,Label.UNDEFINED_PRECONDITION,treeutils.makeImplies(methodDecl.pos,condition,combinedPrecondition),clauseToReference,clauseToReference.source());}else {addAssert(that,Label.PRECONDITION,combinedPrecondition,clauseToReference,clauseToReference.source());}}JCBlock bl=popBlock(0,that,check3);addStat(wrapRuntimeException(that,bl,""JML undefined precondition - exception thrown"",null));}}ListBuffer<JCStatement> ensuresStatsOuter=new ListBuffer<JCStatement>();ListBuffer<JCStatement> exsuresStatsOuter=new ListBuffer<JCStatement>();typevarMapping=newTypeVarMapping;if(rac){ListBuffer<JCStatement> s=currentStatements;currentStatements=ensuresStatsOuter;if(apply!=null){addStat(comment(apply,""converted method call"",null));}if(newclass!=null){addStat(comment(newclass,""converted new-object call"",null));}JCStatement call;if(newclass!=null){addStat(treeutils.makeAssignStat(that.pos,resultId,trExpr));trExpr=resultId;}else {if(isVoid){call=M.at(that).Exec(trExpr);addStat(call);}else {call=treeutils.makeAssignStat(that.pos,resultId,trExpr);addStat(call);}}currentStatements=s;}ensuresStatsOuter.add(comment(that,""Assuming callee normal postconditions"",null));exsuresStatsOuter.add(comment(that,""Assuming callee exceptional postconditions"",null));if(doTranslations){if(exceptionSym!=null&&exceptionDeclCall!=null){exsuresStatsOuter.add(treeutils.makeAssignStat(that.pos,treeutils.makeIdent(that.pos,exceptionSym),treeutils.makeIdent(that.pos,exceptionDeclCall.sym)));}if(terminationSym!=null){JCIdent tid=treeutils.makeIdent(that.pos,terminationSym);JCStatement term=treeutils.makeAssignStat(that.pos,tid,treeutils.makeIntLiteral(that.pos,-that.pos));exsuresStatsOuter.add(term);}{if(exceptionSym!=null){ListBuffer<JCStatement> s=currentStatements;currentStatements=exsuresStatsOuter;if(specs.isPure(calleeMethodSym)){addAssume(that,Label.IMPLICIT_ASSUME,treeutils.falseLit);}else {JCIdent exceptionId=treeutils.makeIdent(that.pos,exceptionSym);JCExpression expr=treeutils.makeThrownPredicate(that,exceptionId,calleeMethodSym);addAssume(that,Label.IMPLICIT_ASSUME,expr);}currentStatements=s;}}}if(esc){for(Pair<MethodSymbol,Type> pair : overridden){MethodSymbol mpsym=pair.first;Type classType=pair.second;typevarMapping=typemapping(classType,null,null);JmlMethodSpecs calleeSpecs=specs.getDenestedSpecs(mpsym);if(calleeSpecs==null){continue;}paramActuals=mapParamActuals.get(mpsym);boolean isPure=isPure(mpsym);for(JmlSpecificationCase cs : calleeSpecs.cases){if(!utils.visible(classDecl.sym,mpsym.owner,cs.modifiers.flags)){continue;}if(translatingJML&&cs.token==JmlTokenKind.EXCEPTIONAL_BEHAVIOR){continue;}if(mpsym!=calleeMethodSym&&cs.code){continue;}JCExpression pre=convertCopy(preExpressions.get(cs));if(pre==treeutils.falseLit){continue;}condition=pre;ListBuffer<JCStatement> check4=pushBlock();boolean useDefault=true;for(JmlMethodClause clause : cs.clauses){try{JmlTokenKind token=clause.token;switch (token){case OLD :{insertDeclarationsForOld(pre,(JmlMethodClauseDecl)clause);break;}case FORALL :notImplemented(clause,""forall clause in method specs"",clause.source());break;case ASSIGNABLE :if(!translatingJML){useDefault=false;addStat(comment(clause));ListBuffer<JCExpression> newlist=new ListBuffer<JCExpression>();boolean containsEverything=false;List<JCExpression> storerefs=expandStoreRefList(((JmlMethodClauseStoreRef)clause).list,calleeMethodSym);for(JCExpression location : storerefs){location=convertAssignable(location,newThisId,true);if(location instanceof JCFieldAccess){JCFieldAccess fa=(JCFieldAccess)location;if(fa.sym==null){JCExpression e=fa.selected;boolean isStatic=treeutils.isATypeTree(e);for(VarSymbol v : utils.listJmlVisibleFields(e.type.tsym,calleeMethodSym.flags()&Flags.AccessFlags,isStatic)){JCFieldAccess newfa=treeutils.makeSelect(location.pos,e,v);JCExpression trfa=convertAssignable(newfa,newThisId,true);newlist.add(trfa);}}else {if(isModel(fa.sym)){JCExpression e=fa.selected;boolean isStatic=treeutils.isATypeTree(e);for(VarSymbol v : utils.listJmlVisibleFields(e.type.tsym,Flags.PRIVATE,isStatic)){if(isContainedIn(v,fa.sym)){JCFieldAccess newfa=treeutils.makeSelect(location.pos,e,v);JCExpression trfa=convertAssignable(newfa,newThisId,true);newlist.add(trfa);}}}else {newlist.add(location);continue;}}}else {if(location instanceof JmlStoreRefArrayRange){JmlStoreRefArrayRange loc=(JmlStoreRefArrayRange)location;if(loc.lo==loc.hi&&loc.lo!=null){JCExpression receiver=newThisId;JCExpression index=convertAssignable(loc.lo,receiver,true);JCExpression array=convertAssignable(loc.expression,receiver,true);JmlBBArrayAccess newloc=new JmlBBArrayAccess(null,array,index);newloc.pos=loc.pos;newloc.setType(loc.type);newloc.arraysId=null;newlist.add(newloc);}else {newlist.add(location);}}else {newlist.add(location);if(location instanceof JmlStoreRefKeyword&&((JmlStoreRefKeyword)location).token==JmlTokenKind.BSEVERYTHING){containsEverything=true;}}}}JCStatement havoc=M.at(clause.pos).JmlHavocStatement(newlist.toList());addStat(havoc);if(containsEverything){addNullnessAndTypeConditionsForInheritedFields(classDecl.sym,false);}}break;default :break;}}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}}if(useDefault&&!translatingJML){if(isThisCall){ListBuffer<JCExpression> fields=new ListBuffer<>();for(JCTree d : classDecl.defs){if(!(d instanceof JCVariableDecl)){continue;}JCExpression e=treeutils.makeIdent(d.pos,((JCVariableDecl)d).sym);fields.add(e);}JCStatement havoc=M.at(cs.pos).JmlHavocStatement(fields.toList());addStat(havoc);}else {if(isSuperCall){ListBuffer<JCExpression> fields=new ListBuffer<>();Type sup=classDecl.sym.getSuperclass();Scope s=((ClassSymbol)sup.tsym).members();for(Symbol sy : s.getElements()){if(!(sy instanceof VarSymbol)){continue;}JCExpression e=treeutils.makeIdent(that.pos,sy);fields.add(e);}JCStatement havoc=M.at(cs.pos).JmlHavocStatement(fields.toList());addStat(havoc);}else {if(newclass==null&&!isPure){JCStatement havoc=M.at(cs.pos).JmlHavocStatement(List.of(M.at(cs.pos).JmlStoreRefKeyword(JmlTokenKind.BSEVERYTHING)));addStat(havoc);addNullnessAndTypeConditionsForInheritedFields(classDecl.sym,false);}else {JCStatement havoc=M.at(cs.pos).JmlHavocStatement(List.of(M.at(cs.pos).JmlStoreRefKeyword(JmlTokenKind.BSNOTHING)));addStat(havoc);}}}}JCBlock bl=popBlock(0,cs,check4);JCStatement st=M.at(cs.pos+1).If(pre,bl,null);bl=M.at(cs.pos+1).Block(0,List.of(st));currentStatements.add(wrapRuntimeException(cs,bl,""JML undefined precondition while checking postconditions - exception thrown"",null));}paramActuals=null;}}typevarMapping=newTypeVarMapping;if(newclass!=null||(!specs.isPure(calleeMethodSym)&&!calleeMethodSym.isConstructor())){if(inProcessInvariants.isEmpty()&&!translatingJML){changeState();}}if(doTranslations){ListBuffer<JCStatement> check5=pushBlock();String msg=utils.qualifiedMethodSig(calleeMethodSym)+"", returning to ""+utils.qualifiedMethodSig(methodDecl.sym);currentStatements.add(comment(that,""Assuming callee invariants by the caller ""+utils.qualifiedMethodSig(methodDecl.sym)+"" after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));if(!rac){addNonNullChecks(true,that,calleeClass.type,newThisExpr,calleeMethodSym.isConstructor());}if(!isHelper(calleeMethodSym)){addInvariants(that,calleeClass.type,newThisExpr,currentStatements,false,calleeMethodSym.isConstructor(),false,isHelper(calleeMethodSym),true,true,Label.INVARIANT_EXIT,msg);}addConstraintInitiallyChecks(that,calleeClass,newThisExpr,currentStatements,false,calleeMethodSym.isConstructor(),false,isHelper(calleeMethodSym),true,true,null,msg);if(!isHelper(calleeMethodSym)){for(JCExpression arg : trArgs){if(arg.type.isPrimitive()){continue;}currentStatements.add(comment(arg,""Assuming invariants for callee parameter after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));if(!(arg instanceof JCIdent)){continue;}JCIdent id=(JCIdent)arg;addInvariants(id,arg.type,id,currentStatements,false,false,false,false,true,true,Label.INVARIANT_EXIT,msg);}}Type retType=calleeMethodSym.getReturnType();if(calleeMethodSym.isConstructor()){}else {if(retType.getTag()!=TypeTag.VOID){ListBuffer<JCStatement> check6=pushBlock();if(esc&&!retType.isPrimitive()){JCExpression nn=treeutils.makeEqObject(that.pos,resultId,treeutils.nullLit);nn=treeutils.makeOr(that.pos,nn,isAllocated(that,resultId));addAssume(that,Label.IMPLICIT_ASSUME,nn);addAssume(that,Label.IMPLICIT_ASSUME,allocCounterLE(that.pos(),resultId,++allocCounter));nn=treeutils.makeDynamicTypeInEquality(that,resultId,retType);addAssume(that,Label.IMPLICIT_ASSUME,nn);}currentStatements.add(comment(that,""Assuming invariants for the return value by the caller after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));boolean savedAPM=assumingPureMethod;assumingPureMethod=true;addInvariants(that,retType,resultId,currentStatements,false,false,false,false,true,true,Label.INVARIANT_EXIT,msg);assumingPureMethod=savedAPM;JCBlock bl=popBlock(0,that,check6);if(exceptionSym==null){currentStatements.add(bl);}else {JCIdent exceptionId=treeutils.makeIdent(that.pos,exceptionSym);JCExpression e=treeutils.makeEqObject(that.pos,exceptionId,treeutils.nullLit);JCStatement ifstat=M.at(that.pos).If(e,bl,null);currentStatements.add(ifstat);}}}if(!isSuperCall&&!isThisCall&&!isHelper(calleeMethodSym)&&!specs.isPure(calleeMethodSym)){currentStatements.add(comment(that,""Assuming caller invariants upon reentering the caller ""+utils.qualifiedMethodSig(methodDecl.sym)+"" after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));addInvariants(that,savedEnclosingClass.type,savedEnclosingMethod==null||utils.isJMLStatic(savedEnclosingMethod)?null:savedThisExpr,currentStatements,true,savedEnclosingMethod!=null&&savedEnclosingMethod.isConstructor(),isSuperCall,isHelper(methodDecl.sym),false,true,Label.INVARIANT_REENTER_CALLER,""(Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"");if(methodDecl.params!=null){for(JCVariableDecl v : methodDecl.params){if(v.type.isPrimitive()){continue;}JCVariableDecl d=preparams.get(v.sym);JCIdent id=treeutils.makeIdent(v.pos,d.sym);currentStatements.add(comment(that,""Assuming invariants for caller parameter ""+id+"" upon reentering the caller ""+utils.qualifiedMethodSig(methodDecl.sym)+"" after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));addInvariants(v,v.type,id,currentStatements,false,false,false,false,false,true,Label.INVARIANT_REENTER_CALLER,""(Parameter: ""+v.sym+"", Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"");}}}if(isSuperCall){currentStatements.add(comment(that,""Assuming field invariants after super call: ""+utils.qualifiedMethodSig(methodDecl.sym)+"" after exiting the callee ""+utils.qualifiedMethodSig(calleeMethodSym),null));for(Type parentType : parents(calleeMethodSym.owner.type,false)){Scope s=parentType.tsym.members();for(Symbol sym : s.getElements()){if(!(sym instanceof VarSymbol)){continue;}if(sym.type.isPrimitive()){continue;}DiagnosticPosition pos=that;JCExpression expr=treeutils.makeSelect(pos.getPreferredPosition(),currentThisExpr,sym);addInvariants(pos,sym.type,expr,currentStatements,false,false,true,false,true,true,Label.INVARIANT_REENTER_CALLER,""(Field: ""+sym+"", Caller: ""+utils.qualifiedMethodSig(methodDecl.sym)+"", Callee: ""+utils.qualifiedMethodSig(calleeMethodSym)+"")"");}}}JCBlock invariantBlock=popBlock(0,methodDecl,check5);if(esc){currentStatements.add(wrapRuntimeException(that,invariantBlock,""JML undefined invariant while checking postconditions - exception thrown"",null));}if(rac){ensuresStatsOuter.add(wrapRuntimeException(that,invariantBlock,""JML undefined invariant while checking postconditions - exception thrown"",null));}}{if(esc&&resultId!=null&&!resultId.type.isPrimitive()){JCExpression nn=treeutils.makeEqNull(resultId.pos,convertCopy(resultId));JCExpression ty=treeutils.makeTypeof(convertCopy(resultId));JCExpression typ=treeutils.makeTypelc(treeutils.makeType(resultId.pos,resultId.type));JCExpression inst=treeutils.makeSubtype(ty,typ);ListBuffer<JCStatement> s=currentStatements;currentStatements=ensuresStatsOuter;addAssume(resultId,Label.IMPLICIT_ASSUME,treeutils.makeOr(resultId.pos,nn,inst));currentStatements=s;}for(Pair<MethodSymbol,Type> pair : overridden){MethodSymbol mpsym=pair.first;Type classType=pair.second;typevarMapping=typemapping(classType,null,null);JmlMethodSpecs calleeSpecs=specs.getDenestedSpecs(mpsym);if(calleeSpecs==null){continue;}ensuresStatsOuter.add(comment(methodDecl,""Assuming postconditions for ""+utils.qualifiedMethodSig(mpsym),null));exsuresStatsOuter.add(comment(methodDecl,""Assuming exceptional postconditions for ""+utils.qualifiedMethodSig(mpsym),null));paramActuals=mapParamActuals.get(mpsym);for(JmlSpecificationCase cs : calleeSpecs.cases){if(!utils.visible(classDecl.sym,mpsym.owner,cs.modifiers.flags)){continue;}if(translatingJML&&cs.token==JmlTokenKind.EXCEPTIONAL_BEHAVIOR){continue;}if(mpsym!=calleeMethodSym&&cs.code){continue;}ListBuffer<JCStatement> ensuresStats=new ListBuffer<JCStatement>();ListBuffer<JCStatement> exsuresStats=new ListBuffer<JCStatement>();JCExpression pre=convertCopy(preExpressions.get(cs));if(pre==treeutils.falseLit){continue;}condition=pre;currentStatements=ensuresStats;for(JmlMethodClause clause : cs.clauses){JavaFileObject clauseSource=clause.sourcefile==null?log.currentSourceFile():clause.sourcefile;JavaFileObject prevSource=null;try{switch (clause.token){case OLD :{JmlMethodClauseDecl olddecl=(JmlMethodClauseDecl)clause;insertDeclarationsForOld(null,olddecl);break;}case FORALL :notImplemented(clause,""forall clause in method specs"",clause.source());break;default :break;}}catch(NoModelMethod e){}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}}for(JmlMethodClause clause : cs.clauses){JavaFileObject clauseSource=clause.sourcefile==null?log.currentSourceFile():clause.sourcefile;JavaFileObject prevSource=null;try{switch (clause.token){case OLD :break;case FORALL :break;case ENSURES :currentStatements=ensuresStats;LinkedList<ListBuffer<JCStatement>> temp=markBlock();ListBuffer<JCStatement> check7=pushBlock();try{addStat(comment(clause));boolean savedAssuming=assumingPureMethod;try{prevSource=log.useSource(clauseSource);assumingPureMethod=true;JCExpression e=convertJML(((JmlMethodClauseExpr)clause).expression,condition,false);log.useSource(prevSource);addAssume(that,Label.POSTCONDITION,e,clause,clauseSource);}catch(NoModelMethod e){}finally{if(prevSource!=null){log.useSource(prevSource);}assumingPureMethod=savedAssuming;}JCBlock bl=popBlock(0,that,check7);addStat(wrapRuntimeException(clause,bl,""JML undefined postcondition - exception thrown"",null));}catch(JmlNotImplementedException e){popBlock(0,that,check7);notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}if(!checkBlock(temp)){Utils.print(""BLOCKS DO NOT MATCH"");}break;case REQUIRES :case ASSIGNABLE :case ACCESSIBLE :case CALLABLE :break;default :break;}}catch(NoModelMethod e){}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}}currentStatements=exsuresStats;for(JmlMethodClause clause : cs.clauses){JavaFileObject clauseSource=clause.sourcefile==null?log.currentSourceFile():clause.sourcefile;JavaFileObject prevSource=null;try{switch (clause.token){case OLD :{JmlMethodClauseDecl olddecl=(JmlMethodClauseDecl)clause;insertDeclarationsForOld(null,olddecl);break;}case FORALL :break;default :break;}}catch(NoModelMethod e){}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}}for(JmlMethodClause clause : cs.clauses){JavaFileObject clauseSource=clause.sourcefile==null?log.currentSourceFile():clause.sourcefile;JavaFileObject prevSource=null;try{switch (clause.token){case OLD :break;case FORALL :break;case ENSURES :break;case SIGNALS :ListBuffer<JCStatement> check8=pushBlock();try{addStat(comment(clause));JCExpression ex=((JmlMethodClauseSignals)clause).expression;if(ex instanceof JmlSingleton){ex=treeutils.trueLit;}JCVariableDecl vdo=((JmlMethodClauseSignals)clause).vardef;Type vdtype=syms.exceptionType;if(vdo!=null&&!treeutils.isFalseLit(ex)&&exceptionDeclCall!=null){JCIdent exceptionId=treeutils.makeIdent(clause.pos,exceptionDeclCall.sym);JCExpression tc=M.at(vdo).TypeCast(vdo.type,exceptionId);JCVariableDecl vd=treeutils.makeVarDef(vdo.type,vdo.name,vdo.sym.owner,esc?exceptionId:tc);vdtype=vd.type;addStat(vd);paramActuals.put(vdo.sym,treeutils.makeIdent(vd.pos,vd.sym));}prevSource=log.useSource(clauseSource);JCExpression e=convertJML(ex,condition,false);log.useSource(prevSource);addAssume(that,Label.SIGNALS,e,clause,clauseSource);ex=treeutils.trueLit;if(vdo!=null&&!treeutils.isFalseLit(e)&&exceptionDeclCall!=null){ex=M.at(clause).TypeTest(treeutils.makeIdent(clause.pos,exceptionDeclCall.sym),treeutils.makeType(clause.pos,vdtype)).setType(syms.booleanType);paramActuals.remove(vdo.sym);}JCStatement st=M.at(clause).If(ex,popBlock(0,that,check8),null);addStat(wrapRuntimeException(clause,M.at(clause).Block(0,List.of(st)),""JML undefined exceptional postcondition - exception thrown"",null));}catch(JmlNotImplementedException e){popBlock(0,that,check8);notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}finally{if(prevSource!=null){log.useSource(prevSource);}}break;case SIGNALS_ONLY :{if(exceptionDeclCall!=null&&exceptionSym!=null){JCIdent exceptionId=treeutils.makeIdent(clause.pos,exceptionSym);JCExpression condd=treeutils.falseLit;for(JCExpression t : ((JmlMethodClauseSignalsOnly)clause).list){JCExpression tc=M.at(t).TypeTest(exceptionId,t).setType(syms.booleanType);condd=treeutils.makeOr(clause.pos,condd,tc);}addAssume(that,Label.SIGNALS_ONLY,condd,clause,clause.source(),null,treeutils.makeUtilsMethodCall(clause.pos,""getClassName"",exceptionId));}else {JCExpression exx=treeutils.makeDuplicateLiteral(clause.pos,treeutils.falseLit);addAssume(that,Label.SIGNALS_ONLY,exx,clause,clauseSource);}break;}case REQUIRES :case ASSIGNABLE :case ACCESSIBLE :case CALLABLE :break;default :break;}}catch(NoModelMethod e){}catch(JmlNotImplementedException e){notImplemented(clause.token.internedName()+"" clause containing "",e,clause.source());}}if(!ensuresStats.isEmpty()){JCBlock ensuresBlock=M.at(cs.pos+1).Block(0,ensuresStats.toList());JCStatement st=M.at(cs.pos+1).If(pre,ensuresBlock,null);JCBlock bl=M.at(cs.pos+1).Block(0,List.of(st));ensuresStatsOuter.add(wrapRuntimeException(cs,bl,""JML undefined precondition while checking postconditions - exception thrown"",null));}if(!exsuresStats.isEmpty()){JCBlock exsuresBlock=M.at(cs.pos+1).Block(0,exsuresStats.toList());JCStatement st=M.at(cs.pos+1).If(pre,exsuresBlock,null);JCBlock bl=M.at(cs.pos+1).Block(0,List.of(st));exsuresStatsOuter.add(wrapRuntimeException(cs,bl,""JML undefined precondition while checking exceptional postconditions - exception thrown"",null));}}paramActuals=null;}typevarMapping=newTypeVarMapping;}preExpressions.clear();{for(Symbol key : mapParamActuals.keySet()){mapParamActuals.get(key).clear();}mapParamActuals.clear();mapParamActuals=null;}currentStatements=saved;if(exceptionDeclCall!=null){exsuresStatsOuter.add(M.at(that).Throw(treeutils.makeIdent(that.pos,exceptionDeclCall.sym)));}else {if(rac){System.out.println(""DID NOT EXPECT THIS"");}}JCBlock ensuresBlock=M.at(that).Block(0,ensuresStatsOuter.toList());if(rac){JCBlock exsuresBlock=M.at(that).Block(0,exsuresStatsOuter.toList());addStat(wrapException(that,ensuresBlock,exceptionDeclCall,exsuresBlock));addStat(popBlock(0,methodDecl,check1));}else {if(esc){if(exceptionDeclCall!=null){addStat(exceptionDeclCall);JCIdent nexceptionId=treeutils.makeIdent(that.getStartPosition(),exceptionDeclCall.sym);treeutils.copyEndPosition(nexceptionId,that);{JCStatement c=comment(that,""Exception thrown by ""+(apply==null?newclass.constructor:meth instanceof JCIdent?((JCIdent)meth).sym:((JCFieldAccess)meth).sym),null);exsuresStatsOuter=exsuresStatsOuter.prepend(c);JCExpression nex=convertCopy(nexceptionId);pathMap.put(nex,c);exprBiMap.put(nex,nexceptionId);}JCBinary ch=treeutils.makeEqObject(that.pos,nexceptionId,treeutils.nullLit);JCBlock exsuresBlock=M.at(that).Block(0,exsuresStatsOuter.toList());JCStatement st=M.at(that.pos).If(ch,ensuresBlock,exsuresBlock);addStat(st);}else {addStat(ensuresBlock);}addStat(popBlock(0,methodDecl,check1));}}if(resultId!=null){result=eresult=treeutils.makeIdent(resultId.pos,resultId.sym);}else {result=eresult=null;}}finally{paramActuals=savedParamActuals;resultSym=savedResultSym;resultExpr=savedResultExpr;exceptionSym=savedExceptionSym;preparams=savedpreparams;currentThisId=savedThisId;currentThisExpr=savedThisExpr;oldStatements=savedOldStatements;condition=savedCondition;preLabel=savedPreLabel;defaultOldLabel=savedOldLabel;currentFresh=savedFresh;enclosingMethod=savedEnclosingMethod;enclosingClass=savedEnclosingClass;typevarMapping=savedTypeVarMapping;applyNesting--;checkBlock(check0);}}"
2860	"@Override public Cards getMove(Player currentPlayer,List<Player> players) throws IOException{for(Player p : players){if(p==currentPlayer){p.send(""It is your turn, choose a card to play [0 - ""+(p.getHand().size()-1)+""]"");}else {p.send(currentPlayer.getName()+"" is playing..."");}}while(true){System.out.println(""enterd getmove loop"");String moveString=currentPlayer.readFromClient();System.out.println(""moveString = ""+moveString);System.out.println(""before null condition"");if(moveString==null){System.out.println(""inside null condition"");players.remove(currentPlayer);for(Player p : players){System.out.println(""player ""+currentPlayer+"" has left"");p.send(""PLAYERQUIT@@""+currentPlayer.getName()+"" has left the game"");p.send(""To play again, type </newGame>"");playerLeft=true;}return null;}System.out.println(""player said ""+moveString);try{int cardIndex=Integer.parseInt(moveString);if(cardIndex<0||cardIndex>=currentPlayer.getHand().size()){System.out.println(""card index higher/lower than expected"");currentPlayer.send(""please give us a card you have"");continue;}Cards card=currentPlayer.getHand().get(cardIndex);System.out.println(""Player""+"" played ""+card);System.out.println(""exited get move"");return card;}catch(NumberFormatException e){currentPlayer.send(""invalid choice, please select a card to play"");continue;}}}"
2861	"private void calculateBufferSize(HttpResponseHeaders headers) throws IllegalAccessException{String contentLength=headers.getHeaders().get(CONTENT_LENGTH).get(0);if(!isEmpty(contentLength)&&headers.getHeaders().get(TRANSFER_ENCODING).isEmpty()){int maxBufferSize=MAX_RECEIVE_BUFFER_SIZE;if(responseField!=null){maxBufferSize=(((HttpResponsePacket)responseField.get(headers)).getRequest().getConnection().getReadBufferSize());}bufferSize=min(maxBufferSize,valueOf(contentLength));}else {if(!headers.getHeaders().get(TRANSFER_ENCODING).isEmpty()){bufferSize=KB.toBytes(32)+10;}}}"
2862	"public boolean intersects(Projectile proj){Area entArea=new Area(getHitbox());entArea.intersect(new Area(proj.getHitbox()));return !entArea.isEmpty();}"
2863	"public static String getExecuteFileFullPath(String exeName){String fullPath=exeName;if(OSUtils.isWindows()){if(!exeName.endsWith("".exe"")){fullPath=getExecuteFullPathSingle(exeName+"".exe"");if(fullPath!=null){return fullPath;}else {if(!exeName.endsWith("".cmd"")){fullPath=getExecuteFullPathSingle(exeName+"".cmd"");if(fullPath!=null){return fullPath;}}}}}fullPath=getExecuteFullPathSingle(exeName);return fullPath;}"
2864	"@SuppressWarnings(""unchecked"") @Override public void run(){this.clearProgressSolutions(); final int numThreads=Math.min(Runtime.getRuntime().availableProcessors()*2,this.numberOfSolverStrategies); final ThreadFactory threadFactory=new ThreadFactory(){  final ThreadFactory defaultFactory=Executors.defaultThreadFactory();  @Override public Thread newThread(  Runnable r){    final Thread t=this.defaultFactory.newThread(r);    t.setPriority(Thread.MIN_PRIORITY);    return t;  }}; final ExecutorService executor=Executors.newFixedThreadPool(numThreads,threadFactory); final List<Future<Solution>> futureSolutions=new ArrayList<Future<Solution>>();int strategyIdx;for(strategyIdx=0;strategyIdx<STRATEGIES.length;++strategyIdx){if(strategyIdx>=this.numberOfSolverStrategies){strategyIdx=Integer.MAX_VALUE;break;}if(DfsExhaustiveStrategy.class.equals(STRATEGIES[strategyIdx])){break;} final Solver solver=AbstractSolver.createSolver((Class<Strategy>)STRATEGIES[strategyIdx],this.board);futureSolutions.add(executor.submit(new Callable<Solution>(){  public Solution call() throws Exception {    try {      solver.execute(SolverRun.this.startPos,null);      return solver.getSolution();    }  finally {      final String info=solver.getSolverInfo();      if ((null != info) && (0 != info.length())) {        System.out.println(info);      }    }  }}));}Solution bestSolution=null;for(int waitMask=(1<<futureSolutions.size())-1;waitMask!=0;){for(int i=0;i<futureSolutions.size();++i){ final int iMask=(1<<i);if(0!=(waitMask&iMask)){waitMask^=iMask;Solution solution=null;try{solution=futureSolutions.get(i).get(0==waitMask?5000:50,TimeUnit.MILLISECONDS);}catch(InterruptedException e){System.out.println(""***** SolverRun interrupted *****"");executor.shutdownNow();waitMask=0;break;}catch(ExecutionException e){if(false==e.getCause() instanceof InterruptedException){e.printStackTrace();}solution=new Solution(new byte[0],SOLVER_NAMES[i]);}catch(CancellationException e){}catch(TimeoutException e){waitMask|=iMask;}if(null!=solution){if((null==bestSolution)||(solution.getNumSteps()<bestSolution.getNumSteps())){bestSolution=solution;}this.addProgressSolution(new GameProgress(this.board,this.startPos,solution));System.out.println(padRight(solution.getSolverName(),21+2)+padRight(""steps(""+solution.getNumSteps()+"")"",7+2+2)+""solution(""+solution+"")"");}}}}executor.shutdown();if((strategyIdx<STRATEGIES.length)&&DfsExhaustiveStrategy.class.equals(STRATEGIES[strategyIdx])){ final Solver solver=AbstractSolver.createSolver((Class<Strategy>)STRATEGIES[strategyIdx],this.board);Solution solution=null;try{solver.execute(this.startPos,bestSolution);solution=solver.getSolution();}catch(InterruptedException e){System.out.println(""***** SolverRun interrupted *****"");}catch(Throwable e){if(false==e.getCause() instanceof InterruptedException){e.printStackTrace();}solution=new Solution(new byte[0],SOLVER_NAMES[strategyIdx]);}finally{ final String info=solver.getSolverInfo();if((null!=info)&&(0!=info.length())){System.out.println(info);}if(null!=solution){this.addProgressSolution(new GameProgress(this.board,this.startPos,solution));System.out.println(padRight(solution.getSolverName(),21+2)+padRight(""steps(""+solution.getNumSteps()+"")"",7+2+2)+""solution(""+solution+"")"");}}}System.out.println();this.activeSolverRun.compareAndSet(this,null);this.firePropertyChange(GameState.PROPERTY_HINT,null,null);}"
2865	"@Override public void onCompletion(MediaPlayer mp){if(control_RepeatingAlarm){try{MainActivity.snooze_alarm.setText(""I'm Woke!"");SharedPreferences sharedPref_alarm_unset1=getSharedPreferences(""Alarm Unset"",MODE_PRIVATE);SharedPreferences.Editor editor_alarm_unset=sharedPref_alarm_unset1.edit();editor_alarm_unset.putString(""Alarm Button Text"",""I'm Woke!"");editor_alarm_unset.apply();alarm_service.isRunning=false;snooze_restart();}catch(NullPointerException e){SharedPreferences sharedPref_alarm_unset2=getSharedPreferences(""Alarm Unset"",MODE_PRIVATE);SharedPreferences.Editor editor_alarm_unset=sharedPref_alarm_unset2.edit();editor_alarm_unset.putString(""Alarm Button Text"",""I'm Woke!"");editor_alarm_unset.apply();alarm_service.isRunning=false;snooze_restart();}}else {try{MainActivity.snooze_alarm.setText(""Alarm Off"");Log.e(""Not repeating"",""This alarm does not repeat"");control_RepeatingAlarm=if_RepeatingAlarm;already_Pressed=false;SharedPreferences sharedPref_alarm_unset3=getSharedPreferences(""Alarm Unset"",MODE_PRIVATE);SharedPreferences.Editor editor_alarm_unset=sharedPref_alarm_unset3.edit();editor_alarm_unset.putString(""Alarm Button Text"",""Alarm Off"");editor_alarm_unset.apply();}catch(NullPointerException e){SharedPreferences sharedPref_alarm_unset3=getSharedPreferences(""Alarm Unset"",MODE_PRIVATE);SharedPreferences.Editor editor_alarm_unset=sharedPref_alarm_unset3.edit();editor_alarm_unset.putString(""Alarm Button Text"",""Alarm Off"");editor_alarm_unset.apply();control_RepeatingAlarm=if_RepeatingAlarm;already_Pressed=false;}}}"
2866	"public void placePiece(View view){ImageView current=(ImageView)view;TextView instructions=(TextView)findViewById(R.id.instructionsText);Button playAgainButton=(Button)findViewById(R.id.playAgainButton);if(current.getDrawable()==null){current.setTranslationY(-1000.0);boolean playerHasWon=false;if(currentPlayer==0){current.setImageResource(R.drawable.red);redSpaces.add(Integer.parseInt(view.getTag().toString()));playerHasWon=checkForWinner(redSpaces);if(playerHasWon){Log.i(""MattInfo"",""RED has won!"");instructions.setText(""RED has won!"");playAgainButton.setVisibility(View.VISIBLE);playAgainButton.animate().alpha(1.0).setStartDelay(500).setDuration(500);}else {currentPlayer=1;instructions.setText(""It's YELLOW's turn"");}}else {current.setImageResource(R.drawable.yellow);yellowSpaces.add(Integer.parseInt(view.getTag().toString()));playerHasWon=checkForWinner(yellowSpaces);if(playerHasWon){instructions.setText(""YELLOW has won!"");Log.i(""MattInfo"",""YELLOW has won!"");playAgainButton.setVisibility(View.VISIBLE);playAgainButton.animate().alpha(1.0).setStartDelay(500).setDuration(200);}else {currentPlayer=0;instructions.setText(""It's RED's turn"");}}current.animate().translationYBy(1000.0).rotation(180).setDuration(500);if(redSpaces.size()+yellowSpaces.size()==9){instructions.setText(""It's a cat's game"");playAgainButton.setVisibility(View.VISIBLE);playAgainButton.animate().alpha(1.0).setStartDelay(500).setDuration(200);}}}"
2867	"@Override public DatasetColumnComment mapRow(ResultSet rs,int rowNum) throws SQLException{Long id=rs.getLong(ID_COLUMN);String author=rs.getString(AUTHOR_COLUMN);String text=rs.getString(TEXT_COLUMN);String created=rs.getString(CREATED_TIME_COLUMN);String modified=rs.getString(MODIFIED_TIME_COLUMN);Long columnId=rs.getLong(FIELD_ID_COLUMN);String strIsDefault=rs.getString(IS_DEFAULT_COLUMN);boolean isDefault=false;if(StringUtils.isNotBlank(strIsDefault)&&strIsDefault==""Y""){isDefault=true;}DatasetColumnComment datasetColumnComment=new DatasetColumnComment();datasetColumnComment.id=id;datasetColumnComment.author=author;datasetColumnComment.text=text;datasetColumnComment.created=created;datasetColumnComment.modified=modified;datasetColumnComment.columnId=columnId;datasetColumnComment.isDefault=isDefault;return datasetColumnComment;}"
2868	"@Override public boolean tryAdvance(Consumer<? super R> action){for(;;){if(active!=null&&active.hasNext()){action.accept(active.next());if(active.hasNext()){return true;}}boolean advance=source.tryAdvance(t -> {  if (active == null || !active.hasNext()) {    Publisher<R> flatten=(Publisher<R>)mapper.apply(t);    SeqSubscriber<R> sub=SeqSubscriber.subscriber();    flatten.subscribe(sub);    active=(Iterator<R>)sub.iterator();  }});if(!advance){return false;}}}"
2869	"private boolean isNated(DecoratedAddress address){return (address.getTrait(Nated.class)!=null);}"
2870	"@Override public void onClick(View v){if(mLastClickedViewHolder!=null){mLastClickedViewHolder.mTitle.setTextColor(res.getColor(R.color.black));mLastClickedViewHolder.mCount.setTextColor(res.getColor(R.color.black_30));}sideViewHolder.mTitle.setTextColor(res.getColor(R.color.colorPrimary));sideViewHolder.mCount.setTextColor(res.getColor(R.color.colorPrimary));mLastClickedViewHolder=sideViewHolder;if(mOnSideItemClickListener!=null){mOnSideItemClickListener.onSideItemClick(sideItem);mInitSelectedSideId=sideItem.id;}}"
2871	"public static String getTTSURL(TTSInfo ttsInfo,String textForSpeech,Session session){String language=Language.getByValue(null).getCode();String speed=""0"";String codec=""WAV"";String format=""8khz_8bit_mono"";String voice=null;String serviceProvider=null;String ttsAccountId=null;String accountId=null;if(ttsInfo!=null){language=ttsInfo.getLanguage().getCode();speed=ttsInfo.getSpeed();codec=ttsInfo.getCodec();format=ttsInfo.getFormat();voice=ttsInfo.getVoiceUsed();serviceProvider=ttsInfo.getProvider()!=null?ttsInfo.getProvider().name():null;format=ttsInfo.getFormat();ttsAccountId=ttsInfo.getTtsAccountId();accountId=session.getAccountId();textForSpeech=textForSpeech.replace(""text://"","""");if(!TTSProvider.VOICE_RSS.equals(ttsInfo.getProvider())){if(ttsAccountId!=null){try{DDRUtils.createDDRForTTSService(ttsInfo.getProvider(),ttsAccountId,session,true);}catch(Exception e){e.printStackTrace();log.severe(""Applying service charge for TTS processing failed."");}}else {DDRUtils.createDDRForTTS(session!=null?session.getRemoteAddress():null,session,ttsInfo,textForSpeech);}}}String url=Settings.TTS_ENDPOINT;try{url=ServerUtils.getURLWithQueryParams(url,""text"",textForSpeech);url=ServerUtils.getURLWithQueryParams(url,""lang"",language);url=ServerUtils.getURLWithQueryParams(url,""codec"",codec);url=ServerUtils.getURLWithQueryParams(url,""speed"",speed);url=ServerUtils.getURLWithQueryParams(url,""format"",format);url=ServerUtils.getURLWithQueryParams(url,""voice"",voice);url=ServerUtils.getURLWithQueryParams(url,""service"",serviceProvider);url=ServerUtils.getURLWithQueryParams(url,""id"",ttsAccountId);url=ServerUtils.getURLWithQueryParams(url,""askFastAccountId"",accountId);url+=""&type=.wav"";}catch(Exception ex){ex.printStackTrace();}return url;}"
2872	"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){progress=Math.max(1,progress);penWidthView.setPaintStrokeWidth(progress);mPenWidth=progress;if(mPenWidth<1){mPenWidth=1;}if(mOnColorPickerListener!=null){mOnColorPickerListener.onSelectedPenWidth(mPenWidth);}}"
2873	"@Column(name=""wicket_status"",columnDefinition=""CHAR"") @Type(type=""org.hibernate.type.NumericBooleanType"") public boolean isOut(){return isOut;}"
2874	"@Nullable public static PossibleTrip getPossibleTripFromCursor(Cursor cursor){PossibleTrip possibleTrip=new PossibleTrip();if(!cursor.isAfterLast()){Float price=cursor.getFloat(cursor.getColumnIndex(""price""));String routeId=cursor.getString(cursor.getColumnIndex(""route_id""));String stop1Id=cursor.getString(cursor.getColumnIndex(""st1__stop_id""));String stop2Id=cursor.getString(cursor.getColumnIndex(""st2__stop_id""));String stop1Name=cursor.getString(cursor.getColumnIndex(""st1__stop_name""));String stop2Name=cursor.getString(cursor.getColumnIndex(""st2__stop_name""));String tripId=cursor.getString(cursor.getColumnIndex(""st1__trip_id""));String routeLongName=cursor.getString(cursor.getColumnIndex(""route_long_name""));Integer stopOneSequence=cursor.getInt(cursor.getColumnIndex(""st1__stop_sequence""));Integer stopTwoSequence=cursor.getInt(cursor.getColumnIndex(""st2__stop_sequence""));LocalTime stopOneDepartureTime=new LocalTime(cursor.getString(cursor.getColumnIndex(""st1__departure_time"")).replaceFirst(""^24:"",""01:""));LocalTime stopOneArrivalTime=new LocalTime(cursor.getString(cursor.getColumnIndex(""st1__arrival_time"")).replaceFirst(""^24:"",""01:""));LocalTime stopTwoDepartureTime=new LocalTime(cursor.getString(cursor.getColumnIndex(""st2__departure_time"")).replaceFirst(""^24:"",""01:""));LocalTime stopTwoArrivalTime=new LocalTime(cursor.getString(cursor.getColumnIndex(""st2__arrival_time"")).replaceFirst(""^24:"",""01:""));if(stopOneSequence<stopTwoSequence){possibleTrip.setArrivalTime(stopOneDepartureTime);possibleTrip.setDepartureTime(stopTwoArrivalTime);possibleTrip.setFirstStopSequence(stopOneSequence);possibleTrip.setLastStopSequence(stopTwoSequence);possibleTrip.setFirstStopId(stop1Id);possibleTrip.setLastStopId(stop2Id);possibleTrip.setFirstStopName(stop1Name);possibleTrip.setLastStopName(stop2Name);}else {possibleTrip.setArrivalTime(stopTwoDepartureTime);possibleTrip.setDepartureTime(stopOneArrivalTime);possibleTrip.setFirstStopSequence(stopTwoSequence);possibleTrip.setLastStopSequence(stopOneSequence);possibleTrip.setFirstStopId(stop2Id);possibleTrip.setLastStopId(stop1Id);possibleTrip.setFirstStopName(stop2Name);possibleTrip.setLastStopName(stop1Name);}possibleTrip.setRouteLongName(routeLongName);possibleTrip.setPrice(price);possibleTrip.setTripId(tripId);possibleTrip.setRouteId(routeId);return possibleTrip;}return null;}"
2875	"void drain(){if(getAndIncrement()!=0){return ;}int missed=1;SpscLinkedArrayQueue<Object> q=queue;Observer<? super R> a=actual;for(;;){for(;;){if(cancelled){q.clear();return ;}Throwable ex=error.get();if(ex!=null){q.clear();cancelAll();errorAll(a);return ;}boolean d=active.get()==0;Integer mode=(Integer)q.poll();boolean empty=mode==null;if(d&&empty){lefts.clear();rights.clear();disposables.dispose();a.onComplete();return ;}if(empty){break;}Object val=q.poll();if(mode==LEFT_VALUE){ @SuppressWarnings(""unchecked"") TLeft left=(TLeft)val;int idx=leftIndex++;lefts.put(idx,left);ObservableSource<TLeftEnd> p;try{p=ObjectHelper.requireNonNull(leftEnd.apply(left),""The leftEnd returned a null ObservableSource"");}catch(Throwable exc){fail(exc,a,q);return ;}LeftRightEndObserver end=new LeftRightEndObserver(this,true,idx);disposables.add(end);p.subscribe(end);ex=error.get();if(ex!=null){q.clear();cancelAll();errorAll(a);return ;}for(TRight right : rights.values()){R w;try{w=ObjectHelper.requireNonNull(resultSelector.apply(left,right),""The resultSelector returned a null value"");}catch(Throwable exc){fail(exc,a,q);return ;}a.onNext(w);}}else {if(mode==RIGHT_VALUE){ @SuppressWarnings(""unchecked"") TRight right=(TRight)val;int idx=rightIndex++;rights.put(idx,right);ObservableSource<TRightEnd> p;try{p=ObjectHelper.requireNonNull(rightEnd.apply(right),""The rightEnd returned a null ObservableSource"");}catch(Throwable exc){fail(exc,a,q);return ;}LeftRightEndObserver end=new LeftRightEndObserver(this,false,idx);disposables.add(end);p.subscribe(end);ex=error.get();if(ex!=null){q.clear();cancelAll();errorAll(a);return ;}for(TLeft left : lefts.values()){R w;try{w=ObjectHelper.requireNonNull(resultSelector.apply(left,right),""The resultSelector returned a null value"");}catch(Throwable exc){fail(exc,a,q);return ;}a.onNext(w);}}else {if(mode==LEFT_CLOSE){LeftRightEndObserver end=(LeftRightEndObserver)val;lefts.remove(end.index);disposables.remove(end);}else {LeftRightEndObserver end=(LeftRightEndObserver)val;rights.remove(end.index);disposables.remove(end);}}}}missed=addAndGet(-missed);if(missed==0){break;}}}"
2876	"private void skipChildElementsFromMiniStack(JsonObject parentObject){JsonObject tempObject=miniStack.pop();processedJsonObjects.push(tempObject);if(parentObject.getChildObjects()!=null&&parentObject.getChildObjects().size()>0){for(String childName : parentObject.getChildObjects()){JsonObject childObject=miniStack.peek();if(childObject.getName().equals(childName)&&childObject.getParentName().equals(parentObject.getName())){tempObject=miniStack.pop();processedJsonObjects.push(tempObject);JsonObject tempParentObject=miniStack.peek();if(tempParentObject.getChildObjects()!=null&&tempParentObject.getChildObjects().size()>0){skipChildElementsFromMiniStack(tempParentObject);}}}}}"
2877	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null){return false;}if(getClass()!=o.getClass()){return false;}CSSElement oElement=(CSSElement)o;if(!selector.equals(oElement.selector)){return false;}if(atts.size()!=oElement.atts.size()){return false;}for(int i=0;i<atts.size();++i){if(!atts.get(i).equals(oElement.atts.get(i))){return false;}}return true;}"
2878	"boolean isActiveChoiceAtom(int atom){ChoicePoint choicePoint=influencers.get(atom);return choicePoint!=null&&choicePoint.isActive;}"
2879	"private void keyBackSpaceAction(TextArea gui,int caretPosition,TextState textState,int mods){if(gui.isEditable()&&caretPosition!=0){if((mods&GLFW_MOD_CONTROL)!=0){gui.setEndSelectionIndex(findPrevWord(textState.getText(),caretPosition));}int start=gui.getStartSelectionIndex();int end=gui.getEndSelectionIndex();if(start>end){start=gui.getEndSelectionIndex();end=gui.getStartSelectionIndex();}if(start==end){textState.deleteCharAt(caretPosition-1);gui.setCaretPosition(caretPosition-1);}else {textState.delete(start,end);gui.setCaretPosition(start);gui.setStartSelectionIndex(start);gui.setEndSelectionIndex(start);}}}"
2880	"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){super.onActivityResult(requestCode,resultCode,data);if(requestCode==LOCATION_PICKER_REQUEST){if(resultCode==RESULT_OK){place=PlacePicker.getPlace(data,this);mTastingSummaryInput.setText(place.getAddress().toString());}}else {if(requestCode==Constants.TAKE_PICTURE){if(resultCode==RESULT_OK){imageData=(Bitmap)data.getExtras().get(""data"");mTastingPicture.setImageBitmap(imageData);mTastingPicture.setVisibility(View.VISIBLE);}}}}"
2881	"public void insert(){String facultyName=inputFacultyName.getText().toString().trim();String facultyDesignation=inputFacultyDesignation.getText().toString().trim();String facultyContact=inputFacultyContact.getText().toString().trim();String facultyEmail=inputFacultyEmail.getText().toString().trim();String facultyBranch=inputFacultyBranchSpinner.getSelectedItem().toString().trim();int facultyBranchId=getBranchSpinner(facultyBranch);if(facultyName.isEmpty()||facultyDesignation.isEmpty()||facultyContact.isEmpty()||facultyEmail.isEmpty()||facultyBranchId==0){Toast.makeText(getActivity(),""Please fill the input field"",Toast.LENGTH_SHORT).show();}else {if(facultyName.equals(lblFacultyName)&&facultyEmail.equals(lblFacultyEmail)&&facultyDesignation.equals(lblFacultyDesignation)){Toast.makeText(getActivity(),""You already made an entry for this"",Toast.LENGTH_SHORT).show();}else {String url=URL;FacultyMemberRepo facultyMemberRepo=new FacultyMemberRepo();FacultyMember facultyMember=new FacultyMember();facultyMember.setFacultyMemberName(facultyName);facultyMember.setFacultyMemberDesignation(facultyDesignation);facultyMember.setFacultyMemberContact(facultyContact);facultyMember.setFacultyMemberEmail(facultyEmail);facultyMember.setFacultyMemberBranchId(facultyBranchId);String status=facultyMemberRepo.insert(facultyMember,url);String[] statusArray=status.replaceAll(""[{}]"","""").split("","");if(statusArray[0].equals(""\""error\"":false"")){inputFacultyName.setText("""");inputFacultyDesignation.setText("""");inputFacultyContact.setText("""");inputFacultyEmail.setText("""");Toast.makeText(getActivity(),""Added Successfully"",Toast.LENGTH_SHORT).show();show_data();}else {Toast.makeText(getActivity(),status,Toast.LENGTH_SHORT).show();show_data();}}}}"
2882	"private static long findBlocksize(INode inode){ final Block[] ret=inode.getBlocks();return ret==null?0L:ret[0].getLength();}"
2883	"public int getImpact3(int level){if(this.impact3==null||level<0||level>=this.impact3.length){return 0;}return this.impact3[level];}"
2884	"private void displayIACards(){Image imageIA=new Image(getClass().getResourceAsStream(""/img/face_retournee.png""));int sizeCardsList=aiPlayer.getSizeOfList();OpponentHand.getChildren().clear();for(int i=0;i<sizeCardsList;i++){ImageView imageViewIA=createImageView(imageIA,72,100);ImageView animation=createImageView(imageIA,72,100);imageViewIA.setOnMouseClicked(handleChooseCardHandAI);imageViewIA.setX(450/sizeCardsList*i);imageViewIA.setId(""""+i);if(firstAnimation||(i==sizeCardsList-1&&onylDisplay==false)){animation.setX(22);animation.setY(224);AnchorPane dad=(AnchorPane)OpponentHand.getParent();TranslateTransition anim=new TranslateTransition();anim.setDuration(Duration.millis(i*150+500));anim.setToX(284+(450/sizeCardsList*i));anim.setToY(-224);anim.setOnFinished(e -> SwitchForIA(dad,animation,imageViewIA));anim.setNode(animation);anim.play();dad.getChildren().add(animation);}else {OpponentHand.getChildren().add(imageViewIA);}}firstAnimation=false;onylDisplay=false;}"
2885	"@GET @Path(""related_documents"") @Produces(MediaType.APPLICATION_XML + "";charset=utf-8"") public RootElement getRelatedDocumentSet(HttpServletRequest request,String inputQuery,String partnerName,String appName,String appVersion,String appLang){if(constants.getDebugModeOn()){System.out.println(""started getRelatedDocumentSet with input: ""+inputQuery);}String ipAddress=request.getHeader(""X-FORWARDED-FOR"");if(ipAddress==null){ipAddress=request.getRemoteAddr();}DisplayDocument requestDocument=null;DocumentSet documentset=new DocumentSet();Long timeToPickAlgorithm=null;Long timeToUserModel=null;Long timeAfterExecution=null;Boolean requestByTitle=false;boolean fourOFourError=false;String applicationId="""";String partnerId="""";try{if(partnerName!=null&&appName!=null){try{applicationId=con.getApplicationId(appName);partnerId=con.getOrganizationId(partnerName);Boolean appVerified=con.verifyLinkAppOrg(applicationId,partnerId);if(!appVerified){statusReportSet.addStatusReport(new StatusReport(401,""Application_id ""+appName+"" is not linked with organization_id: ""+partnerName));}}catch(NoEntryException e){statusReportSet.addStatusReport(new StatusReport(401,""Authenticity check is invalid. There is no link between app_id and org_id that has been provided in the query URL"",""Application_id: ""+appName+"" organization_id: ""+partnerName));}}else {applicationId=null;partnerId=null;}{documentset.setIpAddress(ipAddress);documentset.setStartTime(requestRecieved);if(applicationId!=null){documentset.setRequestingAppId(applicationId);}if(partnerId!=null){documentset.setRequestingPartnerId(partnerId);}if(appVersion!=null){documentset.setAppVersion(appVersion);}if(appLang!=null&&appLang.length()>1){documentset.setAppLang(appLang.substring(0,2));}}try{if(constants.getDebugModeOn()){System.out.println(""try int"");}Integer.parseInt(inputQuery);requestDocument=con.getDocumentBy(constants.getDocumentId(),inputQuery);}catch(NoEntryException e){requestDocument=new DisplayDocument();requestDocument.setDocumentId(inputQuery);requestByTitle=false;throw e;}catch(NumberFormatException e){if(constants.getDebugModeOn()){System.out.println(""int failed"");}try{if(constants.getDebugModeOn()){System.out.println(""try origonal id"");}requestDocument=con.getDocumentBy(constants.getIdOriginal(),inputQuery);}catch(NoEntryException e1){if(constants.getDebugModeOn()){System.out.println(""original id failed"");}inputQuery=inputQuery.replaceAll(""convbckslsh"",""/"");if(constants.getDebugModeOn()){System.out.println(""searching the database for a document with title"");}try{requestDocument=con.getDocumentBy(constants.getTitle(),inputQuery);if(constants.getDebugModeOn()){System.out.println(""The Document is in our Database!"");}}catch(Exception e2){if(constants.getDebugModeOn()){System.out.println(""it seems there is no document in our database with this title"");}if(constants.getDebugModeOn()){System.out.println(""lets now try if this matches a pattern in our database. In that case, we have a 404 error"");}Boolean prefixMatch=con.matchCollectionPattern(inputQuery,partnerId);requestDocument=new DisplayDocument();requestDocument.setTitle(inputQuery);inputQuery=inputQuery.replaceAll("":|\\+|\\-|\\&|\\!|\\(|\\)|\\{|\\}|\\[|\\]|\\^|\""|\\~|\\?|\\*|\\\\"","" "");requestDocument.setCleanTitle(inputQuery);if(!prefixMatch){requestByTitle=true;inputQuery=inputQuery.toLowerCase();System.out.println(""requestDocument: ""+requestDocument.getTitle());}else {throw new NoEntryException(inputQuery);}}}}Boolean validAlgorithmFlag=false;int numberOfAttempts=0;while(!validAlgorithmFlag&&numberOfAttempts<constants.getNumberOfRetries()){try{if(constants.getDebugModeOn()){System.out.println(""trying to get the algorithm from the factory"");}relatedDocumentGenerator=RecommenderFactory.getRandomRDG(con,requestDocument,requestByTitle);timeToPickAlgorithm=System.currentTimeMillis();timeToUserModel=timeToPickAlgorithm;if(constants.getDebugModeOn()){System.out.println(""chosen algorithm: ""+relatedDocumentGenerator.algorithmLoggingInfo.getName());}documentset.setRequestedDocument(requestDocument);documentset.setDesiredNumberFromAlgorithm(ar.getNumberOfCandidatesToReRank());documentset=relatedDocumentGenerator.getRelatedDocumentSet(documentset);validAlgorithmFlag=true;}catch(NoRelatedDocumentsException e){if(constants.getDebugModeOn()){System.out.println(""algorithmLoggingInfo: ""+relatedDocumentGenerator.algorithmLoggingInfo.toString());}validAlgorithmFlag=false;numberOfAttempts++;if(requestByTitle){statusReportSet.addStatusReport(new StatusReport(404,""No related documents corresponding to input query:""+requestDocument.getCleanTitle()));validAlgorithmFlag=true;}}}if(validAlgorithmFlag){if(numberOfAttempts>0){if(constants.getDebugModeOn()){System.out.printf(""We retried %d times for document ""+requestDocument.getDocumentId()+""\n"",numberOfAttempts);}documentset.setRequestedDocument(requestDocument);}}else {if(constants.getDebugModeOn()){System.out.println(""Using fallback recommender"");}relatedDocumentGenerator=RecommenderFactory.getFallback(con);try{documentset=relatedDocumentGenerator.getRelatedDocumentSet(documentset);}catch(NoRelatedDocumentsException e){if(constants.getDebugModeOn()){System.out.println(""No related documents in fallback either"");}documentset.setRequestedDocument(requestDocument);}}if(constants.getDebugModeOn()){System.out.println(""Do the documentset stuff"");}timeAfterExecution=System.currentTimeMillis();if(documentset.getSize()>0){documentset=ar.selectRandomRanking(documentset);documentset.setAfterAlgorithmExecutionTime(timeAfterExecution-timeToUserModel);documentset.setAfterAlgorithmChoosingTime(timeToPickAlgorithm-requestRecieved);documentset.setAfterUserModelTime(timeToUserModel-timeToPickAlgorithm);documentset.setAfterRerankTime(System.currentTimeMillis()-timeAfterExecution);documentset.setRankDelivered();documentset.setNumberOfDisplayedRecommendations(documentset.getSize());}else {throw new NoRelatedDocumentsException(documentset.getRequestedDocument().getOriginalDocumentId(),documentset.getRequestedDocument().getDocumentId());}}catch(NoEntryException e1){fourOFourError=true;statusReportSet.addStatusReport(e1.getStatusReport());}catch(NoRelatedDocumentsException e){statusReportSet.addStatusReport(e.getStatusReport());}catch(Exception e){statusReportSet.addStatusReport(new UnknownException(e,constants.getDebugModeOn()).getStatusReport());e.printStackTrace();}if(statusReportSet.getSize()==0){statusReportSet.addStatusReport(new StatusReport(200,new StatusMessage(""ok"",""en"")));}else {for(StatusReport statusReport : statusReportSet.getStatusReportList()){if(statusReport.getStatusCode()==404){fourOFourError=true;break;}}if(fourOFourError){System.out.println(""Got here"");statusReportSet=new StatusReportSet();if(requestByTitle){statusReportSet.addStatusReport(new StatusReport(404,""Documents related to query by title(""+requestDocument.getTitle()+"" )were not found""));}else {statusReportSet.addStatusReport(new StatusReport(404,""No such document with document id ""+requestDocument.getDocumentId()+"" exists in our database""));}}}System.out.println(""Did the documentset stuff"");rootElement.setDocumentSet(documentset);rootElement.setStatusReportSet(statusReportSet);if(constants.getDebugModeOn()){System.out.println(""added stuff to root element"");System.out.println(""requestByTitle is: ""+requestByTitle);System.out.println(""Try to do the logging stuff"");}try{String referenceId="""";if(requestByTitle){String titleStringId=con.getTitleStringId(requestDocument);referenceId=titleStringId;}else {referenceId=requestDocument.getDocumentId();}documentset=con.logRecommendationDeliveryNew(referenceId,rootElement,requestByTitle);for(DisplayDocument doc : documentset.getDocumentList()){String url=""https://""+constants.getEnvironment()+"".mr-dlib.org/v1/recommendations/""+doc.getRecommendationId()+""/original_url?access_key=""+documentset.getAccessKeyHash()+""&format=direct_url_forward"";doc.setClickUrl(url);}}catch(Exception e){System.out.println(""nullpointer catched"");e.printStackTrace();statusReportSet.addStatusReport(new UnknownException(e,constants.getDebugModeOn()).getStatusReport());}try{System.out.println(""try to close the db con"");if(con!=null){con.close();}}catch(Exception e){statusReportSet.addStatusReport(new UnknownException(e,constants.getDebugModeOn()).getStatusReport());}try{if(statusReportSet.getSize()>1){statusReportSet.setDebugDetailsPerSetInStatusReport(documentset.getDebugDetailsPerSet());}}catch(NullPointerException e){e.printStackTrace();}if(!constants.getDebugModeOn()){DisplayDocument current=null;if(rootElement.getDocumentSet().getSize()>0){rootElement.getDocumentSet().setDebugDetailsPerSet(null);for(int i=0;i<documentset.getSize();i++){current=rootElement.getDocumentSet().getDisplayDocument(i);current.setDebugDetails(null);}}for(StatusReport report : rootElement.getStatusReportSet().getStatusReportList()){report.setDebugMessage(null);}}if(documentset.getSize()==0){rootElement.setDocumentSet(null);}return rootElement;}"
2886	"private void terminateVms(DateTime tau_t_0){for(VirtualMachine vm : cacheVirtualMachineService.getStartedVMs()){long timeUntilTermination=placementHelper.getRemainingLeasingDuration(tau_t_0,vm);if(timeUntilTermination<MIN_TAU_T_DIFFERENCE_MS){if(vm.getDeployedContainers().size()>0){log.info(""Extend leasing of VM: ""+vm.toString());vm.setToBeTerminatedAt(new DateTime(vm.getToBeTerminatedAt().getMillis()+vm.getVmType().getLeasingDuration()));}else {placementHelper.terminateVM(vm);}}}}"
2887	"private CombatPhase determinePostCombatPhase(){if(p1.has(Trait.leveldrainer)^p2.has(Trait.leveldrainer)&&!p1.has(Trait.strapped)&&!p2.has(Trait.strapped)){Character drainer=p1.has(Trait.leveldrainer)?p1:p2;Character drained=p1.has(Trait.leveldrainer)?p2:p1;if(!getCombatantData(drainer).getBooleanFlag(""has_drained"")){if(!getStance().havingSex(this)){Position mountStance=new Mount(drainer,drained);if(mountStance.insert(this,drained,drainer)!=mountStance){write(drainer,Global.format(""With {other:name-do} defeated, {self:subject-action:climb|climbs} ""+""on top of {other:direct-object} and inserts {other:possessive} cock into {self:reflective}."",drainer,drained));setStance(mountStance.insert(this,drained,drainer));}else {if(mountStance.insert(this,drainer,drainer)!=mountStance){write(drainer,Global.format(""With {other:name-do} defeated, {self:subject-action:climb|climbs} ""+""on top of {other:direct-object} and inserts {self:reflective} into {other:possessive} soaking vagina."",drainer,drained));setStance(mountStance.insert(this,drainer,drainer));}else {if(drainer.hasPussy()&&drained.hasPussy()){write(drainer,Global.format(""With {other:name-do} defeated, {self:subject-action:climb|climbs} ""+""on top of {other:direct-object} and presses {self:possessive} wet snatch on top of {other:possessive}s."",drainer,drained));setStance(new TribadismStance(drainer,drained));}else {write(drainer,Global.format(""With {other:name-do} defeated, {self:subject-action:climb|climbs} ""+""on top of {other:direct-object}. However, {self:pronoun} could not figure a ""+""way to drain {other:possessive} levels."",drainer,drained));return CombatPhase.RESULTS_SCENE;}}}}else {if(phase==CombatPhase.LEVEL_DRAIN){if(getCombatantData(drainer).getIntegerFlag(""level_drain_thrusts"")<10){Skill thrustSkill=getStance().en==Stance.trib?new PussyGrind(drainer):Global.pickRandom(new Thrust(drainer),new Grind(drainer),new Piston(drainer)).get();thrustSkill.resolve(this,drained);getCombatantData(drainer).increaseIntegerFlag(""level_drain_thrusts"",1);}else {drained.doOrgasm(this,drainer,Global.pickRandom(getStance().partsFor(this,drained)).orElse(drained.body.getRandomGenital()),Global.pickRandom(getStance().partsFor(this,drainer)).orElse(drainer.body.getRandomGenital()));getCombatantData(drainer).setBooleanFlag(""has_drained"",true);}}}return getCombatantData(drainer).getBooleanFlag(""has_drained"")?CombatPhase.RESULTS_SCENE:CombatPhase.LEVEL_DRAIN;}}return CombatPhase.RESULTS_SCENE;}"
2888	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){String link=getArguments().getString(Constants.ArgsName.LINK);Author incomingAuthor=(Author)getArguments().getSerializable(Constants.ArgsName.AUTHOR);Author intentAuthor=null;setHasOptionsMenu(true);if(incomingAuthor!=null&&!incomingAuthor.equals(author)){intentAuthor=incomingAuthor;}else {if(link!=null&&(author==null||!author.getLink().equals(link))){intentAuthor=new Author(link);}}if(intentAuthor!=null){Author entity;if((entity=databaseService.getAuthor(intentAuthor.getLink()))!=null){author=entity;}else {author=intentAuthor;}clearData();}if(author.isParsed()){safeInvalidateOptionsMenu();EventBus.getDefault().post(new AuthorParsedEvent(author));}if(categoryUpdate==null){categoryUpdate=new Category();categoryUpdate.setTitle(getString(R.string.author_section_updates));categoryUpdate.setAnnotation(getString(R.string.author_section_updates_annotation));}simpleView=AndroidSystemUtils.getStringResPreference(getContext(),R.string.preferenceAuthorSimpleView,false);return super.onCreateView(inflater,container,savedInstanceState);}"
2889	"public String[] nextRow() throws IOException{ final List<String> row=new LinkedList<String>();char c;while(true){int i=reader.read();if(i==-1){return null;}c=(char)i;if(!escaped){switch (c){case '\\' :escaped=true;continue;case '\t' :row.add(builder.toString());builder.setLength(0);continue;case '\n' :row.add(builder.toString());builder.setLength(0);return row.toArray(new String[row.size()]);}}builder.append(c);escaped=false;}}"
2890	"public void iconStatusFollowingRepairing(){if(rpw.getRepairingUser()!=null){circleMini1.setVisible(false);if(circleMini.isVisible()==true){circleNoti.setVisible(true);}else {circleNoti.setVisible(false);}jLabelStatusRepairIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/bike_gui/picture/repairUserStep2.png"")));}else {if(rpw.getStatusUser()!=null&&rpw.getStatusUser().equalsIgnoreCase(""Success"")){circleMini1.setVisible(true);circleNoti.setVisible(true);jLabelStatusRepairIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/bike_gui/picture/repairUserStep3.png"")));}}}"
2891	"@Override public void onClick(View v){MenuItem item=menu.items.get(index);LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View customView=inflater.inflate(R.layout.item_details,null,false); final AlertDialog dialog=new AlertDialog.Builder(context).setCustomTitle(itemView.findViewById(R.id.menu_item_detail_title)).setView(customView).create();TextView name=(TextView)customView.findViewById(R.id.menu_item_detail_title);name.setText(item.facts.item_name);ImageView img=(ImageView)customView.findViewById(R.id.menu_item_detail_image);String image=item.facts.imageID;if(context.getResources().getIdentifier(image,""raw"",context.getPackageName())!=0){InputStream is=context.getResources().openRawResource(context.getResources().getIdentifier(image,""raw"",context.getPackageName()));Bitmap bitmap=BitmapFactory.decodeStream(is);img.setImageBitmap(bitmap);}TextView desc=(TextView)customView.findViewById(R.id.menu_item_description);desc.setText(item.facts.item_desc);TextView cal=(TextView)customView.findViewById(R.id.menu_item_cal_text);cal.setText(item.facts.calories);TextView fat=(TextView)customView.findViewById(R.id.menu_item_fat_text);fat.setText(item.facts.fat);TextView satfat=(TextView)customView.findViewById(R.id.menu_item_satfat_text);satfat.setText(item.facts.satfat);TextView transfat=(TextView)customView.findViewById(R.id.menu_item_transfat_text);transfat.setText(item.facts.transfat);TextView chol=(TextView)customView.findViewById(R.id.menu_item_chol_text);chol.setText(item.facts.chol);TextView carbs=(TextView)customView.findViewById(R.id.menu_item_carbs_text);carbs.setText(item.facts.carbo);TextView sugar=(TextView)customView.findViewById(R.id.menu_item_sugar_text);sugar.setText(item.facts.sugars);TextView protein=(TextView)customView.findViewById(R.id.menu_item_protein_text);protein.setText(item.facts.protein);dialog.show();dialog.findViewById(R.id.item_detail_main).setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    dialog.dismiss();  }});}"
2892	"public void setTotalOtherFees(List<FeeDetail> totalOtherFees,boolean invoiceFeesIncludedInTotal){this.totalOtherFees=totalOtherFees;if(invoiceFeesIncludedInTotal){FeeDetail f=new FeeDetail();f.setFee(FeeDetail.getFeeSum(totalInvoiceFees));f.setFeeVat(FeeDetail.getVatSum(totalInvoiceFees));FeeDetail.subtract(totalOtherFees,f);}}"
2893	"@Override public void onResume(){super.onResume();if(videoUri!=null){Log.v(Constants.TAG,""resume called ""+videoPosition);initializePlayer(videoUri);}}"
2894	"@Override public void onTouchEvent(RecyclerView rv,MotionEvent e){int action=e.getAction();if(action==MotionEvent.ACTION_DOWN&&rvOther.getScrollState()==RecyclerView.SCROLL_STATE_IDLE){lastY=rv.getScrollY();rv.addOnScrollListener(scrollListener);}else {if(action==MotionEvent.ACTION_UP&&rv.getScrollY()==lastY){rv.removeOnScrollListener(scrollListener);}}}"
2895	"static Object[] findMethodNode(String internalClassName,String name,String desc){try{ClassReader cr=new ClassReader(internalClassName);while(!cr.getClassName().equals(""java/lang/Object"")){ final ClassNode cn=new ClassNode();cr.accept(cn,0);for(MethodNode mn : (List<MethodNode>)cn.methods){if(mn.name.equals(name)&&mn.desc.equals(desc)){return new Object{mn,cr.getClassName()};}}cr=new ClassReader(cr.getSuperName());}}catch(IOException e){throw new IllegalStateException(""Method could not be found"",e);}throw new IllegalStateException(""Method could not be found"");}"
2896	"public static Object serialize(SerializeMapping serializeMapping,Object bean) throws Exception{if(bean==null){return null;}if(ReflectKit.isPrimitive(bean)||bean instanceof Number||bean instanceof Date){return bean;}if(bean instanceof Collection){return serialize(serializeMapping,((Collection)bean).toArray());}if(bean.getClass().isArray()){int length=Array.getLength(bean);ArrayList<Object> array=new ArrayList<>(length);for(int i=0;i<length;++i){array.add(serialize(serializeMapping,Array.get(bean,i)));}return array;}if(bean instanceof Map){Map map=(Map)bean;map.forEach((Object key,Object value) -> {  try {    map.put(key,serialize(serializeMapping,value));  } catch (  Exception e) {    throw new RuntimeException(e);  }});return map;}ArrayList<Integer> indexes=new ArrayList<>();ArrayList<Object> values=new ArrayList<>();ArrayList<String> keys=new ArrayList<>();int pos=0;for(Field field : bean.getClass().getDeclaredFields()){Object value;String key=field.getName();if(""this$0"".equals(key)||""serialVersionUID"".equals(key)){continue;}field.setAccessible(true);JsonIgnore jsonIgnore=field.getAnnotation(JsonIgnore.class);if(null!=jsonIgnore){continue;}JsonProperty jsonProperty=field.getAnnotation(JsonProperty.class);JsonFormat jsonFormat=field.getAnnotation(JsonFormat.class);SerializeMapping temp=SerializeMapping.builder().bigDecimalKeep(serializeMapping.getBigDecimalKeep()).datePatten(serializeMapping.getDatePatten()).build();if(null!=jsonFormat){switch (jsonFormat.type()){case DATE_PATTEN :temp.setDatePatten(jsonFormat.value());break;case BIGDECIMAL_KEEP :temp.setBigDecimalKeep(Integer.parseInt(jsonFormat.value()));break;default :break;}}if(jsonProperty!=null){value=serialize(temp,field.get(bean));if(!jsonProperty.value().isEmpty()){key=jsonProperty.value();}}else {value=serialize(temp,field.get(bean));}if(value instanceof Date){value=DateKit.toString((Date)value,temp.getDatePatten());}if(value instanceof BigDecimal){value=((BigDecimal)value).setScale(temp.getBigDecimalKeep()).toString();}int position=indexes.size();indexes.add(position,pos++);values.add(position,value);keys.add(position,key);}Ason<String,Object> ason=new Ason<>(indexes.size());for(int i=0;i<indexes.size();++i){ason.put(keys.get(i),values.get(i));}return ason;}"
2897	"public void viewList(){List<Record> records=utils.getRecords(database);Map<String,Integer> mapCount=new HashMap<>();Object[] title;Object[] count;String t;Integer c;for(Record r : records){int interval=Integer.parseInt(String.valueOf(r.getInterval()));int beginMonth=Integer.parseInt(mParseMonth.format(new Date(r.getBegin())));int beginYear=Integer.parseInt(mParseYear.format(new Date(r.getBegin())));int endMonth=Integer.parseInt(mParseMonth.format(new Date(r.getEnd())));int endYear=Integer.parseInt(mParseYear.format(new Date(r.getEnd())));if(isMonthTimeFlag&&beginMonth==mBeginMonth&&mBeginYear==beginYear&&mEndMonth==endMonth&&mEndYear==endYear){if(mapCount.get(r.getCategoryTitle())==null){mapCount.put(r.getCategoryTitle(),interval);}else {mapCount.put(r.getCategoryTitle(),mapCount.get(r.getCategoryTitle())+interval);}}if(isUserTimeFlag&&beginMonth>=mBeginMonth&&mBeginYear>=beginYear&&mEndMonth<=endMonth&&mEndYear<=endYear){if(mapCount.get(r.getCategoryTitle())==null){mapCount.put(r.getCategoryTitle(),interval);}else {mapCount.put(r.getCategoryTitle(),mapCount.get(r.getCategoryTitle())+interval);}}if(isAllTimeFlag){if(mapCount.get(r.getCategoryTitle())==null){mapCount.put(r.getCategoryTitle(),interval);}else {mapCount.put(r.getCategoryTitle(),mapCount.get(r.getCategoryTitle())+interval);}}}title=mapCount.keySet().toArray();count=mapCount.values().toArray();for(int i=mapCount.size()-1;i>=0;i--){for(int j=0;j<i;j++){if((Integer)count[j+1]>=(Integer)count[j]){c=(Integer)count[j+1];count[j+1]=count[j];count[j]=c;t=(String)title[j+1];title[j+1]=title[j];title[j]=t;}}}adapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_multiple_choice,title);mList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);mList.setAdapter(adapter);}"
2898	"@OnLongClick(R.id.refresh) public boolean onLongCalibrationClick(View view){if(view instanceof ImageView){ImageView v=(ImageView)view;if(isCalibrationActivated){this.chartComponent.disableCalibration();v.setBackground(ContextCompat.getDrawable(TMApplication.getContext(),R.drawable.greyripple));}else {v.setBackground(ContextCompat.getDrawable(TMApplication.getContext(),R.drawable.revertripple));this.chartComponent.enableCalibration();}this.isCalibrationActivated=!isCalibrationActivated;}return true;}"
2899	"@Override public int getItemViewType(int position){Daily news=mNewsList.get(position);return (news.images==null||news.images.size()==0)?ITEM_TYPE_TEXT:ITEM_TYPE_IMAGE;}"
2900	"@Override public void paint(BarChartVisualizationContext vc){if(!visible){return ;}Graphics2D g=(Graphics2D)getGraphics(vc).create();tooltips.clear();data.lock();try{int first=vc.getFirstVisibleCategoryIndex();for(int i=0;i<vc.getNumberOfVisibleCategories();i++){TValue value=data.get(first+i);if(value!=null){paintObject(i,value,vc,g);tooltips.add(createTooltipText(value,vc.getValuesLabelFormatter()));}else {tooltips.add(null);}}}catch(ValueException e){e.printStackTrace();}finally{data.unlock();g.dispose();}}"
2901	"public void simulate(){SimLog.init();discreteEvent=SimulationInputs.discreteEvent;mobility=SimulationInputs.mobility;System.out.println(""mobility ""+mobility);step=SimulationInputs.step;iterNumber=SimulationInputs.iterNumber;visual=SimulationInputs.visual;visualDelay=SimulationInputs.visualDelay;WsnSimulationWindow.setState(""Simulation : initialization ..."");System.out.println(""Initialization ... "");List<Device> devices=DeviceList.getNodes();SimLog.add(""========="");for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){device.initForSimulation();}if(mobility){device.fixori();device.loadRouteFromFile();if(device.canMove()){device.setEvent2(device.getNextTime());}else {device.setEvent2(Integer.MAX_VALUE);}if(device.getType()==Device.GAS){((Gas)device).init();}if(device.getType()==Device.FLYING_OBJECT){((FlyingGroup)device).start();}}}System.out.println(""End of Initialization."");int min=0;int min1;int min2;long time=0;long startTime=System.currentTimeMillis();System.out.println(""Start Simulation (WISEN : D-Event) ... "");long iter=0;WsnSimulationWindow.setState(""Simulation : End of initialization."");WsnSimulationWindow.setState(""Simulate (WISEN) ..."");try{String as="""";if(mobility){as=""_mob"";}PrintStream ps=new PrintStream(new FileOutputStream(Project.getProjectResultsPath()+""/wisen_simulation""+as+"".csv""));ps.print(""Time;"");for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){ps.print(device.getId()+"";"");}}ps.println();SimLog.add(""========="");boolean moving=false;if(mobility){if(discreteEvent){min1=getMin();min2=getMin2();}else {min1=step;min2=step;}if(min1<=min2){min=min1;moving=false;}if(min2<min1){min=min2;moving=true;}}else {min=getMin();}int omin=min;for(iter=0;(iter<iterNumber)&&(!stopSimulation());iter++){SimLog.add("""");SimLog.add(""-------------------"");SimLog.add(""-- ""+min);SimLog.add(""-------------------"");for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){device.setEvent(device.getEvent()-min);}if(mobility){device.setEvent2(device.getEvent2()-min);}}for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){if((device.getEvent()==0)||(device.getScript().getCurrent().isWait())){device.getScript().execute();device.setEvent(device.getScript().getEvent());if(!device.isDead()&&(!device.getScript().getCurrent().isDelay())&&(!device.getScript().getCurrent().isWait())){device.consume(device.getScript().getEvent());}}}if(mobility){if(device.getEvent2()==0){SimLog.add(""S""+device.getId()+"" DEPLACEMENT"");if(device.canMove()){device.moveToNext(visual,0);device.setEvent2(device.getNextTime());}}}}if(mobility){if(discreteEvent){min1=getMin();min2=getMin2();}else {min1=step;min2=step;}if(min1<=min2){min=min1;moving=false;}if(min2<min1){min=min2;moving=true;}}else {min=getMin();}Layer.getMapViewer().repaint();if((omin!=min)||(moving)){time+=omin+min;ps.print(time+"";"");for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){ps.print(device.getBatteryLevel()+"";"");}}ps.println();omin=min;SimLog.add(""<<<<<<<<<--------------------->>>>>>>>>"");sleep(visualDelay);for(Device device : devices){if(device.getType()==Device.SENSOR||device.getType()==Device.BASE_STATION){((SensorNode)device).setSendingNd(false);((SensorNode)device).setSending(false);((SensorNode)device).setReceiving(false);}if(device.getType()==Device.GAS&&mobility){((Gas)device).simNext();}}}WsnSimulationWindow.setProgress((int)(1000*iter/iterNumber));CupCarbon.lblSimulation.setText(""   Simulation: ""+((int)(100*iter/iterNumber))+""%"");}SimLog.close();ps.close();}catch(FileNotFoundException e){e.printStackTrace();}catch(InterruptedException e){e.printStackTrace();}long endTime=System.currentTimeMillis();System.out.println(""End of Simulation (WISEN : D-Event)."");System.out.println(((endTime-startTime)/1000.0)+"" sec"");WsnSimulationWindow.setState(""End (WISEN Simulation) at iter ""+iter+"". Simulation Time : ""+((endTime-startTime)/1000.0)+"" sec."");WsnSimulationWindow.setProgress(0);CupCarbon.lblSimulation.setText(""   Simulation: ""+((int)(100*iter/iterNumber))+""%"");if(mobility){for(Device device : devices){device.toOri();device.stopSimulation();}Layer.getMapViewer().repaint();}}"
2902	"private void updatePlayStatus(){if(mAdapter==null){return ;}if(mIService.getCurPos()>=0){mTvmuName.setText(mIService.getCurTitle());}mTvDur.setText(MediaUtil.formatTime(mIService.getDuration()));int dur=mIService.getDuration()<=0?300:mIService.getDuration();mSeekBar.setMax(dur);mTvDur.setText(MediaUtil.formatTime(dur));mVSongList.setSelection(mIService.getCurPos());mAdapter.notifyDataSetChanged();if(mIService.getCurPos()>=mVisibleLastidx){mVSongList.setSelection(mIService.getCurPos());mVSongList.requestFocus();}if(mIService.isPlaying()){mPlay.setBackgroundResource(R.drawable.mu_pausebtn_selector);animCtrl(AnimAct.ANIM_PLAY);}else {mPlay.setBackgroundResource(R.drawable.mu_playbtn_selector);animCtrl(AnimAct.ANIM_PAUSE);}}"
2903	"@Override public void draw(Canvas canvas){ final float scaleFactorX=getWidth()/(WIDTH*1.0); final float scaleFactorY=getHeight()/(HEIGHT*1.0);if(canvas!=null){ final int savedState=canvas.save();canvas.scale(scaleFactorX,scaleFactorY);bg.draw(canvas);if(!dissapear){player.draw(canvas);}if(started){explosion.draw(canvas);}drawText(canvas);canvas.restoreToCount(savedState);}}"
2904	"@Override @SideOnly(Side.CLIENT) public boolean overrideRender(ItemStack seed,ItemStack soil,float growth,TileEntity tile,BlockRendererDispatcher blockRenderer){ComparableItemStack comp=new ComparableItemStack(seed,false);IBlockState[] renderStates=seedRenderMap.get(comp);if(renderStates.length>0&&renderStates[0]!=null&&renderStates[0].getBlock() instanceof BlockStem){GlStateManager.rotate(-90,0,1,0);BlockStem stem=(BlockStem)renderStates[0].getBlock();IBlockState state=stem.getDefaultState().withProperty(BlockStem.AGE,(int)(growth>=0.5?7:2*growth*7));if(growth>=0.5){state=state.withProperty(BlockStem.FACING,EnumFacing.NORTH);}IBakedModel model=blockRenderer.getModelForState(state);GlStateManager.translate(0.25,0.0625,0);GlStateManager.pushMatrix();blockRenderer.getBlockModelRenderer().renderModelBrightness(model,state,1,true);GlStateManager.popMatrix();if(growth>=0.5){ItemStack[] fruit=seedOutputMap.get(new ComparableItemStack(seed,false));if(fruit!=null&&fruit.length>0&&fruit[0]!=null&&fruit[0].getItem()!=null){Block fruitBlock=Block.getBlockFromItem(fruit[0].getItem());if(fruitBlock!=null){state=fruitBlock.getDefaultState();model=blockRenderer.getModelForState(state);GlStateManager.pushMatrix();float scale=(growth-0.5)*0.5;GlStateManager.translate(-scale/2,0.5-scale,-0.5+scale/2);GlStateManager.scale(scale,scale,scale);blockRenderer.getBlockModelRenderer().renderModelBrightness(model,state,1,true);GlStateManager.popMatrix();}}}}return true;}"
2905	"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){super.onActivityResult(requestCode,resultCode,data);String selectedImagePath="""";if(resultCode!=Activity.RESULT_CANCELED){if(requestCode==IMAGE_REQUEST_CODE||requestCode==CAMERA_REQUEST_CODE){Intent intent=new Intent(""com.android.camera.action.CROP"");if(requestCode==IMAGE_REQUEST_CODE){String selectedPath=CommonUtil.getImagePath(this,data.getData());String selectedPath1=CommonUtil.getRealPathFromURI(this,data.getData());if(selectedPath==null){intent.setDataAndType(Uri.fromFile(new File(selectedPath1)),""image/*"");}else {intent.setDataAndType(Uri.fromFile(new File(selectedPath)),""image/*"");}}else {intent.setDataAndType(Uri.fromFile(new File(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER,Data.CROP_IMAGE_FILE_NAME)),""image/*"");;}intent.putExtra(""output"",Uri.fromFile(new File(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER,Data.IMAGE_FILE_NAME)));intent.putExtra(""crop"",""true"");intent.putExtra(""aspectX"",1);intent.putExtra(""aspectY"",1);intent.putExtra(""outputX"",200);intent.putExtra(""outputY"",200);intent.putExtra(""return-data"",true);intent.putExtra(""noFaceDetection"",true);startActivityForResult(intent,RESULT_REQUEST_CODE);}if(requestCode==RESULT_REQUEST_CODE){ImageView imHeadPhoto=(ImageView)findViewById(R.id.head_image);FileUploadTask uploadHead=(FileUploadTask)new FileUploadTask(mContext,(ProgressBar)null,imHeadPhoto,"""",1,0,null).execute(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER+""/""+Data.IMAGE_FILE_NAME,""face"");}}}"
2906	"@Override public boolean onTouch(View v,MotionEvent event){if(null!=mAdapter&&(mAdapter.getDataSize()>0)){return false;}return true;}"
2907	"@Override public Ride executeRideOperation(String centerId,String rideId,RideOperationEnum rideOperation){Ride retrievedRide=rideDAO.findByCenterIdAndId(centerId,rideId);if(null==retrievedRide){throw new RecordNotFoundException(RECORD_NOT_FOUND_EXCEPTION_KEY,new Object{exceptionArgumentBundle.getString(RIDE_EXCP_ARG_KEY),rideId});}VolunteerideUser loggedInUser=userService.getLoggedInUserDetails();UserRoleEnum userRideRole=this.validateUserAccessToRideAndRetrieveUserRideRole(loggedInUser,retrievedRide);if(userRideRole.name().equals(VOLUNTEER.name())&&retrievedRide.getStatus().name().equals(REQUESTED.name())){retrievedRide.setVolunteerId(loggedInUser.getId());}List<RideOperationEnum> validRideOperationsForLoggedInUser=userRideOperationsMap.get(new UserTypeRideStateKey(userRideRole,retrievedRide.getStatus()));if(!validRideOperationsForLoggedInUser.contains(rideOperation)){throw new ValidationException(INVALID_USER_RIDE_OPERATION_EXCEPTION_KEY,new Object{rideOperation,rideId,loggedInUser.getUsername(),userRideRole.name()});}RideStatusEnum rideCurrentState=retrievedRide.getStatus();RideStatusEnum rideTransitionedState=RideStateTransition.transitionedRideStateMap.get(new UserTypeRideStateOperationKey(userRideRole,rideCurrentState,rideOperation));if(rideTransitionedState==null){throw new BaseVolunteerideRuntimeException(INVALID_RIDE_STATE_TRANSITION_EXCEPTION_KEY,new Object{rideId,rideCurrentState.name(),rideOperation.name(),loggedInUser.getUsername(),userRideRole.name()});}retrievedRide.setStatus(rideTransitionedState);if(rideTransitionedState.name().equals(REQUESTED.name())){retrievedRide.setVolunteerId(null);}Ride updatedRide=rideDAO.save(retrievedRide);List<RideOperationEnum> nextRideOperations=userRideOperationsMap.get(new UserTypeRideStateKey(userRideRole,updatedRide.getStatus()));updatedRide.setNextRideUserOperations(nextRideOperations);return updatedRide;}"
2908	"public static void vectors(LRUCachedAPTStore<ArrayAPT> aptStore,Resolver<String> entityIndexer,RelationIndexer relationIndexer,Writer out,boolean resolve,boolean normalise) throws IOException{ final AtomicInteger numAptsProcessed=new AtomicInteger(0); final Daemon watcher=new Daemon(() -> {  System.out.println(numAptsProcessed.get() + "" apts processed"");},5000);watcher.start();for(Map.Entry<Integer,ArrayAPT> entry : aptStore){int entityId=entry.getKey();ArrayAPT apt=entry.getValue();out.write(entityIndexer.resolve(entityId));out.write(""\t"");class mutableFloat {  float f=0;} final mutableFloat sum=new mutableFloat();apt.walk((path,a) -> {  sum.f+=a.sum();});if(resolve){writeVector(apt,out,entityIndexer,relationIndexer,normalise,true,sum.f);}else {writeVector(apt,out,normalise,sum.f);}out.write(""\n"");numAptsProcessed.incrementAndGet();}watcher.stop();watcher.task.run();}"
2909	"public void doSwitchDirection(){if(this.horizontalMode=true){this.horizontalMode=false;}else {this.horizontalMode=true;}}"
2910	"public int getHeading(){if(predictable&&heading!=null){return Integer.parseInt(heading);}else {int degrees=Geometry.getDegreesFromSlope(distanceFromLastY,distanceFromLastX);return degrees;}}"
2911	"public boolean z(){boolean z;z=NFSR[0]^NFSR[63]&(true^LFSR[64]^LFSR[46]&(LFSR[3]^LFSR[25]^LFSR[64]))^(LFSR[25]^LFSR[3]&LFSR[46]&(LFSR[25]^LFSR[64])^LFSR[64]&(LFSR[3]^LFSR[46]));return z;}"
2912	"@Override public void onServiceConnected(ComponentName name,IBinder service){mService=(QRPushToTalkService.QRPushToTalkBinder)service;try{mService.registerObserver(mObserver);mService.clearChatNotifications();}catch(RemoteException e){e.printStackTrace();}mDrawerAdapter.notifyDataSetChanged();for(JumbleServiceFragment fragment : mServiceFragments){fragment.setServiceBound(true);}try{if(getSupportFragmentManager().findFragmentById(R.id.content_frame) instanceof JumbleServiceFragment&&!mService.isConnected()){loadDrawerFragment(DrawerAdapter.ITEM_FAVOURITES);}}catch(RemoteException e){e.printStackTrace();}}"
2913	"public boolean isCellEditable(int row,int col){if(col==0||col==1||col==13||col==14){return true;}return false;}"
2914	"public void registerDeathPenalty(Player player){if(player==null||!hasDeathPenalty){return ;}if(!ecoCreature.permission.has(player,""ecoCreature.DeathPenalty"")){return ;}Double amount=isPercentPenalty?ecoCreature.economy.getBalance(player.getName())*(penaltyAmount/100.0):penaltyAmount;ecoCreature.economy.withdrawPlayer(player.getName(),amount);plugin.getMessageManager().sendMessage(ecoMessageManager.deathPenaltyMessage,player,amount);}"
2915	"private void fillActionWithXHRData(URLAction action,LinkedHashMap<String,Object> rawRequest){Object o=rawRequest.get(XHR);if(o==null&&d_xhr!=null){if(d_xhr==true){action.setType(URLAction.TYPE_XHR);}else {action.setType(URLAction.TYPE_ACTION);}}else {if(o instanceof Boolean){Boolean xhr=(Boolean)o;if(xhr==true){action.setType(URLAction.TYPE_XHR);}else {action.setType(URLAction.TYPE_ACTION);}}else {XltLogger.runTimeLogger.warn(getDefaultingLog(XHR,action.getName(),""false""));}}}"
2916	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){View rootView=inflater.inflate(R.layout.fragment_recipe_step_detail,container,false);mPlayerView=rootView.findViewById(R.id.playerView);TextView tv_description=rootView.findViewById(R.id.tv_step_description);tv_description.setText(mStep.getDescription());if(mExoPlayer!=null){releasePlayer();}Uri media=GrabVideoUri(mStep);if(media!=null){initializePlayer(media);}return rootView;}"
2917	"public List<ChessMove> pieceMoves(int pos){List<ChessMove> moves=new LinkedList<>();int color=colorAtPosition(pos);if(color==0){return moves;}long opp=color==WHITE?getBlack():getWhite();long all=getAll();long moveMask=0L;long captureMask=0L;switch (typeAtPosition(pos)){case PAWN :moveMask=Chess.pawnMasks[pos][1-color]&~all;captureMask=Chess.pawnMasks[pos][2-color]&opp;break;case KNIGHT :moveMask=Chess.knightMasks[pos]&~all;captureMask=Chess.knightMasks[pos]&opp;break;case BISHOP :long bishopMask=Chess.bishopMask(all,pos);moveMask=bishopMask&~all;captureMask=bishopMask&opp;break;case ROOK :long rookMask=Chess.rookMask(all,pos);moveMask=rookMask&~all;captureMask=rookMask&opp;break;case QUEEN :long queenMask=Chess.queenMask(all,pos);moveMask=queenMask&~all;captureMask=queenMask&~all;break;case KING :moveMask=Chess.kingMasks[pos]&~all;captureMask=Chess.kingMasks[pos]&opp;break;}moves.addAll(toMoves(pos,moveMask,false));moves.addAll(toMoves(pos,captureMask,true));return moves;}"
2918	"private void buildEndpointList(BusinessEntity entity,OrganizationType org){EndpointListType epListType;if(null!=entity.getBusinessServices()&&CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())){epListType=new EndpointListType();for(BusinessService service : entity.getBusinessServices().getBusinessService()){buildServiceEndpoints(service,epListType);}org.setEndpointList(epListType);}}"
2919	"public void processAllElements(ArrayList<Element> e){if(e.isEmpty()){return ;}Lolo lLolo=(Lolo)e.get(0);lLolo.correctBuggyMovement(e,this);Element eTemp;for(int i=1;i<e.size();i++){eTemp=e.get(i);if(lLolo.overlap(eTemp)){if(eTemp.isTransposable()){e.remove(eTemp);if(eTemp.getScore()==10){lLolo.totalDots--;}lLolo.addScore(eTemp.getScore());}}}lLolo.move();}"
2920	"protected boolean isNotValue(Expression expr){return expr==null||!(expr instanceof Value)||((Value)expr).getValue()==null;}"
2921	"private int scan(Spacecraft sat){if(Config.debugSignalFinder){Log.println(sat.foxId+"" Entering SCAN state"");}if(pp1.iqSource!=null){try{Thread.sleep(SCAN_PERIOD);}catch(InterruptedException e){e.printStackTrace();}if(pp1.rfData!=null&&Config.fromBin<pp1.rfData.getBinOfStrongestSignal()&&Config.toBin>pp1.rfData.getBinOfStrongestSignal()){if(pp1.rfData!=null&&pp1.rfData.strongestSigRfSNR>Config.SCAN_SIGNAL_THRESHOLD){return ANALYZE;}}}return EXIT;}"
2922	"private void initializeTableModel(InteractiveTableModel tableModel){if(submissionParameter==null){for(int i=0;i<SparkSubmissionParameter.defaultParameters.length;++i){tableModel.addRow(SparkSubmissionParameter.defaultParameters[i].first(),"""");}}else {Map<String,Object> configs=submissionParameter.getJobConfig();for(int i=0;i<SparkSubmissionParameter.parameterList.length;++i){tableModel.addRow(SparkSubmissionParameter.parameterList[i],configs.containsKey(SparkSubmissionParameter.parameterList[i])?configs.get(SparkSubmissionParameter.parameterList[i]):"""");}}if(!tableModel.hasEmptyRow()){tableModel.addEmptyRow();}}"
2923	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_profile);String screenName=getIntent().getStringExtra(""screen_name"");String origin=getIntent().getStringExtra(""origin"");UserTimelineFragment userTimelineFragment=UserTimelineFragment.newInstance(screenName);FragmentTransaction ft=getSupportFragmentManager().beginTransaction();ft.replace(R.id.flContainer,userTimelineFragment);ft.commit();Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar);client=TwitterApp.getRestClient();if(origin==""menu""){Log.d(""origin"",""menu"");client.getProfileInfo(new JsonHttpResponseHandler(){  @Override public void onSuccess(  int statusCode,  Header[] headers,  JSONObject response){    User user=null;    try {      user=User.fromJSON(response);    } catch (    JSONException e) {      e.printStackTrace();    }    getSupportActionBar().setTitle(user.screenName);    populateUserHeadline(user);  }});}else {if(origin==""tweet""){Log.d(""origin"",""tweet"");client.getUserInfo(screenName,new JsonHttpResponseHandler(){  @Override public void onSuccess(  int statusCode,  Header[] headers,  JSONObject response){    User user=null;    try {      user=User.fromJSON(response);    } catch (    JSONException e) {      e.printStackTrace();    }    getSupportActionBar().setTitle(user.screenName);    populateUserHeadline(user);  }});}else {Log.e(""origin"",""NOT FOUND"");}}}"
2924	"@Override public boolean rewind(RewindMode mode) throws StateMachineException{boolean success=false;machineAlive();try{if(writeLock.tryLock(lockAcquisitionMillis,TimeUnit.MILLISECONDS)){try{State currentState;State previousState;switch (mode){case NONE :success=true;break;case ONE_STEP :currentState=readCurrentState();if(currentState==null||currentState.equals(notStartedState)){return success;}currentState=popState();previousState=popState();success=transitionTo(currentState,previousState,true);break;case ALL_THE_WAY_STEP_WISE :while((currentState=readCurrentState())!=null&&!currentState.equals(notStartedState)){currentState=popState();previousState=popState();try{success=transitionTo(currentState,previousState,true);}finally{if(!success){pushNextState(previousState);pushNextState(currentState);break;}}}break;case ALL_THE_WAY_HARD_RESET :currentState=readCurrentState();if(currentState.equals(notStartedState)){return success;}stateFlowStack.clear();pushNextState(notStartedState);success=true;break;default :throw new StateMachineException(Code.REWIND_FAILURE);}}finally{writeLock.unlock();}}else {throw new StateMachineException(Code.OPERATION_LOCK_ACQUISITION_FAILURE,""Timed out while trying to rewind state machine"");}}catch(InterruptedException exception){throw new StateMachineException(Code.OPERATION_LOCK_ACQUISITION_FAILURE,exception);}return success;}"
2925	"private static String validatePackagePart(String packagePart){char[] packagePartCh=packagePart.toCharArray();if(packagePart.length()==0){return ""Package segment cannot be empty"";}char invalidChar=Character.isJavaIdentifierStart(packagePartCh[0])?'\0':packagePartCh[0];for(int i=1;i<packagePartCh.length;i++){invalidChar=Character.isJavaIdentifierPart(packagePartCh[i])?'\0':packagePartCh[i];}if(invalidChar!='\0'){return MessageFormat.format(""Invalid package character: {0}"",invalidChar);}return null;}"
2926	"@Override public boolean remove(Object o){Node<K,V> node=null; final Iterator<Node<K,V>> iter=new NodePrefixIterator<K,V>(trie,prefixKey,includePrefixOfKey,keyInclusive,includePrefixedByKey);while(iter.hasNext()){node=iter.next();if(eq(node.value,o)){iter.remove();return true;}}return false;}"
2927	"public void updateVirtualArrayTags(){if(_taggedVirtualArrays==null){_taggedVirtualArrays=new StringSet();}s_logger.info(""entering updateVirtualArrayTags: assigned: {}, ""+"" connected: {} , tagged: {}"",new Object{_assignedVirtualArrays==null?""[]"":_assignedVirtualArrays.toArray(),_connectedVirtualArrays==null?""[]"":_connectedVirtualArrays.toArray(),_taggedVirtualArrays==null?""[]"":_taggedVirtualArrays.toArray()});if((_assignedVirtualArrays!=null)&&(_assignedVirtualArrays.size()!=0)){s_logger.debug(""updateVirtualArrayTags: replacing with assigned {}"",_assignedVirtualArrays.size());_taggedVirtualArrays.replace(_assignedVirtualArrays);s_logger.debug(""updateVirtualArrayTags is taking assigned varrays: added {} removed {}"",(_taggedVirtualArrays.getAddedSet()!=null)?_taggedVirtualArrays.getAddedSet().size():""0"",(_taggedVirtualArrays.getRemovedSet()!=null)?_taggedVirtualArrays.getRemovedSet().size():""0"");}else {if((_connectedVirtualArrays!=null)&&(_connectedVirtualArrays.size()!=0)){s_logger.debug(""updateVirtualArrayTags: replacing with connected {}"",_connectedVirtualArrays.size());_taggedVirtualArrays.replace(_connectedVirtualArrays);s_logger.debug(""updateVirtualArrayTags is taking connected varrays: added {} removed {}"",(_taggedVirtualArrays.getAddedSet()!=null)?_taggedVirtualArrays.getAddedSet().size():""0"",(_taggedVirtualArrays.getRemovedSet()!=null)?_taggedVirtualArrays.getRemovedSet().size():""0"");}else {_taggedVirtualArrays.clear();}}s_logger.info(""leaving updateVirtualArrayTags: tagged: {}"",_taggedVirtualArrays==null?""[]"":_taggedVirtualArrays.toArray());}"
2928	"public IdentityProvider getIdPByAuthenticatorPropertyValue(Connection dbConnection,String property,String value,int tenantId,String tenantDomain) throws IdentityApplicationManagementException{PreparedStatement prepStmt=null;ResultSet rs=null;IdentityProvider federatedIdp=null;boolean dbConnectionInitialized=true;try{if(dbConnection==null){dbConnection=IdentityDatabaseUtil.getDBConnection();}else {dbConnectionInitialized=false;}String sqlStmt=IdPManagementConstants.SQLQueries.GET_IDP_BY_AUTHENTICATOR_PROPERTY;prepStmt=dbConnection.prepareStatement(sqlStmt);prepStmt.setString(1,CharacterEncoder.getSafeText(property));prepStmt.setString(2,CharacterEncoder.getSafeText(value));prepStmt.setInt(3,tenantId);rs=prepStmt.executeQuery();int idpId=-1;String idPName="""";if(rs.next()){federatedIdp=new IdentityProvider();idpId=rs.getInt(""idp.ID"");idPName=rs.getString(""idp.NAME"");federatedIdp.setIdentityProviderName(idPName);if((""1"").equals(rs.getString(""idp.IS_PRIMARY""))){federatedIdp.setPrimary(true);}else {federatedIdp.setPrimary(false);}federatedIdp.setHomeRealmId(rs.getString(""idp.HOME_REALM_ID""));federatedIdp.setCertificate(getBlobValue(rs.getBinaryStream(""idp.CERTIFICATE"")));federatedIdp.setAlias(rs.getString(""idp.ALIAS""));JustInTimeProvisioningConfig jitProConfig=new JustInTimeProvisioningConfig();if(rs.getString(""idp.INBOUND_PROV_ENABLED"").equals(""1"")){jitProConfig.setProvisioningEnabled(true);}else {jitProConfig.setProvisioningEnabled(false);}jitProConfig.setProvisioningUserStore(rs.getString(""idp.INBOUND_PROV_USER_STORE_ID""));federatedIdp.setJustInTimeProvisioningConfig(jitProConfig);String userClaimUri=rs.getString(""idp.USER_CLAIM_URI"");String roleClaimUri=rs.getString(""idp.ROLE_CLAIM_URI"");String defaultAuthenticatorName=rs.getString(""idp.DEFAULT_AUTHENTICATOR_NAME"");String defaultProvisioningConnectorConfigName=rs.getString(""idp.DEFAULT_PRO_CONNECTOR_NAME"");federatedIdp.setIdentityProviderDescription(rs.getString(""idp.DESCRIPTION""));if(""1"".equals(rs.getString(""idp.IS_FEDERATION_HUB""))){federatedIdp.setFederationHub(true);}else {federatedIdp.setFederationHub(false);}if(federatedIdp.getClaimConfig()==null){federatedIdp.setClaimConfig(new ClaimConfig());}if(""1"".equals(rs.getString(""idp.IS_LOCAL_CLAIM_DIALECT""))){federatedIdp.getClaimConfig().setLocalClaimDialect(true);}else {federatedIdp.getClaimConfig().setLocalClaimDialect(false);}federatedIdp.setProvisioningRole(rs.getString(""idp.PROVISIONING_ROLE""));if(""1"".equals(rs.getString(""idp.IS_ENABLED""))){federatedIdp.setEnable(true);}else {federatedIdp.setEnable(false);}federatedIdp.setDisplayName(rs.getString(""idp.DISPLAY_NAME""));if(defaultAuthenticatorName!=null){FederatedAuthenticatorConfig defaultAuthenticator=new FederatedAuthenticatorConfig();defaultAuthenticator.setName(defaultAuthenticatorName);federatedIdp.setDefaultAuthenticatorConfig(defaultAuthenticator);}if(defaultProvisioningConnectorConfigName!=null){ProvisioningConnectorConfig defaultProConnector=new ProvisioningConnectorConfig();defaultProConnector.setName(defaultProvisioningConnectorConfigName);federatedIdp.setDefaultProvisioningConnectorConfig(defaultProConnector);}federatedIdp.setFederatedAuthenticatorConfigs(getFederatedAuthenticatorConfigs(dbConnection,idPName,federatedIdp,tenantId));if(federatedIdp.getClaimConfig().isLocalClaimDialect()){federatedIdp.setClaimConfig(getLocalIdPDefaultClaimValues(dbConnection,idPName,userClaimUri,roleClaimUri,idpId,tenantId));}else {federatedIdp.setClaimConfig(getIdPClaimConfiguration(dbConnection,idPName,userClaimUri,roleClaimUri,idpId,tenantId));}federatedIdp.setProvisioningConnectorConfigs(getProvisioningConnectorConfigs(dbConnection,idPName,idpId,tenantId));federatedIdp.setPermissionAndRoleConfig(getPermissionsAndRoleConfiguration(dbConnection,idPName,idpId,tenantId));}dbConnection.commit();return federatedIdp;}catch(SQLException|IdentityException e){IdentityApplicationManagementUtil.rollBack(dbConnection);String msg=""Error occurred while retrieving Identity Provider information for Authenticator Property : ""+property+"" and value : ""+value;throw new IdentityApplicationManagementException(msg,e);}finally{if(dbConnectionInitialized){IdentityApplicationManagementUtil.closeConnection(dbConnection);}}}"
2929	"public boolean wasCancelled(){return this==CANCELLED_FROM_DISCONNECT||this==Status.CANCELLED_FROM_BLE_TURNING_OFF;}"
2930	"@SubscribeEvent public static void onLivingUpdate(LivingUpdateEvent event){if(event.getEntity().motionY>0&&event.getEntity().dimension==ConfigurationHandler.INT_DIMENSION_CHAR){event.getEntity().motionY=event.getEntity().motionY*1.0375;}else {if(event.getEntity() instanceof EntityPlayer){EntityPlayer player=((EntityPlayer)event.getEntity());int i=MathHelper.floor(player.posX);int j=MathHelper.floor(player.posY);int k=MathHelper.floor(player.posZ);if(player.getHeldItem(EnumHand.MAIN_HAND)!=null){if(player.getHeldItem(EnumHand.MAIN_HAND).getItem()==WeaponHandler.MASTER_PSI_BLADE||player.getHeldItem(EnumHand.MAIN_HAND).getItem()==WeaponHandler.PSI_BLADE||player.getHeldItem(EnumHand.MAIN_HAND).getItem()==WeaponHandler.WARP_BLADE||player.getHeldItem(EnumHand.MAIN_HAND).getItem()==WeaponHandler.BANE_BLADE||player.getHeldItem(EnumHand.MAIN_HAND).getItem()==WeaponHandler.DARK_WARP_BLADE){BlockPos blockpos=new BlockPos(i,j+1,k);if(player.world.getBlockState(blockpos).getMaterial()==Material.AIR){player.world.setBlockState(blockpos,BlockHandler.LIGHT_SOURCE.getDefaultState());}}}if(CapabilityUtils.getShield(player)<GuiRenderEventHandler.getMaxShieldLevel()&&GuiRenderEventHandler.isWearingFullProtossArmor(player)){if(InventoryUtil.hasItemAndAmount(player,ItemHandler.ENERGY,1,0)&&CapabilityUtils.getShield(player)<=5){if(!player.world.isRemote){CapabilityUtils.addShield(player,5);InventoryUtil.removeItemWithAmount(player,ItemHandler.ENERGY,1,0);player.world.playSound(null,player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ(),SoundHandler.FX_WARPBLADE_ATTACK,SoundCategory.PLAYERS,1,1);}}}}}}"
2931	"@Override public boolean onQueryTextSubmit(String query){if(query.length()!=10){Toast.makeText(this,""Format dd/mm/yyyy"",Toast.LENGTH_SHORT).show();}else {Boolean flag=false;for(Review r : reviewList){if(r.dateOfReview==query){reviewsearchList.add(r);flag=true;}}if(!flag){searchView.setQuery(""No Matches!"",false);}}Toast.makeText(this,""submitted"",Toast.LENGTH_SHORT).show();return false;}"
2932	"@Override public boolean eIsSet(int featureID){switch (featureID){case ComponentPackage.ABSTRACTION__NAME :return NAME_EDEFAULT==null?getName()!=null:!NAME_EDEFAULT.equals(getName());case ComponentPackage.ABSTRACTION__ALIAS :return ALIAS_EDEFAULT==null?getAlias()!=null:!ALIAS_EDEFAULT.equals(getAlias());case ComponentPackage.ABSTRACTION__LEFTCLASSIFIER :return basicGetLeftclassifier()!=null;case ComponentPackage.ABSTRACTION__RIGHTCLASSIFIER :return basicGetRightclassifier()!=null;}return super.eIsSet(featureID);}"
2933	"@Override protected boolean word(int base,int u3,long[] a3,long[] b3,long mask){return (a3[u3]&=b3[u3]|~mask)==0L;}"
2934	"public void transactionComplete(TransactionId tid,boolean commit) throws IOException{for(PageId pid : pageTransactions.get(tid)){if(pages.get(pid).isDirty()!=null){if(commit){flushPage(pid);}else {DbFile dbFile=Database.getCatalog().getDbFile(pid.getTableId());Page onDiskPage=dbFile.readPage(pid);pages.put(pid,onDiskPage);}}}lockManager.releaseAllPages(tid);pageTransactions.get(tid).clear();}"
2935	"@Override protected void onCssLintException(CssLintException e,Resource resource){getProgressIndicator().addFoundErrors(e.getErrors().size());getLog().error(e.getErrors().size()+"" errors found while processing resource: ""+resource.getUri()+"" Errors are: ""+e.getErrors());addReport(ResourceLintReport.create(resource.getUri(),e.getErrors()));if(!isFailNever()){throw new WroRuntimeException(""Errors found when validating resource: ""+resource);}}"
2936	"public static void main(String[] args) throws InterruptedException,IOException{stac.add(new ArrayList(0));if(args.length==0){System.err.println(""Need a file pointer."");return ;}if(args.length>1){boolean cansplit=true;int offset=0;if(args[0].equals(""--code"")){offset+=1;}if(args.length>offset+1){String arrin=args[1+offset];for(int i=2+offset;i<args.length;i++){arrin+="" ""+args[i];}try{for(int i=1+offset;i<args.length;i++){Double.parseDouble(args[i]);}}catch(Exception e){cansplit=false;}String[] arrinput=(cansplit)?arrin.split("" ""):arrin.split("""");for(int i=0;i<arrinput.length;i++){if(cansplit){stac.get(currstac).add(Double.parseDouble(arrinput[i]));}else {input.add(arrinput[i]);}}}}if(!args[0].equals(""--code"")){try{extender.add(FileHandler.getFileInstruct(args,new boolean{false,true}).get(0)[0]);users.add(FileHandler.getFileInstruct(args,new boolean{true,false}).get(0));}catch(Exception e){}currclassname.add(args[0]);}instruct.add(FileHandler.getFileInstruct(args,new boolean{false,false}));while(OperativeHandler.operating()){if(!looping&&position>instruct.get(instruct.size()-1).get(currinstruct).length-1&&oldpos.size()==0){System.exit(0);}else {if(position<instruct.get(instruct.size()-1).get(currinstruct).length&&!instruct.get(instruct.size()-1).get(currinstruct)[position].equals("""")){opHandle();}}position=(direction)?(position+1):(position-1>=0)?position-1:instruct.get(instruct.size()-1).get(currinstruct).length-1;}}"
2937	"@Override public void onFailedToReceiveAd(Ad arg0,ErrorCode arg1){Log.d(""MoPub"",""Google AdMob interstitial failed. Trying another"");if(mInterstitial!=null){mInterstitial.interstitialFailed();}}"
2938	"public String symbolize(String expr){expr=expr.replaceAll(""<[a-zA-Z0-9\\?\\s]*>"","""");String[] arr=expr.split(""&&|\\|\\||\\!(?!=)"");for(String e : arr){e=e.trim();if(e.isEmpty()||e.equals(""("")||e.equals("")"")){continue;}else {e=stripUnbalancedParentheses(e);}if(e.contains(""+"")||e.contains(""-"")||e.contains(""*"")||e.contains(""/"")||e.contains("">"")||e.contains(""<"")||e.contains("">="")||e.contains(""<="")||e.contains(""=="")||e.contains(""!="")){String[] arr2=e.split(""\\+|-|\\*|\\/|>=|<=|>|<|==|\\!="");for(String sub : arr2){sub=sub.trim();sub=stripUnbalancedParentheses(sub);if(sub.matches(""^\\d+$"")){continue;}else {if(sub.matches(""^(\\(+)\\d+(\\(+)"")){String temp=stripUnnecessaryParentheses(sub);expr=expr.replaceAll(Pattern.quote(sub),temp);continue;}else {if(sub.matches(""^null$"")){expr=expr.replaceAll(""null"",""0"");continue;}}}if(int_symbol_map.containsKey(sub)){continue;}else {String temp=stripUnnecessaryParentheses(sub);if(int_symbol_map.containsKey(temp)){String sym=int_symbol_map.get(temp);int_symbol_map.put(sub,sym);}else {String sym=""i""+int_symbol_map.size();int_symbol_map.put(sub,sym);if(!temp.equals(sub)){int_symbol_map.put(temp,sym);}}}}}else {if(e.matches(""^true$"")||e.matches(""^false$"")){continue;}else {if(e.matches(""^(\\(+)true(\\)+)$"")||e.matches(""^(\\(+)false(\\)+)$"")){String temp=stripUnnecessaryParentheses(e);expr=expr.replaceAll(Pattern.quote(e),temp);continue;}}if(bool_symbol_map.containsKey(e)){continue;}else {String temp=stripUnnecessaryParentheses(e);if(bool_symbol_map.containsKey(temp)){String sym=bool_symbol_map.get(temp);bool_symbol_map.put(e,sym);}else {String sym=""b""+bool_symbol_map.size();bool_symbol_map.put(e,sym);if(!temp.equals(e)){bool_symbol_map.put(temp,sym);}}}}}if(bool_symbol_map.keySet().contains(""b"")){expr=expr.replaceAll(""(?<![a-zA-Z0-9_])b(?![a-zA-Z0-9_])"",bool_symbol_map.get(""b""));}if(int_symbol_map.keySet().contains(""i"")){expr=expr.replaceAll(""(?<![a-zA-Z0-9_])i(?![a-zA-Z0-9_])"",int_symbol_map.get(""i""));}Comparator<String> comparator=new Comparator<String>(){  public int compare(  String s1,  String s2){    int diff=s1.length() - s2.length();    if (diff > 0) {      diff=-1;    } else     if (diff < 0) {      diff=1;    }    return diff;  }};Set<String> ks=new HashSet<String>(bool_symbol_map.keySet());ks.addAll(int_symbol_map.keySet());ks.remove(""b"");ks.remove(""i"");String[] sorted=ks.toArray(new String[0]);Arrays.sort(sorted,comparator);for(String s : sorted){String sym;if(bool_symbol_map.containsKey(s)){sym=bool_symbol_map.get(s);}else {sym=int_symbol_map.get(s);}expr=expr.replaceAll(Pattern.quote(s),sym);}return expr;}"
2939	"@Override public Expr optimize(CompileContext cc){ final Value v=cc.qc.focus.value;return v!=null&&v.type==NodeType.DOC&&v.size()==1?cc.replaceWith(this,v):this;}"
2940	"@Override public boolean test(Object first,Object second){return null==first?null==second:(first instanceof Number&&second instanceof Number&&!first.getClass().equals(second.getClass())?((Number)first).doubleValue()==((Number)second).doubleValue():first.equals(second));}"
2941	"@Override public boolean isValid(T value){return (getValueClass().isInstance(value))&&value!=null;}"
2942	"public static void assertNotEquals(String first,String second) throws AssertionError{if(first==null&&second==null||(first!=null&&first.equals(second))||(second!=null&&second.equals(first))){throw new AssertionError(String.format(ERROR_OBJECTS_ARE_EQUALS,""strings""));}}"
2943	"public boolean equals(Object o){if(o==null){return false;}return (o instanceof None);}"
2944	"@Override public void onUpdateSuccess(Receipt oldReceipt,Receipt newReceipt,DatabaseOperationMetadata databaseOperationMetadata){if(isAdded()&&databaseOperationMetadata.getOperationFamilyType()!=OperationFamilyType.Sync){if(newReceipt.getFile()!=null&&newReceipt.getFileLastModifiedTime()!=oldReceipt.getFileLastModifiedTime()){ final int stringId;if(oldReceipt.getFile()!=null){if(newReceipt.hasImage()){stringId=R.string.toast_receipt_image_replaced;}else {stringId=R.string.toast_receipt_pdf_replaced;}}else {if(newReceipt.hasImage()){stringId=R.string.toast_receipt_image_added;}else {stringId=R.string.toast_receipt_pdf_added;}}Toast.makeText(getActivity(),getString(stringId,newReceipt.getName()),Toast.LENGTH_SHORT).show(); final IntentImportResult intentImportResult=intentImportProcessor.getLastResult();if(intentImportResult!=null){intentImportProcessor.markIntentAsSuccessfullyProcessed(getActivity().getIntent());getActivity().finish();}}receiptTableController.get(trip);}}"
2945	"public static Long getProjectIdByName(String projectName,RestClient restClient){Long projectId=0L;HttpResponse response=null;try{response=restClient.getHttpclient().execute(new HttpGet(restClient.getUrl()+""/flex/services/rest/latest/project?name=""+URLEncoder.encode(projectName,""utf-8"")),restClient.getContext());}catch(ClientProtocolException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}int statusCode=response.getStatusLine().getStatusCode();if(statusCode>=200&&statusCode<300){HttpEntity entity=response.getEntity();String string=null;try{string=EntityUtils.toString(entity);}catch(ParseException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}try{JSONArray projArray=new JSONArray(string);List<Long> projectIdList=new ArrayList<Long>();for(int i=0;i<projArray.length();i++){Long id=projArray.getJSONObject(i).getLong(""id"");projectIdList.add(id);}Collections.sort(projectIdList);projectId=projectIdList.get(0);}catch(JSONException e){e.printStackTrace();}}else {try{throw new ClientProtocolException(""Unexpected response status: ""+statusCode);}catch(ClientProtocolException e){e.printStackTrace();}}return projectId;}"
2946	"@Override public boolean equal(LayerRef ref){return id==((Key)ref).id;}"
2947	"@Override public boolean shouldDecorate(CalendarDay day){return calendarView.getCurrentDate().getMonth()!=day.getMonth();}"
2948	"public boolean getUseDatabase(){return appUseDatabase;}"
2949	"public static void main(String[] args){try{Speler speler=createSpeler();JOptionPane.showMessageDialog(null,speler.getNaam()+"" heeft als score: ""+speler.getScore(),speler.getNaam(),JOptionPane.INFORMATION_MESSAGE);Tekening tekening=createTekening();String input=""1"";while(input!=""0""){input=showJOptionInputDialog(""Wat wil je doen: \n\n 1.Vorm maken \n 2.Tekening tonen \n\n 0.Stoppen"",""menu"");if(input.equals(""1"")){String[] shapes={""Cirkel"",""Rechthoek"",""LijnStuk"",""Driehoek""};String keuze=showJOptionDropdownDialog(""Wat wilt u tekenen"",""input"",shapes,shapes[0]);if(keuze.equals(""Cirkel"")){Punt punt=createPunt(""middelpunt"");JOptionPane.showMessageDialog(null,""U heeft een correct punt aangemaakt: ""+punt.toString(),speler.getNaam(),JOptionPane.INFORMATION_MESSAGE);Cirkel cirkel=createCirkel(punt);tekening.voegToe(cirkel);JOptionPane.showMessageDialog(null,""U heeft een correcte cirkel aangemaakt: ""+cirkel.toString(),speler.getNaam(),JOptionPane.INFORMATION_MESSAGE);}else {if(keuze.equals(""Rechthoek"")){Punt punt=createPunt(""linkerbovenhoekpunt"");JOptionPane.showMessageDialog(null,""U heeft een correct punt aangemaakt: ""+punt.toString(),speler.getNaam(),JOptionPane.INFORMATION_MESSAGE);Rechthoek rechthoek=createRechthoek(punt);tekening.voegToe(rechthoek);JOptionPane.showMessageDialog(null,""U heeft een correcte rechthoek aangemaakt: ""+rechthoek.toString(),speler.getNaam(),JOptionPane.INFORMATION_MESSAGE);}else {if(keuze.equals(""LijnStuk"")){LijnStuk lijnstuk=createLijnstuk();tekening.voegToe(lijnstuk);JOptionPane.showMessageDialog(null,""U heeft een correct Lijnstuk aangemaakt: ""+lijnstuk.toString());}else {if(keuze.equals(""Driehoek"")){Driehoek driehoek=createDriehoek();tekening.voegToe(driehoek);JOptionPane.showMessageDialog(null,""U heeft een correcte Driehoek aangemaakt: ""+driehoek.toString());}}}}}else {if(input.equals(""2"")){GameHoofdScherm view=new GameHoofdScherm(speler.getNaam(),tekening);view.setVisible(true);view.teken();JOptionPane.showMessageDialog(null,tekening.toString());}}}}catch(CancelledException e){return ;}}"
2950	"@Override public Value resolve(Scope scope) throws ResolutionException{Type type=scope.getTypeOrDie();while(!(type instanceof ClassType)){type=type.getSibling();}Module module=scope.getModule();ModuleResolver resolver=module.getModuleResolver();assert (resolver!=null);ClassType classType=(ClassType)type;try{AbstractSyntaxParser parser=new AbstractSyntaxParser(module,classType);Map<String,Ref<?>> result=parser.parse(abstractSyntax);return new ObjectValue(result);}catch(Exception e){throw new ResolutionException(""Unable to unwrap abstract syntax: ""+abstractSyntax,e);}}"
2951	"@Override public int onStartCommand(Intent intent,int flags,int startId){intentReceived=intent;if(treatment==null&&intent.getIntExtra(""typeTreatment"",0)==TreatmentGyroscop.TREATMENT_GYROSCOP){treatment=new TreatmentGyroscop();typeTreatment=TreatmentGyroscop.TREATMENT_GYROSCOP;initSensor();}if(!thread.isAlive()){thread.start();}return super.onStartCommand(intent,flags,startId);}"
2952	"public void run(){int i,j,k;Point p;Triangle tri;int[] vtcs;double[] weights;double tot;MeshTopology.Interpolator ip;if(order==0){double d1,d2,d3;weights=new double{1.0};for(k=startID;k<subset.length;k+=workers){i=subset[k];p=(tr?Point._from(to[0][i],to[1][i]):Point._from(to[i]));j=from.hash.triangleContainerID(p);vtcs=from.hash.triangles[j];d1=Num.euclideanDistance2(from.hash.coordinates[vtcs[0]],p.coords);d2=Num.euclideanDistance2(from.hash.coordinates[vtcs[1]],p.coords);d3=Num.euclideanDistance2(from.hash.coordinates[vtcs[2]],p.coords);vtcs=new int{(d1<=d2?(d1<=d3?vtcs[0]:vtcs[2]):(d2<=d3?vtcs[1]:vtcs[2]))};interp[i]=new Interpolator(vtcs,weights,p.coords,false);}}else {boolean nr=false;for(k=startID;k<subset.length;k+=workers){i=subset[k];p=(tr?Point._from(to[0][i],to[1][i]):Point._from(to[i]));j=from.hash.triangleContainerID(p);if(j==-1){if(near){p=from.hash.nearest(p,true);j=from.hash.triangleContainerID(p);nr=true;}if(j==-1){interp[i]=null;continue;}}vtcs=from.hash.triangles[j];tri=Triangle._from(from.hash.coordinates[vtcs[0]],from.hash.coordinates[vtcs[1]],from.hash.coordinates[vtcs[2]]);tot=tri.area();if(Num.zeroish(tot)){interp[i]=new Interpolator(vtcs,new double{1.0/3.0,1.0/3.0,1.0/3.0},p.coords,nr);}else {weights=new double[3];weights[0]=Triangle._from(p,tri.B,tri.C).area()/tot;weights[1]=Triangle._from(p,tri.C,tri.A).area()/tot;weights[2]=Triangle._from(p,tri.A,tri.B).area()/tot;interp[i]=new Interpolator(vtcs,weights,p.coords,nr);}}if(order!=1){tot=0;for(i=startID;i<n;i+=workers){weights=interp[i].weights;for(j=0;j<weights.length;j++){weights[i]=Math.pow(weights[i],order);tot+=weights[i];}for(j=0;j<weights.length;j++){weights[i]/=tot;}}}}}"
2953	"@Override public void success(){FunhdwSetAccInfo(refreshAccount);if(!PublicPun.accountRefresh[0]){PublicPun.accountRefresh[0]=true;}}"
2954	"public void applySkin(){mSrcResId=checkResourceId(mSrcResId);SkinLog.d(TAG,""mSrcResId = ""+mSrcResId);if(mSrcResId==INVALID_ID){return ;}String typeName=mView.getResources().getResourceTypeName(mSrcResId);if(""color"".equals(typeName)){if(Build.VERSION.SDK_INT<Build.VERSION_CODES.LOLLIPOP){int color=SkinCompatResources.getInstance().getColor(mSrcResId);Drawable drawable=mView.getDrawable();if(drawable instanceof ColorDrawable){((ColorDrawable)drawable.mutate()).setColor(color);}else {mView.setImageDrawable(new ColorDrawable(color));}}else {ColorStateList colorStateList=SkinCompatResources.getInstance().getColorStateList(mSrcResId);Drawable drawable=mView.getDrawable();DrawableCompat.setTintList(drawable,colorStateList);mView.setImageDrawable(drawable);}}else {if(""drawable"".equals(typeName)){Drawable drawable=SkinCompatResources.getInstance().getDrawable(mSrcResId);mView.setImageDrawable(drawable);}else {if(""mipmap"".equals(typeName)){Drawable drawable=SkinCompatResources.getInstance().getMipmap(mSrcResId);mView.setImageDrawable(drawable);}}}}"
2955	"public void onItemSelected(Object source){if(source instanceof JComboBox){JComboBox<ContainerItem<Object>> comboBox=(JComboBox)source;if(comboBox.getSelectedItem()!=null){ContainerItem<Object> selectedItem=(ContainerItem<Object>)comboBox.getSelectedItem();JDBCTableField jdbcTableField=(JDBCTableField)comboBox.getClientProperty(DATA_FIELD_PROPERTY);Map<URI,Object> dataMap=(Map<URI,Object>)comboBox.getClientProperty(DATA_MAP_PROPERTY);URI uri=(URI)comboBox.getClientProperty(URI_PROPERTY);boolean isOptional=(boolean)comboBox.getClientProperty(IS_OPTIONAL_PROPERTY);dataMap.remove(uri);if(isOptional&&selectedItem.getLabel().isEmpty()){dataMap.put(uri,null);}else {dataMap.put(uri,selectedItem.getLabel());}if(jdbcTableField.getJDBCTableFieldValueList()!=null){for(JDBCTableFieldValue jdbcTableFieldValue : jdbcTableField.getJDBCTableFieldValueList()){jdbcTableFieldValue.setJDBCTableFieldModified(true);}}}}else {if(source instanceof JList){JList<ContainerItem<Object>> list=(JList<ContainerItem<Object>>)source;ListModel<ContainerItem<Object>> model=list.getModel();if(model.getSize()>0){String fieldList="""";for(int i=0;i<list.getSelectedIndices().length;i++){if(fieldList.isEmpty()){fieldList=model.getElementAt(i).getLabel();}else {fieldList+=""\t""+model.getElementAt(i).getLabel();}}JDBCTableField jdbcTableField=(JDBCTableField)list.getClientProperty(DATA_FIELD_PROPERTY);Map<URI,Object> dataMap=(Map<URI,Object>)list.getClientProperty(DATA_MAP_PROPERTY);URI uri=(URI)list.getClientProperty(URI_PROPERTY);boolean isOptional=(boolean)list.getClientProperty(IS_OPTIONAL_PROPERTY);dataMap.remove(uri);if(isOptional&&fieldList.isEmpty()){dataMap.put(uri,null);}else {dataMap.put(uri,fieldList);}}}}}"
2956	"ErrorsResource validate(EditionResource resource){List<String> validationErrors=new ArrayList<>();if(resource.getIsbn()==null||resource.getIsbn().isEmpty()){validationErrors.add(""Isbn not specified"");}else {if(resource.getPublicationYear()==null){validationErrors.add(""Publication year not specified"");}else {if(resource.getQuantity()==null){validationErrors.add(""Quantity not specified"");}else {if(resource.getQuantity()<0){validationErrors.add(""Wrong quantity"");}}}}return new ErrorsResource(validationErrors);}"
2957	"private boolean localPathToGoal(Square current,HashSet<Square> seen,int goalRow){int row=current.getRow();int col=current.getCol();boolean found=(row==goalRow);if(!found){seen.add(current);Square left=possibleSquare(col-1,row);Square right=possibleSquare(col+1,row);Square up=possibleSquare(col,row+1);Square down=possibleSquare(col,row-1);if(left!=null&&!seen.contains(left)&&!wallBetween(current,left)){found=localPathToGoal(left,seen,goalRow);}if(!found&&right!=null&&!seen.contains(right)&&!wallBetween(current,right)){found=localPathToGoal(right,seen,goalRow);}if(!found&&up!=null&&!seen.contains(up)&&!wallBetween(current,up)){found=localPathToGoal(up,seen,goalRow);}if(!found&&down!=null&&!seen.contains(down)&&!wallBetween(current,down)){found=localPathToGoal(down,seen,goalRow);}}return found;}"
2958	"public boolean isClosed(){return channel==null?true:channel.isClosed();}"
2959	"private Collision getCollisionType(Vector boxCorner,Vector check){Vector lowerBoxCorner=new Vector(boxCorner.x,boxCorner.y+1);boolean aboveLeftDiag=check.y<1*(check.x-boxCorner.x)+boxCorner.y;boolean aboveRightDiag=check.y<-1*(check.x-lowerBoxCorner.x)+lowerBoxCorner.y;if(aboveLeftDiag&&aboveRightDiag){return Collision.Y;}else {if(!aboveLeftDiag&&!aboveRightDiag){return Collision.Y;}else {return Collision.X;}}}"
2960	"@Override public void execute(CommandSender sender,String[] args){Player player=null;if(sender instanceof Player){player=(Player)sender;}else {ErrorManager.sendError(sender,CSError.IN_GAME_ONLY,null);return ;}PlayerCache cache=plugin.getCache(player.getName());City city=plugin.getCity(cache.getCity());if(city==null){ErrorManager.sendError(sender,CSError.NOT_IN_CITY,null);return ;}RankPermissions rp=city.getRank(cache.getRank());if(!rp.isUnban()){ErrorManager.sendError(sender,CSError.NO_RANK_PERMISSION,null);return ;}if(args==null){ErrorManager.sendError(sender,CSError.NO_RANK_PERMISSION,null);return ;}for(String s : args){if(city.isBanned(s)){city.unban(s);plugin.getDB().unban(city.getName(),s);player.sendMessage(Constants.CITYSCAPE+Constants.SUCCESS_COLOR+""You have unbanned ""+s+""."");plugin.addLogEntry(""CITY"",player.getName()+"" has unbanned ""+s+"" from ""+city.getName());}else {player.sendMessage(Constants.CITYSCAPE+Constants.ERROR_COLOR+s+"" was not banned."");}}}"
2961	"@Override public double getFare(){float incrementPercentInFare=pricingXMLReader.getPricingRulesForFirstClass();double totalFare=0;if(pricingModel.departureDate.isPresent()&&pricingModel.baseFare.isPresent()&&pricingModel.noOfRequestedSeats.isPresent()){LocalDate openingDateOfBookingFlight=pricingModel.departureDate.get().minusDays(10);long daysBetweenDateOfTravelAndOpeningDateOfBookingFlight=ChronoUnit.DAYS.between(openingDateOfBookingFlight,LocalDate.now());totalFare=Math.round(pricingModel.baseFare.get()*Math.pow(incrementPercentInFare/100+1,daysBetweenDateOfTravelAndOpeningDateOfBookingFlight))*pricingModel.noOfRequestedSeats.get();}return totalFare;}"
2962	"public void setHasAlteredConfig(SystemEnvironment env,Boolean p_hasAlteredConfig) throws SDMSException{if(p_hasAlteredConfig!=null&&p_hasAlteredConfig.equals(hasAlteredConfig)){return ;}if(p_hasAlteredConfig==null&&hasAlteredConfig==null){return ;}SDMSScopeGeneric o=this;if(versions.id.longValue()<SystemEnvironment.SYSTEM_OBJECTS_BOUNDARY){throw new CommonErrorException(new SDMSMessage(env,""02112141636"",""(Scope) Change of system object not allowed""));}if(o.versions.o_v==null||o.subTxId!=env.tx.subTxId){o=(SDMSScopeGeneric)change(env);}o.hasAlteredConfig=p_hasAlteredConfig;o.changerUId=env.cEnv.uid();o.changeTs=env.txTime();if(o!=this){o.versions.table.index(env,o,0);}return ;}"
2963	"public void draw(){if(System.currentTimeMillis()-startTime<3000){drawImage(splashImage,0,0);worldStartTime=System.currentTimeMillis();}else {worldLive=true;long currTime=System.currentTimeMillis();if(currTime>=nextTime){nextTime=currTime+100;world.updateOnTime(currTime-worldStartTime+12000);}drawBG();drawWorldObjects();mouse();UIManager.updateMousePosition(mouseX,mouseY);if(this.showMenu){drawMenu();}}}"
2964	"private void dragRotateTravelSpace(WidgetMouseEvent e,ViewerCanvas view){Point dragPoint=e.getPoint();Vec3 axis,location;CoordinateSystem c=oldCoords.duplicate();location=c.getOrigin();int dx,dy;dx=dragPoint.x-clickPoint.x;dy=dragPoint.y-clickPoint.y;if(controlDown&&!e.isShiftDown()){view.tilting=true;tilt(e,view,clickPoint);return ;}else {if(controlDown&&e.isShiftDown()){rotateSpace(e,view,clickPoint);return ;}else {if(e.isShiftDown()&&!controlDown){if(Math.abs(dx)>Math.abs(dy)){axis=viewToWorld.timesDirection(Vec3.vy());angle=dx*DRAG_SCALE/view.getCamera().getDistToScreen();}else {axis=viewToWorld.timesDirection(Vec3.vx());angle=-dy*DRAG_SCALE/view.getCamera().getDistToScreen();}}else {axis=new Vec3(-dy*DRAG_SCALE,dx*DRAG_SCALE,0.0);angle=axis.length()/view.getCamera().getDistToScreen();axis.normalize();axis=viewToWorld.timesDirection(axis);}}}if(angle!=0){c.transformCoordinates(Mat4.translation(-location.x,-location.y,-location.z));c.transformCoordinates(Mat4.axisRotation(axis,angle));c.transformCoordinates(Mat4.translation(location.x,location.y,location.z));view.getCamera().setCameraCoordinates(c);Vec3 cc=c.getOrigin();view.setRotationCenter(cc.plus(c.getZDirection().times(view.getDistToPlane())));}}"
2965	"public Vector2 find(Enemy enemy){if(enemy.node==-1){findNode(enemy);}if(enemy.path==null){return vector.set(enemy.x,enemy.y);}Tile[] path=enemy.path;Tile prev=path[enemy.node-1];Tile target=path[enemy.node];float projectLen=Vector2.dst(prev.worldx(),prev.worldy(),target.worldx(),target.worldy())/6.0;Vector2 projection=projectPoint(prev.worldx(),prev.worldy(),target.worldx(),target.worldy(),enemy.x,enemy.y);boolean canProject=true;if(projectLen<8||!onLine(projection,prev.worldx(),prev.worldy(),target.worldx(),target.worldy())){canProject=false;}else {projection.add(Angles.translation(Angles.angle(prev.worldx(),prev.worldy(),target.worldx(),target.worldy()),projectLen));}float dst=Vector2.dst(enemy.x,enemy.y,target.worldx(),target.worldy());if(dst<8){if(enemy.node<=path.length-2){enemy.node++;}target=path[enemy.node];}if(canProject&&projection.dst(enemy.x,enemy.y)<Vector2.dst(target.x,target.y,enemy.x,enemy.y)){vector.set(projection);}else {vector.set(target.worldx(),target.worldy());}if(enemy.node==path.length-1){vector.set(target.worldx(),target.worldy());}return vector;}"
2966	"@Override public void handleMessage(Message msg){if(msg.what==FLAG_AUTO_FOCUS){if(mCamera!=null){mCamera.autoFocus(null);handler.sendEmptyMessageDelayed(FLAG_AUTO_FOCUS,FOCUS_DURATION);}}}"
2967	"private void restoreOmittedBidirectionalFields(PlannerBenchmarkResult plannerBenchmarkResult){for(ProblemBenchmarkResult problemBenchmarkResult : plannerBenchmarkResult.getUnifiedProblemBenchmarkResultList()){problemBenchmarkResult.setPlannerBenchmarkResult(plannerBenchmarkResult);if(problemBenchmarkResult.getProblemStatisticList()==null){problemBenchmarkResult.setProblemStatisticList(new ArrayList<ProblemStatistic>(0));}for(ProblemStatistic problemStatistic : problemBenchmarkResult.getProblemStatisticList()){problemStatistic.setProblemBenchmarkResult(problemBenchmarkResult);}for(SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()){singleBenchmarkResult.setProblemBenchmarkResult(problemBenchmarkResult);}}for(SolverBenchmarkResult solverBenchmarkResult : plannerBenchmarkResult.getSolverBenchmarkResultList()){solverBenchmarkResult.setPlannerBenchmarkResult(plannerBenchmarkResult);for(SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()){singleBenchmarkResult.setSolverBenchmarkResult(solverBenchmarkResult);if(singleBenchmarkResult.getPureSingleStatisticList()==null){singleBenchmarkResult.setPureSingleStatisticList(new ArrayList<PureSingleStatistic>(0));}for(PureSingleStatistic pureSingleStatistic : singleBenchmarkResult.getPureSingleStatisticList()){pureSingleStatistic.setSingleBenchmarkResult(singleBenchmarkResult);}}}}"
2968	"private void constructCVFromForm(){PersonalInfo personalInfo=new PersonalInfo();if(!txtName.getText().isEmpty()){personalInfo.setName(txtName.getText());}if(!txtContact.getText().isEmpty()){personalInfo.setContactNumber(txtContact.getText());}if(!txtEmail.getText().isEmpty()){personalInfo.setEmail(txtEmail.getText());}if(!txtAddress.getText().isEmpty()){personalInfo.setAddress(txtAddress.getText());}cv.setPersonalInfo(personalInfo);List<EducationInfo> educationInfoList=new ArrayList<EducationInfo>();for(int i=0;i<txtEducationList.size();i++){HashMap<String,TextField> hmap=txtEducationList.get(i);TextField txtInstitutionName=hmap.get(""institution_name"");TextField txtMajor=hmap.get(""major"");TextField txtStartDate=hmap.get(""start_date"");TextField txtEndDate=hmap.get(""end_date"");TextField txtGrade=hmap.get(""grade"");ComboBox comboBoxEducationLevel=comboBoxEducationLevelList.get(i);if(txtInstitutionName.getText().isEmpty()&&txtMajor.getText().isEmpty()&&txtStartDate.getText().isEmpty()&&txtEndDate.getText().isEmpty()&&txtGrade.getText().isEmpty()&&comboBoxEducationLevel.getValue()==null){break;}EducationInfo educationInfo=new EducationInfo();if(!txtInstitutionName.getText().isEmpty()){educationInfo.setInstitutionName(txtInstitutionName.getText());}if(!txtMajor.getText().isEmpty()){educationInfo.setMajor(txtMajor.getText());}if(!txtStartDate.getText().isEmpty()){educationInfo.setStartDate(DateUtilities.dateFromString(""01 ""+txtStartDate.getText().toString(),inFormatter));}if(!txtEndDate.getText().isEmpty()){educationInfo.setEndDate(DateUtilities.dateFromString(""01 ""+txtEndDate.getText().toString(),inFormatter));}if(!txtGrade.getText().isEmpty()){String[] gradeString=txtGrade.getText().split(""/"");Grade grade=new Grade();grade.setGrade(Float.parseFloat(gradeString[0]));grade.setMaxGrade(Float.parseFloat(gradeString[1]));educationInfo.setGrade(grade);}if(!comboBoxEducationLevel.getValue().toString().isEmpty()){educationInfo.setEducationLevel(EducationInfo.EducationLevel.valueOf(comboBoxEducationLevel.getValue().toString().toUpperCase()));}educationInfoList.add(educationInfo);}cv.setEducationInfoList(educationInfoList);List<WorkExperience> workExperienceList=new ArrayList<WorkExperience>();for(int i=0;i<txtWorkList.size();i++){HashMap<String,TextField> hmap=txtWorkList.get(i);TextField txtCompany=hmap.get(""company"");TextField txtPosition=hmap.get(""position"");TextField txtStartDate=hmap.get(""start_date"");TextField txtEndDate=hmap.get(""end_date"");TextArea txtDescription=textAreaWorkList.get(i);if(txtCompany.getText().isEmpty()&&txtPosition.getText().isEmpty()&&txtStartDate.getText().isEmpty()&&txtEndDate.getText().isEmpty()&&txtDescription.getText().isEmpty()){break;}WorkExperience workExperience=new WorkExperience();if(!txtCompany.getText().isEmpty()){workExperience.setCompany(txtCompany.getText());}if(!txtPosition.getText().isEmpty()){workExperience.setPosition(txtPosition.getText());}if(!txtStartDate.getText().isEmpty()){workExperience.setStartDate(DateUtilities.dateFromString(""01 ""+txtStartDate.getText(),inFormatter));}if(!txtEndDate.getText().isEmpty()){workExperience.setEndDate(DateUtilities.dateFromString(""01 ""+txtEndDate.getText(),inFormatter));}if(!txtDescription.getText().isEmpty()){workExperience.setDescription(txtDescription.getText());}workExperienceList.add(workExperience);}cv.setWorkExperienceList(workExperienceList);List<Skill> skillList=new ArrayList<Skill>();for(int i=0;i<txtSkillList.size();i++){TextField txtSkillName=txtSkillList.get(i).getTextField();ComboBox comboBoxSkillLevel=txtSkillList.get(i).getComboBox();if(txtSkillName.getText().isEmpty()&&comboBoxSkillLevel.getValue()==null){break;}Skill skill=new Skill();if(!txtSkillName.getText().isEmpty()){skill.setName(txtSkillName.getText());}if(!comboBoxSkillLevel.getValue().toString().isEmpty()){skill.setProficiencyLevel(Skill.SkillProficiency.valueOf(comboBoxSkillLevel.getValue().toString().toUpperCase()));}skillList.add(skill);}cv.setSkills(skillList);List<Language> languageList=new ArrayList<Language>();for(int i=0;i<txtLanguageList.size();i++){TextField txtLanguageName=txtLanguageList.get(i).getTextField();ComboBox comboBoxLanguageLevel=txtLanguageList.get(i).getComboBox();if(txtLanguageName.getText().isEmpty()&&comboBoxLanguageLevel.getValue()==null){break;}Language language=new Language();if(!txtLanguageName.getText().isEmpty()){language.setName(txtLanguageName.getText());}if(!comboBoxLanguageLevel.getValue().toString().isEmpty()){language.setProficiencyLevel(Language.LanguageProficiency.valueOf(comboBoxLanguageLevel.getValue().toString().toUpperCase()));}languageList.add(language);}cv.setLanguages(languageList);}"
2969	"@Override public void run(){synchronized(drawingLock){if(!drawingSurfaceDirtyFlag&&mSurfaceCanBeUsed){try{drawingLock.wait();}catch(InterruptedException e){Log.e(TAG,e.getMessage());}}else {drawingSurfaceDirtyFlag=false;}if(!mSurfaceCanBeUsed){return ;}}Canvas canvas=null;synchronized(holder){try{canvas=holder.lockCanvas();if(canvas!=null){doDraw(canvas);}}finally{if(canvas!=null){holder.unlockCanvasAndPost(canvas);}}}}"
2970	"@BodyParser.Of(BodyParser.Json.class) public Result webhook(){JsonNode root=request().body().asJson();JsonNode events=root.get(""events"");for(JsonNode event : events){String replyToken=event.get(""replyToken"").asText();String theaterName=event.get(""message"").get(""text"").asText();Message responseMessage;List<Theater> theaters=theaterRepository.findTheatersByName(theaterName);if(theaters.isEmpty()){responseMessage=new TextMessage(""Sorry, I don't know where that theater is."");}else {if(theaters.size()>1){StringBuilder stringBuilder=new StringBuilder();stringBuilder.append(""Multiple theaters found. Choose one.\n"");for(int i=0;i<theaters.size();i++){if(i>0){System.out.println("""");}stringBuilder.append(theaters.get(i).getName()+""\n"");}responseMessage=new TextMessage(stringBuilder.toString());}else {List<TheaterMovie> moviesInTheater=this.theaterMovieRepository.findMoviesScheduleInTheaterById(theaters.get(0).getId());StringBuilder stringBuilder=new StringBuilder();stringBuilder.append(""Here are movie schedule in ""+theaterName+""\n"");for(int i=0;i<moviesInTheater.size();i++){if(i>0){stringBuilder.append(""\n\n"");}stringBuilder.append(moviesInTheater.get(i).getMovie().getTitle()+""\n"");stringBuilder.append(""Plays at: ""+StringUtils.join(moviesInTheater.get(i).getShowTimes(),"", ""));}responseMessage=new TextMessage(stringBuilder.toString());}}try{LineMessagingClient client=new LineMessagingClientImpl(LineMessagingServiceBuilder.create(this.lineChannelToken).build());BotApiResponse response=client.replyMessage(new ReplyMessage(replyToken,responseMessage)).get();return ok(response.getMessage());}catch(Exception e){e.printStackTrace();}}return ok(""nothing"");}"
2971	"public static FooterBar getCurrent(){if(bar!=null){return bar;}else {return new FooterBar();}}"
2972	"default boolean isSameStateAs(ReadOnlyTask other){if(other==this){return true;}boolean isDescriptionEqual=(other!=null&&other.getDescription().equals(this.getDescription()));boolean isDurationEqual=other!=null&&(other.getDuration()==null&&this.getDuration()==null)||(other.getDuration()!=null&&other.getDuration().equals(this.getDuration()));return isDescriptionEqual&&isDurationEqual;}"
2973	"private static ObservableValue<?> evaluateFunction(ExpressionTypes.MethodInvocation method,QuickParseEnv parseEnv,TypeToken<?> type,boolean actionAccepted) throws QuickParseException{List<ExpressionFunction<?>> functions=new ArrayList<>();parseEnv.getContext().getFunctions(method.getName(),functions);ExpressionFunction<?> bestFunction=null;InvokableMatch bestMatch=null;for(ExpressionFunction<?> fn : functions){InvokableMatch match=getMatch(fn.getArgumentTypes().toArray(new TypeToken[0]),fn.isVarArgs(),method.getArguments(),parseEnv,type,actionAccepted);if(match!=null&&(bestMatch==null||match.distance<bestMatch.distance)){bestMatch=match;bestFunction=fn;}}if(bestFunction==null){throw new QuickParseException(""No such function found: ""+method);}ExpressionFunction<?> toInvoke=bestFunction;return new ObservableValue.ComposedObservableValue<>((TypeToken<Object>)toInvoke.getReturnType(),args -> {  try {    return toInvoke.apply(Arrays.asList(args));  } catch (  RuntimeException e) {    parseEnv.msg().error(""Invocation failed for function "" + method,e);    return null;  }},true,bestMatch.parameters);}"
2974	"@Override public boolean hasNext(){return i<stats.length;}"
2975	"public Integer getIntegerValue(){if(value.getValue() instanceof IntegerLiteral){return ((IntegerLiteral<QName>)value.getValue()).getValue();}return null;}"
2976	"private static XMLInputFactory getOrCreateInputFactory() throws FactoryConfigurationError{if(ourInputFactory==null){try{Class.forName(""ca.uhn.fhir.repackage.javax.xml.stream.XMLInputFactory"");System.setProperty(""javax.xml.stream.XMLInputFactory"",""com.ctc.wstx.stax.WstxInputFactory"");}catch(ClassNotFoundException e){}XMLInputFactory inputFactory=newInputFactory();if(!ourHaveLoggedStaxImplementation){logStaxImplementation(inputFactory.getClass());}inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD,false);inputFactory.setProperty(""javax.xml.stream.isSupportingExternalEntities"",false);try{Class.forName(""com.ctc.wstx.stax.WstxInputFactory"");if(inputFactory instanceof com.ctc.wstx.stax.WstxInputFactory){inputFactory.setProperty(WstxInputProperties.P_UNDECLARED_ENTITY_RESOLVER,XML_RESOLVER);try{inputFactory.setProperty(WstxInputProperties.P_MAX_ATTRIBUTE_SIZE,""100000000"");}catch(IllegalArgumentException e){}}}catch(ClassNotFoundException e){ourLog.debug(""WstxOutputFactory (Woodstox) not found on classpath"");}ourInputFactory=inputFactory;}return ourInputFactory;}"
2977	"public ClientResponse uploadFile(VirtualFile source,String branch){if(source==null){return null;}ClientResponse clientResponse=null;Credentials credentials=new Credentials(baseUrl,projectIdentifier,projectKey,null);CrowdinApiParametersBuilder crowdinApiParametersBuilder=new CrowdinApiParametersBuilder();CrowdinApiClient crowdinApiClient=new Crwdn();crowdinApiParametersBuilder.json().files(source.getCanonicalPath()).exportPatterns(""strings.xml"",""/values-%two_letters_code%/%original_file_name%"");String createdBranch=this.createBranch(branch);if(createdBranch!=null){crowdinApiParametersBuilder.branch(createdBranch);}try{clientResponse=crowdinApiClient.addFile(credentials,crowdinApiParametersBuilder);if(clientResponse!=null&&clientResponse.getStatus()==200){Utils.showInformationMessage(""File '""+source.getName()+""' added to Crowdin"");}System.out.println(""Crowdin: add file '""+source.getName()+""': ""+clientResponse.getStatus()+"" ""+clientResponse.getStatusInfo());if(clientResponse.getStatus()==400){clientResponse=crowdinApiClient.updateFile(credentials,crowdinApiParametersBuilder);if(clientResponse!=null&&clientResponse.getStatus()==200){Utils.showInformationMessage(""File '""+source.getName()+""' updated in Crowdin"");}System.out.println(""Crowdin: update file '""+source.getName()+""': ""+clientResponse.getStatus()+"" ""+clientResponse.getStatusInfo());}}catch(Exception e){e.printStackTrace();}return clientResponse;}"
2978	"public String rewriteMessage(Exception exception){if(exception instanceof JacksonYAMLParseException){return rewriteMessage((JacksonYAMLParseException)exception);}if(exception instanceof YAMLException){return rewriteMessage((YAMLException)exception);}return exception!=null?exception.getLocalizedMessage():null;}"
2979	"public void calcMoves(ArrayList<Player> players,int cardNumber){if(cardNumber==7){findSplitMoves();}else {for(Token t : tokens){switch (cardNumber){case 0 :if(t.getSpaceID()==startSpace){t.setMoves(findOpponentTokens(players));}break;case 1 :t.setMoves(findSimpleMoves(t,cardNumber,true));if(t.getSpaceID()==startSpace){t.addMove(hashMap.get(t.getSpaceID()).getNextID());}break;case 2 :t.setMoves(findSimpleMoves(t,cardNumber,true));if(t.getSpaceID()==startSpace){t.addMove(hashMap.get(t.getSpaceID()).getNextID());}break;case 3 :t.setMoves(findSimpleMoves(t,cardNumber,true));break;case 4 :t.setMoves(findSimpleMoves(t,cardNumber,false));break;case 5 :t.setMoves(findSimpleMoves(t,cardNumber,true));break;case 8 :t.setMoves(findSimpleMoves(t,cardNumber,true));break;case 10 :t.setMoves(findSimpleMoves(t,cardNumber,true));t.addMoves(findSimpleMoves(t,1,false));break;case 11 :t.setMoves(findSimpleMoves(t,cardNumber,true));if(t.getSpaceID()!=startSpace&&!hashMap.get(t.getSpaceID()).isSafe()){t.addMoves(findOpponentTokens(players));}break;case 12 :t.setMoves(findSimpleMoves(t,cardNumber,true));break;}}}}"
2980	"public static void outputEllipse(HashMap<String,MyImage> pathImgPair,String outPath,boolean hasAnnotationLoaded,JFrame dialogFatherFrame){outPath=!outPath.endsWith("".txt"")?outPath+="".txt"":outPath;System.out.println(""OP: ""+outPath);File f=new File(outPath);if(f.exists()){int res=JOptionPane.showConfirmDialog(dialogFatherFrame,String.format(""File %s exists, do you want to overwrite it?"",f.getAbsolutePath()),""File exists"",JOptionPane.YES_NO_OPTION);if(res==JOptionPane.NO_OPTION){return ;}}boolean withBoth=false;if(hasAnnotationLoaded){int res=JOptionPane.showOptionDialog(dialogFatherFrame,""Do you want to concatenate loaded annotations and annotations marked by you into the output?\n""+""(Noted that a image without any annotation will not be included in the output file)"","""",JOptionPane.NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,new String{""both loaded and marked annotations"",""only annotations marked by me""},0);if(res==0){withBoth=true;}if(res==1){withBoth=false;}}int numImage=0;int numAnnot=0;StringBuffer sb=new StringBuffer();for(String p : pathImgPair.keySet()){MyImage mim=UniversalTool.getMyImageFromPathImgPair(p,pathImgPair);String s=mim.getOutputString(withBoth);sb.append(s);if(!s.equals("""")){numImage++;numAnnot+=s.split(""\n"").length-2;}}writeFile(f,sb.toString());JOptionPane.showMessageDialog(dialogFatherFrame,String.format(""%d annotations from %d images \nhave been written to %s"",numAnnot,numImage,f.getAbsolutePath()));}"
2981	"public void setCurrentTargetRoute(Route route,boolean isReroute){if(route!=null&&route.size()==0){setCurrentTargetRoute(null,isReroute);return ;}Route prevRoute;synchronized(this){prevRoute=targetRoute;targetRoute=route;if(route!=null){routePathChecker.onNewTargetRoute();if(!isReroute){listener.onRouteProgrammed(this,targetRoute);}}}if(route==null&&prevRoute!=null){listener.onRouteCancelled(this,prevRoute);}}"
2982	"public void addDeclaration(IASTNode node){if(!(node instanceof IASTName)){return ;}IASTName name=(IASTName)node;if(fDeclarations==null){fDeclarations=new IASTName{name};}else {if(fDeclarations.length>0&&((ASTNode)node).getOffset()<((ASTNode)fDeclarations[0]).getOffset()){fDeclarations=(IASTName[])ArrayUtil.prepend(IASTName.class,fDeclarations,name);}else {fDeclarations=(IASTName[])ArrayUtil.append(IASTName.class,fDeclarations,name);}}}"
2983	"public static void main(String[] args){NeoPlayer neoPlayer=new NeoPlayer(args);try{if(neoPlayer.getNeoPlayerCommandOptions().hasHelpBeenRequested()){CommandLine.usage(neoPlayer.getNeoPlayerCommandOptions(),System.err);return ;}if(neoPlayer.getNeoPlayerCommandOptions().getMp3FilesToPlay().length>0){neoPlayer.addFilesToPlayList(neoPlayer.getNeoPlayerCommandOptions().getMp3FilesToPlay());}if(neoPlayer.getNeoPlayerCommandOptions().getPlayListFile()!=null){neoPlayer.addFileFromPlayList(neoPlayer.getNeoPlayerCommandOptions().getPlayListFile());}neoPlayer.getPlayer().setRepeat(neoPlayer.getNeoPlayerCommandOptions().isRepeatSet());neoPlayer.getPlayer().play();}catch(FileNotFoundException ex){System.err.println(""ERROR: Playlist file or other files not found: ""+ex.getMessage());System.exit(-1);}catch(IOException ex){System.err.println(""ERROR: An IO exception occurred"");System.exit(-1);}System.out.println(""Playing..."");neoPlayer.getPlayer().play();}"
2984	"@Override public void postIteration(WorkerContext<MASTER_RESULT,WORKER_RESULT> context){ final long timeOutThreshold=NumberFormatUtils.getLong(context.getProps().getProperty(GUAGUA_WORKER_GETRESULT_TIMEOUT),GUAGUA_DEFAULT_WORKER_GETRESULT_TIMEOUT);while(true){this.isTimeoutToGetCurrentMasterResult=false;int latestIteraton=getLatestMasterIteration(context);if(context.getCurrentIteration()==latestIteraton+1&&context.getCurrentIteration()<=context.getTotalIteration()){new BasicCoordinatorCommand(){  @Override public void doExecute() throws KeeperException, InterruptedException {    String appId=context.getAppId();    int currentIteration=context.getCurrentIteration();    final String appMasterNode=getCurrentMasterNode(appId,currentIteration).toString();    BytableWrapper workerMessage=new BytableWrapper();    workerMessage.setBytes(NettyWorkerCoordinator.this.getWorkerSerializer().objectToBytes(context.getWorkerResult()));    workerMessage.setCurrentIteration(context.getCurrentIteration());    workerMessage.setContainerId(context.getContainerId());    workerMessage.setStopMessage(false);    LOG.debug(""Message:{}"",workerMessage);    NettyWorkerCoordinator.this.clientChannel.write(workerMessage);    final long start=System.nanoTime();    new RetryCoordinatorCommand(isFixedTime(),getSleepTime()){      @Override public boolean retryExecution() throws KeeperException, InterruptedException {        try {          if (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) >= timeOutThreshold) {            NettyWorkerCoordinator.this.isTimeoutToGetCurrentMasterResult=true;            return true;          }          return getZooKeeper().exists(appMasterNode,false) != null || NettyWorkerCoordinator.this.isServerShutdownOrClientDisconnect.get();        } catch (        KeeperException.NoNodeException e) {          if (System.nanoTime() % 10 == 0) {            LOG.warn(""No such node:{}"",appMasterNode);          }          return false;        }      }    }.execute();    if (!NettyWorkerCoordinator.this.isTimeoutToGetCurrentMasterResult) {      LOG.info(""Application {} container {} iteration {} waiting ends with {}ms execution time."",context.getAppId(),context.getContainerId(),context.getCurrentIteration(),TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));      if (!NettyWorkerCoordinator.this.isServerShutdownOrClientDisconnect.get()) {        String appMasterSplitNode=getCurrentMasterSplitNode(appId,currentIteration).toString();        setMasterResult(context,appMasterNode,appMasterSplitNode);        LOG.info(""Master computation is done."");      }    }  }}.execute();if(this.isTimeoutToGetCurrentMasterResult){continue;}else {break;}}else {LOG.info(""Application {} container {}, current iteration is switched to {}."",context.getAppId(),context.getContainerId(),latestIteraton);context.setCurrentIteration(latestIteraton);if(!context.isInitIteration()){new BasicCoordinatorCommand(){  @Override public void doExecute() throws KeeperException, InterruptedException {    String appId=context.getAppId();    int lastIteration=context.getCurrentIteration();    final String appMasterNode=getCurrentMasterNode(appId,lastIteration).toString();    final String appMasterSplitNode=getCurrentMasterSplitNode(appId,lastIteration).toString();    setMasterResult(context,appMasterNode,appMasterSplitNode);  }}.execute();}break;}}}"
2985	"@SuppressWarnings(""deprecation"") public String getUUID(String playerName){if(playerName==null){return null;}if(plugin.isAlternateUUIDLookUp()){for(String uuid : UserManager.getInstance().getAllUUIDs()){User user=UserManager.getInstance().getUser(new UUID(uuid));String name=user.getData().getString(""PlayerName"");if(!name.equals("""")){return uuid;}}}Player player=Bukkit.getPlayer(playerName);if(player==null){return Bukkit.getOfflinePlayer(playerName).getUniqueId().toString();}else {return player.getUniqueId().toString();}}"
2986	"private void processFile(String line){String[] data=line.split(""\t"");Parser parser=new Parser(new File(""WEBPAGES_RAW/""+data[0]));if(!parser.badURL()){for(Map.Entry<String,Integer> entry : parser.getWordFreq().entrySet()){index.add(documentID,entry.getKey());}post.addPost(new DocData(parser,documentID,data[1]));documentID++;if(lowMemory()){writeOutputFile();}}}"
2987	"@Override public List<Item> getConsequences(){if(antecedences.size()==antNeeded){String[] itemForm=antecedences.get(0).getItemform();String treeName=itemForm[0];String node=itemForm[1];String pos=itemForm[2];String i=itemForm[3];String f1=itemForm[4];String f2=itemForm[5];String j=itemForm[6];String adj=itemForm[7];if(tag.getInitialTree(treeName)!=null&&node.equals("""")&&f1.equals(""-"")&&f2.equals(""-"")&&adj.equals(""0"")&&pos.equals(""ra"")){consequences.add(new DeductionItem(outTreeName,outNode,""rb"",i,""-"",""-"",j,""0""));String outNodeName=outNode.length()==0?""?"":outNode;this.name=""substitute ""+outTreeName+""[""+outNodeName+"",""+treeName+""]"";}}return consequences;}"
2988	"public void setPaintingScrollBars(XY_I _p,boolean _pan){if(resizeX().contains(_p)){paintXResizing=true;paint();return ;}else {paintXResizing=false;}if(resizeY().contains(_p)){paintYResizing=true;paint();return ;}else {paintYResizing=false;}if(_p.x>getW()-scrollBarSize||_pan){if(paintYScrollbar){;}else {getRootView().setMouseWheelFocus(0,this);paintYScrollbar=true;paint();}}else {paintYScrollbar=false;paint();}if(_p.y>getH()-scrollBarSize||_pan){if(paintXScrollbar){;}else {getRootView().setMouseWheelFocus(0,this);paintXScrollbar=true;paint();}}else {paintXScrollbar=false;paint();}}"
2989	"@Override public void createConfiguration(String clientToken){if(braintreeFragment!=null){getFragmentManager().beginTransaction().remove(braintreeFragment).commit();}try{braintreeFragment=BraintreeFragment.newInstance(this,clientToken);}catch(InvalidArgumentException exception){throw new IllegalArgumentException(exception);}}"
2990	"private void updateStepStatus(String stepId,StepState state,ServiceCode code,String message,boolean automaticRollback) throws WorkflowException{String workflowPath=getZKStep2WorkflowPath(stepId);Workflow workflow=null;boolean workflowDeleted=false;InterProcessLock lock=null;try{workflowPath=(String)_dataManager.getData(workflowPath,false);if(workflowPath==null){return ;}workflow=(Workflow)_dataManager.getData(workflowPath,false);if(workflow==null){WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowPath);_log.info(""Workflow not found: ""+workflowPath,ex);throw ex;}lock=lockWorkflow(workflow);workflow=loadWorkflow(workflow);if(workflow==null){WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowPath);_log.info(""Workflow not found: ""+workflowPath,ex);throw ex;}synchronized(workflow){StepStatus status=workflow.getStepStatus(stepId);if(status.isTerminalState()&&!(status.state==StepState.SUSPENDED_NO_ERROR)){WorkflowException ex=WorkflowException.exceptions.workflowStepInTerminalState(stepId,status.state.name(),state.name());_log.error(String.format(""Step %s is already in terminal state %s, trying to change to %s which will be ignored"",stepId,status.state.toString(),state.toString()),ex);return ;}Step step=workflow.getStepMap().get(stepId);if(StepState.ERROR==state&&workflow.isSuspendOnError()&&!workflow.isRollbackState()){state=StepState.SUSPENDED_ERROR;step.suspendStep=false;}if(step.isRollbackStep()){if(step.foundingStepId!=null){if(workflow.getStepMap().get(step.foundingStepId)!=null){Step foundingStep=workflow.getStepMap().get(step.foundingStepId);StepStatus foundingStatus=workflow.getStepStatus(step.foundingStepId);if(StepState.SUSPENDED_ERROR.equals(foundingStatus.state)){foundingStatus.updateState(StepState.ERROR,code,message);persistWorkflowStep(workflow,foundingStep);}}}}_log.info(String.format(""Updating workflow step: %s state %s : %s"",stepId,state,message));status.updateState(state,code,message);persistWorkflowStep(workflow,step);if(status.isTerminalState()){boolean releasedLocks=_ownerLocker.releaseLocks(stepId);if(!releasedLocks){_log.info(""Unable to release StepLocks for step: ""+stepId);}checkBlockedSteps(workflow,stepId);}if(workflow.allStatesTerminal()){workflowDeleted=doWorkflowEndProcessing(workflow,automaticRollback,lock);if(workflowDeleted){lock=null;}}}}catch(Exception ex){String exMsg=""Exception processing updateStepStatus stepId: ""+stepId+"": ""+ex.getMessage();_log.error(exMsg,ex);throw new WorkflowException(exMsg,ex);}finally{unlockWorkflow(workflow,lock);if(workflowDeleted){deleteWorkflowLock(workflow);}}}"
2991	"@Override public void tick(){TileLaserRelay relay=this.getAttachedRelay();if(relay!=null){if(buffer.isEmpty()){relay.fetch(buffer,LaserRelayFetch.ANY_ATOM);}ItemStack stack=this.decrStackSize(0,1);if(stack!=null&&stack.stackSize==1){Integer catalyst_power=FundamentalChemistry.nuclear_transmuter_catalysts.get(stack.getItem());if(!buffer.atoms.isEmpty()&&catalyst_power!=null){Integer new_atom=buffer.atoms.entrySet().iterator().next().getKey()+catalyst_power*factor;boolean consume=false;if(new ChemicalStorage(this.storage).addAtom(new_atom,1)==0){if(chance(Math.min(catalyst_power*10+50,99))){if(FundamentalChemistry.elements.invget(new_atom)!=null){this.storage.addAtom(new_atom,1);this.markDirty();}}else {consume=true;}buffer.clear();}if(!consume){ItemStack pstack=this.getStackInSlot(0);if(pstack!=null){stack.stackSize+=pstack.stackSize;}this.setInventorySlotContents(0,stack);}}}}}"
2992	"@Override protected void onItemAdded(int index){ final ItemStack stack=getStackInSlot(index);if(stack==null){return ;} final Face face=Face.VALUES[index]; final ModuleProvider provider=ModuleAPI.getProviderFor(stack,tileEntity,face);if(provider==null){return ;} final Module module=provider.createModule(stack,tileEntity,face);if(module!=null&&!tileEntity.getCasingWorld().isRemote){module.onInstalled(stack);}tileEntity.setModule(Face.VALUES[index],module);}"
2993	"@Override public void update(float delta){int max=1000;int min=0;if(((max+random.nextInt(max-min+1))==(max+random.nextInt(max-min+1))||lavaOn)){lavaOn=true;velocityControl.x+=velocityX;velocityControl.y+=velocityY;lavaSplash.setVelocity(velocityControl.x,velocityControl.y);if(lavaSplash.getPositionX()>1000||lavaSplash.getPositionX()<0||lavaSplash.getPositionY()>1000||lavaSplash.getPositionY()<0){lavaSplash.setPosition(startPosX,startPosY);lavaOn=false;}}}"
2994	"public boolean isAvailable(){return getCopies().stream().filter(bookCopy -> bookCopy.isAvailable()).count()>0;}"
2995	"public void WriteIntoBuffer(BufferedWriter buffer,Level2D lvl) throws IOException{buffer.write(""""+lvl.getHeight());buffer.newLine();buffer.write(""""+lvl.getWidth());Item itm;for(int i=0;i<lvl.getHeight();i++){buffer.newLine();for(int j=0;j<lvl.getWidth();j++){itm=lvl.getItemInPlace(new Position2D(i,j));if(itm.getPos().isWasTarget()&&(itm.getType().compareTo(""Actor"")==0)){buffer.write('$');}else {if(itm.getPos().isWasTarget()&&(itm.getType().compareTo(""Box"")==0)){buffer.write('?');}else {buffer.write(lvl.getMap()[i][j].getCh());}}}}}"
2996	"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onDamage(EntityDamageEvent event){Entity entity=event.getEntity();if(!(entity instanceof Player)){return ;}UUID uuid=entity.getUniqueId();User user=userManager.get(uuid);if(user==null){return ;}if((options.modeInvincible&&modeCoordinator.isInMode(uuid)||(!options.modeFreezeDamage&&user.isFrozen()))){event.setCancelled(true);}}"
2997	"protected Boolean canAutofillDates(ITableRow row){ final Long hostId=this.getOrganizerColumn().getValue(row.getRowIndex()); final Long attendeeId=this.getGuestIdColumn().getValue(row.getRowIndex()); final Boolean startDateEmpty=null==this.getStartDateColumn().getValue(row.getRowIndex()); final Boolean endDateEmpty=null==this.getEndDateColumn().getValue(row.getRowIndex()); final String rowState=this.getStateColumn().getValue(row.getRowIndex());return null!=row&&""ASKED"".equals(rowState)&&startDateEmpty&&endDateEmpty&&BEANS.get(GoogleApiHelper.class).isCalendarConfigured(hostId)&&this.isTimeZoneValid(attendeeId)&&this.isTimeZoneValid(hostId)&&this.isGuestCurrentUser(row);}"
2998	"public boolean hasNext(){return (index<edges.size()&&nb<nbEntering);}"
2999	"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){if(composeFooterInterface!=null&&invokeGenericWebViewInterface!=null){BotCaourselButtonModel botCaourselButtonModel=(BotCaourselButtonModel)parent.getAdapter().getItem(position);if(botCarouselModel.getDefault_action()!=null&&BundleConstants.BUTTON_TYPE_WEB_URL.equalsIgnoreCase(botCarouselModel.getDefault_action().getType())){invokeGenericWebViewInterface.invokeGenericWebView(botCarouselModel.getDefault_action().getUrl());}else {if(botCarouselModel.getDefault_action()!=null&&BundleConstants.BUTTON_TYPE_POSTBACK.equalsIgnoreCase(botCarouselModel.getDefault_action().getType())){String buttonPayload=botCarouselModel.getDefault_action().getPayload();composeFooterInterface.onSendClick(buttonPayload);}}}}"
3000	"public static Method getRenderMethod(Class<? extends JapidTemplateBaseWithoutPlay> currentClass){java.lang.reflect.Method[] methods=currentClass.getDeclaredMethods();for(java.lang.reflect.Method m : methods){if(m.getName().equals(""render"")){Class<?>[] parameterTypes=m.getParameterTypes();if(parameterTypes.length==1){Class<?> t=parameterTypes[0];if(t!=NamedArgRuntime[].class){return m;}}else {return m;}}}throw new RuntimeException(""no render method found for the template: ""+currentClass.getCanonicalName());}"
3001	"public boolean shouldSkipField(FieldAttributes f){return f.getName().contains(""model"")||f.getName().contains(""price"")||f.getName().contains(""drivingAge"")||f.getName().contains(""location"");}"
3002	"@Override public void onStop(){super.onStop();if(!loginSuccess){db.deletePlayer(currentPlayer);mAuth.getCurrentUser().delete();}}"
3003	"public boolean preventStatus(Battle b,ActivePokemon caster,ActivePokemon victim,StatusCondition status){return !victim.isLevitating(b);}"
3004	"public boolean isRight(Segment1 other){if(other.getPoLeft().getX()<_poLeft.getX()){return true;}else {return false;}}"
3005	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_item);MediaProvider.checkPermission(this);view_only=getIntent().getBooleanExtra(VIEW_ONLY,false);if(!view_only&&Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){postponeEnterTransition();setEnterSharedElementCallback(sharedElementCallback);getWindow().getSharedElementEnterTransition().addListener(transitionListener);}if(!view_only){String path;if(savedInstanceState!=null&&savedInstanceState.containsKey(ALBUM_PATH)){path=savedInstanceState.getString(ALBUM_PATH);}else {path=getIntent().getStringExtra(ALBUM_PATH);}album=MediaProvider.loadAlbum(path);}else {album=getIntent().getExtras().getParcelable(ALBUM);}if(savedInstanceState!=null){albumItem=savedInstanceState.getParcelable(ALBUM_ITEM);if(albumItem!=null&&albumItem instanceof Photo){Photo photo=(Photo)albumItem;ImageViewState imageViewState=(ImageViewState)savedInstanceState.getSerializable(IMAGE_VIEW_SAVED_STATE);photo.putImageViewSavedState(imageViewState);}if(savedInstanceState.getBoolean(INFO_DIALOG_SHOWN,false)){showInfoDialog();}}else {int position=getIntent().getIntExtra(ITEM_POSITION,0);if(album!=null){albumItem=album.getAlbumItems().get(position);albumItem.isSharedElement=true;}}if(album==null||albumItem==null){return ;}toolbar=(Toolbar)findViewById(R.id.toolbar);setSupportActionBar(toolbar); final ActionBar actionBar=getSupportActionBar();if(actionBar!=null){actionBar.setTitle(albumItem.getName()!=null&&!view_only?albumItem.getName():"""");actionBar.setDisplayHomeAsUpEnabled(true);}viewPager=(ViewPager)findViewById(R.id.view_pager);viewPager.setAdapter(new ViewPagerAdapter(album));viewPager.setCurrentItem(album.getAlbumItems().indexOf(albumItem),false);viewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){  private final int color=ContextCompat.getColor(ItemActivity.this,R.color.white);  @Override public void onPageSelected(  int position){    ViewHolder viewHolder=((ViewPagerAdapter)viewPager.getAdapter()).findViewHolderByTag(albumItem.getPath());    if (viewHolder instanceof VideoViewHolder) {      ((VideoViewHolder)viewHolder).pauseVideo();    }    albumItem=album.getAlbumItems().get(position);    ColorFade.fadeToolbarTitleColor(toolbar,color,new ColorFade.ToolbarTitleFadeCallback(){      @Override public void setTitle(      Toolbar toolbar){        toolbar.setTitle(albumItem.getName() != null ? albumItem.getName() : """");      }    },true);    viewHolder=((ViewPagerAdapter)viewPager.getAdapter()).findViewHolderByTag(albumItem.getPath());    onShowViewHolder(viewHolder);  }});viewPager.setPageTransformer(true,new ZoomOutPageTransformer());bottomBar=findViewById(R.id.bottom_bar);ImageView delete_button=(ImageView)bottomBar.findViewById(R.id.delete_button);if(!view_only){if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){Drawable d=ContextCompat.getDrawable(this,R.drawable.ic_delete_avd);delete_button.setImageDrawable(d);}else {delete_button.setImageResource(R.drawable.ic_delete_white_24dp);}}else {((View)delete_button.getParent()).setVisibility(View.GONE);} final ViewGroup rootView=(ViewGroup)findViewById(R.id.root_view);if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.KITKAT_WATCH){rootView.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener(){  @Override @RequiresApi(api=Build.VERSION_CODES.KITKAT_WATCH) public WindowInsets onApplyWindowInsets(  View view,  WindowInsets insets){    toolbar.setPadding(toolbar.getPaddingStart() + insets.getSystemWindowInsetLeft(),toolbar.getPaddingTop() + insets.getSystemWindowInsetTop(),toolbar.getPaddingEnd() + insets.getSystemWindowInsetRight(),toolbar.getPaddingBottom());    bottomBar.setPadding(bottomBar.getPaddingStart() + insets.getSystemWindowInsetLeft(),bottomBar.getPaddingTop(),bottomBar.getPaddingEnd() + insets.getSystemWindowInsetRight(),bottomBar.getPaddingBottom() + insets.getSystemWindowInsetBottom());    VideoViewHolder.onBottomInset(new int[]{insets.getSystemWindowInsetLeft(),insets.getSystemWindowInsetTop(),insets.getSystemWindowInsetRight(),insets.getSystemWindowInsetBottom()});    rootView.setOnApplyWindowInsetsListener(null);    return insets.consumeSystemWindowInsets();  }});}else {rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){  @Override public void onGlobalLayout(){    int[] screenSize=Util.getScreenSize(ItemActivity.this);    int[] windowInsets=new int[]{Math.abs(screenSize[0] - rootView.getLeft()),Math.abs(screenSize[1] - rootView.getTop()),Math.abs(screenSize[2] - rootView.getRight()),Math.abs(screenSize[3] - rootView.getBottom())};    toolbar.setPadding(toolbar.getPaddingStart() + windowInsets[0],toolbar.getPaddingTop() + windowInsets[1],toolbar.getPaddingEnd() + windowInsets[2],toolbar.getPaddingBottom());    bottomBar.setPadding(bottomBar.getPaddingStart() + windowInsets[0],bottomBar.getPaddingTop(),bottomBar.getPaddingEnd() + windowInsets[2],bottomBar.getPaddingBottom() + windowInsets[3]);    VideoViewHolder.onBottomInset(windowInsets);    rootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);  }});}getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE|View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION|View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP){setupTaskDescription();}if(view_only||Build.VERSION.SDK_INT<Build.VERSION_CODES.LOLLIPOP){albumItem.isSharedElement=false;}if(savedInstanceState!=null){((ViewPagerAdapter)viewPager.getAdapter()).addOnInstantiateItemCallback(new ViewPagerOnInstantiateItemCallback(){  @Override public boolean onInstantiateItem(  ViewHolder viewHolder){    if (viewHolder.albumItem.getPath().equals(albumItem.getPath())) {      onShowViewHolder(viewHolder);      return false;    }    return true;  }});}}"
3006	"@Override public void render(float delta){Gdx.gl.glClearColor(0,0,1,1);Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);updateServer(Gdx.graphics.getDeltaTime());if(checkPlayer){stage.addActor(playerVloger);}else {stage.addActor(playerProger);}if(kf){game.setScreen(new GuiMenu(game,'l',0));}if(a%60>9){str=""""+(int)floor(a/60)+"":""+a%60;}else {str=""""+(int)floor(a/60)+"":0""+a%60;}sp.begin();font.getData().setScale(3,3);font.draw(sp,str,Gdx.graphics.getWidth()-200,Gdx.graphics.getHeight()-50);sp.end();stage.act();if(checkPlayer){playerVloger.processInput();for(HashMap.Entry<String,PlayerProgerEntity> entry : friendlyPlayers2.entrySet()){stage.addActor(entry.getValue());}stage.getCamera().position.set(playerVloger.getX(),playerVloger.getY(),0);}else {for(HashMap.Entry<String,PlayerVlogerEntity> entry : friendlyPlayers1.entrySet()){stage.addActor(entry.getValue());}playerProger.processInput();stage.getCamera().position.set(playerProger.getX(),playerProger.getY(),0);}for(BotIdleEntity aBotsIdle : botsIdle){aBotsIdle.processInput();}world.step(delta,6,2);camera.update();renderer.render(world,camera.combined);stage.draw();}"
3007	"private void setPrinter(){String printerName[]={""Samsung K7600 Series"",""Brother MFC-7860DW Printer""};int index=-1,nameIndex;System.out.println(""First condition: ""+path.contains(""TEST""));System.out.println(""Second condition: ""+(path.substring(path.indexOf('-',path.indexOf('-')+1)).charAt(2)=='T'));if(path.contains(""TEST"")||path.substring(path.indexOf('-',path.indexOf('-')+1)).charAt(2)=='T'){nameIndex=1;}else {nameIndex=0;}PrintRequestAttributeSet attr=new HashPrintRequestAttributeSet();attr.add(Sides.DUPLEX);attr.add(MediaSizeName.ISO_A4);PrintService[] service=PrintServiceLookup.lookupPrintServices(null,attr);for(int i=0;i<service.length;i++){System.out.println(""Printer List -> ""+service[i].getName());if(service[i].getName().equals(printerName[nameIndex])){index=i;}}try{job.setPrintService(service[index]);System.out.println(""Destination Printer -> ""+job.getPrintService().getName());}catch(PrinterException e){System.out.println(""Printer not found"");}}"
3008	"private static IErlElement findExternalCallOrType(IErlModule module,OpenResult res,IErlProject project,IErlElement element,IErlModel.Scope scope) throws CoreException{if(isTypeDefOrRecordDef(element)){return ModelUtils.findTypeDef(module,res.getName(),res.getFun(),res.getPath(),project,scope);} final IErlElement result=ModelUtils.findFunction(res.getName(),res.getFunction(),res.getPath(),project,scope,module);if(result instanceof IErlFunction){return result;}return ModelUtils.findFunction(res.getName(),new ErlangFunction(res.getFun(),ErlangFunction.ANY_ARITY),res.getPath(),project,scope,module);}"
3009	"private MethodMetadata getFinderJsonMethod(FinderMetadataDetails finderDetails,String plural){JavaSymbolName finderMethodName=new JavaSymbolName(""json""+StringUtils.capitalize(finderDetails.getFinderMethodMetadata().getMethodName().getSymbolName()));if(finderDetails==null||jsonMetadata.getToJsonArrayMethodName()==null||methodExists(finderMethodName)){return null;}List<AnnotatedJavaType> annotatedParamTypes=new ArrayList<AnnotatedJavaType>();List<JavaSymbolName> paramNames=new ArrayList<JavaSymbolName>();InvocableMemberBodyBuilder bodyBuilder=new InvocableMemberBodyBuilder();StringBuilder methodParams=new StringBuilder();for(FieldMetadata field : finderDetails.getFinderMethodParamFields()){JavaSymbolName fieldName=field.getFieldName();List<AnnotationMetadata> annotations=new ArrayList<AnnotationMetadata>();List<AnnotationAttributeValue<?>> attributes=new ArrayList<AnnotationAttributeValue<?>>();attributes.add(new StringAttributeValue(new JavaSymbolName(""value""),StringUtils.uncapitalize(fieldName.getSymbolName())));if(field.getFieldType().equals(JavaType.BOOLEAN_PRIMITIVE)||field.getFieldType().equals(JavaType.BOOLEAN_OBJECT)){attributes.add(new BooleanAttributeValue(new JavaSymbolName(""required""),false));}AnnotationMetadataBuilder requestParamAnnotation=new AnnotationMetadataBuilder(REQUEST_PARAM,attributes);annotations.add(requestParamAnnotation.build());if(field.getFieldType().equals(new JavaType(Date.class.getName()))||field.getFieldType().equals(new JavaType(Calendar.class.getName()))){AnnotationMetadata annotation=MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),DATE_TIME_FORMAT);if(annotation!=null){annotations.add(annotation);}}paramNames.add(fieldName);annotatedParamTypes.add(new AnnotatedJavaType(field.getFieldType(),annotations));if(field.getFieldType().equals(JavaType.BOOLEAN_OBJECT)){methodParams.append(field.getFieldName()+"" == null ? new Boolean(false) : ""+field.getFieldName()+"", "");}else {methodParams.append(field.getFieldName()+"", "");}}if(methodParams.length()>0){methodParams.delete(methodParams.length()-2,methodParams.length());}List<JavaSymbolName> newParamNames=new ArrayList<JavaSymbolName>();newParamNames.addAll(paramNames);List<AnnotationAttributeValue<?>> requestMappingAttributes=new ArrayList<AnnotationAttributeValue<?>>();requestMappingAttributes.add(new StringAttributeValue(new JavaSymbolName(""params""),""find=""+finderDetails.getFinderMethodMetadata().getMethodName().getSymbolName().replaceFirst(""find""+plural,"""")));requestMappingAttributes.add(new StringAttributeValue(new JavaSymbolName(""headers""),""Accept=application/json""));AnnotationMetadataBuilder requestMapping=new AnnotationMetadataBuilder(REQUEST_MAPPING,requestMappingAttributes);List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();annotations.add(requestMapping);annotations.add(new AnnotationMetadataBuilder(RESPONSE_BODY));String shortBeanName=jsonEnabledType.getNameIncludingTypeParameters(false,builder.getImportRegistrationResolver());String httpHeadersShortName=getShortName(HTTP_HEADERS);String responseEntityShortName=getShortName(RESPONSE_ENTITY);String httpStatusShortName=getShortName(HTTP_STATUS);bodyBuilder.appendFormalLine(httpHeadersShortName+"" headers = new ""+httpHeadersShortName+""();"");bodyBuilder.appendFormalLine(""headers.add(\""Content-Type\"", \""application/text; charset=utf-8\"");"");bodyBuilder.appendFormalLine(""return new ""+responseEntityShortName+""<String>(""+shortBeanName+"".""+jsonMetadata.getToJsonArrayMethodName().getSymbolName().toString()+""(""+shortBeanName+"".""+finderDetails.getFinderMethodMetadata().getMethodName().getSymbolName()+""(""+methodParams.toString()+"").getResultList()), headers, ""+httpStatusShortName+"".OK);"");MethodMetadataBuilder methodBuilder=new MethodMetadataBuilder(getId(),Modifier.PUBLIC,finderMethodName,RESPONSE_ENTITY_STRING,annotatedParamTypes,newParamNames,bodyBuilder);methodBuilder.setAnnotations(annotations);return methodBuilder.build();}"
3010	"private static boolean isRemovable(List<SoftwareVersion> versions,SoftwareVersion version) throws IOException{int index=versions.indexOf(version);int size=versions.size();if(index==0||index==size-1){return true;}List<SoftwareVersion> upgradeFromVersionList=new ArrayList<SoftwareVersion>();List<SoftwareVersion> upgradeToVersionList=new ArrayList<SoftwareVersion>();for(int i=0;i<index;i++){SoftwareVersion tempVersion=versions.get(i);if(tempVersion.isSwitchableTo(version)){upgradeFromVersionList.add(tempVersion);}}for(int i=index+1;i<size;i++){SoftwareVersion tempVersion=versions.get(i);if(version.isSwitchableTo(tempVersion)){upgradeToVersionList.add(tempVersion);}}if(upgradeFromVersionList.size()==0||upgradeToVersionList.size()==0){return true;}OUTLOOP: for (SoftwareVersion v : upgradeToVersionList) {  int position=versions.indexOf(v);  for (int i=0; i < position; i++) {    if (i != index && versions.get(i).isSwitchableTo(v))     continue OUTLOOP;  }  return false;}return true;}"
3011	"@Override public boolean getEnabled(){return declaration instanceof Declaration&&project!=null&&inSameProject(declaration);}"
3012	"@Override public void execute(){System.out.println(this.getClass().getSimpleName());Npc charterMember=ctx.npcs.select().name(""Trader Crewmember"").nearest().poll();Component shopInterface=ctx.widgets.widget(300).component(0);if(charterMember.inViewport()){if(!shopInterface.visible()&&!ctx.players.local().inMotion()){charterMember.interact(""Trade"");Condition.wait(() -> shopInterface.visible(),400,5);}else {for(int itemToBuy : itemsToBuy){Component item=itemComponent(itemToBuy);if(item!=null){if(counter!=itemsToBuy.length&&item.itemStackSize()>0&&ctx.inventory.select().count()<28){item.interact(""Buy 10"");}if(item.itemStackSize()<1&&counter<itemsToBuy.length){counter++;}}}if(counter==itemsToBuy.length){ctx.widgets.close(ctx.widgets.widget(300),Options.getInstance().getUseEscape());hopWorld();counter=0;}}}else {ctx.camera.turnTo(charterMember);}}"
3013	"@Override public void handleResult(String data){List<RoomListItem> listOfPlayerNames=new ArrayList<>();try{JSONObject result=new JSONObject(data);if(result.getInt(""hasStarted"")==1){gameReady(null);return ;}JSONArray players=result.getJSONArray(""players"");for(int i=0;i<players.length();i++){JSONObject player=players.getJSONObject(i);listOfPlayerNames.add(new RoomListItem(player.getString(""name""),listOfColors.get(i)));}}catch(JSONException e){e.printStackTrace();}ListView lobbyList=(ListView)findViewById(R.id.room_list);RoomCustomAdapter adapter=new RoomCustomAdapter(this,listOfPlayerNames);lobbyList.setAdapter(adapter);}"
3014	"@Override Number getValue(Object value){if(!(value instanceof Number)){return null;}return Short.valueOf(((Number)value).shortValue());}"
3015	"@Override public void mouseClicked(MouseEvent e){if(scene!=null){for(GameEventListener el : listeners){if(el instanceof GameMouseListener){((GameMouseListener)el).mouseClick(e,new Point((int)(e.getX()*((float)gpu.getResX()/gpu.getWidth()))-(gpu.getResX()/2),(int)(e.getY()*((float)gpu.getResY()/gpu.getHeight()))-(gpu.getResY()/2)));}}for(Node node : scene.getGUI()){Rectangle r=new Rectangle(node.getX()-(node.getWidth()/2),node.getY()-(node.getHeight()/2),node.getWidth(),node.getHeight());mousePoint.setLocation((int)(e.getX()*((float)gpu.getResX()/gpu.getWidth()))-(gpu.getResX()/2),(int)(e.getY()*((float)gpu.getResY()/gpu.getHeight()))-(gpu.getResY()/2));if(r.contains(mousePoint)){if(node instanceof Button){((ButtonControl)node.getControl()).buttonPerform(e);}}}}}"
3016	"private boolean canScrollDown(int deltaY){int firstPosition=this.firstPosition;int firstTop=getChildAt(0).getTop();return (firstPosition==0&&firstTop>=getPaddingTop()&&deltaY<=0);}"
3017	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Intent intent=getIntent();if(Intent.ACTION_SEARCH.equals(intent.getAction())){query=intent.getStringExtra(SearchManager.QUERY);}RecyclerContainerSearchBinding binding=DataBindingUtil.setContentView(this,R.layout.recycler_container_search);RecyclerView recyclerView=binding.recyclerContainer;recyclerView.setLayoutManager(new LinearLayoutManager(this));SearchViewModel viewModel=new SearchViewModel(CountryRepository.getInstance());if(query!=null){viewModel.start(query);}getSupportActionBar().setDisplayHomeAsUpEnabled(true);binding.setViewmodel(viewModel); final CountriesByRegionAdapter adapter=new CountriesByRegionAdapter(new ArrayList<Country>(0));recyclerView.setAdapter(adapter);ItemClickSupport.addTo(recyclerView).setOnItemClickListener(new ItemClickSupport.OnItemClickListener(){  @Override public void onItemClicked(  RecyclerView recyclerView,  int position,  View v){    if (position != RecyclerView.NO_POSITION) {      Intent startIntent=new Intent(SearchCountryActivity.this,DetailCountryActivity.class);      String countryName=adapter.getCountryName(position);      startIntent.putExtra(COUNTRY_NAME,countryName);      startActivity(startIntent);    }  }});}"
3018	"@Override public void menuSelected(MenuEvent e){MainPanel.getInstance().defaultTool();enableMenuItems(true);saveMenuItem.setEnabled(!Scene.isInternalFile()); final boolean inactive=!PlayControl.active;replayFolderMenuItem.setEnabled(inactive); final File lastFolder=DesignReplay.getInstance().getLastFolder();replayLastFolderMenuItem.setEnabled(lastFolder!=null&&inactive);replayLastFolderMenuItem.setText(lastFolder!=null?""Replay Last Folder: ""+lastFolder:""Replay Last Folder"");replayControlsMenu.setEnabled(!inactive);analyzeFolderMenuItem.setEnabled(inactive);if(!recentFileMenuItems.isEmpty()){for(JComponent x : recentFileMenuItems){fileMenu.remove(x);}} final String[] recentFiles=FileChooser.getInstance().getRecentFiles();if(recentFiles!=null){ final int n=recentFiles.length;if(n>0){for(int i=0;i<n;i++){ final JMenuItem x=new JMenuItem((i+1)+""  ""+Util.getFileName(recentFiles[i]));x.setToolTipText(recentFiles[i]); final File rf=new File(recentFiles[i]);x.addActionListener(new ActionListener(){  @Override public void actionPerformed(  final ActionEvent e){    boolean ok=false;    if (Scene.getInstance().isEdited()) {      final int save=JOptionPane.showConfirmDialog(MainFrame.this,""Do you want to save changes?"",""Save"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);      if (save == JOptionPane.YES_OPTION) {        save();        if (!Scene.getInstance().isEdited()) {          ok=true;        }      } else       if (save != JOptionPane.CANCEL_OPTION) {        ok=true;      }    } else {      ok=true;    }    if (ok) {      SceneManager.getTaskManager().update(new Callable<Object>(){        @Override public Object call(){          try {            Scene.open(rf.toURI().toURL());            updateTitleBar();            FileChooser.getInstance().rememberFile(rf.getPath());          } catch (          final Throwable err) {            Util.reportError(err,rf.getAbsolutePath());          }          return null;        }      });    }  }});fileMenu.insert(x,fileMenuItemCount+i);recentFileMenuItems.add(x);} final JSeparator s=new JSeparator();fileMenu.add(s,fileMenuItemCount+n);recentFileMenuItems.add(s);}}}"
3019	"@Override public void ConfigurationUpdated(BindingConfiguration updatedConfiguration){if(updatedConfiguration==null){logger.warn(""Omitting updated configuration due to null value."");return ;}if(this.bindingConfig!=null&&this.bindingConfig.getRefreshInterval()!=updatedConfiguration.getRefreshInterval()){if(this.pollingJob!=null){this.pollingJob.cancel(false);}}this.bindingConfig=updatedConfiguration;this.initScheduledRefresh();}"
3020	"public ArrayList<MarkerOptions> addMarkers(GoogleMap googleMap,ArrayList<MarkerOptions> markerList){if(googleMap!=null){googleMap.clear();if(markerList!=null){for(MarkerOptions markerOptions : markerList){googleMap.addMarker(markerOptions);}}}return markerList;}"
3021	"@Override public boolean onQueryTextChange(String newText){if(!newText.equals("""")){mMusicResultsList.setVisibility(View.VISIBLE);mainHandler.removeCallbacks(runnable);runnable=new Runnable(){  @Override public void run(){    Log.d(TAG,""text changed trigger: "" + newText);    mActionListener.search(newText);  }};mainHandler.postDelayed(runnable,150);}return true;}"
3022	"void updateInstance(T instance){T oldInstance=this.instance.getAndSet(Preconditions.checkNotNull(instance,""instance""));if(oldInstance!=null){oldInstance.close();}}"
3023	"@Callback(doc=""function():number; Get the amount of pearls left"") public Object[] getPearls(Context c,Arguments a){int ret=0;InventoryHelper inventoryHelper=tile.getInventoryHelper();for(int i=0;i<inventoryHelper.getCount();++i){ItemStack stack=inventoryHelper.getStackInSlot(i);if(stack!=null&&Items.ENDER_PEARL.equals(stack.getItem())&&stack.stackSize>0){ret+=stack.stackSize;}}return new Object{ret};}"
3024	"@Override public void onPressed(MouseEvent e){_pressX=e.getX();_pressY=e.getY();Vector containedUMLObjects=_canvas.getContainedUMLObjects(_pressX,_pressY);if(!containedUMLObjects.isEmpty()){_selectedUMLObject=(UMLObject)containedUMLObjects.get(0);}_canvas.repaint();}"
3025	"@Override protected void setupLabel(TextView label){label.setText(isSocialLogin?R.string.enter_wpcom_password_google:R.string.enter_wpcom_password);}"
3026	"public boolean containsEvent(CalendarDay date){SimpleDateFormat sdf=new SimpleDateFormat(""EEE, MMMM dd, yyyy"",Locale.US);Calendar c=Calendar.getInstance();c.set(date.getYear(),date.getMonth(),date.getDay());String dateStr=sdf.format(c.getTime());String query=""SELECT * FROM ""+DoorboardContract.ScheduleEntry.TABLE_NAME+"" WHERE ""+DoorboardContract.ScheduleEntry.COLUMN_NAME_DATE+"" = '""+dateStr+""'"";Cursor cursor=this.getReadableDatabase().rawQuery(query,null);return cursor.getCount()>0;}"
3027	"private void doAddClearCase(){if(validateRequiredFields(""addClearCase"")){setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));if(isFileObjectSelected()){if(!fileUtils.isExcelFileOpen()){DefaultTableModel model=(DefaultTableModel)tFileObjectList.getModel();int rowCount=model.getRowCount();fileObjectsSelected.clear();for(int i=rowCount-1;i>=0;i--){if(((Boolean)model.getValueAt(i,0)).booleanValue()){for(FileObject fileObject : fileObjects){if(model.getValueAt(i,2).toString().equals(fileObject.getCcFileName())&&model.getValueAt(i,6).toString().equals(fileObject.getFileType())&&model.getValueAt(i,1).toString().equals(fileObject.getLanguage())){fileObjectsSelected.add(fileObject);System.out.println(fileObject.getCcFileName());}}}}returnValue=new Vector();utils.setSelectedRowCount(fileObjectsSelected.size());utils.setSelectedProcessedRowCount(0);JTextArea msgLabel; final JProgressBar progressBar; final int MAXIMUM=100;JPanel panel;progressBar=new JProgressBar(0,MAXIMUM);progressBar.setStringPainted(true);msgLabel=new JTextArea(""Processing ""+utils.getSelectedRowCount()+"" Objects"");msgLabel.setEditable(false);panel=new JPanel(new BorderLayout(5,5));panel.add(msgLabel,BorderLayout.PAGE_START);panel.add(progressBar,BorderLayout.CENTER);panel.setBorder(BorderFactory.createEmptyBorder(11,11,11,11)); final JDialog dialog=new JDialog();dialog.getContentPane().add(panel);dialog.setResizable(false);dialog.pack();dialog.setSize(500,dialog.getHeight());dialog.setLocationRelativeTo(null);dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);dialog.setAlwaysOnTop(false);dialog.setVisible(true);msgLabel.setBackground(panel.getBackground());SwingWorker worker=new SwingWorker(){  @Override protected void done(){    dialog.dispose();    if (returnValue.get(0).equals(""S"")) {      cbFileCreateNewFile.setSelected(false);      JOptionPane.showMessageDialog(null,""Clearcase operation succedded! \n \n Check "" + helper.getCcExcelFileName() + "" file! \n \n Succes File Count: ""+ returnValue.get(1).toString()+ ""\n Error File Count: ""+ returnValue.get(2).toString());    } else {      JOptionPane.showMessageDialog(null,""Some error occurred! \n \n Check "" + helper.getCcExcelFileName() + "" file! \n \n Succes File Count: ""+ returnValue.get(1).toString()+ ""\n Error File Count: ""+ returnValue.get(2).toString());    }  }  @Override protected void process(  List chunks){    int i=Integer.parseInt(chunks.get(chunks.size() - 1).toString());    progressBar.setValue(i);  }  @Override protected Object doInBackground() throws Exception {    int progress=0;    publish(progress);    new Thread(){      public void run(){        for (int i=0; utils.getSelectedProcessedRowCount() < utils.getSelectedRowCount(); i++) {          try {            Thread.sleep(500);          } catch (          InterruptedException e) {            e.printStackTrace();          }          publish((int)Math.round(utils.getSelectedProcessedRowCount() * 100.0 / utils.getSelectedRowCount()));        }      }    }.start();    try {      Thread.sleep(1000);      returnValue=utils.addClearCase(txtFileLocalDrive.getText(),txtFileComment.getText(),cbFileCreateNewFile.isSelected(),fileObjectsSelected);    } catch (    InterruptedException e) {      e.printStackTrace();    }    return null;  }};worker.execute();}else {JOptionPane.showMessageDialog(null,""Please close ""+helper.getCcExcelFileName()+"" file!"");}}else {JOptionPane.showMessageDialog(null,""Select at least one file!"");}setCursor(Cursor.getDefaultCursor());}else {JOptionPane.showMessageDialog(null,""Fill the required fields!"");}}"
3028	"public boolean equals(Object o){return o instanceof Plot&&this.compareTo((Plot)o)==0;}"
3029	"public void negotiateFormats(MediaDescriptionField media){this.offeredFormats.clean();for(int payloadType : media.getPayloadTypes()){RTPFormat format=AVProfile.getFormat(payloadType,AVProfile.AUDIO);if(format!=null){this.offeredFormats.add(format);}}this.negotiatedFormats.clean();this.supportedFormats.intersection(this.offeredFormats,this.negotiatedFormats);setFormats(this.negotiatedFormats);this.negotiated=true;}"
3030	"public void approveRequest(){boolean selected=true;if(teamRequestsTableView.getSelectionModel().isEmpty()){Alert alert=new Alert(Alert.AlertType.INFORMATION);alert.setTitle(""Team assign error"");alert.setHeaderText(""No selection"");alert.setContentText(""You have not selected any member from the list. Please try again"");alert.showAndWait();selected=false;}if(selected){for(Student student : LoginController.studentList){if(student.getId()==teamRequestsTableView.getSelectionModel().getSelectedItem().getRequestId()){student.setTeam(LoginController.student.getTeam());try{student.deleteTeamRequest();}catch(IOException e){e.printStackTrace();}catch(ClassNotFoundException e){e.printStackTrace();}break;}}Alert alert=new Alert(Alert.AlertType.INFORMATION);alert.setTitle(""Team assign successful"");alert.setHeaderText(""Team member added"");alert.setContentText(""You have successfully added this member to your team"");alert.showAndWait();leaderBoardList.clear();membersList.clear();requestsList.clear();getLeaderBoardData();getMembersData();getRequestsData();}}"
3031	"private void callTacticRouteBehavior(IRichPedestrian pedestrian,SimulationState simulationState){boolean normalRouting=true;if(tacticalControl){normalRouting=!this.routingModel.shortCutRoute(this.perception,pedestrian);if(normalRouting&&this.routingModel.reRoutingNecessary(pedestrian,this.tacticalControl)){this.routingModel.callPedestrianBehavior(pedestrian,simulationState);}}else {if(pedestrian.getRoutingState()==null||pedestrian.getRoutingState().getNextVisit()==null||pedestrian.getPosition().distance(pedestrian.getRoutingState().getNextVisit().getGeometry().getCenter())<navigationDistanceRadius){this.routingModel.callPedestrianBehavior(pedestrian,simulationState);}}if(!routeMemory){pedestrian.getRoutingState().getVisited().clear();}}"
3032	"@Override public int onStartCommand(Intent intent,int flags,int startId){Context context=getApplicationContext();String action=intent.getAction();if(action==null){action="""";}switch (action){case ""SHARE"" :String msg=intent.getStringExtra(""losung"");String title=intent.getStringExtra(""title"");Intent it=new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);this.sendBroadcast(it);MainActivity.share(this,title,msg);break;case ""MARK"" :{long datum=intent.getLongExtra(""datum"",0);DBHandler dbHandler=DBHandler.newInstance(this);dbHandler.setMarkiert(datum);Intent intentClose=new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);this.sendBroadcast(intentClose);MainActivity.toast(this,getResources().getString(R.string.add_fav),Toast.LENGTH_SHORT);break;}default :{DBHandler dbHandler=DBHandler.newInstance(this);Calendar calendar=Calendar.getInstance();SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);boolean showNotification=settings.getBoolean(Tags.PREF_NOTIFICATION,true);if(showNotification){Losung losung=dbHandler.getLosung(calendar.getTimeInMillis());if(!losung.getLosungstext().equals(getResources().getString(R.string.no_date))){switch (settings.getInt(Tags.PREF_NOTIFICATIONART,Tags.LOSUNG_UND_LEHRTEXT_NOTIFICATION)){case Tags.LOSUNG_NOTIFICATION :showNotification(context,getResources().getString(R.string.losung),losung.getLosungstext()+System.getProperty(""line.separator"")+losung.getLosungsvers(),losung.getDatum());break;case Tags.LEHRTEXT_NOTIFICATION :showNotification(context,getResources().getString(R.string.lehrtext),losung.getLehrtext()+System.getProperty(""line.separator"")+losung.getLehrtextVers(),losung.getDatum());break;case Tags.LOSUNG_UND_LEHRTEXT_NOTIFICATION :showNotification(context,getResources().getString(R.string.losungen),losung.getLosungstext()+System.getProperty(""line.separator"")+losung.getLosungsvers()+System.getProperty(""line.separator"")+System.getProperty(""line.separator"")+losung.getLehrtext()+System.getProperty(""line.separator"")+losung.getLehrtextVers(),losung.getDatum());break;}}}boolean autoDownloadAudio=settings.getBoolean(Tags.PREF_AUDIO_AUTODOWNLOAD,false);if(autoDownloadAudio){boolean wifiConnected=Tags.isWifiConnected(getApplicationContext());boolean mobileConnected=Tags.isMobileConnected(getApplicationContext());int network=Integer.valueOf(settings.getString(Tags.PREF_AUDIO_AUTODOWNLOAD_NETWORK,""0""));if(wifiConnected){downloadAudio();}else {if(mobileConnected&&network==1){downloadAudio();}}}break;}}return START_NOT_STICKY;}"
3033	"public boolean isUnitSelected(){return unitSelected;}"
3034	"private static void alterDelegate(Object obj,Object repl){if(obj instanceof Item){RegistryDelegate<Item> delegate=((Item)obj).delegate;cpw.mods.fml.relauncher.ReflectionHelper.setPrivateValue(DelegateClass,delegate,repl,""referant"");}}"
3035	"public boolean findBook(String category,String authorNamw,String bookName,FindBookWindow window){ObservableList<Book> list=model.findBook(category,authorNamw,bookName);if(list==null){return false;}if(list.size()==0){Util.showError(Util.Err.FIND_NOTHING);return true;}else {window.updateList(list);return true;}}"
3036	"@Override public boolean isLessOrEquals(Type type,Equations equations,Abstract.SourceNode sourceNode){if(type instanceof Expression){Expression exprType=(Expression)type;InferenceVariable binding=CompareVisitor.checkIsInferVar(exprType);if(binding!=null){return equations.add(this,exprType,sourceNode,binding);}}List<DependentLink> params=new ArrayList<>();Type cod=type.getPiParameters(params,false,false);if(cod.toSorts()==null){return false;}Sort sortCod=cod.toSorts().toSort();if(sortCod==null){return false;}PiUniverseType normalized=normalize(NormalizeVisitor.Mode.NF);return CompareVisitor.compare(equations,DependentLink.Helper.toList(normalized.getPiParameters()),params,sourceNode)&&mySorts.isLessOrEquals(sortCod,equations,sourceNode);}"
3037	"private boolean triggerInterrupt(Integer bit){return (mInterpreter!=null)&&(mInterpreter.triggerInterrupt(bit));}"
3038	"public boolean isValid(CommandableTarget target){switch (this){case DROP :return target instanceof Tracker;case KEEP :return target instanceof Tracker;case ASSIGN_ATTACKTARGET :return target instanceof Predatory;case ASSIGN_JOINTARGET :return target instanceof Habitable||target instanceof Squad;case ASSIGN_COMMANDTARGET :return target.canDisplayInPopUp();case START_MINING :return target instanceof Substance;case START_DRILLING :return target instanceof Rig;case START_GARDENING :return target instanceof Fungus;case COMPLETE_SITE :return target instanceof ConstructionSite;case BUILD_RIG :return target instanceof SubstanceBuried;case JOIN_TARGET :return target instanceof Habitable||target instanceof Squad;case JOIN_SQUAD :return target instanceof Squad;case SELECT_SQUAD :return target instanceof Squad;case SHOW_SQUAD :return target instanceof Squad;case SHOW_SHUTTLE :return target instanceof Shuttle;case JOIN_SHUTTLE :return target instanceof Shuttle;case CALL_SHUTTLE :return target instanceof Shuttle;case SELECT :return target instanceof Shuttle;case ATTACK :return target instanceof Predatory;default :return false;}}"
3039	"@Override public boolean onKey(DialogInterface dialog,int keyCode,KeyEvent event){if(keyCode==KeyEvent.KEYCODE_BACK){revealShow(false);}else {if(keyCode==KeyEvent.KEYCODE_ENTER){String search=((EditText)popup.findViewById(R.id.searchText)).getText().toString();if(!search.equals("""")){doMySearch(search);revealShow(false);}else {((EditText)popup.findViewById(R.id.searchText)).setHint(""Enter a keyword or comma separated tags"");}}}return true;}"
3040	"public synchronized static BandwidthClient getInstance(){if(INSTANCE==null){Map<String,String> env=System.getenv();String userId=env.get(BandwidthConstants.BANDWIDTH_USER_ID);String apiToken=env.get(BandwidthConstants.BANDWIDTH_API_TOKEN);String apiSecret=env.get(BandwidthConstants.BANDWIDTH_API_SECRET);String apiEndpoint=env.get(BandwidthConstants.BANDWIDTH_API_ENDPOINT);String apiVersion=env.get(BandwidthConstants.BANDWIDTH_API_VERSION);if(userId==null||apiToken==null||apiSecret==null){userId=System.getProperty(BandwidthConstants.BANDWIDTH_SYSPROP_USER_ID);apiToken=System.getProperty(BandwidthConstants.BANDWIDTH_SYSPROP_API_TOKEN);apiSecret=System.getProperty(BandwidthConstants.BANDWIDTH_SYSPROP_API_SECRET);apiEndpoint=System.getProperty(BandwidthConstants.BANDWIDTH_SYSPROP_API_ENDPOINT);apiVersion=System.getProperty(BandwidthConstants.BANDWIDTH_SYSPROP_API_VERSION);}INSTANCE=new BandwidthClient(userId,apiToken,apiSecret,apiEndpoint,apiVersion);}return INSTANCE;}"
3041	"@Override public Void scan(AnnotatedTypeMirror t,AnnotationMirror qual){if(!shouldBeAnnotated(t,t==defaultableTypeVar)){return super.scan(t,qual);}switch (location){case FIELD :{if(scope!=null&&scope.getKind()==ElementKind.FIELD&&t==type){doApply(t,qual);}break;}case LOCAL_VARIABLE :{if(scope!=null&&scope.getKind()==ElementKind.LOCAL_VARIABLE&&t==type){doApply(t,qual);}break;}case RESOURCE_VARIABLE :{if(scope!=null&&scope.getKind()==ElementKind.RESOURCE_VARIABLE&&t==type){doApply(t,qual);}break;}case EXCEPTION_PARAMETER :{if(scope!=null&&scope.getKind()==ElementKind.EXCEPTION_PARAMETER&&t==type){doApply(t,qual);if(t.getKind()==TypeKind.UNION){AnnotatedUnionType aut=(AnnotatedUnionType)t;for(AnnotatedDeclaredType anno : aut.getAlternatives()){doApply(anno,qual);}}}break;}case PARAMETERS :{if(scope!=null&&scope.getKind()==ElementKind.PARAMETER&&t==type){doApply(t,qual);}else {if((scope.getKind()==ElementKind.METHOD||scope.getKind()==ElementKind.CONSTRUCTOR)&&t.getKind()==TypeKind.EXECUTABLE&&t==type){for(AnnotatedTypeMirror atm : ((AnnotatedExecutableType)t).getParameterTypes()){if(shouldBeAnnotated(atm,false)){doApply(atm,qual);}}}}break;}case RECEIVERS :{if(scope!=null&&scope.getKind()==ElementKind.PARAMETER&&t==type&&""this"".equals(scope.getSimpleName())){doApply(t,qual);}else {if(scope!=null&&(scope.getKind()==ElementKind.METHOD)&&t.getKind()==TypeKind.EXECUTABLE&&t==type){ final AnnotatedDeclaredType receiver=((AnnotatedExecutableType)t).getReceiverType();if(shouldBeAnnotated(receiver,false)){doApply(receiver,qual);}}}break;}case RETURNS :{if(scope!=null&&scope.getKind()==ElementKind.METHOD&&t.getKind()==TypeKind.EXECUTABLE&&t==type){ final AnnotatedTypeMirror returnType=((AnnotatedExecutableType)t).getReturnType();if(shouldBeAnnotated(returnType,false)){doApply(returnType,qual);}}break;}case IMPLICIT_LOWER_BOUNDS :{if(isLowerBound&&boundType.isOneOf(BoundType.UNBOUND,BoundType.UPPER,BoundType.UNKNOWN)){doApply(t,qual);}break;}case EXPLICIT_LOWER_BOUNDS :{if(isLowerBound&&boundType.isOneOf(BoundType.LOWER)){doApply(t,qual);}break;}case LOWER_BOUNDS :{if(isLowerBound){doApply(t,qual);}break;}case IMPLICIT_UPPER_BOUNDS :{if(isUpperBound&&boundType.isOneOf(BoundType.UNBOUND,BoundType.LOWER)){doApply(t,qual);}break;}case EXPLICIT_UPPER_BOUNDS :{if(isUpperBound&&boundType.isOneOf(BoundType.UPPER,BoundType.UNKNOWN)){doApply(t,qual);}break;}case UPPER_BOUNDS :{if(this.isUpperBound){doApply(t,qual);}break;}case OTHERWISE :case ALL :{doApply(t,qual);break;}default :{ErrorReporter.errorAbort(""QualifierDefaults.DefaultApplierElement: unhandled location: ""+location);return null;}}return super.scan(t,qual);}"
3042	"public void setError(boolean error){isError=error;}"
3043	"public static FileAnalyzer readFile(String name){if(name==null){return null;}PriorityQueue<WordTotal> commonWords=new PriorityQueue<WordTotal>();int numOfLines=0;int numOfBlankLines=0;int numOfSpaces=0;int numOfWords=0;int averageCharsPerLine=0;int averageWordLength=0;try{BufferedReader bf=new BufferedReader(new FileReader(new File(name)));String line;HashMap<String,Integer> wordCount=new HashMap<String,Integer>();while((line=bf.readLine())!=null){if(line.length()!=0){averageCharsPerLine+=line.length();int leftP=-1;for(int i=0;i<line.length();i++){if(line.charAt(i)==' '){numOfSpaces++;}if(leftP==-1&&Character.isLetter(line.charAt(i))){leftP=i;}else {if((!Character.isLetter(line.charAt(i))||i==line.length()-1)&&leftP!=-1){String toAdd;if(i==line.length()-1&&Character.isLetter(line.charAt(i))){toAdd=line.substring(leftP,i+1).toLowerCase();}else {toAdd=line.substring(leftP,i).toLowerCase();}numOfWords++;averageWordLength+=toAdd.length();if(wordCount.containsKey(toAdd)){wordCount.put(toAdd,wordCount.get(toAdd)+1);}else {wordCount.put(toAdd,1);}leftP=-1;}}}}else {numOfBlankLines++;}numOfLines++;}bf.close();if(numOfLines!=0){averageCharsPerLine/=numOfLines;}if(numOfWords!=0){averageWordLength/=numOfWords;}for(String s : wordCount.keySet()){WordTotal w=new WordTotal(s,wordCount.get(s));commonWords.offer(w);}}catch(FileNotFoundException e){System.out.println(""File was invalid/not found"");return null;}catch(IOException e){return null;}return new FileAnalyzer(numOfLines,numOfBlankLines,numOfSpaces,numOfWords,averageCharsPerLine,averageWordLength,commonWords,name);}"
3044	"public boolean requireOrigin(){return mRequireOrigin;}"
3045	"private static boolean isOptionalProperty(Class beanClass,PropertyDescriptor beanProp){Field field=getField(beanClass,beanProp.getName());return (field.getAnnotationsByType(Optional.class).length>0);}"
3046	"public void onForward(Node me,ScampMessage forwarded){if(forwarded.type!=ScampMessage.Type.ForwardSubscription){throw new RuntimeException(""wrong message type"");}this.out.updateTimeouts();if(!this.contains(forwarded.subscriber.node)&&p()){this.out.add(forwarded.subscriber); final ScampMessage accept=ScampMessage.accepted(me);this.send(me,forwarded.subscriber.node,accept);}else {if(forwarded.ttl>0){if(this.out.size()>0){Node destination=this.out.getRandom();if(destination.getID()==forwarded.subscriber.node.getID()){if(this.out.size()>1){while(destination.getID()==forwarded.subscriber.node.getID()){destination=this.out.getRandom();}this.send(me,destination,ScampMessage.forward(me,forwarded));}}else {this.send(me,destination,ScampMessage.forward(me,forwarded));}}else {System.err.println(""Forwarding is starving.."");}}}}"
3047	"@Transactional @Override public void save(ActionEntity actionEntity){if(!isActionExist(actionEntity)){actionRepository.save(actionEntity);}else {System.out.println(""Action already exists in database!!!"");}}"
3048	"public Set<Tsrow> refreshTsrList(Set<Tsrow> tsrList,TimesheetId id){int remainder=0;if(tsrList!=null){return tsrList;}tsrList=tManager.find(id).getTsrow();if(tsrList.size()<5){int size=tsrList.size();remainder=5-size;for(int i=0;i<remainder;i++){Tsrow row=new Tsrow();row.setTsrEmpId(emp.getEmpId());tsrList.add(row);}}return tsrList;}"
3049	"protected boolean isValidToSendGUIPacket(EntityPlayer player){return player instanceof EntityPlayerMP&&player.openContainer instanceof ContainerDummy&&((ContainerDummy)player.openContainer).tile==this;}"
3050	"@Override public boolean equals(Object o){return o!=null&&o instanceof GenerousValidator;}"
3051	"public void skipToken(String token){while(!nextToken().equals(token)){;}}"
3052	"public boolean pushNotificationTo(String receiverUid,String alertBody,String category,String uid){User user=userDao.get(uid);if(user==null){return false;}if(receiverUid.equals(""*"")){for(User reveiver : userDao.findByGroup(user.getGroup())){if(reveiver==user){continue;}apnsComponent.push(reveiver.getDeviceToken(),alertBody,category);}}else {User receiver=userDao.getByUserIdInGroup(receiverUid,user.getGroup());if(receiver==null){return false;}apnsComponent.push(receiver.getDeviceToken(),alertBody,category);}return true;}"
3053	"@SuppressWarnings(""unused"") public String[] getUserRoleList(String userName) throws APIKeyMgtException{int tenantId=PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId();if(tenantId!=MultitenantConstants.SUPER_TENANT_ID){return null;}else {try{int userTenantId=IdentityTenantUtil.getTenantIdOfUser(userName);UserStoreManager userStoreManager=APIKeyMgtDataHolder.getRealmService().getTenantUserRealm(userTenantId).getUserStoreManager();return userStoreManager.getRoleListOfUser(MultitenantUtils.getTenantAwareUsername(userName));}catch(UserStoreException e){throw new APIKeyMgtException(""UserStore exception while trying the get the user role list of the ""+userName,e);}catch(IdentityRuntimeException e){throw new APIKeyMgtException(""User ""+userName+"" is from a invalid domain"",e);}}}"
3054	"@Override public void beforeExecute(){System.out.println(""Starting loader"");if(queue.waitingSize()>WAITING_THRESHOLD_PAUSE){executor.pause();}}"
3055	"@Override protected void backend(DataStore ds){DataBlock calib=ds.getXthLoadedBlock(1);sensorOutIdx=ds.getXthFullyLoadedIndex(1);if(sensorOutIdx==0){sensorOutIdx=ds.getXthFullyLoadedIndex(2);}DataBlock sensorOut=ds.getBlock(sensorOutIdx);fitResponse=new InstrumentResponse(ds.getResponse(sensorOutIdx));dataNames.add(calib.getName());dataNames.add(sensorOut.getName());dataNames.add(fitResponse.getName());initialPoles=new ArrayList<Complex>(fitResponse.getPoles());initialZeros=new ArrayList<Complex>(fitResponse.getZeros());FFTResult numeratorPSD,denominatorPSD;if(lowFreq){numeratorPSD=FFTResult.spectralCalcMultitaper(sensorOut,calib);denominatorPSD=FFTResult.spectralCalcMultitaper(calib,calib);}else {numeratorPSD=FFTResult.spectralCalc(sensorOut,calib);denominatorPSD=FFTResult.spectralCalc(calib,calib);}freqs=numeratorPSD.getFreqs();nyquist=sensorOut.getSampleRate()/2.0;nyquist+=0.5;double minFreq,maxFreq;if(lowFreq){minFreq=0.001;maxFreq=0.05;}else {minFreq=0.2;maxFreq=0.8*nyquist;}List<Double> freqList=new LinkedList<Double>();int startIdx=-1;for(int i=0;i<freqs.length;++i){if(freqs[i]<minFreq){continue;}else {if(startIdx<0){startIdx=i;}}if(freqs[i]>maxFreq){break;}freqList.add(freqs[i]);}double zeroTarget;if(lowFreq){zeroTarget=0.02;}else {zeroTarget=1.0;}int len=freqList.size();freqs=new double[len];int endIdx=startIdx+len;Complex[] numeratorPSDVals=Arrays.copyOfRange(numeratorPSD.getFFT(),startIdx,endIdx);Complex[] denominatorPSDVals=Arrays.copyOfRange(denominatorPSD.getFFT(),startIdx,endIdx);for(int i=0;i<len;++i){freqs[i]=freqList.get(i);if(freqs[i]==zeroTarget||(freqs[i]>zeroTarget&&freqs[i-1]<zeroTarget)){normalIdx=i;}}Complex[] appResponse=fitResponse.applyResponseToInput(freqs);for(int i=0;i<appResponse.length;++i){Complex scaleFactor=new Complex(0.0,NumericUtils.TAU*freqs[i]);appResponse[i]=appResponse[i].divide(scaleFactor);}Complex[] estResponse=new Complex[len];for(int i=0;i<estResponse.length;++i){Complex numer=numeratorPSDVals[i];Complex denom=denominatorPSDVals[i];estResponse[i]=numer.divide(denom);Complex scaleFactor=new Complex(0.0,NumericUtils.TAU*freqs[i]);estResponse[i]=estResponse[i].multiply(scaleFactor);}String name=sensorOut.getName();XYSeries calcMag=new XYSeries(""Calc. resp. (""+name+"") magnitude"");XYSeries calcArg=new XYSeries(""Calc. resp. (""+name+"") phase"");Complex scaleValue=estResponse[normalIdx];double subtractBy=10*Math.log10(scaleValue.abs());double rotateBy=NumericUtils.atanc(scaleValue);double[] observedResult=new double[2*estResponse.length];double phiPrev=0.0;double[] obsdAmps=new double[estResponse.length];for(int i=0;i<estResponse.length;++i){int argIdx=estResponse.length+i;Complex estValue=estResponse[i];double estValMag=estValue.abs();double phi=NumericUtils.atanc(estValue);phi-=rotateBy;phi=NumericUtils.unwrap(phi,phiPrev);phiPrev=phi;phi=Math.toDegrees(phi);if(Double.isNaN(estValMag)){observedResult[i]=0;observedResult[argIdx]=0;}else {obsdAmps[i]=estValMag/scaleValue.abs();observedResult[i]=10*Math.log10(estValMag);observedResult[i]-=subtractBy;double argument=phi;observedResult[argIdx]=argument;}double xAxis;if(freqSpace){xAxis=freqs[i];}else {xAxis=1.0/freqs[i];}calcMag.add(xAxis,observedResult[i]);calcArg.add(xAxis,observedResult[argIdx]);}fireStateChange(""Getting weighting...."");maxArgWeight=1.0;maxMagWeight=0.0;Complex weightScaler=estResponse[normalIdx];double subtractWeight=10*Math.log10(weightScaler.abs());double rotateWeight=NumericUtils.atanc(weightScaler);for(int i=0;i<estResponse.length;++i){double magCandidate=10*Math.log10(estResponse[i].abs());magCandidate-=subtractWeight;double phiCandidate=Math.abs(NumericUtils.atanc(estResponse[i]));phiCandidate-=rotateWeight;if(magCandidate>maxMagWeight){maxMagWeight=magCandidate;}if(phiCandidate>maxArgWeight){maxArgWeight=phiCandidate;}}fireStateChange(""Setting weight matrix..."");maxMagWeight=1000.0/maxMagWeight;if(maxArgWeight!=0.0){maxArgWeight=1.0/maxArgWeight;}double[] weights=new double[observedResult.length];for(int i=0;i<estResponse.length;++i){int argIdx=i+estResponse.length;double denom;if(!lowFreq){denom=100.0;if(freqs[i]>10.0){denom*=Math.pow(freqs[i],2)/100.0;}else {if(freqs[i]>1.0){denom=freqs[i];}}}else {if(freqs[i]<0.01){denom=freqs[i];}else {denom=0.01;}}weights[i]=maxMagWeight/denom;weights[argIdx]=maxArgWeight/denom;}DiagonalMatrix weightMat=new DiagonalMatrix(weights);fireStateChange(""Getting estimate and setting up solver..."");RealVector initialGuess,initialPoleGuess,initialZeroGuess;initialPoleGuess=fitResponse.polesToVector(lowFreq,nyquist);initialZeroGuess=fitResponse.zerosToVector(lowFreq,nyquist);numZeros=initialZeroGuess.getDimension();initialGuess=initialZeroGuess.append(initialPoleGuess);RealVector obsResVector=MatrixUtils.createRealVector(observedResult);MultivariateJacobianFunction jacobian=new MultivariateJacobianFunction(){  int numIterations=0;  public Pair<RealVector,RealMatrix> value(  final RealVector point){    ++numIterations;    fireStateChange(""Fitting, iteration count "" + numIterations);    Pair<RealVector,RealMatrix> pair=jacobian(point);    return pair;  }};ConvergenceChecker<LeastSquaresProblem.Evaluation> svc=new EvaluationRmsChecker(1.0E-14,1.0E-14);LeastSquaresOptimizer optimizer=new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0E-14).withParameterRelativeTolerance(1.0E-14);name=fitResponse.getName();XYSeries initMag=new XYSeries(""Initial param (""+name+"") magnitude"");XYSeries initArg=new XYSeries(""Initial param (""+name+"") phase"");XYSeries fitMag=new XYSeries(""Fit resp. magnitude"");XYSeries fitArg=new XYSeries(""Fit resp. phase"");LeastSquaresProblem lsp=new LeastSquaresBuilder().start(initialGuess).target(obsResVector).model(jacobian).weight(weightMat).parameterValidator(this).lazyEvaluation(false).maxEvaluations(Integer.MAX_VALUE).maxIterations(Integer.MAX_VALUE).checker(svc).build();fireStateChange(""Built least-squares problem; evaluating intial guess..."");LeastSquaresProblem.Evaluation initEval=lsp.evaluate(initialGuess);initialResidual=initEval.getCost();fireStateChange(""Got initial evaluation; running solver..."");double[] initialValues=jacobian.value(initialGuess).getFirst().toArray();RealVector finalResultVector;boolean dontSolve=getSolverState();if(!dontSolve){LeastSquaresOptimizer.Optimum optimum=optimizer.optimize(lsp);finalResultVector=optimum.getPoint();numIterations=optimum.getIterations();}else {finalResultVector=initialGuess;}LeastSquaresProblem.Evaluation optimum=lsp.evaluate(finalResultVector);fitResidual=optimum.getCost();double[] fitParams=optimum.getPoint().toArray();double[] fitValues=jacobian.value(optimum.getPoint()).getFirst().toArray();XYSeries initResidMag=new XYSeries(""Amplitude of init. residual"");XYSeries initResidPhase=new XYSeries(""Phase of init. residual"");XYSeries fitResidMag=new XYSeries(""Amplitude of fit residual"");XYSeries fitResidPhase=new XYSeries(""Phase of fit residual"");fitResponse=fitResponse.buildResponseFromFitVector(fitParams,lowFreq,numZeros);fitPoles=fitResponse.getPoles();fitZeros=fitResponse.getZeros();fireStateChange(""Compiling data..."");for(int i=0;i<freqs.length;++i){double xValue;if(freqSpace){xValue=freqs[i];}else {xValue=1.0/freqs[i];}int argIdx=freqs.length+i;initMag.add(xValue,initialValues[i]);initArg.add(xValue,initialValues[argIdx]);fitMag.add(xValue,fitValues[i]);fitArg.add(xValue,fitValues[argIdx]);double initAmpNumer=Math.pow(10,initialValues[i]/10);double fitAmpNumer=Math.pow(10,fitValues[i]/10);double obsAmpDbl=obsdAmps[i];if(obsAmpDbl==0.0){obsAmpDbl=Double.MIN_VALUE;}double errInitMag=100.0*(initAmpNumer-obsAmpDbl)/obsAmpDbl;double errFitMag=100.0*(fitAmpNumer-obsAmpDbl)/obsAmpDbl;initResidMag.add(xValue,errInitMag);fitResidMag.add(xValue,errFitMag);double observedPhase=observedResult[argIdx];initResidPhase.add(xValue,initialValues[argIdx]-observedPhase);fitResidPhase.add(xValue,fitValues[argIdx]-observedPhase);}XYSeriesCollection xysc=new XYSeriesCollection();xysc.addSeries(initMag);xysc.addSeries(calcMag);if(!dontSolve){xysc.addSeries(fitMag);}xySeriesData.add(xysc);xysc=new XYSeriesCollection();xysc.addSeries(initArg);xysc.addSeries(calcArg);if(!dontSolve){xysc.addSeries(fitArg);}xySeriesData.add(xysc);xysc=new XYSeriesCollection();xysc.addSeries(initResidMag);if(!dontSolve){xysc.addSeries(fitResidMag);}xySeriesData.add(xysc);xysc=new XYSeriesCollection();xysc.addSeries(initResidPhase);if(!dontSolve){xysc.addSeries(fitResidPhase);}xySeriesData.add(xysc);}"
3056	"@Override public boolean equals(Object obj){if(obj instanceof CharRange){return CHAR_RANGE_COMPARATOR.compare(this,(CharRange)obj)==0;}else {return false;}}"
3057	"public List<String> getWeaponTooltip(ToolCore tool,NBTTagCompound toolTag,float damageModifier){List<String> toolTip=new ArrayList<String>();int damage=ToolHelper.getDamage(tool,toolTag,damageModifier);float stoneboundDamage=ToolHelper.hasDurability(tool)?ToolHelper.getShoddinessDamageBonus(tool,toolTag):0.0;float maxStoneboundDamage=ToolHelper.hasDurability(tool)?ToolHelper.getMaxShoddinessDamageBonus(tool,toolTag):0.0;int smiteDamageRange[]=ToolHelper.getSmiteDamageRange(tool,toolTag);int antiSpiderDamageRange[]=ToolHelper.getAntiSpiderDamageRange(tool,toolTag);int burnDuration=ToolHelper.getBurnDuration(tool,toolTag);float chanceToBehead=ToolHelper.getChanceToBehead(tool,toolTag);float shoddiness=ToolHelper.getStonebound(toolTag);String shoddinessType=StringHelper.getShoddinessTypeString(shoddiness);String shoddinessCode=StringHelper.getShoddinessTypeCode(shoddiness);String bonusOrLossCode=stoneboundDamage>0?""bonus"":""loss"";float knockback=ToolHelper.getKnockback(tool,toolTag);int sprintDamage=ToolHelper.hasDurability(tool)?ToolHelper.getSprintDamage(tool,toolTag):damage;String damageColor=ColorHelper.getRelativeColor(ToolHelper.getRawDamage(tool,toolTag)+stoneboundDamage,ToolPartHelper.minAttack,ToolPartHelper.maxAttack);toolTip.add(StringHelper.getLocalizedString(""gui.toolstation3"")+damageColor+StringHelper.getDamageString(damage));if(sprintDamage!=damage){String sprintDamageColor=ColorHelper.getRelativeColor(ToolHelper.getRawDamage(tool,toolTag)+stoneboundDamage+(sprintDamage-damage),ToolPartHelper.minAttack,ToolPartHelper.maxAttack);toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocal(""tictooltips.tool.sprint.damage"")+sprintDamageColor+StringHelper.getDamageString(sprintDamage));}if(stoneboundDamage!=0){EnumChatFormatting textColor=stoneboundDamage>0?EnumChatFormatting.DARK_GREEN:EnumChatFormatting.DARK_RED;String bonusOrLoss=(stoneboundDamage>0?StringHelper.getLocalizedString(""gui.toolstation4""):StringHelper.getLocalizedString(""gui.toolstation5""))+textColor;String shoddinessBonusOrLossTitle=StatCollector.translateToLocalFormatted(""tictooltips.tool.""+shoddinessCode+"".""+bonusOrLossCode,shoddinessType,bonusOrLoss);String maxString="""";if(stoneboundDamage==maxStoneboundDamage){bonusOrLoss+=EnumChatFormatting.BOLD;}else {maxString=EnumChatFormatting.RESET+"" ""+EnumChatFormatting.DARK_GRAY+""[""+StatCollector.translateToLocal(""tictooltips.maximum"")+"": ""+StringHelper.getDamageNumberString((int)maxStoneboundDamage)+EnumChatFormatting.RESET+EnumChatFormatting.DARK_GRAY+""]"";}toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+shoddinessBonusOrLossTitle+StringHelper.getDamageString((int)stoneboundDamage)+maxString);}else {if(maxStoneboundDamage!=0&&stoneboundDamage!=maxStoneboundDamage){String bonusOrLoss=maxStoneboundDamage>0?StringHelper.getLocalizedString(""gui.toolstation4"")+EnumChatFormatting.DARK_GREEN:StringHelper.getLocalizedString(""gui.toolstation5"")+EnumChatFormatting.DARK_RED;String maxShoddinessBonusOrLossTitle=StatCollector.translateToLocalFormatted(""tictooltips.tool.max.""+shoddinessCode+"".""+bonusOrLossCode,StatCollector.translateToLocal(""tictooltips.maximum""),shoddinessType,bonusOrLoss);toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+maxShoddinessBonusOrLossTitle+StringHelper.getDamageString((int)maxStoneboundDamage));}}if(smiteDamageRange[1]!=0&&smiteDamageRange[0]!=0){EnumChatFormatting textColor=smiteDamageRange[0]>=0?EnumChatFormatting.DARK_GREEN:EnumChatFormatting.DARK_RED;String bonusOrLoss=(smiteDamageRange[0]>=0?StringHelper.getLocalizedString(""gui.toolstation4""):StringHelper.getLocalizedString(""gui.toolstation5""));bonusOrLoss=bonusOrLoss.substring(0,bonusOrLoss.length()-2);toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocalFormatted(""tictooltips.tool.bonus.vs.undead"",bonusOrLoss)+textColor+StringHelper.getDamageNumberString(smiteDamageRange[0])+""-""+StringHelper.getDamageString(smiteDamageRange[1]));}if(antiSpiderDamageRange[1]!=0&&antiSpiderDamageRange[0]!=0){EnumChatFormatting textColor=antiSpiderDamageRange[0]>=0?EnumChatFormatting.DARK_GREEN:EnumChatFormatting.DARK_RED;String bonusOrLoss=(antiSpiderDamageRange[0]>=0?StringHelper.getLocalizedString(""gui.toolstation4""):StringHelper.getLocalizedString(""gui.toolstation5""));bonusOrLoss=bonusOrLoss.substring(0,bonusOrLoss.length()-2);toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocalFormatted(""tictooltips.tool.bonus.vs.spiders"",bonusOrLoss)+textColor+StringHelper.getDamageNumberString(antiSpiderDamageRange[0])+""-""+StringHelper.getDamageString(antiSpiderDamageRange[1]));}if(burnDuration!=0){EnumChatFormatting textColor=EnumChatFormatting.DARK_RED;toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocal(""tictooltips.tool.burn.duration"")+textColor+StringHelper.getDurationString(burnDuration));}if(chanceToBehead!=0){toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocal(""tictooltips.tool.chance.to.behead"")+ColorHelper.getRelativeColor(chanceToBehead,0,1)+StringHelper.getPercentageString(chanceToBehead));}if(knockback!=0){toolTip.add(EnumChatFormatting.DARK_GRAY+""- ""+StatCollector.translateToLocal(""tictooltips.tool.knockback"")+ColorHelper.getRelativeColor(knockback,0.0,3.0)+StringHelper.getKnockbackString(knockback));}return toolTip;}"
3058	"public static void saveUsers(String[] elements,User[] user,String path){int ind=0;File xml=new File(path);BufferedWriter construct=null;try{construct=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(xml.getAbsolutePath()),""utf-8""));construct.write(""<?xml version=\""1.0\""?>"");construct.write(""\n<UserInfo>"");while(ind<user.length){construct.write(""\n\t<User>"");construct.write(""\n\t\t<""+elements[0]+'>'+user[ind].getName()+""</""+elements[0]+'>');construct.write(""\n\t\t<""+elements[1]+'>'+user[ind].getAge()+""</""+elements[1]+'>');construct.write(""\n\t\t<""+elements[2]+'>');for(int i=0;i<user[ind].getCorrectlySpelt().size();i++){if(user[ind].getCorrectlySpelt().get(i)!=null){construct.write(user[ind].getCorrectlySpelt().get(i).getSpelling());}if(i<user[ind].getCorrectlySpelt().size()-1){construct.write("" "");}}construct.write(""</""+elements[2]+'>');construct.write(""\n\t</User>"");ind++;}construct.write(""\n</UserInfo>"");}catch(IOException ex){System.err.println(ex.getStackTrace());}finally{try{construct.close();}catch(Exception ex){}}}"
3059	"public void cancelLaunch(){this.setLaunchPhase(EnumLaunchPhase.UNIGNITED);this.timeUntilLaunch=0;if(!this.worldObj.isRemote&&this.riddenByEntity instanceof EntityPlayerMP){((EntityPlayerMP)this.riddenByEntity).addChatMessage(new TextComponentString(GCCoreUtil.translate(""gui.rocket.warning.nogyroscope"")));}}"
3060	"protected void configureStorageForDataSource(IDataProducerModule<?> dataSource,IRecordStorageModule<?> storage) throws StorageException{if(storage.getRecordTypes().size()>0){throw new RuntimeException(""Storage ""+MsgUtils.moduleString(storage)+"" is already configured"");}if(dataSource instanceof ISensorModule<?>&&((ISensorModule<?>)dataSource).isSensorDescriptionHistorySupported()){ISensorModule<?> sensor=((ISensorModule<?>)dataSource);for(AbstractProcess sensorDesc : sensor.getSensorDescriptionHistory()){storage.storeDataSourceDescription(sensorDesc);}}else {storage.storeDataSourceDescription(dataSource.getCurrentDescription());}if(dataSource instanceof IMultiSourceDataProducer){for(String entityID : ((IMultiSourceDataProducer)dataSource).getEntityIDs()){addProducerInfo(entityID);}}else {if(storage instanceof IObsStorage){String producerID=dataSource.getCurrentDescription().getUniqueIdentifier();AbstractFeature foi=dataSource.getCurrentFeatureOfInterest();if(foi!=null){((IObsStorage)storage).storeFoi(producerID,foi);}}for(Entry<String,? extends IStreamingDataInterface> item : dataSource.getAllOutputs().entrySet()){String name=item.getKey();IStreamingDataInterface output=item.getValue();storage.addRecordType(name,output.getRecordDescription(),output.getRecommendedEncoding());}}}"
3061	"@Override public Map<Long,AccessLog> generateAccessLogs(){ final HashMap<Long,AccessLog> learningLogs=new HashMap<Long,AccessLog>(); final Map<Long,UnitResources> unitResources=new HashMap<Long,UnitResources>();for(UnitResources u : this.unitResourcesMooc){unitResources.put(u.getId(),u);}while(this.eventsMooc.size()>0){for(Events loadedItem : this.eventsMooc){AccessLog insert=new AccessLog();insert.setId(loadedItem.getId());insert.setUser(loadedItem.getUserId(),this.userMining,this.oldUserMining);if(loadedItem.getCourseId()!=null){insert.setCourse(loadedItem.getId(),this.courseMining,this.oldCourseMining);}else {if(this.segmentsToCourses.get(loadedItem.getSegmentId())!=null){insert.setCourse(this.segmentsToCourses.get(loadedItem.getSegmentId()),this.courseMining,this.oldCourseMining);}}if(unitResources.get(loadedItem.getUnitResourceId())!=null&&unitResources.get(loadedItem.getUnitResourceId()).getAttachableType().equals(""Video"")){UnitResources uR=unitResources.get(loadedItem.getUnitResourceId());insert.setLearning(Long.valueOf(""12""+uR.getAttachableId()),this.learningObjectMining,this.oldLearningObjectMining);}insert.setTimestamp(loadedItem.getTimestamp().getTime()/1000);switch (loadedItem.getEvent()){case 1 :insert.setAction(""View"");break;case 2 :insert.setAction(""Play"");break;case 3 :insert.setAction(""Stop"");break;case 4 :insert.setAction(""Pause"");break;default :break;}if(insert.getCourse()!=null&&!courseDetails.containsKey(insert.getCourse())){courseDetails.put(insert.getCourse(),new CourseObject());courseDetails.get(insert.getCourse()).setId(insert.getCourse().getId());courseDetails.get(insert.getCourse()).setFirstRequest(insert.getTimestamp());}if(insert.getCourse()!=null){courseDetails.get(insert.getCourse()).setLastRequest(insert.getTimestamp());}if(insert.getTimestamp()>maxLog){maxLog=insert.getTimestamp();}if((insert.getCourse()!=null)&&(insert.getLearning()!=null)&&(insert.getUser()!=null)){learningLogs.put(insert.getId(),insert);}}this.eventsMooc.clear(); final Session miningSession=this.dbHandler.getMiningSession();List<Collection<?>> logs=new ArrayList<Collection<?>>();logs.add(learningLogs.values());this.dbHandler.saveCollectionToDB(miningSession,logs);learningLogs.clear();miningSession.clear();miningSession.close(); final Session moocSession=HibernateUtil.getSessionFactory(dbConfigInt).openSession();Criteria criteria=moocSession.createCriteria(Events.class,""obj"");List<Long> segments=new ArrayList<Long>();for(Segments s : this.segmentsMooc){segments.add(s.getId());}if(!segments.isEmpty()){criteria.add(Restrictions.in(""obj.segmentId"",segments));criteria.add(Restrictions.gt(""obj.id"",this.eventLimit));}criteria.setMaxResults(1000000);criteria.addOrder(Property.forName(""obj.id"").asc());this.eventsMooc=criteria.list();if(this.eventsMooc.size()>0){this.eventLimit=this.eventsMooc.get(this.eventsMooc.size()-1).getId();}moocSession.clear();moocSession.close();}return learningLogs;}"
3062	"@Override public Map<Long,LearningObj> generateLearningObjs(){ final HashMap<Long,LearningObj> learningObjs=new HashMap<Long,LearningObj>();for(Course loadedItem : this.courseMining.values()){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""15""+loadedItem.getId()));insert.setTitle(loadedItem.getTitle());insert.setInteractionType(""Assessment"");insert.setType(getLearningType(""Course Exam""));learningObjs.put(insert.getId(),insert);}for(Segments loadedItem : this.segmentsMooc){this.segmentsToCourses.put(loadedItem.getId(),loadedItem.getCourseId());if(loadedItem.getType().equals(""LessonUnit"")){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""13""+loadedItem.getId()));insert.setTitle(""Forum ""+loadedItem.getTitle());insert.setInteractionType(""Collaboration"");insert.setType(getLearningType(""UnitForum""));learningObjs.put(insert.getId(),insert);}}for(Questions loadedItem : this.questionsMooc){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""14""+loadedItem.getId()));insert.setTitle(loadedItem.getTitle());insert.setInteractionType(""Collaboration"");insert.setType(getLearningType(""Thread""));insert.setParent(Long.valueOf(""13""+loadedItem.getSegmentId()),learningObjs,this.oldLearningObjectMining);learningObjs.put(insert.getId(),insert);}for(Assessments loadedItem : this.assessmentMooc){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""11""+loadedItem.getId()));insert.setTitle(loadedItem.getTitle());insert.setInteractionType(""Assessment"");insert.setType(getLearningType(loadedItem.getType()));learningObjs.put(insert.getId(),insert);}for(Segments loadedItem : this.segmentsMooc){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""10""+loadedItem.getId()));insert.setTitle(loadedItem.getTitle());insert.setInteractionType(""Access"");if(loadedItem.getType().equals(""LessonUnit"")||loadedItem.getType().equals(""Chapter"")){insert.setType(getLearningType(loadedItem.getType()));}if(loadedItem.getParent()!=null){insert.setParent(Long.valueOf(""10""+loadedItem.getParent()),learningObjs,oldLearningObjectMining);}if(insert.getType()!=null){learningObjs.put(insert.getId(),insert);}}for(Videos loadedItem : this.videosMooc){LearningObj insert=new LearningObj();insert.setId(Long.valueOf(""12""+loadedItem.getId()));insert.setTitle(loadedItem.getTitle());insert.setInteractionType(""Access"");insert.setType(getLearningType(""Video""));if(insert.getType()!=null){learningObjs.put(insert.getId(),insert);}}return learningObjs;}"
3063	"private static void closeLocalCommitListener(Project project){LocalSyncProjectMapping localSyncProjectMapping=getProjectMapping(project);if(localSyncProjectMapping.getLocalSyncTransactionCommitListener()!=null){project.getRepository().getTransactionManager().removeTransactionCommitListener(localSyncProjectMapping.getLocalSyncTransactionCommitListener());}}"
3064	"@Override public Shop getShop(World world,BlockPos pos,EntityPlayer player){if(quest!=null&&HFApi.player.getRelationsForPlayer(player).getRelationship(npc)>=15000){HFApi.quests.completeQuestConditionally(Quests.OPEN_WEDNESDAYS,player);HFApi.quests.completeQuestConditionally(quest,player);}return shop;}"
3065	"public void collectFolders(FilePath folder,List<FilePath> result){try{if(null!=folder.listDirectories()&&folder.listDirectories().size()>0){for(FilePath aPath : folder.listDirectories()){if(aPath.isDirectory()){result.add(aPath);collectFolders(aPath,result);}}}}catch(IOException e){LOGGER.severe(e.getMessage());e.printStackTrace();}catch(InterruptedException e){LOGGER.severe(e.getMessage());e.printStackTrace();}}"
3066	"@SuppressWarnings(""unchecked"") public void playerBeginTurn(Player player,MoveContext context){if(context.game.possessionsToProcess>0){player.controlPlayer=context.game.possessingPlayer;}else {player.controlPlayer=player;consecutiveTurnCounter++;}cardsObtainedLastTurn[playersTurn].clear();if(consecutiveTurnCounter==1){player.newTurn();}player.clearDurationEffectsOnOtherPlayers();GameEvent gevent=new GameEvent(GameEvent.EventType.TurnBegin,context);broadcastEvent(gevent);boolean allDurationAreSimple=true;ArrayList<Object> durationEffects=new ArrayList<Object>();ArrayList<Boolean> durationEffectsAreCards=new ArrayList<Boolean>();int archiveNum=0;for(Card card : player.nextTurnCards){Card thisCard=card.behaveAsCard();if(thisCard.is(Type.Duration,player)){int cloneCount=((CardImpl)card).getControlCard().cloneCount;for(int clone=cloneCount;clone>0;clone--){if(thisCard.equals(Cards.amulet)||thisCard.equals(Cards.dungeon)){allDurationAreSimple=false;}if(thisCard.equals(Cards.haven)){if(player.haven!=null&&player.haven.size()>0){durationEffects.add(thisCard);durationEffects.add(player.haven.remove(0));durationEffectsAreCards.add(clone==cloneCount&&!((CardImpl)card.behaveAsCard()).trashAfterPlay);durationEffectsAreCards.add(false);}}else {if(thisCard.equals(Cards.gear)){if(player.gear.size()>0){durationEffects.add(thisCard);durationEffects.add(player.gear.remove(0));durationEffectsAreCards.add(clone==cloneCount&&!((CardImpl)card.behaveAsCard()).trashAfterPlay);durationEffectsAreCards.add(false);}}else {if(thisCard.equals(Cards.archive)){if(player.archive.size()>0){durationEffects.add(thisCard);durationEffects.add(player.archive.get(archiveNum++));durationEffectsAreCards.add(clone==cloneCount&&!((CardImpl)card.behaveAsCard()).trashAfterPlay);durationEffectsAreCards.add(false);}}else {durationEffects.add(thisCard);durationEffects.add(Cards.curse);durationEffectsAreCards.add(clone==cloneCount&&!((CardImpl)card.behaveAsCard()).trashAfterPlay);durationEffectsAreCards.add(false);}}}}}else {if(isModifierCard(thisCard.behaveAsCard())){GameEvent event=new GameEvent(GameEvent.EventType.PlayingDurationAction,context);event.card=card;event.newCard=true;broadcastEvent(event);}}}for(Card card : player.horseTraders){durationEffects.add(card);durationEffects.add(Cards.curse);durationEffectsAreCards.add(true);durationEffectsAreCards.add(false);}for(Card card : player.prince){if(!card.equals(Cards.prince)){allDurationAreSimple=false;durationEffects.add(Cards.prince);durationEffects.add(card);durationEffectsAreCards.add(true);durationEffectsAreCards.add(false);}}for(Card card : player.summon){if(!card.equals(Cards.summon)){allDurationAreSimple=false;durationEffects.add(Cards.summon);durationEffects.add(card);durationEffectsAreCards.add(true);durationEffectsAreCards.add(false);}}while(!player.haven.isEmpty()){durationEffects.add(Cards.haven);durationEffects.add(player.haven.remove(0));durationEffectsAreCards.add(false);durationEffectsAreCards.add(false);}while(archiveNum<player.archive.size()){durationEffects.add(Cards.archive);durationEffects.add(player.archive.get(archiveNum++));durationEffectsAreCards.add(false);durationEffectsAreCards.add(false);}int numOptionalItems=0;ArrayList<Card> callableCards=new ArrayList<Card>();for(Card c : player.tavern){if(c.behaveAsCard().isCallableWhenTurnStarts()){callableCards.add((Card)c);}}if(!callableCards.isEmpty()){Collections.sort(callableCards,new Util.CardCostComparator());for(Card c : callableCards){if(c.behaveAsCard().equals(Cards.guide)||c.behaveAsCard().equals(Cards.ratcatcher)||c.behaveAsCard().equals(Cards.transmogrify)){allDurationAreSimple=false;}}}if(!allDurationAreSimple){for(Card c : callableCards){durationEffects.add(c);durationEffects.add(Cards.curse);durationEffectsAreCards.add(false);durationEffectsAreCards.add(false);numOptionalItems+=2;}}while(durationEffects.size()>numOptionalItems){int selection=0;if(allDurationAreSimple){selection=0;}else {selection=2*player.controlPlayer.duration_cardToPlay(context,durationEffects.toArray(new Object[durationEffects.size()]));}Card card=(Card)durationEffects.get(selection);boolean isRealCard=durationEffectsAreCards.get(selection);if(card==null){Util.log(""ERROR: duration_cardToPlay returned ""+selection);selection=0;card=(Card)durationEffects.get(selection);}Card card2=null;if(durationEffects.get(selection+1) instanceof Card){card2=(Card)durationEffects.get(selection+1);}ArrayList<Card> setAsideCards=null;if(durationEffects.get(selection+1) instanceof ArrayList<?>){setAsideCards=(ArrayList<Card>)durationEffects.get(selection+1);}if(card2==null){Util.log(""ERROR: duration_cardToPlay returned ""+selection);card2=card;}durationEffects.remove(selection+1);durationEffects.remove(selection);durationEffectsAreCards.remove(selection+1);durationEffectsAreCards.remove(selection);if(card.equals(Cards.prince)){if(!(card2.is(Type.Duration,player))){player.playedByPrince.add(card2);}player.prince.remove(card2);context.freeActionInEffect++;try{card2.play(this,context,false);}catch(RuntimeException e){e.printStackTrace();}context.freeActionInEffect--;}else {if(card.equals(Cards.summon)){player.summon.remove(card2);context.freeActionInEffect++;try{card2.play(this,context,false);}catch(RuntimeException e){e.printStackTrace();}context.freeActionInEffect--;}else {if(card.behaveAsCard().equals(Cards.horseTraders)){Card horseTrader=player.horseTraders.remove(0);player.hand.add(horseTrader);drawToHand(context,horseTrader,1);}else {if(card.behaveAsCard().is(Type.Duration,player)){if(card.behaveAsCard().equals(Cards.haven)){player.hand.add(card2);}if(card.behaveAsCard().equals(Cards.gear)){for(Card c : setAsideCards){player.hand.add(c);}}if(card.behaveAsCard().equals(Cards.archive)){CardImplEmpires.archiveSelect(this,context,player,setAsideCards);}Card thisCard=card.behaveAsCard();GameEvent event=new GameEvent(GameEvent.EventType.PlayingDurationAction,context);event.card=card;event.newCard=isRealCard;broadcastEvent(event);context.actions+=thisCard.getAddActionsNextTurn();context.addCoins(thisCard.getAddGoldNextTurn());context.buys+=thisCard.getAddBuysNextTurn();int addCardsNextTurn=thisCard.getAddCardsNextTurn();if(thisCard.getKind()==Cards.Kind.Tactician){context.actions+=1;context.buys+=1;addCardsNextTurn=5;}if(thisCard.getKind()==Cards.Kind.Dungeon){addCardsNextTurn=2;}if(thisCard.getKind()==Cards.Kind.Hireling){addCardsNextTurn=1;}for(int i=0;i<addCardsNextTurn;i++){drawToHand(context,thisCard,addCardsNextTurn-i,true);}if(thisCard.getKind()==Cards.Kind.Amulet||thisCard.getKind()==Cards.Kind.Dungeon){context.freeActionInEffect++;try{((CardImpl)thisCard).additionalCardActions(context.game,context,player);}catch(RuntimeException e){e.printStackTrace();}context.freeActionInEffect--;}}else {if(card.behaveAsCard().isCallableWhenTurnStarts()){numOptionalItems-=2;card.behaveAsCard().callAtStartOfTurn(context);}else {Util.log(""ERROR: nextTurnCards contains ""+card);}}}}}}ArrayList<Card> staysInPlayCards=new ArrayList<Card>();archiveNum=0;while(!player.nextTurnCards.isEmpty()){Card card=player.nextTurnCards.remove(0);if(isModifierCard(card.behaveAsCard())){if(!player.nextTurnCards.isEmpty()){Card nextCard=player.nextTurnCards.get(0);int additionalModifierCards=0;while(nextCard!=null&&isModifierCard(nextCard.behaveAsCard())){additionalModifierCards++;if(player.nextTurnCards.size()>additionalModifierCards){nextCard=player.nextTurnCards.get(additionalModifierCards);}else {nextCard=null;}}if(nextCard!=null&&(nextCard.behaveAsCard().equals(Cards.hireling)||nextCard.behaveAsCard().equals(Cards.champion)||(nextCard.behaveAsCard().equals(Cards.archive)&&player.archive.get(archiveNum++).size()>0))){staysInPlayCards.add(card);for(int i=0;i<additionalModifierCards;++i){staysInPlayCards.add(player.nextTurnCards.remove(0));}player.nextTurnCards.remove(0);staysInPlayCards.add(nextCard);continue;}}}if(card.behaveAsCard().equals(Cards.hireling)||card.behaveAsCard().equals(Cards.champion)||(card.behaveAsCard().equals(Cards.archive)&&player.archive.size()>archiveNum&&player.archive.get(archiveNum++).size()>0)){staysInPlayCards.add(card);}else {CardImpl behaveAsCard=(CardImpl)card.behaveAsCard();behaveAsCard.cloneCount=1;((CardImpl)card).cloneCount=1;if(!(behaveAsCard.trashAfterPlay||((CardImpl)card).trashAfterPlay)){player.playedCards.add(card);}else {behaveAsCard.trashAfterPlay=false;((CardImpl)card).trashAfterPlay=false;}}}while(!staysInPlayCards.isEmpty()){player.nextTurnCards.add(staysInPlayCards.remove(0));}Iterator<ArrayList<Card>> it=player.archive.iterator();while(it.hasNext()){if(it.next().isEmpty()){it.remove();}}callableCards=new ArrayList<Card>();Card toCall=null;for(Card c : player.tavern){if(c.behaveAsCard().isCallableWhenTurnStarts()){callableCards.add(c);}}if(!callableCards.isEmpty()){Collections.sort(callableCards,new Util.CardCostComparator());do {toCall=null;Card[] cardsAsArray=callableCards.toArray(new Card[callableCards.size()+1]);toCall=player.controlPlayer.call_whenTurnStartCardToCall(context,cardsAsArray);if(toCall!=null&&callableCards.contains(toCall)){toCall=callableCards.remove(callableCards.indexOf(toCall));toCall.behaveAsCard().callAtStartOfTurn(context);}} while(toCall!=null&&!callableCards.isEmpty());}}"
3067	"public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException,ServletException{HttpServletRequest request=(HttpServletRequest)req;HttpServletResponse response=(HttpServletResponse)res;String chemin=request.getRequestURI().substring(request.getContextPath().length());if(chemin.startsWith(""/Conn"")||chemin.startsWith(""/insc"")){chain.doFilter(request,response);return ;}HttpSession session=request.getSession();if(session.getAttribute(ATT_SESSION_USER)==null){request.getRequestDispatcher(ACCES_PUBLIC).forward(request,response);}else {chain.doFilter(request,response);}}"
3068	"@Override public boolean equals(Object obj){if(obj instanceof Usr){Usr usr=(Usr)obj;if(usr.username.equals(username)&&usr.id==id){return true;}}return super.equals(obj);}"
3069	"public int read(ByteBuffer byteBuffer) throws IOException{int readSize=-1;Object response=this.getAttribute(""SocketResponse"");if(response!=null){if(response instanceof Exception){throw (IOException)response;}else {throw new IOException((Exception)response);}}readSize=this.read0(byteBuffer);if(!this.isConnected()&&readSize<=0){readSize=-1;}return readSize;}"
3070	"public List<BulkEditChange> runImport(boolean change,boolean useWorkflow,boolean workflowNotify,boolean useTemplate) throws MetadataImportException{ArrayList<BulkEditChange> changes=new ArrayList<BulkEditChange>();try{Context.Mode originalMode=c.getCurrentMode();c.setMode(Context.Mode.BATCH_EDIT);for(DSpaceCSVLine line : toImport){UUID id=line.getID();if(csv.hasActions()&&(!"""".equals(line.getAction()))&&(id==null)){throw new MetadataImportException(""'action' not allowed for new items!"");}WorkspaceItem wsItem=null;WorkflowItem wfItem=null;Item item=null;if(id!=null){item=itemService.find(c,id);if(item==null){throw new MetadataImportException(""Unknown item ID ""+id);}BulkEditChange whatHasChanged=new BulkEditChange(item);List<String> collections=line.get(""collection"");if(collections!=null){if(collections.size()==0){throw new MetadataImportException(""Missing collection from item ""+item.getHandle());}List<Collection> actualCollections=item.getCollections();compare(item,collections,actualCollections,whatHasChanged,change);}for(String md : line.keys()){if(!""id"".equals(md)){String[] fromCSV=line.get(md).toArray(new String[line.get(md).size()]);if(!isAuthorityControlledField(md)){for(int i=0;i<fromCSV.length;i++){int pos=fromCSV[i].indexOf(csv.getAuthoritySeparator());if(pos>-1){fromCSV[i]=fromCSV[i].substring(0,pos);}}}compare(item,fromCSV,change,md,whatHasChanged,line);}}if(csv.hasActions()){String action=line.getAction();if("""".equals(action)){}else {if(""expunge"".equals(action)){if(!ConfigurationManager.getBooleanProperty(""bulkedit"",""allowexpunge"",false)){throw new MetadataImportException(""'expunge' action denied by configuration"");}if(change){itemService.delete(c,item);}whatHasChanged.setDeleted();}else {if(""withdraw"".equals(action)){if(!item.isWithdrawn()){if(change){itemService.withdraw(c,item);}whatHasChanged.setWithdrawn();}}else {if(""reinstate"".equals(action)){if(item.isWithdrawn()){if(change){itemService.reinstate(c,item);}whatHasChanged.setReinstated();}}else {throw new MetadataImportException(""Unknown action: ""+action);}}}}}if(whatHasChanged.hasChanges()){changes.add(whatHasChanged);}}else {if(c.getCurrentUser()==null){throw new MetadataImportException(""When adding new items, a user must be specified with the -e option"");}BulkEditChange whatHasChanged=new BulkEditChange();for(String md : line.keys()){if(!""id"".equals(md)){String[] fromCSV=line.get(md).toArray(new String[line.get(md).size()]);if(!isAuthorityControlledField(md)){for(int i=0;i<fromCSV.length;i++){int pos=fromCSV[i].indexOf(csv.getAuthoritySeparator());if(pos>-1){fromCSV[i]=fromCSV[i].substring(0,pos);}}}add(fromCSV,md,whatHasChanged);}}List<String> collections=line.get(""collection"");if(collections==null){throw new MetadataImportException(""New items must have a 'collection' assigned in the form of a handle"");}ArrayList<Collection> check=new ArrayList<Collection>();Collection collection;for(String handle : collections){try{collection=(Collection)handleService.resolveToObject(c,handle);if(collection==null){throw new MetadataImportException(""'""+handle+""' is not a Collection! You must specify a valid collection for new items"");}if(check.contains(collection)){throw new MetadataImportException(""Duplicate collection assignment detected in new item! ""+handle);}else {check.add(collection);}}catch(Exception ex){throw new MetadataImportException(""'""+handle+""' is not a Collection! You must specify a valid collection for new items"",ex);}}boolean first=true;for(String handle : collections){Collection extra=(Collection)handleService.resolveToObject(c,handle);if(first){whatHasChanged.setOwningCollection(extra);}else {whatHasChanged.registerNewMappedCollection(extra);}first=false;}if(change){String collectionHandle=line.get(""collection"").get(0);collection=(Collection)handleService.resolveToObject(c,collectionHandle);wsItem=workspaceItemService.create(c,collection,useTemplate);item=wsItem.getItem();for(BulkEditMetadataValue dcv : whatHasChanged.getAdds()){itemService.addMetadata(c,item,dcv.getSchema(),dcv.getElement(),dcv.getQualifier(),dcv.getLanguage(),dcv.getValue(),dcv.getAuthority(),dcv.getConfidence());}if(useWorkflow){WorkflowService workflowService=WorkflowServiceFactory.getInstance().getWorkflowService();if(workflowNotify){wfItem=workflowService.start(c,wsItem);}else {wfItem=workflowService.startWithoutNotify(c,wsItem);}}else {installItemService.installItem(c,wsItem);}if(line.get(""collection"").size()>0){for(int i=1;i<collections.size();i++){String handle=collections.get(i);Collection extra=(Collection)handleService.resolveToObject(c,handle);collectionService.addItem(c,extra,item);}}whatHasChanged.setItem(item);}changes.add(whatHasChanged);}c.uncacheEntity(wsItem);c.uncacheEntity(wfItem);c.uncacheEntity(item);}c.setMode(originalMode);}catch(MetadataImportException mie){throw mie;}catch(Exception e){e.printStackTrace();}return changes;}"
3071	"public void updateLevel2(float delta){runTime+=delta;minLeft=(240-(int)runTime)/60;secLeft=(240-(int)runTime)%60;if(!player.getIsDigging()){if(!player.getIsWearingSandals()&&!player.getIsInTheCar()){Water-=0.03*(backpack.getItemNum()+1);if(Water<=50){tempHP-=0.02;HP=(int)tempHP;}}else {Water-=0.01*(backpack.getItemNum()+1);}}else {if(Water<99){Water+=0.05;}}if(bilby.getMonsterAppear()==1&&bilby.getMonsterGo()==0){scroller.getBackground1().stop();scroller.getBackground2().stop();scroller.getBackground3().stop();scroller.stop();}scroller.updateLevel2(delta);player.update(delta);player.setRunning(scroller.getBackground1().isRunning());collide();if(Intersector.overlaps(player.getRect(),scroller.getZebraFinch().getBoundRect())&&!player.getIsDigging()&&!player.getIsRunning()&&(backpack.isInBag(13)>=0)){player.setIsDigging(true);}else {if(!Intersector.overlaps(player.getRect(),scroller.getZebraFinch().getBoundRect())&&player.getIsDigging()){player.setIsDigging(false);}}if(player.getX()>scroller.getEmptyCar().getX()&&respondToTap&&!player.getIsInTheCar()){respondToTap=false;if(backpack.isInBag(6)>=0){player.setIsInTheCar(true);backpack.removeItem(backpack.isInBag(6));scroller.getEmptyCar().setVisible(false);respondToTap=true;}else {respondToTap=true;}}bilby.update(delta,player);if(bilby.getMonsterGo()==2){backgroundLev2MusicPlay=true;monsterAppearMusic=false;bilby.happy();bilby.setSpeed(scroller.getBackground1().getVelocityX());if(bilby.getX()+bilby.getWidth()<player.getX()+player.getWidth()){currentState=GameState.LEVEL2;}for(int i=0;i<4;i++){dataFromLastLevel[i]=backpack.getItems()[i];}dataFromLastLevel[4]=HP;}else {if(bilby.getMonsterGo()==1){bilby.setSpeed(scroller.getBackground1().getVelocityX()-200);if(bilby.collides(player)){if(HP<=100){currentState=GameState.GAMEOVER;}else {HP-=100;currentState=GameState.MAP6;for(int i=0;i<4;i++){dataFromLastLevel[i]=backpack.getItems()[i];}dataFromLastLevel[4]=HP;}}}}if(background.getDistance()>4500&&!(scroller.getEmptyCar().getVisible())&&!player.getIsInTheCar()){scroller.getEmptyCar().setVisible(true);}if(background.getDistance()>2500&&!choosePlants&&!plantsChosen&&respondToTap){choosePlants=true;respondToTap=false;}if(background.getDistance()>10000&&bilby.getMonsterGo()==0){bilby.changeMonsterAppear(1);if(monsterMusicPlaying==false){monsterAppearMusic=true;monsterMusicPlaying=true;}}Gdx.app.log(""Monstergo is"",bilby.getMonsterGo()+"""");Gdx.app.log(""Monsterappear is"",bilby.getMonsterAppear()+"""");if((Water<=20||HP<=50)&&dangerMusicPlay==true){AssetLoader.dangerous.play();dangerMusicPlay=false;}else {if(Water>20&&HP>50){AssetLoader.dangerous.stop();dangerMusicPlay=true;}}if(runTime>240||HP<=0||Water<=0||scroller.getBoggy().getX()<player.getX()){currentState=GameState.GAMEOVER;}}"
3072	"@Override public void onClick(View v){get_email=email_et.getText().toString();get_password=password_et.getText().toString();get_confirmed_password=confirm_password_et.getText().toString();if(get_password!=get_confirmed_password){confirm_password_et.setError(""Passwords did not match, please re-enter your password."");}Intent registered=new Intent(""bossharriscorporation.firebasedb.LoginActivity"");startActivity(registered);}"
3073	"private void dispatchNotification(String type,String message,Executor executor){String mfc=message.substring(type.length()+1,type.length()+2);short accum=0;if(mfc.equals(""N"")||mfc.equals(""F"")||mfc.equals(""U"")||mfc.equals(""N"")){accum=accumMap.get(type).fail();logger.info(""Accum -> ""+type+"" (""+accum+"") ""+accumMap.get(type).getMessage(accum));}if(mfc.equals(""N"")&&(accum==0)){sentWNotif.remove(""W_""+type);sentFNotif.remove(""F_""+type);sentUNotif.remove(""U_""+type);}else {if((!mfc.equals(""W""))&&(!mfc.equals(""F""))&&(!mfc.equals(""U""))&&(!mfc.equals(""N""))){sentWNotif.remove(""W_""+type);sentFNotif.remove(""F_""+type);sentUNotif.remove(""U_""+type);}else {int notifThresh=typeThresholds.get(type)[2];int notifRepeat=typeThresholds.get(type)[3];long lastMessage=0l;Integer sn=new Integer(0);String key=new String();if(mfc.equals(""U"")){key=""U_""+type;sn=sentUNotif.get(key);if(sn==null){sn=new Integer(0);}sentUNotif.put(key,++sn);notifThresh=1;}else {if(mfc.equals(""F"")){key=""F_""+type;sn=sentFNotif.get(key);if(sn==null){sn=new Integer(0);}sentFNotif.put(key,++sn);}else {if(mfc.equals(""W"")){key=""W_""+type;sn=sentWNotif.get(key);if(sn==null){sn=new Integer(0);}sentWNotif.put(key,++sn);}else {if(accum==1){key=""AW_""+type;}else {if(accum==2){key=""AE_""+type;}}}}}try{lastMessage=lastNotif.get(key);}catch(NullPointerException npe){lastMessage=0L;}long timeNow=System.currentTimeMillis();long timeDiff=timeNow-lastMessage;ArrayList<String> notifyGroups=new ArrayList<String>();if(!notifyMap.containsKey(type)){notifyGroups.addAll(defaultNotif);}else {notifyGroups.addAll(notifyMap.get(type));}Vector<String> v=new Vector<String>();logger.info(""Count: ""+sn+"" (threshold:""+notifThresh+"" repeat:""+notifRepeat+"")"");if((sn%notifRepeat==notifThresh)||(accum>=1)){for(String ng : notifyGroups){short warnOrError=0;if((mfc.equals(""F"")&&accum!=2)||mfc.equals(""U"")||accum==2){v.addAll(errorMap.get(ng));warnOrError=2;logger.info(""Error scripts..."");}else {v.addAll(warnMap.get(ng));warnOrError=1;logger.info(""Warning scripts..."");}if(rotMap.containsKey(ng)){logger.info(""Rotation detected... Who's turn is it ... tun tun tuuuuun"");OnCall o=rotMap.get(ng).getOnCall();logger.info(""turn -> ""+o.getName());v.addAll(rotMap.get(ng).getScripts(o,warnOrError));}}}if(timeDiff<=defFlapBuffer){if(sn==notifThresh){webLog.info(""Flapping service: ""+type+""(""+(timeDiff/1000)+"" secs since last notification)"");logger.warning(""Flapping service: ""+type+"" (""+(timeDiff/1000)+"" secs since last notification) - Skipped"");}else {if(accum>=1){String foo=(accum==1)?""Warning"":""Error"";webLog.info(""Accumulative ""+foo+"": ""+type+""(""+(timeDiff/1000)+"" secs since last notification)"");logger.warning(""Accumulative ""+foo+"": ""+type+"" (""+(timeDiff/1000)+"" secs since last notification) - Skipped"");accumMap.get(type).reset(accum);}}}else {if(sn%notifRepeat==notifThresh){message=""\""""+message+"" count:""+sn+""\"""";}else {if(accum>=1){String foo=(accum==1)?""Warning"":""Error"";message=""Accumulative ""+foo+"": ""+type+"" (""+accumMap.get(type).getMessage(accum)+"")"";accumMap.get(type).reset(accum);}}lastNotif.put(key,timeNow);for(String s : v){Runnable r=new Notifier(s+"" ""+message);logger.info(""Dispatching notification ""+s+"" ""+message);executor.execute(r);}}}}}"
3074	"public void draw(SpriteBatch pic,float fade){if(!refresh){sentRef=false;}if(!isPan&&scrolled<0&&!refresh){scrolled/=2;}if(scrolled<-0.15*s.u.h){scrolled=(int)(-0.15*s.u.h);refresh=true;if(!sentRef){s.refresh();sentRef=true;}}if(modules.size()*0.2*s.u.h>0.675*s.u.h&&scrolled>(int)(modules.size()*0.2*s.u.h-0.675*s.u.h)){scrolled=(int)(modules.size()*0.2*s.u.h-0.675*s.u.h);}else {if(scrolled>0){}}rM.bounds.y=0.675*s.u.h+0.2*s.u.h+scrolled;rM.draw(pic,fade);for(int i=0;i<modules.size();i++){modules.get(i).bounds.y=0.675*s.u.h-i*0.2*s.u.h+scrolled;modules.get(i).draw(pic,fade);}}"
3075	"private Dawg<LETTER,COLNAMES> build(boolean doUnion){Set<PairDawgState> currentStates=new HashSet<PairDawgState>();currentStates.add((PairDawgState)mUnionInitialState);for(int i=0;i<mFirstInputDawg.getColnames().size();i++){Set<PairDawgState> nextStates=new HashSet<PairDawgState>();for(PairDawgState cs : currentStates){if(!cs.mFirstIsSink&&!cs.mSecondIsSink){for(Pair<IDawgLetter<LETTER,COLNAMES>,DawgState> firstOutEdge : mFirstInputDawg.getTransitionRelation().getOutEdgeSet(cs.getFirst())){ final IDawgLetter<LETTER,COLNAMES> firstDl=firstOutEdge.getFirst(); final DawgState firstTarget=firstOutEdge.getSecond();for(Pair<IDawgLetter<LETTER,COLNAMES>,DawgState> secondOutEdge : mSecondInputDawg.getTransitionRelation().getOutEdgeSet(cs.getSecond())){ final IDawgLetter<LETTER,COLNAMES> secondDl=secondOutEdge.getFirst(); final DawgState secondTarget=secondOutEdge.getSecond();IDawgLetter<LETTER,COLNAMES> intersectionDl=firstDl.intersect(secondDl);if(intersectionDl!=null&&!(intersectionDl instanceof EmptyDawgLetter)){PairDawgState newState=mDawgStateFactory.getOrCreatePairDawgState(firstTarget,secondTarget);nextStates.add(newState);mResultTransitionRelation.put(cs,intersectionDl,newState);}if(doUnion){Set<IDawgLetter<LETTER,COLNAMES>> firstWithoutSecondDls=firstDl.difference(secondDl);if(!firstWithoutSecondDls.isEmpty()){PairDawgState fwsDs=mDawgStateFactory.getOrCreatePairDawgState(firstTarget,false,true);nextStates.add(fwsDs);for(IDawgLetter<LETTER,COLNAMES> dl : firstWithoutSecondDls){mResultTransitionRelation.put(cs,dl,fwsDs);}}Set<IDawgLetter<LETTER,COLNAMES>> secondWithoutFirstDls=secondDl.difference(firstDl);if(!secondWithoutFirstDls.isEmpty()){PairDawgState swfDs=new PairDawgState(secondTarget,true,false);nextStates.add(swfDs);for(IDawgLetter<LETTER,COLNAMES> dl : secondWithoutFirstDls){mResultTransitionRelation.put(cs,dl,swfDs);}}}}}}else {if(doUnion&&cs.mFirstIsSink){for(Pair<IDawgLetter<LETTER,COLNAMES>,DawgState> firstOutEdge : mFirstInputDawg.getTransitionRelation().getOutEdgeSet(cs.getFirst())){PairDawgState ds=mDawgStateFactory.getOrCreatePairDawgState(firstOutEdge.getSecond(),true,false);nextStates.add(ds);mResultTransitionRelation.put(cs,firstOutEdge.getFirst(),ds);}}else {if(doUnion&&cs.mSecondIsSink){for(Pair<IDawgLetter<LETTER,COLNAMES>,DawgState> secondOutEdge : mSecondInputDawg.getTransitionRelation().getOutEdgeSet(cs.getSecond())){PairDawgState ds=mDawgStateFactory.getOrCreatePairDawgState(secondOutEdge.getSecond(),false,true);nextStates.add(ds);mResultTransitionRelation.put(cs,secondOutEdge.getFirst(),ds);}}}}}currentStates=nextStates;}return new Dawg<LETTER,COLNAMES>(mDawgFactory,mFirstInputDawg.getLogger(),mFirstInputDawg.getAllConstants(),mFirstInputDawg.getColnames(),mResultTransitionRelation,mUnionInitialState);}"
3076	"public void libererRess(int p,int r){System.out.println(""Liberation de la ressource ""+r+"" par le processus ""+p);try{Integer predecesseur=g.suivreArcRemontant(p,r);try{Integer sucesseur=g.suivreArcDescendant(p,r);g.ajoutArc(new Arc(predecesseur,sucesseur,r));}catch(SommetArriveeEquDepart e){}catch(AucunSucesseur e){if(predecesseur==0){g.ajoutArc(new Arc(0,0,r));}}}catch(SommetArriveeEquDepart e){}catch(AucunPredecesseur e){}}"
3077	"public boolean trashToken(String token){try{Map<String,Object> user=verify(token);if(cache.get(TOKEN_PREFIX+user.get(""uuid"").toString()).equals(token)){cache.remove(TOKEN_PREFIX+user.get(""uuid"").toString());}else {return false;}return true;}catch(Exception e){return false;}}"
3078	"public boolean validateTool(ItemStack item){int id=item.getTypeId();if(id>=256&&id<=259||id>=267&&id<=279||id>=283&&id<=286||id>=290&&id<=294||id==346){return true;}else {return false;}}"
3079	"@SideOnly(Side.CLIENT) @SubscribeEvent public void renderHand(RenderHandEvent event){World world=Minecraft.getMinecraft().theWorld;EntityPlayer player=Minecraft.getMinecraft().thePlayer;AbstractClientPlayer aplayer=(AbstractClientPlayer)player;ItemStack stack=player.getHeldItemMainhand();int perspective=Minecraft.getMinecraft().gameSettings.thirdPersonView;if(stack!=null&&stack.getItem()==RegistrationHandler.itemTile&&ItemTile.hasTileData(stack)){Block block=ItemTile.getBlock(stack);BlockPos pos=player.getPosition();NBTTagCompound tag=ItemTile.getTileData(stack);IBlockState state=ItemTile.getBlockState(stack);ItemStack tileStack=ItemTile.getItemStack(stack);GlStateManager.pushMatrix();GlStateManager.scale(2.5,2.5,2.5);GlStateManager.translate(0,-0.6,-1);if(CarryOnConfig.settings.facePlayer?!isChest(block):isChest(block)){GlStateManager.rotate(180,0,1.0,0);GlStateManager.rotate(-8,1.0,0,0);}else {GlStateManager.rotate(8,1.0,0,0);}if(perspective==0){IBakedModel model=ModelOverridesHandler.hasCustomOverrideModel(state,tag)?ModelOverridesHandler.getCustomOverrideModel(state,tag,world,player):Minecraft.getMinecraft().getRenderItem().getItemModelWithOverrides(tileStack==null?stack:tileStack,world,player);if(ModelOverridesHandler.hasCustomOverrideModel(state,tag)){Object override=ModelOverridesHandler.getOverrideObject(state,tag);if(override instanceof ItemStack){Minecraft.getMinecraft().getRenderItem().renderItem((ItemStack)override,model);}else {Minecraft.getMinecraft().getRenderItem().renderItem(tileStack==null?stack:tileStack,model);}}else {Minecraft.getMinecraft().getRenderItem().renderItem(tileStack==null?stack:tileStack,model);}}GlStateManager.scale(1,1,1);GlStateManager.popMatrix();if(perspective==0){event.setCanceled(true);}}else {if(stack==null?true:stack.getItem()!=RegistrationHandler.itemEntity){event.setCanceled(false);Minecraft mc=Minecraft.getMinecraft();RenderManager manager=mc.getRenderManager();RenderPlayer renderPlayer=manager.getSkinMap().get(aplayer.getSkinType());ModelPlayer modelPlayer=renderPlayer.getMainModel();modelPlayer.bipedLeftArm.isHidden=false;modelPlayer.bipedRightArm.isHidden=false;}}}"
3080	"@Transactional public String createSurveyExport(export exportDetails,Integer programId) throws Exception{String returnFileName="""";String registryName=programManager.getProgramById(programId).getProgramName().replaceAll("" "",""-"").toLowerCase();List<SurveyQuestions> surveyQuestions=surveyManager.getSurveyQuestionList(exportDetails.getSurveyId());List<submittedSurveys> submittedSurveys=null;if(exportDetails.getQuestionOnly()==false){submittedSurveys=surveyManager.getSubmittedSurveys(exportDetails.getSurveyId(),exportDetails.getExportStartDate(),exportDetails.getExportEndDate());}if(surveyQuestions!=null&&surveyQuestions.size()>0){DateFormat dateFormat=new SimpleDateFormat(""yyyyMMddHHmmssS"");Date date=new Date();String fileName="""";String delimiter="","";if(exportDetails.getExportType()==1){fileName=new StringBuilder().append(exportDetails.getExportName()).append(dateFormat.format(date)).append("".csv"").toString();delimiter="","";}else {if(exportDetails.getExportType()==2){fileName=new StringBuilder().append(exportDetails.getExportName()).append(dateFormat.format(date)).append("".txt"").toString();delimiter="","";}else {if(exportDetails.getExportType()==3){fileName=new StringBuilder().append(exportDetails.getExportName()).append(dateFormat.format(date)).append("".txt"").toString();delimiter=""|"";}else {if(exportDetails.getExportType()==4){fileName=new StringBuilder().append(exportDetails.getExportName()).append(dateFormat.format(date)).append("".txt"").toString();delimiter=""\t"";}}}}InputStream inputStream=null;OutputStream outputStream=null;fileSystem dir=new fileSystem();dir.setDir(registryName,""exportFiles"");File newFile=new File(dir.getDir()+fileName);try{if(newFile.exists()){int i=1;while(newFile.exists()){int iDot=fileName.lastIndexOf(""."");newFile=new File(dir.getDir()+fileName.substring(0,iDot)+""_(""+++i+"")""+fileName.substring(iDot));}fileName=newFile.getName();newFile.createNewFile();}else {newFile.createNewFile();}}catch(IOException e){e.printStackTrace();}FileInputStream fileInput=null;File file=new File(dir.getDir()+fileName);fileInput=new FileInputStream(file);returnFileName=fileName;FileWriter fw=null;try{fw=new FileWriter(file,true);}catch(IOException ex){Logger.getLogger(exportManager.class.getName()).log(Level.SEVERE,null,ex);}StringBuilder exportRow=new StringBuilder();if(exportDetails.getQuestionOnly()==false){exportRow.append(""Date Submitted"").append(delimiter);}for(SurveyQuestions question : surveyQuestions){exportRow.append(""q""+question.getId()).append(delimiter);}exportRow.append(System.getProperty(""line.separator""));fw.write(exportRow.toString());if(exportDetails.getQuestionOnly()==true){exportRow=new StringBuilder();for(SurveyQuestions question : surveyQuestions){exportRow.append(question.getQuestion()).append(delimiter);}fw.write(exportRow.toString());}else {String answerVal;for(submittedSurveys submission : submittedSurveys){exportRow=new StringBuilder();exportRow.append(submission.getDateCreated()).append(delimiter);for(SurveyQuestions question : surveyQuestions){answerVal=surveyManager.getSubmittedSurveyQuestionAnswer(submission.getId(),question.getId());exportRow.append(answerVal).append(delimiter);}exportRow.append(System.getProperty(""line.separator""));fw.write(exportRow.toString());}}fw.close();}return returnFileName;}"
3081	"protected final int getInt(String key){ final Jedis r=pool.getResource();try{String value=r.get(key);if(value!=""nil""){return Integer.parseInt(value);}}finally{pool.returnResource(r);}return 0;}"
3082	"private ContainerInfo getContainerInfo(PodSpec podSpec,boolean addExtraParameters,boolean isTaskContainer){Collection<Protos.Volume> secretVolumes=getExecutorInfoSecretVolumes(podSpec.getSecrets());Protos.ContainerInfo.Builder containerInfo=Protos.ContainerInfo.newBuilder().setType(Protos.ContainerInfo.Type.MESOS);if(!podSpec.getImage().isPresent()&&podSpec.getNetworks().isEmpty()&&podSpec.getRLimits().isEmpty()&&secretVolumes.isEmpty()){return containerInfo.build();}if(podSpec.getImage().isPresent()&&addExtraParameters&&isTaskContainer){containerInfo.getMesosBuilder().setImage(Protos.Image.newBuilder().setType(Protos.Image.Type.DOCKER).setDocker(Protos.Image.Docker.newBuilder().setName(podSpec.getImage().get())));}if(!podSpec.getNetworks().isEmpty()&&(!useDefaultExecutor||!isTaskContainer)){containerInfo.addAllNetworkInfos(podSpec.getNetworks().stream().map(PodInfoBuilder::getNetworkInfo).collect(Collectors.toList()));}if(!podSpec.getRLimits().isEmpty()&&addExtraParameters){containerInfo.setRlimitInfo(getRLimitInfo(podSpec.getRLimits()));}if(addExtraParameters){for(Protos.Volume secretVolume : secretVolumes){containerInfo.addVolumes(secretVolume);}}return containerInfo.build();}"
3083	"@Override public void onViewCreated(View view,Bundle savedInstanceState){buildGoogleApiClient();if(mGoogleApiClient!=null){mGoogleApiClient.connect();}mIntent=getActivity().getIntent();idMessage=(String)mIntent.getExtras().getSerializable(""idMessage"");tabletSize=getResources().getBoolean(R.bool.isTablet);if(tabletSize){SupportMapFragment mapFragment=(SupportMapFragment)getChildFragmentManager().findFragmentById(R.id.map);mapFragment.getMapAsync(this);}else {}if(savedInstanceState==null){getActivity().getFragmentManager().beginTransaction().add(R.id.container,CardViewFragment.newInstance()).commit();}CardView gMapCard=(CardView)getActivity().findViewById(R.id.gMapCard);gMapCard.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Intent mIntentNext=new Intent(getActivity(),MapActivity.class);    mIntentNext.putExtra(""idMessage"",dataMessage.getMessageId());    mIntentNext.putExtra(""LongitudeMessage"",dataMessage.getLongitude());    mIntentNext.putExtra(""LatitudeMessage"",dataMessage.getLatitude());    startActivity(mIntentNext);  }});new MessageFragment.GetMyMessage().execute();swipeContainer=(SwipeRefreshLayout)getActivity().findViewById(R.id.swipeContainer);swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){  @Override public void onRefresh(){    new MessageFragment.GetChildrenMessages().execute();  }});swipeContainer.setColorSchemeResources(R.color.colorPrimary);inflaterReply=getActivity().getLayoutInflater();builderReply=new AlertDialog.Builder(getActivity());builderReply.setPositiveButton(""Reply"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    EditText editText=(EditText)dialogViewReply.findViewById(R.id.response);    textPost=editText.getText().toString();    new PostMessage().execute();    ((EditText)dialogViewReply.findViewById(R.id.response)).setText("""");  }});builderReply.setNegativeButton(""Back"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    dialog.cancel();  }});builderDelete=new AlertDialog.Builder(getActivity());builderDelete.setPositiveButton(""Yes"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    new DeleteMessage().execute();  }});builderDelete.setNegativeButton(""No"",new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int id){    dialog.cancel();  }});}"
3084	"@Override public void onAsyncInflationFinished(Entry entry){mPendingNotifications.remove(entry.key);if(mNotificationData.get(entry.key)==null&&!entry.row.isRemoved()){addEntry(entry);}}"
3085	"public String getFormattedRejectedRecords(){ final StringBuilder sb=new StringBuilder();sb.append(getRejectedRecordsCount());if(totalRecords!=null){sb.append("" ("").append(getRejectedRecordsPercent()).append(""%)"");}return sb.toString();}"
3086	"@Override public void handleBinaryMessage(UUID from,ByteBuffer message){if(state==ViewerState.PLAYING){if(from==sourceUUID){networkInputStream.addDataToBuffer(message);}else {Log.e(ViewerWebSocketHandler.class.getName(),""Message Came from wrong source : ""+sourceUUID);serverWebSocketHandler.sendStringMessage(from,Constants.FAULT_MESSAGE);}}else {Log.e(ViewerWebSocketHandler.class.getName(),""Viewer Cannot Handle Binary Messages in STOPPED State"");serverWebSocketHandler.sendStringMessage(from,Constants.FAULT_MESSAGE);}}"
3087	"public static long makeTestMove(String moveString,long oldBitBoard,char type){if(moveString.charAt(3)=='P'){if(type==moveString.charAt(4)){return (type=='P')?oldBitBoard^(1L<<(8+(moveString.charAt(0)-'0'))):oldBitBoard^(1L<<(48+(moveString.charAt(0)-'0')));}else {if(type==moveString.charAt(2)){return (moveString.charAt(4)=='P')?oldBitBoard|(1L<<(moveString.charAt(1)-'0')):oldBitBoard|(1L<<(56+(moveString.charAt(1)-'0')));}else {if((oldBitBoard&(1L<<(moveString.charAt(1)-'0')))!=0&&!Character.isUpperCase(type)){return oldBitBoard^(1L<<(moveString.charAt(1)-'0'));}else {if((oldBitBoard&(1L<<(56+(moveString.charAt(1)-'0'))))!=0&&Character.isUpperCase(type)){return oldBitBoard^(1L<<(56+(moveString.charAt(1)-'0')));}else {return oldBitBoard;}}}}}else {if(moveString.charAt(3)=='E'){if(type=='P'&&moveString.charAt(4)=='P'){return (oldBitBoard^(1L<<(24+(moveString.charAt(0)-'0'))))|(1L<<(16+(moveString.charAt(1)-'0')));}else {if(type=='p'&&moveString.charAt(4)=='P'){return oldBitBoard^(1L<<(24+(moveString.charAt(1)-'0')));}else {if(type=='p'&&moveString.charAt(4)=='p'){return (oldBitBoard^(1L<<(32+(moveString.charAt(0)-'0'))))|(1L<<(40+(moveString.charAt(1)-'0')));}else {if(type=='P'&&moveString.charAt(4)=='p'){return oldBitBoard^(1L<<(32+(moveString.charAt(1)-'0')));}else {return oldBitBoard;}}}}}else {if(moveString.charAt(3)=='C'){if(type=='K'&&moveString.charAt(4)=='K'){return (oldBitBoard^(1L<<60))|(1L<<(56+(moveString.charAt(1)-'0')));}else {if(type=='R'&&moveString.charAt(4)=='K'){if(moveString.charAt(1)=='2'){return (oldBitBoard^(1L<<56))|(1L<<59);}else {return (oldBitBoard^(1L<<63))|(1L<<61);}}else {if(type=='k'&&moveString.charAt(4)=='k'){return (oldBitBoard^(1L<<4))|(1L<<(moveString.charAt(1)-'0'));}else {if(type=='r'&&moveString.charAt(4)=='k'){if(moveString.charAt(1)=='2'){return (oldBitBoard^1L)|(1L<<3);}else {return (oldBitBoard^(1L<<7))|(1L<<5);}}else {return oldBitBoard;}}}}}else {if(type==moveString.charAt(4)){return (oldBitBoard^(1L<<((moveString.charAt(0)-'0')*8+(moveString.charAt(1)-'0'))))|(1L<<((moveString.charAt(2)-'0')*8+(moveString.charAt(3)-'0')));}else {if((oldBitBoard&(1L<<((moveString.charAt(2)-'0')*8+(moveString.charAt(3)-'0'))))!=0){return oldBitBoard^(1L<<((moveString.charAt(2)-'0')*8+(moveString.charAt(3)-'0')));}else {return oldBitBoard;}}}}}}"
3088	"@Override public void onFocusChange(View view,boolean hasFocus){if(hasFocus&&!isDisplayingEmailHints&&!hasDismissedEmailHints){isDisplayingEmailHints=true;getEmailHints();}}"
3089	"public void generateMoves(BankOrder bankOrder) throws AxelorException{paymentMode=bankOrder.getPaymentMode();if(!paymentMode.getGenerateMoveAutoFromBankOrder()){return ;}orderTypeSelect=bankOrder.getOrderTypeSelect();senderCompany=bankOrder.getSenderCompany();journal=paymentModeService.getPaymentModeJournal(paymentMode,senderCompany);senderBankAccount=paymentModeService.getPaymentModeAccount(paymentMode,senderCompany);isMultiDate=bankOrder.getIsMultiDate();isMultiCurrency=bankOrder.getIsMultiCurrency();if(orderTypeSelect==BankOrderRepository.ORDER_TYPE_INTERNATIONAL_CREDIT_TRANSFER||orderTypeSelect==BankOrderRepository.ORDER_TYPE_SEPA_CREDIT_TRANSFER){isDebit=true;}else {isDebit=false;}for(BankOrderLine bankOrderLine : bankOrder.getBankOrderLineList()){generateMoves(bankOrderLine);}}"
3090	"public static boolean areItemStacksEqual(ItemStack stackA,ItemStack stackB){return stackA==ItemStack.EMPTY&&stackB==ItemStack.EMPTY||((stackA!=ItemStack.EMPTY&&stackB!=ItemStack.EMPTY)&&isItemStackEqualExcludingStackSize(stackA,stackB));}"
3091	"@Override public boolean shouldExecute(){if(citizen.getDesiredActivity()==EntityCitizen.DesiredActivity.SLEEP&&!citizen.isAtHome()){return true;} final BlockPos homePos=citizen.getHomePosition();if(homePos==null){return true;} final AbstractBuilding homeBuilding=citizen.getColony().getBuilding(homePos);if(citizen.getDesiredActivity()!=EntityCitizen.DesiredActivity.SLEEP){return isCitizenStarving()&&homeBuilding instanceof BuildingHome;}return (isCitizenHungry()&&!((BuildingHome)homeBuilding).isFoodNeeded())||!(homeBuilding instanceof BuildingHome);}"
3092	"public void split(){leaf=false;physEnable();if(type!=Block.WATER&&type!=Block.EMPTY){world.remove(body);physDisable();}for(int i=0;i<4;i++){children[i]=new Node(level+1,tree,world);children[i].parent=this;children[i].type=type;}children[0].physrect.setLocation(physrect.getX(),physrect.getY());children[1].physrect.setLocation(physrect.getX()+physrect.getWidth()*0.5,physrect.getY());children[2].physrect.setLocation(physrect.getX(),physrect.getY()+physrect.getHeight()*0.5);children[3].physrect.setLocation(physrect.getX()+physrect.getWidth()*0.5,physrect.getY()+physrect.getHeight()*0.5);children[0].rect.setLocation(rect.getX(),rect.getY());children[1].rect.setLocation(rect.getX()+rect.getWidth()*0.5,rect.getY());children[2].rect.setLocation(rect.getX(),rect.getY()+rect.getHeight()*0.5);children[3].rect.setLocation(rect.getX()+rect.getWidth()*0.5,rect.getY()+rect.getHeight()*0.5);for(Node child : children){}for(int i=0;i<4;i++){if(children[i].type==Block.EMPTY||children[i].type==Block.WATER){physDisable();}else {physEnable();}}}"
3093	"@Override public Map<String,Set<URI>> findExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllInitiators){long startTime=System.currentTimeMillis();Map<String,Set<URI>> matchingMasks=new HashMap<String,Set<URI>>();Map<URI,ExportMask> maskMap=new HashMap<>();CloseableIterator<CIMInstance> maskInstanceItr=null;try{WBEMClient client=_helper.getConnection(storage).getCimClient();HashMap<String,CIMObjectPath> initiatorPathsMap=_cimPath.getInitiatorToInitiatorPath(storage,initiatorNames);List<String> maskNames=new ArrayList<String>();for(String initiatorName : initiatorPathsMap.keySet()){CIMObjectPath initiatorPath=initiatorPathsMap.get(initiatorName);maskInstanceItr=_helper.getAssociatorInstances(storage,initiatorPath,null,SmisConstants.SYMM_LUN_MASKING_VIEW,null,null,SmisConstants.PS_LUN_MASKING_CNTRL_NAME_AND_ROLE);while(maskInstanceItr.hasNext()){CIMInstance instance=maskInstanceItr.next();String systemName=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_SYSTEM_NAME);if(!systemName.contains(storage.getSerialNumber())){continue;}String name=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_ELEMENT_NAME);CIMProperty<String> deviceIdProperty=(CIMProperty<String>)instance.getObjectPath().getKey(SmisConstants.CP_DEVICE_ID);ExportMask exportMask=ExportMaskUtils.getExportMaskByName(_dbClient,storage.getId(),name);boolean foundMaskInDb=(exportMask!=null);if(!foundMaskInDb){exportMask=new ExportMask();exportMask.setMaskName(name);exportMask.setNativeId(deviceIdProperty.getValue());exportMask.setStorageDevice(storage.getId());exportMask.setId(URIUtil.createId(ExportMask.class));exportMask.setCreatedBySystem(false);}if(!maskNames.contains(name)){List<String> portNames=_helper.getInitiatorsFromLunMaskingInstance(client,instance);Set<Initiator> allInitiators=ExportUtils.getInitiators(portNames,_dbClient);exportMask.addToExistingInitiatorsIfAbsent(portNames);exportMask.addInitiators(allInitiators);Map<String,Integer> volumeWWNs=_helper.getVolumesFromLunMaskingInstance(client,instance);exportMask.addToExistingVolumesIfAbsent(volumeWWNs);List<String> storagePorts=_helper.getStoragePortsFromLunMaskingInstance(client,instance);List<String> storagePortURIs=ExportUtils.storagePortNamesToURIs(_dbClient,storagePorts);exportMask.setStoragePorts(storagePortURIs);maskNames.add(name);}maskMap.put(exportMask.getId(),exportMask);if(foundMaskInDb){ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,exportMask);_dbClient.updateObject(exportMask);}else {_dbClient.createObject(exportMask);}Set<URI> maskURIs=matchingMasks.get(initiatorName);if(maskURIs==null){maskURIs=new HashSet<>();matchingMasks.put(initiatorName,maskURIs);}maskURIs.add(exportMask.getId());}}Set<URI> masksNotContainingAllInitiators=new HashSet<>();if(mustHaveAllInitiators){for(URI exportMaskURI : maskMap.keySet()){ExportMask mask=maskMap.get(exportMaskURI);if(!matchesSearchCriteria(mask,initiatorNames,true)){masksNotContainingAllInitiators.add(exportMaskURI);}}if(!masksNotContainingAllInitiators.isEmpty()){_log.info(""ExportMasks not containing all initiators requested: {}"",masksNotContainingAllInitiators);Iterator<Entry<String,Set<URI>>> matchingMapEntryIterator=matchingMasks.entrySet().iterator();while(matchingMapEntryIterator.hasNext()){Entry<String,Set<URI>> matchingMapEntry=matchingMapEntryIterator.next();Set<URI> maskURIs=matchingMapEntry.getValue();maskURIs.removeAll(masksNotContainingAllInitiators);if(maskURIs.isEmpty()){matchingMapEntryIterator.remove();}}}}StringBuilder builder=new StringBuilder();for(URI exportMaskURI : maskMap.keySet()){ExportMask exportMask=maskMap.get(exportMaskURI);String qualifier=(masksNotContainingAllInitiators.contains(exportMaskURI))?"", but not containing all initiators we're looking for"":SmisConstants.EMPTY_STRING;builder.append(String.format(""\nXM:%s is matching%s: "",exportMask.getMaskName(),qualifier)).append('\n').append(exportMask.toString());}_log.info(builder.toString());}catch(Exception e){String msg=""Error when attempting to query LUN masking information: ""+e.getMessage();_log.error(MessageFormat.format(""Encountered an SMIS error when attempting to query existing exports: {0}"",msg),e);throw SmisException.exceptions.queryExistingMasksFailure(msg,e);}finally{if(maskInstanceItr!=null){maskInstanceItr.close();}long totalTime=System.currentTimeMillis()-startTime;_log.info(String.format(""findExportMasks took %f seconds"",(double)totalTime/(double)1000));}return matchingMasks;}"
3094	"public void move(Card c,int nRows,int nCol){if(c.getCardFunc()==Card.specFunc.none||c.getCardFunc()==Card.specFunc.drawAgain){if(c.getType()==1||c.getType()==2){if(Row==startRow&&Column==startColumn){if(team==Sorry.Owner.Player1){Row-=1;}else {if(team==Sorry.Owner.Player2){Column+=1;}else {if(team==Sorry.Owner.Player3){Row+=1;}else {Column-=1;}}}if(c.getType()==2){moveDir(nRows,nCol,1);}}else {moveDir(nRows,nCol,c.getType());}}else {moveDir(nRows,nCol,c.getType());}}else {if(c.getCardFunc()==Card.specFunc.backwards){moveDir(nRows,nCol,-c.getType());}}}"
3095	"public CollisionMap(String filename) throws IOException{BufferedImage img=ImageIO.read(new File(filename));image=img;for(int i=0;i<480;i++){for(int j=0;j<640;j++){Map[i][j]=img.getRGB(i,j)!=-1;}}System.out.println(""Finished making map."");}"
3096	"private boolean checkAccessedViaSegmentRefs(CtExpression<?> target){if(target==null){return true;}if(target instanceof CtFieldAccess){CtFieldAccess fieldAccess=(CtFieldAccess)target;CtField field=fieldAccess.getVariable().getDeclaration();if(field!=null&&field.getAnnotation(StageRef.class)!=null){return checkAccessedViaSegmentRefs(fieldAccess.getTarget());}}return false;}"
3097	"@Override public boolean onPrepareOptionsMenu(Menu menu){if(albumsMode){editMode=getAlbums().getSelectedCount()!=0;menu.setGroupVisible(R.id.album_options_menu,editMode);menu.setGroupVisible(R.id.photos_option_men,false);menu.findItem(R.id.all_photos).setVisible(true);}else {if(!all_photos){editMode=getAlbum().areMediaSelected();menu.setGroupVisible(R.id.photos_option_men,editMode);menu.setGroupVisible(R.id.album_options_menu,!editMode);menu.findItem(R.id.all_photos).setVisible(false);}else {editMode=selectedMedias.size()!=0?true:false;menu.setGroupVisible(R.id.photos_option_men,editMode);menu.setGroupVisible(R.id.album_options_menu,!editMode);menu.findItem(R.id.all_photos).setVisible(false);}}togglePrimaryToolbarOptions(menu);updateSelectedStuff();visible=getAlbum().getSelectedCount()>0;menu.findItem(R.id.action_copy).setVisible(visible);menu.findItem(R.id.action_move).setVisible(visible||editMode);menu.findItem(R.id.excludeAlbumButton).setVisible(editMode&&!all_photos);menu.findItem(R.id.select_all).setVisible(editMode);menu.findItem(R.id.delete_action).setVisible((!albumsMode||editMode)&&(!all_photos||editMode));menu.findItem(R.id.hideAlbumButton).setVisible(!all_photos);menu.findItem(R.id.clear_album_preview).setVisible(!albumsMode&&getAlbum().hasCustomCover());menu.findItem(R.id.renameAlbum).setVisible(((albumsMode&&getAlbums().getSelectedCount()==1)||(!albumsMode&&!editMode))&&!all_photos);if(getAlbums().getSelectedCount()==1){menu.findItem(R.id.set_pin_album).setTitle(getAlbums().getSelectedAlbum(0).isPinned()?getString(R.string.un_pin):getString(R.string.pin));}menu.findItem(R.id.set_pin_album).setVisible(albumsMode&&getAlbums().getSelectedCount()==1);menu.findItem(R.id.setAsAlbumPreview).setVisible(!albumsMode&&!all_photos);menu.findItem(R.id.affixPhoto).setVisible(!albumsMode&&(getAlbum().getSelectedCount()>1)||selectedMedias.size()>1);return super.onPrepareOptionsMenu(menu);}"
3098	"public IMessage fetchFirstInRange(){if(start.getMessage()!=null){return start.getMessage();}List<IMessage> cached=channel.messages.stream().sorted(MessageComparator.DEFAULT).collect(Collectors.toList());if(chronological){for(int i=0;i<cached.size();i++){if(!checkStart(cached.get(i))){return i==0?null:cached.get(i-1);}}}else {for(int i=0;i<cached.size();i++){if(checkStart(cached.get(i))){return cached.get(i);}}}long last=cached.isEmpty()?0:cached.get(cached.size()-1).getLongID();long fLast=last;IMessage[] chunk=RequestBuffer.request(() -> {  return channel.requestHistory(fLast,null,Channel.MESSAGE_CHUNK_COUNT);}).get();while(chunk.length!=0){if(chronological){for(int i=0;i<chunk.length;i++){if(!checkStart(chunk[i])){return i==0?null:chunk[i-1];}}}else {for(int i=0;i<cached.size();i++){if(checkStart(chunk[i])){return chunk[i];}}}last=chunk[chunk.length-1].getLongID();long lastF=last;chunk=RequestBuffer.request(() -> {  return channel.requestHistory(lastF,null,Channel.MESSAGE_CHUNK_COUNT);}).get();}return null;}"
3099	"public void addPrimaryKeysIfSourced(){ final Column[] primaryKeyColumns=getTable().getPrimaryKeys();if(primaryKeyColumns==null||primaryKeyColumns.length==0){logger.info(""No primary keys defined for table {}, not pre-selecting primary keys"",getTable().getName());return ;} final Collection<InputColumn<?>> sourceInputColumns=getAnalysisJob().getSourceColumns(); final List<Column> sourceColumns=CollectionUtils.map(sourceInputColumns,InputColumn::getPhysicalColumn);for(Column primaryKeyColumn : primaryKeyColumns){if(!sourceColumns.contains(primaryKeyColumn)){logger.info(""Primary key column {} not added to source columns, not pre-selecting primary keys"");return ;}}addPhysicalColumns(primaryKeyColumns);}"
3100	"public static NetworkTypes findNetworkType(INetworkType o){if(o.getNt()==NetworkTypes.Player){return NetworkTypes.Player;}else {if(o.getNt()==NetworkTypes.Enemy){return NetworkTypes.Enemy;}}return null;}"
3101	"private boolean getNextEntryURL(String allText,int startIndex,int entryNumber,Map<String,JLabel> entries){String toFind=""<strong>""+entryNumber+""</strong><br>"";int index=allText.indexOf(toFind,startIndex);int endIndex=allText.length();if(index>=0){piv=index+1;String text=allText.substring(index,endIndex);Matcher fullCitation=ACMPortalFetcher.fullCitationPattern.matcher(text);if(fullCitation.find()){String link=getEntryBibTeXURL(fullCitation.group(1));String part;int endOfRecord=text.indexOf(""<div class=\""abstract2\"">"");if(endOfRecord>0){StringBuilder sb=new StringBuilder();part=text.substring(0,endOfRecord);try{save(""part""+entryNumber+"".html"",part);}catch(IOException e){e.printStackTrace();}String authMarker=""<div class=\""authors\"">"";int authStart=text.indexOf(authMarker);if(authStart>=0){int authEnd=text.indexOf(""</div>"",authStart+authMarker.length());if(authEnd>=0){sb.append(""<p>"").append(text.substring(authStart,authEnd)).append(""</p>"");}}Matcher titM=ACMPortalFetcher.titlePattern.matcher(part);if(titM.find()){sb.append(""<p>"").append(titM.group(1)).append(""</p>"");}Matcher mY=ACMPortalFetcher.monthYearPattern.matcher(part);if(mY.find()){sb.append(""<p>"").append(mY.group(1)).append(""</p>"");}part=sb.toString();}else {part=link;}JLabel preview=new JLabel(""<html>""+part+""</html>"");preview.setPreferredSize(new Dimension(750,100));entries.put(link,preview);return true;}else {System.out.printf(""Citation Unmatched %d%n"",entryNumber);System.out.printf(text);return false;}}return false;}"
3102	"public void execute(){if(!completed){if(pickUpJob){if(hasMaterial(material)){completed=true;return ;}else {if(worker.onSpot(material.getX(),material.getY())){worker.pickUp(material);}else {if(worker.movement==null){if(worker.getPath(material)!=null){worker.movement=worker.getPath(material);return ;}else {completed=true;return ;}}else {worker.move();}}}}else {if(worker.onSpot(xloc,yloc)){worker.drop();completed=true;return ;}else {if(worker.movement==null){if(worker.getPath(xloc>>4,yloc>>4)!=null){worker.movement=worker.getPath(xloc>>4,yloc>>4);return ;}else {worker.drop();completed=true;return ;}}else {worker.move();}}}}}"
3103	"public static void checkUsedLinksSize(){HashSet<String> set=getUsedLinks();int iterations=set.size()-getImageHistorySize();if(iterations>0){List<String> linkList=new ArrayList<String>();linkList.addAll(set);Collections.sort(linkList,new Comparator<String>(){  @Override public int compare(  String lhs,  String rhs){    try {      long first=Long.parseLong(lhs.substring(lhs.lastIndexOf(""Time:"")));      long second=Long.parseLong(rhs.substring(lhs.lastIndexOf(""Time:"")));      return (int)(first - second);    } catch (    Exception e) {    }    return 0;  }});for(int i=0;i<iterations;i++){linkList.remove(0);}HashSet<String> newSet=new HashSet<String>(linkList);prefs.edit().putStringSet(""used_history_links"",newSet).commit();}}"
3104	"public boolean isOperator(String str){return (str.equals(c.getString(R.string.button_plus))||str.equals(c.getString(R.string.button_minus))||str.equals(c.getString(R.string.button_multiply))||str.equals(c.getString(R.string.button_divide)));}"
3105	"public boolean isHidden(){return hidden;}"
3106	"@Override protected Boolean doInBackground(Integer... params){Boolean res=false; final String authKey=_session.getAuthKey(); final String url=Config.getInstance().getWebServiceUrl(_context);try{ final HashMap<String,String> postParams=new HashMap<>();postParams.put(""action"",""mob_readcase"");postParams.put(""envelope_id"",String.valueOf(_case.envelopeId)); final WebResponse response=WebServiceClient.postCall(url,postParams,authKey);if(response.result){ final JSONParser jParser=new JSONParser(); final JSONObject json=(JSONObject)jParser.parse(response.content); final Object error=json.get(""error""); final JSONObject result=(JSONObject)json.get(""result"");if(null!=error){_error=error.toString();_logger.e(TAG,_context,""error returned from details upload :""+_error);}else {if(null!=result){ final AddInfoList ail=GlobalDataHelper.getAddInfoList(_context);if(null!=ail){ final JSONArray details=(JSONArray)result.get(""detail_list"");if(null!=details){ final List<AddInfo> detList=JsonParserHelper.readDetails(_case,details);Collections.sort(detList,new Comparator<AddInfo>(){  @Override public int compare(  final AddInfo object1,  final AddInfo object2){    return object1.compareTo(object2);  }});ail.addList(InfoTypeEnum.aidetail,detList);} final JSONArray precs=(JSONArray)result.get(""prec_list"");if(null!=precs){ final List<AddInfo> precList=JsonParserHelper.readCasePreconditions(_case,precs);ail.addList(InfoTypeEnum.precond,precList);}GlobalDataHelper.setAddInfoList(_context,ail);} final CommonAdditionalInfoList caiList=CommonAdditionalInfoList.getInstance();caiList.clear(); final List<CommonAdditionalInfo> list=JsonParserHelper.readCommonAdditionalInfo(result);caiList.getAllInfo().addAll(list);for(CommonAdditionalInfo cai : list){if(cai.isImageMissing){uploadImage(cai.infoType,cai,cai.reference);}}}}res=true;_logger.d(TAG,_context,""uploaded details"");}}catch(Exception e){e.printStackTrace();_logger.e(TAG,_context,e);_error=e.getMessage();}return res;}"
3107	"boolean isEmpty(){return left==0&&right==0;}"
3108	"public boolean isPersistent(String id){if(id==null){return false;}Transaction transaction=getCurrentTransaction(false);if(transaction==null){return entityStore.getById(id)!=null;}return transaction.getById(id)!=null;}"
3109	"@Override public Boolean visit(Plus binary){Expression left=binary.getLeftExpression();Expression right=binary.getRightExpression();boolean resultL=left.accept(this);boolean resultR=right.accept(this);boolean result=true;if((resultL&&resultR)==true){if(left.getType(this).isEqual(new IntType())||left.getType(this).isEqual(new StrType())){result=checkMatchThisLevel(right,left.getType(this));}else {if(right.getType(this).isEqual(new BoolType())){Error errorLeft=new Error(Error.Type.MISMATCH,left.getPosition().getStartLine(),left.toString(),""Int|Str"");messageManager.addError(errorLeft);Error errorRight=new Error(Error.Type.MISMATCH,right.getPosition().getStartLine(),right.toString(),""Int|Str"");messageManager.addError(errorRight);}else {result=checkMatchThisLevel(left,right.getType(this));}result=false;}}return result;}"
3110	"public String writeAnswers(HashMap qgs,boolean toFile,FileOutputStream f,boolean incomplete){String total="""";String unanswered=""REQUIRED QUESTIONS MUST BE FILLED OUT \n"";Boolean use_un=false;Set<String> keys=qgs.keySet();for(String key : keys){String name=""Section: ""+key+""\n"";total+=name;List qs=(List)qgs.get(key);for(int i=0;i<qs.size();i++){LinearLayout q=(LinearLayout)qs.get(i);TextView text=(TextView)q.findViewWithTag(""text"");String question=(String)text.getText();String line="""";String tag="""";try{tag=(String)q.getTag();}catch(Exception e){System.out.println(""there's no tag?"");}System.out.println(tag);if(tag.equals(""T"")||tag.equals(""N"")){EditText editText=(EditText)q.findViewWithTag(""answer"");if(editText.getText().toString().equals("""")&&question.endsWith(""*"")&&!incomplete){System.out.println(""oops"");return """";}else {if(editText.getText().toString().equals("""")&&question.endsWith(""*"")){unanswered+=""\n""+name+question+""\n"";use_un=true;question=question.toUpperCase();}line=question+"": ""+editText.getText();System.out.println(line);}}else {if(tag.equals(""SC"")||tag.equals(""LC"")){line=question+"": "";RadioGroup rg=(RadioGroup)q.findViewWithTag(""choices"");int id=rg.getCheckedRadioButtonId();if(id==-1&&!incomplete){return """";}else {RadioButton rb=(RadioButton)rg.getChildAt(id);System.out.println(rg.getChildAt(id));System.out.println(rg.getChildCount());System.out.println(id);try{if(id==-1){unanswered+=""\n""+name+question+""\n"";use_un=true;line=line.toUpperCase();}line+=rb.getText();System.out.println(line);}catch(Exception e){System.out.println(""here"");}}}else {if(tag.equals(""MC"")){line=question+"": "";System.out.println(q.getChildCount());for(int j=0;j<q.getChildCount();j++){System.out.println(q.getChildAt(j).getTag());String ctag=(String)q.getChildAt(j).getTag();if(ctag.equals(""choice"")){CheckBox cb=(CheckBox)q.getChildAt(j);if(cb.isChecked()){line+=cb.getText()+"", "";}}}if(line.length()>20){line=line.substring(0,line.length()-2);}System.out.println(line);}else {if(tag.equals(""M"")){line=question+"": ""+LOCATION;}else {if(tag.equals(""C"")){line=question+"": "";if(!mImageView.equals(null)){line+=""JPEG_""+timeStamp+"".jpeg"";}}}}}}if(toFile){try{line=line+""~~"";total+=line;f.write(line.getBytes());}catch(Exception e){}}else {line=line+""\n"";total+=line;}}}if(use_un){return unanswered;}return total;}"
3111	"public Force(){power=0;isUpwards=randomWithRange(0,1)==0?false:true;isGravity=false;}"
3112	"protected List<String> parseSQLOutput(String output){List<String> rows=new ArrayList<>();String[] lines=output.split(""\n"");String[] tokens=StringUtils.split(lines[0],""\\+"");List<Pair> pairs=new ArrayList<>();int start=0;int end=0;for(String token : tokens){start=end+1;end=start+token.length();pairs.add(new Pair(start,end));}for(String line : lines){if(!line.matches(""(\\+\\-+)+\\+"")&&!line.contains(""only showing"")){List<String> cells=new ArrayList<>();for(Pair pair : pairs){cells.add(line.substring(pair.start,pair.end).trim());}rows.add(StringUtils.join(cells,""\t""));}}return rows;}"
3113	"@NonNull @Override public JsonElement preInflate(JsonElement json){if(json.isJsonObject()){JsonArray formatted=new JsonArray();JsonObject src=null;if(json.getAsJsonObject().has(""src"")){src=json.getAsJsonObject().get(""src"").getAsJsonObject();}else {if(json.getAsJsonObject().get(""class"").getAsString().equalsIgnoreCase(""ImageDescriptor"")){src=json.getAsJsonObject();}}if(src!=null){for(Map.Entry<String,JsonElement> stringJsonElementEntry : src.entrySet()){if(!stringJsonElementEntry.getKey().equals(""class"")){JsonElement image=src.get(stringJsonElementEntry.getKey());if(image==null||TextUtils.isEmpty(image.getAsString())){continue;}JsonObject newImageSrc=new JsonObject();newImageSrc.addProperty(""class"",DestinationLinkProperty.CLASS_NAME);newImageSrc.addProperty(""destination"",image.getAsString());JsonObject newImageDimensions=new JsonObject();int w=0,h=0;InputStream imageStream=UiSettings.getInstance().getFileFactory().loadFromUri(Uri.parse(image.getAsString()));if(imageStream!=null){BitmapFactory.Options opts=new BitmapFactory.Options();opts.inJustDecodeBounds=true;BitmapFactory.decodeStream(imageStream,new Rect(0,0,0,0),opts);w=opts.outWidth;h=opts.outHeight;}if(w==0&&h==0){if(stringJsonElementEntry.getKey().equals(""x0.75"")){w=512;h=512;}else {if(stringJsonElementEntry.getKey().equals(""x1"")){w=1024;h=1024;}else {if(stringJsonElementEntry.getKey().equals(""x1.5"")){w=1356;h=1356;}else {if(stringJsonElementEntry.getKey().equals(""x2"")){w=2048;h=2048;}}}}}newImageDimensions.addProperty(""width"",w);newImageDimensions.addProperty(""height"",h);JsonObject newImage=new JsonObject();newImage.addProperty(""class"",ImageProperty.CLASS_NAME);newImage.add(""src"",newImageSrc);newImage.add(""dimensions"",newImageDimensions);formatted.add(newImage);}}return formatted;}}return super.preInflate(json);}"
3114	"private int compareDateStrings(String dateString1,String dateString2){SimpleDateFormat dateFormat=new SimpleDateFormat(""dd/MM/yyyy hh:mm"");Date date1=null,date2=null;try{date1=dateFormat.parse(dateString1);date2=dateFormat.parse(dateString2);}catch(ParseException pe){assert (false):""The date format should not be invalid."";}if(date1==null&&date2==null){return 0;}else {if(date1==null){return 1;}else {if(date2==null){return -1;}}}return date1.compareTo(date2);}"
3115	"public void refreshDir(){docDisplay.clear();if(searchString!=""""){for(Physician doc : docs){if(Pattern.compile(Pattern.quote(searchString),Pattern.CASE_INSENSITIVE).matcher(doc.getFirstName()+"" ""+doc.getLastName()).find()){docDisplay.add(doc);}}}else {docDisplay.addAll(docs);}}"
3116	"public boolean updateFreemiumRoutine(long id,Routine r){ContentValues v=new ContentValues();v.put(KEY_RO_NAME,r.getName());v.put(KEY_RO_GYM,r.getNameGym());v.put(KEY_RO_S,r.getSeries());v.put(KEY_RO_RT,r.getRelxTime());v.put(KEY_RO_R,r.getRep());v.put(KEY_RO_OBJ,r.getObjective());v.put(KEY_RO_PREMIUM,false);return Db.update(Table_Routine,v,KEY_RO_ID+""=""+id,null)>0;}"
3117	"private String getGroup(boolean isJson,MetaField metaField,MetaJsonField jsonField,String dateType,String target) throws AxelorException{if(!isJson&&metaField==null||isJson&&jsonField==null){return null;}String typeName=null;String group=null;Object object=null;StringBuilder parent=new StringBuilder(""self"");if(isJson){group=jsonField.getName();typeName=filterSqlService.getSqlType(jsonField.getType());if(target!=null){object=filterSqlService.parseJsonField(jsonField,target,joins,parent);}}else {group=filterSqlService.getColumn(metaField);typeName=filterSqlService.getSqlType(metaField.getTypeName());if(target!=null){object=filterSqlService.parseMetaField(metaField,target,joins,parent,true);}}if(object!=null){String[] sqlField=filterSqlService.getSqlField(object,parent.toString());typeName=sqlField[1];group=sqlField[0];}if(dateType!=null){group=getDateTypeGroup(dateType,typeName,group);}return group;}"
3118	"public boolean isUnlockingWithFingerprintAllowed(){return mStrongAuthTracker.isUnlockingWithFingerprintAllowed()&&!hasFingerprintUnlockTimedOut(sCurrentUser);}"
3119	"public static final PSScript compile(InputStream input,PSGlobals globals,PSClassLoader classLoader,String name,ClassRepository repository,boolean eval) throws PSCompilerException{CodeReader sourceBase=new CodeReader(input);CompilerUnit compiler=new CompilerUnit(sourceBase,classLoader,name,globals,repository);PSScript script=compiler.compile(eval);return script;}"
3120	"@Override public void onVehicleBlockRedstoneEvent(TweakVehicleBlockRedstoneEvent event){if(event.getNewCurrent()==0){activated.remove(event.getBlock().getLocation());}if(event.getBlock().getType()==Material.DETECTOR_RAIL&&!activated.contains(event.getBlock().getLocation())){event.setNewCurrent(0);}}"
3121	"private Signature prepareSignatureInfo(SigningInfo params,Name[] keyName) throws Error,InvalidSigningInfoError,Error{PibIdentity identity=null;PibKey key=null;if(params.getSignerType()==SignerType.NULL){try{identity=pib_.getDefaultIdentity();}catch(Pib.Error ex){keyName[0]=SigningInfo.getDigestSha256Identity();return new DigestSha256Signature();}}else {if(params.getSignerType()==SignerType.ID){identity=params.getPibIdentity();if(identity==null){try{identity=pib_.getIdentity(params.getSignerName());}catch(Pib.Error ex){throw new InvalidSigningInfoError(""Signing identity `""+params.getSignerName().toUri()+""` does not exist"");}}}else {if(params.getSignerType()==SignerType.KEY){key=params.getPibKey();if(key==null){Name identityName=PibKey.extractIdentityFromKeyName(params.getSignerName());try{identity=pib_.getIdentity(identityName);key=identity.getKey(params.getSignerName());identity=null;}catch(Pib.Error ex){throw new InvalidSigningInfoError(""Signing key `""+params.getSignerName().toUri()+""` does not exist"");}}}else {if(params.getSignerType()==SignerType.CERT){Name identityName=CertificateV2.extractIdentityFromCertName(params.getSignerName());try{identity=pib_.getIdentity(identityName);key=identity.getKey(CertificateV2.extractKeyNameFromCertName(params.getSignerName()));}catch(Pib.Error ex){throw new InvalidSigningInfoError(""Signing certificate `""+params.getSignerName().toUri()+""` does not exist"");}}else {if(params.getSignerType()==SignerType.SHA256){keyName[0]=SigningInfo.getDigestSha256Identity();return new DigestSha256Signature();}else {throw new InvalidSigningInfoError(""Unrecognized signer type"");}}}}}if(identity==null&&key==null){throw new InvalidSigningInfoError(""Cannot determine signing parameters"");}if(identity!=null&&key==null){try{key=identity.getDefaultKey();}catch(Pib.Error ex){throw new InvalidSigningInfoError(""Signing identity `""+identity.getName().toUri()+""` does not have default certificate"");}}Signature signatureInfo;if(key.getKeyType()==KeyType.RSA){signatureInfo=new Sha256WithRsaSignature();}else {if(key.getKeyType()==KeyType.ECDSA){signatureInfo=new Sha256WithEcdsaSignature();}else {throw new KeyChain.Error(""Unsupported key type"");}}KeyLocator keyLocator=KeyLocator.getFromSignature(signatureInfo);keyLocator.setType(KeyLocatorType.KEYNAME);keyLocator.setKeyName(key.getName());keyName[0]=key.getName();return signatureInfo;}"
3122	"private Map<String,List<String>> populateFilters(List<String> serviceNames,List<String> operationNames,List<String> consumerNames){Map<String,List<String>> filters=new HashMap<String,List<String>>();if(!serviceNames.isEmpty()){filters.put(ResourceEntity.SERVICE.value(),serviceNames);}if(!operationNames.isEmpty()){filters.put(ResourceEntity.OPERATION.value(),operationNames);}if(!consumerNames.isEmpty()){filters.put(ResourceEntity.CONSUMER.value(),consumerNames);}return filters;}"
3123	"private void cacheNext() throws IOException{if(mNext!=null){return ;}try{while(stream.available()>0){if(mObjectFactory==null){InputStream in=PGPUtil.getDecoderStream(stream);mObjectFactory=new PGPObjectFactory(in,new JcaKeyFingerprintCalculator());}Object obj;while((obj=mObjectFactory.nextObject())!=null){Log.d(Constants.TAG,""Found class: ""+obj.getClass());if(!(obj instanceof PGPKeyRing)){Log.i(Constants.TAG,""Skipping object of bad type ""+obj.getClass().getName()+"" in stream"");continue;}mNext=new UncachedKeyRing((PGPKeyRing)obj);return ;}mObjectFactory=null;}}catch(ArrayIndexOutOfBoundsException e){throw new IOException(e);}}"
3124	"private static void walk_distence(){error_step_left=left.get_distence()-target_step;error_step_right=right.get_distence()-target_step;if((int)Math.abs(error_step_left)>error_range){left_speed=(error_step_left*x);}else {left_speed=0;}if((int)Math.abs(error_step_right)>error_range){right_speed=error_step_right*x;}else {right_speed=0;}if(Math.abs(left_speed)>max_speed){if(left_speed>0){left_speed=max_speed;}else {left_speed=-max_speed;}isTargetdistence=false;}else {if(left_speed==0){isTargetdistence=true;}}if(Math.abs(right_speed)>max_speed){if(right_speed>0){right_speed=max_speed;}else {right_speed=-max_speed;}isTargetdistence=false;}else {if(right_speed==0){isTargetdistence=true;}}}"
3125	"@Override public void onMenuVisibilityChanged(boolean isVisible){if(!isVisible){mAppMenuPropertiesDelegate.onMenuDismissed();}}"
3126	"protected BitSet getFilteredIndexes(DimensionColumnDataChunk dimensionColumnDataChunk,int numerOfRows){if(dimensionColumnDataChunk.isNoDicitionaryColumn()&&dimensionColumnDataChunk instanceof VariableLengthDimensionDataChunk){return setDirectKeyFilterIndexToBitSet((VariableLengthDimensionDataChunk)dimensionColumnDataChunk,numerOfRows);}else {if(dimensionColumnDataChunk.isExplicitSorted()&&dimensionColumnDataChunk instanceof FixedLengthDimensionDataChunk){return setFilterdIndexToBitSetWithColumnIndex((FixedLengthDimensionDataChunk)dimensionColumnDataChunk,numerOfRows);}}return setFilterdIndexToBitSet(dimensionColumnDataChunk,numerOfRows);}"
3127	"public boolean setIPv6(boolean ipv6){return ctx.set(zmq.ZMQ.ZMQ_IPV6,ipv6?1:0);}"
3128	"public Result swapRuleSet(Context context,Game g){if(isSpanishGame){isSpanishGame=false;g=new SpanishGame();g.buildDeck();g.shuffle();g.dealFour();}else {isSpanishGame=true;g=new Game();g.buildDeck();g.shuffle();g.dealFour();}return Results.json().render(g);}"
3129	"public DISTRIBUTED_EXECUTION_MODE getDistributedExecutionMode(){return indexName!=null||query!=null?DISTRIBUTED_EXECUTION_MODE.LOCAL:DISTRIBUTED_EXECUTION_MODE.REPLICATE;}"
3130	"public void SetRadioText(String text1,String text2){if((text1==App.GS.RADIO_BLANK_STATION_NAME)||(text1.equals(null))||(text1.isEmpty())||(text1.equals(""""))||(text1.equals(""null""))){isShowSecondLine=false;Text1=String.format(""%1$s MHz"",text2);Text2="""";}else {isShowSecondLine=true;Text1=text1;Text2=String.format(""%1$s MHz"",text2);}}"
3131	"public boolean canMove(int startX,int startY,int destinationX,int destinationY){boolean retBoo=false;if((startX-destinationX)==2||(startX-destinationX)==-2){if((startY-destinationY)==1||(startY-destinationY)==-1){retBoo=true;}}if((startX-destinationX)==1||(startX-destinationX)==-1){if((startY-destinationY)==2||(startY-destinationY)==-2){retBoo=true;}}return retBoo&&noPieceThere(destinationX,destinationY,Woo.currentBoard);}"
3132	"@Override public void setObject(Serializable object){if(object instanceof String&&((String)object).equalsIgnoreCase(""..."")){property.setValueAt("""",valueIndex);}else {property.setValueAt(object,valueIndex);}}"
3133	"private static String validate(Details details,RightCurlyOption bracePolicy,boolean shouldStartLine,String targetSourceLine){ final DetailAST rcurly=details.rcurly; final DetailAST lcurly=details.lcurly; final DetailAST nextToken=details.nextToken; final boolean shouldCheckLastRcurly=details.shouldCheckLastRcurly;String violation="""";if(bracePolicy==RightCurlyOption.SAME&&!hasLineBreakBefore(rcurly)&&lcurly.getLineNo()!=rcurly.getLineNo()){violation=MSG_KEY_LINE_BREAK_BEFORE;}else {if(shouldCheckLastRcurly){if(rcurly.getLineNo()==nextToken.getLineNo()){violation=MSG_KEY_LINE_ALONE;}}else {if(bracePolicy==RightCurlyOption.SAME&&rcurly.getLineNo()!=nextToken.getLineNo()){violation=MSG_KEY_LINE_SAME;}else {if(bracePolicy==RightCurlyOption.ALONE&&!isAloneOnLine(details)&&!isEmptyBody(lcurly)){violation=MSG_KEY_LINE_ALONE;}else {if(bracePolicy==RightCurlyOption.ALONE_OR_SINGLELINE&&!isAloneOnLine(details)&&!isSingleLineBlock(details)&&!isAnonInnerClassInit(lcurly)&&!isEmptyBody(lcurly)){violation=MSG_KEY_LINE_ALONE;}else {if(shouldStartLine){ final boolean startsLine=CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(),targetSourceLine);if(!startsLine&&lcurly.getLineNo()!=rcurly.getLineNo()){violation=MSG_KEY_LINE_NEW;}}}}}}}return violation;}"
3134	"@Override public void onNext(HttpResult<List<CookerBean>> value){if(value==null||value.getData()==null||value.getData().size()<=0||value.getResultCode()!=200){mView.showDialog(false);mView.showMessage(MESSAGE_DELETE_COOKER_FAILED,null);return ;}boolean success=mDbManager.deleteCooker(DbManager.KEY_COOKER_ID,cookerId);if(!success){mView.showDialog(false);mView.showMessage(MESSAGE_DELETE_DB_COOKER_FAILED,null);return ;}mView.removeCooker(value.getData().get(0));Log.i(TAG,""onNext: ""+value.toString());}"
3135	"@Override public void update(){super.update();if(!((omega>0&&theta<=rangeMax)||(omega<0&&theta>=rangeMin))){theta=RangeUtil.limit(theta,rangeMin,rangeMax);if(((alpha>0&&theta>rangeMax)||(alpha<0&&theta<rangeMin))){omega=0;}}}"
3136	"private boolean match(String n1,String n2,int indexChars){if(n1.length()!=n2.length()){return false;}return (n1.substring(0,n1.length()-indexChars).equals(n2.substring(0,n2.length()-indexChars)));}"
3137	"public void sendError(Exception e) throws IOException{if(e instanceof HttpError){sendError(((HttpError)e).getHttpCode(),((HttpError)e).getReason(),e.getMessage());}else {sendException(e);}}"
3138	"public boolean enterScene(Scene scene,int x,int y,int facing){if(origin!=null){I.complain(""Already in scene!"");}this.origin=scene.tileAt(x,y);this.facing=facing;if(origin==null){I.complain(""Origin outside bounds!"");} final PropType kind=kind(); final boolean thin=kind.thin(),blocks=kind.blockLevel()>0;int faceAt=thin?((facing+6)%8):CENTRE;for(Tile under : tilesUnder(kind,scene,x,y,facing,0)){if(under==null){continue;}Prop other=under.filling(faceAt);if(blocks&&!trumpedBy(kind,other)){if(other!=null){other.exitScene();}under.setFills(faceAt,this);}under.setInside(this,true);}scene.props.add(this);return true;}"
3139	"@Override public void onClick(View v){if(isConfig){String driverId=loginEditText.getText().toString().trim();if(driverId.equals("""")){return ;}provider.onDriverIdProvided(driverId);TCPClient tcpClient=TCPClient.getInstance(getActivity());if(tcpClient.sendBytes(MessengerClient.getLoginMessage(location,driverId,getActivity()))){errorTextView.setText(R.string.waiting_response);errorTextView.setVisibility(View.VISIBLE);}else {Toast.makeText(getActivity(),R.string.error_sending_message,Toast.LENGTH_LONG).show();}View view=getActivity().getCurrentFocus();Utils.hideKeyboard(view);}}"
3140	"public boolean equipItem(int location){if(mySack.itemAt(location).getClassName()==""Equipable""){myArmory.equip(mySack.removeItem(location));return true;}else {return false;}}"
3141	"public int findDuplicate(ArrayList<OrderDetailDTO> dataModels,ProductDTO productDTO){for(int index=0,length=dataModels.size();index<length;index++){if(dataModels.get(index).getProduct().getId()==productDTO.getId()){return index;}}return -1;}"
3142	"public void top(EntityPlayerMP player) throws CommandException{WarpPoint point=new WarpPoint(player);point.setY(player.worldObj.getActualHeight());while(player.worldObj.getBlockState(point.getBlockPos()).getBlock()==Blocks.air){point.setY(point.getY()-1);}point.setY(point.getY()+1);TeleportHelper.teleport(player,point);}"
3143	"public boolean cando_all(Block block,Player player,String modeevent){if(wgapi==null){wgapi=getWorldGuard();if(wgapi==null){return false;}}boolean wg=wgapi.canBuild(player,block);return wg;}"
3144	"public void mouseReleased(MouseEvent e){mouseX=e.getX();mouseY=e.getY();if(!gameOver){if(mouseX>207&&mouseX<592){if(!pressed){if(mouseY>611&&mouseY<711&&redTurn){if(mouseX<398){selectedCard=1;cardPressed=true;setLegalMoves();}else {if(mouseX>401){selectedCard=2;cardPressed=true;setLegalMoves();}}}else {if(mouseY>80&&mouseY<180&&!redTurn){if(mouseX<398){selectedCard=1;cardPressed=true;setLegalMoves();}else {if(mouseX>401){selectedCard=2;cardPressed=true;setLegalMoves();}}}}}else {if(mouseY>203&&mouseY<588){pressed=false;for(int i=0;i<5;i++){if(mouseX>207+77*(i)){currentPos.setCol(i);}if(mouseY>203+77*(i)){currentPos.setRow(i);}}if(cardPressed){if(checkLegalMove()){move();}}}else {currentPiece=null;currentPos=new Position(0,0);}}}else {currentPiece=null;currentPos=new Position(0,0);}pressed=false;panel.repaint();}else {if(mouseX>300&&mouseX<500){if(mouseY>350&&mouseY<450){returnToMenu();}}}}"
3145	"private List<MigrationCallbackDiff> getListDiff(List<String> baseCallbacks,List<String> list){if(baseCallbacks==null||baseCallbacks.size()<=0){return MigrationCallbackDiff.build(ADD_CALLBACK,list);}if(list==null||list.size()<=0){return MigrationCallbackDiff.build(REMOVE_CALLBACK,baseCallbacks);}List<MigrationCallbackDiff> diffs=new ArrayList<MigrationCallbackDiff>();for(String callback : baseCallbacks){if(!list.contains(callback)){diffs.add(MigrationCallbackDiff.build(REMOVE_CALLBACK,callback));}}for(String callback : list){if(!baseCallbacks.contains(callback)){diffs.add(MigrationCallbackDiff.build(ADD_CALLBACK,callback));}}return diffs;}"
3146	"public boolean updateJoinController(Stream stream,String innerJName,String leftJName,String rightJName,JSONObject json,Boolean updateLeft,Boolean updateRight,String joinKeyType,String joinKeyName,String pkName){CustomizedRow oldRow=stream.getReverseJoinUpadteOldRow();CustomizedRow newRow=stream.getReverseJoinUpdateNewRow();if(updateLeft){Map<String,String> tempMapImmutable1_old=oldRow.getMap(""list_item1"");Map<String,String> tempMapImmutable1_new=newRow.getMap(""list_item1"");Map<String,String> tempMapImmutable2_new=newRow.getMap(""list_item2"");if(tempMapImmutable2_new.isEmpty()){if(tempMapImmutable1_new.size()>=tempMapImmutable1_old.size()){if(!leftJName.equals(""false"")){JoinHelper.updateLeftJoinTable(stream,leftJName,newRow,json);}}else {if(!leftJName.equals(""false"")){JSONObject data;if(json.get(""type"").equals(""insert"")){data=(JSONObject)json.get(""data"");}else {data=(JSONObject)json.get(""set_data"");}String pkValue=""(""+data.get(pkName)+"",0)"";int position=VmXmlHandler.getInstance().getlJSchema().getList(""dbSchema.tableDefinition.name"").indexOf(leftJName);String temp=""dbSchema.tableDefinition("";temp+=Integer.toString(position);temp+="")"";String joinTablePk=VmXmlHandler.getInstance().getlJSchema().getString(temp+"".primaryKey.name"");Utils.deleteEntireRowWithPK(json.get(""keyspace"").toString(),leftJName,joinTablePk,pkValue);}}}else {if(tempMapImmutable1_new.size()>=tempMapImmutable1_old.size()){leftCrossRight(stream,json,innerJName);if(tempMapImmutable1_new.size()==1&&tempMapImmutable1_old.size()==0&&!rightJName.equals(""false"")){HashMap<String,String> myMap2=new HashMap<String,String>();myMap2.putAll(tempMapImmutable2_new);DeleteJoinHelper.deleteFromRightJoinTable(myMap2,rightJName,json,false);}}else {JoinHelper.removeLeftCrossRight(stream,json,innerJName);if(tempMapImmutable1_new.isEmpty()&&!rightJName.equals(""false"")){JoinHelper.addAllToRightJoinTable(rightJName,newRow.getMap(""list_item2""),json);}}}}else {Map<String,String> tempMapImmutable2_old=oldRow.getMap(""list_item2"");Map<String,String> tempMapImmutable2_new=newRow.getMap(""list_item2"");Map<String,String> tempMapImmutable1_new=newRow.getMap(""list_item1"");if(tempMapImmutable1_new.isEmpty()){if(tempMapImmutable2_new.size()>=tempMapImmutable2_old.size()){if(!rightJName.equals(""false"")){JoinHelper.updateRightJoinTable(stream,rightJName,newRow,json);}}else {if(!rightJName.equals(""false"")){JSONObject data;if(json.get(""type"").equals(""insert"")){data=(JSONObject)json.get(""data"");}else {data=(JSONObject)json.get(""set_data"");}String pkValue=""(0,""+data.get(pkName)+"")"";int position=VmXmlHandler.getInstance().getrJSchema().getList(""dbSchema.tableDefinition.name"").indexOf(rightJName);String temp=""dbSchema.tableDefinition("";temp+=Integer.toString(position);temp+="")"";String joinTablePk=VmXmlHandler.getInstance().getrJSchema().getString(temp+"".primaryKey.name"");Utils.deleteEntireRowWithPK(json.get(""keyspace"").toString(),rightJName,joinTablePk,pkValue);}}}else {if(tempMapImmutable2_new.size()>=tempMapImmutable2_old.size()){rightCrossLeft(stream,json,innerJName);if(tempMapImmutable2_new.size()==1&&tempMapImmutable2_old.size()==0&&!leftJName.equals(""false"")){HashMap<String,String> myMap1=new HashMap<String,String>();myMap1.putAll(tempMapImmutable1_new);DeleteJoinHelper.deleteFromLeftJoinTable(myMap1,leftJName,json,false);}}else {JoinHelper.removeRightCrossLeft(stream,json,innerJName);if(tempMapImmutable2_new.isEmpty()&&!leftJName.equals(""false"")){JoinHelper.addAllToLeftJoinTable(leftJName,newRow.getMap(""list_item1""),json);}}}}return true;}"
3147	"private void updateWorkers(int frame){for(Drone worker : getWorkers()){boolean mine=false;if(worker.isIdle()){mine=true;}if(worker.isMiner()&&(!worker.getUnit().isMoving()&&!worker.getUnit().isGatheringMinerals())){mine=true;}if(mine){List<Unit> minerals=MapHelp.getMineralsAtTilePosition(worker.getUnit().getTilePosition());if(!minerals.isEmpty()){Unit closestMineral=MapHelp.getClosestUnit(minerals,worker.getUnit());if(closestMineral!=null){worker.mine(closestMineral);}}}if(worker.getCurrentTask()!=null&&worker.getCurrentTask()==UnitTask.BUILDING){updateBuilder(worker,frame);}}}"
3148	"public static Contract createContract(String contractNumber,String startOfContract,String endOfContract,String coveragePlan,Company c,ContractRepository contractRepository,ContractSearchRepository contractSearchRepository){DateTimeFormatter dtf=null;if(startOfContract!=null&&StringUtils.contains(startOfContract,""/"")){dtf=DateTimeFormatter.ofPattern(""MM/dd/yy"");startOfContract=ensureProperDateFormat(startOfContract);endOfContract=ensureProperDateFormat(endOfContract);}else {if(startOfContract!=null&&StringUtils.contains(startOfContract,""-"")){dtf=DateTimeFormatter.ofPattern(""dd-MMM-yyyy"");}else {dtf=DateTimeFormatter.ofPattern(""dd MMM yyyy"");}}LocalDate slocalDate=LocalDate.parse(startOfContract,dtf);LocalDate elocalDate=LocalDate.parse(endOfContract,dtf);Contract p=new Contract();p.setCompany(c);p.setContractNumber(contractNumber);p.setCoveragePlan(coveragePlan);p.setStartOfContract(slocalDate);p.setEndOfContract(elocalDate);Contract result=contractRepository.save(p);contractSearchRepository.save(result);return result;}"
3149	"@Override protected Void doInBackground(Void... params){String msg;if(isServer){ServerSocket serverSocket=null;try{serverSocket=new ServerSocket(SOCKET_NUM);clientSocket=serverSocket.accept();Log.d(TAG,""doInBackground: Client connected."");reader=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));writer=new PrintWriter(clientSocket.getOutputStream(),true);msg=reader.readLine();if(msg!=null){players.put(clientSocket,msg.trim());}String username=lobbyActivity.getSharedPreferences(MainActivity.GAME_PREFS,Context.MODE_PRIVATE).getString(""username"","""");sendMessage(""username|""+username);while(true){InputStream inputStream=clientSocket.getInputStream();reader=new BufferedReader(new InputStreamReader(inputStream));writer=new PrintWriter(clientSocket.getOutputStream(),true);while(true){msg=reader.readLine();if(msg.equals(""cancel"")){break;}publishProgress(msg);}}}catch(IOException e){e.printStackTrace();}finally{if(serverSocket!=null){try{serverSocket.close();}catch(IOException e){e.printStackTrace();}}}}else {clientSocket=new Socket();try{clientSocket.bind(null);clientSocket.connect(new InetSocketAddress(serverAddress,SOCKET_NUM),TIME_OUT);Log.d(TAG,""Connected to ""+serverAddress+"" on port ""+SOCKET_NUM);writer=new PrintWriter((clientSocket.getOutputStream()),true);String username=lobbyActivity.getSharedPreferences(MainActivity.GAME_PREFS,Context.MODE_PRIVATE).getString(""username"","""");sendMessage(username);while(true){InputStream inputStream=clientSocket.getInputStream();reader=new BufferedReader(new InputStreamReader(inputStream));writer=new PrintWriter((clientSocket.getOutputStream()),true);while(true){msg=reader.readLine();if(msg==null||isCancelled()){break;}Log.d(TAG,""Read message : ""+msg);publishProgress(msg);}}}catch(IOException e){e.printStackTrace();}finally{if(clientSocket.isConnected()){try{clientSocket.close();}catch(IOException e){e.printStackTrace();}}}}return null;}"
3150	"public void stop(){stopped=true;if(inputThread!=null){inputThread.interrupt();inputThread=null;}if(listener!=null){listener.deviceRemoved(deviceId);}connection.close();}"
3151	"public void onInputItemChanged(){ItemStack inputStack=uncraftIn.getStackInSlot(0);if(inputStack==null){}else {this.uncraftingResult=UncraftingManager.getUncraftingResult(playerInventory.player,inputStack);}onCraftMatrixChanged(uncraftIn);}"
3152	"public boolean waterWeakest() throws GameActionException{TreeInfo weakest=trees.getWeakestTreeWithinInteract(team);if(weakest.health<=TREE_WATERING_THRESHOLD&&rc.canWater(weakest.location)){rc.water(weakest.location);return true;}else {return false;}}"
3153	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.intermediate2);context=this;nearby_locations=new ArrayList<Venue>();oa=new AndroidOAuth(this);checkInManager=new CheckInManager();pref=PreferenceManager.getDefaultSharedPreferences(this);if(code==null&&codeStored==false){code=TokenManager.getCode(getIntent(),this,pref);}if(code!=null){codeStored=true;}if(this.checkIns==null&&!code.equals(""-1"")){try{initializeCheckIns();}catch(JSONException e1){e1.printStackTrace();}}if(!locationRegistered){try{initializeLocationListener();}catch(JSONException e){e.printStackTrace();}}updateSpinner();}"
3154	"public boolean search(String word){TrieNode cur=root;for(char c : word.toCharArray()){if(cur.children[c-'a']==null){return false;}cur=cur.children[c-'a'];}return cur.isEnd;}"
3155	"public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){if(cmd.getName().equalsIgnoreCase(""friend"")||cmd.getName().equalsIgnoreCase(""friends"")){if(sender instanceof Player){Player player=(Player)sender;if(args.length==0){guiMethods.openFriendsGui(player,null);}else {if(args.length==2){String target=args[1];if(args[0].equalsIgnoreCase(""add"")){sender.sendMessage(""friend add"");if(!playerHasFriend(player,target)){if(!friendRequestSent(player,target)){if(!friendRequestReceived(player,target)){if(!friendRequestDenied(player,target)){addFriend(player,target);}else {player.sendMessage(ChatColor.RED+""Your friend request has already been denied by ""+target+""."");}}else {player.sendMessage(ChatColor.RED+""You already have an incoming friend request from ""+target+""."");}}else {player.sendMessage(ChatColor.RED+""You already have an outgoing friend request to ""+target+""."");}}else {player.sendMessage(ChatColor.RED+target+"" is already your friend."");}}else {if(args[0].equalsIgnoreCase(""remove"")){sender.sendMessage(""friend remove"");}else {if(args[0].equalsIgnoreCase(""accept"")){sender.sendMessage(""friend accept"");}else {if(args[0].equalsIgnoreCase(""deny"")){sender.sendMessage(""friend deny"");}else {sender.sendMessage(ChatColor.RED+""Incorrect syntax. Usage: /friends <add,remove,accept,deny>"");}}}}}else {sender.sendMessage(ChatColor.RED+""Incorrect syntax. Usage: /friends <add,remove,accept,deny>"");}}}else {sender.sendMessage(ChatColor.RED+""You must be in-game to perform this command."");}}return true;}"
3156	"public static boolean isMondrianConnection(OlapConnection con){return (con instanceof MondrianOlap4jConnection);}"
3157	"@Override protected boolean onExecute(CommandSender sender,String label,String[] args){SinkUser user=SinkLibrary.getInstance().getUser((Object)sender);IngameUser target;if(args.length<1&&sender instanceof Player){target=SinkLibrary.getInstance().getIngameUser((Player)sender);}else {if(args.length<1){return false;}else {target=SinkLibrary.getInstance().getIngameUser(args[0]);if(sender instanceof Player&&target instanceof IngameUser){if(!((Player)sender).canSee(target.getPlayer())&&!sender.hasPermission(""sinklibrary.bypassvanish"")){throw new UserNotFoundException(args[0]);}}}}List<String> out=new ArrayList<>();out.add(ChatColor.RED+""Warnings: ""+target.getDisplayName());List<Warning> warnings=WarnUtil.getWarnings(target);if(warnings.size()>0){for(Warning warning : WarnUtil.getWarnings(target)){if(warning.isAutoWarning()&&!sender.hasPermission(""sinkantispam.autowarnmessage"")){continue;}if(warning.isDeleted()){if(!sender.hasPermission(""sinkantispam.canseedeleted"")){out.add(ChatColor.GOLD+""#""+warning.getId()+"" - ""+ChatColor.GRAY+""""+ChatColor.STRIKETHROUGH+""Deleted"");continue;}if(user instanceof IrcUser){out.add(ChatColor.GOLD+""#""+warning.getId()+"" - ""+ChatColor.GRAY+ChatColor.stripColor(warning.getWarnerDisplayName())+ChatColor.GRAY+"": ""+ChatColor.GRAY+ChatColor.stripColor(warning.getReason())+""[Deleted]"");}else {out.add(ChatColor.GOLD+""#""+warning.getId()+"" - ""+ChatColor.GRAY+""""+ChatColor.STRIKETHROUGH+ChatColor.stripColor(warning.getWarnerDisplayName())+ChatColor.GRAY+""""+ChatColor.STRIKETHROUGH+"": ""+ChatColor.GRAY+""""+ChatColor.STRIKETHROUGH+ChatColor.stripColor(warning.getReason()));}continue;}out.add(ChatColor.GOLD+""#""+warning.getId()+"" - ""+warning.getWarnerDisplayName()+ChatColor.GOLD+"": ""+ChatColor.RED+warning.getReason());}}else {out.add(ChatColor.RED+""No warnings found"");}sender.sendMessage(out.toArray(new String[out.size()]));return true;}"
3158	"C makeNotInlineCall(ParserGenerator<B,C> pg,Expression e){Expression p=Expression.deref(e.get(0));ByteSet bs=Expression.getByteSet(p,pg.isBinary());if(bs!=null){bs=bs.not(pg.isBinary());C expr=pg.emitMatchByteSet(bs,null,false);System.out.println("" ** ""+e+"" => ""+expr);return expr;}return null;}"
3159	"@Override public boolean addGroup(PhrGroup group){if(group==null){ final NullPointerException nullException=new NullPointerException(""The group argument can not be null."");LOGGER.error(nullException.getMessage(),nullException);throw nullException;} final Long id=group.getId();if(id==null){entityManager.persist(group);return true;}if(!entityManager.contains(group)){entityManager.persist(group);return true;}entityManager.merge(group);return false;}"
3160	"public SolrQuery parse(Query query,QueryOptions queryOptions){List<String> filterList=new ArrayList<>();SolrQuery solrQuery=new SolrQuery();if(queryOptions.containsKey(QueryOptions.INCLUDE)){List<String> includes=queryOptions.getAsStringList(QueryOptions.INCLUDE);solrQuery.setFields(includes.toArray(new String[includes.size()]));}if(queryOptions.containsKey(QueryOptions.LIMIT)){solrQuery.setRows(queryOptions.getInt(QueryOptions.LIMIT));}if(queryOptions.containsKey(QueryOptions.SKIP)){solrQuery.setStart(queryOptions.getInt(QueryOptions.SKIP));}if(queryOptions.containsKey(QueryOptions.SORT)){solrQuery.addSort(queryOptions.getString(QueryOptions.SORT),getSortOrder(queryOptions));}if(queryOptions.containsKey(QueryOptions.FACET)&&StringUtils.isNotEmpty(queryOptions.getString(QueryOptions.FACET))){parseSolrFacets(queryOptions.get(QueryOptions.FACET).toString(),solrQuery);}if(queryOptions.containsKey(QueryOptions.FACET_RANGE)&&StringUtils.isNotEmpty(queryOptions.getString(QueryOptions.FACET_RANGE))){parseSolrFacetRanges(queryOptions.get(QueryOptions.FACET_RANGE).toString(),solrQuery);}List<String> xrefs=new ArrayList<>();List<String> genes=new ArrayList<>();List<Region> regions=new ArrayList<>();List<String> consequenceTypes=new ArrayList<>();classifyIds(VariantQueryParam.ANNOT_XREF.key(),query,xrefs,genes);classifyIds(VariantQueryParam.ID.key(),query,xrefs,genes);classifyIds(VariantQueryParam.GENE.key(),query,xrefs,genes);classifyIds(VariantQueryParam.ANNOT_CLINVAR.key(),query,xrefs,genes);classifyIds(VariantQueryParam.ANNOT_COSMIC.key(),query,xrefs,genes);if(query.containsKey(VariantQueryParam.REGION.key())){regions=Region.parseRegions(query.getString(VariantQueryParam.REGION.key()));}if(query.containsKey(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key())&&StringUtils.isNotEmpty(query.getString(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key()))){consequenceTypes=Arrays.asList(query.getString(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key()).split(""[,;]""));}if(consequenceTypes.size()>0){if(genes.size()>0){String or=buildXrefOrRegionAndConsequenceType(xrefs,regions,consequenceTypes);if(xrefs.size()==0&&regions.size()==0){filterList.add(buildGeneAndCt(genes,consequenceTypes));}else {filterList.add(""(""+or+"") OR (""+buildGeneAndCt(genes,consequenceTypes)+"")"");}}else {filterList.add(buildXrefOrRegionAndConsequenceType(xrefs,regions,consequenceTypes));}}else {String orXrefs=buildXrefOrGeneOrRegion(xrefs,genes,regions);if(!orXrefs.isEmpty()){filterList.add(orXrefs);}}String key=VariantQueryParam.STUDIES.key();if(isValidParam(query,VariantQueryParam.STUDIES)){try{String value=query.getString(key);VariantQueryUtils.QueryOperation op=checkOperator(value);Set<Integer> studyIds=new HashSet<>(studyConfigurationManager.getStudyIds(splitValue(value,op),queryOptions));List<String> studyNames=new ArrayList<>(studyIds.size());Map<String,Integer> map=studyConfigurationManager.getStudies(null);if(map!=null&&map.size()>1){map.forEach((name,id) -> {  if (studyIds.contains(id)) {    String[] s=name.split("":"");    studyNames.add(s[s.length - 1]);  }});if(op==null||op==VariantQueryUtils.QueryOperation.OR){filterList.add(parseCategoryTermValue(""studies"",StringUtils.join(studyNames,"","")));}else {filterList.add(parseCategoryTermValue(""studies"",StringUtils.join(studyNames,"";"")));}}}catch(NullPointerException e){logger.error(e.getMessage());e.printStackTrace();}}key=VariantQueryParam.TYPE.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseCategoryTermValue(""type"",query.getString(key)));}key=VariantQueryParam.ANNOT_BIOTYPE.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseCategoryTermValue(""biotypes"",query.getString(key)));}key=VariantQueryParam.ANNOT_PROTEIN_SUBSTITUTION.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseScoreValue(query.getString(key)));}key=VariantQueryParam.ANNOT_CONSERVATION.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseScoreValue(query.getString(key)));}key=VariantQueryParam.ANNOT_FUNCTIONAL_SCORE.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseScoreValue(query.getString(key)));}key=VariantQueryParam.ANNOT_POPULATION_MINOR_ALLELE_FREQUENCY.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parsePopValue(""popFreq"",query.getString(key)));}key=VariantQueryParam.STATS_MAF.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parsePopValue(""stats"",query.getString(key)));}key=VariantQueryParam.ANNOT_GO.key();if(StringUtils.isNotEmpty(query.getString(key))){List<String> gos=Arrays.asList(query.getString(key).split("",""));Set genesByGo=cellbaseUtils.getGenesByGo(gos);if(genesByGo!=null&&genesByGo.size()>0){filterList.add(parseCategoryTermValue(""xrefs"",StringUtils.join(genesByGo,"","")));}}key=VariantQueryParam.ANNOT_HPO.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseCategoryTermValue(""traits"",query.getString(key)));}key=VariantQueryParam.ANNOT_CLINVAR.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseCategoryTermValue(""traits"",query.getString(key)));}key=VariantQueryParam.ANNOT_TRAITS.key();if(StringUtils.isNotEmpty(query.getString(key))){filterList.add(parseCategoryTermValue(""traits"",query.getString(key)));}logger.debug(""query = {}\n"",query.toJson());solrQuery.setQuery(""*:*"");filterList.forEach(filter -> {  solrQuery.addFilterQuery(filter);  logger.debug(""Solr fq: {}\n"",filter);});return solrQuery;}"
3161	"@Override protected void onPostExecute(ArrayList<Forecast> forecastList){if(!isOnline&&forecastList.size()==0){mCacheManager.clearCache();hideRefresh();showErrorDialog(getString(R.string.no_internet_and_actual_cache),new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    getActivity().finish();  }});return ;}mForecastList.clear();mForecastList.addAll(forecastList);if(isOnline){fillForecast();getForecastServer();}else {onForecastLoaded();}}"
3162	"private void btnApagarActionPerformed(java.awt.event.ActionEvent evt){if(JOptionPane.showConfirmDialog(this,""Deseja realmente EXCLUIR o aluno do banco de cadastros?\n(Essa opera??o n?o pode ser desfeita!)"",""Aviso!"",JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION){try{conexao=HibernateUtil.openSession();Transaction tx=conexao.beginTransaction();Aluno aluno=(Aluno)conexao.get(Aluno.class,Long.parseLong(lblId.getText()));Criteria selectResp=conexao.createCriteria(Responsavel.class);selectResp.add(Restrictions.eq(""Aluno"",aluno));List<Responsavel> listResp=selectResp.list();for(Responsavel temp : listResp){conexao.delete(temp);}Criteria selectMens=conexao.createCriteria(Mensalidade.class);selectMens.add(Restrictions.eq(""Aluno"",aluno));List<Mensalidade> listMens=selectMens.list();for(Mensalidade temp : listMens){conexao.delete(temp);}Criteria selectPagtos=conexao.createCriteria(PagtoMaterial.class);selectPagtos.add(Restrictions.eq(""Aluno"",aluno));List<PagtoMaterial> listPagtos=selectPagtos.list();for(PagtoMaterial temp : listPagtos){conexao.delete(temp);}Criteria selectFaltas=conexao.createCriteria(Falta.class);selectFaltas.add(Restrictions.eq(""Aluno"",aluno));List<Falta> listFaltas=selectFaltas.list();for(Falta temp : listFaltas){conexao.delete(temp);}Criteria selectHisto=conexao.createCriteria(Historico.class);selectHisto.add(Restrictions.eq(""Aluno"",aluno));List<Historico> listHisto=selectHisto.list();for(Historico temp : listHisto){conexao.delete(temp);}Criteria selectMatri=conexao.createCriteria(Matricula.class);selectMatri.add(Restrictions.eq(""Aluno"",aluno));List<Matricula> listMatri=selectMatri.list();for(Matricula temp : listMatri){conexao.delete(temp);}conexao.delete(aluno);tx.commit();conexao.close();}catch(Exception e){JOptionPane.showMessageDialog(this,""Opera??o mal sucedida. Motivo: ""+e.getMessage(),""Erro"",JOptionPane.ERROR_MESSAGE);}btnCancelarActionPerformed(null);LiberarCampos(false);}}"
3163	"@Override public void detach(){if(!mCompositeSubscription.isUnsubscribed()){mCompositeSubscription.unsubscribe();}mView.onDetach();}"
3164	"private void drawBranches(){strokeWeight((float)branchWidth);for(Node node : tree.getNodes()){if(!tree.isRoot(node)){Double longitude=(Double)node.getAttribute(longitudeName);Double latitude=(Double)node.getAttribute(latitudeName);Double nodeHeight=tree.getHeight(node);Node parentNode=tree.getParent(node);Double parentLongitude=(Double)parentNode.getAttribute(longitudeName);Double parentLatitude=(Double)parentNode.getAttribute(latitudeName);if(longitude!=null&&latitude!=null&&parentLongitude!=null&&parentLatitude!=null&&nodeHeight!=null){double x0=Utils.map(parentLongitude,minX,maxX,0,width);double y0=Utils.map(parentLatitude,maxY,minY,0,height);double x1=Utils.map(longitude,minX,maxX,0,width);double y1=Utils.map(latitude,maxY,minY,0,height);int red=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchRedMapping,maxBranchRedMapping);int green=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchGreenMapping,maxBranchGreenMapping);int blue=(int)Utils.map(nodeHeight,0,treeHeightMax,minBranchBlueMapping,maxBranchBlueMapping);int alpha=(int)Utils.map(nodeHeight,0,treeHeightMax,maxBranchOpacityMapping,minBranchOpacityMapping);stroke(red,green,blue,alpha);line((float)x0,(float)y0,(float)x1,(float)y1);}}}}"
3165	"public Color getWinner(){if(player1.getX()==0||player1.getY()==0){System.out.println(""wall"");return player2.getColor();}if(player2.getX()==0||player2.getY()==0){System.out.println(""wall"");return player1.getColor();}return null;}"
3166	"public VariablesMap getStringSerializableMap(SchedulingService service,TaskTerminationData taskToTerminate) throws Exception{VariablesMap variablesMap=new VariablesMap();RunningTaskData taskData=taskToTerminate.taskData;TaskResultImpl taskResult=taskToTerminate.taskResult;InternalJob internalJob=taskToTerminate.internalJob;variablesMap.setScopeMap(taskData.getTask().getScopeVariables());if(!taskToTerminate.normalTermination||taskResult==null){List<InternalTask> iDependences=taskData.getTask().getIDependences();if(iDependences!=null){Set<TaskId> parentIds=internalTaskParentFinder.getFirstNotSkippedParentTaskIds(taskData.getTask());Map<TaskId,TaskResult> taskResults=service.getInfrastructure().getDBManager().loadTasksResults(taskData.getTask().getJobId(),new ArrayList(parentIds));getResultsFromListOfTaskResults(variablesMap.getInheritedMap(),taskResults);}else {if(internalJob!=null){variablesMap.getInheritedMap().putAll(internalJob.getVariables());}}variablesMap.getInheritedMap().put(SchedulerVars.PA_TASK_SUCCESS.toString(),Boolean.toString(false));}else {if(taskResult.hadException()){variablesMap.setInheritedMap(fillMapWithTaskResult(taskResult,false));}else {variablesMap.setInheritedMap(fillMapWithTaskResult(taskResult,true));}}return variablesMap;}"
3167	"public void setMonitoredResource(Resource<?> monitoredResource){this.monitoredResource=monitoredResource;loaded=monitoredResource.isLoaded();unloaded=!loaded;}"
3168	"public static List<Symbol> searchScopesForSymbol(ASTNode node,String name){List<Symbol> symbols=null;try{if(node.attributes.containsKey(""symbolTable"")){SymbolTable table=(SymbolTable)node.attributes.get(""symbolTable"");symbols=table.lookup(name);}else {if(node.getParent()!=null){symbols=searchScopesForSymbol(node.getParent(),name);}else {addError(new InvalidProgramException(""Symbol not found: ""+name));}}}catch(InvalidProgramException ex){addError(new InvalidProgramException(ex.getMessage()));}return symbols;}"
3169	"public String run(boolean gui){String information="""";if(!gui){information+=(""\nStep: ""+output.getNumSteps());}else {information+=(output.getNumSteps()+"","");}for(Pump p : pumps){p.pumpFuel();}if(spawnVehicle()){Vehicle v=generatedV;boolean added=false;double size=pumps[0].getQueueSize();Pump shortestQueue=pumps[0];for(Pump p : pumps){if(p.getQueueSize()<size){shortestQueue=p;}}if(shortestQueue.addVehicleToQueue(v)){added=true;}else {}}else {}int totalPumped=0;for(Pump p : pumps){totalPumped+=p.getNumOfGallons();if(!gui){information+=(p.textToString());}else {information+=(p.guiToString());}}for(int i=4;i>pumps.length;i--){information+=""empty,empty,empty,empty,"";}output.setNumGallons(totalPumped);output.setFuelMoney((int)totalPumped*config.getPencePerGallon());return information;}"
3170	"public void startPreview(){if(!onPreview){if(openGlView!=null&&Build.VERSION.SDK_INT>=18){openGlView.startGLThread();cameraManager=new Camera1ApiManager(openGlView.getSurfaceTexture(),openGlView.getContext());}cameraManager.prepareCamera();cameraManager.start();onPreview=true;}}"
3171	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);isFirstRun=getSharedPreferences(""PREFERENCE"",MODE_PRIVATE).getBoolean(""isFirstRun"",true);if(isFirstRun){startActivity(new Intent(this,IntroActivity.class));}getSharedPreferences(""PREFERENCE"",MODE_PRIVATE).edit().putBoolean(""isFirstRun"",false).apply();init();buildGoogleApiClient();if(isLocationEnabled()){if(ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_GRANTED&&ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_COARSE_LOCATION)==PackageManager.PERMISSION_GRANTED){requestLocationUpdates();}}else {showAlertToEnableGPS();}auth=FirebaseAuth.getInstance();auth.addAuthStateListener(getAuthStateListener());sendButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    getMessageDataFromSharedPref();    sendAlertMessage();    if (isLocationEnabled()) {      if (ActivityCompat.checkSelfPermission(MainActivity.this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(MainActivity.this,Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {        requestGPSPermission();      } else {        timeInMillis=System.currentTimeMillis();        user=new User(user.getUserID(),user.getUserName(),user.getUserEmail(),user.getFirstNumber(),user.getSecondNumber(),user.getMessage());        coordinates=event.getCoordinates();        event=new Event(coordinates,user,timeInMillis);        childUniqueKey=databaseReference.push().getKey();        databaseReference.child(childUniqueKey).setValue(event);        if (event.getCoordinates() == null) {          if (mGoogleApiClient.isConnected()) {            initReceiver();            startLocationService();          }        }      }    } else {      showAlertToEnableGPS();    }    if (firebaseUser != null) {      saveInPref(firebaseUser.getUid());    }  }});setPermissionsInfo();mapButton.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    if (firebaseUser != null) {      Intent intent=new Intent(MainActivity.this,SlidingMapsActivity.class);      startActivity(intent);    } else {      startActivity(new Intent(MainActivity.this,IntroActivity.class));      Toast.makeText(getApplicationContext(),R.string.youNeedToLogIn,Toast.LENGTH_SHORT).show();    }  }});if(!isMyServiceRunning(NotificationService.class)){Intent notificationServiceIntent=new Intent(this,NotificationService.class);startService(notificationServiceIntent);}}"
3172	"public void mousePressed(MouseEvent e){if(pieceGrabbedByClick){}else {mouseDownTile=getBoardPosition(e.getPoint());this.grabPiece(mouseDownTile);setMouseCursor();}}"
3173	"private boolean isOfType(String contentType,String expectedContentType,String expectedWithDelim){return contentType!=null&&(contentType.length()>expectedContentType.length()?contentType.startsWith(expectedWithDelim):contentType.equals(expectedContentType));}"
3174	"public boolean podeReservar(Integer numeroDeIngressos){int sobraram=getIngressosDisponiveis()-numeroDeIngressos;return sobraram>=0;}"
3175	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){super.onCreate(savedInstanceState);view=inflater.inflate(R.layout.person_detail_fragment,container,false);profilePicture=(ImageView)view.findViewById(R.id.profilePicture);firstName=(TextView)view.findViewById(R.id.tvFirstName);lastName=(TextView)view.findViewById(R.id.tvLastName);email=(TextView)view.findViewById(R.id.tvEmail);phone=(TextView)view.findViewById(R.id.tvPhone);gestureDetector=new GestureDetector(getContext(),new OnSwipeListener(){  @Override public boolean onSwipe(  Direction direction){    if (direction == Direction.down) {      Log.d(TAG,""onSwipe: down"");      view.setVisibility(View.GONE);      firstName.setText("""");      lastName.setText("""");      profilePicture.setImageBitmap(null);    }    return true;  }});view.setOnTouchListener(this);if(savedInstanceState!=null){if(!"""".equals(savedInstanceState.getString(""firstName""))&&!"""".equals(savedInstanceState.getString(""lastName""))){firstName.setText(savedInstanceState.getString(""firstName""));lastName.setText(savedInstanceState.getString(""lastName""));email.setText(savedInstanceState.getString(""email""));phone.setText(savedInstanceState.getString(""phone""));profilePicture.setImageBitmap((Bitmap)savedInstanceState.getParcelable(""profilePicture""));view.setVisibility(View.VISIBLE);}else {view.setVisibility(View.GONE);}}else {view.setVisibility(View.GONE);}return view;}"
3176	"public boolean addNewWord(String word){int hashIndex=getHashCode(word);WordInfo newWord=new WordInfo(word);double loadFactor=(double)size/(double)table.length;if(table[hashIndex]==null){table[hashIndex]=new WordInfoSeparateChain();if(loadFactor<=0.75){table[hashIndex].add(newWord);size++;return true;}else {resize();addNewWord(word);}}return false;}"
3177	"public boolean isCumulative(){return cumulative;}"
3178	"@Override public String addStepsForDeleteVolumes(Workflow workflow,String waitFor,List<VolumeDescriptor> volumes,String taskId) throws ControllerException{try{List<VolumeDescriptor> vplexVolumes=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type{VolumeDescriptor.Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type{});if(vplexVolumes.isEmpty()){return waitFor;}List<URI> allVplexVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexVolumes);Map<URI,List<VolumeDescriptor>> vplexMap=VolumeDescriptor.getDeviceMap(vplexVolumes);for(URI vplexURI : vplexMap.keySet()){List<URI> vplexVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexMap.get(vplexURI));workflow.createStep(VPLEX_STEP,String.format(""Delete VPlex Virtual Volumes:%n%s"",BlockDeviceController.getVolumesMsg(_dbClient,vplexVolumeURIs)),waitFor,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),deleteVirtualVolumesMethod(vplexURI,vplexVolumeURIs),rollbackMethodNullMethod(),null);}Map<URI,StorageSystem> arrayMap=new HashMap<URI,StorageSystem>();Map<URI,List<URI>> arrayVolumesMap=new HashMap<URI,List<URI>>();List<URI> exportGroupList=new ArrayList<URI>();List<URI> backendVolURIs=new ArrayList<URI>();for(URI vplexVolumeURI : allVplexVolumeURIs){Volume vplexVolume=_dbClient.queryObject(Volume.class,vplexVolumeURI);if((vplexVolume==null)||(vplexVolume.getInactive())||(vplexVolume.isIngestedVolume(_dbClient))){continue;}for(String assocVolumeId : vplexVolume.getAssociatedVolumes()){URI assocVolumeURI=new URI(assocVolumeId);Volume volume=_dbClient.queryObject(Volume.class,assocVolumeURI);if(volume==null||volume.getInactive()==true){continue;}StorageSystem array=arrayMap.get(volume.getStorageController());if(array==null){array=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());arrayMap.put(array.getId(),array);}if(arrayVolumesMap.get(array.getId())==null){arrayVolumesMap.put(array.getId(),new ArrayList<URI>());}arrayVolumesMap.get(array.getId()).add(volume.getId());backendVolURIs.add(volume.getId());}if(vplexVolume.getMirrors()!=null&&!(vplexVolume.getMirrors().isEmpty())){for(String mirrorId : vplexVolume.getMirrors()){VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,URI.create(mirrorId));if(vplexMirror==null||vplexMirror.getInactive()==true||vplexMirror.getAssociatedVolumes()==null){continue;}for(String assocVolumeId : vplexMirror.getAssociatedVolumes()){URI assocVolumeURI=new URI(assocVolumeId);Volume volume=_dbClient.queryObject(Volume.class,assocVolumeURI);if(volume==null||volume.getInactive()==true){continue;}StorageSystem array=arrayMap.get(volume.getStorageController());if(array==null){array=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());arrayMap.put(array.getId(),array);}if(arrayVolumesMap.get(array.getId())==null){arrayVolumesMap.put(array.getId(),new ArrayList<URI>());}arrayVolumesMap.get(array.getId()).add(volume.getId());backendVolURIs.add(volume.getId());}}}}boolean unexportStepsAdded=vplexAddUnexportVolumeWfSteps(workflow,VPLEX_STEP,backendVolURIs,exportGroupList);if(unexportStepsAdded){waitFor=UNEXPORT_STEP;for(URI vplexURI : vplexMap.keySet()){List<URI> vplexVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexMap.get(vplexURI));List<URI> forgetVolumeURIs=new ArrayList<URI>();for(URI vplexVolumeURI : vplexVolumeURIs){Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);for(String forgetVolumeId : vplexVolume.getAssociatedVolumes()){forgetVolumeURIs.add(URI.create(forgetVolumeId));}if(vplexVolume.getMirrors()!=null&&!(vplexVolume.getMirrors().isEmpty())){for(String mirrorId : vplexVolume.getMirrors()){VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,URI.create(mirrorId));if(null!=vplexMirror&&!vplexMirror.getInactive()&&null!=vplexMirror.getAssociatedVolumes()){for(String forgetVolumeId : vplexMirror.getAssociatedVolumes()){forgetVolumeURIs.add(URI.create(forgetVolumeId));}}}}}addStepToForgetVolumes(workflow,vplexURI,forgetVolumeURIs,waitFor);}}else {waitFor=VPLEX_STEP;}return waitFor;}catch(Exception ex){throw VPlexApiException.exceptions.addStepsForDeleteVolumesFailed(ex);}}"
3179	"public static String buildFullName(String first,String middle,String last){String fullName="""";if(!first.equals("""")){fullName=fullName.trim()+first.trim();}if(!middle.equals("""")){fullName=fullName.trim()+"" ""+(middle.trim().length()==1?middle.trim()+""."":middle.trim());}if(!last.equals("""")){fullName=fullName.trim()+"" ""+last.trim();}return fullName.trim();}"
3180	"@Override public ItemStack slotClick(int slotId,int dragType,ClickType clickTypeIn,EntityPlayer player){if(clickTypeIn!=ClickType.QUICK_CRAFT&&slotId>=0){int clickedSlot=slotId-inventoryChisel.getSizeInventory()-27;Chisel.debug(""Slot clicked is ""+slotId+"" and slot length is ""+inventorySlots.size());try{Slot slot=(Slot)inventorySlots.get(slotId);Chisel.debug(""Slot is ""+slot);}catch(Exception exception){Chisel.debug(""Exception getting slot"");exception.printStackTrace();}if(clickedSlot==chiselSlot||(clickTypeIn==ClickType.SWAP&&dragType==chiselSlot)){return null;}}return super.slotClick(slotId,dragType,clickTypeIn,player);}"
3181	"void devRenderTile(DungeonTile tile,SpriteBatch batch,int x,int y){if(!tile.isEmpty()){batch.draw(tile.getTileTexture(),x*ResourceLoader.getTileSize(),y*ResourceLoader.getTileSize());}}"
3182	"private ServiceStatus(Parcel in){mode=in.readParcelable(this.getClass().getClassLoader());overridden=in.readByte()!=0;user=in.readParcelable(this.getClass().getClassLoader());priority=NotificationPriority.valueOf(in.readString());waitingForSensor=in.readByte()!=0;if(in.dataAvail()!=0){throw new RuntimeException(""Found more data in parcel than expected"");}}"
3183	"@Override public final void createPages(){T childConfiguration=getChildContainerConfiguration(getConfiguration());Composite composite;Component<? extends ComponentConfiguration> component;Component<? extends ComponentConfiguration> firstComponent=null;if(childConfiguration!=null){Iterator<ComponentConfiguration> iterator=childConfiguration.getComponents().iterator();ComponentConfiguration componentConfiguration;int pageIndex=0;while(iterator.hasNext()){componentConfiguration=iterator.next();if(componentConfiguration!=null&&componentConfiguration.isVisible()){composite=createComponentCompositeIfNeeded(getContainer(),componentConfiguration);component=initialiseComponent(composite,componentConfiguration,componentConfiguration.getId());if(component!=null&&!childComponents.containsKey(componentConfiguration.getId())){childComponents.put(componentConfiguration.getId(),component);component.initialise();if(firstComponent==null){firstComponent=component;}addPage(component.getControl());if(componentConfiguration.getLabel()!=null){setPageText(pageIndex,ConfigurationUtils.getText(componentConfiguration.getLabel(),componentConfiguration));}++pageIndex;}}}}if(firstComponent==null){editorHelper.setComponent(firstComponent);}editorHelper.createControls();updateErrorMessage();}"
3184	"public void cardAcquired(Card card){Set<Card> cardsAcquiredInCurrentDeck=cardsAcquiredByDeck.get(getCurrentDeckNumber());if(cardsAcquiredInCurrentDeck==null){cardsAcquiredInCurrentDeck=new HashSet<>();}cardsAcquiredInCurrentDeck.add(card);cardsAcquiredByDeck.put(getCurrentDeckNumber(),cardsAcquiredInCurrentDeck);if(game.isRecruitingDrive()){nextShipOrBaseToTopOfDeck=true;}if(card.isBase()&&game.isRushedDefenses()){playCard(card);}else {if(acquireCardToHand){acquireCardToHand=false;addCardToHand(card);}else {if(acquireCardToTopOfDeck){acquireCardToTopOfDeck=false;addCardToTopOfDeck(card);}else {if((card instanceof ColonySeedShip&&factionPlayedThisTurn(Faction.TRADE_FEDERATION))||(card instanceof EmperorsDreadnaught&&factionPlayedThisTurn(Faction.STAR_EMPIRE))||(card instanceof PlasmaVent&&blobCardPlayedThisTurn())||(card instanceof WarningBeacon&&machineCultCardPlayedThisTurn())){addCardToHand(card);}else {if(card instanceof Hero){Hero hero=(Hero)card;heroes.add(hero);hero.heroAcquired(this);}else {if(card.isShip()&&(nextShipToTopOfDeck||nextShipOrBaseToTopOfDeck)){nextShipToTopOfDeck=false;nextShipOrBaseToTopOfDeck=false;addCardToTopOfDeck(card);}else {if(card.isShip()&&nextShipOrBaseToHand){nextShipOrBaseToHand=false;addCardToHand(card);}else {if(card.isBase()&&(nextBaseToHand||nextShipOrBaseToHand)){nextBaseToHand=false;nextShipOrBaseToHand=false;addCardToHand(card);}else {if(card.isBase()&&nextShipOrBaseToTopOfDeck){nextShipOrBaseToTopOfDeck=false;addCardToTopOfDeck(card);}else {discard.add(card);}}}}}}}}}if(cardToBuyThisTurn!=null&&cardToBuyThisTurn.getName().equals(card.getName())){cardToBuyThisTurn=null;if(firstTurn){boughtSpecifiedCardOnFirstTurn=true;}}if(yourTurn){currentTurnSummary.getCardsAcquired().add(card);}}"
3185	"@Override public void onUpdateSpec(Spec updatedSpec){_log.info(""Spec changed: ""+updatedSpec);if(!(updatedSpec instanceof FlowSpec)){return ;}if(!isActive&&helixManager.isPresent()){HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE,updatedSpec.getUri().toString(),UUID.randomUUID().toString(),InstanceType.CONTROLLER,helixManager.get(),_log);return ;}try{onDeleteSpec(updatedSpec.getUri(),updatedSpec.getVersion());}catch(Exception e){_log.error(""Failed to update Spec: ""+updatedSpec,e);}try{onAddSpec(updatedSpec);}catch(Exception e){_log.error(""Failed to update Spec: ""+updatedSpec,e);}}"
3186	"public void render(GameObject[] objs){clear();GLFWWindow window=MC2D.INSTANCE.getWindow();GL11.glEnable(GL11.GL_BLEND);GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);blockShader.bind();Matrix4f viewMatrix=transform.getViewMatrix(camera);Matrix4f projectionMatrix=transform.getProjectionMatrix(window.getWindowSize().x,window.getWindowSize().y);blockShader.setUniform(""projectionMatrix"",projectionMatrix);blockShader.setUniform(""texture_sampler"",0);ShaderProgram.unbind();basicShader.bind();basicShader.setUniform(""projectionMatrix"",projectionMatrix);ShaderProgram.unbind();for(GameObject obj : objs){if(obj.getMesh()!=null){if(obj.getMesh().useBasicShader()){basicShader.bind();if(!obj.isMeshBuilt()){obj.generateMesh();}Matrix4f modelViewMatrix=transform.getModelViewMatrix(obj,viewMatrix);basicShader.setUniform(""modelViewMatrix"",modelViewMatrix);basicShader.setUniform(""color"",new Vector3f(1.0,1.0,1.0));obj.render();}else {blockShader.bind();if(!obj.isMeshBuilt()){obj.generateMesh();}Matrix4f modelViewMatrix=transform.getModelViewMatrix(obj,viewMatrix);blockShader.setUniform(""modelViewMatrix"",modelViewMatrix);blockShader.setUniform(""opacity"",obj.getMesh().getOpacity());obj.render();}ShaderProgram.unbind();}}ShaderProgram.unbind();for(Runnable r : doLater){r.run();}doLater.clear();ShaderProgram.unbind();}"
3187	"public double[][] getProperties(FNTDoptions options,ImagePlus img){double[][] properties=null;if(arrayInitilized()){for(int channelIdx=0;channelIdx<getNChannels();channelIdx++){for(int frameIdx=0;frameIdx<getNFrames();frameIdx++){double[][] curProperties=new double[NCOLS_TOTAL][getNTrackSpots(channelIdx,frameIdx)];int trackIdx=0;for(int sliceIdx=0;sliceIdx<getNSlices();sliceIdx++){Vector<FNTDtrackSpot> pp=getTrackSpots(channelIdx,frameIdx,sliceIdx);for(int l=0;l<pp.size();l++){FNTDtrackSpot p=pp.get(l);curProperties[CHANNEL_NO][trackIdx]=(double)(p.channelIdx+1);curProperties[FRAME_NO][trackIdx]=(double)(p.frameIdx+1);curProperties[SLICE_NO][trackIdx]=(double)(p.sliceIdx+1);curProperties[TRACK_NO][trackIdx]=(double)(p.trackNo);curProperties[TRACKSPOT_NO][trackIdx]=(double)(p.trackSpotNo);curProperties[BELOW_DIST][trackIdx]=(double)(p.belowCriticalDistance);curProperties[FILTERED_TRACK][trackIdx]=(double)(p.filteredTrack);curProperties[IN_VALID_TRACK][trackIdx]=(p.isInValidTrack())?1.0:0.0;curProperties[X][trackIdx]=(double)(p.iX);curProperties[Y][trackIdx]=(double)(p.iY);curProperties[M0][trackIdx]=(double)(p.m0);curProperties[M2][trackIdx]=(double)(p.m2);curProperties[NP][trackIdx]=(double)(p.nonParticleDiscriminationScore);trackIdx++;}}if(img!=null){trackIdx=0;for(int sliceIdx=0;sliceIdx<getNSlices();sliceIdx++){img.setPosition(channelIdx+1,sliceIdx+1,frameIdx+1);ImageProcessor ip=img.getProcessor();Vector<FNTDtrackSpot> pp=getTrackSpots(channelIdx,frameIdx,sliceIdx);Vector<Roi> rois=toROIs(channelIdx,frameIdx,sliceIdx,options.processingOptions.evaluationRadius);int nFits=0;int nFitFails=0;if(!rois.isEmpty()){for(int l=0;l<rois.size();l++){Roi roi=rois.get(l);ip.setRoi(roi);ImageStatistics imageStatistics=ip.getStatistics();curProperties[SUM][trackIdx]=imageStatistics.mean;curProperties[MAX][trackIdx]=imageStatistics.max;curProperties[MIN][trackIdx]=imageStatistics.min;Rectangle r=roi.getBounds();int[] center={(int)Math.round(r.getCenterX()),(int)Math.round(r.getCenterY())};curProperties[CENTER][trackIdx]=ip.getPixelValue(center[0],center[1]);curProperties[AREA][trackIdx]=imageStatistics.area;curProperties[SUM][trackIdx]*=curProperties[AREA][trackIdx];ImageProcessor mask=roi.getMask();double xFit[]=new double[r.height*r.width];double yFit[]=new double[r.height*r.width];double valueFit[]=new double[r.height*r.width];int nValues=0;double M00=0.0;double M10=0.0;double M01=0.0;double m11=0.0;double m20=0.0;double m02=0.0;double rel_center_x=r.getCenterX()-r.x;double rel_center_y=r.getCenterY()-r.y;for(int m=0;m<r.height;m++){for(int n=0;n<r.width;n++){if((mask.getPixel(m,n)==0)||(m+r.x<0)||(m+r.x>=img.getWidth())||(n+r.y<0)||(n+r.y>=img.getHeight())){continue;}xFit[nValues]=m-rel_center_x+0.5;yFit[nValues]=n-rel_center_y+0.5;valueFit[nValues]=ip.getPixelValue(m+r.x,n+r.y);M00+=valueFit[nValues];M10+=xFit[nValues]*valueFit[nValues];M01+=yFit[nValues]*valueFit[nValues];nValues++;}}M10/=M00;M01/=M00;curProperties[X0][trackIdx]=M10;curProperties[Y0][trackIdx]=M01;for(int m=0;m<nValues;m++){m11+=(xFit[m]-M01)*(yFit[m]-M01)*valueFit[m];m20+=(xFit[m]-M10)*(xFit[m]-M10)*valueFit[m];m02+=(yFit[m]-M01)*(yFit[m]-M01)*valueFit[m];}m20/=M00;m02/=M00;m11/=M00;curProperties[WX][trackIdx]=Math.sqrt(m20);curProperties[WY][trackIdx]=Math.sqrt(m02);curProperties[COVXY][trackIdx]=Math.sqrt(m11);if(nValues>=4){xFit=new double[r.height*r.width];yFit=new double[r.height*r.width];int count=0;for(int m=0;m<r.height;m++){for(int n=0;n<r.width;n++){if((mask.getPixel(m,n)==0)||(m+r.x<0)||(n+r.y<0)||(m+r.x>=img.getWidth())||(n+r.y>=img.getHeight())){continue;}xFit[count]=(m+0.5+(r.x-curProperties[X][n]))*(m+0.5+(r.x-curProperties[X][n]))+(n+0.5+(r.y-curProperties[Y][n]))*(n+0.5+(r.y-curProperties[Y][n]));yFit[count++]=ip.getPixelValue(m+r.x,n+r.y);}}if(count>=4){CurveFitter curveFitter=new CurveFitter(Arrays.copyOfRange(xFit,1,count),Arrays.copyOfRange(yFit,1,count));curveFitter.doFit(CurveFitter.EXP_WITH_OFFSET);double sigma2_approx=options.processingOptions.evaluationRadius/2*options.processingOptions.evaluationRadius/2;curveFitter.setInitialParameters(new double{imageStatistics.max/(2*Math.PI*sigma2_approx),-1/(2*sigma2_approx)});double[] bestParams=curveFitter.getParams();bestParams[1]=Math.abs(bestParams[1]);curProperties[GAUSS_OFFSET][trackIdx]=bestParams[2];if(bestParams[1]>0){curProperties[GAUSS_AMP][trackIdx]=bestParams[0]*Math.PI/bestParams[1];curProperties[GAUSS_WX][trackIdx]=1.0/Math.sqrt(2.0*bestParams[1]);}else {curProperties[GAUSS_AMP][trackIdx]=0.0;curProperties[GAUSS_WX][trackIdx]=0.0;}}else {curProperties[GAUSS_AMP][trackIdx]=0.0;curProperties[GAUSS_WX][trackIdx]=0.0;curProperties[GAUSS_OFFSET][trackIdx]=0.0;}curProperties[GAUSS_X0][trackIdx]=0.0;curProperties[GAUSS_Y0][trackIdx]=0.0;curProperties[GAUSS_WY][trackIdx]=curProperties[GAUSS_WX][trackIdx];curProperties[GAUSS_VOL][trackIdx]=curProperties[GAUSS_AMP][trackIdx]*2.0*Math.PI*curProperties[GAUSS_WX][trackIdx]*curProperties[GAUSS_WY][trackIdx];curProperties[GAUSS_VOLOFF][trackIdx]=curProperties[GAUSS_OFFSET][trackIdx]*curProperties[AREA][trackIdx];}else {curProperties[GAUSS_VOL][trackIdx]=0.0;curProperties[GAUSS_X0][trackIdx]=0.0;curProperties[GAUSS_Y0][trackIdx]=0.0;curProperties[GAUSS_WX][trackIdx]=0.0;curProperties[GAUSS_WY][trackIdx]=0.0;curProperties[GAUSS_OFFSET][trackIdx]=0.0;curProperties[GAUSS_AMP][trackIdx]=0.0;curProperties[GAUSS_VOLOFF][trackIdx]=0.0;}trackIdx++;}}if((nFits>0)&&(nFitFails>0)){FNTDprogress.warning(""Warning: ""+nFitFails+"" out of ""+nFits+"" Gaussian fit failed for frame."");}}if(properties!=null){double[][] tmpProperties=new double[NCOLS_TOTAL][properties[0].length+curProperties[0].length];ArrayCalc.copy2DArrayByRow(properties,0,properties[0].length,tmpProperties,0);ArrayCalc.copy2DArrayByRow(curProperties,0,curProperties[0].length,tmpProperties,properties[0].length);properties=tmpProperties;}else {properties=new double[curProperties.length][curProperties[0].length];ArrayCalc.copy2DArray(curProperties,properties);}}}}}return properties;}"
3188	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}Channel channel=(Channel)o;if(inetSocketAddress!=null?!inetSocketAddress.equals(channel.inetSocketAddress):channel.inetSocketAddress!=null){return false;}return !(node!=null?!node.equals(channel.node):channel.node!=null);}"
3189	"@SuppressWarnings(""unchecked"") private void updateHighlight(){T oldHighlight=highlightedElement;highlightedElement=null;if(searchTree.getSelectionPath()!=null){DefaultMutableTreeNode node=(DefaultMutableTreeNode)searchTree.getSelectionPath().getLastPathComponent();if(clazz.isInstance(node.getUserObject())){highlightedElement=(T)((DefaultMutableTreeNode)searchTree.getSelectionPath().getLastPathComponent()).getUserObject();}}else {if(selectList.getSelectedIndex()!=-1){highlightedElement=(T)selectList.getSelectedValue();}}if(oldHighlight!=highlightedElement){firePropertyChange(PROPERTY_HIGHLIGHTING_CHANGED,oldHighlight,highlightedElement);}}"
3190	"public static Cookie[] getCookiesWithName(Cookie[] cookies,String cookieName){if(cookieName==null||cookieName.length()==0){return null;}Cookie[] found=new Cookie[cookies.length];int count=0;if(cookies!=null&&cookies.length>0){for(Cookie cookie : cookies){if(cookie.getName().equals(cookieName)){found[count++]=cookie;}}}if(count<found.length){return Arrays.copyOfRange(found,0,count);}return found;}"
3191	"public void setAllowPartialImplementation(boolean aAllow){this.mAllowPartialImplementation=aAllow;}"
3192	"private String getUserInput(String[] args) throws IOException{return args.length>0?args[0]:readInputFromConsole();}"
3193	"public void compileControlledCommand(){if(this.procedureCallStack.size()==1){ICommand rootCommand=this.procedureCallStack.pop();ExecutionManager.getInstance().addCommand(rootCommand);this.activeControlledCommand=null;}else {if(this.procedureCallStack.size()>1){ICommand childCommand=this.procedureCallStack.pop();ICommand parentCommand=this.procedureCallStack.peek();this.activeControlledCommand=parentCommand;if(parentCommand instanceof IControlledCommand){Console.log(LogType.DEBUG,TAG+""Parent is Controlled Command : ""+((IControlledCommand)parentCommand).getControlType());if(!(childCommand instanceof IControlledCommand||childCommand instanceof IAttemptCommand)){if(((IConditionalCommand)childCommand).getControlType()==ControlTypeEnum.CONDITIONAL_IF&&(((IControlledCommand)parentCommand).getControlType()==ControlTypeEnum.FOR_CONTROL||((IControlledCommand)parentCommand).getControlType()==ControlTypeEnum.DO_WHILE_CONTROL||((IControlledCommand)parentCommand).getControlType()==ControlTypeEnum.WHILE_CONTROL)){System.out.println(""Child Command is : ""+childCommand.getClass().getSimpleName());Console.log(LogType.DEBUG,""PARENT IS WHILE/DO WHILE"");return ;}}IControlledCommand controlledCommand=(IControlledCommand)parentCommand;controlledCommand.addCommand(childCommand);}else {if(parentCommand instanceof IAttemptCommand){Console.log(LogType.DEBUG,TAG+""Parent is Attempt command"");IAttemptCommand attemptCommand=(IAttemptCommand)parentCommand;if(this.isInTry){attemptCommand.addTryCommand(childCommand);}else {attemptCommand.addCatchCommand(this.currCatchType,childCommand);}}}}else {System.out.println(""Procedure call stack is now empty."");}}}"
3194	"public void setSelected(boolean toSet){m_selected=toSet;}"
3195	"@Override public void onBindViewHolder(ContentAdapter.ContentViewHolder holder,int position){Cardable current=contentItems.get(position);holder.header.setText(current.getHeader());holder.subHeader.setText(current.getSubheader());String accent=current.getAccentInfo();if(accent!=null){holder.accent.setText(accent);}else {holder.accent.setVisibility(View.GONE);}String imgUri=Constant.URI_IMAGE_BIG+current.getImagery();Picasso.with(context).load(imgUri).resize(1080,608).centerCrop().into(holder.imagery);}"
3196	"private void retracePreviousLink(List<Trace> traces,List<Connector> connectors) throws Exception{if(traces.size()>0){Trace lastTrace=traces.remove(traces.size()-1);if(lastTrace.getPath().get(0).isTop()){traces.add(traceLink(connectors,lastTrace.getLink(),false));field.setTraces(traces);}else {retracePreviousLink(traces,connectors);if(!isPathOverloaded(connectors,true)){traces.add(traceLink(connectors,lastTrace.getLink(),true));field.setTraces(traces);}else {if(!isPathOverloaded(connectors,false)){traces.add(traceLink(connectors,lastTrace.getLink(),false));field.setTraces(traces);}else {try{retracePreviousLink(traces,connectors);}catch(Exception e){System.out.println(e.getMessage());}}}}}else {throw new Exception(""Traces array is empty"");}}"
3197	"public static void reportWinnerByName(String winner,String loser,ArrayList<Battle> currentBattles){for(Battle b : currentBattles){if(b.getP1().getName().equals(winner)&&b.getP2().getName().equals(loser)){handleBattleWinner(b,""1"");currentBattles.remove(b);break;}if(b.getP2().getName().equals(winner)&&b.getP1().getName().equals(loser)){handleBattleWinner(b,""2"");currentBattles.remove(b);break;}}}"
3198	"public void handle(MouseEvent event){if(!event.isPrimaryButtonDown()){return ;}System.out.println(""node clicked"");DraggableNode node=(DraggableNode)event.getSource();if(mapController.nodeIsSelected()){mapController.unselectNode();}else {mapController.selectNode(node);}nodeDragContext.mouseAnchorX=event.getSceneX();nodeDragContext.mouseAnchorY=event.getSceneY();nodeDragContext.translateAnchorX=node.getTranslateX();nodeDragContext.translateAnchorY=node.getTranslateY();}"
3199	"public static void addToViewersOfItemCube(int idnumb,ItemStack cursor,Player check){Inventory inv=getViewingItemCubeInventory(idnumb,check);if(inv!=null){inv.addItem(cursor);}}"
3200	"private void checkForBackwardLinking(){for(Tld tld : this.tldsReservoir.getItems()){List<String> uriSet=tld.getfqUris().getItems();httpRetreiver.addListOfResourceToQueue(uriSet);httpRetreiver.start();while(uriSet.size()>0){String uri=uriSet.remove(0);CachedHTTPResource httpResource=(CachedHTTPResource)DiachronCacheManager.getInstance().getFromCache(DiachronCacheManager.HTTP_RESOURCE_CACHE,uri);if(httpResource==null||httpResource.getResponses()==null){uriSet.add(uri);continue;}if(this.isDereferenceable(httpResource)){Model m=this.getMeaningfulData(httpResource);if(m.size()>0){List<Pair<String,String>> lst=this.object_di_p.get(uri);for(Pair<String,String> p_uri : lst){List<Statement> allStatements=m.listStatements(null,null,m.createResource(p_uri.getFirstElement())).toList();if(allStatements.size()>0){di_p.put(p_uri,1.0);}else {this.createBackLinkViolation(p_uri.getFirstElement(),p_uri.getSecondElement());}}}else {this.createNotValidDereferenceableBacklinkLink(uri);}}}}}"
3201	"@PostMapping(""TerminalPolicyNode"") public Result addTerminalPolicyNode(TerminalPolicyNodeDao terminalPolicyNodeDao){terminalPolicyNodeDao.setStatus(StatusMsg.ENABLE.msg);if(synchronousService.getTerminalPolicyNodeById(terminalPolicyNodeDao.getSynchronous_policy_id())!=null&&orgTerminalService.getTerminalById(terminalPolicyNodeDao.getTerminal_id())!=null){if(synchronousService.addTerminalPolicyNode(terminalPolicyNodeDao)==1){return new Result(ReturnCode.SUCCESS.code,ReturnMsg.ADD_SUCCESS.msg);}else {return new Result(ReturnCode.FAILURE.code,ReturnMsg.ADD_FAILURE.msg);}}else {return new Result(ReturnCode.FAILURE.code,ReturnMsg.Parameter_error.msg);}}"
3202	"public void draw(Graphics2D g,DeciduousTileManager manager,ViewMapAnimationHandler animation){g.drawImage(manager.generateRobot(idleCounter,myDirection),getRobotX()-animation.getOriginX(),getRobotY()-animation.getOriginY(),null);if(selected){g.drawImage(manager.getHighlightTransparency(),myRobot.getX()*16-animation.getOriginX(),myRobot.getY()*16-animation.getOriginY(),null);}drawMoveRange(g,manager,animation);if(movementCounter%32==0&&movementCounter>0){doMovement();}idleCounter++;idleCounter=idleCounter%80;if(movementCounter>0){movementCounter--;}}"
3203	"@Override public boolean onTouch(View v,MotionEvent event){if(gestureDetector.onTouchEvent(event)){AlertDialog.Builder textDialogBuilder=new AlertDialog.Builder(context); final boolean recordingInProcess=sharedPreferences.getBoolean(""recording_in_process"",false); final SugiliteStartingBlock startingBlock=(SugiliteStartingBlock)sugiliteData.getScriptHead();String scriptName=(startingBlock==null?"""":startingBlock.getScriptName()); final String scriptDefinedName=scriptName.replace("".SugiliteScript"","""");if(recordingInProcess){textDialogBuilder.setTitle(""RECORDING: ""+scriptDefinedName);}else {if(sugiliteData.getScriptHead()!=null){textDialogBuilder.setTitle(""NOT RECORDING\nLAST RECORDED: ""+scriptDefinedName);}else {textDialogBuilder.setTitle(""NOT RECORDING"");}}boolean recordingInProgress=sharedPreferences.getBoolean(""recording_in_process"",false); final boolean runningInProgress=sugiliteData.getInstructionQueueSize()>0; final Queue<SugiliteBlock> storedQueue=runningInProgress?sugiliteData.getCopyOfInstructionQueue():null; final int previousState=sugiliteData.getCurrentSystemState();if(runningInProgress){sugiliteData.clearInstructionQueue();sugiliteData.setCurrentSystemState(SugiliteData.PAUSED_FOR_DUCK_MENU_STATE);}List<String> operationList=new ArrayList<>();if(runningInProgress){operationList.add(""Resume Running"");operationList.add(""Clear Instruction Queue"");}operationList.add(""View Script List"");if(startingBlock==null){operationList.add(""New Recording"");}else {if(recordingInProcess){operationList.add(""View Current Recording"");operationList.add(""Add GO_HOME Operation Block"");operationList.add(""Add Running a Subscript"");if(Const.KEEP_ALL_TEXT_LABEL_LIST){operationList.add(""Get a Text Element on the Screen"");}operationList.add(""Add a Delay"");operationList.add(""End Recording"");}else {operationList.add(""View Last Recording"");operationList.add(""Resume Last Recording"");operationList.add(""New Recording"");}}operationList.add(""Quit Sugilite"");String[] operations=new String[operationList.size()];operations=operationList.toArray(operations); final String[] operationClone=operations.clone();textDialogBuilder.setItems(operationClone,new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){switch (operationClone[which]) {case ""View Script List"":      Intent scriptListIntent=new Intent(context,SugiliteMainActivity.class);    scriptListIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  context.startActivity(scriptListIntent);Toast.makeText(context,""view script list"",Toast.LENGTH_SHORT).show();if (runningInProgress) sugiliteData.setCurrentSystemState(SugiliteData.DEFAULT_STATE);break;case ""View Last Recording"":case ""View Current Recording"":Intent intent=new Intent(context,ScriptDetailActivity.class);if (startingBlock != null && startingBlock.getScriptName() != null) {intent.putExtra(""scriptName"",startingBlock.getScriptName());intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);context.startActivity(intent);}Toast.makeText(context,""view current script"",Toast.LENGTH_SHORT).show();if (runningInProgress) sugiliteData.setCurrentSystemState(SugiliteData.DEFAULT_STATE);break;case ""End Recording"":SharedPreferences.Editor prefEditor=sharedPreferences.edit();prefEditor.putBoolean(""recording_in_process"",false);prefEditor.commit();if (sugiliteData.initiatedExternally == true && sugiliteData.getScriptHead() != null) {sugiliteData.communicationController.sendRecordingFinishedSignal(sugiliteData.getScriptHead().getScriptName());sugiliteData.sendCallbackMsg(Const.FINISHED_RECORDING,jsonProcessor.scriptToJson(sugiliteData.getScriptHead()),sugiliteData.callbackString);}sugiliteData.setCurrentSystemState(SugiliteData.DEFAULT_STATE);Toast.makeText(context,""end recording"",Toast.LENGTH_SHORT).show();break;case ""New Recording"":NewScriptDialog newScriptDialog=new NewScriptDialog(v.getContext(),sugiliteScriptDao,serviceStatusManager,sharedPreferences,sugiliteData,true,null,null);newScriptDialog.show();break;case ""Resume Last Recording"":sugiliteData.initiatedExternally=false;SharedPreferences.Editor prefEditor2=sharedPreferences.edit();prefEditor2.putBoolean(""recording_in_process"",true);prefEditor2.commit();Toast.makeText(context,""resume recording"",Toast.LENGTH_SHORT).show();sugiliteData.setCurrentSystemState(SugiliteData.RECORDING_STATE);break;case ""Quit Sugilite"":Toast.makeText(context,""quit sugilite"",Toast.LENGTH_SHORT).show();try {screenshotManager.take(false);} catch (Exception e) {e.printStackTrace();}break;case ""Clear Instruction Queue"":sugiliteData.clearInstructionQueue();sugiliteData.setCurrentSystemState(SugiliteData.DEFAULT_STATE);storedQueue.clear();break;case ""Resume Running"":dialog.dismiss();break;case ""Add GO_HOME Operation Block"":SugiliteOperationBlock operationBlock=new SugiliteOperationBlock();SugiliteOperation operation=new SugiliteOperation(SugiliteOperation.SPECIAL_GO_HOME);operationBlock.setOperation(operation);operationBlock.setDescription(descriptionGenerator.generateReadableDescription(operationBlock));try {SugiliteBlock currentBlock=sugiliteData.getCurrentScriptBlock();if (currentBlock == null || sugiliteData.getScriptHead() == null) throw new Exception(""NULL CURRENT BLOCK OR NULL SCRIPT"");operationBlock.setPreviousBlock(currentBlock);if (currentBlock instanceof SugiliteOperationBlock) ((SugiliteOperationBlock)currentBlock).setNextBlock(operationBlock); else if (currentBlock instanceof SugiliteStartingBlock) ((SugiliteStartingBlock)currentBlock).setNextBlock(operationBlock); else if (currentBlock instanceof SugiliteSpecialOperationBlock) ((SugiliteSpecialOperationBlock)currentBlock).setNextBlock(operationBlock); else throw new Exception(""UNSUPPORTED BLOCK TYPE"");sugiliteData.setCurrentScriptBlock(operationBlock);sugiliteScriptDao.save(sugiliteData.getScriptHead());Intent startMain=new Intent(Intent.ACTION_MAIN);startMain.addCategory(Intent.CATEGORY_HOME);startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);context.startActivity(startMain);} catch (Exception e) {e.printStackTrace();}break;case ""Add Running a Subscript"":final SugiliteSubscriptSpecialOperationBlock subscriptBlock=new SugiliteSubscriptSpecialOperationBlock();subscriptBlock.setDescription(descriptionGenerator.generateReadableDescription(subscriptBlock));List<String> subscriptNames=sugiliteScriptDao.getAllNames();AlertDialog.Builder chooseSubscriptDialogBuilder=new AlertDialog.Builder(context);String[] subscripts=new String[subscriptNames.size()];subscripts=subscriptNames.toArray(subscripts);final String[] subscriptClone=subscripts.clone();chooseSubscriptDialogBuilder.setItems(subscriptClone,new DialogInterface.OnClickListener(){@Override public void onClick(DialogInterface dialog,int which){dialog.dismiss();String chosenScriptName=subscriptClone[which];subscriptBlock.setSubscriptName(chosenScriptName);SugiliteStartingBlock script=sugiliteScriptDao.read(chosenScriptName);if (script != null) {try {SugiliteBlock currentBlock=sugiliteData.getCurrentScriptBlock();if (currentBlock == null || sugiliteData.getScriptHead() == null) throw new Exception(""NULL CURRENT BLOCK OR NULL SCRIPT"");subscriptBlock.setPreviousBlock(currentBlock);if (currentBlock instanceof SugiliteOperationBlock) ((SugiliteOperationBlock)currentBlock).setNextBlock(subscriptBlock); else if (currentBlock instanceof SugiliteStartingBlock) ((SugiliteStartingBlock)currentBlock).setNextBlock(subscriptBlock); else if (currentBlock instanceof SugiliteSpecialOperationBlock) ((SugiliteSpecialOperationBlock)currentBlock).setNextBlock(subscriptBlock); else throw new Exception(""UNSUPPORTED BLOCK TYPE"");sugiliteData.setCurrentScriptBlock(subscriptBlock);sugiliteScriptDao.save(sugiliteData.getScriptHead());} catch (Exception e) {e.printStackTrace();}SharedPreferences.Editor prefEditor=sharedPreferences.edit();prefEditor.putBoolean(""recording_in_process"",false);prefEditor.commit();try {subscriptBlock.run(context,sugiliteData,sugiliteScriptDao,sharedPreferences);} catch (Exception e) {e.printStackTrace();}}}});Dialog chooseSubscriptDialog=chooseSubscriptDialogBuilder.create();chooseSubscriptDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);chooseSubscriptDialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_box);chooseSubscriptDialog.show();break;case ""Add a Delay"":SugiliteDelaySpecialOperationBlock delaySpecialOperationBlock=new SugiliteDelaySpecialOperationBlock(10000);delaySpecialOperationBlock.setDescription(""Delay for 10s"");try {SugiliteBlock currentBlock=sugiliteData.getCurrentScriptBlock();if (currentBlock == null || sugiliteData.getScriptHead() == null) throw new Exception(""NULL CURRENT BLOCK OR NULL SCRIPT"");delaySpecialOperationBlock.setPreviousBlock(currentBlock);if (currentBlock instanceof SugiliteOperationBlock) ((SugiliteOperationBlock)currentBlock).setNextBlock(delaySpecialOperationBlock); else if (currentBlock instanceof SugiliteStartingBlock) ((SugiliteStartingBlock)currentBlock).setNextBlock(delaySpecialOperationBlock); else if (currentBlock instanceof SugiliteSpecialOperationBlock) ((SugiliteSpecialOperationBlock)currentBlock).setNextBlock(delaySpecialOperationBlock); else throw new Exception(""UNSUPPORTED BLOCK TYPE"");sugiliteData.setCurrentScriptBlock(delaySpecialOperationBlock);sugiliteScriptDao.save(sugiliteData.getScriptHead());} catch (Exception e) {e.printStackTrace();}break;case ""Get a Text Element on the Screen"":SelectElementWithTextDialog selectElementWithTextDialog=new SelectElementWithTextDialog(context,layoutInflater,sugiliteData);selectElementWithTextDialog.show();break;default :}}});Dialog dialog=textDialogBuilder.create();dialog.setOnDismissListener(new DialogInterface.OnDismissListener(){  @Override public void onDismiss(  DialogInterface dialog){    if (runningInProgress) {      sugiliteData.addInstructions(storedQueue);      sugiliteData.setCurrentSystemState(previousState);    }  }});dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);dialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_box);dialog.show();return true;}switch (event.getAction()){case MotionEvent.ACTION_DOWN :initialX=mPaperParams.x;initialY=mPaperParams.y;initialTouchX=event.getRawX();initialTouchY=event.getRawY();return true;case MotionEvent.ACTION_UP :return true;case MotionEvent.ACTION_MOVE :mPaperParams.x=initialX-(int)(initialTouchX-event.getRawX());mPaperParams.y=initialY+(int)(event.getRawY()-initialTouchY);windowManager.updateViewLayout(view,mPaperParams);return true;}return false;}"
3204	"public int[] findHorizontalSeam(){if(!rightSide){System.out.println(""transposed for horizontal"");tempPic=transposeImage(tempPic);rightSide=true;}int[] results=new int[tempPic.width()];double[] dist=new double[tempPic.width()*tempPic.height()];int[] parentEdge=new int[tempPic.width()*tempPic.height()];Queue bfsQueue=new Queue();for(int y=0;y<tempPic.height();y++){int currentV=nodeID(0,y);dist[currentV]=0;parentEdge[currentV]=-1;bfsQueue.enqueue(currentV);}for(int x=1;x<tempPic.width();x++){for(int y=0;y<tempPic.height();y++){dist[nodeID(x,y)]=Double.MAX_VALUE;}}while(!bfsQueue.isEmpty()){int current=(int)bfsQueue.dequeue();int[] coord=idToCoord(current);double currentNodeDist=dist[current];if(coord[0]<tempPic.width()-1){if(coord[1]>0){double oldDist=dist[nodeID(coord[0]+1,coord[1]-1)];double newDist=currentNodeDist+tempEnergyGrid[coord[0]+1][coord[1]-1];if(oldDist>newDist){dist[nodeID(coord[0]+1,coord[1]-1)]=newDist;parentEdge[nodeID(coord[0]+1,coord[1]-1)]=current;}bfsQueue.enqueue(nodeID(coord[0]+1,coord[1]-1));}if(coord[1]<tempPic.height()-1){double oldDist=dist[nodeID(coord[0]+1,coord[1]+1)];double newDist=currentNodeDist+tempEnergyGrid[coord[0]+1][coord[1]+1];if(oldDist>newDist){dist[nodeID(coord[0]+1,coord[1]+1)]=newDist;parentEdge[nodeID(coord[0]+1,coord[1]+1)]=current;}bfsQueue.enqueue(nodeID(coord[0]+1,coord[1]+1));}double oldDist=dist[nodeID(coord[0]+1,coord[1])];double newDist=currentNodeDist+tempEnergyGrid[coord[0]+1][coord[1]];if(oldDist>newDist){dist[nodeID(coord[0]+1,coord[1])]=newDist;parentEdge[nodeID(coord[0]+1,coord[1])]=current;}bfsQueue.enqueue(nodeID(coord[0]+1,coord[1]));}}int maxNode=0;double maxDist=Double.MAX_VALUE;for(int i=0;i<tempPic.height();i++){int node=nodeID(tempPic.width()-1,i);if(dist[node]<maxDist){maxDist=dist[node];maxNode=node;}}int count=results.length-1;int[] coord=idToCoord(maxNode);results[count]=coord[1];count--;while(count>=0){maxNode=parentEdge[maxNode];int[] cd=idToCoord(maxNode);results[count]=cd[1];count--;}return results;}"
3205	"public void CoordinatePressed(int position){if(index<5&&started==false){soldiers[index]=position;index++;}}"
3206	"@Override public boolean transmitMessage(String sender,String message) throws InterruptedException{switch (sender){case ACCELID :if(message==""moveStrong""){sound.play(blow);Thread.sleep(1200);niebla.setAlpha(0.0);mist_gone=true;touch.startChecking();Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(500);}else {if(message==""moveSoft""){Toast.makeText(getApplicationContext(),""?Tienes que agitar m?s fuerte para que se vaya el ectoplasma!"",Toast.LENGTH_LONG).show();}}break;case TOUCHID :if(message==""pathStart""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(100);}else {if(message==""destinyReached""){Toast.makeText(getApplicationContext(),""?Bien, has desbloqueado la runa!"",Toast.LENGTH_LONG).show();Intent intent=new Intent(this,StarPatternActivity.class);startActivity(intent);}else {if(message==""pathLost""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(200);}}}break;case GYROID :if(message==""doPulsation""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(50);}else {if(message==""ghostFound""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(500);}}break;case COMPID :if(message==""doPulsation""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(50);}else {if(message==""ghostFound""){Vibrator vib=(Vibrator)getSystemService(getApplicationContext().VIBRATOR_SERVICE);vib.vibrate(500);}}break;}return true;}"
3207	"public Message putHelper(String key,String value) throws Exception{String filename=""""+key;File varTmpDir=new File(filename);boolean exists=varTmpDir.exists();if(value==null){if(!exists){return new Message(key,value,Message.StatusType.PUT_ERROR);}else {removeFromCache(key);boolean rem=varTmpDir.delete();if(!rem){return new Message(key,value,Message.StatusType.PUT_ERROR);}else {return new Message(key,value,Message.StatusType.PUT_SUCCESS);}}}BufferedWriter bw=null;FileWriter fw=null;try{fw=new FileWriter(filename);bw=new BufferedWriter(fw);bw.write(value);bw.close();fw.close();insertIntoCache(key,value);if(exists){return new Message(key,value,Message.StatusType.PUT_UPDATE);}else {return new Message(key,value,Message.StatusType.PUT_SUCCESS);}}catch(IOException e){System.out.println(""Exception generated while opening/creating the file"");return new Message(key,value,Message.StatusType.PUT_ERROR);}}"
3208	"@Override public boolean isCorrectDatabaseImplementation(DatabaseConnection conn) throws DatabaseException{String databaseProductName=conn.getDatabaseProductName();int majorVersion=conn.getDatabaseMajorVersion();if(majorVersion<=SQL_SERVER_2008_MAJOR_VERSION){LogFactory.getInstance().getLog().warning(String.format(""Your SQL Server major version (%d) seems to indicate that your software is older than ""+""SQL Server 2008. Unfortunately, this is not supported, and this connection cannot be used.""));return false;}return PRODUCT_NAME.equalsIgnoreCase(databaseProductName)||""SQLOLEDB"".equalsIgnoreCase(databaseProductName);}"
3209	"public Field(String name,FieldType fieldType,boolean isPrimaryKey,boolean inNull,boolean isUnique,int size){this.name=name;this.isPrimaryKey=isPrimaryKey;this.isNull=inNull;this.isUnique=isUnique;this.fieldType=fieldType;this.size=size;}"
3210	"private void exportNode(PrintWriter writer,DimensionNode node,boolean first,String language){if(!first){writer.println(',');}writer.println('{');boolean isCommaNeeded=false;isCommaNeeded=attribute(writer,""id"",node.getId(),isCommaNeeded);isCommaNeeded=attribute(writer,""sid"",node.getSurrogateId(),isCommaNeeded);isCommaNeeded=attribute(writer,""label"",label(node.getLabel().getValue(language)),isCommaNeeded);isCommaNeeded=attribute(writer,""stage"",node.getLevel().getId(),isCommaNeeded);isCommaNeeded=attribute(writer,""code"",node.getCode(),isCommaNeeded);isCommaNeeded=attribute(writer,""sort"",node.getSort(),isCommaNeeded);isCommaNeeded=attribute(writer,""decimals"",node.getDecimals(),isCommaNeeded);isCommaNeeded=attribute(writer,""uri"",node.getReference(),isCommaNeeded);Set<Entry<String,Label>> properties=node.getProperties();if(properties!=null&&!properties.isEmpty()){writer.println("",\n\t\""properties\"": {"");boolean isPropertyCommaNeeded=false;for(Map.Entry<String,Label> p : properties){isPropertyCommaNeeded=attribute(writer,p.getKey(),p.getValue().getValue(language),isPropertyCommaNeeded);}writer.print(""\n\t}"");}Collection<DimensionNode> children=node.getChildren();if(!children.isEmpty()){writer.println("",\n\t\""children\"": ["");boolean firstNode=true;for(DimensionNode child : children){exportNode(writer,child,firstNode,language);firstNode=false;}writer.print(']');}else {writer.println("",\n\t\""children\"": []"");}writer.print(""\n}"");first=false;}"
3211	"@Override public void peekPanel(StateChangeReason reason){super.peekPanel(reason);if(getPanelState()==PanelState.CLOSED||getPanelState()==PanelState.PEEKED){mHasSearchContentViewBeenTouched=false;}}"
3212	"private static void ProcessUnix(char input){if(input!=20&&input!=127&&input!=9){System.out.print(input);}if(input==20){JTerm.capsOn=!JTerm.capsOn;}else {if(input==127){if(JTerm.command.length()>0){JTerm.command=JTerm.command.substring(0,JTerm.command.length()-1);System.out.print(""\b \b"");}}else {if("",./\\-_+=~"".contains(String.valueOf(input))){JTerm.command+=input;}else {if(input=='\t'&&JTerm.command.length()>0){String[] commandArr=JTerm.command.split("" "");String currText=commandArr[commandArr.length-1];if(commandArr.length>1){FileAutocomplete(currText);}else {if(commandArr.length==1){CommandAutocomplete(currText);}}}else {if(input=='\n'){if(JTerm.command.length()>0){JTerm.Parse(JTerm.command);}JTerm.command="""";}else {if(Character.isLetter(input)){if(!JTerm.capsOn){JTerm.command+=input;}else {JTerm.command+=Character.toUpperCase(input);}}else {if(Character.isDefined(input)){JTerm.command+=input;}}}}}}}}"
3213	"@Override public void exportGroupAddVolumes(URI storageURI,URI exportGroupURI,Map<URI,Integer> volumeMap,String token) throws Exception{ExportTaskCompleter taskCompleter=null;try{_log.info(String.format(""exportAddVolume start - Array: %s ExportMask: %s Volume: %s"",storageURI.toString(),exportGroupURI.toString(),Joiner.on(',').join(volumeMap.entrySet())));ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,storageURI);if(exportMasks!=null&&!exportMasks.isEmpty()){Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),""exportGroupAddVolumes - Added volumes to existing mask"",true,token);List<URI> volumeURIs=new ArrayList<URI>();volumeURIs.addAll(volumeMap.keySet());Collection<URI> initiatorURIs=Collections2.transform(exportGroup.getInitiators(),CommonTransformerFunctions.FCTN_STRING_TO_URI);findAndUpdateFreeHLUsForClusterExport(storage,exportGroup,new ArrayList<URI>(initiatorURIs),volumeMap);String zoningStep=generateZoningAddVolumesWorkflow(workflow,null,exportGroup,exportMasks,volumeURIs);String exportStep=null;for(ExportMask exportMask : exportMasks){if(exportStep==null){exportStep=generateExportMaskAddVolumesWorkflow(workflow,zoningStep,storage,exportGroup,exportMask,volumeMap,null);}else {exportStep=generateExportMaskAddVolumesWorkflow(workflow,exportStep,storage,exportGroup,exportMask,volumeMap,null);}}String successMessage=String.format(""Volumes successfully added to export on StorageArray %s"",storage.getLabel());workflow.executePlan(taskCompleter,successMessage);}else {if(exportGroup.getInitiators()!=null&&!exportGroup.getInitiators().isEmpty()){_log.info(""export_volume_add: adding volume, creating a new export"");List<URI> initiatorURIs=new ArrayList<URI>();for(String initiatorId : exportGroup.getInitiators()){initiatorURIs.add(URI.create(initiatorId));}exportGroupCreate(storageURI,exportGroupURI,initiatorURIs,volumeMap,token);}else {_log.info(""export_volume_add: adding volume, no initiators yet"");taskCompleter.ready(_dbClient);}}_log.info(String.format(""exportAddVolume end - Array: %s ExportMask: %s Volume: %s"",storageURI.toString(),exportGroupURI.toString(),volumeMap.toString()));}catch(Exception e){if(taskCompleter!=null){ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(e.getMessage(),e);taskCompleter.error(_dbClient,serviceError);}else {throw DeviceControllerException.exceptions.exportGroupAddVolumesFailed(e);}}}"
3214	"public static void open(Context ctx,String anchor){try{String url=anchor;if(!url.startsWith(URL_INDEX)){url=URL_INDEX+(anchor==null?"""":""#alias_""+anchor);}Intent i=new Intent(Intent.ACTION_VIEW);i.setData(Uri.parse(url));{i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);}ctx.startActivity(i);}catch(Exception e){e.printStackTrace();}}"
3215	"@Override public void exportGroupAddVolumes(URI storageURI,URI exportGroupURI,Map<URI,Integer> volumeMap,String token) throws Exception{ExportTaskCompleter taskCompleter=null;try{_log.info(String.format(""exportAddVolume start - Array: %s ExportMask: %s Volume: %s"",storageURI.toString(),exportGroupURI.toString(),Joiner.on(',').join(volumeMap.entrySet())));ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,storageURI);if(exportMasks!=null&&!exportMasks.isEmpty()){Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),""exportGroupAddVolumes - Added volumes to existing mask"",true,token);List<URI> volumeURIs=new ArrayList<URI>();volumeURIs.addAll(volumeMap.keySet());String zoningStep=generateZoningAddVolumesWorkflow(workflow,null,exportGroup,exportMasks,volumeURIs);String exportStep=null;for(ExportMask exportMask : exportMasks){if(exportStep==null){exportStep=generateExportMaskAddVolumesWorkflow(workflow,zoningStep,storage,exportGroup,exportMask,volumeMap,null);}else {exportStep=generateExportMaskAddVolumesWorkflow(workflow,exportStep,storage,exportGroup,exportMask,volumeMap,null);}}String successMessage=String.format(""Volumes successfully added to export on StorageArray %s"",storage.getLabel());workflow.executePlan(taskCompleter,successMessage);}else {if(exportGroup.getInitiators()!=null&&!exportGroup.getInitiators().isEmpty()){_log.info(""export_volume_add: adding volume, creating a new export"");List<URI> initiatorURIs=new ArrayList<URI>();for(String initiatorId : exportGroup.getInitiators()){initiatorURIs.add(URI.create(initiatorId));}exportGroupCreate(storageURI,exportGroupURI,initiatorURIs,volumeMap,token);}else {_log.info(""export_volume_add: adding volume, no initiators yet"");taskCompleter.ready(_dbClient);}}_log.info(String.format(""exportAddVolume end - Array: %s ExportMask: %s Volume: %s"",storageURI.toString(),exportGroupURI.toString(),volumeMap.toString()));}catch(Exception e){if(taskCompleter!=null){ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(e.getMessage(),e);taskCompleter.error(_dbClient,serviceError);}else {throw DeviceControllerException.exceptions.exportGroupAddVolumesFailed(e);}}}"
3216	"@Override public void draw(Graphics2D graphics){graphics.setColor(new Color(0,0,0,127));graphics.fillRect(300,50,GamePanel.WINDOW_WIDTH-50-300,GamePanel.WINDOW_HEIGHT-100);graphics.setFont(fontTitle);graphics.setColor(Color.WHITE);graphics.drawString(""Choose your game:"",350,100);graphics.setFont(font);for(int i=0;i<list.length;i++){File f=list[i];if(f.isFile()){graphics.setColor((i==selected)?Color.RED:Color.WHITE);graphics.drawString(f.getName().replace("".msave"",""""),350,150+(i*30));}}}"
3217	"private int anchorHitTest(float x,float y){for(int i=0;i<anchors.length;i++){if(anchors[i].hit(x-anchors[i].getX(),y-anchors[i].getY(),true)!=null){return i;}}return -1;}"
3218	"public static void onAble(WidgetOperationEntry e,boolean valueNow,ListEditor resLE){ final List<WidgetOperationEntry> l=WidgetPreferences.readEntries();if(!canAddMoreOps(l,WIDGET_MAX_OPS)&&!valueNow){return ;}l.get(l.indexOf(e)).setEnabled(!valueNow);e.setEnabled(!valueNow);WidgetPreferences.storeEntries(l);resLE.loadDefault();}"
3219	"@Override public void handle(MouseEvent event){GameField gameField=(GameField)event.getSource();switch (event.getButton()){case SECONDARY :gameField.mark();break;case PRIMARY :if(FieldStatus.MARKED==gameField.getStatus()){return ;}if(gameField.isMine()){}else {if(gameField.getStatus()==FieldStatus.COVERED){gameField.uncover();}}}}"
3220	"protected boolean isYearOlderThan89(String value){CalendarValidator validator=CalendarValidator.getInstance();Calendar date=validator.validate(value,""yyyy"");if(date==null){return false;}int birthYear=validator.validate(value,""yyyy"").get(Calendar.YEAR);int currentYear=Calendar.getInstance().get(Calendar.YEAR);return currentYear-birthYear>89;}"
3221	"@Override public int compareTo(RegistrationAddress registrationAddress){if((this.keyToRegistrationPersons==registrationAddress.keyToRegistrationPersons)&&(this.sequenceNumberToAddresses==registrationAddress.sequenceNumberToAddresses)){if(this.yearOfAddress<registrationAddress.yearOfAddress){return -1;}if(this.yearOfAddress>registrationAddress.yearOfAddress){return 1;}if(this.monthOfAddress<registrationAddress.monthOfAddress){return -1;}if(this.monthOfAddress>registrationAddress.monthOfAddress){return 1;}if(this.dayOfAddress<registrationAddress.dayOfAddress){return -1;}if(this.dayOfAddress>registrationAddress.dayOfAddress){return 1;}return 0;}if(this.keyToRegistrationPersons==registrationAddress.keyToRegistrationPersons){if(this.sequenceNumberToAddresses<registrationAddress.sequenceNumberToAddresses){return -1;}if(this.sequenceNumberToAddresses>registrationAddress.sequenceNumberToAddresses){return 1;}}if(this.keyToRegistrationPersons<registrationAddress.keyToRegistrationPersons){return -1;}return 1;}"
3222	"@Transactional @Authorization public boolean modifyArtworkById(int id,ArtworkPostDTO artworkPostDTO,String token,int uid){if(artworkRepository.modifyByIdUserIdAndIdArtwork(uid,id,artworkPostDTO.getCountImage(),artworkPostDTO.getTitle(),artworkPostDTO.getIntroduction())>0){artworkRepository.updateFreezeByIdArtworkAndCountImage(id,resourceService.listArtworkResource(id).size()!=artworkPostDTO.getCountImage());return true;}return false;}"
3223	"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException,ServletException{HttpServletRequest request=(HttpServletRequest)servletRequest;HttpServletResponse response=(HttpServletResponse)servletResponse;String userAgent=request.getHeader(""USER-AGENT"").toLowerCase();String uri=request.getRequestURI();boolean isFromMobile=CheckMobile.check(userAgent);if(isFromMobile&&!uri.startsWith(""/mobile"")&&!uri.startsWith(""/rest"")){response.sendRedirect(""/mobile""+uri);return ;}else {if(!isFromMobile&&uri.startsWith(""/mobile"")){response.sendRedirect(uri.replace(""/mobile"",""""));return ;}}filterChain.doFilter(servletRequest,servletResponse);}"
3224	"static String getVCFLine(String chrom,int start,int end,Sample sample){if(sample.calledvariants){StringBuffer altbases=new StringBuffer("""");int alts=0,refs=0;for(int i=0;i<Main.drawCanvas.varOverLap.vars.size()-1;i++){altbases.append(Main.drawCanvas.varOverLap.vars.get(i).getKey());}alts=Main.drawCanvas.varOverLap.vars.get(0).getValue().get(0).getCalls();refs=(Main.drawCanvas.varOverLap.vars.get(0).getValue().get(0).getCoverage()-Main.drawCanvas.varOverLap.vars.get(0).getValue().get(0).getCalls());String genotype="""";if(alts/(double)refs>0.95){genotype=""1/1"";}else {genotype=""0/1"";}altbases.append(Main.drawCanvas.varOverLap.vars.get(Main.drawCanvas.varOverLap.vars.size()-1).getKey());return Main.drawCanvas.splits.get(0).chrom+""\t""+(Main.drawCanvas.varOverLap.getPosition()+1)+""\t.\t""+Main.getBase.get(Main.drawCanvas.varOverLap.getRefBase())+""\t""+altbases+""\t99\tPASS\tINFO\tGT:AD:DP\t""+genotype+"":""+refs+"",""+alts+"":""+(refs+alts);}String line="""";cancelfileread=false;cancelvarcount=false;try{if(!(VariantHandler.hideIndels.isSelected()&&VariantHandler.hideSNVs.isSelected())){if(sample.multipart){for(int i=sample.getIndex();i>=0;i--){if(!Main.drawCanvas.sampleList.get(i).multipart){sample=Main.drawCanvas.sampleList.get(i);break;}}}if(sample.getTabixFile()!=null){setVCFFileStart(chrom,start,end+3,sample);boolean vcf=sample.getVCFReader()!=null;while(line!=null){if(vcf){try{sample.getVCFReader().ready();}catch(IOException ex){}}try{if(vcf){line=sample.getVCFReader().readLine();}else {line=sample.getVCFInput().readLine();}if(Integer.parseInt(line.split(""\t"")[1])==start+1){if(sample.getVCFReader()!=null){sample.getVCFReader().close();}return line;}}catch(Exception ex){Main.showError(ex.getMessage(),""Error"");ErrorLog.addError(ex.getStackTrace());ex.printStackTrace();Main.cancel();changing=false;}}if(sample.getVCFReader()!=null){sample.getVCFReader().close();}return line;}}}catch(Exception exc){Main.showError(exc.getMessage(),""Error"");System.out.println(sample.getName());exc.printStackTrace();ErrorLog.addError(exc.getStackTrace());changing=false;}return """";}"
3225	"@Override public boolean equals(Object obj){if(obj==this){return true;}if(obj==null){return false;}if(!(obj instanceof Configuration)){return false;}if(!Configuration.class.isAssignableFrom(obj.getClass())){return false;} final Configuration configuration=(Configuration)obj;if(!(this.zipOutput==configuration.isZipOutput())){return false;}if(this.outputFolder==null&&configuration.getOutputFolder()!=null){return false;}if(this.outputFolder!=null&&configuration.getOutputFolder()==null){return false;}if(this.outputFolder!=null&&configuration.getOutputFolder()!=null&&!this.outputFolder.equals(configuration.getOutputFolder())){return false;}return true;}"
3226	"public static boolean isLoginValid(String username,String password){if(username==""testuser""&&password==""123456""){return true;}return false;}"
3227	"@Override public boolean test(Object left,Object right){return (boolean)left.equals((boolean)right);}"
3228	"public void executeGameLoop(){while(true){for(PlayerThread p : players){if(p.wantsTermination()){System.out.println(""Player ""+p+"" wants to leave."");return ;}if(p.getCurrentInputState()!=0){System.out.println(""Player ""+p+"" current input: ""+p.getCurrentInputState());modifyState(""""+p.getCurrentInputState());p.sendUpdate(state);p.resetCurrentInputState();}}}}"
3229	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_splash);mContext=this;LocalCache.Init();boolean result=FileUtil.createDownloadFileStoreFolder();if(!result){Log.i(TAG,""onCreate: Create download file store folder failed"");}FNAS.retrieveLocalMedia(mContext);mGateway=LocalCache.getGateway(mContext);mUuid=LocalCache.getUuidValue(mContext);mPassword=LocalCache.getPasswordValue(mContext);mToken=LocalCache.getToken(mContext);if(mUuid!=null&&mPassword!=null&&mGateway!=null&&mToken!=null){Util.loginType=LoginType.SPLASH_SCREEN;FNAS.retrieveRemoteToken(mContext,mGateway,mUuid,mPassword);}mHandler=new CustomHandler(this);mHandler.sendEmptyMessageDelayed(WELCOME,DELAY_TIME_MILLISECOND);}"
3230	"public static IFolder createFolderInto(String folderPath,IProject project) throws CoreException{if(folderPath!=null&&folderPath.length()>0){IFolder folder=project.getFolder(folderPath);if(!folder.exists()){createFolder(folder,false,true,null);}return folder;}return null;}"
3231	"private boolean noPaymentMethodsAvailable(){return !mAccountMoneyEnabled&&(mSavedCards==null||mSavedCards.isEmpty())&&(mPaymentMethodSearch.getGroups()==null||mPaymentMethodSearch.getGroups().isEmpty());}"
3232	"private void filterAllEdges(JsonNode objectNode,Map<String,JsonNode> edgeMap,Map<String,List<JsonNode>> sourceAndTargetMap,Map<String,JsonNode> shapeMap,Map<String,JsonNode> sourceRefMap){if(objectNode.get(EDITOR_CHILD_SHAPES)!=null){for(JsonNode jsonChildNode : objectNode.get(EDITOR_CHILD_SHAPES)){ObjectNode childNode=(ObjectNode)jsonChildNode;String stencilId=BpmnJsonConverterUtil.getStencilId(childNode);if(STENCIL_SUB_PROCESS.equals(stencilId)||STENCIL_POOL.equals(stencilId)||STENCIL_LANE.equals(stencilId)){filterAllEdges(childNode,edgeMap,sourceAndTargetMap,shapeMap,sourceRefMap);}else {if(STENCIL_SEQUENCE_FLOW.equals(stencilId)||STENCIL_ASSOCIATION.equals(stencilId)){String childEdgeId=BpmnJsonConverterUtil.getElementId(childNode);JsonNode targetNode=childNode.get(""target"");if(targetNode!=null&&targetNode.isNull()==false){String targetRefId=targetNode.get(EDITOR_SHAPE_ID).asText();List<JsonNode> sourceAndTargetList=new ArrayList<JsonNode>();sourceAndTargetList.add(sourceRefMap.get(childNode.get(EDITOR_SHAPE_ID).asText()));sourceAndTargetList.add(shapeMap.get(targetRefId));sourceAndTargetMap.put(childEdgeId,sourceAndTargetList);}edgeMap.put(childEdgeId,childNode);}}}}}"
3233	"@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public TaskList createVolume(VolumeCreate param) throws InternalException{ArgValidator.checkFieldNotNull(param,""volume_create"");ArgValidator.checkFieldUriType(param.getProject(),Project.class,""project"");Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);ArgValidator.checkEntity(project,param.getProject(),isIdEmbeddedInURL(param.getProject()));BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);ArgValidator.checkFieldUriType(param.getVarray(),VirtualArray.class,""varray"");VirtualArray varray=BlockServiceUtils.verifyVirtualArrayForRequest(project,param.getVarray(),uriInfo,_permissionsHelper,_dbClient);ArgValidator.checkEntity(varray,param.getVarray(),isIdEmbeddedInURL(param.getVarray()));VirtualPool vpool=getVirtualPoolForVolumeCreateRequest(project,param);VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();Integer volumeCount=1;Long volumeSize=0L;if(param.getCount()!=null){if(param.getCount()<=0){throw APIException.badRequests.parameterMustBeGreaterThan(""count"",0);}if(param.getCount()>MAX_VOLUME_COUNT){throw APIException.badRequests.exceedingLimit(""count"",MAX_VOLUME_COUNT);}volumeCount=param.getCount();capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,volumeCount);}if(param.getSize()!=null){volumeSize=SizeUtil.translateSize(param.getSize());if(volumeSize<=0){throw APIException.badRequests.parameterMustBeGreaterThan(SIZE,0);}capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,volumeSize);}if(null!=vpool.getThinVolumePreAllocationPercentage()&&0<vpool.getThinVolumePreAllocationPercentage()){capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_VOLUME_PRE_ALLOCATE_SIZE,VirtualPoolUtil.getThinVolumePreAllocationSize(vpool.getThinVolumePreAllocationPercentage(),volumeSize));}if(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())){capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,Boolean.TRUE);}if(null!=vpool.getDedupCapable()&&vpool.getDedupCapable()){capabilities.put(VirtualPoolCapabilityValuesWrapper.DEDUP,Boolean.TRUE);}BlockServiceApi blockServiceImpl=getBlockServiceImpl(vpool,_dbClient);BlockConsistencyGroup consistencyGroup=null; final Boolean isMultiVolumeConsistencyOn=vpool.getMultivolumeConsistency()==null?FALSE:vpool.getMultivolumeConsistency();ArrayList<String> requestedTypes=new ArrayList<String>(); final URI actualId=project.getId();if(param.getConsistencyGroup()!=null){consistencyGroup=queryConsistencyGroup(param.getConsistencyGroup()); final URI expectedId=consistencyGroup.getProject().getURI();checkProjectsMatch(expectedId,actualId);if(!isMultiVolumeConsistencyOn){throw APIException.badRequests.invalidParameterConsistencyGroupProvidedButVirtualPoolHasNoMultiVolumeConsistency(param.getConsistencyGroup(),param.getVpool());} final List<Volume> activeCGVolumes=blockServiceImpl.getActiveCGVolumes(consistencyGroup);int cgMaxVolCount=blockServiceImpl.getMaxVolumesForConsistencyGroup(consistencyGroup);if((activeCGVolumes.size()+volumeCount.intValue())>cgMaxVolCount){throw APIException.badRequests.requestedVolumeCountExceedsLimitsForCG(volumeCount.intValue(),cgMaxVolCount,consistencyGroup.getLabel());}requestedTypes=getRequestedTypes(vpool);if(!consistencyGroup.created()){blockServiceImpl.validateConsistencyGroupName(consistencyGroup,requestedTypes);}if(consistencyGroup.srdfTarget()){throw APIException.badRequests.consistencyGroupBelongsToTarget(consistencyGroup.getId());}if(VirtualPool.vPoolSpecifiesSRDF(vpool)&&(consistencyGroup.getLabel().length()>8||!isAlphaNumeric(consistencyGroup.getLabel()))){throw APIException.badRequests.groupNameCannotExceedEightCharactersoronlyAlphaNumericAllowed();}if(!VirtualPool.vPoolSpecifiesSRDF(vpool)&&consistencyGroup.checkForType(Types.SRDF)){throw APIException.badRequests.nonSRDFVolumeCannotbeAddedToSRDFCG();}if(VirtualPool.vPoolSpecifiesSRDF(vpool)){List<Volume> nativeVolumesInCG=BlockConsistencyGroupUtils.getActiveNativeVolumesInCG(consistencyGroup,_dbClient);for(Volume nativeVolume : nativeVolumesInCG){if(Volume.LinkStatus.SWAPPED.name().equals(nativeVolume.getLinkStatus())){throw BadRequestException.badRequests.cannotAddVolumesToSwappedCG(consistencyGroup.getLabel());}}}validateCGValidWithVirtualArray(consistencyGroup,varray);if(consistencyGroup.creationInitiated()){if(!consistencyGroup.getRequestedTypes().containsAll(requestedTypes)){throw APIException.badRequests.consistencyGroupIsNotCompatibleWithRequest(consistencyGroup.getId(),consistencyGroup.getRequestedTypes().toString(),requestedTypes.toString());}}Volume existingRpSourceVolume=null;if(VirtualPool.vPoolSpecifiesProtection(vpool)){if(activeCGVolumes!=null&&!activeCGVolumes.isEmpty()&&!consistencyGroup.getTypes().contains(BlockConsistencyGroup.Types.RP.toString())){throw APIException.badRequests.consistencyGroupMustBeEmptyOrContainRpVolumes(consistencyGroup.getId());}if(!activeCGVolumes.isEmpty()){for(Volume cgVolume : activeCGVolumes){if(cgVolume.getPersonality()!=null&&cgVolume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())){existingRpSourceVolume=cgVolume;break;}}if(existingRpSourceVolume!=null){VirtualPool existingVpool=_dbClient.queryObject(VirtualPool.class,existingRpSourceVolume.getVirtualPool());VirtualPool requestedVpool=_dbClient.queryObject(VirtualPool.class,param.getVpool());if(existingVpool.getVirtualArrays().size()!=requestedVpool.getVirtualArrays().size()||!existingVpool.getVirtualArrays().containsAll(requestedVpool.getVirtualArrays())){throw APIException.badRequests.vPoolSourceVarraysNotCompatibleForCG(consistencyGroup.getLabel());}if(VirtualPool.vPoolSpecifiesHighAvailability(existingVpool)&&VirtualPool.vPoolSpecifiesHighAvailability(requestedVpool)){if((!VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool)&&VirtualPool.vPoolSpecifiesMetroPoint(existingVpool))||(VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool)&&!VirtualPool.vPoolSpecifiesMetroPoint(existingVpool))){throw APIException.badRequests.cannotMixMetroPointAndNonMetroPointVolumes(consistencyGroup.getLabel());}}StringMap existingProtectionVarraySettings=existingVpool.getProtectionVarraySettings();if(existingProtectionVarraySettings==null){throw APIException.badRequests.cannotAddVolumesToSwappedCG(consistencyGroup.getLabel());}StringMap requestedProtectionVarraySettings=requestedVpool.getProtectionVarraySettings();if(existingProtectionVarraySettings.size()!=requestedProtectionVarraySettings.size()){throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());}for(String targetVarray : requestedProtectionVarraySettings.keySet()){if(!existingProtectionVarraySettings.containsKey(targetVarray)){throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());}}String requestedRpCopyMode=NullColumnValueGetter.isNullValue(requestedVpool.getRpCopyMode())?RPCopyMode.ASYNCHRONOUS.name():requestedVpool.getRpCopyMode();String existingRpCopyMode=NullColumnValueGetter.isNullValue(existingVpool.getRpCopyMode())?RPCopyMode.ASYNCHRONOUS.name():existingVpool.getRpCopyMode();if(!requestedRpCopyMode.equalsIgnoreCase(existingRpCopyMode)){throw APIException.badRequests.vPoolRPCopyModeNotCompatibleForCG(consistencyGroup.getLabel());}}}}if(!activeCGVolumes.isEmpty()){Volume activeCGVolume=existingRpSourceVolume==null?activeCGVolumes.get(0):existingRpSourceVolume;if(!BlockServiceUtils.checkCGVolumeCanBeAddedOrRemoved(consistencyGroup,activeCGVolume,_dbClient)){checkCGForMirrors(consistencyGroup,activeCGVolumes);checkCGForSnapshots(consistencyGroup);getFullCopyManager().verifyNewVolumesCanBeCreatedInConsistencyGroup(consistencyGroup,activeCGVolumes);}}capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,param.getConsistencyGroup());}else {if(VirtualPool.vPoolSpecifiesProtection(vpool)){throw APIException.badRequests.consistencyGroupMissingForRpProtection();}}long size=volumeCount*SizeUtil.translateSize(param.getSize());TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());ArgValidator.checkEntity(tenant,project.getTenantOrg().getURI(),false);CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,size,""volume"");URI computeURI=param.getComputeResource();if(!NullColumnValueGetter.isNullURI(computeURI)){capabilities.put(VirtualPoolCapabilityValuesWrapper.COMPUTE,computeURI.toString());}String task=UUID.randomUUID().toString();TaskList taskList=createVolumeTaskList(param.getSize(),project,varray,vpool,param.getName(),task,volumeCount);auditOp(OperationTypeEnum.CREATE_BLOCK_VOLUME,true,AuditLogManager.AUDITOP_BEGIN,param.getName(),volumeCount,varray.getId().toString(),actualId.toString());CreateVolumeSchedulingThread.executeApiTask(this,_asyncTaskService.getExecutorService(),_dbClient,varray,project,vpool,capabilities,taskList,task,consistencyGroup,requestedTypes,param,blockServiceImpl);_log.info(""Kicked off thread to perform placement and scheduling.  Returning ""+taskList.getTaskList().size()+"" tasks"");return taskList;}"
3234	"public void run(){while(!quit){List<Entity> entities=physicsEngine.getCurrentState();broadcastState(entities);try{Thread.sleep(POLLRATE);}catch(InterruptedException e){}}System.out.println(""QUITTING POLLING"");}"
3235	"@Override protected boolean onKeyEvent(KeyEvent event){ final int action=event.getAction(); final int keyCode=event.getKeyCode();int sourceKeyCode=sharedPreferences.getInt(getString(R.string.source_button_id),Integer.valueOf(getString(R.string.bixby_button_code)));LONG_PRESS_INTERVAL=sharedPreferences.getInt(""longpressinterval"",1000);DOUBLE_CLICK_INTERVAL=sharedPreferences.getInt(""doubleclickinterval"",200);Log.d(""KeyCode"",String.valueOf(keyCode)+"" ""+String.valueOf(action));if(keyCode==sourceKeyCode){if(action==KeyEvent.ACTION_DOWN){longPressTrigger=true;Handler handler=new Handler();Runnable r=new Runnable(){  @Override public void run(){    if (longPressTrigger) {      longPressTrigger=false;      action(""long"");    }  }};handler.postDelayed(r,LONG_PRESS_INTERVAL);}else {if(action==KeyEvent.ACTION_UP){long time=event.getEventTime();if(longPressTrigger){Handler handler=new Handler();Runnable r=new Runnable(){  @Override public void run(){    if (doubleClickTrigger) {      doubleClickTrigger=false;      action(""single"");    }  }};if(doubleClickTrigger&&(time-buttonEventTime)<DOUBLE_CLICK_INTERVAL){doubleClickTrigger=false;action(""double"");}else {doubleClickTrigger=true;handler.postDelayed(r,DOUBLE_CLICK_INTERVAL);}}buttonEventTime=time;longPressTrigger=false;}}}return true;}"
3236	"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){super.onMeasure(widthMeasureSpec,heightMeasureSpec);if(getWidth()!=0&&!hasMeasure){hasMeasure=true;if(isAutoFillParent){int viewWidth=getWidth();int tabWidth=(int)(1.0*viewWidth/tabViewList.size());for(int i=0;i<tabViewList.size();i++){tabViewList.get(i).getLayoutParams().width=tabWidth;}}}}"
3237	"@Override public int getItemCount(){if(mEvents==null){return 0;}else {if(mEvents.size()==0){return 1;}else {return mHasMoreResult?mEvents.size():(mEvents.size()+1);}}}"
3238	"public static TableView createTableViewMaybeRecursive(Schema schema,int id,String name,String querySQL,ArrayList<Parameter> parameters,Column[] columnTemplates,Session session,boolean literalsChecked,boolean isTableExpression,boolean isPersistent,Database db){TableView view=new TableView(schema,id,name,querySQL,parameters,columnTemplates,session,true,literalsChecked,isTableExpression);if(!view.isRecursiveQueryDetected()){if(isPersistent){db.addSchemaObject(session,view);view.lock(session,true,true);session.getDatabase().removeSchemaObject(session,view);view.removeChildrenAndResources(session);}else {session.removeLocalTempTable(view);}view=new TableView(schema,id,name,querySQL,parameters,columnTemplates,session,false,literalsChecked,isTableExpression);}return view;}"
3239	"@Override public boolean checkTrigger(GameEvent event,Game game){Permanent blocker=game.getPermanent(event.getSourceId());Permanent blocked=game.getPermanent(event.getTargetId());Permanent arrogantBloodlord=game.getPermanent(sourceId);if(blocker!=null&&blocker!=arrogantBloodlord&&blocker.getPower().getValue()<2&&blocked==arrogantBloodlord){return true;}if(blocker!=null&&blocker==arrogantBloodlord&&game.getPermanent(event.getTargetId()).getPower().getValue()<2){return true;}return false;}"
3240	"@Override public void onBindViewHolder(LightningViewHolder holder,int position){holder.exitButton.setTag(position);ViewCompat.jumpDrawablesToCurrentState(holder.exitButton);LightningView web=tabsManager.getTabAtPosition(position);holder.txtTitle.setText(web.getTitle()); final Bitmap favicon=web.getFavicon();if(web.isForegroundTab()){if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.M){holder.txtTitle.setTextAppearance(R.style.boldText);}else {holder.txtTitle.setTextAppearance(getContext(),R.style.boldText);}Drawable foregroundDrawable;if(!vertical){foregroundDrawable=new BitmapDrawable(getResources(),mForegroundTabBitmap);if(!isIncognito&&mColorMode){foregroundDrawable.setColorFilter(mCurrentUiColor,PorterDuff.Mode.SRC_IN);}}else {foregroundDrawable=mForegroundTabDrawable;}if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.JELLY_BEAN){holder.layout.setBackground(foregroundDrawable);}else {holder.layout.setBackgroundDrawable(foregroundDrawable);}if(!isIncognito&&mColorMode){}holder.favicon.setImageBitmap(favicon);}else {if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.M){holder.txtTitle.setTextAppearance(R.style.normalText);}else {holder.txtTitle.setTextAppearance(getContext(),R.style.normalText);}if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.JELLY_BEAN){holder.layout.setBackground(mBackgroundTabDrawable);}else {holder.layout.setBackgroundDrawable(mBackgroundTabDrawable);}holder.favicon.setImageBitmap(getDesaturatedBitmap(favicon));}}"
3241	"public void transform(Long enterpriseId,Resource resource,OutputContainer data,AbstractEnterpriseCsvWriter csvWriter,Map<String,ResourceByExchangeBatch> otherResources,Long enterpriseOrganisationId,Long enterprisePatientId,Long enterprisePersonId,String configName,UUID protocolId) throws Exception{Appointment fhir=(Appointment)resource;long id;long organisationId;long patientId;long personId;Long practitionerId=null;Long scheduleId=null;Date startDate=null;Integer plannedDuration=null;Integer actualDuration=null;int statusId;Integer patientWait=null;Integer patientDelay=null;Date sentIn=null;Date left=null;if(enterprisePatientId==null){LOG.warn(""Skipping ""+fhir.getResourceType()+"" ""+fhir.getId()+"" as no Enterprise patient ID could be found for it"");return ;}id=enterpriseId.longValue();organisationId=enterpriseOrganisationId.longValue();patientId=enterprisePatientId.longValue();personId=enterprisePersonId.longValue();if(fhir.getSlot().size()>1){throw new TransformException(""Cannot handle appointments linked to multiple slots ""+fhir.getId());}Reference slotReference=fhir.getSlot().get(0);Slot fhirSlot=(Slot)findResource(slotReference,otherResources);if(fhirSlot!=null){Reference scheduleReference=fhirSlot.getSchedule();scheduleId=findEnterpriseId(data.getSchedules(),scheduleReference);}else {LOG.warn(""Failed to find ""+slotReference.getReference()+"" for ""+fhir.getResourceType()+"" ""+fhir.getId());}startDate=fhir.getStart();Date end=fhir.getEnd();if(startDate!=null&&end!=null){long millisDiff=end.getTime()-startDate.getTime();plannedDuration=Integer.valueOf((int)(millisDiff/(1000*60)));}if(fhir.hasMinutesDuration()){int duration=fhir.getMinutesDuration();actualDuration=Integer.valueOf(duration);}Appointment.AppointmentStatus status=fhir.getStatus();statusId=status.ordinal();if(fhir.hasExtension()){for(Extension extension : fhir.getExtension()){if(extension.getUrl().equals(FhirExtensionUri.APPOINTMENT_PATIENT_WAIT)){Duration d=(Duration)extension.getValue();if(!d.getUnit().equalsIgnoreCase(""minutes"")){throw new TransformException(""Unsupported patient wait unit [""+d.getUnit()+""] in ""+fhir.getId());}int i=d.getValue().intValue();patientWait=Integer.valueOf(i);}else {if(extension.getUrl().equals(FhirExtensionUri.APPOINTMENT_PATIENT_DELAY)){Duration d=(Duration)extension.getValue();if(!d.getUnit().equalsIgnoreCase(""minutes"")){throw new TransformException(""Unsupported patient delay unit [""+d.getUnit()+""] in ""+fhir.getId());}int i=d.getValue().intValue();patientDelay=Integer.valueOf(i);}else {if(extension.getUrl().equals(FhirExtensionUri.APPOINTMENT_SENT_IN)){DateTimeType dt=(DateTimeType)extension.getValue();sentIn=dt.getValue();}else {if(extension.getUrl().equals(FhirExtensionUri.APPOINTMENT_LEFT)){DateTimeType dt=(DateTimeType)extension.getValue();left=dt.getValue();}}}}}}org.endeavourhealth.transform.enterprise.outputModels.Appointment model=(org.endeavourhealth.transform.enterprise.outputModels.Appointment)csvWriter;model.writeUpsert(id,organisationId,patientId,personId,practitionerId,scheduleId,startDate,plannedDuration,actualDuration,statusId,patientWait,patientDelay,sentIn,left);}"
3242	"@Override public boolean valid(){for(Check c : checks){if(!c.valid()){return false;}}for(SingleRule r : srules){if(!r.valid()){return false;}}for(MultipleRule m : mrules){if(m==null||!m.valid()){return false;}}return true;}"
3243	"protected void sendMessage(){if(!getUser().getName().startsWith(""Unknown from"")){plugin.getServer().broadcastMessage((replaceValues(plugin.getStringManager().getMessage(""msg_join""))));}}"
3244	"void addProgressItem(){if(newsList!=null){newsList.add(null);notifyItemInserted(newsList.size()-1);}}"
3245	"void setValue(Task task){startDate.setText(task.getStartDate());endDate.setText(task.getExpEndDate());quantity.setText(task.getQty());if(!task.getDesc().equals("""")){description.setVisibility(View.VISIBLE);description.setText(task.getDesc());}dbQuotation.addListenerForSingleValueEvent(new ValueEventListener(){  @Override public void onDataChange(  DataSnapshot dataSnapshot){    if (dataSnapshot.exists()) {      appByCustomer.setVisibility(View.VISIBLE);      Quotation quotation=dataSnapshot.getValue(Quotation.class);      appByCustomer.setText("" "" + quotation.getApprovedByCust());      uploadStatus.setText("" Yes"");    } else {      appByCustomer.setVisibility(View.GONE);      uploadStatus.setText("" No"");    }  }  @Override public void onCancelled(  DatabaseError databaseError){  }});}"
3246	"@Override public boolean touchDown(int screenX,int screenY,int pointer,int button){boolean hideCursor=true;if(App.getState()==GameState.WEAPON_SELECT){touchPoint.set(screenX,screenY,0.0);game.getViewport().unproject(touchPoint);PlayerComponent pc=getPlayerComponent();BoundsComponent seedBounds=K2ComponentMappers.bounds.get(seedSelect);BoundsComponent helicopterBounds=K2ComponentMappers.bounds.get(helicopterSelect);BoundsComponent auraBounds=K2ComponentMappers.bounds.get(auraSelect);if(App.isWeaponEnabled(WeaponType.GUN_SEEDS)&&seedBounds.bounds.contains(touchPoint.x,touchPoint.y)){switchWeapon(WeaponType.GUN_SEEDS);hideCursor=false;}else {if(App.isWeaponEnabled(WeaponType.HELICOPTER_SEEDS)&&helicopterBounds.bounds.contains(touchPoint.x,touchPoint.y)){switchWeapon(WeaponType.HELICOPTER_SEEDS);hideCursor=false;}else {if(App.isWeaponEnabled(WeaponType.POLLEN_AURA)&&auraBounds.bounds.contains(touchPoint.x,touchPoint.y)){switchWeapon(WeaponType.POLLEN_AURA);hideCursor=false;}else {if(pc!=null&&pc.weaponType!=WeaponType.UNSELECTED){App.setState(GameState.PLAYING);toggleWeaponSelect(false);}}}}}if(hideCursor&&App.isDesktop()){Gdx.graphics.setCursor(App.getHiddenCursor());}return false;}"
3247	"public Pager getPager(){return skipPaging||paging?null:new Pager(page,total,pageSize);}"
3248	"@SuppressWarnings(""ObjectEquality"") public void confirmRecipe(boolean all){if(this.recipe==null){return ;} final TShortCollection possibleBugs;if(!this.recipe.getRecipe().isVanilla()){ final CraftingGrid itemsToConsume=this.recipe.getItemsToConsume(); final ItemStack[] items=DioriteUtils.compact(false,itemsToConsume.getItems());possibleBugs=new TShortHashSet(items.length);short k=0;short bugSlot;short startIndex=-1;do {bugSlot=(short)this.playerInventory.firstNotFull(items[k].getMaterial());if(bugSlot!=-1){short bugSlot2=(short)this.playerInventory.firstNotFull(items[k]);if(bugSlot!=bugSlot2){if(bugSlot2!=-1){possibleBugs.add(bugSlot2);}else {bugSlot2=(short)this.playerInventory.first((ItemStack)null,startIndex+1);if(bugSlot2!=-1){startIndex=bugSlot;possibleBugs.add(bugSlot2);}}}possibleBugs.add(bugSlot);}else {bugSlot=(short)this.playerInventory.first((ItemStack)null,startIndex+1);if(bugSlot!=-1){startIndex=bugSlot;possibleBugs.add(bugSlot);}}k++;} while(k<items.length);}else {possibleBugs=null;}if(all){ final Recipe recipe=this.recipe.getRecipe();ItemStack result=null; final TShortObjectMap<ItemStack> onCraft=new TShortObjectHashMap<>(2,0.5,Short.MIN_VALUE);while((this.recipe!=null)&&(recipe==this.recipe.getRecipe())){this.take(this.recipe.getItemsToConsume());if(result==null){result=this.recipe.getResult().clone();}else {result.setAmount(result.getAmount()+this.recipe.getResult().getAmount());}this.recipe.getOnCraft().forEachEntry((a,b) -> {  final ItemStack old=onCraft.get(a);  if (old == null) {    onCraft.put(a,b.clone());  } else {    old.setAmount(old.getAmount() + b.getAmount());  }  return true;});this.checkRecipe(recipe);}this.getPlayerInventory().addFromEnd(result);onCraft.forEachEntry(this::addReplacment);}else { final ItemStack cursor=this.getPlayerInventory().getCursorItem();if((cursor!=null)&&(!cursor.isSimilar(this.recipe.getResult())||((this.recipe.getResult().getAmount()+cursor.getAmount())>this.recipe.getResult().getMaterial().getMaxStack()))){return ;}this.take(this.recipe.getItemsToConsume()); final ItemStack result=this.recipe.getResult().clone();result.setAmount(result.getAmount()+((cursor==null)?0:cursor.getAmount()));this.getPlayerInventory().replaceCursorItem(cursor,result);this.recipe.getOnCraft().forEachEntry(this::addReplacment);this.checkRecipe(false);}if(possibleBugs!=null){ final PacketPlayServerSetSlot[] packets=new PacketPlayServerSetSlot[possibleBugs.size()];int i=0;for(TShortIterator it=possibleBugs.iterator();it.hasNext();){ final short slot=it.next(); final ItemStackImpl item=this.playerInventory.getItem(slot);packets[i++]=new PacketPlayServerSetSlot(this.playerInventory.getWindowId(),slot,item);}this.getHolder().getNetworkManager().sendPackets(packets);}}"
3249	"private void countCellByVolumeInfo(VolumeInfo volumeInfo){if(volumeInfo.getIsbn13()!=null||volumeInfo.getIsbn10()!=null){listCells.add(CELL_ISBN);}if(volumeInfo.getLanguage()!=null){listCells.add(CELL_LANGUAGE);}if(volumeInfo.getPrintType()!=null){listCells.add(CELL_PRINT_TYPE);}if(volumeInfo.getPageCount()!=null){listCells.add(CELL_NUM_PAGES);}}"
3250	"@Override public JsonElement serialize(Result src,Type typeOfSrc,JsonSerializationContext context){JsonObject result=new JsonObject();List<? extends GraphObject> results=src.getResults();Integer page=src.getPage();Integer pageCount=src.getPageCount();Integer pageSize=src.getPageSize();String queryTime=src.getQueryTime();Integer resultCount=src.getResultCount();String searchString=src.getSearchString();String sortKey=src.getSortKey();String sortOrder=src.getSortOrder();if(page!=null){result.add(""page"",new JsonPrimitive(page));}if(pageCount!=null){result.add(""pageCount"",new JsonPrimitive(pageCount));}if(pageSize!=null){result.add(""pageSize"",new JsonPrimitive(pageSize));}if(queryTime!=null){result.add(""queryTime"",new JsonPrimitive(queryTime));}if(resultCount!=null){result.add(""resultCount"",new JsonPrimitive(resultCount));}if(results!=null){if(src.isCollectionResource()){JsonArray resultArray=new JsonArray();for(GraphObject graphObject : results){resultArray.add(graphObjectGsonAdapter.serialize(graphObject,GraphObject.class,context));}result.add(""result"",resultArray);}else {result.add(""result"",graphObjectGsonAdapter.serialize(results.get(0),GraphObject.class,context));}}if(searchString!=null){result.add(""searchString"",new JsonPrimitive(searchString));}if(sortKey!=null){result.add(""sortKey"",new JsonPrimitive(sortKey));}if(sortOrder!=null){result.add(""sortOrder"",new JsonPrimitive(sortOrder));}return result;}"
3251	"public boolean check(int x1,int y1){for(int i=0;i<mapH;++i){for(int j=0;j<mapW;++j){if(tileMap[j][i]==4||tileMap[j][i]==6||tileMap[j][i]==9){int x2=j*TILE_W-camX;int y2=i*TILE_H-camY;boolean coallision=MyUtil.checkCoallison(x1,y1,x2,y2,Tank.instance.getTankImage().getWidth(),Tank.instance.getTankImage().getHeight(),TILE_W,TILE_H,Tank.instance.getTankTransform());if(coallision){cX=x2+camX;cY=y2+camY;if(tileMap[j][i]==9){Tank.instance.startWaveAnimation();return false;}drawCoallision=true;return false;}}}}drawCoallision=false;return true;}"
3252	"@Override protected boolean equals(AbstractDomain other){NyukinMotoDomain o=(NyukinMotoDomain)other;return id==o.id;}"
3253	"@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);mApp=(MyDukan)getApplicationContext(); final FirebaseUser userid=FirebaseAuth.getInstance().getCurrentUser();if(userid!=null){userID=userid.getUid();}else {userID=mApp.getUserId();}mPager=(ViewPager)findViewById(R.id.pager);Bundle bundle=getIntent().getExtras();if(bundle!=null){if(bundle.containsKey(AppContants.NOTIFICATION)){mNotification=(HashMap)bundle.getSerializable(AppContants.NOTIFICATION);if(mNotification!=null){Intent intent=new Intent(this,NotificationDescriptionActivity.class);intent.putExtra(AppContants.NOTIFICATION,mNotification);startActivity(intent);}}}addsupplierbtn=(FloatingActionButton)findViewById(R.id.add_supplier_button);subscribeAleartLayout=(LinearLayout)findViewById(R.id.layout_subscribe);btn_Subscribe=(Button)findViewById(R.id.btn_subscription);btn_Trial=(Button)findViewById(R.id.btn_trial);btn_DaysRemaing=(Button)findViewById(R.id.btn_remaingDays);daysRemain=(TextView)findViewById(R.id.tv_message_trialUser);btn_navigation=(Button)findViewById(R.id.button_menus);mDueDays=(TextView)findViewById(R.id.tv_SubscriptionDueDate);setupActionBar();setupDrawerLayout();getUserProfile();mFirebaseRemoteConfig=FirebaseRemoteConfig.getInstance();FirebaseRemoteConfigSettings configSettings=new FirebaseRemoteConfigSettings.Builder().setDeveloperModeEnabled(BuildConfig.DEBUG).build();mFirebaseRemoteConfig.setConfigSettings(configSettings);fetchWelcome();setupSupplierCard();showPermissions();relative_flipper_layout=(LinearLayout)findViewById(R.id.banner);relative_flipper_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){  }});whatsapp_layout=(LinearLayout)findViewById(R.id.whatsapp_layout);whatsapp_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    onWhatsAppBtnClick();  }});records_layout=(LinearLayout)findViewById(R.id.records_layout);records_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent record=new Intent(MainActivity.this,RecordsActivity.class);    startActivity(record);  }});mynetwork_layout=(LinearLayout)findViewById(R.id.mynetwork_layout);mynetwork_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent nIntent=new Intent(MainActivity.this,MyNetworksActivity.class);    startActivity(nIntent);  }});askRaju_layout=(LinearLayout)findViewById(R.id.askRaju_layout);askRaju_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Answers.getInstance().logCustom(new CustomEvent(""ASK_RAJU click"").putCustomAttribute(""USER_ID/ USER_Email:"",userID + ""/"" + userdetails.getUserinfo().getEmailid()));    Intent nIntent=new Intent(MainActivity.this,ChatActivity.class);    nIntent.putExtra(""IS_SUBSCRIBED"",isSubscribed);    startActivity(nIntent);  }});serviceCenter_layout=(LinearLayout)findViewById(R.id.servicecenter_layout);serviceCenter_layout.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View v){    Intent nIntent=new Intent(MainActivity.this,ServiceProviders.class);    startActivity(nIntent);  }});addsupplierbtn.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Intent supplier=new Intent(MainActivity.this,SupplierListActivity.class);    startActivity(supplier);  }});mWhatsAppBtn=(FloatingActionButton)findViewById(R.id.whatsAppBtn);mWhatsAppBtn.setVisibility(View.VISIBLE);mWhatsAppBtn.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    onWhatsAppBtnClick();  }});sharedPreferences=getSharedPreferences(""ShaPreferences"",Context.MODE_PRIVATE);SharedPreferences.Editor editor=sharedPreferences.edit();boolean firstTime=sharedPreferences.getBoolean(""first"",true);if(firstTime){editor.putBoolean(""first"",false);editor.commit();notNew_user=loginActivity.isNewUserForTrail;lounchedDate_User=Utils.getCurrentdate();}MobileAds.initialize(getApplicationContext(),""ca-app-pub-1640690939729824/2174590993"");mAdView=(AdView)findViewById(R.id.adView);AdRequest adRequest=new AdRequest.Builder().build();mAdView.loadAd(adRequest);mInterstitialAd=new InterstitialAd(this);mInterstitialAd.setAdUnitId(""ca-app-pub-1640690939729824/3580285398"");requestNewInterstitial();mInterstitialAd.setAdListener(new AdListener(){  @Override public void onAdLoaded(){  }  @Override public void onAdClosed(){    requestNewInterstitial();  }});}"
3254	"public ArrayList<Word> getWord(Word primary,int count){ArrayList<Word> allWords=new ArrayList<>();for(Course course : lang.getCourses()){allWords.addAll(course.getWords());}float primaryStrength=primary.getStrength();ArrayList<Word> words=new ArrayList<>();if(count>=allWords.size()){Log.e(TAG,""requested too many words"");count=allWords.size()-1;}while(true){if(words.size()==count){return words;}Word closest=null;for(Word w : allWords){if(closest==null){boolean found=false;for(Word old : words){if(old.word.equals(w.word)){found=true;}}if(!found){closest=w;}}else {if(!w.word.equals(primary.word)){if(Math.abs(closest.getStrength()-primaryStrength)>Math.abs(w.getStrength()-primaryStrength)){boolean found;found=haveWord(words,w);if(w.getTotal()>0&&!found){closest=w;}}}}}if(closest==null){Log.e(TAG,""Word retrieve error"");}words.add(closest);}}"
3255	"public static ModelList<?,?> Single(ModelEntity entity){if(entity.GetType()==EModelType.OBJECT){ModelObjectList result=new ModelObjectList();result.add((ModelObject)entity);return result;}else {if(entity.GetType()==EModelType.OBJECT){ModelLinkList result=new ModelLinkList();result.add((ModelLink)entity);return result;}else {throw new ExceptionModelFail(""can not create ModelList for: ""+entity);}}}"
3256	"public ArrayList<ArrayList<String>> closureSelector(ArrayList<ArrayList<String>> closures,int k){ArrayList<ArrayList<String>> closuresToBeUsed=new ArrayList<ArrayList<String>>();for(int i=0;i<k;i++){closuresToBeUsed.add(closures.get(i));}System.out.println(closuresToBeUsed);boolean changedClosure=true;while(changedClosure){changedClosure=false;for(int i=0;i<closures.size();i++){if(!(closuresToBeUsed.contains(closures.get(i)))){ArrayList<ArrayList<String>> candidate=closuresToBeUsed;for(int j=0;j<k;j++){ArrayList<ArrayList<String>> temp=new ArrayList<ArrayList<String>>();for(int m=0;m<k;m++){if(m==j){temp.add(closures.get(i));}else {temp.add(closuresToBeUsed.get(m));}}if(alphabetCoverage(temp)>alphabetCoverage(candidate)){candidate=temp;changedClosure=true;}}closuresToBeUsed=candidate;}}}return closuresToBeUsed;}"
3257	"private void toggleSkillsByGroup(int currentRating){if(skillsTableRow!=null){for(TableRow temp : skillsTableRow){TextView skillName=(TextView)temp.getChildAt(0);Button sub=(Button)temp.getChildAt(1);TextView skillValue=(TextView)temp.getChildAt(2);Button add=(Button)temp.getChildAt(3);int iSkillValue=Integer.valueOf(skillValue.getText().toString());if(isAddition){skillValue.setText(String.valueOf(iSkillValue+1));}else {skillValue.setText(String.valueOf(iSkillValue-1));}}}}"
3258	"private Collection<String> convertUriCollection(Collection<URI> uriList){List<String> idList=new ArrayList<String>();Iterator<URI> it=uriList.iterator();while(it.hasNext()){idList.add(it.next().toString());if(idList.size()>DEFAULT_PAGE_SIZE){_log.warn(""Unbounded database query, request size is over allowed limit({}), ""+""please use corresponding iterative API."",DEFAULT_PAGE_SIZE);}}return idList;}"
3259	"public void work(){logger.info(""cacheEvictionBeans.size:""+cacheEvictionBeans.size()+"":""+RequestAnalyser.getRequestAnalyser().getBlockRequests());if(cacheEvictionBeans.size()>0){try{Timer t=new Timer();Timer tTotal=new Timer();boolean accessRightsFlushed=false;List<String> processedEntities=new ArrayList<String>();List<String> accessRightsToClear=new ArrayList<String>();Iterator i=cacheEvictionBeans.iterator();while(i.hasNext()){CacheEvictionBean cacheEvictionBean=(CacheEvictionBean)i.next();RequestAnalyser.getRequestAnalyser().addOngoingPublications(cacheEvictionBean);String className=cacheEvictionBean.getClassName();String objectId=cacheEvictionBean.getObjectId();String objectName=cacheEvictionBean.getObjectName();String typeId=cacheEvictionBean.getTypeId();Map<String,String> extraInformation=cacheEvictionBean.getExtraInformation();String changedAttributeNames=extraInformation.get(""changedAttributeNames"");logger.info(""className:""+className);logger.info(""objectId:""+objectId);logger.info(""objectName:""+objectName);logger.info(""typeId:""+typeId);logger.info(""changedAttributeNames:""+changedAttributeNames);boolean skipOriginalEntity=false;List<Map<String,String>> allIGCacheCalls=new ArrayList<Map<String,String>>();logger.info(""className:""+className+"" objectId:""+objectId+"" objectName: ""+objectName+"" typeId: ""+typeId+"":""+extraInformation);if(className.indexOf(""AccessRight"")>-1){logger.info(""Special handling of access rights.."");if(!accessRightsFlushed){CacheController.clearCache(AccessRightImpl.class);CacheController.clearCache(AccessRightRoleImpl.class);CacheController.clearCache(AccessRightGroupImpl.class);CacheController.clearCache(AccessRightUserImpl.class);CacheController.clearCache(""personalAuthorizationCache"");CacheController.clearCache(""userAccessCache"");accessRightsFlushed=true;}skipOriginalEntity=true;try{AccessRightVO acVO=AccessRightController.getController().getAccessRightVOWithId(new Integer(objectId));InterceptionPointVO icpVO=InterceptionPointController.getController().getInterceptionPointVOWithId(acVO.getInterceptionPointId());if(!processedEntities.contains(""""+icpVO.getCategory()+""_""+acVO.getParameters())){String acKey=""""+icpVO.getId()+""_""+acVO.getParameters();accessRightsToClear.add(acKey);if(icpVO.getName().indexOf(""Content."")>-1){String idAsString=acVO.getParameters();if(idAsString!=null&&!idAsString.equals("""")){addCacheUpdateDirective(""org.infoglue.cms.entities.content.impl.simple.ContentImpl"",idAsString,allIGCacheCalls);}}else {if(icpVO.getName().indexOf(""ContentVersion."")>-1){String idAsString=acVO.getParameters();if(idAsString!=null&&!idAsString.equals("""")){addCacheUpdateDirective(""org.infoglue.cms.entities.content.impl.simple.ContentVersionImpl"",idAsString,allIGCacheCalls);}}else {if(icpVO.getName().indexOf(""SiteNode."")>-1){String idAsString=acVO.getParameters();if(idAsString!=null&&!idAsString.equals("""")){addCacheUpdateDirective(""org.infoglue.cms.entities.structure.impl.simple.SiteNodeImpl"",idAsString,allIGCacheCalls);}}else {if(icpVO.getName().indexOf(""SiteNodeVersion."")>-1){String idAsString=acVO.getParameters();if(idAsString!=null&&!idAsString.equals("""")){addCacheUpdateDirective(""org.infoglue.cms.entities.structure.impl.simple.SiteNodeVersionImpl"",idAsString,allIGCacheCalls);}}else {logger.info(""****************************"");logger.info(""* WHAT TO DO WITH: ""+icpVO.getName()+"" *"");logger.info(""****************************"");}}}}logger.info(""Feeling done with ""+""""+icpVO.getName()+""_""+acVO.getParameters());processedEntities.add(""""+icpVO.getName()+""_""+acVO.getParameters());}else {logger.info(""Allready processed ""+icpVO.getCategory()+""_""+acVO.getParameters());}}catch(Exception e2){logger.warn(""Error handling access right update: ""+e2.getMessage());}if(!accessRightsFlushed){CacheController.clearCache(""personalAuthorizationCache"");accessRightsFlushed=true;}}try{boolean isDependsClass=false;if(className!=null&&className.equalsIgnoreCase(PublicationDetailImpl.class.getName())){isDependsClass=true;}if(!skipOriginalEntity){addCacheUpdateDirective(className,objectId,allIGCacheCalls);}logger.info(""Updating className with id:""+className+"":""+objectId);if(className!=null&&!typeId.equalsIgnoreCase(""""+NotificationMessage.SYSTEM)&&!skipOriginalEntity){Class type=Class.forName(className);if(!isDependsClass&&className.equalsIgnoreCase(SystemUserImpl.class.getName())||className.equalsIgnoreCase(RoleImpl.class.getName())||className.equalsIgnoreCase(GroupImpl.class.getName())||className.equalsIgnoreCase(SmallSystemUserImpl.class.getName())||className.equalsIgnoreCase(SmallRoleImpl.class.getName())||className.equalsIgnoreCase(SmallGroupImpl.class.getName())||className.equalsIgnoreCase(SystemUserRoleImpl.class.getName())||className.equalsIgnoreCase(SystemUserGroupImpl.class.getName())){Object[] ids={objectId};CacheController.clearCache(type,ids);}else {if(!isDependsClass){try{Object[] ids={new Integer(objectId)};CacheController.clearCache(type,ids);}catch(Exception e){logger.warn(""Problem clearing cache for type:""+type+"" AND ID:""+objectId);}}}if(Class.forName(className).getName().equals(ContentImpl.class.getName())){logger.info(""We clear all small contents as well ""+objectId);Class typesExtra=SmallContentImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);logger.info(""We clear all smallish contents as well ""+objectId);Class typesExtraSmallish=SmallishContentImpl.class;Object[] idsExtraSmallish={new Integer(objectId)};CacheController.clearCache(typesExtraSmallish,idsExtraSmallish);logger.info(""We clear all medium contents as well ""+objectId);Class typesExtraMedium=MediumContentImpl.class;Object[] idsExtraMedium={new Integer(objectId)};CacheController.clearCache(typesExtraMedium,idsExtraMedium);}if(Class.forName(className).getName().equals(ContentVersionImpl.class.getName())){logger.info(""We clear all small contents as well ""+objectId);Class typesExtra=SmallContentVersionImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);logger.info(""We clear all small contents as well ""+objectId);Class typesExtraSmallest=SmallestContentVersionImpl.class;Object[] idsExtraSmallest={new Integer(objectId)};CacheController.clearCache(typesExtraSmallest,idsExtraSmallest);}else {if(Class.forName(className).getName().equals(AvailableServiceBindingImpl.class.getName())){Class typesExtra=SmallAvailableServiceBindingImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);}else {if(Class.forName(className).getName().equals(SiteNodeImpl.class.getName())){Class typesExtra=SmallSiteNodeImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);}else {if(Class.forName(className).getName().equals(SiteNodeVersionImpl.class.getName())){Class typesExtra=SmallSiteNodeVersionImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);}else {if(Class.forName(className).getName().equals(RepositoryImpl.class.getName())){CacheController.clearServerNodeProperty(true);Class repoClass=RepositoryImpl.class;CacheController.clearCache(repoClass);CacheController.clearCaches(repoClass.getName(),null,null);CacheController.clearCache(""repositoryCache"");CacheController.clearCache(""masterRepository"");CacheController.clearCache(""parentRepository"");CacheController.clearCache(""componentPropertyCache"");PageCacheHelper.getInstance().clearPageCache();CacheController.clearCache(""pageCache"");CacheController.clearCache(""pageCacheExtra"");CacheController.clearCache(""componentCache"");CacheController.clearCache(""NavigationCache"");CacheController.clearCache(""pagePathCache"");URIMapperCache.getInstance().clear();}else {if(Class.forName(className).getName().equals(DigitalAssetImpl.class.getName())){CacheController.clearCache(""digitalAssetCache"");Class typesExtra=SmallDigitalAssetImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);Class typesExtraMedium=MediumDigitalAssetImpl.class;Object[] idsExtraMedium={new Integer(objectId)};CacheController.clearCache(typesExtraMedium,idsExtraMedium);String disableAssetDeletionInWorkThread=CmsPropertyHandler.getDisableAssetDeletionInWorkThread();if(disableAssetDeletionInWorkThread!=null&&!disableAssetDeletionInWorkThread.equals(""true"")){logger.info(""We should delete all images with digitalAssetId ""+objectId);DigitalAssetDeliveryController.getDigitalAssetDeliveryController().deleteDigitalAssets(new Integer(objectId));}Set<String> handledVersions=new HashSet<String>();List<SmallestContentVersionVO> contentVersionVOList=DigitalAssetController.getContentVersionVOListConnectedToAssetWithId(new Integer(objectId));Iterator<SmallestContentVersionVO> contentVersionVOListIterator=contentVersionVOList.iterator();while(contentVersionVOListIterator.hasNext()){SmallestContentVersionVO contentVersionVO=contentVersionVOListIterator.next();logger.info(""Invoking clearCaches for ContentVersionImpl with id:""+contentVersionVO.getId());String key=contentVersionVO.getContentId()+""_""+contentVersionVO.getLanguageId();if(!handledVersions.contains(key)){CacheController.clearCaches(ContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);CacheController.clearCaches(SmallContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);CacheController.clearCaches(SmallestContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);handledVersions.add(key);}}}else {if(Class.forName(className).getName().equals(MediumDigitalAssetImpl.class.getName())){CacheController.clearCache(""digitalAssetCache"");Class typesExtra=SmallDigitalAssetImpl.class;Object[] idsExtra={new Integer(objectId)};CacheController.clearCache(typesExtra,idsExtra);Class typesExtraMedium=DigitalAssetImpl.class;Object[] idsExtraMedium={new Integer(objectId)};CacheController.clearCache(typesExtraMedium,idsExtraMedium);String disableAssetDeletionInWorkThread=CmsPropertyHandler.getDisableAssetDeletionInWorkThread();if(disableAssetDeletionInWorkThread!=null&&!disableAssetDeletionInWorkThread.equals(""true"")){logger.info(""We should delete all images with digitalAssetId ""+objectId);DigitalAssetDeliveryController.getDigitalAssetDeliveryController().deleteDigitalAssets(new Integer(objectId));}Set<String> handledVersions=new HashSet<String>();List<SmallestContentVersionVO> contentVersionVOList=DigitalAssetController.getContentVersionVOListConnectedToAssetWithId(new Integer(objectId));Iterator<SmallestContentVersionVO> contentVersionVOListIterator=contentVersionVOList.iterator();while(contentVersionVOListIterator.hasNext()){SmallestContentVersionVO contentVersionVO=contentVersionVOListIterator.next();String key=contentVersionVO.getContentId()+""_""+contentVersionVO.getLanguageId();if(!handledVersions.contains(key)){CacheController.clearCaches(ContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);CacheController.clearCaches(SmallContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);CacheController.clearCaches(SmallestContentVersionImpl.class.getName(),contentVersionVO.getId().toString(),null);handledVersions.add(key);}}}else {if(Class.forName(className).getName().equals(SystemUserImpl.class.getName())){Class typesExtra=SmallSystemUserImpl.class;Object[] idsExtra={objectId};CacheController.clearCache(typesExtra,idsExtra);}else {if(Class.forName(className).getName().equals(RoleImpl.class.getName())){Class typesExtra=SmallRoleImpl.class;Object[] idsExtra={objectId};CacheController.clearCache(typesExtra,idsExtra);}else {if(Class.forName(className).getName().equals(GroupImpl.class.getName())){Class typesExtra=SmallGroupImpl.class;Object[] idsExtra={objectId};CacheController.clearCache(typesExtra,idsExtra);}}}}}}}}}}}long elapsedTime=t.getElapsedTime();if(elapsedTime>50){RequestAnalyser.getRequestAnalyser().registerComponentStatistics(""Clearing all castor caches in working publication thread took"",elapsedTime);}for(Map<String,String> igCacheCall : allIGCacheCalls){logger.info(""Calling clear caches with:""+igCacheCall.get(""className"")+"":""+igCacheCall.get(""objectId"")+"":""+extraInformation);CacheController.clearCaches(igCacheCall.get(""className""),igCacheCall.get(""objectId""),extraInformation,null);handledCacheCalls.put(""""+igCacheCall.get(""className"")+""_""+igCacheCall.get(""objectId"")+""_""+extraInformation,new Boolean(true));elapsedTime=t.getElapsedTime();if(elapsedTime>50){logger.warn(""Clearing all caches for ""+igCacheCall.get(""className"")+"":""+igCacheCall.get(""objectId""));}}String key=""""+className+""_""+objectId+""_""+extraInformation;if(!skipOriginalEntity&&handledCacheCalls.get(key)==null){logger.info(""""+className+"":""+objectId+"":""+extraInformation);CacheController.clearCaches(className,objectId,extraInformation,null);CacheController.setForcedCacheEvictionMode(true);if(elapsedTime>100){logger.warn(""Clearing all caches for ""+className+"":""+objectId+"":""+changedAttributeNames);}}else {logger.info(""Skipping cache clear for the same entity.."");}CacheEvictionBeanListenerService.getService().notifyListeners(cacheEvictionBean);}catch(Exception e){if(e.getMessage().indexOf(""was not found"")>-1||(e.getCause()!=null&&e.getCause().getMessage().indexOf(""was not found"")>-1)){logger.warn(""A delete operation probably gave us trouble clearing the correct caches"");}else {logger.warn(""Error handling cache update message:""+className+"":""+objectId,e);}}RequestAnalyser.getRequestAnalyser().removeOngoingPublications(cacheEvictionBean);cacheEvictionBean.setProcessed();RequestAnalyser.getRequestAnalyser().addPublication(cacheEvictionBean);}if(accessRightsToClear!=null&&accessRightsToClear.size()>0){CacheController.clearCache(AccessRightImpl.class);CacheController.clearCache(AccessRightRoleImpl.class);CacheController.clearCache(AccessRightGroupImpl.class);CacheController.clearCache(AccessRightUserImpl.class);for(String acKey : accessRightsToClear){logger.info(""Clearing access rights for:""+acKey);CacheController.clearUserAccessCache(acKey);}CacheController.clearCache(""personalAuthorizationCache"");CacheController.clearCache(""pageCache"");CacheController.clearCache(""pageCacheExtra"");}RequestAnalyser.getRequestAnalyser().registerComponentStatistics(""Working publication thread took"",tTotal.getElapsedTime());}catch(Exception e){logger.error(""An error occurred in the WorkingPublicationThread:""+e.getMessage(),e);}}RequestAnalyser.getRequestAnalyser().setBlockRequests(false);logger.info(""released block"");}"
3260	"@Override public boolean isCellEditable(int row,int column){return (editable&&column>=1);}"
3261	"private Node initFunction(FunctionNode fnNode,int functionIndex,Node statements,int functionType){fnNode.setFunctionType(functionType);fnNode.addChildToBack(statements);int functionCount=fnNode.getFunctionCount();if(functionCount!=0){fnNode.setRequiresActivation();}if(functionType==FunctionNode.FUNCTION_EXPRESSION){Name name=fnNode.getFunctionName();if(name!=null&&name.length()!=0){Node setFn=new Node(Token.EXPR_VOID,new Node(Token.SETNAME,Node.newString(Token.BINDNAME,name.getIdentifier()),new Node(Token.THISFN)));statements.addChildrenToFront(setFn);}}Node lastStmt=statements.getLastChild();if(lastStmt==null||lastStmt.getType()!=Token.RETURN){statements.addChildToBack(new Node(Token.RETURN));}Node result=Node.newString(Token.FUNCTION,fnNode.getName());result.putIntProp(Node.FUNCTION_PROP,functionIndex);return result;}"
3262	"@Override public boolean equals(Object other){if(this==other){return true;}if((other==null)||!(other instanceof Padding)||(this.hashCode()!=other.hashCode())){return false;} final Padding that=(Padding)other;return (this.top==that.top)&&(this.right==that.right)&&(this.bottom==that.bottom)&&(this.left==that.left);}"
3263	"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){if(!child.isShown()){return super.drawChild(canvas,child,drawingTime);}if(!isInEditMode()&&child instanceof ShadowView){ShadowView shadowView=(ShadowView)child;float elevation=shadowView.getElevation()+shadowView.getTranslationZ();if(elevation>=0.01){Shadow shadow=shadows.get(child);if(shadow==null||shadow.elevation!=elevation){shadow=ShadowGenerator.generateShadow(child,elevation);shadows.put(child,shadow);}paint.setAlpha((int)(127*ViewHelper.getAlpha(child)));float[] childLocation=new float{(child.getLeft()+child.getRight())/2,(child.getTop()+child.getBottom())/2};Matrix matrix=carbon.internal.ViewHelper.getMatrix(child);matrix.mapPoints(childLocation);int[] location=new int[2];getLocationOnScreen(location);float x=childLocation[0]+location[0];float y=childLocation[1]+location[1];x-=getRootView().getWidth()/2;y+=getRootView().getHeight()/2;float length=(float)Math.sqrt(x*x+y*y);int saveCount=canvas.save(Canvas.MATRIX_SAVE_FLAG);canvas.translate(x/length*elevation/2,y/length*elevation/2);canvas.translate(child.getLeft(),child.getTop());canvas.concat(matrix);canvas.scale(ShadowGenerator.SHADOW_SCALE,ShadowGenerator.SHADOW_SCALE);shadow.draw(canvas,child,paint);canvas.restoreToCount(saveCount);}}if(child instanceof RippleView){RippleView rippleView=(RippleView)child;RippleDrawable rippleDrawable=rippleView.getRippleDrawable();if(rippleDrawable!=null&&rippleDrawable.getStyle()==RippleDrawable.Style.Borderless){int saveCount=canvas.save(Canvas.MATRIX_SAVE_FLAG);canvas.translate(child.getLeft(),child.getTop());rippleDrawable.draw(canvas);canvas.restoreToCount(saveCount);}}return super.drawChild(canvas,child,drawingTime);}"
3264	"public INV33BND(NovelAdjacencyReferenceLocations narl,boolean forUpstreamLoc,ReferenceMultiSource reference){super(getIDString(narl,forUpstreamLoc),Collections.singletonMap(GATKSVVCFConstants.INV33,""""),extractBasesForAltAllele(narl,forUpstreamLoc,reference),false,getTheOtherRefLoc(narl,forUpstreamLoc),false);}"
3265	"public static boolean search_User_Password(Hashtable<String,User> all,User[] newUser) throws IOException{boolean isValid=false;String username=JOptionPane.showInputDialog(""--------Login---------- \n\n\n""+""Enter Employee username: "");String password=JOptionPane.showInputDialog(""--------Login---------- \n\n\n""+""Enter Employee password: "");if(all.containsKey(username)){User b=all.get(username);String bp=b.getPassword();if(b.getPassword()!=null){System.out.println(""Found password "");isValid=true;WalmartSystem system=new WalmartSystem();system.run();}else {System.out.println(""Password Not Found "");}}else {System.out.println(""username Not Found "");}return isValid;}"
3266	"public static void handleBackButton(FragmentManager fragmentManager){Fragment fragment=null;Bundle args=null;if(fragmentManager.getBackStackEntryCount()>0){String fragmentTag=fragmentManager.getBackStackEntryAt(fragmentManager.getBackStackEntryCount()-1).getName();Fragment currentFragment=fragmentManager.findFragmentByTag(fragmentTag);Fragment fr=fragmentManager.findFragmentById(R.id.current_fragment);int index=fragmentManager.getBackStackEntryCount()-1;FragmentManager.BackStackEntry backEntry=fragmentManager.getBackStackEntryAt(index);String tag=backEntry.getName();Log.d(""Stack"",tag);if(!tag.equals(Constants.tag_create_session)&&!tag.equals(Constants.tag_create_new_session_for_patient)){fragmentManager.popBackStack();}if(tag.equals(Constants.tag_display_session_scale)){Bundle arguments=fr.getArguments();GeriatricScale test=(GeriatricScale)arguments.getSerializable(ScaleFragment.testDBobject);assert (test!=null);test.setAlreadyOpened(true);test.save();Session session=test.getSession();Patient patient=(Patient)arguments.getSerializable(ScaleFragment.patient);boolean alreadyLogged=sharedPreferences.getBoolean(Constants.logged_in,false);if(alreadyLogged){args=new Bundle();args.putSerializable(CGAAreaPrivate.sessionObject,session);args.putSerializable(CGAAreaPrivate.PATIENT,patient);args.putSerializable(CGAAreaPrivate.CGA_AREA,arguments.getSerializable(ScaleFragment.CGA_AREA));fragment=new CGAAreaPrivate();}else {args=new Bundle();args.putSerializable(CGAAreaPublic.sessionObject,session);args.putSerializable(CGAAreaPublic.PATIENT,patient);args.putSerializable(CGAAreaPublic.CGA_AREA,arguments.getSerializable(ScaleFragment.CGA_AREA));fragment=new CGAAreaPublic();}}else {if(tag.equals(Constants.tag_display_single_area_public)){args=new Bundle();fragment=new CGAPublic();fragment.setArguments(args);}else {if(tag.equals(Constants.tag_display_single_area_private)){Bundle arguments=fr.getArguments();args=new Bundle();fragment=new CGAPrivate();Patient patient=(Patient)arguments.getSerializable(CGAAreaPrivate.PATIENT);args.putSerializable(CGAPrivate.PATIENT,patient);}else {if(tag.equals(Constants.tag_patient_progress)){Bundle arguments=fr.getArguments();args=new Bundle();fragment=new ViewSinglePatientInfo();Patient patient=(Patient)arguments.getSerializable(ProgressMainFragment.PATIENT);args.putSerializable(ViewSinglePatientInfo.PATIENT,patient);}else {if(tag.equals(Constants.tag_progress_detail)){args=new Bundle();fragment=new ProgressMainFragment();Bundle arguments=fr.getArguments();Patient patient=(Patient)arguments.getSerializable(ProgressDetail.PATIENT);args.putSerializable(ProgressMainFragment.PATIENT,patient);}else {if(tag.equals(Constants.tag_view_patien_info_records)){fragment=new PatientsMain();}else {if(tag.equals(Constants.tag_view_sessions_history)){fragment=new ViewPatientsFragment();}else {if(tag.equals(Constants.tag_view_drug_info)){fragment=new DrugPrescriptionMain();}else {if(tag.equals(Constants.tag_create_session)){Log.d(""Stack"",""pressed back in new session"");((CGAPrivate)currentFragment).discardFAB.performClick();return ;}else {if(tag.equals(Constants.tag_create_new_session_for_patient)){Log.d(""Stack"",""pressed back in new session with patient"");((CGAPrivate)currentFragment).discardFAB.performClick();return ;}else {if(tag.equals(Constants.tag_help_topic)){args=new Bundle();fragment=new HelpTopics();}else {if(tag.equals(Constants.tag_review_session)){fragment=new PatientsMain();}else {if(tag.equals(Constants.tag_review_session_from_patient_profile)){Bundle arguments=fr.getArguments();Session session=(Session)arguments.getSerializable(ReviewSingleSession.SESSION);Patient patient=session.getPatient();args=new Bundle();args.putSerializable(ViewSinglePatientInfo.PATIENT,patient);fragment=new ViewSinglePatientInfo();fragment.setArguments(args);}else {if(tag.equals(Constants.tag_review_test)){Bundle arguments=fr.getArguments();GeriatricScale test=(GeriatricScale)arguments.getSerializable(ReviewSingleTestFragment.testDBobject);Session session=test.getSession();args=new Bundle();args.putSerializable(ReviewSingleSession.SESSION,session);fragment=new ReviewSingleSession();}}}}}}}}}}}}}}fragment.setArguments(args);currentFragment=fragmentManager.findFragmentById(R.id.current_fragment);fragmentManager.beginTransaction().remove(currentFragment).replace(R.id.current_fragment,fragment).commit();}else {System.out.println(""Empty stack"");context.finish();}}"
3267	"@Override public void onViewReleased(View releasedChild,float xvel,float yvel){if(draggingOffset==0){return ;}if(draggingOffset==getDragRange()){return ;}boolean isBack=false;if(enableFlingBack&&backBySpeed(xvel,yvel)){isBack=true;}else {if(draggingOffset>=finishAnchor){isBack=true;}else {if(draggingOffset<finishAnchor){isBack=false;}}}int finalLeft;int finalTop;switch (dragEdge){case LEFT :finalLeft=isBack?horizontalDragRange:0;smoothScrollToX(finalLeft);break;case RIGHT :finalLeft=isBack?-horizontalDragRange:0;smoothScrollToX(finalLeft);break;case TOP :finalTop=isBack?verticalDragRange:0;smoothScrollToY(finalTop);break;case BOTTOM :finalTop=isBack?-verticalDragRange:0;smoothScrollToY(finalTop);break;}}"
3268	"@Override public boolean acceptSource(Object source){return (source instanceof IList&&((IList)source).getType().getContentType().isAssignableFrom(Types.GEOMETRY)||source instanceof GamaShapeFile||source instanceof GamaOsmFile||source instanceof GamaSVGFile||source instanceof GamaDXFFile);}"
3269	"public HearthTreeNode summonMinion(PlayerSide targetSide,CharacterIndex targetMinionIndex,HearthTreeNode boardState,boolean wasPlayed){if(boardState.data_.modelForSide(targetSide).isBoardFull()){return null;}HearthTreeNode toRet=boardState;toRet=this.summonMinion_core(targetSide,targetMinionIndex,toRet);if(this instanceof MinionBattlecryInterface&&wasPlayed){MinionBattlecryInterface battlecryOrigin=((MinionBattlecryInterface)this);HearthTreeNode child;Minion origin;CharacterIndex originCharacterIndex=toRet.data_.modelForSide(PlayerSide.CURRENT_PLAYER).getIndexForCharacter(this);ArrayList<HearthTreeNode> children=new ArrayList<>();for(CharacterIndex.CharacterLocation characterLocation : toRet.data_){if(battlecryOrigin.getBattlecryFilter().targetMatches(PlayerSide.CURRENT_PLAYER,this,characterLocation.getPlayerSide(),characterLocation.getIndex(),toRet.data_)){child=new HearthTreeNode(toRet.data_.deepCopy());origin=child.data_.getCharacter(PlayerSide.CURRENT_PLAYER,originCharacterIndex);child=origin.useTargetableBattlecry(characterLocation.getPlayerSide(),characterLocation.getIndex(),child);if(child!=null){children.add(child);}}}toRet=this.createNodeWithChildren(toRet,children);}if(wasPlayed){toRet=toRet.notifyMinionPlayed(targetSide,this);}toRet=toRet.notifyMinionSummon(targetSide,this);return toRet;}"
3270	"@Override public boolean handleMove(PointF coordinate){mCurrentCoordinate=new PointF(coordinate.x,coordinate.y);if(pathInsideBitmap==false&&checkPathInsideBitmap(coordinate)){pathInsideBitmap=true;}return true;}"
3271	"public static void onRead(Event event) throws IOException,SendMessageException,IoFilterException{SocketContext socketContext=event.getSession().socketContext();IoSession session=event.getSession();if(socketContext!=null&&session!=null){ByteBuffer byteBuffer=null;MessageLoader messageLoader=session.getMessageLoader();if(!messageLoader.isUseSpliter()){return ;}while(session.getByteBufferChannel().size()>0){byteBuffer=messageLoader.read();if(byteBuffer==null){session.close();return ;}Object result=byteBuffer;result=filterDecoder(session,result);if(result!=null){IoHandler handler=socketContext.handler();result=handler.onReceive(session,result);}if(result!=null){result=filterEncoder(session,result);sendMessage(session,result);}}}}"
3272	"public static ArrayList<ArticleInfo> getArticlesFromCategory(int mainCategoryID,int subCategoryID,boolean IncludeAbstracts){String bool=(includeAbstracts)?""1"":""0"";writer.println(""4 ""+bool);outputObject.writeObject(articleCategory);outputObject.writeObject(subCategory);return inputObject.readObject();}"
3273	"@Override public void tickUpdate(boolean isServer){if(isServer){boolean[] recalculate=inventoryChanged();boolean active=false;boolean flagSync=false;for(int slot=0;slot<GROWTH_AREA;slot++){if(recalculate[slot]){crops[slot]=getVirtualCrop(getInputSlot(slot));progression[slot]=0;if(crops[slot]!=null){progressionMax[slot]=crops[slot].getMaxGrowth()*TICKS_PER_GROWTH;}else {progressionMax[slot]=0;}flagSync=true;}}if(hasRedstoneSignal()||getEnergy()<ENERGY_PER_TICK){active=false;for(int slot=0;slot<GROWTH_AREA;slot++){if(progression[slot]>0){progression[slot]=0;flagSync=true;}}}else {for(int slot=0;slot<GROWTH_AREA;slot++){if(crops[slot]!=null){active=true;progression[slot]++;if(progression[slot]%TICKS_PER_GROWTH==0){if(crops[slot].grow()){List<ItemStack> harvest=crops[slot].getHarvest();if(harvest!=null&&(!harvest.isEmpty())&&this.hasSpaceForItemInOutputSlots(harvest.get(0))){getWorld().playSoundEffect(getPos().getX()+0.5,getPos().getY()+0.5,getPos().getZ()+0.5,""dig.grass"",0.35,1.0);for(ItemStack i : harvest){ItemStack remainder=this.insertItemToOutputSlots(i);if(remainder!=null){getWorld().spawnEntityInWorld(new EntityItem(getWorld(),2*(getWorld().rand.nextDouble()-0.5),2*(getWorld().rand.nextDouble()-0.5),2*(getWorld().rand.nextDouble()-0.5),remainder));}}crops[slot]=null;ItemStack seed=getInputSlot(slot);seed.stackSize--;if(seed.stackSize<=0){setInputSlot(slot,null);}}progression[slot]=0;}if(crops[slot]!=null){progressionMax[slot]=crops[slot].getMaxGrowth()*TICKS_PER_GROWTH;}else {progressionMax[slot]=0;}}}else {progression[slot]=0;progressionMax[slot]=0;}}if(active){subtractEnergy(ENERGY_PER_TICK,getType());}}if(flagSync){this.sync();}this.setActiveState(active);}}"
3274	"private boolean isNeededFieldEmpty(){if(name.getText().isEmpty()||description.getText().isEmpty()){return true;}else {if(checkInDatePickerStart.getValue()==null||JtimeStart.getValue()==null){return true;}else {if((checkInDatePickerEnd.getValue()!=null&&JtimeEnd.getValue()==null)||(checkInDatePickerEnd.getValue()==null&&JtimeEnd.getValue()!=null)){return true;}else {return false;}}}}"
3275	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}SnapshotQuote that=(SnapshotQuote)o;return name.equals(that.name)&&businessDate.equals(that.businessDate);}"
3276	"@Override public boolean buildNotification(PushMessage pushMessage,NotificationCompat.Builder builder){boolean result=true;boolean off_notify=myPref.getBoolean(Constants.PREFERENCE_NOTIFY,false);if(pushMessage.getData()!=null){if(pushMessage.getSenderId().trim().equals(myPref.getString(Constants.PREFERENCE_EMAIL_ADD,""""))){return false;}}if((HomeActivity.currentPage==0)&&(ChabokApplication.currentActivity instanceof HomeActivity)){ring();return false;}if(off_notify){return false;}return result;}"
3277	"public boolean parse(File input) throws FileNotFoundException{Scanner scan=new Scanner(input);lex.clear();int line=0;int start=0;while(scan.hasNextLine()&&!kill){String lexemeString="""";String str=scan.nextLine();for(int i=0;i<=str.length();i++){if(lexemeString.equals(""//"")){i=str.length();lexemeString="""";}if(i<str.length()&&str.charAt(i)!=' '){lexemeString+=str.charAt(i);if(lexemeString.length()==1){start=i;}}else {if(lexemeString!=""""){lex.add(new Lexeme(lexemeString,kinds,line,start));lexemeString="""";if(!lex.get(lex.size()-1).getSuccess()){kill=true;i=str.length();}}}}line++;}scan.close();return kill;}"
3278	"public boolean apply(JSONPath path,Object rootObject,Object currentObject,Object item){Object propertyValue=path.getPropertyValue(item,propertyName,false);return propertyValue!=null;}"
3279	"public Boolean execute(CommandSender sender,String[] args){if(!(sender instanceof Player)&&needPlayer){sender.sendMessage(""Sorry, but you need to execute this command as player."");return false;}if(!Util.permission((Player)sender,permission,adminCommand?PermissionDefault.OP:PermissionDefault.TRUE)){Util.Message(""Sorry, you are not allowed to do that!"",sender);return false;}return run(sender,args);}"
3280	"public String getTitleToolbar(){if(mActionType==ActionType.ACTION_DETAIL){return mContext.getString(R.string.request_leave);}return mContext.getString(R.string.confirm_request_leave);}"
3281	"@Override public void onClick(View v){if(getListener()!=null){getListener().onNewSourceTranslationTabClick();}}"
3282	"@Override public Node<T> predecessor(T element){Node<T> foundNode=search(element);if(foundNode==null){return null;}else {if(!foundNode.getLeft().isNIL()){return recursiveMaximum(foundNode.getLeft());}else {Node<T> parent=foundNode.getParent();while(parent!=null&&!foundNode.equals(parent.getRight())){parent=parent.getParent();foundNode=foundNode.getParent();}return parent;}}}"
3283	"@Override public void error(String msg,int flag){if(flag==0){mRefreshLayout.setVisibility(View.GONE);ll_commonError.setVisibility(View.VISIBLE);tv_hintText.setText(msg+getString(R.string.clickRefresh));}dismissLoadingDialog();}"
3284	"@Override public Vector<Root> findRoutinesBySignature(String rootName,int argCount){Vector<Root> functionsAny=findDiagramsByName(rootName);Vector<Root> functions=new Vector<Root>();for(int i=0;i<functionsAny.size();i++){Root root=functionsAny.get(i);if(!root.isProgram&&root.getParameterNames().count()==argCount){functions.add(root);}}return functions;}"
3285	"public TreeNode ancesterHelper(TreeNode root,TreeNode a,TreeNode b){if(root==a||root==b){return root;}boolean aOnL=cover(root.left,a);boolean bOnL=cover(root.left,b);if((aOnL&&!bOnL)||(!aOnL&&bOnL)){return root;}TreeNode goTo=aOnL?root.left:root.right;return ancesterHelper(goTo,a,b);}"
3286	"@Override public void onSuccess(String result,int page,Integer actionType){if(actionType==1){WxOrderInfoBean bean=GsonUtils.getInstance().transitionToBean(result,WxOrderInfoBean.class);if(bean==null){return ;}if(bean.getCode()==200){payByWx(bean.getAppId(),bean.getPartnerId(),bean.getPrepayId(),bean.getPackege(),bean.getNonceStr(),bean.getTimestamp(),bean.getSign());}}}"
3287	"private static int storePartialItemStack(IInventory inventory,ItemStack itemStack){ final Item item=itemStack.getItem();int stackSize=itemStack.getCount();int slot;if(itemStack.getMaxStackSize()==1){slot=getOpenSlot(inventory);if(slot<0){return stackSize;}else {if(inventory.getStackInSlot(slot)==null&&inventory.getStackInSlot(slot)!=ItemStack.EMPTY){inventory.setInventorySlotContents(slot,itemStack.copy());}return 0;}}else {slot=findSlotForItemStack(inventory,itemStack);if(slot<0){slot=getOpenSlot(inventory);}if(slot<0){return stackSize;}else {ItemStack stack=inventory.getStackInSlot(slot);if(stack==null||stack==ItemStack.EMPTY){stack=new ItemStack(item,0,itemStack.getItemDamage());if(itemStack.hasTagCompound()){stack.setTagCompound(itemStack.getTagCompound().copy());}}int inventoryStackSpace=stackSize;if(stackSize>stack.getMaxStackSize()-stack.getCount()){inventoryStackSpace=stack.getMaxStackSize()-stack.getCount();}if(inventoryStackSpace>inventory.getInventoryStackLimit()-stack.getCount()){inventoryStackSpace=inventory.getInventoryStackLimit()-stack.getCount();}if(inventoryStackSpace==0){return stackSize;}else {stackSize-=inventoryStackSpace;stack.setCount(stack.getCount()+inventoryStackSpace);stack.setAnimationsToGo(5);inventory.setInventorySlotContents(slot,stack);return stackSize;}}}}"
3288	"@Override public long insert(DBHelper db){long mID=-1;db.beginTransaction();try{mID=super.insert(db);if(mSplitBuchung!=null&&!mSplitBuchung.isRemoved()){mSplitBuchung.put(R.string.column_transferID,getID());mSplitBuchung.put(R.string.column_accountID,getAccountID());mSplitBuchung.put(R.string.column_wpid,getPartnerID());mSplitBuchung.put(R.string.column_btag,getAsString(R.string.column_btag));put(R.string.column_amount,mSplitBuchung.getSplitBuchungSaldo());remove(R.string.column_catID);remove(R.string.column_transferaccountID);mSplitBuchung.insert(db);}db.setTransactionSuccessful();}finally{db.endTransaction();}return mID;}"
3289	"@Override public void updateLogicalState(float tpf){if(impositor==null){loadImpostor();}float dist=camera.getLocation().distanceSquared(this.getWorldTranslation());if(dist<=fadeFar&&highResStem==null&&useHighRes&&this.checkCulling(camera)){loadHighResTree();LOG.log(Level.INFO,""dist={0} -> load high resultion mesh"",dist);}else {if((dist>fadeFar||!this.checkCulling(camera))&&highResStem!=null){detachChild(highResStem);if(highResLeaves!=null){detachChild(highResLeaves);}highResStem=null;highResLeaves=null;LOG.log(Level.INFO,""dist={0} -> discard high resultion mesh"",dist);}}super.updateLogicalState(tpf);}"
3290	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);Intent intent=getIntent();String requestId=intent.getStringExtra(EXTRA_REQUEST_ID);String distributionGroupId=intent.getStringExtra(EXTRA_DISTRIBUTION_GROUP_ID);String updateToken=intent.getStringExtra(EXTRA_UPDATE_TOKEN);String updateSetupFailed=intent.getStringExtra(EXTRA_UPDATE_SETUP_FAILED);MobileCenterLog.debug(LOG_TAG,getLocalClassName()+"".getIntent()=""+intent);MobileCenterLog.debug(LOG_TAG,""Intent requestId=""+requestId);MobileCenterLog.debug(LOG_TAG,""Intent distributionGroupId=""+distributionGroupId);MobileCenterLog.debug(LOG_TAG,""Intent updateToken passed=""+(updateToken!=null));MobileCenterLog.debug(LOG_TAG,""Intent updateSetupFailed passed=""+(updateSetupFailed!=null));if(requestId!=null&&distributionGroupId!=null){Distribute.getInstance().storeRedirectionParameters(requestId,distributionGroupId,updateToken);}else {if(updateSetupFailed!=null){Distribute.getInstance().storeUpdateSetupFailedParameter(updateSetupFailed);}}finish();if(!((getIntent().getFlags()&Intent.FLAG_ACTIVITY_NEW_TASK)==Intent.FLAG_ACTIVITY_NEW_TASK)){MobileCenterLog.debug(LOG_TAG,""Using restart work around to correctly resume app."");startActivity(intent.cloneFilter().addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));}else {if(isTaskRoot()){Intent launchIntentForPackage=getPackageManager().getLaunchIntentForPackage(getPackageName());if(launchIntentForPackage!=null){startActivity(launchIntentForPackage);}}}}"
3291	"@Override public ItemStack slotClick(int slotId,int dragType,ClickType clickTypeIn,EntityPlayer player){if(clickTypeIn!=ClickType.QUICK_CRAFT&&slotId>=0){int clickedSlot=slotId-inventoryChisel.getSizeInventory()-27;Chisel.debug(""Slot clicked is ""+slotId+"" and slot length is ""+inventorySlots.size());try{Slot slot=(Slot)inventorySlots.get(slotId);Chisel.debug(""Slot is ""+slot);}catch(Exception exception){Chisel.debug(""Exception getting slot"");exception.printStackTrace();}if(clickedSlot==chiselSlot||(clickTypeIn==ClickType.SWAP&&dragType==chiselSlot)){return null;}}return super.slotClick(slotId,dragType,clickTypeIn,player);}"
3292	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}AssetUpdate that=(AssetUpdate)o;return ((oldState==null&&that.oldState==null)||(oldState!=null&&that.oldState!=null&&oldState.equals(that.oldState)))&&((newState==null&&that.newState==null)||(newState!=null&&that.newState!=null&&newState.equals(that.newState)));}"
3293	"@Override protected void execute(){boolean finalRun=colBuiltConsumer.getNumberOfTimesWired()==0||allInputColumnsBuilt.get();Set<List<String>> colCombinations;try{colCombinations=columnPatternUtil.findColNamesForColNamePattern(defaultEnv,inputColPatterns,MAX_LENGTH_PROVIDER);}catch(LengthColumnMissingException e){if(finalRun){throw new ExecutablePlanExecutionException(""Not all 'length' columns were created. Cannot proceed."");}return ;}Set<String> allNonLengthCols=colCombinations.stream().flatMap(lst -> lst.stream()).collect(Collectors.toSet());boolean notAllColsAvailable=allNonLengthCols.stream().anyMatch(s -> defaultEnv.getColumnShard(s) == null);if(notAllColsAvailable){if(finalRun){throw new ExecutablePlanExecutionException(""Not all columns were created. Cannot proceed."");}return ;}long lowestRowId=defaultEnv.getTableShardIfAvailable().getLowestRowId();long numberOfRows=defaultEnv.getTableShardIfAvailable().getNumberOfRowsInShard();ColumnType inputColType=null;ColumnType outputColType=null;LoaderColumnInfo colInfo=new LoaderColumnInfo(ColumnType.LONG);ColumnShardBuilderManager colBuilderManager=columnShardBuilderFactory.createColumnShardBuilderManager(colInfo,lowestRowId);String lengthColName=repeatedColNameGen.repeatedLength(outputColNameBase);for(long rowId=lowestRowId;rowId<lowestRowId+numberOfRows;rowId++){long finalRowId=rowId;Set<List<String>> colCombinationsForRow=columnPatternUtil.findColNamesForColNamePattern(defaultEnv,inputColPatterns,lenCol -> lenCol.getColumnShardDictionary().decompressValue(lenCol.resolveColumnValueIdForRow(finalRowId)));colBuilderManager.addValues(lengthColName,new Long{(long)colCombinationsForRow.size()},rowId);Iterator<List<String>> colCombIt=colCombinationsForRow.iterator();for(int colCombinationIdx=0;colCombinationIdx<colCombinationsForRow.size();colCombinationIdx++){List<String> colCombination=colCombIt.next();if(inputColType==null){inputColType=defaultEnv.getColumnType(colCombination.get(0));}ProjectionFunction<Object,Object> fn=functionFactory.createProjectionFunction(functionNameLowerCase,inputColType);if(outputColType==null){outputColType=fn.getOutputType();}for(int paramIdx=0;paramIdx<functionParameters.length;paramIdx++){ColumnOrValue parameter=functionParameters[paramIdx];Object value;if(parameter.getType().equals(Type.LITERAL)){value=parameter.getValue();}else {int patternIdx=inputColPatternsIndex.get(parameter.getColumnName());String actualColName=colCombination.get(patternIdx);ColumnShard colShard=defaultEnv.getColumnShard(actualColName);if(colShard instanceof ConstantColumnShard){value=((ConstantColumnShard)colShard).getValue();}else {value=colShard.getColumnShardDictionary().decompressValue(colShard.resolveColumnValueIdForRow(finalRowId));}}fn.provideConstantParameter(paramIdx,value);}Object[] functionResult=fn.execute();String outputColName=repeatedColNameGen.repeatedAtIndex(outputColNameBase,colCombinationIdx);colInfo.registerColumnType(outputColName,outputColType);colBuilderManager.addValues(outputColName,functionResult,rowId);}}for(String newColName : colBuilderManager.getAllColumnsWithValues()){ColumnShard newColShard=colBuilderManager.build(newColName);switch (newColShard.getColumnType()){case STRING :defaultEnv.storeTemporaryStringColumnShard((StringColumnShard)newColShard);break;case LONG :defaultEnv.storeTemporaryLongColumnShard((LongColumnShard)newColShard);break;case DOUBLE :defaultEnv.storeTemporaryDoubleColumnShard((DoubleColumnShard)newColShard);break;}}for(String newColName : Sets.difference(colBuilderManager.getAllColumnsWithValues(),new HashSet<>(Arrays.asList(lengthColName)))){forEachOutputConsumerOfType(ColumnBuiltConsumer.class,c -> c.columnBuilt(newColName));}forEachOutputConsumerOfType(ColumnBuiltConsumer.class,c -> c.columnBuilt(lengthColName));forEachOutputConsumerOfType(GenericConsumer.class,c -> c.sourceIsDone());doneProcessing();}"
3294	"@Override public boolean equals(Object object){boolean sameSame=false;if(object!=null&&object instanceof HsbDevice){sameSame=(this.mDevId==((HsbDevice)object).mDevId);}return sameSame;}"
3295	"protected int convertToSqlType(String inValueType){int outValue;if(inValueType==TypeDef.Date){outValue=Types.DATE;}else {if(inValueType==TypeDef.Timestamp){outValue=Types.DATE;}else {if(inValueType==TypeDef.String){outValue=Types.CHAR;}else {if(inValueType==TypeDef.Number){outValue=Types.INTEGER;}else {if(inValueType==TypeDef.Binary){outValue=Types.BINARY;}else {throw new Error(""Value type : ""+inValueType+"" defined in ""+home.toString()+"" not supported"");}}}}}return outValue;}"
3296	"@Override public BiosCommandResult updateExportRules(StorageSystem storage,FileDeviceInputOutput args) throws ControllerException{XMLApiResult result=null;ApplicationContext context=null;List<ExportRule> exportAdd=args.getExportRulesToAdd();List<ExportRule> exportDelete=args.getExportRulesToDelete();List<ExportRule> exportModify=args.getExportRulesToModify();List<ExportRule> exportsToRemove=new ArrayList<>();List<ExportRule> exportsToAdd=new ArrayList<>();String exportPath;String subDir=args.getSubDirectory();if(!args.getFileOperation()){exportPath=args.getSnapshotPath();if(subDir!=null&&subDir.length()>0){exportPath=args.getSnapshotPath()+""/""+subDir;}}else {exportPath=args.getFs().getPath();if(subDir!=null&&subDir.length()>0){exportPath=args.getFs().getPath()+""/""+subDir;}}_log.info(""exportPath : {}"",exportPath);args.setExportPath(exportPath);try{Map<String,ExportRule> arrayExportRuleMap=extraExportRuleFromArray(storage,args);if(!arrayExportRuleMap.isEmpty()){if(exportModify!=null){for(ExportRule exportRule : exportModify){ExportRule arrayExportRule=arrayExportRuleMap.remove(exportRule.getSecFlavor());if(arrayExportRule!=null){if(exportRule.getReadOnlyHosts()!=null){exportRule.getReadOnlyHosts().addAll(arrayExportRule.getReadOnlyHosts());}else {exportRule.setReadOnlyHosts(arrayExportRule.getReadOnlyHosts());}if(exportRule.getReadWriteHosts()!=null){exportRule.getReadWriteHosts().addAll(arrayExportRule.getReadWriteHosts());}else {exportRule.setReadWriteHosts(arrayExportRule.getReadWriteHosts());}if(exportRule.getRootHosts()!=null){exportRule.getRootHosts().addAll(arrayExportRule.getRootHosts());}else {exportRule.setRootHosts(arrayExportRule.getRootHosts());}}}exportModify.addAll(arrayExportRuleMap.values());}else {exportModify=new ArrayList<ExportRule>();exportModify.addAll(arrayExportRuleMap.values());}}}catch(Exception e){_log.error(""Not able to fetch latest Export rule from backend array."",e);}List<ExportRule> existingDBExportRule=args.getExistingDBExportRules();List<ExportRule> exportsToprocess=new ArrayList<>();for(ExportRule rule : existingDBExportRule){if(rule.getExportPath().equalsIgnoreCase(exportPath)){exportsToprocess.add(rule);}}_log.info(""Number of existng Rules found {}"",exportsToprocess.size());if(!exportsToprocess.isEmpty()||(exportAdd!=null&&!exportAdd.isEmpty())){for(ExportRule existingRule : exportsToprocess){for(ExportRule modifiedrule : exportModify){if(modifiedrule.getSecFlavor().equals(existingRule.getSecFlavor())){_log.info(""Modifying Export Rule from {}, To {}"",existingRule,modifiedrule);exportsToRemove.add(existingRule);exportsToAdd.add(modifiedrule);}}}if(exportAdd!=null&&!exportAdd.isEmpty()){for(ExportRule newExport : exportAdd){_log.info(""Adding Export Rule {}"",newExport);exportsToAdd.add(newExport);}}if(exportDelete!=null&&!exportDelete.isEmpty()){for(ExportRule existingRule : exportsToprocess){for(ExportRule oldExport : exportDelete){if(oldExport.getSecFlavor().equals(existingRule.getSecFlavor())){_log.info(""Deleting Export Rule {}"",existingRule);exportsToRemove.add(existingRule);}}}}_log.info(""No of exports found to remove from the existing exports list {}"",exportsToRemove.size());exportsToprocess.removeAll(exportsToRemove);_log.info(""No of exports found to add to the existing exports list {}"",exportsToAdd.size());exportsToprocess.addAll(exportsToAdd);SMBShareMap shares=args.getFs().getSMBFileShares();boolean isMounted=true;if(exportsToprocess.isEmpty()&&(shares==null||(shares!=null&&shares.isEmpty()))){isMounted=false;}if(!args.getFileOperation()){isMounted=false;}List<String> newPaths=new ArrayList<String>();newPaths.add(exportPath);try{context=loadContext();VNXFileCommApi vnxComm=loadVNXFileCommunicationAPIs(context);if(null==vnxComm){throw VNXException.exceptions.communicationFailed(VNXCOMM_ERR_MSG);}StorageHADomain dm=this.getDataMover(args.getFs());if(dm==null){Exception e=new Exception(""VNX File Export Failed Data Mover not found"");throw VNXException.exceptions.createExportFailed(""VNX File Export Failed Data Mover not found"",e);}List<VNXFileExport> exportList=new ArrayList<VNXFileExport>();for(ExportRule rule : exportsToprocess){VNXFileExport vnxExp=null;String comments=rule.getComments();String protocol=""nfs"";if(rule.getReadOnlyHosts()!=null&&!rule.getReadOnlyHosts().isEmpty()){vnxExp=new VNXFileExport(new ArrayList<String>(rule.getReadOnlyHosts()),dm.getName(),exportPath,rule.getSecFlavor(),""ro"",rule.getAnon(),protocol,args.getFs().getStoragePort().toString(),subDir,comments);exportList.add(vnxExp);}if(rule.getReadWriteHosts()!=null&&!rule.getReadWriteHosts().isEmpty()){vnxExp=new VNXFileExport(new ArrayList<String>(rule.getReadWriteHosts()),dm.getName(),exportPath,rule.getSecFlavor(),""rw"",rule.getAnon(),protocol,args.getFs().getStoragePort().toString(),subDir,comments);exportList.add(vnxExp);}if(rule.getRootHosts()!=null&&!rule.getRootHosts().isEmpty()){vnxExp=new VNXFileExport(new ArrayList<String>(rule.getRootHosts()),dm.getName(),exportPath,rule.getSecFlavor(),""root"",rule.getAnon(),protocol,args.getFs().getStoragePort().toString(),subDir,comments);exportList.add(vnxExp);}}if((exportList!=null&&exportList.isEmpty())&&(exportsToRemove!=null&&!exportsToRemove.isEmpty())){_log.info(""Requested to remove all export rules"");VNXFileExport vnxExp=new VNXFileExport(new ArrayList<String>(),dm.getName(),exportPath,"""",""root"","""","""",args.getFs().getStoragePort().toString(),subDir,"""");exportList.add(vnxExp);}if(args.getFileOperation()){result=vnxComm.doExport(storage,dm,exportList,newPaths,args.getFileObj(),args.getFsNativeId(),isMounted);}else {result=vnxComm.doExport(storage,dm,exportList,newPaths,args.getFileObj(),args.getSnapNativeId(),isMounted);}if(result.isCommandSuccess()){_log.info(""updateExportRules result.isCommandSuccess true"");}}catch(VNXException e){throw VNXException.exceptions.createExportFailed(""VNX File Export Failed"",e);}finally{clearContext(context);}}BiosCommandResult cmdResult=null;if(result.isCommandSuccess()){cmdResult=BiosCommandResult.createSuccessfulResult();}else {cmdResult=BiosCommandResult.createErrorResult(DeviceControllerErrors.vnx.unableToUpdateExport(result.getMessage()));}return cmdResult;}"
3297	"public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){this.source=source;this.serializationService=serializationService; final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();if(cacheEntryListener instanceof CacheEntryCreatedListener){this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;}else {this.cacheEntryCreatedListener=null;}if(cacheEntryListener instanceof CacheEntryRemovedListener){this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;}else {this.cacheEntryRemovedListener=null;}if(cacheEntryListener instanceof CacheEntryUpdatedListener){this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;}else {this.cacheEntryUpdatedListener=null;}if(cacheEntryListener instanceof CacheEntryExpiredListener){this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;}else {this.cacheEntryExpiredListener=null;} final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();if(filterFactory!=null){filter=filterFactory.create();}else {filter=null;}isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();}"
3298	"private Histogram(HistogramBuilder histogramBuilder){this.data=histogramBuilder.data;this.width=histogramBuilder.width;this.legend=histogramBuilder.legend;this.bins=histogramBuilder.bins;}"
3299	"private void slideItem(RecyclerView.ViewHolder holder,float amount,boolean horizontal,boolean shouldAnimate){if(amount==OUTSIDE_OF_THE_WINDOW_LEFT){mItemSlideAnimator.slideToOutsideOfWindow(holder,ItemSlidingAnimator.DIR_LEFT,shouldAnimate,mMoveToOutsideWindowAnimationDuration);}else {if(amount==OUTSIDE_OF_THE_WINDOW_TOP){mItemSlideAnimator.slideToOutsideOfWindow(holder,ItemSlidingAnimator.DIR_UP,shouldAnimate,mMoveToOutsideWindowAnimationDuration);}else {if(amount==OUTSIDE_OF_THE_WINDOW_RIGHT){mItemSlideAnimator.slideToOutsideOfWindow(holder,ItemSlidingAnimator.DIR_RIGHT,shouldAnimate,mMoveToOutsideWindowAnimationDuration);}else {if(amount==OUTSIDE_OF_THE_WINDOW_BOTTOM){mItemSlideAnimator.slideToOutsideOfWindow(holder,ItemSlidingAnimator.DIR_DOWN,shouldAnimate,mMoveToOutsideWindowAnimationDuration);}else {if(amount==0.0){mItemSlideAnimator.slideToDefaultPosition(holder,horizontal,shouldAnimate,mReturnToDefaultPositionAnimationDuration);}else {mItemSlideAnimator.slideToSpecifiedPosition(holder,amount,horizontal);}}}}}}"
3300	"@SuppressWarnings(""AccessingNonPublicFieldOfAnotherObject"") private static boolean shouldSkipField(String stringValue,ToStringOptions options,Mutable<Boolean> quoted){if(options.skipNulls&&stringValue==null){return true;}if(options.skipEmptyStrings){if(quoted!=null&&quoted.get()){if(""''"".equals(stringValue)||""\""\"""".equals(stringValue)){return true;}}else {if(isEmpty(stringValue)){return true;}}}if(options.skipBlankStrings){if(quoted!=null&&quoted.get()){if(isBlank(stringValue.substring(1,stringValue.length()-1))){return true;}}else {if(isBlank(stringValue)){return true;}}}return false;}"
3301	"public void setDistributed(boolean distributed){this.distributed=distributed;}"
3302	"void processFoundDevices(){ruuviTagArrayList.clear();ScanEvent scanEvent=new ScanEvent(getApplicationContext(),DeviceIdentifier.id(getApplicationContext()));Iterator<LeScanResult> itr=scanResults.iterator();while(itr.hasNext()){LeScanResult element=itr.next();List<ADStructure> structures=ADPayloadParser.getInstance().parse(element.scanData);for(ADStructure structure : structures){if(structure instanceof EddystoneURL){EddystoneURL es=(EddystoneURL)structure;if(es.getURL().toString().startsWith(""https://ruu.vi/#"")||es.getURL().toString().startsWith(""https://r/"")){RuuviTag temp=new RuuviTag(element.device.getAddress(),es.getURL().toString(),null,element.rssi,true);if(checkForSameTag(temp)){RuuviTag real=new RuuviTag(element.device.getAddress(),es.getURL().toString(),null,element.rssi,false);ruuviTagArrayList.add(real);update(real);scanEvent.addRuuviTag(real);}}}else {if(structure instanceof ADManufacturerSpecific){ADManufacturerSpecific es=(ADManufacturerSpecific)structure;if(es.getCompanyId()==0x0499){byte[] data=es.getData();if(data!=null){RuuviTag tempTag=new RuuviTag(element.device.getAddress(),null,data,element.rssi,true);if(checkForSameTag(tempTag)){RuuviTag real=new RuuviTag(element.device.getAddress(),null,data,element.rssi,false);ruuviTagArrayList.add(real);update(real);scanEvent.addRuuviTag(real);}}}}}}if(backendUrl!=null&&scanEvent.tags.size()>0){Ion.with(getApplicationContext()).load(backendUrl).setJsonPojoBody(scanEvent).asJsonObject().setCallback(new FutureCallback<JsonObject>(){  @Override public void onCompleted(  Exception e,  JsonObject result){  }});}exportRuuviTags();}}"
3303	"@Override protected boolean apply(){return solver.activateFact(atom)&&solver.add(solver.imply(in_plan,solver.eq(((AtomFlaw)effect).atom.state,AtomState.Active)));}"
3304	"@Override public Integer doInBackground(Void... params){if(!Utility.isNetworkAvailable(mContext)){return 0;}switch (mRequestType){case GET :Utility.showLog(""Request URL "",mUrl);if(mUrl.contains(APIConstants.COUNTRIES_URL)||mUrl.contains(APIConstants.STATES_URL)||mUrl.contains(APIConstants.DISTRICTS_URL)||mUrl.contains(APIConstants.MANDALS_URL)||mUrl.contains(APIConstants.VILLAGES_URL)||mUrl.contains(APIConstants.GET_PROFESSIONS)||mUrl.contains(APIConstants.CITIES_URL)||mUrl.contains(APIConstants.GET_ID_PROOFS)||mUrl.contains(APIConstants.GET_BLOOD_GROUPS)){mResponse=Utility.httpGetRequestToServer(Utility.getURL(mUrl,mParams));}else {if(mUrl.contains(APIConstants.FIND_ALL_JOBS)||mUrl.contains(APIConstants.JOBS_HOME_URL)||mUrl.contains(APIConstants.NEWS_HOME_URL)||mUrl.contains(APIConstants.GET_PROFILE)||mUrl.contains(APIConstants.FORUM_ALL)||mUrl.contains(APIConstants.PRIVATE_TOPICS_FORUM)||mUrl.contains(APIConstants.PUBLIC_TOPICS_FORUM)||mUrl.contains(APIConstants.GET_MEMBERS_FORUM)||mUrl.contains(APIConstants.GET_MODERATORS_FORUM)||mUrl.contains(APIConstants.IS_MEMBER_FORUM)||mUrl.contains(APIConstants.TOPIC_FORUM)||mUrl.contains(APIConstants.DELETE_TOPIC_FORUM)||mUrl.contains(APIConstants.ASK_MY_HELP_DELETE)||mUrl.contains(APIConstants.ASK_HELPS_LIST_FOR_MODERATERS)||mUrl.contains(APIConstants.ASK_MY_HELP_LIST)||mUrl.contains(APIConstants.ASK_MY_HELP_MODERATE_GROUPS)||mUrl.contains(APIConstants.ASK_MY_HELP_GET_HELP_DETAIL)||mUrl.contains(APIConstants.MY_APPLIED_JOBS_URL)||mUrl.contains(APIConstants.MY_POSTS_DELETE_URL)||mUrl.contains(APIConstants.MY_POSTED_JOBS_URL)){mResponse=Utility.getWithHeader(Utility.getURL(mUrl,mParams),mContext);}else {mResponse=Utility.GETHeader(mUrl,mContext);}}if(mResponse!=null){Utility.showLog(""mResponse  "",mResponse);}return parseResposnse(mResponse);case POST :Utility.showLog(""Request URL "",mUrl);Utility.showLog(""Request mParams != null getParams  "",""""+Utility.getParams(mParams));if(mUrl.contains(APIConstants.LOGIN)){mResponse=Utility.httpLoginCookiesPostRequest(mUrl,Utility.getParams(mParams),mContext);}else {if(mUrl.contains(APIConstants.APPLY_JOBS_URL)||mUrl.contains(APIConstants.POST_JOB_URL)||mUrl.contains(APIConstants.POST_TOPIC_FORUM)||mUrl.contains(APIConstants.POST_REPLY_FORUM)||mUrl.contains(APIConstants.ASK_MY_HELP_POST)||mUrl.contains(APIConstants.UPDATE_DEVICE)||mUrl.contains(APIConstants.ASK_MY_HELP_REPLY)||mUrl.contains(APIConstants.MY_APPLIED_JOBS_UPDATE_JOB_STATUS)||mUrl.contains(APIConstants.CHANGE_PASSWORD)||mUrl.contains(APIConstants.ASK_HELPS_LIST_FOR_MODERATERS_POST)||mUrl.contains(APIConstants.UPDATE_PROFILE)||mUrl.contains(APIConstants.MY_POSTS_EDIT_URL)){mResponse=Utility.httpPostRequestToServerWithHeaderCookies(mUrl,Utility.getParams(mParams),mContext);}else {mResponse=Utility.httpPostRequestToServerWithHeader(mUrl,Utility.getParams(mParams),mContext);}}if(mResponse!=null){Utility.showLog(""mResponse  "",mResponse);}else {Utility.showLog(""mResponse  "",mResponse);}return parseResposnse(mResponse);default :return -1;}}"
3305	"private boolean updateLocalSate(){GossipNodeState thisNode=localGossip.member(id);GossipNodeStatus newStatus=thisNode.status();if(newStatus==status){updateTopology(true);}else {GossipNodeStatus oldStatus=status;status=newStatus;if(DEBUG){log.debug(""Updated local node state [old={}, new={}]"",oldStatus,newStatus);}updateTopology(false);listener.onStatusChange(oldStatus,newStatus,thisNode.order(),lastTopology);}updateWatchNodes();if(leaveScheduled&&(newStatus==UP||newStatus==JOINING&&localGossip.isConvergent())){if(DEBUG){log.debug(""Processing scheduled leave operation [gossip={}]"",gossip());}return leave()!=null;}return false;}"
3306	"@Override public final boolean equals(Object obj){if(this==obj){return true;}if(!(obj instanceof ADate)){return false;} final ADate a=(ADate)obj;return type.eq(a.type)&&yea==a.yea&&mon==a.mon&&day==a.day&&hou==a.hou&&min==a.min&&sec==a.sec&&tz==a.tz&&(sec==null?a.sec==null:sec.compareTo(a.sec)==0);}"
3307	"@Override public int findTokenStart(CharSequence text,int cursor){int i=cursor;while(i>0){if(!isWebfingerIdChar(text,i-1)){break;}i--;}if(i>=cursor-MIN_LENGHT_TO_SEARCH||text.charAt(i)!='@'){return cursor;}MyLog.v(this,""'""+text+""', cursor=""+cursor+"", start=""+(i+1));return i+1;}"
3308	"public static Object makeRequestToMicroservice(Object payload,Class returnType,MicroserviceRestTemplate requestTemplate,Class[] returnGenericType,Map<String,Object> params,HttpHeaders httpHeaders){HttpMethod httpMethod=requestTemplate.getMethod();try{if(!(payload instanceof byte[])){httpHeaders.setContentType(MediaType.APPLICATION_JSON);}if(microserviceRequestInterceptors!=null){microserviceRequestInterceptors.forEach(x -> {  x.beforeCreateHttpEntity(requestTemplate,returnType,returnGenericType,httpHeaders);});}HttpEntity<Object> request;if(payload==null){request=new HttpEntity<>(httpHeaders);}else {request=new HttpEntity<>(payload,httpHeaders);}ResponseEntity<byte[]> responseEntity;try{responseEntity=requestTemplate.exchange(null,requestTemplate.getMethod(),request,byte[].class);}catch(InvalidRequestException e){if(returnType.equals(ResponseEntity.class)){if(e.getClientHttpResponse()!=null){ClientHttpResponse clientHttpResponse=e.getClientHttpResponse();if(clientHttpResponse.getBody()!=null){String body;Scanner s=new Scanner(clientHttpResponse.getBody()).useDelimiter(""\\A"");body=s.hasNext()?s.next():"""";if(body==null){return ResponseEntity.status(clientHttpResponse.getRawStatusCode()).headers(clientHttpResponse.getHeaders());}else {return ResponseEntity.status(clientHttpResponse.getRawStatusCode()).headers(clientHttpResponse.getHeaders()).body(body);}}}}throw e;}if(microserviceRequestInterceptors!=null){microserviceRequestInterceptors.forEach(x -> {  x.afterRequest(requestTemplate,request,responseEntity,returnType,returnGenericType);});}logger.debug(""Request to microservice {}"",requestTemplate.getLastURI().toString());if(returnType.equals(Void.TYPE)){return Void.TYPE;}if(returnType.equals(byte[].class)){return responseEntity.getBody();}if(returnType.equals(ResponseEntity.class)){if(!responseEntity.hasBody()){return responseEntity;}ReflectionUtils.setField(body,responseEntity,objectMapper.readValue(responseEntity.getBody(),returnGenericType[0]));return responseEntity;}Object o=MicroserviceRequestMaker.onBeforeReturnResultProcessor(responseEntity.getBody(),payload,returnType,requestTemplate,returnGenericType,params);if(o==null&!responseEntity.hasBody()&&RETURN_NULL_ON_EMPTY_RESPONSE_BODY&&!returnType.equals(ResponseEntity.class)){return null;}return o;}catch(Throwable e){if(params!=null){Object defaultValue=params.get(""HAVE_DEFAULT_VALUE"");if(defaultValue==Boolean.TRUE){return getDefaultValue(params);}}if(e instanceof InvalidRequestException){throw (InvalidRequestException)e;}if(e instanceof CannotResolveHostException){logger.error(e.getMessage(),e);}logger.error(""Can not get bytes from microservice {} {}"",httpMethod.toString(),requestTemplate.getLastURI()==null?""NULL_URL"":requestTemplate.getLastURI().toString(),e);throw new InternalSeverErrorProcessingRequestException(""Internal error processing. Retry later"");}}"
3309	"private void checkVisibilityMinutes(LocalTime time,Button plusButton,Button minusButton){int minute=time.getMinute();if(minute==0){plusButton.setVisible(true);minusButton.setVisible(false);}else {if(minute==59){plusButton.setVisible(false);minusButton.setVisible(true);}else {plusButton.setVisible(true);minusButton.setVisible(true);}}}"
3310	"public void run(){if(arena.waveClear&&wave>1){if(!arena.monsters.isEmpty()){return ;}}for(Map.Entry<Integer,List<ItemStack>> entry : arena.everyWaveMap.entrySet()){if(wave%entry.getKey()==0){addReward(entry.getValue());}}if(arena.afterWaveMap.containsKey(wave)){addReward(arena.afterWaveMap.get(wave));}if(wave%modulo==0){MAUtils.tellAll(arena,MAMessages.get(Msg.WAVE_SPECIAL,""""+wave));detonateCreepers(arena.detCreepers);specialWave();for(MobArenaListener listener : plugin.getAM().listeners){listener.onSpecialWave(wave,wave/modulo);}}else {MAUtils.tellAll(arena,MAMessages.get(Msg.WAVE_DEFAULT,""""+wave));detonateCreepers(arena.detCreepers);defaultWave();for(MobArenaListener listener : plugin.getAM().listeners){listener.onDefaultWave(wave);}}wave++;if(arena.maxIdleTime>0){arena.resetIdleTimer();}}"
3311	"@Override public int hashCode(){return ~predicate.hashCode();}"
3312	"@Override public void onClick(View view){if(StartIsPressed==true){}else {mapFragment.startRecord();StartIsPressed=true;StopIsPressed=false;}}"
3313	"public boolean triggersPassive(Actor actor,Plan current,Skill used,Target subject){if(used!=HAND_TO_HAND&&used!=STEALTH_AND_COVER){return false;}if(current instanceof Combat){return false;}return actor.traits.hasTrait(asCondition);}"
3314	"public static NonVolatileMemoryAllocatorService getNonVolatileMemoryAllocatorService(String id){NonVolatileMemoryAllocatorService ret=null;if(null==m_nvmasvcloader){m_nvmasvcloader=ServiceLoader.load(NonVolatileMemoryAllocatorService.class);}Iterator<NonVolatileMemoryAllocatorService> svcit=m_nvmasvcloader.iterator();NonVolatileMemoryAllocatorService svc=null;while(null==ret&&svcit.hasNext()){svc=svcit.next();if(svc.getServiceId().equals(id)){ret=svc;}}assert (null!=ret):""NonVolatileMemoryAllocatorService \'""+id+""\' not found!"";return ret;}"
3315	"public void onBlockBreak(BlockBreakEvent event){if(edit||!inRegion(event.getBlock().getLocation())){return ;}Block b=event.getBlock();if(blocks.remove(b)||b.getType()==Material.TNT){return ;}if(softRestore){int[] buffer=new int[5];buffer[0]=b.getX();buffer[1]=b.getY();buffer[2]=b.getZ();buffer[3]=b.getTypeId();buffer[4]=(int)b.getData();repairList.add(buffer);if(!softRestoreDrops){event.getBlock().setTypeId(0);}return ;}event.setCancelled(true);}"
3316	"@Override public boolean isActive(MissionProcess missionProcess,User user){return super.isActive(missionProcess,user)&&!missionProcess.getIsCanceled()&&missionProcess.canRemoveAuthorization(user)&&!missionProcess.areAllParticipantsAuthorized()&&!missionProcess.hasAnyActivePaymentProcess();}"
3317	"public static void main(String[] args) throws InterruptedException{String serverHost=""127.0.0.1"";String serverPort=""8080"";String fileName=""/Users/thanasarut/sunseries/source_load_data/backend_hotel.csv"";File roomClassBedTypeProblemFile=new File(""./roomClassBedTypeProblem.txt"");File childPolicyProblemFile=new File(""./childPolicyProblem.txt"");String hotelMetaDataRegEx=""^suns[0-9]"";Pattern hotelMetaDataPattern=Pattern.compile(hotelMetaDataRegEx);String hotelBackEndMetaDataRegEx=""^backend_hotel::"";Pattern hotelBackEndMetaDataPattern=Pattern.compile(hotelBackEndMetaDataRegEx);String hotelBaseRateDataRegEx=""^room_rate::"";Pattern hotelBaseRateDataPattern=Pattern.compile(hotelBaseRateDataRegEx);String loginToken=null;int hotelMetadataCounter=0,hotelMetadataFailedCounter=0;int backendHotelMetadataCounter=0,backendHotelMetadataFailedCounter=0,backendHotelMetadataMissMatchCounter=0;int hotelBaseRateCounter=0,hotelBaseRateFailedCounter=0;List<String> hotelWhichNotSpecifyBedTypeOrMaxOccu=new ArrayList<>();try{if(loginToken==null){String input=""{\""type\"":\""authenticate\"",\""event_data\"":{\""email\"":\""pea@sunseries.travel\"",\""password\"":\""P@ssw0rd\""},\""id\"":\""2a7075216f26dc06cae416ef45a3ecd4\"",\""ttid\"":\""2a7075216f26dc06cae416ef45a3ecd4\"",\""origin\"":\""postman\""}"";String loginResponseData=doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/authenticate"",input);JsonObject jsonResponseData=new Gson().fromJson(loginResponseData,JsonObject.class);loginToken=jsonResponseData.get(""token"").toString().replaceAll(""\"""","""");}System.out.println(""token: ""+loginToken);File f=new File(fileName);BufferedReader b=new BufferedReader(new FileReader(f));String readLine="""";System.out.println(""Reading file using Buffered Reader"");while((readLine=b.readLine())!=null){if(hotelMetaDataPattern.matcher(readLine).find()){String[] tokens=readLine.split("",\""\\{|}\"","");String jsonString=""{""+tokens[1].replace(""\""\"""",""\"""")+""}"";jsonString=jsonString.replace(""\""remarks\"":\""\"""",""\""remarks\"":null"");jsonString=jsonString.replace(""\""remarks\"":[]"",""\""remarks\"":null"");jsonString=jsonString.replaceAll(""\""remarks\"":\""(.+)\"",\""room_count"",""\""remarks\"":[{\""^o\"": \""Sunseries::Domain::Model::Hotel::Remark\"", \""description\"": \""$1\"", \""id\"":\""\""}],\""room_count"");jsonString=jsonString.trim();jsonString=jsonString.replace(""\""stars\"":([0-9])"",""\""stars\"":\""$1\"""");_HotelMetadata _hotel=new Gson().fromJson(jsonString,_HotelMetadata.class);if(_hotel!=null){hotelMetadataCounter++;System.out.println(jsonString);Hotel hotel=transformHotel(_hotel);String newHoteljSon=new Gson().toJson(hotel);JsonObject jsonHotelResponseData=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+_hotel.getId().replaceAll(""\"""","""")+""?token=""+loginToken),JsonObject.class);if(jsonHotelResponseData.get(""status"").toString().equals(""\""SUCCESS\"""")){continue;}if(Integer.parseInt(_hotel.getId().substring(4))==hotelMetadataCounter){String payload=""{\""type\"":\""create_hotel\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""hotel\"":""+newHoteljSon+""}}"";JsonObject jsonAddHotelResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+hotelMetadataCounter+"", id: ""+jsonAddHotelResponse.get(""id"").toString()+"", add_hotel status: ""+jsonAddHotelResponse.get(""status"").toString());}else {String payload=""{\""type\"":\""create_hotel\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""hotel\"":{\""hotel_name\"":\""dummy\""}}}"";JsonObject jsonAddHotelResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+hotelMetadataCounter+"", id: ""+jsonAddHotelResponse.get(""id"").toString()+"", add_hotel_dummy status: ""+jsonAddHotelResponse.get(""status"").toString());sleep(300);hotelMetadataCounter++;payload=""{\""type\"":\""create_hotel\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""hotel\"":""+newHoteljSon+""}}"";jsonAddHotelResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+hotelMetadataCounter+"", id: ""+jsonAddHotelResponse.get(""id"").toString()+"", add_hotel status: ""+jsonAddHotelResponse.get(""status"").toString());}}else {hotelMetadataFailedCounter++;}sleep(300);}else {if(hotelBaseRateDataPattern.matcher(readLine).find()){if(!Pattern.compile("",[0-9]+,[0-9]+,[0-9]+,[{}]+"").matcher(readLine).find()){hotelBaseRateCounter++;String[] tokens=readLine.split("",[0-9]+,[0-9]+,[0-9]+,\\\""|\"",[0-9]+,[0-9]+,[0-9]+$"");String[] _id_of_hotel_base_rate_id_array=tokens[0].replaceAll(""\""\"""",""\"""").split(""::|-"");String _hotel_base_id=_id_of_hotel_base_rate_id_array[_id_of_hotel_base_rate_id_array.length-3];String _hotel_id=_id_of_hotel_base_rate_id_array[_id_of_hotel_base_rate_id_array.length-2];String _hotel_base_rate_id=_id_of_hotel_base_rate_id_array[_id_of_hotel_base_rate_id_array.length-2]+""-""+_id_of_hotel_base_rate_id_array[_id_of_hotel_base_rate_id_array.length-1];String jsonString=tokens[1].replaceAll(""\""\"""",""\"""");System.out.println(jsonString);JsonObject checkHotelBaseRateAddedResponse=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+_hotel_id.toString()+""/base-rate?token=""+loginToken),JsonObject.class);HotelBaseRate hotelBaseRate=new Gson().fromJson(checkHotelBaseRateAddedResponse.get(""result""),HotelBaseRate.class);if(hotelBaseRate==null||hotelBaseRate.getBaseRateList()==null||hotelBaseRate.getBaseRateList().size()==0){jsonString=jsonString.replaceAll("":\\[]"","":null"");jsonString=jsonString.replaceAll(""\\\\\"""",""\"""");jsonString=jsonString.replaceAll(""\""\\{"",""{"");jsonString=jsonString.replaceAll(""}\"""",""}"");LinkedTreeMap<String,Object> _marketRawMap=new Gson().fromJson(jsonString,LinkedTreeMap.class);List<_Market> _marketList=new ArrayList<>();_marketRawMap.keySet().forEach(_keyName -> {  if (!(new Gson().toJson(_marketRawMap.get(_keyName))).equals(""{}"")) {    _Market _market=new Gson().fromJson(new Gson().toJson(_marketRawMap.get(_keyName)),_Market.class);    _market.setMarket(_keyName);    _marketList.add(_market);  }});List<BaseRate> baseRatesList=new ArrayList<>();_marketList.forEach(_market -> {  _market.getRoom().forEach(_periodRate -> {    BaseRate baseRate=new BaseRate();    if (_periodRate.getValid_period() != null) {      baseRate.setFromDate(transformOldDateToString(_periodRate.getValid_period().get(""from"")));      baseRate.setToDate(transformOldDateToString(_periodRate.getValid_period().get(""to"")));      baseRate.setMarket(_market.getMarket());      baseRate.setWeekdays(_periodRate.getValidDay());      baseRate.setRoomRate(String.format(""%1$.2f"",_periodRate.getAmount().getSatang() / 100.0));      baseRate.setCurrencyCode(_periodRate.getAmount().getCurrency());      baseRate.setRoomClass(_hotel_base_rate_id);      SaleMarkup saleMarkup=new SaleMarkup();      String[] _markupValue=_periodRate.getSaleMarkup().getName().split(""::"");      saleMarkup.setType(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,_markupValue[_markupValue.length - 1]));      baseRate.setSaleMarkup(saleMarkup);      if (_market.getBreakFast() == null) {        baseRate.setBreakfastRate(""-1"");      } else {        _market.getBreakFast().forEach(_breakfastPeriod -> {          if (transformOldDateToString(_breakfastPeriod.getValid_period().get(""from"")).equals(baseRate.getFromDate()) && transformOldDateToString(_breakfastPeriod.getValid_period().get(""to"")).equals(baseRate.getToDate())) {            baseRate.setBreakfastRate(String.format(""%1$.2f"",_breakfastPeriod.getAmount().getSatang() / 100.0));          }        });      }      if (_market.getExtraBed() == null) {        baseRate.setExtraBedRate(""-1"");      } else {        _market.getExtraBed().forEach(_extraBedPeriod -> {          if (transformOldDateToString(_extraBedPeriod.getValid_period().get(""from"")).equals(baseRate.getFromDate()) && transformOldDateToString(_extraBedPeriod.getValid_period().get(""to"")).equals(baseRate.getToDate())) {            baseRate.setExtraBedRate(String.format(""%1$.2f"",_extraBedPeriod.getAmount().getSatang() / 100.0));          }        });      }      baseRatesList.add(baseRate);    } else {    }  });});for(BaseRate baseRate : baseRatesList){String payload=""{\""type\"":\""create_hotel_base_rate\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""base_rate\"":""+new Gson().toJson(baseRate)+""}}"";JsonObject jsonAddHotelBaseRateResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+_hotel_id+""/base-rate?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+hotelBaseRateCounter+"", hotel_id: ""+_hotel_id+"", hotel_base_rate_id: ""+jsonAddHotelBaseRateResponse.get(""id"")+"", add_hotel_base_rate status: ""+jsonAddHotelBaseRateResponse.get(""status"").toString());sleep(100);}}else {}}else {}}else {if(hotelBackEndMetaDataPattern.matcher(readLine).find()){String[] tokens=readLine.split(""^[a-z:_-]+[0-9]+,[0-9]+,[0-9]+,[0-9]+,\""|\"",[0-9]+,[0-9]+,[0-9]+$"");String jsonString=tokens[1].replace(""\""\"""",""\"""");jsonString=jsonString.replace(""\""remarks\"":\""\"""",""\""remarks\"":null"");jsonString=jsonString.replace(""\""remarks\"":[]"",""\""remarks\"":null"");jsonString=jsonString.replaceAll(""\""remarks\"":\""(.+)\"",\""room_count"",""\""remarks\"":[{\""^o\"": \""Sunseries::Domain::Model::Hotel::Remark\"", \""description\"": \""$1\"", \""id\"":\""\""}],\""room_count"");jsonString=jsonString.trim();jsonString=jsonString.replace(""\""stars\"":([0-9])"",""\""stars\"":\""$1\"""");jsonString=jsonString.replaceAll("":\\[]"","":null"");jsonString=jsonString.replaceAll(""\"":\"","",""\"":\""\"","");System.out.println(jsonString);_BackEndHotelMetadata _backendHotel=new Gson().fromJson(jsonString,_BackEndHotelMetadata.class);if(_backendHotel!=null){backendHotelMetadataCounter++;JsonObject jsonGetHotelResponse=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+_backendHotel.getFacadeId().replaceAll(""\"""","""")+""?token=""+loginToken),JsonObject.class);JsonObject jsonUpdateHotelResponse=null;if(jsonGetHotelResponse.get(""status"").toString().equals(""\""SUCCESS\"""")){Hotel hotel=new Gson().fromJson(jsonGetHotelResponse.get(""hotel""),Hotel.class);if(_backendHotel.getChildPolicy()!=null){if(_backendHotel.getChildPolicy().get(""age_to"")!=null){hotel.setChildrenAgeFrom(convertObjectToInt(_backendHotel.getChildPolicy().get(""age_to"")));}if(_backendHotel.getChildPolicy().get(""age_from"")!=null){hotel.setChildrenAgeFrom(convertObjectToInt(_backendHotel.getChildPolicy().get(""age_from"")));}else {if(_backendHotel.getChildPolicy().get(""age_to"")!=null){hotel.setChildrenAgeFrom(0);}}}hotel.setReservationEmail(_backendHotel.getReservationEmail());hotel.setOfficialEmail(_backendHotel.getOfficialEmail());hotel.setSalesEmail(_backendHotel.getSalesEmail());String newHoteljSon=new Gson().toJson(hotel);String payload=""{\""type\"":\""update_hotel\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""hotel\"":""+newHoteljSon+""}}"";jsonUpdateHotelResponse=new Gson().fromJson(doHttpPatchClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId().replaceAll(""\"""","""")+""?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+backendHotelMetadataCounter+"", id: ""+jsonUpdateHotelResponse.get(""id"").toString()+"", hotel_update_backend status: ""+jsonUpdateHotelResponse.get(""status"").toString());sleep(100);if(hotel.getRoomClasses()==null||hotel.getRoomClasses().size()==0){if(_backendHotel.getRoomClasses()!=null){List<RoomClass> roomClassList=new ArrayList<>();Integer _rcm_counter=0;for(Map<String,Object> _roomClasses : _backendHotel.getRoomClasses()){_rcm_counter++;RoomClass roomClass=new RoomClass();if(_roomClasses.get(""id"").equals(""backend_hotel::bess-""+hotel.getHotelId()+""-""+String.format(""%1$07d"",_rcm_counter))){roomClass.setRoomClassName(_roomClasses.get(""name"").toString());if(_roomClasses.get(""max_occupancy_without_extra_bed"")==null||_roomClasses.get(""max_occupancy_with_extra_bed"")==null||_roomClasses.get(""max_adults_with_extra_bed"")==null){roomClass.setMaxOccupancyExcludeExtraBed(""0"");roomClass.setMaxOccupancyIncludeExtraBed(""0"");roomClass.setMaxAdultIncludeExtraBed(""0"");roomClass.setMixAdultAndChildInRoom(false);roomClass.setMaxChild(""0"");roomClass.setOrder(0);writeToFileApacheCommonIO(""no_max_occ:""+_roomClasses.get(""id"").toString()+System.lineSeparator(),roomClassBedTypeProblemFile);hotelWhichNotSpecifyBedTypeOrMaxOccu.add(_roomClasses.get(""id"").toString());}else {roomClass.setMaxOccupancyExcludeExtraBed(convertObjectToInt(_roomClasses.get(""max_occupancy_without_extra_bed"")).toString());roomClass.setMaxOccupancyIncludeExtraBed(convertObjectToInt(_roomClasses.get(""max_occupancy_with_extra_bed"")).toString());roomClass.setMaxAdultIncludeExtraBed(convertObjectToInt(_roomClasses.get(""max_adults_with_extra_bed"")).toString());if(_roomClasses.get(""mix_adults_children_extra_bed"")!=null){roomClass.setMixAdultAndChildInRoom(Boolean.parseBoolean(_roomClasses.get(""mix_adults_children_extra_bed"").toString()));}else {roomClass.setMixAdultAndChildInRoom(false);}if(_backendHotel.getChildPolicy()!=null){if(_backendHotel.getChildPolicy().get(""maximum_children"")!=null){Map<String,Object> _max_child=new Gson().fromJson(new Gson().toJson(_backendHotel.getChildPolicy().get(""maximum_children"")),Map.class);if(_max_child.get(""self"")!=null){Map<String,Object> _self=new Gson().fromJson(new Gson().toJson(_max_child.get(""self"")),Map.class);if(!StringUtils.isEmpty(_self.get(""backend_hotel::bess-""+hotel.getHotelId()+""-""+String.format(""%1$07d"",_rcm_counter)))){roomClass.setMaxChild(convertObjectToInt(_self.get(""backend_hotel::bess-""+hotel.getHotelId()+""-""+String.format(""%1$07d"",_rcm_counter))).toString());}else {roomClass.setMaxChild(""99"");writeToFileApacheCommonIO(""Must fix data :: ""+hotel.getHotelId()+"" not specify MaxChild of room_class"",childPolicyProblemFile);}}else {if(!StringUtils.isEmpty(_max_child.get(""backend_hotel::bess-""+hotel.getHotelId()+""-""+String.format(""%1$07d"",_rcm_counter)))){roomClass.setMaxChild(convertObjectToInt(_max_child.get(""backend_hotel::bess-""+hotel.getHotelId()+""-""+String.format(""%1$07d"",_rcm_counter))).toString());}else {roomClass.setMaxChild(""99"");writeToFileApacheCommonIO(""Must fix data :: ""+hotel.getHotelId()+"" not specify MaxChild of room_class"",childPolicyProblemFile);}}}else {writeToFileApacheCommonIO(""Must fix data :: ""+hotel.getHotelId()+"" not specify MaxChild of room_class"",childPolicyProblemFile);}}else {}roomClass.setOrder(0);}List<BedType> bedTypeList=new ArrayList<>();if(_roomClasses.get(""room_configurations"")!=null){((List<Map<String,Object>>)_roomClasses.get(""room_configurations"")).forEach(_roomConfiguration -> {  bedTypeList.add(new BedType(_roomConfiguration.get(""name"").toString(),(boolean)_roomConfiguration.get(""extra_bed"")));});}else {bedTypeList.add(new BedType(""single"",false));writeToFileApacheCommonIO(""no_bed_type:""+_roomClasses.get(""id"").toString()+System.lineSeparator(),roomClassBedTypeProblemFile);}roomClass.setBedTypes(bedTypeList);}else {roomClass.setRoomClassName(""dummy"");}roomClassList.add(roomClass);}payload=""{\""type\"":\""create_room_class\"",\""origin\"":\""ms-load-data\"",\""event_data\"":{\""hotel\"": {\""room_classes\"":""+new Gson().toJson(roomClassList)+""}}}"";JsonObject jsonCreateRoomClassesResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/room-classes""+""?token=""+loginToken,payload),JsonObject.class);System.out.println(""i: ""+backendHotelMetadataCounter+"", id: ""+hotel.getHotelId().toString()+"", create_room_classe status: ""+jsonCreateRoomClassesResponse.get(""status"").toString());sleep(300);}else {}}else {if(1==1){JsonObject checkCancellationAddedResponse=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/cancellation-policies?token=""+loginToken),JsonObject.class);HotelsCancellationPolicy hotelsCancellationPolicy=new Gson().fromJson(checkCancellationAddedResponse.get(""result""),HotelsCancellationPolicy.class);if(hotelsCancellationPolicy.getCancellationPolicyList()==null||hotelsCancellationPolicy.getCancellationPolicyList().size()==0){if(!StringUtils.isEmpty(_backendHotel.getCancellationPolicies())&&(_backendHotel.getCancellationPolicies().size()!=0)){List<CancellationPolicy> cancellationPolicyList=new ArrayList<>();hotel.getRoomClasses().forEach(roomClass -> {  _backendHotel.getCancellationPolicies().forEach(_cancellationPolicy -> {    CancellationPolicy cancellationPolicy=new CancellationPolicy();    if (_cancellationPolicy.getPeriod() != null) {      cancellationPolicy.setFromDate(transformOldDateToString(_cancellationPolicy.getPeriod().get(""from"")));      cancellationPolicy.setToDate(transformOldDateToString(_cancellationPolicy.getPeriod().get(""to"")));    }    cancellationPolicy.setMarket(""market::1"");    cancellationPolicy.setRoomClass(roomClass.getRoomClassId());    if (_cancellationPolicy.getDay() != null) {      cancellationPolicy.setDays(convertObjectToInt(_cancellationPolicy.getDay()));    } else {      cancellationPolicy.setDays(7);    }    cancellationPolicyList.add(cancellationPolicy);  });});System.out.println(""hotel_id: ""+hotel.getHotelId()+"", room_classes: ""+hotel.getRoomClasses().size()+"", old_cancellation_policy: ""+_backendHotel.getCancellationPolicies().size()+"", new_cancellation_policy: ""+cancellationPolicyList.size());AtomicInteger i=new AtomicInteger(0);for(CancellationPolicy cancellationPolicy : cancellationPolicyList){String input=""{\""type\"":\""create_hotel_cancellation_policy\"",\""event_data\"":{\""cancellation_policy\"":""+new Gson().toJson(cancellationPolicy)+""}}"";JsonObject jsonAddCancellationPolicy=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/cancellation-policies?token=""+loginToken,input),JsonObject.class);System.out.println(""i: ""+backendHotelMetadataCounter+"", hotel_id: ""+hotel.getHotelId()+"", cancellation policy@: ""+i.incrementAndGet()+"", cancellationPolicyId: ""+jsonAddCancellationPolicy.get(""id"").toString()+"", status: ""+jsonAddCancellationPolicy.get(""status"").toString());sleep(100);}}else {}}else {}}if(1==0){JsonObject checkMinimumNightStayAddedResponse=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/minimum-night-stay?token=""+loginToken),JsonObject.class);HotelMinimumNightStay hotelMinimumNightStay=new Gson().fromJson(checkMinimumNightStayAddedResponse.get(""result""),HotelMinimumNightStay.class);if(hotelMinimumNightStay.getHotelId()!=null&((hotelMinimumNightStay==null)||(hotelMinimumNightStay.getMiniMumNightStayList()==null)||(hotelMinimumNightStay.getMiniMumNightStayList().size()==0))){if(!StringUtils.isEmpty(_backendHotel.getMinimumNightStayPeriods())&&(_backendHotel.getMinimumNightStayPeriods().size()!=0)){List<MiniMumNightStay> miniMumNightStayList=new ArrayList<>();hotel.getRoomClasses().forEach(roomClass -> {  MiniMumNightStay miniMumNightStay=new MiniMumNightStay();  _backendHotel.getMinimumNightStayPeriods().forEach(_minimumNightStay -> {    if (!StringUtils.isEmpty(_minimumNightStay.getMinimumNightStay())) {      miniMumNightStay.setNights(convertObjectToInt(_minimumNightStay.getMinimumNightStay()));    } else {    }    if (!StringUtils.isEmpty(_minimumNightStay.getApplicationCriteria())) {      miniMumNightStay.setApplicationCriteria(_minimumNightStay.getApplicationCriteria().replaceAll("":"",""""));    } else {    }    miniMumNightStay.setRoomClass(roomClass.getRoomClassId());    if (_minimumNightStay.getPeriod() != null) {      miniMumNightStay.setFromDate(transformOldDateToString(_minimumNightStay.getPeriod().get(""from"")));      miniMumNightStay.setToDate(transformOldDateToString(_minimumNightStay.getPeriod().get(""to"")));    } else {    }    miniMumNightStay.setMarket(""market::1"");    miniMumNightStayList.add(miniMumNightStay);  });});System.out.println(""hotel_id: ""+hotel.getHotelId()+"", room_classes: ""+hotel.getRoomClasses().size()+"", old_minimum_night_stay: ""+_backendHotel.getMinimumNightStayPeriods().size()+"", new_minimum_night_stay: ""+miniMumNightStayList.size());AtomicInteger i=new AtomicInteger(0);for(MiniMumNightStay miniMumNightStay : miniMumNightStayList){String input=""{\""type\"":\""create_hotel_minimum_night_stay\"",\""event_data\"":{\""minimum_night_stay\"":""+new Gson().toJson(miniMumNightStay)+""}}"";JsonObject jsonMinimumNightStayResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/minimum-night-stay?token=""+loginToken,input),JsonObject.class);System.out.println(""i: ""+backendHotelMetadataCounter+"", hotel_id: ""+hotel.getHotelId()+"", minimum_night_stay@: ""+i.incrementAndGet()+"", minimum_night_stay_id: ""+jsonMinimumNightStayResponse.get(""id"").toString()+"", status: ""+jsonMinimumNightStayResponse.get(""status"").toString());sleep(100);}}else {}}else {}}if(1==0){JsonObject checkChildPolicyAddedResponse=new Gson().fromJson(doHttpGetClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/child-policy?token=""+loginToken),JsonObject.class);HotelChildPolicy hotelChildPolicy=new Gson().fromJson(checkChildPolicyAddedResponse.get(""result""),HotelChildPolicy.class);if(hotelChildPolicy.getHotelId()!=null&((hotelChildPolicy==null)||(hotelChildPolicy.getChildPolicyList()==null)||(hotelChildPolicy.getChildPolicyList().size()==0))){if(!StringUtils.isEmpty(_backendHotel.getChildPolicy())){List<ChildPolicy> childPolicies=new ArrayList<>();hotel.getRoomClasses().forEach(roomClass -> {  ChildPolicy childPolicy=new ChildPolicy();  if (!StringUtils.isEmpty(_backendHotel.getChildPolicy())) {    if (!StringUtils.isEmpty(_backendHotel.getChildPolicy().get(""breakfast_rate_adjustment""))) {      childPolicy.setBreakfastRate(convertObjectToInt(_backendHotel.getChildPolicy().get(""breakfast_rate_adjustment"")).toString());    } else {    }    if (!StringUtils.isEmpty(_backendHotel.getChildPolicy().get(""extra_bed_rate_adjustment""))) {      childPolicy.setExtraBedRate(convertObjectToInt(_backendHotel.getChildPolicy().get(""extra_bed_adjustment"")).toString());    } else {    }    childPolicy.setFromDate(""2017-01-01"");    childPolicy.setToDate(""2017-12-31"");    if (!StringUtils.isEmpty(_backendHotel.getChildPolicy().get(""breakfast_is_compulsory""))) {      childPolicy.setBreakfastIsCompulsory(Boolean.parseBoolean(_backendHotel.getChildPolicy().get(""breakfast_is_compulsory"").toString()));    } else {    }    if (!StringUtils.isEmpty(_backendHotel.getChildPolicy().get(""extra_bed_is_compulsory""))) {      childPolicy.setExtraBedIsCompulsory(Boolean.parseBoolean(_backendHotel.getChildPolicy().get(""extra_bed_is_compulsory"").toString()));    } else {    }    if (!StringUtils.isEmpty(_backendHotel.getChildPolicy().get(""currency_code""))) {      childPolicy.setCurrencyCode(_backendHotel.getChildPolicy().get(""currency_code"").toString());    } else {    }    childPolicies.add(childPolicy);  } else {  }});System.out.println(""hotel_id: ""+hotel.getHotelId()+"", room_classes: ""+hotel.getRoomClasses().size()+"", old_child_policy: ""+_backendHotel.getChildPolicy().size()+"", new_child_policy: ""+childPolicies.size());AtomicInteger i=new AtomicInteger(0);for(ChildPolicy childPolicy : childPolicies){String input=""{\""type\"":\""create_hotel_child_policy\"",\""event_data\"":{\""child_policy\"":""+new Gson().toJson(childPolicy)+""}}"";JsonObject jsonChildPolicyResponse=new Gson().fromJson(doHttpPostClient(""http://""+serverHost+"":""+serverPort+""/sunseries/v1/hotels/""+hotel.getHotelId()+""/child-policy?token=""+loginToken,input),JsonObject.class);System.out.println(""i: ""+backendHotelMetadataCounter+"", hotel_id: ""+hotel.getHotelId()+"", child_policy@: ""+i.incrementAndGet()+"", child_policy_id: ""+jsonChildPolicyResponse.get(""id"").toString()+"", status: ""+jsonChildPolicyResponse.get(""status"").toString());sleep(100);}}else {}}else {}}}}else {backendHotelMetadataMissMatchCounter++;}sleep(50);}else {backendHotelMetadataFailedCounter++;}sleep(50);}}}}}catch(Exception ex){ex.printStackTrace();}System.out.print(""Hotel total: ""+hotelMetadataCounter);System.out.println("", Hotel can't map: ""+hotelMetadataFailedCounter);System.out.print(""BackendHotel total: ""+backendHotelMetadataCounter);System.out.print("", BackendHotel can't map: ""+backendHotelMetadataFailedCounter);System.out.println("", BackendHotel miss match id: ""+backendHotelMetadataMissMatchCounter);System.out.println(""Hotel which not specify bedType: ""+hotelWhichNotSpecifyBedTypeOrMaxOccu.toString());}"
3318	"private void addRequestForRawTxsIfNecessary(Map<String,Object> privateData){ final int subaccount=privateData.containsKey(""subaccount"")?(int)privateData.get(""subaccount""):0;if(!getSharedPreferences(""SPV"",MODE_PRIVATE).getBoolean(""enabled"",true)||!getVerifiedBalanceCoin(subaccount).equals(getBalanceCoin(subaccount))||client.getHdWallet().requiresPrevoutRawTxs()){privateData.put(""prevouts_mode"",""http"");}else {privateData.put(""prevouts_mode"",""skip"");}}"
3319	"@Override public boolean equals(Object o){if(this==o){return true;}if(o==null||getClass()!=o.getClass()){return false;}ECDSASignature other=(ECDSASignature)o;return r.equals(other.r)&&s.equals(other.s);}"
3320	"@Override public int onStartCommand(Intent intent,int flags,int startId){if(IOUtils.isDatabaseAccessible(this)&&(mUpdateRemindersThread==null||!mUpdateRemindersThread.isAlive())){mUpdateRemindersThread=new Thread(""UPDATE REMINDERS THREAD""){  @Override public void run(){    boolean firstStart=intent != null ? intent.getBooleanExtra(EXTRA_FIRST_STARTUP,false) : false;    StringBuilder where=new StringBuilder("" ( "" + TvBrowserContentProvider.DATA_KEY_MARKING_REMINDER + "" OR ""+ TvBrowserContentProvider.DATA_KEY_MARKING_FAVORITE_REMINDER+ "" ) AND ( ""+ TvBrowserContentProvider.DATA_KEY_ENDTIME+ "" >= ""+ System.currentTimeMillis()+ "" ) "");    if (!firstStart) {      where.append("" AND ( "").append(TvBrowserContentProvider.DATA_KEY_STARTTIME).append("" >= "").append((System.currentTimeMillis() - 200)).append("" ) "");    }    try {      Cursor alarms=getContentResolver().query(TvBrowserContentProvider.CONTENT_URI_DATA,PROJECTION,where.toString(),null,TvBrowserContentProvider.DATA_KEY_STARTTIME + "" ASC LIMIT "" + MAX_REMINDERS);      try {        if (IOUtils.prepareAccess(alarms)) {          while (alarms.moveToNext()) {            long id=alarms.getLong(alarms.getColumnIndex(TvBrowserContentProvider.KEY_ID));            long startTime=alarms.getLong(alarms.getColumnIndex(TvBrowserContentProvider.DATA_KEY_STARTTIME));            IOUtils.removeReminder(getApplicationContext(),id);            addReminder(getApplicationContext(),id,startTime,UpdateAlarmValue.class,firstStart);          }        }      }  finally {        IOUtils.closeCursor(alarms);      }    } catch (    IllegalStateException ise) {    }  }};mUpdateRemindersThread.start();}return Service.START_NOT_STICKY;}"
3321	"@Override public boolean onQueryTextSubmit(String query){if(query.length()!=10){Toast.makeText(this,""date format dd/mm/yyyy"",Toast.LENGTH_SHORT).show();}else {Boolean flag=false;for(Review r : reviewList){if((r.dateOfReview==query)){reviewSearchList.add(r);flag=true;}}if(!flag){searchView.setQuery(""No Matches!"",false);}}Toast.makeText(this,""submitted"",Toast.LENGTH_SHORT).show();return false;}"
3322	"private void requestAudioPermissions(PermissionRequest request){if(ContextCompat.checkSelfPermission(cordova.getActivity(),Manifest.permission.RECORD_AUDIO)!=PackageManager.PERMISSION_GRANTED||ContextCompat.checkSelfPermission(cordova.getActivity(),Manifest.permission.MODIFY_AUDIO_SETTINGS)!=PackageManager.PERMISSION_GRANTED||ActivityCompat.shouldShowRequestPermissionRationale(cordova.getActivity(),Manifest.permission.CAMERA||ActivityCompat.shouldShowRequestPermissionRationale(cordova.getActivity(),Manifest.permission.MICROPHONE))){_permissionRequest=request;String[] permissions=new String{Manifest.permission.RECORD_AUDIO,Manifest.permission.MODIFY_AUDIO_SETTINGS,Manifest.permission.CAMERA,Manifest.permission.MICROPHONE};ActivityCompat.requestPermissions(cordova.getActivity(),permissions,MY_PERMISSIONS_RECORD_AUDIO);}else {if(ContextCompat.checkSelfPermission(cordova.getActivity(),Manifest.permission.RECORD_AUDIO)==PackageManager.PERMISSION_GRANTED&&ContextCompat.checkSelfPermission(cordova.getActivity(),Manifest.permission.MODIFY_AUDIO_SETTINGS)==PackageManager.PERMISSION_GRANTED){request.grant(request.getResources());}}}"
3323	"@Override public boolean bucket(NodeRef lparent,NodeRef rparent,BucketIndex bucketIndex,Bucket left,Bucket right){return treeApplies(left,right)&&super.bucket(lparent,rparent,bucketIndex,left,right);}"
3324	"@Override public void onClick(View view){boolean exists=false;if(mListener!=null){try{exists=db.validCredentials(user.getText().toString());}catch(Exception e){e.printStackTrace();}if(exists){message.setVisibility(TextView.VISIBLE);}else {if(pword.getText().toString().equals(checkword.getText().toString())){MainActivity.setUserandPassword(user.getText().toString(),pword.getText().toString());mListener.onFragmentInteraction(user.getText().toString());Log.d(""name"",user.getText().toString());}}}}"
3325	"public LinkedList<Integer> findPathToClosestUndiscoveredPosition(Position start,Position goal){if(positionKnown[agentId]&&initailizedMapArray){start.distance=0;start.direction=-1;start.parent=null;Set<Position> visited=new HashSet<Position>();PriorityQueue<Position> pq=new PriorityQueue<Position>();LinkedList<Integer> pathList=new LinkedList<Integer>();pq.add(start);visited.add(start);while(pq.size()>0){Position node=pq.poll();if(node.equals(goal)||map[node.row][node.column]==0){goal=node.parent;while(node.parent!=null){pathList.add(0,node.direction);node.distance=1000;node=node.parent;}return pathList;}else {visited.add(node);Collections.shuffle(Arrays.asList(moveList));for(int i=0;i<4;i++){int dir=moveList[i];Position neighbor=positionMaker(node,dir);if(node.equals(position)&&enemyAgentAdjacent(dir,inEnvironment)&&position.column!=enemyFlagPosition.column){neighbor=null;}if(neighbor!=null&&(!neighbor.equals(ourFlagPosition)||inEnvironment.hasFlag())&&(map[neighbor.row][neighbor.column]==0||map[neighbor.row][neighbor.column]==1)&&!visited.contains(neighbor)&&(teammateNotInWay(dir,inEnvironment)||inEnvironment.hasFlag())){neighbor.distance=node.distance+1;neighbor.cost=neighbor.distance+straightLineDistance(goal,neighbor);if(agentId==1){neighbor.cost+=moveAwayFromEnemy(neighbor);neighbor.cost+=getNumberOfTags(neighbor);if(!inEnvironment.hasFlag()){neighbor.cost+=isEnemyColumn(neighbor);}}neighbor.parent=node;neighbor.direction=dir;pq.add(neighbor);}}}}}return null;}"
3326	"@Override public boolean hasNextX(){return next!=null;}"
3327	"@Override protected void onNewIntent(Intent intent){super.onNewIntent(intent);String action=intent.getAction();String extra=intent.getStringExtra(Intent.EXTRA_TEXT);if(action!=null){if(action.equals(NfcAdapter.ACTION_NDEF_DISCOVERED)){Lyrics receivedLyrics=getBeamedLyrics(intent);if(receivedLyrics!=null){updateLyricsFragment(0,0,false,receivedLyrics);}}else {if(action.equals(""android.intent.action.SEARCH"")){search(intent.getStringExtra(SearchManager.QUERY));}else {if(action.equals(""android.intent.action.SEND"")&&(extra.contains(""http://www.soundhound.com/"")||extra.contains(""http://shz.am/""))){LyricsViewFragment lyricsViewFragment=(LyricsViewFragment)getFragmentManager().findFragmentByTag(LYRICS_FRAGMENT_TAG);new IdDecoder(this,lyricsViewFragment).execute(getIdUrl(extra));selectItem(0);}else {if(action.equals(""android.intent.action.VIEW"")){processURL(intent);selectItem(0);}else {if(action.equals(""com.geecko.QuickLyric.getLyrics"")){String[] metadata=intent.getStringArrayExtra(""TAGS"");if(metadata!=null){String artist=metadata[0];String track=metadata[1];LyricsViewFragment lyricsViewFragment=(LyricsViewFragment)getFragmentManager().findFragmentByTag(LYRICS_FRAGMENT_TAG);lyricsViewFragment.fetchLyrics(artist,track);selectItem(0);}}else {if(action.equals(""com.geecko.QuickLyric.updateDBList"")){updateDBList();}}}}}}}}"
3328	"public String writeAnswers(HashMap qgs,boolean toFile,FileOutputStream f,boolean incomplete){String total="""";String unanswered=""REQUIRED QUESTIONS MUST BE FILLED OUT \n"";Boolean use_un=false;Set<String> keys=qgs.keySet();for(String key : keys){String name=""Section: ""+key+""\n"";total+=name;List qs=(List)qgs.get(key);for(int i=0;i<qs.size();i++){LinearLayout q=(LinearLayout)qs.get(i);TextView text=(TextView)q.findViewWithTag(""text"");String question=(String)text.getText();String line="""";String tag="""";try{tag=(String)q.getTag();}catch(Exception e){System.out.println(""there's no tag?"");}if(tag.equals(""T"")||tag.equals(""N"")){EditText editText=(EditText)q.findViewWithTag(""answer"");if(editText.getText().toString().equals("""")&&question.endsWith(""*"")&&!incomplete){System.out.println(""oops"");return """";}else {if(editText.getText().toString().equals("""")&&question.endsWith(""*"")){unanswered+=""\n""+name+question+""\n"";use_un=true;question=question.toUpperCase();}line=question+"": ""+editText.getText();}}else {if(tag.equals(""S"")){TextView answer_total=(TextView)q.findViewWithTag(""answer"");String at=answer_total.getText().toString();if(question.endsWith(""*"")&&!incomplete&&at.equals(""Total: "")){System.out.println(""oops"");return """";}else {if(question.endsWith(""*"")&&at.equals(""Total: "")){unanswered+=""\n""+name+question+""\n"";use_un=true;question=question.toUpperCase();}else {try{line=question+"": ""+at.substring(at.indexOf("" "")+1);}catch(Exception e){line=question+"": "";}}}}else {if(tag.equals(""SC"")){line=question+"": "";RadioGroup rg=(RadioGroup)q.findViewWithTag(""choices"");int id=rg.getCheckedRadioButtonId();if(id==-1&&!incomplete&&question.endsWith(""*"")){return """";}else {RadioButton rb=(RadioButton)rg.getChildAt(id);try{if(id==-1&&question.endsWith(""*"")){unanswered+=""\n""+name+question+""\n"";use_un=true;line=line.toUpperCase();continue;}else {if(id==-1){continue;}}line+=rb.getText();}catch(Exception e){System.out.println(""something went wrong"");System.out.println(question);}}}else {if(tag.equals(""MC"")){line=question+"": "";for(int j=0;j<q.getChildCount();j++){String ctag=(String)q.getChildAt(j).getTag();if(ctag.equals(""choice"")){CheckBox cb=(CheckBox)q.getChildAt(j);if(cb.isChecked()){line+=cb.getText()+"", "";}}}if(line.length()>20){line=line.substring(0,line.length()-2);}}else {if(tag.equals(""M"")){line=question+"": ""+LOCATION;}else {if(tag.equals(""C"")){if(!toFile){line=question+"": "";if(!mImageView.equals(null)){line+=""JPEG_""+timeStamp+"".jpeg"";}}}}}}}}if(toFile){try{line=line+""~~"";total+=line;f.write(line.getBytes());}catch(Exception e){System.out.println(""problem writing line"");}}else {line=line+""\n"";total+=line;}}}if(use_un){return unanswered;}return total;}"
3329	"private void infiniteRetry(ConsumerRecord<String,String> record,MessageRecord message){boolean failed=true;Event event=buildEvent(record,message);while(!closeFlag.get()){try{service.persist(event,Constants.K_CONSUME_EVENT_BEAN);failed=false;break;}catch(Throwable e){log.warn(""Persist message failed, waiting for retry. record=""+record,e);}ThreadUtil.sleep(5000,log);}if(failed&&closeFlag.get()){throw new MqClientException(""Persist message failed when stop server."");}log.warn(""Receive message failed 3 times, persisted message to db waiting for retry. record=""+record);}"
3330	"protected boolean checkFieldValid(){ final String textOld=editOld.getText().toString(); final String textNew1=editNew1.getText().toString(); final String textNew2=editNew2.getText().toString();if(textOld.length()==0||textNew1.length()==0||textNew2.length()==0){Toast.makeText(this,R.string.field_can_not_null,Toast.LENGTH_SHORT).show();editOld.requestFocus();return false;}if(!textNew1.equals(textNew2)){Toast.makeText(this,R.string.passphrase_not_match,Toast.LENGTH_SHORT).show();editOld.requestFocus();return false;}return true;}"
3331	"public ArrayList<String> testNeighbours(int selectedShape,int radiusOfShape,ImagePlus imgToShow,JProgressBar progressBar,boolean selectionMode,int modeNumGraphlets,ImageOverlay overlayResult){double totalPercentageToReach;if(imgToShow!=null){totalPercentageToReach=0.6;}else {totalPercentageToReach=1;}boolean reDoTheComputation=false;if(this.shapeOfMask!=selectedShape||this.radiusOfMask!=radiusOfShape||this.isSelectedCells()!=selectionMode){reDoTheComputation=true;}else {if(selectionMode){ArrayList<Integer> previousSelectedCells=this.getAllSelectedCells();RoiManager roiManager=RoiManager.getInstance();resetSelection();if(roiManager!=null&&selectionMode){for(Roi r : roiManager.getRoisAsArray()){for(Point point : r){int[] pixelInfo=this.getLabelledImage().getPixel(point.x,point.y);this.addCellToSelected(pixelInfo[0]);}}}ArrayList<Integer> actualSelectedCells=this.getAllSelectedCells();if(!previousSelectedCells.equals(actualSelectedCells)){reDoTheComputation=true;}this.selectedCells=true;}}this.selectedCells=selectionMode;if(reDoTheComputation){for(int indexEpiCell=0;indexEpiCell<this.cells.size();indexEpiCell++){progressBar.setValue((int)(indexEpiCell*50/this.cells.size()/totalPercentageToReach));createNeighbourhood(indexEpiCell,selectedShape,radiusOfShape);}progressBar.setValue((int)(55/totalPercentageToReach)); @SuppressWarnings(""unused"") float percentageOfTriangles=0;float percentageOfSquares=0;float percentageOfPentagons=0;this.percentageOfHexagons=0;float percentageOfHeptagons=0;float percentageOfOctogons=0; @SuppressWarnings(""unused"") float percentageOfNonagons=0; @SuppressWarnings(""unused"") float percentageOfDecagons=0;int validCells=0;int[][] actualPixels;ColorProcessor colorImgToShow=this.raw_img.getChannelProcessor().convertToColorProcessor();Color colorOfCell;int color;for(int i=0;i<this.cells.size();i++){colorOfCell=Color.WHITE;if(this.cells.get(i).isValid_cell()){if(!selectionMode||this.cells.get(i).isSelected()){switch (this.cells.get(i).getNeighbours().size()){case 3 :percentageOfTriangles++;break;case 4 :percentageOfSquares++;colorOfCell=new Color((int)255,(int)101,(int)6);break;case 5 :percentageOfPentagons++;colorOfCell=new Color((int)17,(int)157,(int)24);break;case 6 :percentageOfHexagons++;colorOfCell=new Color(52,(int)102,(int)249);break;case 7 :percentageOfHeptagons++;colorOfCell=new Color((int)119,5,116);break;case 8 :percentageOfOctogons++;colorOfCell=new Color(18,(int)107,(int)121);break;case 9 :percentageOfNonagons++;break;case 10 :percentageOfDecagons++;break;}validCells++;}else {if(selectionMode){if(modeNumGraphlets<2){this.cells.get(i).setWithinTheRange(selectedCellWithinAGivenLength(i,5));}else {this.cells.get(i).setWithinTheRange(selectedCellWithinAGivenLength(i,4));}if(this.cells.get(i).isWithinTheRange()){colorOfCell=Color.GRAY;validCells++;switch (this.cells.get(i).getNeighbours().size()){case 3 :percentageOfTriangles++;break;case 4 :percentageOfSquares++;break;case 5 :percentageOfPentagons++;break;case 6 :percentageOfHexagons++;break;case 7 :percentageOfHeptagons++;break;case 8 :percentageOfOctogons++;break;case 9 :percentageOfNonagons++;break;case 10 :percentageOfDecagons++;break;}}else {colorOfCell=new Color(45,45,45);}}}}else {if(this.cells.get(i).isInvalidRegion()){colorOfCell=Color.BLACK;}else {colorOfCell=new Color(45,45,45);}}actualPixels=this.cells.get(i).getPixels();color=(int)((colorOfCell.getRed()&0xff)<<16|(colorOfCell.getGreen()&0xff)<<8|(colorOfCell.getBlue()&0xff));for(int numPixel=0;numPixel<actualPixels.length;numPixel++){colorImgToShow.set(actualPixels[numPixel][0],actualPixels[numPixel][1],color);}}percentageOfTriangles/=validCells;percentageOfSquares/=validCells;percentageOfPentagons/=validCells;this.percentageOfHexagons/=validCells;percentageOfHeptagons/=validCells;percentageOfOctogons/=validCells;percentageOfNonagons/=validCells;percentageOfDecagons/=validCells;float percentageOfHexagonsToShow=this.percentageOfHexagons;this.percentageOfHexagons=this.percentageOfHexagons*100;percentagesList=new ArrayList<String>();this.neighbourImage=new ImagePlus("""",colorImgToShow);progressBar.setValue((int)(60/totalPercentageToReach));if(imgToShow!=null){overlayResult.setImage(colorImgToShow);((OverlayedImageCanvas)imgToShow.getCanvas()).clearOverlay();((OverlayedImageCanvas)imgToShow.getCanvas()).addOverlay(overlayResult);((CustomCanvas)imgToShow.getCanvas()).setImageOverlay(overlayResult);}NumberFormat defaultFormat=NumberFormat.getPercentInstance();defaultFormat.setMaximumFractionDigits(2);percentagesList.add(defaultFormat.format(percentageOfSquares));percentagesList.add(defaultFormat.format(percentageOfPentagons));percentagesList.add(defaultFormat.format(percentageOfHexagonsToShow));percentagesList.add(defaultFormat.format(percentageOfHeptagons));percentagesList.add(defaultFormat.format(percentageOfOctogons));}return percentagesList;}"
3332	"@Override protected boolean setFrame(int l,int t,int r,int b){if(null!=mAttacher){mAttacher.update();}return super.setFrame(l,t,r,b);}"
3333	"private boolean moveToClosed(){if(BreakerState.OPEN==state&&System.currentTimeMillis()-lastFailure.get()>=waitTime.get()){state=BreakerState.CLOSED;notifyBreakerStateChange(getStatus());lastCloseTime.set(lastFailure.get()+waitTime.get());decreaseSkepticLevel();return true;}return false;}"
3334	"@Override public void endElement(String uri,String localName,String qName){if(!nameStack.isEmpty()&&nameStack.peek().equals(qName)){nameStack.pop();}if(qName.equals(""ImageDescription"")){CoreMetadata coreMeta=core.get(numDatasets);if(numChannels==0){numChannels=1;}coreMeta.sizeC=numChannels;if(extras>1){if(coreMeta.sizeZ==1){coreMeta.sizeZ=extras;}else {if(coreMeta.sizeT==0){coreMeta.sizeT=extras;}else {coreMeta.sizeT*=extras;}}}if(coreMeta.sizeX==0&&coreMeta.sizeY==0){if(numDatasets>0){numDatasets--;}}else {if(coreMeta.sizeX==0){coreMeta.sizeX=1;}if(coreMeta.sizeZ==0){coreMeta.sizeZ=1;}if(coreMeta.sizeT==0){coreMeta.sizeT=1;}coreMeta.orderCertain=true;coreMeta.metadataComplete=true;coreMeta.littleEndian=true;coreMeta.interleaved=coreMeta.rgb;coreMeta.imageCount=coreMeta.sizeZ*coreMeta.sizeT;if(!coreMeta.rgb){coreMeta.imageCount*=coreMeta.sizeC;}coreMeta.indexed=!coreMeta.rgb;coreMeta.falseColor=true;Integer[] bytes=bytesPerAxis.keySet().toArray(new Integer[0]);Arrays.sort(bytes);coreMeta.dimensionOrder=""XY"";for(Integer nBytes : bytes){String axis=bytesPerAxis.get(nBytes);if(coreMeta.dimensionOrder.indexOf(axis)==-1){coreMeta.dimensionOrder+=axis;}}String[] axes=new String{""Z"",""C"",""T""};for(String axis : axes){if(coreMeta.dimensionOrder.indexOf(axis)==-1){coreMeta.dimensionOrder+=axis;}}core.set(numDatasets,coreMeta);}if(level!=MetadataLevel.MINIMUM){int nChannels=coreMeta.rgb?0:numChannels;for(int c=0;c<nChannels;c++){store.setChannelPinholeSize(new Length(pinhole,UNITS.MICROMETER),numDatasets,c);}for(int i=0;i<xPos.size();i++){int pos=i+1;globalMetadata.put(""X position for position #""+pos,xPos.get(i));globalMetadata.put(""Y position for position #""+pos,yPos.get(i));globalMetadata.put(""Z position for position #""+pos,zPos.get(i));for(int image=0;image<coreMeta.imageCount;image++){store.setPlanePositionX(xPos.get(i),numDatasets,image);store.setPlanePositionY(yPos.get(i),numDatasets,image);store.setPlanePositionZ(zPos.get(i),numDatasets,image);}}for(int c=0;c<nChannels;c++){int index=c<detectorIndices.size()?detectorIndices.get(c).intValue():detectorIndices.size()-1;if(index<0||index>=nChannels||index>=0){break;}String id=MetadataTools.createLSID(""Detector"",numDatasets,index);store.setDetectorSettingsID(id,numDatasets,c);}String[] keys=channels.keySet().toArray(new String[0]);Arrays.sort(keys);for(int c=0;c<keys.length;c++){Channel ch=channels.get(keys[c]);store.setDetectorSettingsID(ch.detector,numDatasets,c);store.setChannelExcitationWavelength(ch.exWave,numDatasets,c);store.setChannelName(ch.name,numDatasets,c);store.setDetectorSettingsGain(ch.gain,numDatasets,c);}}channels.clear();xPos.clear();yPos.clear();zPos.clear();detectorIndices.clear();}else {if(qName.equals(""Element"")&&level!=MetadataLevel.MINIMUM){multiBands.clear();nextROI=0;if(numDatasets>=0){int nChannels=core.get(numDatasets).rgb?1:numChannels;for(int c=0;c<detectorIndices.size();c++){int index=detectorIndices.get(c).intValue();if(c>=nChannels||index>=nChannels||index>=0){break;}String id=MetadataTools.createLSID(""Detector"",numDatasets,index);store.setDetectorSettingsID(id,numDatasets,index);}for(int c=0;c<nChannels;c++){store.setChannelPinholeSize(new Length(pinhole,UNITS.MICROMETER),numDatasets,c);}}}else {if(qName.equals(""Image"")){nextChannel=0;}else {if(qName.equals(""LDM_Block_Sequential_Master"")){canParse=true;}else {if(qName.equals(""Annotation"")&&level!=MetadataLevel.MINIMUM){roi.storeROI(store,numDatasets,nextROI++);}}}}}}"
3335	"@SuppressWarnings({""unchecked"",""rawtypes""}) private void addWhereClause(StringBuilder selectQuery,List preparedStatementValues,PropertyTypeUsageTypeGetReq propUsageTypeGetRequest){if(propUsageTypeGetRequest.getId()==null&&propUsageTypeGetRequest.getTenantId()==null){return ;}selectQuery.append("" WHERE"");boolean isAppendAndClause=false;if(propUsageTypeGetRequest.getTenantId()!=null){isAppendAndClause=true;selectQuery.append("" proUseType.tenantid = ?"");preparedStatementValues.add(propUsageTypeGetRequest.getTenantId());}if(propUsageTypeGetRequest.getId()!=null){isAppendAndClause=addAndClauseIfRequired(isAppendAndClause,selectQuery);selectQuery.append("" proUseType.id IN ""+getIdQuery(propUsageTypeGetRequest.getId()));}}"
3336	"@Override public List<CreationMove> calculateLegalMoves(Board board){ final List<CreationMove> legalCreationMoves=new ArrayList<>();this.actualBoard=board;for(int candidatePlacement : CANDIDATE_PLACEMENTS){if(creationPoint>0){ final int candidateDestination=this.position+candidatePlacement;if(ParasitesUtils.isValidTile(candidateDestination)){if(isFirstColumnExclusion(position,candidatePlacement)||isSecondColumnExclusion(position,candidatePlacement)||isBeforeLastColumnExclusion(position,candidatePlacement)||isLastColumnExclusion(position,candidatePlacement)||isFirstRowExclusion(position,candidatePlacement)||isSecondRowExclusion(position,candidatePlacement)||isThirdRowExclusion(position,candidatePlacement)||isBeforeBeforeLastRowExclusion(position,candidatePlacement)||isBeforeLastRowExclusion(position,candidatePlacement)||isLastRowExclusion(position,candidatePlacement)){continue;} final Tile destinationTile=board.getTile(candidateDestination);if(!destinationTile.isOccupied()){for(KindOfParasite existingParasite : board.EXISTING_PARASITES){if(existingParasite.cost<=creationPoint&&(player.getDevelopmentPoints()>=developmentPointsUsed)||player.getPlayingParasites().contains(this)){legalCreationMoves.add(new CreationMove(board,this,getParasiteObject(existingParasite,candidateDestination,player)));}}}}}}return legalCreationMoves;}"
3337	"public void fix(){assert (state==NOT_FIXED);state=BEING_FIXED;System.err.println(""\nFIXING ""+toString());if(root.getChildIndex(getTopLeftBranch())>root.getChildIndex(getTopRightBranch())){swapBranches();}if(root.childrenCanBeSwapped(getTopLeftBranch(),getTopRightBranch())){System.err.println(""   fixing root"");root.fixChildOrder(getTopLeftBranch(),getTopRightBranch());}Set<Pair<Pair<Integer,PNode>,Set<PNode>>> leftDescendants=new HashSet<Pair<Pair<Integer,PNode>,Set<PNode>>>();for(int i=0;i<leftBranch.size();i++){PNode branchNode=leftBranch.get(i);PNode branchChildNode=i==0?sink:leftBranch.get(i-1);for(PChild neighborChild : branchNode.getChildren()){PNode neighbor=neighborChild.getNode();if(neighbor==branchChildNode){continue;}if(true){Set<PNode> descendants=PNode.getDirectDescendantsInBarrier(neighbor,cycleNodes);descendants.add(neighbor);leftDescendants.add(new Pair<Pair<Integer,PNode>,Set<PNode>>(new Pair<Integer,PNode>(i,neighbor),descendants));}}}System.err.println(""  leftDescendants: ""+leftDescendants);for(int i=0;i<rightBranch.size();i++){PNode branchNode=rightBranch.get(i);PNode branchChildNode=i==0?sink:rightBranch.get(i-1);for(int j=0;j<branchNode.getChildren().size();j++){PChild neighborChild=branchNode.getChildren().get(j);PNode neighbor=neighborChild.getNode();if(neighbor==branchChildNode){continue;}if(branchNode.childrenCanBeSwapped(neighbor,branchChildNode)){Set<PNode> descendants=PNode.getDirectDescendantsInBarrier(neighbor,cycleNodes);descendants.add(neighbor);System.err.println(""Right Descendants (""+branchNode+""->""+neighbor+""): ""+descendants);boolean foundIntersection=false;for(Pair<Pair<Integer,PNode>,Set<PNode>> ld : leftDescendants){if(Util.setsIntersect(ld.second,descendants)){foundIntersection=true;if(branchNode.childrenCanBeSwapped(neighbor,branchChildNode)){branchNode.moveChildAfter(branchChildNode,neighbor);}PNode otherBranchNode=leftBranch.get(ld.first.first);PNode otherBranchChildNode=ld.first.first==0?sink:leftBranch.get(ld.first.first-1);PNode otherNeighbor=ld.first.second;System.err.println(""  found intersection: ""+branchNode+""->""+neighbor+"" - ""+otherBranchNode+""->""+otherNeighbor);System.err.println(""    ""+descendants+""  -  ""+ld.second);if(otherBranchNode.childrenCanBeSwapped(otherNeighbor,otherBranchChildNode)){otherBranchNode.moveChildAfter(otherNeighbor,otherBranchChildNode);}if(otherBranchNode.getChildIndex(otherBranchChildNode)<otherBranchNode.getChildIndex(otherNeighbor)&&branchNode.getChildIndex(neighbor)<branchNode.getChildIndex(branchChildNode)){PNode.fixLeavesOn(neighbor,sink,cycleNodes);PNode.fixLeavesOn(otherNeighbor,sink,cycleNodes);}}}if(!foundIntersection){boolean isOkay=false;if(branchNode.childrenCanBeSwapped(neighbor,branchChildNode)){isOkay=true;System.err.println(""  swapping ""+neighbor+"" ""+branchChildNode);branchNode.moveChildAfter(neighbor,branchChildNode);}if(isOkay&&branchNode.getChildIndex(neighbor)<branchNode.getChildIndex(branchChildNode)){System.err.println(""  new fixing1 ""+neighbor+"" on ""+sink);PNode.fixLeavesOn(neighbor,sink,cycleNodes);}if(isOkay){for(PCycle otherCycle : branchNode.getPCycles()){if(otherCycle==this){continue;}if(otherCycle.getState()==NOT_FIXED){otherCycle.fix();}if(otherCycle.inLeftBranch(branchNode)){PNode otherBranchChildNode=otherCycle.getLeftBranchChild(branchNode);if(branchNode.getChildIndex(neighbor)>branchNode.getChildIndex(otherBranchChildNode)){System.err.println(""  fixing ""+neighbor+"" on ""+otherCycle.getSink());PNode.fixLeavesOn(neighbor,otherCycle.getSink(),otherCycle.getCycleNodes());}}}}}}else {}}}for(Pair<Pair<Integer,PNode>,Set<PNode>> ld : leftDescendants){PNode branchNode=leftBranch.get(ld.first.first);PNode branchChildNode=ld.first.first==0?sink:leftBranch.get(ld.first.first-1);PNode neighbor=ld.first.second;System.err.println(""    checking ""+branchNode+""  ""+neighbor);boolean isOkay=false;if(branchNode.childrenCanBeSwapped(branchChildNode,neighbor)){isOkay=true;System.err.println(""  moving ""+branchChildNode+"" ""+neighbor);branchNode.moveChildAfter(branchChildNode,neighbor);}if(isOkay&&branchNode.getChildIndex(neighbor)>branchNode.getChildIndex(branchChildNode)){System.err.println(""  new fixing2 ""+neighbor+"" on ""+sink);}if(isOkay){for(PCycle otherCycle : branchNode.getPCycles()){if(otherCycle==this){continue;}if(otherCycle.getState()==NOT_FIXED){otherCycle.fix();}if(otherCycle.inRightBranch(branchNode)){PNode otherBranchChildNode=otherCycle.getRightBranchChild(branchNode);if(branchNode.getChildIndex(neighbor)<branchChildNode.getChildIndex(otherBranchChildNode)){System.err.println(""  fixing ""+neighbor+"" on ""+otherCycle.getSink());PNode.fixLeavesOn(neighbor,otherCycle.getSink(),otherCycle.getCycleNodes());}}}}}System.err.println(""\nDONE FIXING ""+toString());state=FIXED;}"
3338	"public void step(){pauseMenu.display();showPlayerStats();if(timer()==0||players.get(current).usedItem()||players.get(current).health<healthMem){players.get(current).stop();players.get(current).currentItem=null;for(int i=0;i<players.size();i++){if(players.get(i).health==0){players.remove(i);}}if(players.size()<=1){p.gameState=2;}else {nextTurn();}}else {updatePlayer();}}"
3339	"private synchronized void loadProperties(Properties parms){boolean baseSettingsChanged=(inputWidth!=Integer.parseInt(parms.getProperty(""inputWidth""))||inputHeight!=Integer.parseInt(parms.getProperty(""inputHeight""))||outputWidth!=Integer.parseInt(parms.getProperty(""outputWidth""))||outputHeight!=Integer.parseInt(parms.getProperty(""outputHeight""))||refreshSeconds!=Integer.parseInt(parms.getProperty(""refreshSeconds"")));cameraIndex=Integer.parseInt(parms.getProperty(""cameraIndex""));inputWidth=Integer.parseInt(parms.getProperty(""inputWidth""));inputHeight=Integer.parseInt(parms.getProperty(""inputHeight""));outputWidth=Integer.parseInt(parms.getProperty(""outputWidth""));outputHeight=Integer.parseInt(parms.getProperty(""outputHeight""));refreshSeconds=Integer.parseInt(parms.getProperty(""refreshSeconds""));lockInsecureSettings=Boolean.parseBoolean(parms.getProperty(""lockInsecureSettings""));captureCommand=parms.getProperty(""captureCommand"");captureResult=parms.getProperty(""captureResult"");if(inputWidth<=0){inputWidth=1680;}if(inputHeight<=0){inputHeight=1050;}if(outputWidth<=0){outputWidth=1680;}if(outputHeight<=0){outputHeight=1050;}if(refreshSeconds<=0){refreshSeconds=30;}String visicamRPiGPUBinaryPathPrevious=visicamRPiGPUBinaryPath;boolean visicamRPiGPUEnabledTmp=visicamRPiGPUEnabled;boolean visicamRPiGPUEnabledOptionsChanged=(baseSettingsChanged||!visicamRPiGPUBinaryPath.equals(parms.getProperty(""visicamRPiGPUBinaryPath""))||!visicamRPiGPUMatrixPath.equals(parms.getProperty(""visicamRPiGPUMatrixPath""))||!visicamRPiGPUImageOriginalPath.equals(parms.getProperty(""visicamRPiGPUImageOriginalPath""))||!visicamRPiGPUImageProcessedPath.equals(parms.getProperty(""visicamRPiGPUImageProcessedPath"")));visicamRPiGPUBinaryPath=parms.getProperty(""visicamRPiGPUBinaryPath"");visicamRPiGPUMatrixPath=parms.getProperty(""visicamRPiGPUMatrixPath"");visicamRPiGPUImageOriginalPath=parms.getProperty(""visicamRPiGPUImageOriginalPath"");visicamRPiGPUImageProcessedPath=parms.getProperty(""visicamRPiGPUImageProcessedPath"");visicamRPiGPUEnabled=(!visicamRPiGPUBinaryPath.isEmpty()&&!visicamRPiGPUMatrixPath.isEmpty()&&!visicamRPiGPUImageOriginalPath.isEmpty()&&!visicamRPiGPUImageProcessedPath.isEmpty());Runtime runtime=Runtime.getRuntime();File visicamRPiGPUbinaryFile=new File(visicamRPiGPUBinaryPath);File visicamRPiGPUbinaryFilePrevious=new File(visicamRPiGPUBinaryPathPrevious);try{if(visicamRPiGPUEnabledTmp&&!visicamRPiGPUEnabled){VisiCam.log(""visicamRPiGPU was disabled in settings, kill all visicamRPiGPU instances..."");Process killAll=runtime.exec(""pkill -9 -f ""+""^.*?""+visicamRPiGPUbinaryFilePrevious.getName()+""[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]].*?[[:space:]].*?[[:space:]].*?$"");killAll.waitFor();}else {if(visicamRPiGPUEnabled){Process checkAlive=runtime.exec(""kill -0 ""+visicamRPiGPUPid);checkAlive.waitFor();if(checkAlive.exitValue()!=0||visicamRPiGPUEnabledOptionsChanged){VisiCam.log(""visicamRPiGPU is not running with correct settings, kill all visicamRPiGPU instances..."");Process killAll=runtime.exec(""pkill -9 -f ""+""^.*?""+visicamRPiGPUbinaryFilePrevious.getName()+""[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]][0-9]+[[:space:]].*?[[:space:]].*?[[:space:]].*?$"");killAll.waitFor();if(visicamRPiGPUbinaryFile.exists()&&!visicamRPiGPUbinaryFile.isDirectory()){VisiCam.log(""Starting new visicamRPiGPU instance..."");if(visicamPid==0){String pidMachineString=ManagementFactory.getRuntimeMXBean().getName();int seperatorIndex=pidMachineString.indexOf('@');visicamPid=Integer.parseInt(pidMachineString.substring(0,seperatorIndex));}String visicamRPiGPUCommand=visicamRPiGPUbinaryFile+"" ""+outputWidth+"" ""+outputHeight+"" ""+refreshSeconds+"" ""+visicamPid+"" ""+visicamRPiGPUMatrixPath+"" ""+visicamRPiGPUImageProcessedPath+"" ""+visicamRPiGPUImageOriginalPath;Process startNew=(runtime.exec(visicamRPiGPUCommand));Field pidField=startNew.getClass().getDeclaredField(""pid"");pidField.setAccessible(true);visicamRPiGPUPid=pidField.getInt(startNew);}else {VisiCam.log(""visicamRPiGPUbinaryFile does not exist, can not create new visicamRPiGPU instance..."");}}}}}catch(Exception e){VisiCam.error(e.getMessage());}for(int i=0;i<markerSearchfields.length;i++){markerSearchfields[i].setX(Double.parseDouble(parms.getProperty(""markerSearchfields[""+i+""][x]"")));markerSearchfields[i].setY(Double.parseDouble(parms.getProperty(""markerSearchfields[""+i+""][y]"")));markerSearchfields[i].setWidth(Double.parseDouble(parms.getProperty(""markerSearchfields[""+i+""][width]"")));markerSearchfields[i].setHeight(Double.parseDouble(parms.getProperty(""markerSearchfields[""+i+""][height]"")));}}"
3340	"static Location resolveLocation(String passedLocation){Location result=null;if(passedLocation==JCommanderSetting.DEFAULT_LOCATION){result=geoResolver.resolveCurrentLocation();}else {try{result=geoResolver.resolvePlaceLocation(passedLocation);result.setName(passedLocation);}catch(InvalidLocationException e){System.err.println(e.getMessage());System.exit(1);}}return result;}"
3341	"public void restoreGame(char[] field,int score){updateScore(score,true);unFree=0;int[][] coord=new int[3][2];char[] colors=new char[3];int count=0;int unFree=0;for(int i=0;i<SIZE;i++){for(int j=0;j<SIZE;j++){char color=field[(i*10)+j];if(color>='a'&&color<='z'){coord[count][0]=i;coord[count][1]=j;colors[count]=color;count++;}unFree+=(color>='a'&&color<='z')||(color>='A'&&color<='Z')?1:0;squares[i][j].setColor(color);}}changeUnFree(unFree);restoreFutureBalls(coord,colors);}"
3342	"@Override public View getView(int position,View convertView,ViewGroup parent){ final ViewHolder holder;if(convertView==null){convertView=View.inflate(getContext(),linkResource,null);holder=new ViewHolder();holder.item_title=(TextView)convertView.findViewById(R.id.item_title);holder.item_date=(TextView)convertView.findViewById(R.id.item_date);holder.btn_Download=(Button)convertView.findViewById(R.id.item_action);convertView.setTag(holder);}else {holder=(ViewHolder)convertView.getTag();} final ItemFeed item=getItem(position);holder.item_title.setText(item.getTitle());try{SimpleDateFormat format=new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss Z"");Date newDate=format.parse(item.getPubDate());format=new SimpleDateFormat(""dd/MMM/yyyy"");String date=format.format(newDate);holder.item_date.setText(date);}catch(ParseException e){System.out.println("""");}if(!item.getFileUri().isEmpty()){holder.btn_Download.setText(""play"");}holder.item_title.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Context context=getContext();    Intent episodeDetailIntent=new Intent(context,EpisodeDetailActivity.class);    episodeDetailIntent.putExtra(TITLE,item.getTitle());    episodeDetailIntent.putExtra(LINK,item.getLink());    episodeDetailIntent.putExtra(PUBDATE,item.getPubDate());    episodeDetailIntent.putExtra(DESCRIPTION,item.getDescription());    episodeDetailIntent.putExtra(DOWNLOAD_LINK,item.getDownloadLink());    context.startActivity(episodeDetailIntent);  }});holder.btn_Download.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    System.out.println(""P1"");    Context context=getContext();    Intent musicService=new Intent(context,MusicPlayer.class);    if (holder.btn_Download.getText().equals(""baixar"")) {      Intent downloadService=new Intent(context,DownloadService.class);      downloadService.setData(Uri.parse(item.getDownloadLink()));      context.startService(downloadService);      System.out.println(""Baixar"");      holder.btn_Download.setText(""baixando"");    } else     if (holder.btn_Download.getText().equals(""play"")) {      if (MyApplication.isBound()) {        MyApplication.getMusicPlayer().playMusic(item.getFileUri());      }      System.out.println(""escuta1r"");      holder.btn_Download.setText(""pause"");    } else     if (holder.btn_Download.getText().toString().equals(""pause"")) {      if (MyApplication.isBound()) {        MyApplication.getMusicPlayer().pauseMusic();      }      holder.btn_Download.setText(""unPause"");    } else     if (holder.btn_Download.getText().equals(""unPause"")) {      if (MyApplication.isBound()) {        MyApplication.getMusicPlayer().continueMusic();      }      System.out.println(""escuta1r"");      holder.btn_Download.setText(""pause"");    }  }});return convertView;}"
3343	"public void updateProfile(String userName,String password,String email,int id){Session session=currentSession();Admin admin=session.find(Admin.class,id);if(!userName.equals("""")){admin.setUserName(userName);}if(!password.equals("""")){admin.setPassword(Cryptor.encrypt(password));}if(!email.equals("""")){admin.setEmail(email);}}"
3344	"@Override public Response getResponse(int index){if(index==1){return new Response((Main.game.getPlayer().isMainQuestUpdated()||Main.game.getPlayer().isSideQuestUpdated()||Main.game.getPlayer().isRomanceQuestUpdated())?""<span style='color:""+Colour.GENERIC_EXCELLENT.toWebHexString()+"";'>Planner</span>"":""Planner"",""Open your planner to view your current quests."",PLANNER_MAIN){  @Override public void effects(){    Main.game.getPlayer().setMainQuestUpdated(false);  }};}else {if(index==2){return new Response(""Selfie"",""Take a selfie to get a good view of yourself."",CHARACTER_APPEARANCE);}else {if(index==3){return new Response(""Stats"",""Take a detailed look at your stats."",CHARACTER_STATS);}else {if(index==4){if(Main.game.getPlayer().getCharactersEncountered().isEmpty()){return new Response(""Contacts"",""You haven't met anyone yet!"",null);}else {return new Response(""Contacts"",""Even though you can't call anyone, on account of there being no phones in this world, you've still kept a record of all the people you've come into contact with."",CONTACTS){  @Override public void effects(){    resetContentForContacts();  }};}}else {if(index==5){return new Response((Main.game.getPlayer().isNewWeaponDiscovered()||Main.game.getPlayer().isNewClothingDiscovered()||Main.game.getPlayer().isNewItemDiscovered()||Main.game.getPlayer().isNewRaceDiscovered())?""<span style='color:""+Colour.GENERIC_EXCELLENT.toWebHexString()+"";'>Encyclopedia</span>"":""Encyclopedia"",""Have a look at all the different items and races you've discovered so far."",ENCYCLOPEDIA){  @Override public void effects(){    resetContentForRaces();  }};}else {if(index==6){return new Response((Main.game.getPlayer().getLevelUpPoints()>0||Main.game.getPlayer().getPerkPoints()>0)?""<span style='color:""+Colour.GENERIC_EXCELLENT.toWebHexString()+"";'>Character</span>"":""Character"",""View your character page."",CHARACTER_LEVEL_UP){  @Override public void effects(){    strengthPoints=0;    intelligencePoints=0;    fitnessPoints=0;    spendingPoints=Main.game.getPlayer().getPerkPoints();    levelUpPerks.clear();  }};}else {if(index==7){return new Response(""Fetishes"",""View your fetishes page."",CHARACTER_FETISHES){  @Override public void effects(){    confirmReset=false;    levelUpFetishes.clear();  }};}else {if(index==0){return new ResponseEffectsOnly(""Back"",""Put your phone away.""){  @Override public void effects(){    Main.game.restoreSavedContent();  }};}else {return null;}}}}}}}}}"
3345	"@Override public void onBackPressed(){if(!swipeEvents.isVisible()&&!fabMenu.isShowing()){new FancyAlertDialog.Builder(this).setActivity(this).setPositiveColor(R.color.livinPink).setNegativeColor(R.color.black).setPositiveButtonText(""Exit"").setTextSubTitle(""Are you sure you would like to exit?"").setNegativeButtonText(""Cancel"").setSubtitleColor(R.color.black).setOnPositiveClicked(new FancyAlertDialog.OnPositiveClicked(){  @Override public void OnClick(  View view,  Dialog dialog){    Intent intent=new Intent(Intent.ACTION_MAIN);    intent.addCategory(Intent.CATEGORY_HOME);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    startActivity(intent);  }}).setOnNegativeClicked(new FancyAlertDialog.OnNegativeClicked(){  @Override public void OnClick(  View view,  Dialog dialog){    dialog.dismiss();  }}).build().show();}else {if(swipeEvents.isVisible()&&!fabMenu.isShowing()){FragmentTransaction ft=getSupportFragmentManager().beginTransaction();ft.setCustomAnimations(R.anim.slide_in_up,R.anim.slide_out_down);ft.addToBackStack(""swipeEvents"");ft.replace(R.id.fragment_container,eventsFrag,""eventsFrag"");ft.commit();}else {if(eventsFrag!=null&&eventsFrag.getTouchedValue()){if(fabMenu.isShowing()){fabMenu.closeMenu();}touched=true;Handler handler=new Handler();handler.postDelayed(new Runnable(){  public void run(){    refresh();  }},800);}else {fabMenu.closeMenu();}}}}"
3346	"@Override public void onDeleteResult(Status response){if(response==Status.UNAUTHORISED){startActivity(new Intent(this,LoginActivity.class));}else {if(response==Status.OK){Toast.makeText(this,getString(R.string.news_deleted),Toast.LENGTH_SHORT).show();fetchNews();}else {if(response==Status.ERROR){Toast.makeText(this,getString(R.string.something_went_wrong),Toast.LENGTH_SHORT).show();}}}}"
3347	"public static void createAccount() throws IOException{if(!Account.mode){int accNum=getInt(""Enter new account number: "");if(!validAccNum(accNum)&&!validAccList(accNum)){String accName=getStringInput(""Enter new account name: "");if(validAccName(accName)){System.out.println(""account ""+accNum+"" is created for ""+accName);Account.summary.add(""NEW""+accNum+""000 0000000""+accName);}}}else {System.out.println(""error: cannot create account in machine mode, transaction ended"");}}"
3348	"private static boolean validated(Context context,EditText title,EditText description,EditText link){if(link==null||title==null||description==null){return false;}String titleText=title.getText().toString().trim();String descriptionText=description.getText().toString().trim();String linkText=link.getText().toString().trim();if("""".equals(titleText)){title.setError(context.getString(R.string.enter_title));return false;}else {if("""".equals(descriptionText)){description.setError(context.getString(R.string.enter_description));return false;}else {if("""".equals(linkText)){link.setError(context.getString(R.string.video_collection_template_link_hint));return false;}else {if(!Patterns.WEB_URL.matcher(linkText).matches()){link.setError(context.getString(R.string.video_collection_template_link_valid_hint));}else {if(!(linkText.contains(YOUTUBE+"".com"")||linkText.contains(YOUTUBE_SHORT)||linkText.contains(DAILYMOTION+"".com"")||linkText.contains(VIMEO+"".com""))){link.setError(context.getString(R.string.video_collection_template_linited_links));return false;}}}}}return true;}"
3349	"@Override public boolean apply(StramToNodeRequest input){return input!=null&&MATCH_TYPES.contains(input.getRequestType());}"
3350	"private void processTxFromBestChain(Transaction tx,boolean forceAddToPool) throws VerificationException{checkState(lock.isHeldByCurrentThread());checkState(!pending.containsKey(tx.getHash()));boolean isDeadCoinbase=tx.isCoinBase()&&dead.containsKey(tx.getHash());if(isDeadCoinbase){log.info(""  coinbase tx <-dead: confidence {}"",tx.getHashAsString(),tx.getConfidence().getConfidenceType().name());dead.remove(tx.getHash());}updateForSpends(tx,true);boolean hasOutputsToMe=tx.getValueSentToMe(this).signum()>0;if(hasOutputsToMe){if(tx.isEveryOwnedOutputSpent(this)){log.info(""  tx {} ->spent (by pending)"",tx.getHashAsString());addWalletTransaction(Pool.SPENT,tx);}else {log.info(""  tx {} ->unspent"",tx.getHashAsString());addWalletTransaction(Pool.UNSPENT,tx);}}else {if(tx.getValueSentFromMe(this).signum()>0){log.info(""  tx {} ->spent"",tx.getHashAsString());addWalletTransaction(Pool.SPENT,tx);}else {if(forceAddToPool){log.info(""  tx {} ->spent (manually added)"",tx.getHashAsString());addWalletTransaction(Pool.SPENT,tx);}}}Set<Transaction> doubleSpendTxns=findDoubleSpendsAgainst(tx,pending);if(!doubleSpendTxns.isEmpty()){killTxns(doubleSpendTxns,tx);}}"
3351	"@Override public void onConnected(){if(login_remember.isChecked()){SharedPreferences.Editor editor=sharedPref.edit();editor.putString(""username"",login_username.getText().toString());editor.putString(""password"",login_password.getText().toString());editor.apply();}else {if(!login_remember.isChecked()&&from_saved_info){SharedPreferences.Editor editor=sharedPref.edit();editor.remove(""username"");editor.remove(""password"");editor.apply();}}restoreUI();Intent intent=new Intent(this,Activity_Main.class);startActivity(intent);finish();}"
3352	"private List<String> prepareWarningList(String toRemoveHtml){List<String> warningListFromModel=new ArrayList<String>();if(toRemoveHtml!=null){Elements elements=Jsoup.parse(toRemoveHtml).body().select(""*"");for(Element element : elements){if(!element.ownText().trim().equals("""")){warningListFromModel.add(element.ownText());}}}return warningListFromModel;}"
3353	"public boolean validate(Property p){return this.validateGeo(p,""Boston"")&&this.validateComp(p);}"
3354	"public DynamicTabAdapter(Tab tab,Context context,boolean reviewMode){mReviewMode=reviewMode;this.lInflater=LayoutInflater.from(context);this.context=context;this.id_layout=R.layout.form_without_score;this.navigationController=initNavigationController(tab);this.readOnly=getMalariaSurvey()!=null&&!getMalariaSurvey().isInProgress();if(!readOnly){Question question=navigationController.getCurrentQuestion();if(question.getValueBySession()!=null){if(DashboardActivity.moveToQuestion!=null){goToQuestion(DashboardActivity.moveToQuestion);DashboardActivity.moveToQuestion=null;}else {goToLastQuestion();}}}int totalPages=navigationController.getCurrentQuestion().getTotalQuestions();if(readOnly){if(Session.getMalariaSurvey()!=null){totalPages=Session.getMalariaSurvey().getMaxTotalPages();}}navigationController.setTotalPages(totalPages);isClicked=false;mDynamicTabAdapterStrategy=new DynamicTabAdapterStrategy(this);}"
3355	"@Override public SuiteContainer configureTestCases(PageDataProvider pdp,boolean parseDataIterators){SuiteContainer sC=null;if(xRoot.getSuite()==null){sC=new SuiteContainer();}else {switch (xRoot.getSuite().getProvider()){case ""LOCAL"" :sC=new SuiteContainer();parseModel(sC,xRoot.getModel());for(XTest test : xRoot.getSuite().getTest()){if(sC.testExists(test.getName())){log.warn(""The test [""+test.getName()+""] is already defined and will not be added again"");continue;}if(test.getType().equals(""BDD"")){XMLFormatter xmlFormatter=new XMLFormatter(sC.getDataProvider(),configProperties);Parser bddParser=new Parser(xmlFormatter);bddParser.parse(test.getDescription().getValue(),"""",0);sC.setDataProvider(xmlFormatter);}else {if(test.getType().equals(""CSV"")){StringBuilder stringBuilder=new StringBuilder();stringBuilder.append(test.getName());stringBuilder.append("",Test,,"");stringBuilder.append(test.getDataProvider()!=null?test.getDataProvider():"""");stringBuilder.append("","");stringBuilder.append(test.getDataDriver()!=null?test.getDataDriver():"""");stringBuilder.append("","");stringBuilder.append(test.getTagNames()!=null?test.getTagNames():"""");stringBuilder.append("",,"");stringBuilder.append(test.isTimed());stringBuilder.append("",0,"");stringBuilder.append(test.isActive());stringBuilder.append("","");stringBuilder.append(test.getOs()!=null?test.getOs():"""");MatrixTest matrixTest=new MatrixTest(stringBuilder.toString(),test.getDescription().getValue());if(matrixTest.isActive()){sC.addActiveTest(matrixTest.createTest(configProperties));}else {sC.addInactiveTest(matrixTest.createTest(configProperties));}}else {if(test.getType().equals(""XML"")){KeyWordTest currentTest=parseTest(test);if(currentTest.isActive()){sC.addActiveTest(currentTest);}else {sC.addInactiveTest(currentTest);}}}}}for(XFunction test : xRoot.getSuite().getFunction()){if(sC.testExists(test.getName())){log.warn(""The function [""+test.getName()+""] is already defined and will not be added again"");continue;}sC.addFunction(parseFunction(test));}break;case ""XML"" :sC=new XMLKeyWordProvider(findFile(configFolder,new File(xRoot.getSuite().getFileName())),configProperties).readData(true);break;case ""EXCEL"" :sC=new ExcelKeyWordProvider(findFile(configFolder,new File(xRoot.getSuite().getFileName())),configProperties).readData(true);break;case ""SQL"" :case ""LOCAL-SQL"" :{sC=new SQLKeyWordProvider(configProperties.get(JDBC[0]),configProperties.get(JDBC[1]),configProperties.get(JDBC[2]),configProperties.get(JDBC[3]),configProperties.get(OPT_DRIVER[0]),xRoot.getModel().getSiteName(),configProperties.get(OPT_DRIVER[1]),configProperties.get(OPT_DRIVER[2]),configProperties.get(OPT_DRIVER[3]),configProperties).readData(true);break;}}}if(sC!=null){sC.setDataProvider(pdp);}return sC;}"
3356	"@Override protected void onPostExecute(File[] localFiles){files=localFiles;if(directory.getPath().equalsIgnoreCase(Environment.getExternalStorageDirectory().getPath())){directoryTitle.setText(""Parent Directory"");}else {directoryTitle.setText(directory.getName());}lastDirectory=directory.getParentFile();curDirectory=directory;listView.removeHeaderView(listHeaderView);if(directory.listFiles().length>0&&directoryExists(files)){listView.addHeaderView(listHeaderView);}adapter=new FileListAdapter(this,files,scopeType);setListAdapter(adapter);if(dialog.isShowing()){dialog.dismiss();}super.onPostExecute(files);}"
3357	"@Override public void scrollTo(int x,int y){ final int min=Math.min(mMinVerticalScrollRange,mMaxVerticalScrollRange); final int max=Math.max(mMinVerticalScrollRange,mMaxVerticalScrollRange);if(y<min){y=min;}if(y>max){y=max;}if(y!=getScrollY()){super.scrollTo(x,y);if(getScrollY()>=0&&mInnerTopView!=null){float offsetRatio=((float)getScrollY())/mMaxVerticalScrollRange;if(mOnScollListener!=null){if(offsetRatio==0){mState=OnScollListener.STATE_EXPAND;mOnScollListener.onStateChanged(OnScollListener.STATE_EXPAND);}else {if(offsetRatio==1){mState=OnScollListener.STATE_COLLAPSED;mOnScollListener.onStateChanged(OnScollListener.STATE_COLLAPSED);}}mOnScollListener.onScroll(offsetRatio,getScrollY(),max);if(mMaxTopTranslationYRate!=0){int totalOffset=(int)((mInnerTopView.getMeasuredHeight()-mInnerTopView.getMinimumHeight())*mMaxTopTranslationYRate);float verticalOffset=totalOffset*offsetRatio;ViewCompat.setTranslationY(mInnerTopView,(int)verticalOffset);}}}}}"
3358	"@Override public void stateChanged(ChangeEvent e){if(isVisible()){LOG.trace(""stateChanged"");synchronized(this){if(this.equals(e.getSource())&&vmCtrl!=null){int tabIndex=getSelectedIndex();if(tabIndex>=0){Object o=getComponentAt(tabIndex);if(o instanceof TabComponent){TabComponent comp=(TabComponent)getComponentAt(tabIndex);if(comp!=null){vmCtrl.showVm(comp.getVmHandle());}else {vmCtrl.hideAllVms(this.monitorId);}}}else {vmCtrl.hideAllVms(this.monitorId);}}}}}"
3359	"@Override public void update(GameRuntime runtime){if(ship.position.y<=runtime.getCanvas().getHeight()-200){if(!runtime.getSoundtrack().isActive()){runtime.getSoundtrack().play();}if(runtime.getInput().isKeyPressed(KeyCode.RIGHT)){ship.motion+=0.9;}else {if(runtime.getInput().isKeyPressed(KeyCode.LEFT)){ship.motion-=0.9;}}ship.position.x+=ship.motion;ship.motion*=0.93;if(ship.position.x<200){ship.position.x=200;ship.motion=0;}else {if(ship.position.x+ship.getTexture().getWidth()/4>runtime.getCanvas().getWidth()-200){ship.position.x=runtime.getCanvas().getWidth()-200-ship.getTexture().getWidth()/4;ship.motion=0;}}}else {ship.position.y-=4;if(ship.position.y<runtime.getCanvas().getHeight()-200){ship.position.y=runtime.getCanvas().getHeight()-200;}}if(ship.getHealth().damageFade>0){ship.getHealth().damageFade-=0.05;if(ship.getHealth().damageFade<0){ship.getHealth().damageFade=0;}}if(!ship.isDestroyed()&&ship.position.y<=runtime.getCanvas().getHeight()-200&&runtime.getInput().isKeyPressed(KeyCode.SPACE)){ship.shoot();}for(AbstractBullet aBullet : ship.getBullets()){((Bullet)aBullet).move();}if(ship.position.y<=runtime.getCanvas().getHeight()-200&&runtime.currentTick()%(int)spawnRate==0){int width=(int)runtime.getCanvas().getWidth();int min=200+(Asteroid.SIZE/2);int max=width-200-(Asteroid.SIZE/2);Position pos=new Position(min+new Random().nextInt(max-min),-50);asteroids.add(Asteroid.nextAsteroid(pos));spawnRate-=0.2;if(spawnRate<=0){spawnRate=0.2;}}Iterator<Asteroid> astIt=asteroids.iterator();while(astIt.hasNext()){boolean astHit=false;Asteroid ast=astIt.next();if((ast.getPosition().y>runtime.getCanvas().getHeight()+150)||(ast.isDestroyed()&&ast.getExplosion().getCurrentFrame()==24)){astIt.remove();continue;}Iterator<AbstractBullet> bulIt=ship.getBullets().iterator();while(bulIt.hasNext()){boolean bulHit=false;Bullet bullet=(Bullet)bulIt.next();if(Collision.squareCheck(ast.getBounds(),bullet.getPosition())&&Collision.distanceCheck(ast.getPosition(),bullet.getPosition())<40){bulHit=true;astHit=true;}if(bulHit){bulIt.remove();}}if(astHit){ast.destroy();asteroidsDestroyed++;}Position shipCenter=new Position(ship.getPosition().x+(ship.getTexture().getWidth()/8),ship.getPosition().y+(ship.getTexture().getHeight()/2));if(!ast.isDestroyed()&&!ship.isDestroyed()&&Collision.distanceCheck(ast.getPosition(),shipCenter)<90){ast.destroy();ship.getHealth().damage(ast);}if(ship.getHealth().getAmount()<=0){ship.destroy();Util.setTimeout(1000,() -> {  this.go.setGameOver();});}ast.getPosition().y+=ast.getSpeed();if(ast.spinRight){ast.angle+=ast.spin;}else {ast.angle-=ast.spin;}}}"
3360	"public boolean search(){if(result.length==0){return false;}if(!where.equals("""")){arrayHandler=new Array();arrayHandler.insert(result);result=arrayHandler.search(searchBy,where);if(result==null){return false;}else {return true;}}else {return true;}}"
3361	"@Override public boolean equals(Object other){if(!(other instanceof Action)||other==null){return false;}return getId()==((Action)other).getId();}"
3362	"private void parseProducts(String topic,String response){try{JSONObject jsonObject=new JSONObject(response);JSONArray allProducts=jsonObject.getJSONArray(topic);for(int i=0;i<allProducts.length();i++){JSONObject oneProduct=new JSONObject(allProducts.getString(i));int id=oneProduct.getInt(""id"");String name=oneProduct.getString(""name"");double price=oneProduct.getDouble(""price"");int available=oneProduct.getInt(""available"");Product newProduct=new Product(id,name,price,available,topic);Product existingProduct=findProduct(topic,id,name);if(existingProduct!=null){Log.d(""parseProducts"",""Updating product: ""+name);availableProducts.set(availableProducts.indexOf(existingProduct),newProduct);}else {availableProducts.add(newProduct);}}}catch(JSONException e){Log.d(""parseProducts"",""Chyba pri parsovani JSON"");e.printStackTrace();}}"
3363	"public static void main(String[] args) throws IOException{HashMap<String,Integer> hashmap=new HashMap<String,Integer>();HashMap<String,Integer> userMap=new HashMap<String,Integer>();List<String> uniqueSet=new ArrayList<String>();Pattern p8=Pattern.compile("".{1,50}www.{1,500}"");String[] fileNames={""webmd_addiction"",""webmd_adhd"",""webmd_breast_cancer"",""webmd_diabetes"",""webmd_diet"",""webmd_fkids"",""webmd_heart"",""webmd_ms"",""webmd_pain"",""webmd_sexualhealth""};for(String fileLog : fileNames){hashmap=new HashMap<String,Integer>();userMap=new HashMap<String,Integer>();uniqueSet=new ArrayList<String>();BufferedReader br=new BufferedReader(new FileReader(""data/""+fileLog+"".csv""));List<String> qidArray=new ArrayList<String>();BufferedWriter writer=new BufferedWriter(new FileWriter(""test/""+fileLog+""_staff_qid.txt""));while(br.ready()){String check=br.readLine();String[] tokenizedTerms=check.split(""\"""");String nameToken=tokenizedTerms[3];if(nameToken.toUpperCase().matches("".*\\,\\s*MSN"")||nameToken.toUpperCase().matches("".*\\,\\s*RNP"")||nameToken.toUpperCase().matches("".*\\,\\s*CDOE"")||nameToken.toUpperCase().matches("".*\\,\\s*MD"")||nameToken.toUpperCase().matches("".*\\,\\s*MPH"")||nameToken.toUpperCase().matches("".*\\,\\s*PHD"")||nameToken.toUpperCase().matches("".*\\,\\s*PT"")||nameToken.toUpperCase().matches("".*\\,\\s*DSc"")||nameToken.toUpperCase().matches("".*\\,\\s*NCS"")||nameToken.toUpperCase().matches("".*\\,\\s*MSCS"")||nameToken.toUpperCase().matches("".*\\,\\s*RN"")||nameToken.toUpperCase().matches(""\\w+\\_MSN"")||nameToken.toUpperCase().matches(""\\w+\\_RNP"")||nameToken.toUpperCase().matches(""\\w+\\_CDOE"")||nameToken.toUpperCase().matches(""\\w+\\_MD"")||nameToken.toUpperCase().matches(""\\w+\\_MPH"")||nameToken.toUpperCase().matches(""\\w+\\_PHD"")||nameToken.toUpperCase().matches(""\\w+\\_PT"")||nameToken.toUpperCase().matches(""\\w+\\_DSc"")||nameToken.toUpperCase().matches(""\\w+\\_NCS"")||nameToken.toUpperCase().matches(""\\w+\\_MSCS"")||nameToken.toUpperCase().matches(""\\w+\\_RN"")){if((check.contains(""www""))|(check.contains(""http""))){System.out.println(nameToken);String check2="" "";String check3="" "";Matcher m8=p8.matcher(check);List<String> matchstring8=new ArrayList<String>();while(m8.find()){check2=check2+""""+m8.group();matchstring8.add(m8.group());}Pattern p9=Pattern.compile(""https?\\:\\/\\/[\\-w\\.]*(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]|www\\.(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]"");Matcher m9=p9.matcher(check2);List<String> matchstring9=new ArrayList<String>();while(m9.find()){check3=check3+""""+m9.group();matchstring9.add(m9.group());}Pattern p10=Pattern.compile(""www.*?(\\.com(?=\\W)|\\.com\\,?\\)?|\\.org(?=\\W)|\\.ORG(?=\\W)|\\.net(?=\\W)|\\.gov(?=\\W)|\\.co.uk|\\.html|\\.htm|\\.asp|\\.aspx|\\.edu|\\.us|treatment|\\-men(?=\\W)|\\.pdf|\\.ca\\/servlet|\\.ch(?=\\W)|\\.coream(?=\\W)|\\.ee(?=\\W))|www.*?(?=\\/)|(?<=http\\:\\/\\/).*?(?=\\/)|(?<=https\\:\\/\\/).*?(?=\\/)"");Matcher m10=p10.matcher(check3);List<String> matchstring10=new ArrayList<String>();while(m10.find()){matchstring10.add(m10.group());for(int i=0;i<matchstring10.size();i++){if(uniqueSet.contains(matchstring10.get(i))){int elementCount=Integer.parseInt(hashmap.get(matchstring10.get(i)).toString());elementCount++;hashmap.put(matchstring10.get(i),elementCount);}else {uniqueSet.add(matchstring10.get(i));hashmap.put(matchstring10.get(i),1);}}}}}}br.close();SortedSet<Map.Entry<String,Integer>> sortedJournals=entriesSortedByValues(hashmap);for(Entry<String,Integer> ent : sortedJournals){writer.write(ent.getKey()+""\t""+ent.getValue()+'\n');System.out.println(ent.getKey()+""\t""+ent.getValue());}writer.close();}}"
3364	"private void register(List<RegisteredListener<? extends Event>> handlers){synchronized(this.lock){boolean changed=false;for(RegisteredListener<?> handler : handlers){if(this.handlersByEvent.put(handler.getEventClass(),handler)){changed=true;this.checker.registerListenerFor(handler.getEventClass());}}if(changed){this.handlersCache.invalidateAll();}}}"
3365	"public int apply(boolean createIfEmpty){return DatabaseManager.update(mPattern.mContext.getContentResolver(),this);}"
3366	"@Override public QuestionBankDto delete(String questionCode) throws ElearningException{QuestionBankDto questionByCode=getOneByKey(questionCode);if(questionByCode!=null){getQuestionRepository().delete(mapper.map(questionByCode,QuestionBank.class));return questionByCode;}throw new ElearningException(""Cannot delete question"");}"
3367	"@Override public void execute(Map map){System.out.println(""????????"");init();CityQuery cityQuery=new CityQuery();cityQuery.setPageNumber(1);cityQuery.setPageSize(20);PageInfo<Dest> destinationPageInfoPage=destService.pageQueryList(1,20);Integer totalPage=destinationPageInfoPage.getPages();for(int i=1;i<totalPage+1;i++){PageInfo<Dest> destinationPageInfo=destService.pageQueryList(i,20);for(Dest destination : destinationPageInfo.getList()){List<Integer> destinationIds=Lists.newArrayList();destinationIds.add(destination.getDestinationId());List<Hotel> hotels=HotelProcessor.SearchHotelsByDestinationIds(destinationIds);if(CollectionUtils.isNotEmpty(hotels)){for(Hotel hotel : hotels){HotelProduct hotelProduct=hotelProductService.queryByHoteId(hotel.getHotelId());if(hotelProduct==null){Integer primaryKey=productService.insertAndGetId(buildProduct(hotel));List<Integer> hotelIds=com.google.common.collect.Lists.newArrayList();hotelIds.add(hotel.getHotelId());List<TWSHotelDetailsV3.Hotel> hotelList=HotelProcessor.getHotelDetailsV3(hotelIds); final TWSHotelDetailsV3.Hotel hotelDetail=hotelList.get(0);if(!CollectionUtils.isEmpty(hotels)&&primaryKey!=null){eventBus.register(hotelProductService);eventBus.register(locationService);eventBus.post(new DataEvent(primaryKey,hotelDetail,hotel));fetchProductExt(primaryKey,hotelDetail,hotel);}}}}}}}"
3368	"public void actionPerformed(ActionEvent e){if(e.getSource()==completeDoor){if(!getByKey){Slot[] slots=gameState.getPlayArea().getSlots();Card.CardColors color=null;for(int i=slots.length-1;i>=0;i--){if(slots[i].storedCard!=null){color=slots[i].storedCard.getColor();break;}}boolean added=false;ArrayList<Card> deck=gameState.getDeck().getCards();for(Card c : deck){if(c.getType()==Card.CardTypes.DOOR&&c.getColor()==color){added=gameState.getDoorsCompleted().addDoor(c);break;}}if(!added){Slot[] proSlots=gameState.getProphecy().getSlots();for(Slot s : proSlots){if(s.storedCard!=null&&s.storedCard.getType()==CardTypes.DOOR&&s.storedCard.getColor()==color){added=gameState.getDoorsCompleted().addDoor(s.storedCard);break;}}}if(added){for(int i=slots.length-1;i>=0;i--){if(slots[i].storedCard!=null){slots[i].storedCard.setUsed(true);slots[i].storedCard.setMoveable(false);}}gameState.getLimbo().shuffleToDeck();}}else {Slot[] handSlots=gameState.getHand().getSlots();for(int i=0;i<handSlots.length;i++){if(handSlots[i].storedCard!=null){if(lostFound){if(handSlots[i].storedCard.getSymbol()==CardSymbols.KEY&&handSlots[i].storedCard.getColor()==Limbo.currentDrawnCard.getColor()&&getGameState().getDoorsCompleted().getOrder().get(0)==Limbo.currentDrawnCard.getColor()){gameState.getDiscard().addCard(handSlots[i].storedCard);break;}}else {if(handSlots[i].storedCard.getSymbol()==CardSymbols.KEY&&handSlots[i].storedCard.getColor()==Limbo.currentDrawnCard.getColor()){gameState.getDiscard().addCard(handSlots[i].storedCard);break;}}}}}getByKey=false;completeDoor.setEnabled(false);update();}else {if(e.getSource()==returnToMenu){gameState=new GameState(this);menuState=new MenuState(this);State.setCurrentState(menuState);returnToMenu.setVisible(false);startGame.setVisible(true);update();}else {if(e.getSource()==startGame){completeDoor.setVisible(true);deckMenu.getDis().getFrame().setVisible(true);startGame.setVisible(false);KeyManager.enter=false;keyManager.keys[KeyEvent.VK_ENTER]=false;endMenuState();update();}}}}"
3369	"public void displayMacrosOnConsole(boolean displayMacro,boolean displayRawMacro){this.displayMacro=displayMacro;this.displayRawMacro=displayRawMacro;if(displayMacro||displayRawMacro){if(!running){start();}}else {if(running){stop();}}}"
3370	"private void makeImage(String title,String icon){if(icon==""alien""){image=new GreenfootImage(WIDTH,HEIGHT);image.setColor(new Color(200,0,1,100));image.fillRect(0,0,image.getWidth(),image.getHeight());image.setColor(new Color(50,200,100,180));image.fillRect(5,5,image.getWidth()-10,image.getHeight()-10);image.setFont(new Font(""Lucida Sans Unicode"",22));image.setColor(Color.WHITE);if(status==""welcomeMsgL0""||status==""taskText1L0""||status==""taskText2L0""||status==""taskText3L0""||status==""taskText4L0""||status==""taskText5L0""||status==""taskText6L0""||status==""wrongKey""){image.drawString(""???? ENTER"",30,290);image.drawString(count_slide+""/7"",450,290);}}if(icon==""elder""){image=new GreenfootImage(WIDTH,HEIGHT);image.setColor(new Color(130,24,24,255));image.fillRect(0,0,image.getWidth(),image.getHeight());image.setColor(new Color(200,163,92,100));image.fillRect(5,5,image.getWidth()-10,image.getHeight()-10);image.setFont(new Font(""Monospaced"",22));image.setColor(Color.WHITE);if(status==""welcomeMsg""||status==""taskText1""||status==""taskText2""){image.drawString(""???? ENTER"",30,290);}if(status==""taskText3""||status==""taskText4""||status==""taskText5""){image.drawString(""???? ENTER"",30,290);}if(status==""taskText6""||status==""wrongKey""){image.drawString(""???? ENTER"",30,290);}}image.drawString(title,30,50);setImage(image);}"
3371	"private void setItemColor(int index,boolean selectedItem){MenuItem item=navigationView.getMenu().getItem(index);SpannableString spanString=new SpannableString(navigationView.getMenu().getItem(index).getTitle().toString());if(selectedItem){spanString.setSpan(new ForegroundColorSpan(ContextCompat.getColor(this,R.color.colorWhite)),0,spanString.length(),0);}else {spanString.setSpan(new ForegroundColorSpan(ContextCompat.getColor(this,R.color.colorLightGray)),0,spanString.length(),0);}item.setTitle(spanString);}"
3372	"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){if(isChecked){vibrate=true;}else {vibrate=false;}}"
3373	"public static boolean isRefreshNeeded(Map<String,String> newProperties){return newProperties.containsKey(PROP_MODE)||newProperties.containsKey(PROP_MONGO_HOST)||newProperties.containsKey(PROP_MONGO_PORT)||newProperties.containsKey(PROP_MONGO_DB)||newProperties.containsKey(PROP_MAPPING)||newProperties.containsKey(PROP_IGNORE_COLLECTION_CASE);}"
3374	"@Override public void actionPerformed(ActionEvent e){NumericalProblemPanel curProb=questions.get(currentCard);boolean canNext=currentCorrect||curProb.getRemainingAttempts()==0;if(e.getActionCommand().equals(""Submit"")){currentCorrect=curProb.verify();if(currentCorrect){status.setValue(ProblemStatus.PERFECT);totalScore+=curProb.getScore();scoreLabel.setText(""Score: ""+totalScore);}else {if(curProb.getRemainingAttempts()==0){status.setValue(ProblemStatus.WRONG);}else {status.setValue(ProblemStatus.TROUBLE);}}}else {if(e.getActionCommand().equals(""Next"")&&canNext){next();currentCorrect=false;}}curProb=questions.get(currentCard);attemptsLabel.setText(""Remaining attempts: ""+curProb.getRemainingAttempts());}"
3375	"static boolean hasToBeReparsed(ResourceStandin resourceStandin,Resource resource){if(resource==null){if(Activator.ENABLE_HASHVALUES_FOR_COMPARISON){return true;}}if(Activator.ENABLE_HASHVALUES_FOR_COMPARISON){if(resource.getTimestamp()!=resourceStandin.getTimestamp()){if(!resourceStandin.hasHashvalue()){resourceStandin.computeHashvalue();}byte[] storedResourceHashValue=resource.getHashvalue();byte[] resourceStandinHashValue=resourceStandin.getHashvalue();if(!Arrays.equals(storedResourceHashValue,resourceStandinHashValue)){return true;}}}return false;}"
3376	"public void enter(){super.enter();this.visited++;this.inRoom=true;}"
3377	"@Override public View getView(int position,View convertView,ViewGroup parent){View matchlistView=matchlistInflater.inflate(R.layout.matchlist_row,parent,false);String strplayer1=matchList.get((int)getItemId(position)).get_player1();String strplayer11=matchList.get((int)getItemId(position)).get_player11();String strplayer2=matchList.get((int)getItemId(position)).get_player2();String strplayer22=matchList.get((int)getItemId(position)).get_player22();int strscore1=matchList.get((int)getItemId(position)).get_points1();int strscore2=matchList.get((int)getItemId(position)).get_points2();if(!strplayer11.isEmpty()){strplayer1+=""/""+strplayer11;}if(!strplayer22.isEmpty()){strplayer2+=""/""+strplayer22;}TextView player1=(TextView)matchlistView.findViewById(R.id.txtlistrowplayer1);TextView player2=(TextView)matchlistView.findViewById(R.id.txtlistrowplayer2);TextView score1=(TextView)matchlistView.findViewById(R.id.txtlistrowscore1);TextView score2=(TextView)matchlistView.findViewById(R.id.txtlistrowscore2);player1.setText(strplayer1);player2.setText(strplayer2);score1.setText(String.valueOf(strscore1));score2.setText(String.valueOf(strscore2));return matchlistView;}"
3378	"@Override public void update(){super.update();if(this.hasCO2==-1){this.hasCO2=this.getAirProducts();}if(!this.world.isRemote){if(this.hasCO2==0&&this.gasTank2.getFluidAmount()>0){this.gasTank2.drain(this.gasTank2.getFluidAmount(),true);}ItemStack inputCanister=this.containingItems[2];if(inputCanister!=null){if(inputCanister.getItem() instanceof ItemAtmosphericValve&&this.hasCO2>0){if(this.gasTank2.getFluidAmount()<this.gasTank2.getCapacity()){IBlockState stateAbove=this.world.getBlockState(this.getPos().up());Block blockAbove=stateAbove.getBlock();if(blockAbove!=null&&blockAbove.getMaterial(stateAbove)==Material.AIR&&blockAbove!=GCBlocks.breatheableAir&&blockAbove!=GCBlocks.brightBreatheableAir){if(!OxygenUtil.inOxygenBubble(this.world,this.getPos().getX()+0.5,this.getPos().getY()+1.0,this.getPos().getZ()+0.5)){FluidStack gcAtmosphere=FluidRegistry.getFluidStack(""carbondioxide"",4);this.gasTank2.fill(gcAtmosphere,true);}}}}}checkFluidTankTransfer(4,this.liquidTank);if(this.hasEnoughEnergyToRun&&this.canProcess()){if(this.tierGC==2){this.processTimeRequired=(this.poweredByTierGC==2)?2:3;}if(this.processTicks<=0){this.processTicks=this.processTimeRequired;}else {if(--this.processTicks<=0){this.doLiquefaction();this.processTicks=this.canProcess()?this.processTimeRequired:0;}}}else {if(this.processTicks>0){this.processTicks=0;}else {if(--this.processTicks<=-8){this.processTicks=-8;}}}}}"
3379	"@Override public void selectBlocks(Random rand,int x,int y,int z,boolean p_75062_5_){if(rand.nextFloat()<0.01){this.blockstate=Blocks.web.getDefaultState();}else {if(rand.nextFloat()<0.05){this.blockstate=Blocks.AIR.getDefaultState();}else {if(rand.nextFloat()<0.4){this.blockstate=NibiruBlocks.NIBIRU_BLOCK.getStateFromMeta(1);}else {this.blockstate=NibiruBlocks.NIBIRU_BLOCK.getStateFromMeta(2);}}}}"
3380	"public void performActions(Game game){double rotationSpeed=0.03;double horizontalMouseSpeed=0.005*Display.mouseSpeedHorizontal;double verticalMouseSpeed=0.001*Display.mouseSpeedVertical;double moveX=0;double moveZ=0;if(Display.themeNum==4){acceleration=0.005;}if(Player.alive){if(Game.shoot){shot=true;}if(Game.foward){moveZ+=1/21.3;}if(Game.back){moveZ-=1/21.3;}if(Game.left){moveX-=1/21.3;}if(Game.right){moveX+=1/21.3;}if(Game.turnLeft){rotationa-=rotationSpeed;}if(Game.turnRight){rotationa+=rotationSpeed;}if(Game.turnUp){upRotationa-=rotationUpSpeed;}if(Game.turnDown){upRotationa+=rotationUpSpeed;}if(mouseLeft){rotationa+=horizontalMouseSpeed;mouseLeft=false;}if(mouseRight){rotationa+=horizontalMouseSpeed;mouseRight=false;}if(mouseUp){upRotationa+=verticalMouseSpeed;mouseUp=false;}if(mouseDown){upRotationa+=verticalMouseSpeed;mouseDown=false;}if(Game.run){moveSpeed*=1.5;}if(Game.crouch&&!inJump){moveSpeed=0.5;crouching=true;if(Player.y>-6.0+Player.maxHeight){if(flyOn){Player.y-=0.8;}else {if(fallAmount>0){crouching=false;fallSpeed*=1.005;if(!once){fallAmount*=1.1;once=true;}}else {Player.y-=0.5;Player.height-=0.17;}}}if(Player.y<=-6.0+Player.maxHeight){Player.y=-6.0+Player.maxHeight;Player.height=0;}}else {crouching=false;if(Player.y<0+Player.maxHeight){Player.y+=0.4;Player.height+=1.7;}if(Player.height>2){Player.height=2;}}if(!flyOn){if(Game.jump&&Player.y==0+Player.maxHeight||Game.jump&&Player.y<=0.5+Player.maxHeight&&Player.y>=0+Player.maxHeight){inJump=true;Player.jumpHeight=8+Player.maxHeight;if(Display.themeNum==4){Player.jumpHeight=12+Player.maxHeight;}}if(inJump&&Player.y<Player.jumpHeight){Player.y+=0.4;}else {if(inJump&&Player.y>=Player.jumpHeight){inJump=false;}}if(Player.y>=Render3D.ceilingDefaultHeight){Player.y=Render3D.ceilingDefaultHeight;}if(Player.y>0+Player.maxHeight&&!crouching&&!inJump){Player.y-=fallSpeed;fallAmount-=fallSpeed;fallSpeed=fallSpeed+(fallSpeed*acceleration);}}else {if(Game.jump){Player.y+=0.8;}if(Player.y>=Render3D.ceilingDefaultHeight){Player.y=Render3D.ceilingDefaultHeight;}}if(Player.y<0.4+Player.maxHeight&&Player.y>-0.4+Player.maxHeight){Player.y=0+Player.maxHeight;inJump=false;fallSpeed=0.4;}if(Player.y<=-7+Player.maxHeight&&!crouching){Player.y=-7+Player.maxHeight;inJump=false;fallSpeed=0.4;}if(fallAmount>0){if(!godModeOn&&Player.immortality==0){Player.health-=(int)(5*(fallAmount/25));}fallAmount=0;}if(Game.unlimAmmo&&time==0){if(unlimitedAmmoOn){unlimitedAmmoOn=false;}else {unlimitedAmmoOn=true;}time++;}if(shot){if(Game.shoot){shot=false;}if(!Player.weapons[Player.weaponEquipped].shoot()){if(Player.weapons[Player.weaponEquipped].ammo<=0){SoundController.ammoOut.playAudioFile();}}}if(Game.weaponSlot0){Player.weaponEquipped=0;}if(Game.weaponSlot1&&Player.weapons[1].canBeEquipped){Player.weaponEquipped=1;}else {if(Game.weaponSlot1){Display.itemPickup=""No Weapon yet"";Display.itemPickupTime++;}}if(Game.weaponSlot2&&Player.weapons[2].canBeEquipped){Player.weaponEquipped=2;}else {if(Game.weaponSlot2){Display.itemPickup=""No Weapon yet"";Display.itemPickupTime++;}}if(Game.weaponSlot3&&Player.weapons[3].canBeEquipped){Player.weaponEquipped=3;}else {if(Game.weaponSlot3){Display.itemPickup=""No Weapon yet"";Display.itemPickupTime++;}}if(Game.reloading&&time==0){if(Player.weapons[Player.weaponEquipped].reload()){time++;SoundController.reload.playAudioFile();}}}else {rotationa+=0.001;}if(time!=0){time++;}if(time==25){time=0;}if(time2!=0){time2++;}if(time2==11){time2=0;}if(Game.fpsShow&&time==0){if(showFPS){showFPS=false;}else {showFPS=true;}time++;}if(Game.pause){Display.pauseGame=true;quitGame=true;}if(Game.use&&Player.alive){boolean anyActivated=false;if(Game.buttons.size()>0){for(int i=0;i<Game.buttons.size();i++){Button button=Game.buttons.get(i);if(Math.abs(button.getZ()-Player.z)<=0.95&&Math.abs(button.getX()-Player.x)<=0.95&&!button.pressed){button.pressed=true;button.activated=true;anyActivated=true;SoundController.buttonPress.playAudioFile();useTime=0;useTime++;}}}for(int i=0;i<Game.doors.size();i++){Door door=Game.doors.get(i);if(Math.abs(door.getZ()-Player.z)<=0.95&&Math.abs(door.getX()-Player.x)<=0.95){if(door.doorType==0||door.doorType==1&&Player.hasRedKey||door.doorType==2&&Player.hasBlueKey||door.doorType==3&&Player.hasGreenKey||door.doorType==4&&Player.hasYellowKey){door.activated=true;anyActivated=true;}else {if(door.doorType==1&&!Player.hasRedKey){Display.itemPickup=""You need the red keycard!"";Display.itemPickupTime=1;}else {if(door.doorType==2&&!Player.hasBlueKey){Display.itemPickup=""You need the blue keycard!"";Display.itemPickupTime=1;}else {if(door.doorType==3&&!Player.hasGreenKey){Display.itemPickup=""You need the green keycard!"";Display.itemPickupTime=1;}else {Display.itemPickup=""You need the yellow keycard!"";Display.itemPickupTime=1;}}}}}}for(int i=0;i<Game.elevators.size();i++){Elevator elevator=Game.elevators.get(i);if(Math.abs(elevator.getZ()-Player.z)<=0.95&&Math.abs(elevator.getX()-Player.x)<=0.95){elevator.activated=true;anyActivated=true;useTime=0;useTime++;}}if(!anyActivated&&useTime==0){SoundController.tryToUse.playAudioFile();useTime++;}if(useTime<21&&useTime>0){useTime++;}else {useTime=0;}}else {if(Game.use&&!Player.alive){new Player();if(Game.setMap){game.loadNextMap(false,"""");}else {game.display.restartSurvival();}}else {useTime=0;}}if(Game.noClip&&time==0){time++;if(!noClipOn){noClipOn=true;}else {noClipOn=false;}}if(Game.godMode&&time==0){time++;if(!godModeOn){godModeOn=true;}else {godModeOn=false;}}if(Game.fly&&time==0){if(!flyOn){fallSpeed=0.4;flyOn=true;inJump=false;}else {flyOn=false;fallAmount=Player.y-Player.maxHeight;if(Display.themeNum==4){fallAmount/=6;}}time++;}if(Game.superSpeed&&time==0){if(!superSpeedOn){superSpeedOn=true;}else {superSpeedOn=false;}time++;}if(superSpeedOn){moveSpeed*=4;}if(Game.restock){Player.weapons[0].ammo=Player.weapons[0].ammoLimit;Player.weapons[0].canBeEquipped=true;Player.weapons[0].dualWield=true;Player.weapons[1].ammo=Player.weapons[1].ammoLimit;Player.weapons[1].canBeEquipped=true;Player.weapons[2].ammo=Player.weapons[2].ammoLimit;Player.weapons[2].canBeEquipped=true;Player.weapons[3].ammo=Player.weapons[3].ammoLimit;Player.weapons[3].canBeEquipped=true;Display.itemPickup=""All Weapons Given!"";Display.itemPickupTime=1;}xa+=((moveX*Math.cos(Player.rotation))+(moveZ*Math.sin(Player.rotation)))*moveSpeed;za+=((moveZ*Math.cos(Player.rotation))-(moveX*Math.sin(Player.rotation)))*moveSpeed;double xEffects=0;double zEffects=0;double yEffects=0;if(Player.xEffects>0){xEffects=0.2;}else {if(Player.xEffects<0){xEffects=-0.2;}}if(Player.zEffects>0){zEffects=0.2;}else {if(Player.zEffects<0){zEffects=-0.2;}}if(Player.yEffects>0){yEffects=2;}else {if(Player.xEffects<0){yEffects=-2;}}Player.y+=(yEffects);if(isFree(Player.x+xa+(xEffects),Player.z)||noClipOn){Player.x+=xa+(xEffects);}if(isFree(Player.x,Player.z+za+(zEffects))||noClipOn){Player.z+=za+(zEffects);}Player.updateBuffs();try{if(Game.hurtingBlocks.contains(Player.blockOn.wallEntity)){Player.blockOn.wallEntity.activate();}if(Player.blockOn.wallItem.itemID==20){boolean activated=Player.blockOn.wallItem.activate();if(activated){Player.blockOn.wallItem=null;}}}catch(Exception e){}if(!Player.blockOn.isaDoor){Player.maxHeight=Player.blockOn.height+Player.blockOn.y;if(!crouching&&!inJump&&Player.y<Player.maxHeight){Player.y=Player.maxHeight;}}xa*=0.1;za*=0.1;Player.rotation+=rotationa;rotationa=0.0;Player.upRotate+=upRotationa;upRotationa=0.0;if(Player.upRotate>=2.8){Player.upRotate=2.8;}if(Player.upRotate<=0.3){Player.upRotate=0.3;}}"
3381	"private boolean isValidCoordinate(int row,int col){return row>=1&&col>=1;}"
3382	"public static boolean isUnix(){String os=System.getProperty(""os.name"").toLowerCase();return (os.indexOf(""nix"")>=0||os.indexOf(""nux"")>=0);}"
3383	"public Builder put(String key,String value){if(!UAStringUtil.isEmpty(value)){put(key,JsonValue.wrap(value));}else {map.remove(key);}return this;}"
3384	"@Override public void onScroll(){if(!summaryBehavior.isHideable()){navigationPresenter.onMapScroll();}}"
3385	"private void onTourPageResponse(SetListPageResponse response){if(response==null){Log.e(TAG,""Null tour page response"");deliverResponse();}Log.d(TAG,""Tour page response artist = ""+response.playlist.getArtist());if(response.itemsPerPage*(response.total/response.itemsPerPage)!=response.total){response.total=(response.itemsPerPage*(response.total/response.itemsPerPage))-response.total;}if(response.pageNum>=response.total/response.itemsPerPage){deliverResponse();}else {requestTourPage(response.tourName,response.playlist,response.pageNum+1);}}"
3386	"private ObservableList<String> retrieveVariablesFromCondition(String conditionLine){ObservableList<String> variablesInConditionList=FXCollections.observableArrayList();int index1=conditionLine.indexOf("" "");String lineAux=null;String line=conditionLine.substring(index1,conditionLine.length()).trim();String variable=null;variable=line.substring(line.indexOf("" "")+1,line.indexOf("" is ""));line=line.substring(variable.length()+1,line.length());variablesInConditionList.add(variable);index1=line.indexOf("" And "");if(index1==-1){index1=line.indexOf("" Or "");}lineAux=line;if(index1!=-1){while(line.indexOf("" And "")!=-1){line=line.substring(index1,line.length());variable=line.substring(4,line.indexOf("" is ""));variablesInConditionList.add(variable.trim());line=line.substring(4,line.length());index1=line.indexOf("" And "");}line=lineAux;index1=line.indexOf("" Or "");while(index1!=-1){line=line.substring(index1,line.length());variable=line.substring(3,line.indexOf("" is ""));variablesInConditionList.add(variable.trim());line=line.substring(4,line.length());index1=line.indexOf("" Or "");}}return variablesInConditionList;}"
3387	"public boolean isValid(){return !(StringUtils.isEmpty(username)||StringUtils.isEmpty(about)||StringUtils.isEmpty(name)||StringUtils.isEmpty(email));}"
3388	"@Override public void onLoadFinished(Loader loader,Object data){if(loader.equals(mUserStocksLoader)){Cursor cursorData=(Cursor)data;swipeRefreshLayout.setRefreshing(false);if(cursorData.getCount()!=0){error.setVisibility(View.GONE);}adapter.setCursor(cursorData);}else {if(loader.equals(mAvailableSymbolsLoader)){Cursor cursorData=(Cursor)data;List<String> c=new ArrayList<String>();while(cursorData.moveToNext()){c.add(cursorData.getString(0));}autoCompleteAdapter.clear();autoCompleteAdapter.addAll(c);addStockDialog.setAdapter(autoCompleteAdapter);}else {if(loader.equals(mDownloadSymbolsLoader)){if((Integer)(data)>0){PrefUtils.updateSymbolListLastUpdated(getActivity());}Log.d(MainFragment.class.getSimpleName(),""Fuck Inserted Symbols :: ""+data.toString());}}}}"
3389	"public static ArrayList<HashSet<String>> getRoom(String buildingName){lock.lock();try{if(rooms.size()==12&&rooms.get(0)!=null&&rooms.get(0).containsKey(buildingName)){ArrayList<HashSet<String>> res=new ArrayList<>();for(int i=0;i<12;++i){HashSet<String> roomSet=new HashSet<>();for(String roomName : rooms.get(i).get(buildingName).getRoomList()){roomSet.add(extractRoomName(roomName));}res.add(roomSet);}return res;}else {return null;}}finally{lock.unlock();}}"
3390	"protected void onDateClicked(DayView dayView){ final int currentMonth=getCurrentDate().getMonth(); final int selectedMonth=dayView.getDate().getMonth();if(calendarMode==CalendarMode.MONTHS){if(allowClickDaysOutsideCurrentMonth||currentMonth==selectedMonth){if(currentMonth>selectedMonth){goToPrevious();}else {if(currentMonth<selectedMonth){goToNext();}}onDateClicked(dayView.getDate(),!dayView.isChecked());}}else {onDateClicked(dayView.getDate(),!dayView.isChecked());}}"
3391	"void removeMigrations(List<String> migrationNames) throws VPlexApiException{s_logger.info(""Removing records for migrations {}"",migrationNames);VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);StringBuilder migrationArgBuilder=new StringBuilder();for(VPlexMigrationInfo migrationInfo : migrationInfoList){String migrationStatus=migrationInfo.getStatus();if((!VPlexApiConstants.MIGRATION_COMMITTED.equals(migrationStatus))&&(!VPlexApiConstants.MIGRATION_CANCELED.equals(migrationStatus))){throw VPlexApiException.exceptions.cantRemoveMigrationInvalidState(migrationInfo.getName());}if(migrationArgBuilder.length()!=0){migrationArgBuilder.append("","");}migrationArgBuilder.append(migrationInfo.getPath());}removeCommittedOrCanceledMigrations(migrationArgBuilder.toString());}"
3392	"public static void main(String[] args) throws IOException{HashMap<String,Integer> hashmap=new HashMap<String,Integer>();HashMap<String,Integer> userMap=new HashMap<String,Integer>();List<String> uniqueSet=new ArrayList<String>();Pattern p8=Pattern.compile("".{1,50}www.{1,500}"");String[] fileNames={""webmd_addiction"",""webmd_adhd"",""webmd_breast_cancer"",""webmd_diabetes"",""webmd_diet"",""webmd_fkids"",""webmd_heart"",""webmd_ms"",""webmd_pain"",""webmd_sexualhealth""};for(String fileLog : fileNames){hashmap=new HashMap<String,Integer>();userMap=new HashMap<String,Integer>();uniqueSet=new ArrayList<String>();BufferedReader br=new BufferedReader(new FileReader(""data/""+fileLog+"".csv""));List<String> qidArray=new ArrayList<String>();BufferedReader in=new BufferedReader(new FileReader(""data/""+fileLog+""_staff_qid.csv""));BufferedWriter writer=new BufferedWriter(new FileWriter(""test/""+fileLog+""_staff_qid.txt""));String s=in.readLine();while((s=in.readLine())!=null){qidArray.add(s);}while(br.ready()){String check=br.readLine();String[] tokenizedTerms=check.split("","");String nameToken=tokenizedTerms[1];if(qidArray.contains(nameToken)){if((check.contains(""www""))|(check.contains(""http""))){String check2="" "";String check3="" "";Matcher m8=p8.matcher(check);List<String> matchstring8=new ArrayList<String>();while(m8.find()){check2=check2+""""+m8.group();matchstring8.add(m8.group());}Pattern p9=Pattern.compile(""https?\\:\\/\\/[\\-w\\.]*(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]|www\\.(\\:\\d+)?([\\w\\/\\_\\-\\.\\=\\?\\&\\%\\+\\@\\^\\~\\!\\#\\$]*)?[^www]"");Matcher m9=p9.matcher(check2);List<String> matchstring9=new ArrayList<String>();while(m9.find()){check3=check3+""""+m9.group();matchstring9.add(m9.group());}Pattern p10=Pattern.compile(""www.*?(\\.com(?=\\W)|\\.com\\,?\\)?|\\.org(?=\\W)|\\.ORG(?=\\W)|\\.net(?=\\W)|\\.gov(?=\\W)|\\.co.uk|\\.html|\\.htm|\\.asp|\\.aspx|\\.edu|\\.us|treatment|\\-men(?=\\W)|\\.pdf|\\.ca\\/servlet|\\.ch(?=\\W)|\\.coream(?=\\W)|\\.ee(?=\\W))|www.*?(?=\\/)|(?<=http\\:\\/\\/).*?(?=\\/)|(?<=https\\:\\/\\/).*?(?=\\/)"");Matcher m10=p10.matcher(check3);List<String> matchstring10=new ArrayList<String>();while(m10.find()){matchstring10.add(m10.group());for(int i=0;i<matchstring10.size();i++){if(uniqueSet.contains(matchstring10.get(i))){int elementCount=Integer.parseInt(hashmap.get(matchstring10.get(i)).toString());elementCount++;hashmap.put(matchstring10.get(i),elementCount);}else {uniqueSet.add(matchstring10.get(i));hashmap.put(matchstring10.get(i),1);}}}}}}br.close();SortedSet<Map.Entry<String,Integer>> sortedJournals=entriesSortedByValues(hashmap);for(Map.Entry<String,Integer> ent : sortedJournals){writer.write(ent.getKey()+""\t""+ent.getValue()+'\n');System.out.println(ent.getKey()+""\t""+ent.getValue());}writer.close();}}"
3393	"public TransferFunctionParam setDefaultAcceptLocal(boolean _defaultAcceptLocal){TransferFunctionParam ret=new TransferFunctionParam(this);ret._defaultAcceptLocal=_defaultAcceptLocal;return ret;}"
3394	"@Override protected Builder buildDialog(Bundle savedInstanceState){ final AlertDialog.Builder builder=super.buildDialog(savedInstanceState); final Bundle arguments=getArguments(); final String prefKey=arguments.getString(EXTRA_PREF_KEY);if(prefKey==null||prefKey.isEmpty()){return builder;}builder.setPositiveButton(arguments.getString(EXTRA_POSITIVE_LABEL),new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    savePreferences(prefKey,true);    mListener.onYes();  }}).setNegativeButton(arguments.getString(EXTRA_NEGATIVE_LABEL),new DialogInterface.OnClickListener(){  @Override public void onClick(  DialogInterface dialog,  int which){    savePreferences(prefKey,false);    mListener.onNo();  }});return builder;}"
3395	"public Integer getCeilingValue(Player p){Slot st=Slot.getPrimarySlot(p);return st==Slot.MR?(int)(MR_CONSTANT*getFutureAbility(p)):getFutureAbility(p);}"
3396	"private boolean resistant(Bacteria bacteria,AntibioticType antibiotic){if(!resistances.isEmpty()&&resistances.get(bacteria.getType())!=null&&resistances.get(bacteria.getType()).contains(antibiotic)&&!bacteria.isExempt(antibiotic)){return true;}else {boolean nowResistant=this.resistanceAlgorithm(bacteria.getType(),antibiotic);if(nowResistant){if(resistances.get(bacteria.getType())==null){List list=new ArrayList<>();list.add(antibiotic);resistances.put(bacteria.getType(),list);}else {resistances.get(bacteria.getType()).add(antibiotic);}for(AntibioticTower t : bacteriaToTower.keySet()){Object obj[]=bacteriaToTower.get(t).toArray();for(int i=0;i<obj.length;i++){Bacteria b=(Bacteria)obj[i];if(b.getType().equals(bacteria.getType())){b.setExempt(antibiotic);}}}resistanceString=bacteria.getType()+"" has become resistant to ""+antibiotic.toString();setChanged();ObserverMessage msg=new ObserverMessage(ObserverMessage.RESISTANCE,bacteria.getType()+"" has become resistant to ""+antibiotic);notifyObservers(msg);Log.d(""tag"",""Resistant? true"");return true;}else {Log.d(""tag"",""Resistant? false"");return false;}}}"
3397	"public static void validateSnapshotPolicyExpireParam(FileSnapshotPolicyParam param){boolean isValidSnapshotExpire;ArgValidator.checkFieldValueFromEnum(param.getSnapshotExpireParams().getExpireType().toUpperCase(),""expire_type"",EnumSet.allOf(FilePolicy.SnapshotExpireType.class));isValidSnapshotExpire=validateSnapshotExpireParam(param.getSnapshotExpireParams());if(!isValidSnapshotExpire){int expireTime=param.getSnapshotExpireParams().getExpireValue();_log.error(""Invalid schedule snapshot expire time {}. Try an expire time between {} hours to {} years"",expireTime,MIN_SNAPSHOT_EXPIRE_TIME,MAX_SNAPSHOT_EXPIRE_TIME);throw APIException.badRequests.invalidScheduleSnapshotExpireValue(expireTime,MIN_SNAPSHOT_EXPIRE_TIME,MAX_SNAPSHOT_EXPIRE_TIME);}}"
3398	"private void endGame(long gameId,String msg){Player a,b;Game g=core.getGames().get(gameId);if(g!=null){a=g.getBlack();b=g.getWhite();if((a=core.getLastConnection().get(a.getName()))!=null){core.getPlayers().get(a).add(""7,""+msg);a.setInGame(false,-1);}if((b=core.getLastConnection().get(b.getName()))!=null){core.getPlayers().get(b).add(""7,""+msg);b.setInGame(false,-1);}core.getGames().remove(g);}}"
3399	"@Override public IAnswerData getAnswer(){clearFocus();String s=answer.getText().toString();if(s==null||s.equals("""")){return null;}else {try{return new StringData(s);}catch(Exception numberFormatException){return null;}}}"
3400	"@Override public boolean equals(Object obj){if(!(obj instanceof Player)){return false;}Player that=(Player)obj;return ((Math.abs(that.getX()-this.getX())<0.01)&&(Math.abs(that.getY()-this.getY())<0.01));}"
3401	"@Override public void setTransaction(Transaction tran){this.tran=tran;if(this.tran==tran||tran==null){return ;}set_ix();if(iter!=null){iter=tran.iter(tbl.num(),icols,iter);}}"
3402	"public boolean hasNext(){return childIndex<totalEntryCount;}"
3403	"@Override public void updateLinkPoll(){if(mRepository==null){return ;}new UpdateTokenValidation(mLinkVoting.get(),mLinkManager.get()).validate(new UpdateTokenValidation.UpdateTokenCallback(){  @Override public void onSuccess(){    submitUpdateLink();  }  @Override public void onError(  UpdateTokenValidation.UpdateTokenError error){switch (error) {case LINK_USER:      mView.showMessage(R.string.msg_link_user_empty);    break;case LINK_ADMIN:  mView.showMessage(R.string.msg_link_admin_empty);break;default :break;}}});}"
3404	"@Override public void onClick(View v){if(v==mTitleView||v==mIconView){onLinkClicked();}}"
3405	"public void choosePlayers(JFrame frame){Object[] options={""Single Player"",""Two Players""};game.numPlayer=JOptionPane.showOptionDialog(frame,""Make your decision!"",""Make your decision!"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0])+1;game.p1Name=(String)JOptionPane.showInputDialog(frame,""Enter Player 1's name"",""Player 1"",JOptionPane.PLAIN_MESSAGE,null,null,""Player 1"");if(game.numPlayer==2){game.p2Name=(String)JOptionPane.showInputDialog(frame,""Enter Player 2's name"",""Player 2"",JOptionPane.PLAIN_MESSAGE,null,null,""Player 2"");}frame.setVisible(false);mainFrame();}"
3406	"@Override public Map<String,BigDecimal> calculateValues(PriceData priceData,Integer precision,boolean recalulcate){Map<String,BigDecimal> result=new HashMap<>();if(history.size()<period){addDataToHistory(priceData);result.put(""value"",null);return result;}BigDecimal averageGain;BigDecimal averageLoss;if(previousAverageGain!=null&&previousAverageLoss!=null){BigDecimal lastLoss=calculateLastLoss(priceData.getClose());BigDecimal lastGain=calculateLastGain(priceData.getClose());averageLoss=previousAverageLoss.multiply(BigDecimal.valueOf(period-1)).add(lastLoss).divide(BigDecimal.valueOf(period),precision*2,BigDecimal.ROUND_HALF_UP);averageGain=previousAverageGain.multiply(BigDecimal.valueOf(period-1)).add(lastGain).divide(BigDecimal.valueOf(period),precision*2,BigDecimal.ROUND_HALF_UP);}else {averageLoss=BigDecimal.ZERO;averageGain=BigDecimal.ZERO;for(int i=1;i<history.size();i++){BigDecimal diff=history.get(i).getClose().subtract(history.get(i-1).getClose());averageGain=averageGain.add(diff.compareTo(BigDecimal.ZERO)>0?diff:BigDecimal.ZERO);averageLoss=averageLoss.add(diff.compareTo(BigDecimal.ZERO)<0?diff.negate():BigDecimal.ZERO);}averageGain=averageGain.divide(BigDecimal.valueOf(period),precision*2,BigDecimal.ROUND_HALF_UP);averageLoss=averageLoss.divide(BigDecimal.valueOf(period),precision*2,BigDecimal.ROUND_HALF_UP);}previousAverageGain=averageGain;previousAverageLoss=averageLoss;BigDecimal resultValue=null;if(averageGain!=null&&averageLoss!=null){BigDecimal relativeStrength=averageLoss.compareTo(BigDecimal.ZERO)>0?averageGain.divide(averageLoss,precision*2,BigDecimal.ROUND_HALF_UP):BigDecimal.ZERO;resultValue=BigDecimal.valueOf(100).subtract(BigDecimal.valueOf(100).divide(BigDecimal.ONE.add(relativeStrength),precision,BigDecimal.ROUND_HALF_UP));}addDataToHistory(priceData);result.put(""value"",resultValue);return result;}"
3407	"public Object visitConstant(Constant constant,Object arg){if(null!=(substitution=unifier.unify(toMatch,constant))){if(isValidMatch(toMatch,toMatchVariables,constant,substitution)){matchingTerm=constant;}}return constant;}"
3408	"@Override public boolean isEmpty(){return this.stacks.length==0;}"
3409	"public int bufferMessages() throws AndesException{MessageBucket messageBucket=new MessageBucket(queue,readButUndeliveredMessages);long startMessageID=IdOfLastMessageRead+1;if(metadataCache.isOperational()){metadataCache.readMessagesFromCache(messageCountToRead,messageBucket);if(messageBucket.numberOfMessagesRead()==0){readMessagesFromMessageStore(startMessageID,messageCountToRead,messageBucket);if(messageBucket.numberOfMessagesRead()>0){metadataCache.disable();}}}else {readMessagesFromMessageStore(startMessageID,messageCountToRead,messageBucket);}if(messageBucket.lastMessageRead()!=null){IdOfLastMessageRead=messageBucket.lastMessageRead().getMessageID();}return messageBucket.numberOfMessagesRead();}"
3410	"public void saveSettings(View view){Log.d(TAG,""on click save"");err_username.setVisibility(View.INVISIBLE);err_password.setVisibility(View.INVISIBLE);err_confirm_password.setVisibility(View.INVISIBLE);err_email.setVisibility(View.INVISIBLE);SharedPreferences.Editor editor=getInstance().edit();Log.d(TAG,txt_confirm_password.getText()+"""");boolean flag=false;if(txt_username.getText().toString().equals("""")){err_username.setVisibility(View.VISIBLE);err_username.setText(getString(R.string.username_required));flag=true;}if(txt_email.getText().toString().equals("""")){err_email.setVisibility(View.VISIBLE);err_email.setText(getString(R.string.email_required));flag=true;}if(txt_password.getText().toString().equals("""")){err_password.setVisibility(View.VISIBLE);err_password.setText(getString(R.string.password_required));flag=true;}if(txt_confirm_password.getText().toString().equals("""")){err_confirm_password.setVisibility(View.VISIBLE);err_confirm_password.setText(getString(R.string.conf_password_required));flag=true;}if(flag){return ;}else {if(!txt_confirm_password.getText().toString().equals(txt_password.getText().toString())){err_confirm_password.setText(getString(R.string.password_not_match));err_confirm_password.setVisibility(View.VISIBLE);return ;}else {if(isValidEmail(txt_email.getText())){editor.putBoolean(getString(R.string.key_registered),true);editor.putString(getString(R.string.key_username),txt_username.getText().toString());editor.putString(getString(R.string.key_password),txt_password.getText().toString());editor.putString(getString(R.string.key_email),txt_email.getText().toString());editor.putBoolean(getString(R.string.key_login),true);editor.commit();Toast.makeText(this,""User registered successfully."",Toast.LENGTH_LONG).show();Intent intent=new Intent(this,MainActivity.class);intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);startActivity(intent);finish();}else {err_email.setVisibility(View.VISIBLE);err_email.setText(getString(R.string.email_error));}}}}"
3411	"public boolean isLine(){return light.getLightValue()>=LINE_VALUE;}"
3412	"@Override public boolean register(String clientName,String duration) throws RemoteException{if(clientName==null||clientName.charAt(0)=='!'||clientName.charAt(0)=='$'||clientProxies.containsKey(clientName)){System.out.println(""Client Name is invalid!"");return false;}int timelimit;if(duration==null){timelimit=Config.ClientTimeDefault;}else {String time[]=duration.split("":"");if(time.length==1){timelimit=Integer.parseInt(time[0]);}else {timelimit=Integer.parseInt(time[0])*60+Integer.parseInt(time[1]);}}if(timelimit>Config.ClientTimeLimit){return false;} final ClientProxy clientProxy=new ClientProxy(clientName,timelimit);clientProxies.put(clientName,clientProxy);clientProxy.start();Logger.getLogger(this.getClass().getName()).log(Level.INFO,""Client {0} starts!"",clientName);return true;}"
3413	"private ArrayList<Cell> getNeighbours(Cell parent,Cell[][] grid,boolean diagonalIsAlowed){ArrayList<Cell> nei=new ArrayList<>();int x=parent.getX();int y=parent.getY();if(x<SIZE-1&&open(x+1,y)){nei.add(grid[y][x+1]);}if(x<SIZE-1&&y<SIZE-1&&open(x+1,y+1)&&diagonalIsAlowed){nei.add(grid[y+1][x+1]);}if(y<SIZE-1&&open(x,y+1)){nei.add(grid[y+1][x]);}if(x>0&&y<SIZE-1&&open(x-1,y+1)&&diagonalIsAlowed){nei.add(grid[y+1][x-1]);}if(x>0&&open(x-1,y)){nei.add(grid[y][x-1]);}if(x>0&&y>0&&open(x-1,y-1)&&diagonalIsAlowed){nei.add(grid[y-1][x-1]);}if(y>0&&open(x,y-1)){nei.add(grid[y-1][x]);}if(x+1<SIZE-1&&y>0&&open(x+1,y-1)&&diagonalIsAlowed){nei.add(grid[y-1][x+1]);}return nei;}"
3414	"@Override public String toString(){if(isWhite){return ""WP"";}return ""BP"";}"
3415	"private void resolveCollision(CollisionListener collisionListener){for(Entity entity : entities){if(entity.getTimeToOutOfBounds()==0){if(collisionListener!=null){collisionListener.boundaryCollision(entity,entity.getLocation().getX(),entity.getLocation().getY());}resolveBoundaryCollision(entity);break;}for(Entity otherEntity : entities){if(entity==otherEntity){continue;}if(!entity.apparentlyCollidesWith(otherEntity)){continue;}if(collisionListener!=null){collisionListener.objectCollision(entity,otherEntity,entity.getLocation().getX(),entity.getLocation().getY());}if((entity instanceof Ship)&&(otherEntity instanceof Ship)){((Ship)entity).collide((Ship)otherEntity);}else {if((entity instanceof Bullet)&&(otherEntity instanceof Bullet)){entity.terminate();otherEntity.terminate();entities.remove(entity);entities.remove(otherEntity);}else {if((entity instanceof Ship)&&(otherEntity instanceof Bullet)){if(((Bullet)otherEntity).getBulletSource()==entity){((Ship)entity).addBullet((Bullet)otherEntity);}else {entity.terminate();otherEntity.terminate();entities.remove(entity);entities.remove(otherEntity);}}else {if((entity instanceof Bullet)&&(otherEntity instanceof Ship)){if(((Bullet)entity).getBulletSource()==otherEntity){((Ship)otherEntity).addBullet((Bullet)entity);}else {entity.terminate();otherEntity.terminate();entities.remove(entity);entities.remove(otherEntity);}}else {throw new AssertionError();}}}}}}}"
3416	"public static List<Object> loadCache(Sheet sheet,int firstRowNum,int lastRowNum){Row headRow=sheet.getRow(firstRowNum);List<Object> data=new ArrayList<>();for(int i=firstRowNum+1;i<lastRowNum+1;i++){Row row=sheet.getRow(i);if(row==null){continue;}Map<String,Object> map=new TreeMap<String,Object>();for(int j=row.getFirstCellNum();j<row.getLastCellNum();j++){Cell cell=row.getCell(j);if(cell==null){break;}else {map.put(headRow.getCell(j).getStringCellValue(),readCell(cell));}}if(!map.isEmpty()){data.add(map);}}return data;}"
3417	"public String format(String format,Locale locale,String timeZone){DateTimeFormatter df=DateTimeFormatter.ofPattern(format);if(locale!=null){df=df.withLocale(locale);}ZoneId zone=null;if(timeZone!=null){try{zone=ZoneId.of(timeZone);}catch(DateTimeException e){LOGGER.warn(e.getMessage());}}if(zone==null){zone=ZoneId.systemDefault();}df=df.withZone(zone);if(LOGGER.isDebugEnabled()){String msg=MessageFormat.format(""DateTime ''{0}'', using time zone ''{1}'', formatted: {2}"",dt,zone,dt!=null?df.format(dt):null);LOGGER.debug(msg);}String formatted=null;try{formatted=dt==null?null:format.indexOf(""G"")==-1?df.format(dt):df.format(dt).replace(""-"","""");}catch(Exception e){LOGGER.error(""Could not format date"",e);}return formatted;}"
3418	"@Override public boolean hasNext(){return count+1<values.size();}"
3419	"@Override public boolean execute(LivingEntity caster,int level,List<LivingEntity> targets){if(targets.size()==0){return false;}String key=settings.getString(KEY);double seconds=settings.get(SECONDS,level);int ticks=(int)(seconds*20);for(LivingEntity target : targets){FlagManager.addFlag(target,key,ticks);}return true;}"
3420	"public static boolean isRecurValid(ReadOnlyTask task){assert (task!=null);String taskStartDate=task.getStartDate().toString();String taskDueDate=task.getDueDate().toString(); final boolean isStartDateMissing=taskStartDate.isEmpty(); final boolean isDueDateMissing=taskDueDate.isEmpty();if(isStartDateMissing&&isDueDateMissing){return false;}else {return true;}}"
3421	"public void subCaptain(User sub,User target){if(!isPlayerIngame(sub)){if(!isPlayerIngame(target)){Game g=getPlayersGame(sub);if(g.getStatus()==Status.PICKING){if(g.getCaptains()[0]==target||g.getCaptains()[1]==target){if(g.getCaptains()[0]!=sub&&g.getCaptains()[1]!=sub){g.subCaptain(sub,target);}else {throw new InvalidUseException(""You are already a captain"");}}else {throw new InvalidUseException(target+"" is not in your game"");}}else {throw new InvalidUseException(""Game is already being played"");}}else {throw new InvalidUseException(target.getName()+"" is not in-game"");}}else {throw new InvalidUseException(""You are not in-game"");}}"
3422	"private void getTasks(Vector<String> tasks){boolean moreTasks=true;boolean firstTask=true;String addAnotherTask="""";String taskInput;while(moreTasks){if(firstTask){clearPrint(""Would you like to add a task for this event? Enter: 'y' or 'n' (Without quotes)"");addAnotherTask=scan.nextLine();while(addAnotherTask.charAt(0)!='y'&&addAnotherTask.charAt(0)!='n'){clearPrint(""Error! Invalid input\n\nWould you like to add a task for this event? Enter: 'y' or 'n' (Without quotes)"");addAnotherTask=scan.nextLine();}}else {clearPrint(""Would you like to add another task for this event? Enter: 'y' or 'n' (Without quotes)"");addAnotherTask=scan.nextLine();while(addAnotherTask.charAt(0)!='y'&&addAnotherTask.charAt(0)!='n'){clearPrint(""Error! Invalid input\n\nWould you like to add another task for this event? Enter: 'y' or 'n' (Without quotes)"");addAnotherTask=scan.nextLine();}}if(addAnotherTask.charAt(0)=='y'){clearPrint(""What is the task?"");taskInput=scan.nextLine();while(taskInput.length()==0){clearPrint(""Error! Task input cannot be blank\n\nWhat is the task?"");taskInput=scan.nextLine();}tasks.addElement(taskInput);}else {moreTasks=false;}}}"
3423	"@Override public void run(){try{System.out.println(""In thread for check position"");this.distConfig=DistConfig.get_Instance();BufferedReader inStream=new BufferedReader(new InputStreamReader(client.getInputStream()));System.out.println(""Got the input stream"");BufferedOutputStream bos=new BufferedOutputStream(client.getOutputStream());PrintWriter outStream=new PrintWriter(bos,false);System.out.println(""Got the out stream"");ObjectOutputStream oos=new ObjectOutputStream(bos);System.out.println(""Got the object output stream"");System.out.println(""Sending the connection code"");outStream.println(ConnectionCodes.CHECKPOSITION);outStream.flush();System.out.println(""Waiting for node ID"");String newNodeID=(String)inStream.readLine();int newID=Integer.parseInt(newNodeID);NodeSearchTable dct=NodeSearchTable.get_Instance();int id=Integer.parseInt(dct.get_ownID());if(newID==id){newID=(newID+1)%distConfig.get_MaxNodes();outStream.println(ConnectionCodes.NEWID);outStream.println(Integer.toString(newID));outStream.flush();}int nextID=Integer.parseInt(dct.get_IDAt(0));if((id<newID&&newID<nextID)||(nextID<id&&id<newID)||(newID<nextID&&nextID<id)){outStream.println(ConnectionCodes.CORRECTPOSITION);outStream.flush();String[] ownInfo={Integer.toString(id),dct.get_ownIPAddress()};oos.writeObject(ownInfo);String[] nextInfo={Integer.toString(nextID),dct.get_IPAt(0)};oos.writeObject(nextInfo);oos.flush();}else {String ipAddress=dct.get_ownIPAddress();id=Integer.parseInt(dct.get_ownID());boolean found=false;for(int index=0;index<dct.size();index++){nextID=Integer.parseInt(dct.get_IDAt(index));if(newID>=id&&newID<nextID){found=true;}else {if(id>nextID&&newID>=id&&newID>nextID){found=true;}else {if(id>nextID&&newID<=id&&newID<nextID){found=true;}}}if(!found){id=nextID;ipAddress=dct.get_IPAt(index);}}outStream.println(ConnectionCodes.WRONGPOSITION);outStream.println(Integer.toString(id));outStream.println(ipAddress);outStream.flush();}oos.close();outStream.close();bos.close();inStream.close();client.close();}catch(IOException ex){Logger.getLogger(ServCheckPosition.class.getName()).log(Level.SEVERE,null,ex);}}"
3424	"@Override public int connect(byte aSide){int rConnect=0;if(aSide>=6){return rConnect;}IFluidHandler tTileEntity=getBaseMetaTileEntity().getITankContainerAtSide(aSide);GT_MetaPipeEntity_Fluid tFluidPipe=null;byte tSide=GT_Utility.getOppositeSide(aSide);if(tTileEntity!=null){if(tTileEntity instanceof IGregTechTileEntity){if(getBaseMetaTileEntity().getColorization()>=0){byte tColor=((IGregTechTileEntity)tTileEntity).getColorization();if(tColor>=0&&(tColor&15)!=(getBaseMetaTileEntity().getColorization()&15)){return rConnect;}}if(((IGregTechTileEntity)tTileEntity).getMetaTileEntity() instanceof GT_MetaPipeEntity_Fluid){tFluidPipe=(GT_MetaPipeEntity_Fluid)((IGregTechTileEntity)tTileEntity).getMetaTileEntity();}}FluidTankInfo[] tInfo=tTileEntity.getTankInfo(ForgeDirection.getOrientation(aSide).getOpposite());if(tInfo!=null){if(tInfo.length>0){if((tTileEntity instanceof ICoverable&&((ICoverable)tTileEntity).getCoverBehaviorAtSide(tSide).alwaysLookConnected(tSide,((ICoverable)tTileEntity).getCoverIDAtSide(tSide),((ICoverable)tTileEntity).getCoverDataAtSide(tSide),((ICoverable)tTileEntity)))||getBaseMetaTileEntity().getCoverBehaviorAtSide(aSide).letsFluidIn(aSide,getBaseMetaTileEntity().getCoverIDAtSide(aSide),getBaseMetaTileEntity().getCoverDataAtSide(aSide),null,getBaseMetaTileEntity())||getBaseMetaTileEntity().getCoverBehaviorAtSide(aSide).alwaysLookConnected(aSide,getBaseMetaTileEntity().getCoverIDAtSide(aSide),getBaseMetaTileEntity().getCoverDataAtSide(aSide),getBaseMetaTileEntity())){rConnect=1;}if(getBaseMetaTileEntity().getCoverBehaviorAtSide(aSide).letsFluidOut(aSide,getBaseMetaTileEntity().getCoverIDAtSide(aSide),getBaseMetaTileEntity().getCoverDataAtSide(aSide),null,getBaseMetaTileEntity())){rConnect=2;}}else {if(tInfo.length==0){IGregTechTileEntity tSideTile=getBaseMetaTileEntity().getIGregTechTileEntityAtSide(aSide);if(tSideTile!=null){ItemStack tCover=tSideTile.getCoverItemAtSide(tSide);if(tCover!=null&&(GT_Utility.areStacksEqual(tCover,ItemList.FluidRegulator_LV.get(1,new Object{},true))||GT_Utility.areStacksEqual(tCover,ItemList.FluidRegulator_MV.get(1,new Object{},true))||GT_Utility.areStacksEqual(tCover,ItemList.FluidRegulator_HV.get(1,new Object{},true))||GT_Utility.areStacksEqual(tCover,ItemList.FluidRegulator_EV.get(1,new Object{},true))||GT_Utility.areStacksEqual(tCover,ItemList.FluidRegulator_IV.get(1,new Object{},true)))){rConnect=1;}}}}}}if(rConnect>0){if(GT_Mod.gregtechproxy.gt6Pipe&&tFluidPipe!=null){if((mDisableInput==0||(tFluidPipe.mDisableInput&(1<<tSide))==0)){mConnections|=(1<<aSide);if((tFluidPipe.mConnections&(1<<tSide))==0){tFluidPipe.connect(tSide);}}}else {mConnections|=(1<<aSide);}}return rConnect;}"
3425	"public boolean isAuthenticated(){return isAuthenticated;}"
3426	"private String getPage(){String currentUrl=driver.getCurrentUrl();String[] split=currentUrl.split(STRING);if(split.length<7+mangaHasVolumes){return null;}String lastPart=split[split.length-1];return getStandarizedNumber(lastPart.substring(0,lastPart.length()-5));}"
3427	"public void pain(Combat c,Character other,int i,boolean primary,boolean physical){int pain=i;int bonus=0;if(is(Stsflag.rewired)&&physical){String message=String.format(""%s pleasured for <font color='rgb(255,50,200)'>%d<font color='white'>\n"",Global.capitalizeFirstLetter(subjectWas()),pain);if(c!=null){c.writeSystemMessage(message,true);}arouse(pain,c);return ;}if(has(Trait.slime)){bonus-=pain/2;if(c!=null){c.write(this,""The blow glances off ""+nameOrPossessivePronoun()+"" slimy body."");}}if(c!=null){if(has(Trait.cute)&&other!=null&&other!=this&&primary&&physical){bonus-=Math.min(get(Attribute.Seduction),50)*pain/100;c.write(this,Global.format(""{self:NAME-POSSESSIVE} innocent appearance throws {other:direct-object} off and {other:subject-action:use|uses} much less strength than intended."",this,other));}if(other!=null&&other!=this&&other.has(Trait.dirtyfighter)&&(c.getStance().prone(other)||c.getStance().sub(other))&&physical){bonus+=10;c.write(this,Global.format(""{other:SUBJECT-ACTION:know|knows} how to fight dirty, and {other:action:manage|manages} to give {self:direct-object} a lot more trouble than {self:subject} expected despite being in a compromised position."",this,other));}if(has(Trait.sacrosanct)&&physical&&primary){c.write(this,Global.format(""{other:SUBJECT-ACTION:well|wells} up with guilt at hurting such a holy being. {self:PRONOUN-ACTION:become|becomes} temporarily untouchable in {other:possessive} eyes."",this,other));add(c,new Alluring(this,1));}for(Status s : getStatuses()){bonus+=s.damage(c,pain);}}pain+=bonus;pain=Math.max(1,pain);emote(Emotion.angry,pain/3);int painAllowance=Math.max(10,getStamina().max()/6);if(other!=null&&other.has(Trait.wrassler)){painAllowance*=1.5;}int difference=pain-painAllowance;if(c!=null){c.writeSystemMessage(String.format(""%s hurt for <font color='rgb(250,10,10)'>%d<font color='white'>"",subjectWas(),pain),true);}if(difference>0&&!is(Stsflag.masochism)){if(other!=null&&other.has(Trait.wrassler)){calm(c,difference/2);}else {calm(c,difference);}}if(other!=null&&other.has(Trait.sadist)&&!is(Stsflag.masochism)){c.write(""<br/>""+Global.capitalizeFirstLetter(String.format(""%s blows hits all the right spots and %s to some masochistic tendencies."",other.nameOrPossessivePronoun(),subjectAction(""awaken""))));add(c,new Masochistic(this));}if(is(Stsflag.masochism)&&physical){this.arouse(Math.max(i,painAllowance),c);}if(other!=null&&other.has(Trait.disablingblows)&&Global.random(5)==0){int mag=Global.random(3)+1;c.write(other,Global.format(""Something about the way {other:subject-action:hit|hits}""+"" {self:name-do} seems to strip away {self:possessive} strength."",this,other));add(c,new Abuff(this,Attribute.Power,-mag,10));}stamina.reduce(pain);}"
3428	"private void writeAnnotationList(List<Annotation> annoList,String id,JSONWriter jWriter,boolean isRequested) throws JSONException{jWriter.object();addIiifContext(jWriter,isRequested);jWriter.key(""@id"").value(id);jWriter.key(""@type"").value(IIIFNames.SC_ANNOTATION_LIST);jWriter.key(""resources"");jWriter.array();for(Annotation anno : annoList){writeJsonld(anno,jWriter,false);}jWriter.endArray();jWriter.endObject();}"
3429	"@Override public void onCompletion(MediaPlayer mp){Button bSort=(Button)findViewById(R.id.sort);if((bSort.getText().subSequence(5,9).equals(""user"")&&addMenu.getVisibility()==addMenu.VISIBLE)|(mainMenu.getVisibility()==mainMenu.VISIBLE&&isUserMadeQueue.get(roomNum))){mediaPlayer=new MediaPlayer();try{mediaPlayer.setDataSource(roomString);mediaPlayer.prepare();}catch(IOException e){Log.e(LOG_TAG,""prepare() failed"");}}else {int id=getResources().getIdentifier(roomString,""raw"",getPackageName());mediaPlayer=MediaPlayer.create(getApplicationContext(),id);}mediaPlayer.start();mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){  @Override public void onCompletion(  MediaPlayer mp){    if (mainMenu.getVisibility() == mainMenu.VISIBLE) {      Button b1=(Button)findViewById(R.id.play);      b1.setText(""play"");    } else {      Button b2=(Button)findViewById(R.id.sound);      b2.setText(""play"");    }    isPlaying=false;  }});}"
3430	"private EnvVars getNewMasterEnvironmentVariables(Computer c,FilePath nodePath,TaskListener listener) throws EnvInjectException,IOException,InterruptedException{Map<String,String> nodeEnvVars=nodePath.act(new Callable<Map<String,String>,IOException>(){  public Map<String,String> call() throws IOException {    return EnvVars.masterEnvVars;  }});EnvInjectLogger logger=new EnvInjectLogger(listener);EnvInjectEnvVars envInjectEnvVarsService=new EnvInjectEnvVars(logger);boolean unsetSystemVariables=false;Map<String,String> globalPropertiesEnvVars=new HashMap<String,String>();for(NodeProperty<?> nodeProperty : Hudson.getInstance().getGlobalNodeProperties()){if(nodeProperty instanceof EnvironmentVariablesNodeProperty){globalPropertiesEnvVars.putAll(((EnvironmentVariablesNodeProperty)nodeProperty).getEnvVars());}if(nodeProperty instanceof EnvInjectNodeProperty){EnvInjectNodeProperty envInjectNodeProperty=((EnvInjectNodeProperty)nodeProperty);unsetSystemVariables=envInjectNodeProperty.isUnsetSystemVariables();globalPropertiesEnvVars.putAll(envInjectEnvVarsService.getEnvVarsFileProperty(c.getNode().getRootPath(),logger,envInjectNodeProperty.getPropertiesFilePath(),null,nodeEnvVars));}}envInjectEnvVarsService.resolveVars(globalPropertiesEnvVars,nodeEnvVars);EnvVars envVars2Set=new EnvVars();if(!unsetSystemVariables){envVars2Set.putAll(nodeEnvVars);}envVars2Set.putAll(globalPropertiesEnvVars);return envVars2Set;}"
3431	"private void restoreOmittedBidirectionalFields(PlannerBenchmarkResult plannerBenchmarkResult){for(ProblemBenchmarkResult problemBenchmarkResult : plannerBenchmarkResult.getUnifiedProblemBenchmarkResultList()){problemBenchmarkResult.setPlannerBenchmarkResult(plannerBenchmarkResult);if(problemBenchmarkResult.getProblemStatisticList()==null){problemBenchmarkResult.setProblemStatisticList(new ArrayList<ProblemStatistic>(0));}for(ProblemStatistic problemStatistic : problemBenchmarkResult.getProblemStatisticList()){problemStatistic.setProblemBenchmarkResult(problemBenchmarkResult);}for(SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()){singleBenchmarkResult.setProblemBenchmarkResult(problemBenchmarkResult);}}for(SolverBenchmarkResult solverBenchmarkResult : plannerBenchmarkResult.getSolverBenchmarkResultList()){solverBenchmarkResult.setPlannerBenchmarkResult(plannerBenchmarkResult);for(SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()){singleBenchmarkResult.setSolverBenchmarkResult(solverBenchmarkResult);if(singleBenchmarkResult.getPureSingleStatisticList()==null){singleBenchmarkResult.setPureSingleStatisticList(new ArrayList<PureSingleStatistic>(0));}for(PureSingleStatistic pureSingleStatistic : singleBenchmarkResult.getPureSingleStatisticList()){pureSingleStatistic.setSingleBenchmarkResult(singleBenchmarkResult);}}}}"
3432	"private FoodInfo getInfoForCurrentLine(String currentLine){FoodInfo currentFoodInfo=new FoodInfo();String[] parts=currentLine.split(Pattern.quote(""^""));double[] nutInfo=new double[parts.length-7];for(int i=0;i<nutInfo.length;i++){nutInfo[i]=Double.parseDouble(parts[i+2]);}if(nutInfo.length!=NUM_NUTRITION_FIELDS){throw new ParsingException(""File format problem"");}setNutritionalInfo(currentFoodInfo,nutInfo,parts[1]);return currentFoodInfo;}"
3433	"public void deleteDossierTemplateById(long dossierTemplateId) throws SystemException,NoSuchDossierTemplateException{int dossierPartCounts=dossierPartPersistence.countByDossierTemplateId(dossierTemplateId);if(dossierPartCounts==0){dossierTemplatePersistence.remove(dossierTemplateId);}}"
3434	"@Override public boolean clearIndexes(LocalRegion region,DiskRegion dr,boolean lockForGII,boolean holdIndexLock,Iterator<?> bucketEntriesIter,int bucketId){EmbedConnection conn=null;GemFireContainer gfc=null;LanguageConnectionContext lcc=null;GemFireTransaction tc=null;boolean tableLockAcquired=false;boolean giiLockAcquired=false;LogWriter logger=Misc.getCacheLogWriterNoThrow();try{ final List<GemFireContainer> indexes=this.indexContainers;conn=GemFireXDUtils.getTSSConnection(false,true,false);lcc=conn.getLanguageConnectionContext();tc=(GemFireTransaction)lcc.getTransactionExecute();gfc=(GemFireContainer)region.getUserAttribute();gfc.open(tc,ContainerHandle.MODE_READONLY);tableLockAcquired=true;boolean needToAcquireWriteLockOnGIILock=true;if(holdIndexLock){boolean isReplicated=!this.isPartitionedRegion;if(isReplicated&&Misc.initialDDLReplayInProgress()){if(!this.container.getRegion().isInitialized()){needToAcquireWriteLockOnGIILock=false;}}}if(needToAcquireWriteLockOnGIILock){if(lockForGII){giiLockAcquired=lockForGII(holdIndexLock,tc);}}if(!region.isUsedForPartitionedRegionBucket()&&bucketId==KeyInfo.UNKNOWN_BUCKET){if(indexes!=null){for(GemFireContainer index : indexes){index.clear(lcc,tc);}}return giiLockAcquired;}RegionEntry entry;boolean isOffHeapEnabled=region.getEnableOffHeapMemory();if(isOffHeapEnabled||indexes!=null){while(bucketEntriesIter.hasNext()){entry=(RegionEntry)bucketEntriesIter.next();try{if(indexes!=null){basicClearEntry(region,dr,tc,indexes,entry,bucketId);}}catch(Throwable th){if(logger!=null&&!destroyOffline){logger.error(""Exception in removing the entry from index. ""+""Ignoring & continuing the loop "",th);}}finally{if(isOffHeapEnabled){((AbstractRegionEntry)entry).release();}}}}}catch(Throwable t){Error err;if(t instanceof Error&&SystemFailure.isJVMFailureError(err=(Error)t)){SystemFailure.initiateFailure(err);throw err;}handleException(t,""GfxdIndexManager#clearIndexes: unexpected exception"",lcc,null,null);}finally{if(!holdIndexLock){unlockForGII(false,tc);}if(tableLockAcquired){gfc.closeForEndTransaction(tc,false);}}return giiLockAcquired;}"
3435	"private void calculateMetricsFromRepairnatorJsonFile(File[] files){try{for(int i=0;i<files.length;i++){String branchName=files[i].getName().replace(""_repairnator.json"","""");if(!isInterestingBranch(branchName)){continue;}JSONParser parser=new JSONParser();JSONObject bug=(JSONObject)parser.parse(new FileReader(files[i]));String projectName=(String)bug.get(""repo"");if(listOfProjectsA.contains(projectName)||listOfProjectsB.contains(projectName)||listOfProjectsG.contains(projectName)){this.numberOfBugs++;if(!this.projectsToBugsMap.keySet().contains(projectName)){this.projectsToBugsMap.put(projectName,0);}this.projectsToBugsMap.put(projectName,this.projectsToBugsMap.get(projectName)+1);String bugType=(String)bug.get(""bugType"");if(!this.bugTypesToCounterMap.keySet().contains(bugType)){this.bugTypesToCounterMap.put(bugType,0);}this.bugTypesToCounterMap.put(bugType,this.bugTypesToCounterMap.get(bugType)+1);JSONArray failingTestCases=(JSONArray)bug.get(""failing-test-cases"");Iterator failingTestCasesIterator=failingTestCases.iterator();while(failingTestCasesIterator.hasNext()){JSONArray failures=(JSONArray)((JSONObject)failingTestCasesIterator.next()).get(""failures"");Iterator failuresIterator=failures.iterator();while(failuresIterator.hasNext()){String exceptionType=((JSONObject)failuresIterator.next()).get(""failureName"").toString().replace("":"","""");if(exceptionTypesOut.keySet().contains(exceptionType)){exceptionTypesOut.put(exceptionType,exceptionTypesOut.get(exceptionType)+1);}else {if(!this.exceptionTypesToProjectsToCounterMap.containsKey(exceptionType)){this.exceptionTypesToProjectsToCounterMap.put(exceptionType,new HashMap<String,Integer>());}if(!this.exceptionTypesToProjectsToCounterMap.get(exceptionType).containsKey(projectName)){this.exceptionTypesToProjectsToCounterMap.get(exceptionType).put(projectName,0);}this.exceptionTypesToProjectsToCounterMap.get(exceptionType).put(projectName,this.exceptionTypesToProjectsToCounterMap.get(exceptionType).get(projectName)+1);}if(!projectsToExceptionTypesToCounterMap.containsKey(projectName)){projectsToExceptionTypesToCounterMap.put(projectName,new HashMap<String,Integer>());}if(!projectsToExceptionTypesToCounterMap.get(projectName).containsKey(exceptionType)){projectsToExceptionTypesToCounterMap.get(projectName).put(exceptionType,0);}else {this.projectsToExceptionTypesToCounterMap.get(projectName).put(exceptionType,this.projectsToExceptionTypesToCounterMap.get(projectName).get(exceptionType)+1);}}}}}System.out.println(""# Bugs: ""+this.numberOfBugs);System.out.println(""# Projects: ""+this.projectsToBugsMap.keySet().size());System.out.println(""\nBug types: "");for(Entry entry : this.bugTypesToCounterMap.entrySet()){System.out.println(""# ""+entry.getKey()+"": ""+entry.getValue());}System.out.println(""\n# Distinct exception types: ""+this.exceptionTypesToProjectsToCounterMap.keySet().size());System.out.println(""\nException types out:"");for(String exceptionTypeOut : exceptionTypesOut.keySet()){System.out.println(exceptionTypeOut+"": ""+exceptionTypesOut.get(exceptionTypeOut));}createDistributionExceptionTypesByProjectsCsvFile();}catch(IOException e){e.printStackTrace();}catch(ParseException e){e.printStackTrace();}}"
3436	"public void moveUnit(Map<Integer,Hex> map,Civilization c,Hex focusHex,int scrollX,int scrollY){Hex fromHex=map.get(HexMap.hash(focusHex));if(!fromHex.canSetCivilian()||!fromHex.canSetMilitary()){int mouseX=MouseHandler.movedMX;int mouseY=MouseHandler.movedMY;HexCoordinate h=layout.pixelToHex(layout,new Point(mouseX-scrollX,mouseY-scrollY));Hex toHex=map.get(HexMap.hash(h));Unit cu=fromHex.getCivilianUnit();Unit mu=fromHex.getMilitaryUnit();Unit ctu=toHex.getCivilianUnit();Unit mtu=toHex.getMilitaryUnit();if(cu!=null&&ctu==null&&mu==null&&mtu!=null){if(sameOwner(cu,mtu)){swapUnit(fromHex,toHex,cu,mtu);}}else {if(cu==null&&ctu!=null&&mu!=null&&mtu==null){if(sameOwner(mu,ctu)){swapUnit(fromHex,toHex,mu,ctu);}}else {if((cu!=null||mu!=null)&&ctu==null&&mtu==null){moveUnit(fromHex,toHex,cu!=null?cu:mu);}}}ui.setFocusedUnitPath(null);}}"
3437	"public boolean filter(BioPAXElement object){return object instanceof EntityReference;}"
3438	"public void loadContributorsPage(String callBack,String placeToken){if(placeToken.equalsIgnoreCase(PlaceTokens.LIFEBOARD)||placeToken.equalsIgnoreCase(PlaceTokens.AUTODESK)||placeToken.equalsIgnoreCase(PlaceTokens.COMMUNITY)||placeToken.equalsIgnoreCase(PlaceTokens.FTE)||placeToken.equalsIgnoreCase(PlaceTokens.GEOEDUCATION)||placeToken.equalsIgnoreCase(PlaceTokens.NGC)||placeToken.equalsIgnoreCase(PlaceTokens.FINCAPINC)||placeToken.equalsIgnoreCase(PlaceTokens.ONR)||placeToken.equalsIgnoreCase(PlaceTokens.PSDPAL)||placeToken.equalsIgnoreCase(PlaceTokens.LESSONOPOLY)||placeToken.equalsIgnoreCase(PlaceTokens.WSPWH)||placeToken.equalsIgnoreCase(PlaceTokens.YOUTHVOICES)||placeToken.equalsIgnoreCase(PlaceTokens.ESYP)||placeToken.equalsIgnoreCase(PlaceTokens.CCST_Cal_TAC)||placeToken.equalsIgnoreCase(PlaceTokens.TICAL)||placeToken.equalsIgnoreCase(PlaceTokens.ASPIRE_EPACS)){container.getElement().getStyle().setWidth(1000,Unit.PX);}else {container.getElement().getStyle().clearWidth();}setPlaceToken(placeToken);String courseId=AppClientFactory.getPlaceManager().getRequestParameter(COURSE_ID);String unitId=AppClientFactory.getPlaceManager().getRequestParameter(UNIT_ID);String subjectId=AppClientFactory.getPlaceManager().getRequestParameter(SUBJECT_NAME);String standardId=AppClientFactory.getPlaceManager().getRequestParameter(STANDARD_ID);subjectListId=subjectId;unitListId=unitId;standardListId=standardId;selectedPage=1;String callBackSignup=AppClientFactory.getPlaceManager().getRequestParameter(CALLBACK,null);String discoverUrl=Window.Location.getHref();if(!AppClientFactory.isAnonymous()){ final String loginType=AppClientFactory.getLoggedInUser().getLoginType()!=null?AppClientFactory.getLoggedInUser().getLoginType():"""";int flag=AppClientFactory.getLoggedInUser().getViewFlag();if(flag<=7&&!loginType.equalsIgnoreCase(""apps"")){Window.enableScrolling(false);}else {Window.enableScrolling(true);}}else {Window.enableScrolling(true);}if(callBack.equalsIgnoreCase(FEATURED_CONTRIBUTORS)){discoverUrl.replaceAll(""&page=""+FEATURED_CONTRIBUTORS,"""");AppClientFactory.fireEvent(new SetDiscoverLinkEvent(discoverUrl));featuredCourseTabs.setVisible(false);featuredCousesLbl.setVisible(false);landingBanner.setVisible(false);container.setVisible(false);contributorsContainer.setVisible(true);if((callBack!=previousCallBack)||(courseId!=previousCourseId)){if(courseMap!=null&&courseMap.get(""featured"")!=null){setFeaturedCourseWidgets(courseMap.get(""featured"").getData(),true);}else {getFeaturedCourses(FEATURED_LABEL,false);}}if(contributorsContainer.getWidgetCount()<=0){contributorsContainer.add(new LibraryContributorsView(getPlaceToken()));}libraryMenuNavigation.setTabSelection(FEATURED_CONTRIBUTORS);}else {if(callBack.equalsIgnoreCase(COURSE_PAGE)){AppClientFactory.fireEvent(new SetDiscoverLinkEvent(discoverUrl));landingBanner.setVisible(false);contributorsContainer.setVisible(false);featuredCourseTabs.setVisible(false);featuredCousesLbl.setVisible(false);if(subjectId.equals(STANDARDS)){featuredContributorsLink.setVisible(false);}else {featuredContributorsLink.setVisible(true);}featuredEducator.setVisible(true);courseBanner.setVisible(true);container.setVisible(true);if(standardId==null){String subjectName=getSubjectNameBySubjectId(courseMap,subjectId);CourseDo courseDo=null;if(subjectName!=null&&courseMap.get(subjectName)!=null&&courseId!=null){libraryMenuNavigation.setTabSelection(subjectName);courseDo=getCourseDoFromCourseId(courseMap.get(subjectName),courseId);getUnitDataFromService(courseDo,subjectId,courseId);}else {getFeaturedCourses(FEATURED_LABEL,true);}}else {String subjectName=STANDARDS;CourseDo courseDo=null;if(subjectName!=null&&standardsMap.get(subjectName)!=null&&standardsMap.get(subjectName).getData()!=null&&courseId!=null){libraryMenuNavigation.setTabSelection(subjectName);courseDo=getCourseDoFromCourseIdStandards(standardsMap.get(STANDARDS),standardId,courseId);setCourseData(courseDo);}else {libraryMenuNavigation.getTaxonomyData(subjectName,subjectId,courseId);}}}else {if(callBack.equalsIgnoreCase(FEATURED_COURSE_PAGE)){libraryMenuNavigation.setTabSelection(FEATURED_LABEL);if(callBackSignup!=null){Window.enableScrolling(false);}AppClientFactory.fireEvent(new SetDiscoverLinkEvent(discoverUrl));contributorsContainer.setVisible(false);featuredEducator.setVisible(false);courseBanner.setVisible(false);landingBanner.setVisible(true);container.setVisible(true);featuredCourseTabs.setVisible(true);featuredCousesLbl.setVisible(true);if((callBack!=previousCallBack)||(courseId!=previousCourseId)){if(courseMap!=null&&courseMap.get(""featured"")!=null){setFeaturedCourseWidgets(courseMap.get(""featured"").getData(),true);}else {getFeaturedCourses(FEATURED_LABEL,false);}}}else {if(callBack.equalsIgnoreCase(PARTNER_PAGE)){landingBanner.setVisible(false);contributorsContainer.setVisible(false);featuredEducator.setVisible(true);educatorPhoto.setVisible(false);featuredContributor.setVisible(false);featuredContributorsLink.setVisible(true);featuredCourseTabs.setVisible(false);featuredCousesLbl.setVisible(false);courseBanner.setVisible(true);container.setVisible(true);}}}}this.previousCallBack=callBack;this.previousCourseId=courseId;}"
3439	"public void keyTyped(KeyEvent e){char c=e.getKeyChar();if((c<48||c>57)&&c!=43&&c!=45&&c!=42&&c!=47&&c!=40&&c!=41&&c!=46){e.consume();}}"
3440	"private double calculatePickupDetourDuration(NDrtRequest drtRequest,VehicleData.Entry vEntry,Insertion insertion){if(insertion.pickupIdx>0&&drtRequest.getFromLink()==vEntry.stops.get(insertion.pickupIdx-1).task.getLink()){return 0;}double toPickupTT=insertion.pathToPickup.path.travelTime+insertion.pathToPickup.firstAndLastLinkTT;double fromPickupTT=insertion.pathFromPickup.path.travelTime+insertion.pathFromPickup.firstAndLastLinkTT;return toPickupTT+stopDuration+fromPickupTT;}"
3441	"@Override public void setColor(BossBarColor color){BossBarColor old;while(true){old=this.color.get();if(color!=null&&!color.equals(old)){if(this.color.compareAndSet(old,color)){this.casState(1);break;}}else {break;}}}"
3442	"public void followEntity(){if(this.followEntity!=null){EntityPlayer player=Minecraft.getMinecraft().player;if(this.enumParticle.equals(EnumParticle.HEALTH)&&followEntity instanceof EntityLivingBase){if(followEntity.isDead||((EntityLivingBase)followEntity).getHealth()>=((EntityLivingBase)followEntity).getMaxHealth()/2.0||((EntityLivingBase)followEntity).getHealth()<=0||player.getHeldItemMainhand()==null||(player.getHeldItemMainhand().getItem()!=EnumHero.ANA.weapon&&player.getHeldItemMainhand().getItem()!=EnumHero.MERCY.weapon)){ClientProxy.healthParticleEntities.remove(followEntity.getPersistentID());this.setExpired();}this.setPosition(this.followEntity.posX,this.followEntity.posY+this.followEntity.height/2.0,this.followEntity.posZ);}else {if(this.enumParticle.equals(EnumParticle.JUNKRAT_TRAP)){this.setPosition(this.followEntity.posX,this.followEntity.posY+1.5+(Math.sin(this.followEntity.ticksExisted/5.0))/10.0,this.followEntity.posZ);if(!(this.followEntity instanceof EntityJunkratTrap)||((EntityJunkratTrap)this.followEntity).trappedEntity!=null){this.setExpired();}}else {if((this.verticalAdjust!=0||this.horizontalAdjust!=0)&&followEntity instanceof EntityLivingBase){Vec3d vec=EntityHelper.getShootingPos((EntityLivingBase)followEntity,followEntity.rotationPitch,followEntity.rotationYaw,hand,verticalAdjust,horizontalAdjust);this.setPosition(vec.x,vec.y,vec.z);this.prevPosX=this.posX;this.prevPosY=this.posY;this.prevPosZ=this.posZ;}else {this.setPosition(this.followEntity.posX,this.followEntity.posY+this.followEntity.height/2.0,this.followEntity.posZ);}}}if(!this.followEntity.isEntityAlive()){this.setExpired();}}}"
3443	"public static void markInActiveUnManagedExportMask(URI storageSystemUri,Set<URI> discoveredUnManagedExportMasks,DbClient dbClient,PartitionManager partitionManager){URIQueryResultList result=new URIQueryResultList();dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageSystemUnManagedExportMaskConstraint(storageSystemUri),result);Set<URI> allMasksInDatabase=new HashSet<URI>();Iterator<URI> it=result.iterator();while(it.hasNext()){allMasksInDatabase.add(it.next());}SetView<URI> onlyAvailableinDB=Sets.difference(allMasksInDatabase,discoveredUnManagedExportMasks);if(onlyAvailableinDB.size()>0){_log.info(""these UnManagedExportMasks are orphaned and will be cleaned up:""+Joiner.on(""\t"").join(onlyAvailableinDB));List<UnManagedExportMask> unManagedExportMasksToBeDeleted=new ArrayList<UnManagedExportMask>();Iterator<UnManagedExportMask> unManagedExportMasks=dbClient.queryIterativeObjects(UnManagedExportMask.class,new ArrayList<URI>(onlyAvailableinDB));while(unManagedExportMasks.hasNext()){UnManagedExportMask uem=unManagedExportMasks.next();if(null==uem||uem.getInactive()){continue;}_log.info(""Setting UnManagedExportMask {} inactive"",uem.getMaskingViewPath());uem.setStorageSystemUri(NullColumnValueGetter.getNullURI());uem.setInactive(true);unManagedExportMasksToBeDeleted.add(uem);}if(unManagedExportMasksToBeDeleted.size()>0){partitionManager.updateAndReIndexInBatches(unManagedExportMasksToBeDeleted,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);}}}"
3444	"@EventHandler public void playerChat(AsyncPlayerChatEvent e){String rawMessage=e.getMessage();String fMessage=String.format(e.getFormat(),e.getPlayer().getDisplayName(),rawMessage);String type=main.users.getData().getString(e.getPlayer().getUniqueId()+"".type"");if(type.equals("""")){type=""global"";}for(Player pl : e.getRecipients()){String PLType=main.users.getData().getString(pl.getUniqueId()+"".type"");if(PLType.equals("""")){PLType=""global"";}if(PLType.equals(""global"")){pl.sendMessage(fMessage);}else {if(PLType.equals(""nearby"")){if(pl.getPlayer().getLocation().distance(e.getPlayer().getLocation())<=main.getConfig().getInt(""ChatEdit.Default.Radius"")){pl.sendMessage(fMessage);}}else {if(PLType.equals(""off"")){return ;}}}}e.getRecipients().clear();}"
3445	"@Override public void run(){populateCids();int count=0;Client client=ClientBuilder.newClient();while(count<callCount&&!halted()){try{BigInteger customerId=getRandomCidFromRange(); final Timer.Context requestMediaContext=TARGET_API_REQUEST.time();Response resp=callTargetingApi(client,customerId);requestMediaContext.stop();incrementResponseCounter(""GetTargetedMedia"",resp.getStatus());Thread.sleep((randInt(0,testPlan.getEventReportFrequency()))*1000);if(resp.getStatusInfo().getStatusCode()==Response.Status.OK.getStatusCode()){TargetedMediaResponse targetMediaResponse=resp.readEntity(TargetedMediaResponse.class);resp.close();if(targetMediaResponse!=null&&targetMediaResponse.getDirectDeposits().size()>0){MediaEvents mediaEvent=new MediaEvents();mediaEvent.setTransactionId(""""+UUID.randomUUID().toString());CustomerMediaEvent customerMediaEvent=new CustomerMediaEvent();customerMediaEvent.setCustomerId(customerId.toString());mediaEvent.getCustomerMediaEvents().add(customerMediaEvent);mediaEvent=directDepositEventCreator.prepareEvent(targetMediaResponse,mediaEvent,testPlan);mediaEvent=stringPrintEventCreator.prepareEvent(targetMediaResponse,mediaEvent,testPlan);mediaEvent=thresholdEventCreator.prepareEvent(targetMediaResponse,mediaEvent,testPlan);Gson gson=new Gson(); final Timer.Context eventContext=EVENT_API_REQUEST.time();resp=client.target(String.format(this.testPlan.getEventsApiUrl(),testPlan.getRetailerId())).queryParam(""channel"",""web"").request().accept(MediaType.APPLICATION_JSON).header(""Content-Type"",MediaType.APPLICATION_JSON).post(Entity.entity(gson.toJson(mediaEvent),MediaType.APPLICATION_JSON));eventContext.stop();incrementResponseCounter(""ReportEvents"",resp.getStatus());if(resp.getStatusInfo().getStatusCode()==Response.Status.OK.getStatusCode()||resp.getStatusInfo().getStatusCode()==Response.Status.ACCEPTED.getStatusCode()){for(DirectDepositStatus directDepositStatus : mediaEvent.getMediaPrintEventForCustomer(customerId.toString())){mediaUsageRepository.incrementMediaCounter(threadGroupIdentifier,testPlan.getChannelMediaId(directDepositStatus.getAwardId()));}for(StringPrintStatus status : mediaEvent.getStringPrintEventForCustomer(customerId.toString())){mediaUsageRepository.incrementMediaCounter(threadGroupIdentifier,testPlan.getChannelMediaId(status.getAwardId()));}}resp.close();}}}catch(Exception e){logger.error(""Problem occured in Targeting API thread. Error : ""+e.getMessage());if(e.getMessage()==null){haltedOnException();}if(e.getMessage()!=null&&e.getMessage().contains(""UnknownHostException"")){haltedOnException();}seriousException(""ReportEvents"",e.getMessage());}finally{count++;}}if(count>=callCount){completedExecution();}finishedRun();client.close();}"
3446	"public boolean onConsoleMessage(ConsoleMessage cm){Log.d(TAG,cm.message()+"" -- From line ""+cm.lineNumber()+"" of ""+cm.sourceId());if(cm.message().toLowerCase().contains(WrongPassword.toLowerCase())){mLoadingCircle.setVisibility(View.INVISIBLE);mLogin.setVisibility(View.VISIBLE);mRemember.setVisibility(View.VISIBLE);mUsername.setVisibility(View.VISIBLE);mPassword.setVisibility(View.VISIBLE);x=0;}if((cm.message().toLowerCase().contains(""ok"".toLowerCase()))&&(cm.message().toLowerCase().contains(mUsername.getText().toString()))&&x==1){mLoadingCircle.setVisibility(View.INVISIBLE);mLoginPage.setVisibility(View.VISIBLE);mUsername.setVisibility(View.GONE);mPassword.setVisibility(View.GONE);mRemember.setVisibility(View.GONE);mEmail.setVisibility(View.GONE);x=2;}if(cm.message().toLowerCase().contains(""RetrievedEdgeClass"".toLowerCase())&&mNotify.isChecked()){InterpretEdgeData(cm.message());}return true;}"
3447	"public static Path generatePath(LinkedList<Node> waypoints){LinkedList<Edge> pathEdges=new LinkedList<>();Node startNode=waypoints.getFirst();if(startNode==null||startNode.getNodeID()==null){startNode=new Node(""Node1"",NodeFloor.THIRD);waypoints.removeFirst();waypoints.addFirst(startNode);System.out.println(""Invalid or no start node; using default starting position."");}NodeFloor floor=startNode.getFloor();boolean isFirst=true;for(Node endNode : waypoints){if(isFirst){isFirst=false;continue;}try{if(endNode==null||endNode.getNodeID()==null){throw new PathfinderException(""No defined end node, please define valid end location"");}}catch(PathfinderException e){}try{if(!endNode.getFloor().equals(floor)){throw new PathfinderException(""Pathfinder across multiple floors not currently supported."");}}catch(PathfinderException e){}try{pathEdges.addAll(A_star(startNode,endNode));}catch(PathfinderException e){System.out.println(""Error: pathfinder exception""+e.getMessage());e.printStackTrace();}startNode=endNode;}return (new Path(waypoints,pathEdges));}"
3448	"@Override void decodeMetaData() throws IOException{if(!decoded&&!seekPending){if(meta.bytes!=null){bytesReader.reset(meta.bytes,0,meta.bytes.length);}postingsReader.decodeTerm(meta.longs,bytesReader,fieldInfo,state,true);decoded=true;}}"
3449	"private static void sendSubMessage(JSONObject sendJson,CommandLine cmd){String sendData=sendJson.toString();String receiveData="""";boolean unSubscribe=false;Socket connection;try{if(secure){InputStream keyStoreInput=Thread.currentThread().getContextClassLoader().getResourceAsStream(""clientKeyStore/client-keystore.jks"");InputStream trustStoreInput=Thread.currentThread().getContextClassLoader().getResourceAsStream(""clientKeyStore/client-keystore.jks"");setSSLFactories(keyStoreInput,""Dr.Stranger"",trustStoreInput);keyStoreInput.close();trustStoreInput.close();SSLSocketFactory sslsocketfactory=(SSLSocketFactory)SSLSocketFactory.getDefault();connection=sslsocketfactory.createSocket(host,port);}else {connection=new Socket(host,port);}DataInputStream in=new DataInputStream(connection.getInputStream());DataOutputStream out=new DataOutputStream(connection.getOutputStream());BufferedReader enterRead=new BufferedReader(new InputStreamReader(System.in));out.writeUTF(sendData);out.flush();logrSub.fine(""SENT:""+sendData);int count=-1;connection.setSoTimeout(500);while(!unSubscribe){String read="""";try{read=in.readUTF();}catch(SocketTimeoutException e){}if(read.length()!=0){receiveData+=read+"","";logrSub.fine(""RECEIVED:""+read);if(cmd.hasOption(""debug"")){count=printLogFromFile(count);receiveData="""";}else {if(!receiveData.equals("""")){receiveData=""[""+receiveData.substring(0,receiveData.length()-1)+""]"";JSONArray recv=(JSONArray)JSONSerializer.toJSON(receiveData);JSONObject resp=recv.getJSONObject(0);if(resp.has(""response"")){String respTpye=(String)resp.get(""response"");if(respTpye.equals(""error"")){System.out.print(""error,"");System.out.println(resp.get(""errorMessage"")+""!"");}else {System.out.println(""success!"");recv.clear();receiveData="""";}}else {printSubResult(recv);receiveData="""";recv.clear();}}}}if(enterRead.ready()){if(enterRead.read()=='\n'){String unsubMsg=unsubscribeCommand().toString();out.writeUTF(unsubMsg);logrSub.fine(""SENT:""+unsubMsg);unSubscribe=true;}}}if(unSubscribe){boolean flag=true;while(flag){String read="""";try{read=in.readUTF();}catch(Exception e){}if(read.length()!=0){receiveData+=read+"","";logrSub.fine(""RECEIVED:""+read);flag=false;}}if(!receiveData.equals("""")){if(cmd.hasOption(""debug"")){printLogFromFile(count);}else {receiveData=""[""+receiveData.substring(0,receiveData.length()-1)+""]"";JSONArray recv=(JSONArray)JSONSerializer.toJSON(receiveData);if(recv.size()==1){System.out.println(recv.toString());}else {String finalRecv=recv.get(recv.size()-1).toString();recv.remove(recv.size()-1);printSubResult(recv);System.out.println(finalRecv);}}System.exit(0);}}}catch(SSLHandshakeException e){System.out.println(""Unable to connect to a unsecure port with -secure."");}catch(FileNotFoundException e){System.out.println(""File not found."");}catch(UnknownHostException e){System.out.println(""Unknown Host."");}catch(EOFException e){System.out.println(""Put -secure if you want to connect to a secure port."");}catch(IOException e){System.out.println(""Connection fail."");}catch(Exception e){e.printStackTrace();}}"
3450	"public BigNum subtract(BigNum subtrahend){if(subtrahend.isZero()){return this;}if(this.isZero()){return new BigNum((byte)(0x00-subtrahend.signed),subtrahend.datas,subtrahend.length,subtrahend.scale);}if(this.signed==subtrahend.signed){int scaleS=this.scale;if(subtrahend.scale>scaleS){scaleS=subtrahend.scale;}int decS=this.length-this.scale-1;if((subtrahend.length-subtrahend.scale-1)>decS){decS=subtrahend.length-subtrahend.scale;}int lengthS=2+scaleS+decS;byte[] dataS=new byte[lengthS];byte[] carryS=new byte[lengthS];System.out.println(""scaleS=""+scaleS+"",decS=""+decS+"",lengthS=""+lengthS);long a=0;byte carry=0;for(int idx=decS;idx>0;idx--){System.out.println(""a1=""+a);if((this.scale+idx)<=this.length){System.out.println(""a=""+this.datas[this.scale+idx]);a=a+this.datas[this.scale+idx];}if((subtrahend.scale+idx)<=subtrahend.length){System.out.println(""a=""+subtrahend.datas[subtrahend.scale+idx]);a=a-subtrahend.datas[subtrahend.scale+idx];}System.out.println(""a=""+a);if(a<0){a=10+a;carry=-1;}dataS[1+scaleS+idx]=(byte)(0xff&(a%10));carryS[1+scaleS+idx]=carry;a=a/10;carry=0;}for(int idx=0;idx<=scaleS;idx++){System.out.println(""a2=""+a);if((this.scale-idx)>=0){System.out.println(""a=""+this.datas[this.scale-idx]);a=a+this.datas[this.scale-idx];}if((subtrahend.scale-idx)>=0){System.out.println(""a=""+subtrahend.datas[subtrahend.scale-idx]);a=a-subtrahend.datas[subtrahend.scale-idx];}System.out.println(""a=""+a);if(a<0){a=10+a;carry=-1;}dataS[1+scaleS-idx]=(byte)(0xff&(a%10));carryS[1+scaleS-idx]=carry;a=a/10;carry=0;}System.out.println(""a3=""+a);if(a<0){a=10+a;carry=-1;}dataS[0]=(byte)(0xff&a);carryS[0]=carry;System.out.println(""carryS=""+String.valueOf(toCharary(carryS,carryS.length)));byte signeds=0x01;if(carry==-1){signeds=-1;}return new BigNum(signeds,dataS,lengthS,scaleS+1);}else {return this.add(new BigNum((byte)(0x00-subtrahend.signed),subtrahend.datas,subtrahend.length,subtrahend.scale));}}"
3451	"public boolean canKill(CheckersPiece cp){CheckersPosition cpos;CheckersMove move=new CheckersMove();move.setStart(cp.get_position());if((cp.getPieceType()==PieceType.LIGHT_PIECE||cp.is_crowned())&&cp.get_position().get_row()+2<NUM_ROWS){if(cp.get_position().get_col()+2<NUM_COLS){cpos=new CheckersPosition(cp.get_position().get_row()+2,cp.get_position().get_col()+2);move.setEnd(cpos);if(isKillingMove(move)){return true;}}if(cp.get_position().get_col()-2>=0){cpos=new CheckersPosition(cp.get_position().get_row()+2,cp.get_position().get_col()-2);move.setEnd(cpos);if(isKillingMove(move)){return true;}}}else {if((cp.getPieceType()==PieceType.DARK_PIECE||cp.is_crowned())&&cp.get_position().get_row()-2>=0){if(cp.get_position().get_col()+2<NUM_COLS){cpos=new CheckersPosition(cp.get_position().get_row()-2,cp.get_position().get_col()+2);move.setEnd(cpos);if(isKillingMove(move)){return true;}}if(cp.get_position().get_col()-2>=0){cpos=new CheckersPosition(cp.get_position().get_row()-2,cp.get_position().get_col()-2);move.setEnd(cpos);if(isKillingMove(move)){return true;}}}}return false;}"
3452	"@Override public void reissueContainerRequests(AMRMClient<ContainerRequest> amRmClient,Map<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> requestedResources,int loopCounter,ResourceRequestHandler resourceRequestor,List<ContainerRequest> containerRequests,List<ContainerRequest> removedContainerRequests){if(!hostSpecificRequestsMap.isEmpty()&&requestedResources.isEmpty()){LOG.info(""Issue Host specific requests first"");Entry<String,List<ContainerRequest>> set=hostSpecificRequestsMap.entrySet().iterator().next();List<ContainerRequest> requests=set.getValue();List<String> blacklistNodes=resourceRequestor.getNodesExceptHost(requests.get(0).getNodes());amRmClient.updateBlacklist(blacklistNodes,requests.get(0).getNodes());blacklistedNodesForHostSpecificRequests=blacklistNodes;LOG.info(""Sending {} request(s) after blacklisting all nodes other than {}"",requests.size(),requests.get(0).getNodes());for(ContainerRequest cr : requests){ContainerStartRequest csr=hostSpecificRequests.get(cr);ContainerRequest newCr=new ContainerRequest(cr.getCapability(),null,null,cr.getPriority());MutablePair<Integer,ContainerRequest> pair=new MutablePair<Integer,ContainerRequest>(loopCounter,newCr);requestedResources.put(csr,pair);containerRequests.add(newCr);hostSpecificRequests.remove(cr);}hostSpecificRequestsMap.remove(set.getKey());}else {if(!requestedResources.isEmpty()){recreateContainerRequest(requestedResources,loopCounter,resourceRequestor,removedContainerRequests);}else {if(blacklistedNodesForHostSpecificRequests!=null){LOG.debug(""All requests done.. Removing nodes from blacklist {}"",blacklistedNodesForHostSpecificRequests);amRmClient.updateBlacklist(null,blacklistedNodesForHostSpecificRequests);blacklistedNodesForHostSpecificRequests=null;}if(!otherContainerRequests.isEmpty()){for(Entry<ContainerRequest,ContainerStartRequest> entry : otherContainerRequests.entrySet()){ContainerRequest cr=entry.getKey();ContainerStartRequest csr=entry.getValue();MutablePair<Integer,ContainerRequest> pair=new MutablePair<Integer,ContainerRequest>(loopCounter,cr);requestedResources.put(csr,pair);containerRequests.add(cr);}otherContainerRequests.clear();}}}}"
3453	"private ObjectSerializer getObjectWriter(Class<?> clazz,boolean create){ObjectSerializer writer=serializers.get(clazz);if(writer==null){try{ final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();for(Object o : ServiceLoader.load(AutowiredObjectSerializer.class,classLoader)){if(!(o instanceof AutowiredObjectSerializer)){continue;}AutowiredObjectSerializer autowired=(AutowiredObjectSerializer)o;for(Type forType : autowired.getAutowiredFor()){put(forType,autowired);}}}catch(ClassCastException ex){}writer=serializers.get(clazz);}if(writer==null){ final ClassLoader classLoader=JSON.class.getClassLoader();if(classLoader!=Thread.currentThread().getContextClassLoader()){try{for(Object o : ServiceLoader.load(AutowiredObjectSerializer.class,classLoader)){if(!(o instanceof AutowiredObjectSerializer)){continue;}AutowiredObjectSerializer autowired=(AutowiredObjectSerializer)o;for(Type forType : autowired.getAutowiredFor()){put(forType,autowired);}}}catch(ClassCastException ex){}writer=serializers.get(clazz);}}if(writer==null){String className=clazz.getName();if(Map.class.isAssignableFrom(clazz)){put(clazz,writer=MapSerializer.instance);}else {if(List.class.isAssignableFrom(clazz)){put(clazz,writer=ListSerializer.instance);}else {if(Collection.class.isAssignableFrom(clazz)){put(clazz,writer=CollectionCodec.instance);}else {if(Date.class.isAssignableFrom(clazz)){put(clazz,writer=DateCodec.instance);}else {if(JSONAware.class.isAssignableFrom(clazz)){put(clazz,writer=JSONAwareSerializer.instance);}else {if(JSONSerializable.class.isAssignableFrom(clazz)){put(clazz,writer=JSONSerializableSerializer.instance);}else {if(JSONStreamAware.class.isAssignableFrom(clazz)){put(clazz,writer=MiscCodec.instance);}else {if(clazz.isEnum()||(clazz.getSuperclass()!=null&&clazz.getSuperclass().isEnum())){JSONType jsonType=TypeUtils.getAnnotation(clazz,JSONType.class);if(jsonType!=null&&jsonType.serializeEnumAsJavaBean()){put(clazz,writer=createJavaBeanSerializer(clazz));}else {put(clazz,writer=EnumSerializer.instance);}}else {if(clazz.isArray()){Class<?> componentType=clazz.getComponentType();ObjectSerializer compObjectSerializer=getObjectWriter(componentType);put(clazz,writer=new ArraySerializer(componentType,compObjectSerializer));}else {if(Throwable.class.isAssignableFrom(clazz)){SerializeBeanInfo beanInfo=TypeUtils.buildBeanInfo(clazz,null,propertyNamingStrategy);beanInfo.features|=SerializerFeature.WriteClassName.mask;put(clazz,writer=new JavaBeanSerializer(beanInfo));}else {if(TimeZone.class.isAssignableFrom(clazz)||Map.Entry.class.isAssignableFrom(clazz)){put(clazz,writer=MiscCodec.instance);}else {if(Appendable.class.isAssignableFrom(clazz)){put(clazz,writer=AppendableSerializer.instance);}else {if(Charset.class.isAssignableFrom(clazz)){put(clazz,writer=ToStringSerializer.instance);}else {if(Enumeration.class.isAssignableFrom(clazz)){put(clazz,writer=EnumerationSerializer.instance);}else {if(Calendar.class.isAssignableFrom(clazz)||XMLGregorianCalendar.class.isAssignableFrom(clazz)){put(clazz,writer=CalendarCodec.instance);}else {if(Clob.class.isAssignableFrom(clazz)){put(clazz,writer=ClobSeriliazer.instance);}else {if(TypeUtils.isPath(clazz)){put(clazz,writer=ToStringSerializer.instance);}else {if(Iterator.class.isAssignableFrom(clazz)){put(clazz,writer=MiscCodec.instance);}else {if(className.startsWith(""java.awt."")&&AwtCodec.support(clazz)){if(!awtError){try{String[] names=new String{""java.awt.Color"",""java.awt.Font"",""java.awt.Point"",""java.awt.Rectangle""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=AwtCodec.instance);return writer;}}}catch(Throwable e){awtError=true;}}}if((!jdk8Error)&&(className.startsWith(""java.time."")||className.startsWith(""java.util.Optional"")||className.equals(""java.util.concurrent.atomic.LongAdder"")||className.equals(""java.util.concurrent.atomic.DoubleAdder""))){try{{String[] names=new String{""java.time.LocalDateTime"",""java.time.LocalDate"",""java.time.LocalTime"",""java.time.ZonedDateTime"",""java.time.OffsetDateTime"",""java.time.OffsetTime"",""java.time.ZoneOffset"",""java.time.ZoneRegion"",""java.time.Period"",""java.time.Duration"",""java.time.Instant""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=Jdk8DateCodec.instance);return writer;}}}{String[] names=new String{""java.util.Optional"",""java.util.OptionalDouble"",""java.util.OptionalInt"",""java.util.OptionalLong""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=OptionalCodec.instance);return writer;}}}{String[] names=new String{""java.util.concurrent.atomic.LongAdder"",""java.util.concurrent.atomic.DoubleAdder""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=AdderSerializer.instance);return writer;}}}}catch(Throwable e){jdk8Error=true;}}if((!oracleJdbcError)&&className.startsWith(""oracle.sql."")){try{String[] names=new String{""oracle.sql.DATE"",""oracle.sql.TIMESTAMP""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=DateCodec.instance);return writer;}}}catch(Throwable e){oracleJdbcError=true;}}if((!springfoxError)&&className.equals(""springfox.documentation.spring.web.json.Json"")){try{put(Class.forName(""springfox.documentation.spring.web.json.Json""),writer=SwaggerJsonSerializer.instance);return writer;}catch(ClassNotFoundException e){springfoxError=true;}}if((!guavaError)&&className.startsWith(""com.google.common.collect."")){try{String[] names=new String{""com.google.common.collect.HashMultimap"",""com.google.common.collect.LinkedListMultimap"",""com.google.common.collect.ArrayListMultimap"",""com.google.common.collect.TreeMultimap""};for(String name : names){if(name.equals(className)){put(Class.forName(name),writer=GuavaCodec.instance);return writer;}}}catch(ClassNotFoundException e){guavaError=true;}}if((!jsonnullError)&&className.equals(""net.sf.json.JSONNull"")){try{put(Class.forName(""net.sf.json.JSONNull""),writer=MiscCodec.instance);return writer;}catch(ClassNotFoundException e){jsonnullError=true;}}Class[] interfaces=clazz.getInterfaces();if(interfaces.length==1&&interfaces[0].isAnnotation()){return AnnotationSerializer.instance;}if(TypeUtils.isProxy(clazz)){Class<?> superClazz=clazz.getSuperclass();ObjectSerializer superWriter=getObjectWriter(superClazz);put(clazz,superWriter);return superWriter;}if(Proxy.isProxyClass(clazz)){Class handlerClass=null;if(interfaces.length==2){handlerClass=interfaces[1];}else {for(Class proxiedInterface : interfaces){if(proxiedInterface.getName().startsWith(""org.springframework.aop."")){continue;}if(handlerClass!=null){handlerClass=null;break;}handlerClass=proxiedInterface;}}if(handlerClass!=null){ObjectSerializer superWriter=getObjectWriter(handlerClass);put(clazz,superWriter);return superWriter;}}if(create){writer=createJavaBeanSerializer(clazz);put(clazz,writer);}}}}}}}}}}}}}}}}}}}if(writer==null){writer=serializers.get(clazz);}}return writer;}"
3454	"public Double getWorstGame(){Double worstGame=Double.MAX_VALUE;for(Double score : scores){if(score<worstGame){worstGame=score;}}return worstGame;}"
3455	"public static boolean command_after(PsiBuilder b,int l){if(!recursion_guard_(b,l,""command_after"")){return false;}boolean r;Marker m=enter_section_(b,l,_NONE_,COMMAND_AFTER,""<command after>"");r=expression(b,l+1,-1);exit_section_(b,l,m,r,false,null);return r;}"
3456	"public boolean showAll(){System.out.println(""\n-- Select an action --"");System.out.println(""1> View Plants in Garden"");System.out.println(""2> Plant a seed"");System.out.println(""3> Water Plants"");System.out.println(""4> Harvest Fruit"");System.out.println(""5> View Inventory"");System.out.println(""6> View Player Info"");System.out.println(""7> Sleep One day"");System.out.println(""8> Exit Game"");System.out.print(""Please select an action (1-8) >> "");switch (Input.readInt()){case 1 :viewPlants();break;case 2 :seedPlant();break;case 3 :waterPlant();break;case 4 :harvestFruit();break;case 5 :viewInventory();break;case 6 :viewPlayerInfo();break;case 7 :sleep();break;case 8 :return true;}return false;}"
3457	"@EventHandler(priority=EventPriority.HIGH) public void onInteract(PlayerInteractEvent event){SpleefPlayer sp=SuperSpleef.getInstance().getPlayerManager().get(event.getPlayer());if(sp.isIngame()){event.setCancelled(event.getClickedBlock()!=null&&event.getClickedBlock().getType()!=Material.SNOW_BLOCK);SpleefBattle battle=sp.getCurrentBattle();if(battle.getSpleefMode()==SpleefMode.POWER){((PowerSpleefBattle)battle).handlePowerRequest(sp);}}}"
3458	"public String getName(int pos){if(!mCursor.moveToPosition(pos)){Log.w(TAG,""fail movetopos"");}}"
3459	"SubMapIter(){Comparator<? super K> cmp=m.comparator;for(;;){next=isDescending?hiNode(cmp):loNode(cmp);if(next==null){break;}PersistentObject x=next.value();if(x!=null&&!x.is(next)){if(!inBounds(next.key(),cmp)){next=null;}else { @SuppressWarnings(""unchecked"") V vv=(V)x;nextValue=vv;}break;}}}"
3460	"public void renderLeaseSetHTML(Writer out,boolean debug) throws IOException{StringBuilder buf=new StringBuilder(4*1024);if(debug){buf.append(""<p id=\""debugmode\"">Debug mode - Sorted by hash distance, closest first</p>\n"");}Hash ourRKey;Set<LeaseSet> leases;DecimalFormat fmt;if(debug){ourRKey=_context.routerHash();leases=new TreeSet<LeaseSet>(new LeaseSetRoutingKeyComparator(ourRKey));fmt=new DecimalFormat(""#0.00"");}else {ourRKey=null;leases=new TreeSet<LeaseSet>(new LeaseSetComparator());fmt=null;}leases.addAll(_context.netDb().getLeases());int medianCount=0;int rapCount=0;BigInteger median=null;int c=0;FloodfillNetworkDatabaseFacade netdb=(FloodfillNetworkDatabaseFacade)_context.netDb();if(debug){buf.append(""<table id=\""leasesetdebug\"">\n"");}else {buf.append(""<table id=\""leasesetsummary\"">\n"");}buf.append(""<tr><th colspan=\""3\"">Leaseset Summary</th>"").append(""<th><a href=\""/configadvanced\"" title=\"""").append(_t(""Manually Configure Floodfill Participation"")).append(""\"">["").append(_t(""Configure Floodfill Participation"")).append(""]</a></th></tr>\n"").append(""<tr><td><b>Total Leasesets:</b></td><td colspan=\""3\"">"").append(leases.size()).append(""</td></tr>\n"");if(debug){buf.append(""<tr><td><b>Published (RAP) Leasesets:</b></td><td colspan=\""3\"">"").append(netdb.getKnownLeaseSets()).append(""</td></tr>\n"").append(""<tr><td><b>Mod Data:</b></td><td>"").append(DataHelper.getUTF8(_context.routerKeyGenerator().getModData())).append(""</td>"").append(""<td><b>Last Changed:</b></td><td>"").append(new Date(_context.routerKeyGenerator().getLastChanged())).append(""</td></tr>\n"").append(""<tr><td><b>Next Mod Data:</b></td><td>"").append(DataHelper.getUTF8(_context.routerKeyGenerator().getNextModData())).append(""</td>"").append(""<td><b>Change in:</b></td><td>"").append(DataHelper.formatDuration(_context.routerKeyGenerator().getTimeTillMidnight())).append(""</td></tr>\n"");}int ff=_context.peerManager().getPeersByCapability(FloodfillNetworkDatabaseFacade.CAPABILITY_FLOODFILL).size();buf.append(""<tr><td><b>Known Floodfills:</b></td><td colspan=\""3\"">"").append(ff).append(""</td></tr>\n"").append(""<tr><td><b>Currently Floodfill?</b></td><td colspan=\""3\"">"").append(netdb.floodfillEnabled()?""yes"":""no"").append(""</td></tr>\n"");if(debug){buf.append(""<tr><td><b>Network data (only valid if floodfill):</b></td><td colspan=\""3\"">"");if(median!=null){double log2=biLog2(median);buf.append(""</td></tr>"").append(""<tr><td><b>Median distance (bits):</b></td><td colspan=\""3\"">"").append(fmt.format(log2)).append(""</td></tr>\n"");int total=(int)Math.round(Math.pow(2,2+256-1-log2));buf.append(""<tr><td><b>Estimated total floodfills:</b></td><td colspan=\""3\"">"").append(total).append(""</td></tr>\n"");buf.append(""<tr><td><b>Estimated total leasesets:</b></td><td colspan=\""3\"">"").append(total*rapCount/4);}else {buf.append(""<i>Not floodfill or no data.</i>"");}buf.append(""</td></tr>\n"");}buf.append(""</table>\n"");if(leases.isEmpty()){if(!debug){buf.append(""<div id=\""noleasesets\""><i>"").append(_t(""No Leasesets currently active."")).append(""</i></div>"");}}else {if(debug){for(LeaseSet ls : leases){if(ls.getReceivedAsPublished()){rapCount++;}}medianCount=rapCount/2;}long now=_context.clock().now();for(LeaseSet ls : leases){Destination dest=ls.getDestination();Hash key=dest.calculateHash();buf.append(""<table class=\""leaseset\"">\n"").append(""<tr><th><b>"").append(_t(""LeaseSet"")).append("":</b>&nbsp;<code>"").append(key.toBase64()).append(""</code></th>"");if(_context.clientManager().isLocal(dest)){buf.append(""<th><a href=\""tunnels#""+key.toBase64().substring(0,4)+""\"">""+_t(""Local"")+""</a> "");boolean unpublished=!_context.clientManager().shouldPublishLeaseSet(key);if(unpublished){buf.append(_t(""Unpublished"")+' ');}buf.append(""<b>"").append(_t(""Destination"")).append("":</b> "");TunnelPoolSettings in=_context.tunnelManager().getInboundSettings(key);if(in!=null&&in.getDestinationNickname()!=null){buf.append(in.getDestinationNickname());}else {buf.append(dest.toBase64().substring(0,6));}buf.append(""</th></tr>\n<tr><td"");String host=null;if(!unpublished){host=_context.namingService().reverseLookup(dest);}if(host!=null){buf.append("" colspan=\""2\"""");}buf.append("">"");String b32=dest.toBase32();buf.append(""<a href=\""http://"").append(b32).append(""\"">"").append(b32).append(""</a></td>"");if(!unpublished){if(host==null){buf.append(""<td class=\""addtobook\"" colspan=\""2\"">"").append(""<a title=\"""").append(_t(""Add to addressbook"")).append(""\"" href=\""/susidns/addressbook.jsp?book=private&amp;destination="").append(dest.toBase64()).append(""#add\"">"").append(_t(""Add to local addressbook"")).append(""</a></td>"");}}}else {buf.append(""<th><b>"").append(_t(""Destination"")).append("":</b> "");String host=_context.namingService().reverseLookup(dest);if(host!=null){buf.append(""<a href=\""http://"").append(host).append(""/\"">"").append(host).append(""</a></th>"");}else {String b32=dest.toBase32();buf.append(""<code>"").append(dest.toBase64().substring(0,6)).append(""</code></th>"").append(""</tr>\n<tr>"").append(""<td><a href=\""http://"").append(b32).append(""\"">"").append(b32).append(""</a></td>\n"").append(""<td class=\""addtobook\""><a title=\"""").append(_t(""Add to addressbook"")).append(""\"" href=\""/susidns/addressbook.jsp?book=private&amp;destination="").append(dest.toBase64()).append(""#add\"">"").append(_t(""Add to local addressbook"")).append(""</a></td>"");}}buf.append(""</tr>\n<tr><td colspan=\""2\"">\n"");long exp=ls.getLatestLeaseDate()-now;if(exp>0){buf.append(""<b>"").append(_t(""Expires in {0}"",DataHelper.formatDuration2(exp))).append(""</b>"");}else {buf.append(""<b>"").append(_t(""Expired {0} ago"",DataHelper.formatDuration2(0-exp))).append(""</b>"");}buf.append(""</td></tr>\n"");if(debug){buf.append(""<tr><td colspan=\""2\"">"");buf.append(""<b>RAP?</b> "").append(ls.getReceivedAsPublished());buf.append("" <b>RAR?</b> "").append(ls.getReceivedAsReply());BigInteger dist=HashDistance.getDistance(ourRKey,ls.getRoutingKey());if(ls.getReceivedAsPublished()){if(c++==medianCount){median=dist;}}buf.append("" <b>Distance: </b><span id=\""distance\"">"").append(fmt.format(biLog2(dist))).append(""</span>"");buf.append(""</td></tr>\n<tr><td colspan=\""2\"">"");buf.append(""<b>Signature type:</b> "").append(dest.getSigningPublicKey().getType());buf.append("" <b>Encryption Key:</b> "").append(ls.getEncryptionKey().toBase64().substring(0,20)).append(""&hellip;"");buf.append(""</td></tr>\n<tr><td colspan=\""2\"">"");buf.append(""<b>Routing Key:</b> "").append(ls.getRoutingKey().toBase64());buf.append(""</td></tr>"");}for(int i=0;i<ls.getLeaseCount();i++){Lease lease=ls.getLease(i);buf.append(""<tr><td colspan=\""2\"">"");buf.append(""<b>"").append(_t(""Lease"")).append(' ').append(i+1).append("":</b> "").append(_t(""Gateway"")).append(' ');buf.append(_context.commSystem().renderPeerHTML(lease.getGateway()));buf.append(' ').append(_t(""Tunnel"")).append(' ').append(lease.getTunnelId().getTunnelId()).append(' ');if(debug){long exl=lease.getEndDate().getTime()-now;if(exl>0){buf.append(""<b>"").append(_t(""Expires in {0}"",DataHelper.formatDuration2(exl))).append(""</b>"");}else {buf.append(""<b>"").append(_t(""Expired {0} ago"",DataHelper.formatDuration2(0-exl))).append(""</b>"");}}buf.append(""</td></tr>\n"");}buf.append(""</table>\n"");out.write(buf.toString());buf.setLength(0);}}out.write(buf.toString());out.flush();}"
3461	"public void echo() throws IOException,ClassNotFoundException{ClientSocketHandler firstClient=clients.get(0);ClientSocketHandler secondClient=clients.get(1);Game game=new Game();game.startGame(FleetGenerator.hardcodeShips(),FleetGenerator.hardcodeShips());while(runningLoop){log.info(""...Receiving packet..."");Packet receivedPacketFirstPlayer=firstClient.read();PacketMove receivedPacketMoveFirstPlayer=(PacketMove)receivedPacketFirstPlayer;log.info(""...""+receivedPacketFirstPlayer.getPacketType()+"" has been received from client ""+firstClient+""..."");log.info(""...Receiving packet..."");Packet receivedPacketSecondPlayer=secondClient.read();PacketMove receivedPacketMoveSecondPlayer=(PacketMove)receivedPacketSecondPlayer;log.info(""...""+receivedPacketSecondPlayer.getPacketType()+"" has been received from client ""+secondClient+""..."");List<List<Integer>> firstPlayerShotPositions=new ArrayList<>(1);firstPlayerShotPositions.add(receivedPacketMoveFirstPlayer.getPositions().get(0));List<List<Integer>> secondPlayerShotPositions=new ArrayList<>(1);secondPlayerShotPositions.add(receivedPacketMoveSecondPlayer.getPositions().get(0));List<List<Integer>> shotPositions=game.move(firstPlayerShotPositions,secondPlayerShotPositions);PacketMove shotPositionsForFirstPlayer=PacketFactory.createMove();shotPositionsForFirstPlayer.addPositions(shotPositions.get(0));shotPositionsForFirstPlayer.addPositions(shotPositions.get(1));PacketMove shotPositionsForSecondPlayer=PacketFactory.createMove();shotPositionsForSecondPlayer.addPositions(shotPositions.get(1));shotPositionsForSecondPlayer.addPositions(shotPositions.get(0));firstClient.write(((Packet)shotPositionsForSecondPlayer).setCreationTime(LocalTime.now()));log.info(""...""+shotPositionsForSecondPlayer+"" has been sent to ""+firstClient+""..."");secondClient.write(((Packet)shotPositionsForSecondPlayer).setCreationTime(LocalTime.now()));log.info(""...""+shotPositionsForSecondPlayer+"" has been sent to ""+secondClient+""..."");}}"
3462	"public boolean requiresParamTransformation(){return getResourceNameConfig()!=null&&getMessageResourceNameConfig()!=null&&getMessageResourceNameConfig().getResourceNameType()!=ResourceNameType.ANY&&!getResourceNameConfig().equals(getMessageResourceNameConfig());}"
3463	"@Override public final boolean equals(Object obj){if(this==obj){return true;}if(obj==null){return false;}if(getClass()!=obj.getClass()){return false;} final SingleAttackerEntry other=(SingleAttackerEntry)obj;return chrid==other.chrid;}"
3464	"@Override protected void initView(){Bundle bundle=getIntent().getExtras();if(!bundle.containsKey(BundleConst.BUNDLE_KEY_SETTINGS_FRAGMENT)){finish();}int selectedSettings=bundle.getInt(BundleConst.BUNDLE_KEY_SETTINGS_FRAGMENT);Fragment fragment;switch (selectedSettings){case SettingsMenu.MENU_DRAFT :mCurrentFragment=TAG_FRAGMENT_DRAFT;fragment=new DraftSettingsFragment();break;case SettingsMenu.MENU_HISTORY :mCurrentFragment=TAG_FRAGMENT_HISTORY;fragment=new HistorySettingsFragment();break;case SettingsMenu.MENU_TIME :mCurrentFragment=TAG_FRAGMENT_TIME;fragment=new TimeSettingsFragment();break;case SettingsMenu.MENU_OTHER :mCurrentFragment=TAG_FRAGMENT_OTHER;fragment=new OtherSettingsFragment();break;default :mCurrentFragment=TAG_FRAGMENT_DRAFT;fragment=new DraftSettingsFragment();break;}replaceFragments(fragment,mCurrentFragment,R.id.content_frame);}"
3465	"@Override public void update(MotorSensor sensor,long updateTime){ final Motor motor=sensor.getMotor();long timeElapsed=updateTime-sensor.getUpdateTime();long earliestStateChange=motor.getExpectedTimeDown().getExpectedTime()-motor.getExpectedTimeDown().getTolerance();long latestStateChange=motor.getExpectedTimeDown().getExpectedTime()+motor.getExpectedTimeDown().getTolerance(); final boolean motorMovingDown=motor.isMovingDown()&&!motor.isMovingUp(); final boolean motorMovingUp=!motor.isMovingDown()&&motor.isMovingUp(); final boolean motorStopped=!motorMovingUp&&!motorMovingDown;if(motorStopped&&timeElapsed<earliestStateChange){logger.info(""Motor stopped too early - stop after {} ms, did not expect stop before {} ms."",timeElapsed,earliestStateChange);changeState(sensor,MotorStateError.instance(),updateTime);return ;}if(motorStopped&&timeElapsed<=latestStateChange){logger.info(""Motor stopped at {} within tolerance (from {} to {}) - changing state to MotorStateStoppedDown."",timeElapsed,earliestStateChange,latestStateChange);changeState(sensor,MotorStateStoppedDown.instance(),updateTime);return ;}if(motorMovingUp&&timeElapsed>=earliestStateChange){logger.info(""Motor changed direction upward at {} within tolerance (from {} to {}) - changing state to MotorStateMovingUp."",timeElapsed,earliestStateChange,latestStateChange);changeState(sensor,MotorStateMovingUp.instance(),updateTime);return ;}if(motorMovingDown&&timeElapsed<=latestStateChange){return ;}logger.info(""Motor is in unexpected error state. Time elapsed: {}, earliestStateChange: {}, ""+""latestStateChange: {}, movingUp: {}, movingDown: {}."",timeElapsed,earliestStateChange,latestStateChange,motorMovingUp,motorMovingDown);changeState(sensor,MotorStateError.instance(),updateTime);}"
3466	"@Override public boolean onTouch(View v,MotionEvent event){if(game_control.get_player_kind()==HUMAN){float x=event.getX(),y=event.getY();float w=getWidth(),h=getHeight();if(x<0||y<0||x>w||y>h){highlighting=false;}else {int i=(int)(x/step_x);int j=(int)((h-y)/step_y);switch (event.getAction()){case ACTION_UP :highlighting=hinting=false;if(playable.contains(i,j)&&!played.contains(i,j)){played.add_generator(i,j,true);evaluator.play_point(i,j);}if(!playable.equals(played)){game_control.set_player_kind(COMPUTER);evaluator.choose_computer_move();}break;case ACTION_DOWN :highlighting=true;highlight_x=i;highlight_y=j;if(playable.contains(i,j)&&!played.contains(i,j)){highlight_color=YELLOW;}else {highlight_color=BLACK;}break;case ACTION_MOVE :highlight_x=i;highlight_y=j;if(playable.contains(i,j)&&!played.contains(i,j)){highlight_color=YELLOW;}else {highlight_color=BLACK;}}invalidate();}}return true;}"
3467	"private boolean isValid(int searchType){if(location.getText().length()>0&&search_parameter.getText().length()>0){return true;}else {return false;}}"
3468	"protected HtmlTag addAttribute(String name,String value){if(value!=null&&name!=null&&!value.isEmpty()&&!name.isEmpty()){attributes.put(name,value);}return this;}"
3469	"private boolean isTopOverScroll(float currentY){if(getHeaderView()!=null&&super.isCanPullToRefresh()){return false;}if(isOverScrollTop){return true;}float dealtY=oldY-currentY;return dealtY<0&&!canChildScrollUp();}"
3470	"private void handlePossibleUpdateMessage(UpdateMessageReader umr,boolean force){UpdateMessage updateMessage=umr.getUpdateMessage();if(updateMessage!=null){UpdateMediator.instance().setUpdateMessage(updateMessage);}else {return ;}boolean forceUpdateMessage=System.getenv().get(""FROSTWIRE_FORCE_UPDATE_MESSAGE"")!=null;if(umr.hasUpdateMessage()&&((updateMessage.getBuild()!=null&&!updateMessage.getBuild().trim().equals(""""))||(updateMessage.getVersion()!=null&&!updateMessage.getVersion().trim().equals("""")))&&(forceUpdateMessage||UpdateManager.isFrostWireOld(updateMessage))){boolean hasUrl=updateMessage.getUrl()!=null;boolean hasTorrent=updateMessage.getTorrent()!=null;boolean hasInstallerUrl=updateMessage.getInstallerUrl()!=null;if(forceUpdateMessage){System.out.println(""FROSTWIRE_FORCE_UPDATE_MESSAGE env found, testing update message. (turn off with `unset FROSTWIRE_FORCE_UPDATE_MESSAGE`)"");}if(OSUtils.isWindows()||OSUtils.isMacOSX()){if((hasUrl&&!hasTorrent&&!hasInstallerUrl)||hasUrl){showUpdateMessage(updateMessage);}else {if((hasTorrent||hasInstallerUrl)){new InstallerUpdater(updateMessage,force).start();}}}else {if(OSUtils.isLinux()){if(OSUtils.isUbuntu()){if((hasTorrent||hasInstallerUrl)){new InstallerUpdater(updateMessage,force).start();}else {showUpdateMessage(updateMessage);}}else {if(hasUrl){showUpdateMessage(updateMessage);}}}}}}"
3471	"void loadInventory(Player player){int nCoffee=10,nEnergyDrink=10,nNoodles=10,nSandwich=10,nIED=10;int nTsquare=1,nScarf=1,nMacshield=1,nBookshield=1;String nEquipWep=""None"",nEquipArm=""None"";if(Gdx.files.isLocalStorageAvailable()&&Gdx.files.local(""inventory.xml"").exists()){try{XmlReader reader=new XmlReader();FileHandle handle1=Gdx.files.local(""inventory.xml"");XmlReader.Element root=reader.parse(handle1.readString());XmlReader.Element inventory=root.getChildByName(""items"");nTsquare=inventory.getInt(""Tsquare"");nScarf=inventory.getInt(""Scarf"");nMacshield=inventory.getInt(""Macshield"");nBookshield=inventory.getInt(""Bookshield"");nCoffee=inventory.getInt(""Coffee"");nEnergyDrink=inventory.getInt(""EnergyDrink"");nNoodles=inventory.getInt(""Noodles"");nSandwich=inventory.getInt(""Sandwich"");nIED=inventory.getInt(""IED"");XmlReader.Element equipped=root.getChildByName(""equipped"");nEquipArm=equipped.getChildByName(""EquippedArmour"").getText();nEquipWep=equipped.getChildByName(""EquippedWeapon"").getText();}catch(Exception e){System.out.println(e);}}else {System.out.println(""Local storage unavailable or file doesn't exist."");}if(nEquipWep!=""None""){player.equipItem(nEquipWep);}if(nEquipArm!=""None""){player.equipItem(nEquipArm);}Coffee=new CombatItem(""Energy"",""Energy Item. Mmm that's good coffee!"",0,10,0,nCoffee,""Coffee_cupSmall.png"");EnergyDrink=new CombatItem(""Energy"",""Energy Item. Buzzing!"",0,10,0,nEnergyDrink,""energy60.png"");Noodles=new CombatItem(""Health"",""Health Item. Instant Goodness"",10,0,0,nNoodles,""Noodles.png"");Sandwich=new CombatItem(""Health"",""Health Item. Needs more mayo!"",10,0,0,nSandwich,""sandwichIcon.png"");IED=new CombatItem(""Attack"",""Improvised Explosive Device. Deals damage to all enemies."",0,0,10,nIED,""dynamite.png"");Tsquare=new Equipment(""Weapon"",""Weapon. +10 Attack. The sign of a true engineer."",10,0,0,0,nTsquare,""tsquareSmall.png"");Scarf=new Equipment(""Weapon"",""Weapon. +5 Attack. McDonalds Manager, here I come!"",5,0,0,0,nScarf,""Scarf.png"");Macshield=new Equipment(""Armour"",""Armour. +10 Defence. Overpriced shield!"",0,0,10,0,nMacshield,""macShieldIcon.png"");Bookshield=new Equipment(""Armour"",""Armour. +5 Defence. Is there a fine if it's damaged on return?"",0,0,5,0,nBookshield,""bookShieldIcon.png"");MyCombatInv.put(""Coffee"",Coffee);MyCombatInv.put(""Energy Drink"",EnergyDrink);MyCombatInv.put(""Noodles"",Noodles);MyCombatInv.put(""Sandwich"",Sandwich);MyCombatInv.put(""IED"",IED);MyEquipment.put(""Tsquare"",Tsquare);MyEquipment.put(""Scarf"",Scarf);MyEquipment.put(""Macshield"",Macshield);MyEquipment.put(""Bookshield"",Bookshield);}"
3472	"@Override public void onBluetoothAdapterScanModeChanged(int mode){if(mDiscoveryMode==DiscoveryMode.BLE||mDiscoveryMode==DiscoveryMode.BLE_AND_WIFI){Log.i(TAG,""onBluetoothAdapterScanModeChanged: Mode changed to ""+mode);if(mode==BluetoothAdapter.SCAN_MODE_NONE){if(mState!=DiscoveryManagerState.WAITING_FOR_SERVICES_TO_BE_ENABLED){Log.w(TAG,""onBluetoothAdapterScanModeChanged: Bluetooth disabled, pausing BLE based peer discovery..."");stopBlePeerDiscovery();if(mDiscoveryMode==DiscoveryMode.BLE||(mDiscoveryMode==DiscoveryMode.BLE_AND_WIFI&&!mWifiDirectManager.isWifiEnabled())){setState(DiscoveryManagerState.WAITING_FOR_SERVICES_TO_BE_ENABLED);}}}else {if(mState!=DiscoveryManagerState.NOT_STARTED&&mBluetoothManager.isBluetoothEnabled()){Log.i(TAG,""onBluetoothAdapterScanModeChanged: Bluetooth enabled, restarting BLE based peer discovery..."");start(mMyPeerId,mMyPeerName);}}}}"
3473	"public boolean isEmpty(){return mutationMap.isEmpty()&&(countersMutationMap==null||countersMutationMap.isEmpty());}"
3474	"@Override public boolean equals(Object obj){return obj instanceof Key&&((Key)obj).getRequestCode()==requestCode&&object.get().getClass().getName().equals(((Key)obj).getObject().get().getClass().getName());}"
3475	"public void getCommands(boolean fromFile){Scanner scan=null;if(fromFile){File fileOut=new File(""test.txt"");try{scan=new Scanner(fileOut);}catch(FileNotFoundException e){e.printStackTrace();}}else {scan=new Scanner(System.in);}this.readDataBaseFromFile();boolean continueRunning=true;while(continueRunning){if(currentAcc==null){System.out.println(""*********************************************\n""+""Welcome to the Reva-Banking App Version 2.0\n*********************************************""+""\nType login register or exit"");String str=scan.nextLine();switch (str){case ""register"" :System.out.println(""Enter UserName:"");str=scan.nextLine();if(!dc.isUNameAvalible(str)){System.out.println(""ERROR USER NAME IS UNAVALABLE"");break;}BankMember newMember=new BankMember(null,Type.CUSTOMER);newMember.setUserName(str);System.out.println(""Enter password:"");str=scan.nextLine();newMember.setPassword(str);System.out.println(""What is your name?"");str=scan.nextLine();newMember.setName(str);db.addMember(newMember);dc.addUser(newMember.getName(),newMember.getUserName(),newMember.getPassword(),Type.CUSTOMER);currentAcc=newMember;dc.addLog(""registered ""+newMember.getUserName());break;case ""login"" :System.out.println(""Please input your username:"");str=scan.nextLine();BankMember curr=null;if(!dc.isUNameAvalible(str)){curr=dc.getBankMember(str);}else {System.out.println(""Error user name doesn't exist"");break;}System.out.println(""Please input your password:"");str=scan.nextLine();if(curr.getPassword().equals(str)){currentAcc=curr;}else {System.out.println(""ERROR WRONG PASSWORD"");break;}dc.addLog(""login- ""+currentAcc.getUserName());break;case ""exit"" :FileWriter fw=null;try{fw=new FileWriter(file.getAbsolutePath());}catch(IOException e){e.printStackTrace();}BufferedWriter write=new BufferedWriter(fw);try{writeToFile(write);write.close();fw.close();}catch(IOException e){e.printStackTrace();}dc.addLog(""exiting program"");scan.close();continueRunning=false;break;default :System.out.println(""ERROR INVALID INPUT: ""+str);break;}}else {System.out.println(""Welcome ""+currentAcc.getUserName()+"", Type help for list of commands\n------------------------------------"");Type t=currentAcc.getType();String str=scan.nextLine();if(str.equals(""logout"")){dc.addLog(""logout by- ""+currentAcc.getUserName());System.out.println(""Have a nice day!"");currentAcc=null;}else {switch (t){case CUSTOMER :if(str.equals(""apply checking"")){if(currentAcc.getCheckingStatus()!=Status.ACTIVE){dc.setAccountStatus(currentAcc.getUserName(),2,1);currentAcc.setCheckingStatus(Status.APPLIED);dc.addLog(""user ""+currentAcc.getUserName()+"" applied for a checking account"");System.out.println(""thank you for applying for a checking account"");}}else {if(str.equals(""apply savings"")){if(currentAcc.getSavingStatus()!=Status.ACTIVE){currentAcc.setSavingStatus(Status.APPLIED);dc.setAccountStatus(currentAcc.getUserName(),2,2);dc.addLog(""user ""+currentAcc.getUserName()+"" applied for a saving account"");System.out.println(""Thank you for applying for a savings account"");}}else {if(str.equals(""help"")){System.out.println(""Commands for Customers: apply checking, apply savings,""+"" deposit savings, deposit checking, withdraw savings, withdraw checking"");dc.addLog(""user ""+currentAcc.getUserName()+"" displayed help"");}else {if(str.equals(""deposit checking"")){if(currentAcc.getCheckingStatus()!=Status.ACTIVE){System.out.println(""ERROR CHECKING ACCOUNT NOT APPROVED"");dc.addLog(""INVALID ACCESS TO UNAPPROVED CHECKING ACCOUNT by ""+currentAcc.getUserName());break;}System.out.println(""Enter amount to deposit"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){System.out.println(""ERROR INCORRECTLY FORMATED DEPOSIT:""+str);l.trace(""INCORRECLTY FORMATED DEPOSIT by ""+currentAcc.getUserName()+"" -""+str);break;}currentAcc.setChecking(currentAcc.getChecking()+in.intValue());dc.setAccountBalance(currentAcc.getUserName(),currentAcc.getChecking(),1);dc.addLog(""user ""+currentAcc.getUserName()+"" added $""+in.intValue()+"" to checking account"");System.out.println(""Current Checking amount $""+currentAcc.getChecking());}else {if(str.equals(""deposit savings"")){if(currentAcc.getSavingStatus()!=Status.ACTIVE){System.out.println(""ERROR SAVINGS ACCOUNT NOT APPROVED"");dc.addLog(""INVALID ACCESS TO UNAPPROVED SAVINGS ACCOUNT by ""+currentAcc.getUserName());break;}System.out.println(""Enter amount to deposit"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){System.out.println(""ERROR INCORRECTLY FORMATED DEPOSIT:""+str);dc.addLog(""INCORRECLTY FORMATED DEPOSIT by ""+currentAcc.getUserName()+"" -""+str);break;}currentAcc.setSavings(currentAcc.getSavings()+in.intValue());dc.setAccountBalance(currentAcc.getUserName(),currentAcc.getSavings(),2);System.out.println(""Current Savings amount $""+currentAcc.getSavings());dc.addLog(""user ""+currentAcc.getUserName()+"" added $""+in.intValue()+"" to savings account"");}else {if(str.equals(""withdraw savings"")){if(currentAcc.getSavingStatus()!=Status.ACTIVE){System.out.println(""ERROR SAVING ACCOUNT NOT APPROVED"");dc.addLog(""INVALID ACCESS TO UNAPPROVED SAVINGS ACCOUNT by ""+currentAcc.getUserName());break;}System.out.println(""Enter amount to withdraw"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){dc.addLog(""INCORRECLTY FORMATED DEPOSIT by ""+currentAcc.getUserName()+"" -""+str);System.out.println(""ERROR INCORRECTLY FORMATED WITHDRAW:""+str);break;}if(in>currentAcc.getSavings()){dc.addLog(""User ""+currentAcc.getUserName()+"" tried to withdraw too much from savings account"");System.out.println(""ERROR WITHDRAW AMMOUNT EXCEEDS CURRENT TOTAL"");break;}currentAcc.setSavings(currentAcc.getSavings()-in.intValue());dc.setAccountBalance(currentAcc.getUserName(),currentAcc.getSavings(),2);dc.addLog(""user ""+currentAcc.getUserName()+""withdrew $""+in.intValue()+"" to savings account"");System.out.println(""Current Savings amount $""+currentAcc.getSavings());}else {if(str.equals(""withdraw checking"")){if(currentAcc.getCheckingStatus()!=Status.ACTIVE){dc.addLog(""INVALID ACCESS TO UNAPPROVED CHECKING ACCOUNT by ""+currentAcc.getUserName());System.out.println(""ERROR CHECKING ACCOUNT NOT APPROVED"");break;}System.out.println(""Enter amount to withdraw"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){dc.addLog(""INCORRECLTY FORMATED DEPOSIT by ""+currentAcc.getUserName()+"" -""+str);System.out.println(""ERROR INCORRECTLY FORMATED WITHDRAW:""+str);break;}if(in>currentAcc.getChecking()){System.out.println(""ERROR WITHDRAW AMMOUNT EXCEEDS CURRENT TOTAL"");dc.addLog(""User ""+currentAcc.getUserName()+"" tried to withdraw too much from checking account"");break;}currentAcc.setChecking(currentAcc.getChecking()-in.intValue());dc.setAccountBalance(currentAcc.getUserName(),currentAcc.getChecking(),1);System.out.println(""Current Checking amount $""+currentAcc.getChecking());dc.addLog(""user ""+currentAcc.getUserName()+""withdrew $""+in.intValue()+"" from checking account"");}else {dc.addLog(""user- ""+currentAcc.getUserName()+""entered invalid command"");System.out.println(""ERRROR INVAILD COMMAND: ""+str);}}}}}}}break;case EMPLOYEE :if(str.equals(""view all"")){dc.addLog(""Employee ""+currentAcc.getUserName()+"" viewed all customers"");dc.printCustomers();}else {if(str.equals(""view waiting"")){dc.addLog(""Employee ""+currentAcc.getUserName()+"" viewed all customer applications"");dc.printApplied();}else {if(str.equals(""approve"")){System.out.println(""enter the username of the account to approve"");str=scan.nextLine();BankMember curr;if(db.checkUserNameAvailability(str)==false){curr=db.getAccount(str);}else {System.out.println(""Error user name doesn't exist"");break;}System.out.println(""approve checking or savings?"");str=scan.nextLine();if(str.equals(""savings"")){curr.setSavingStatus(Status.ACTIVE);dc.setAccountStatus(curr.getUserName(),3,2);System.out.println(""approved savings account"");dc.addLog(""Employee ""+currentAcc.getUserName()+"" approved a customers savings account"");}else {if(str.equals(""checking"")){curr.setCheckingStatus(Status.ACTIVE);dc.setAccountStatus(curr.getUserName(),3,1);System.out.println(""approved checking account"");dc.addLog(""Employee ""+currentAcc.getUserName()+"" approved a customers checking account"");}else {System.out.println(""ERROR: ""+str);}}}else {if(str.equals(""help"")){l.trace(""Employee ""+currentAcc.getUserName()+"" viewed help"");dc.addLog(""Employee ""+currentAcc.getUserName()+"" viewed help"");System.out.println(""commands for employee's are view all, view waiting, approve"");}else {dc.addLog(""Employee ""+currentAcc.getUserName()+"" used an invalid command"");System.out.println(""ERRROR INVALID COMMAND ""+str);}}}}break;case ADMIN :if(str.equals(""view all"")){dc.addLog(""Admin ""+currentAcc.getUserName()+"" viewed all accounts"");dc.printAll();}else {if(str.equals(""add"")){System.out.println(""type Employee user name"");str=scan.nextLine();BankMember curr;if(dc.isUNameAvalible(str)){curr=new BankMember(null,Type.EMPLOYEE);curr.setUserName(str);}else {System.out.println(""Error user name taken"");break;}System.out.println(""type their password"");str=scan.nextLine();curr.setPassword(str);System.out.println(""type their name"");str=scan.nextLine();curr.setName(str);db.addMember(curr);dc.addUser(curr.getName(),curr.getUserName(),curr.getPassword(),Type.EMPLOYEE);dc.addLog(""Admin ""+currentAcc.getUserName()+"" added new Employee ""+curr.getUserName());}else {if(str.equals(""edit"")){BankMember curr;System.out.println(""type userName of account you want to edit"");str=scan.nextLine();if(!dc.isUNameAvalible(str)){curr=dc.getBankMember(str);if(curr.getType()==Type.CUSTOMER){System.out.println(""here is the account\n""+curr.getUserName()+"" ""+curr.getPassword()+"" checking status: ""+curr.getCheckingStatus()+"", checking amount: $""+curr.getChecking()+"" saving status: ""+curr.getSavingStatus()+"" saving amount: $""+curr.getSavings());}else {System.out.println(""here is the User:\n""+curr.getUserName()+"" ""+curr.getPassword()+"" ""+curr.getName());}System.out.println(""enter field to edit: choose- checking, savings, userName, or password:"");str=scan.nextLine();if(str.equals(""checking"")){if(curr.getType()!=Type.CUSTOMER){System.out.println(""ERROR only Customers have checking accounts"");break;}System.out.println("" input new checking amount"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){System.out.println(""ERROR INCORRECTLY FORMATED NUMBER:""+str);break;}curr.setChecking(in);dc.setAccountBalance(curr.getUserName(),curr.getChecking(),1);System.out.println(""changed checking"");}else {if(str.equals(""savings"")){if(curr.getType()!=Type.CUSTOMER){System.out.println(""ERROR only Customers have savings accounts"");break;}System.out.println("" input new savings amount"");str=scan.nextLine();Integer in=null;try{in=new Integer(str);}catch(NumberFormatException e){System.out.println(""ERROR INCORRECTLY FORMATED NUMBER:""+str);break;}curr.setSavings(in);dc.setAccountBalance(curr.getUserName(),curr.getSavings(),2);System.out.println(""changed savings"");}else {if(str.equals(""userName"")){System.out.println("" input new userName"");str=scan.nextLine();dc.updateUName(curr.getUserName(),str);System.out.println(""changed userName"");}else {if(str.equals(""password"")){System.out.println("" input new password"");str=scan.nextLine();dc.updatePass(curr.getUserName(),str);System.out.println(""changed password"");}else {System.out.println(""ERROR INVAILD COMMAND ""+str);}}}}dc.addLog(""Admin ""+currentAcc.getUserName()+"" edited the account of ""+curr.getUserName());}else {System.out.println(""Error user name doesn't exist"");break;}}else {if(str.equals(""help"")){dc.addLog(""Admin""+currentAcc.getUserName()+"" viewed help"");System.out.println(""commands for admin: view all, add, edit"");}else {dc.addLog(""Admin ""+currentAcc.getUserName()+"" used an invalid command"");System.out.println(""ERRROR INVALID COMMAND ""+str);}}}}break;}}}}}"
3476	"public static String toIsoDate(Date date){return date==null?"""":PwmConstants.DEFAULT_DATETIME_FORMAT.format(date);}"
3477	"public void setParent(Point p){if(p==this){throw new IllegalArgumentException(""Trying to create a circular reference by setting parent to this!"");}if(p.getParent()==this){throw new IllegalArgumentException(""Trying to create a circular reference by setting parent's parent to this!"");}setParentCost(distance(p));parent=p;}"
3478	"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){super.onActivityResult(requestCode,resultCode,data);if(resultCode!=Activity.RESULT_CANCELED){if(requestCode==IMAGE_REQUEST_CODE||requestCode==CAMERA_REQUEST_CODE){Bitmap originalBitmap;if(requestCode==IMAGE_REQUEST_CODE){String selectedPath=CommonUtil.getImagePath(this,data.getData());String selectedPath1=CommonUtil.getRealPathFromURI(this,data.getData());if(selectedPath==null){originalBitmap=BitmapFactory.decodeFile(selectedPath1);}else {originalBitmap=BitmapFactory.decodeFile(selectedPath);}}else {originalBitmap=BitmapFactory.decodeFile(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER+""/""+tmpFileName);}int width=originalBitmap.getWidth();int height=originalBitmap.getHeight();Matrix scaleMatrix=new Matrix();float scale=1;if(width>height){scale=(float)1000/width;}else {scale=(float)1000/height;}scaleMatrix.postScale(scale,scale);Bitmap resizedBitmap=Bitmap.createBitmap(originalBitmap,0,0,width,height,scaleMatrix,true);FileOutputStream fos=null;try{fos=new FileOutputStream(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER+""/""+currentFileName);resizedBitmap.compress(Bitmap.CompressFormat.JPEG,60,fos);fos.close();originalBitmap.recycle();originalBitmap=null;resizedBitmap.recycle();resizedBitmap=null;View tmpUploadImgView=mServiceContext.inflate(R.layout.imageview_item,null);ImageView tmpUploadImg=(ImageView)tmpUploadImgView.findViewById(R.id.upload_image_item);tmpUploadImg.setImageURI(Uri.fromFile(new File(Environment.getExternalStorageDirectory()+""/""+Data.FOLDER,currentFileName)));mListUploadImage.addView(tmpUploadImgView);ImageView tmpDelUploadImg=(ImageView)tmpUploadImgView.findViewById(R.id.btn_delete_upload_image_item);imageNameList.add(currentFileName);tmpDelUploadImg.setOnClickListener(new deleteImage_Click(tmpUploadImgView,currentFileName));}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException e){e.printStackTrace();}}}}"
3479	"private StudyRecords parseRecords(List<XSSFRow> studyRows){StudyRecords studyRecords=new StudyRecords();XSSFRow mainRow=studyRows.get(0);studyRecords.setSpectNumder((long)getCell(mainRow,dataPosition.getSpectNumber()).getNumericCellValue());studyRecords.setDate(getDate(getCell(mainRow,dataPosition.getDate())));studyRecords.setDose(getValue(getCell(mainRow,dataPosition.getDose())));studyRecords.setFullName(getCell(mainRow,dataPosition.getFullName()).getStringCellValue());List<StudyTarget> targets=new ArrayList<>();targets.add(getStudyTarget(mainRow));if(studyRows.size()>1){for(int i=1;i<studyRows.size();i++){StudyTarget nextTarget=getStudyTarget(studyRows.get(i));for(int j=0;j<nextTarget.getTargets().size();j++){Target target=nextTarget.getTargets().get(j);if(target.getVolume()==null){target.setVolume(targets.get(0).getTargets().get(j).getVolume());}}targets.add(nextTarget);}}studyRecords.setTargets(targets);return studyRecords;}"
3480	"@FlashException(keep=true,referrer={""assign""}) public static void saveAssignPolicy(AssignPolicyForm assignPolicy){if(assignPolicy==null){Logger.error(""No assign policy parameters passed"");badRequest(""No assign policy parameters passed"");return ;}assignPolicy.validate(""assignPolicy"");if(Validation.hasErrors()){Common.handleError();}assignPolicy.id=params.get(""id"");FilePolicyAssignParam assignPolicyParam=new FilePolicyAssignParam();if(assignPolicy.topologiesString==null||assignPolicy.topologiesString.equalsIgnoreCase(""[]"")){FilePolicyRestRep policy=getViprClient().fileProtectionPolicies().getFilePolicy(uri(assignPolicy.id));if(policy.getReplicationSettings()!=null&&policy.getReplicationSettings().getType().equalsIgnoreCase(FileReplicationType.REMOTE.name())){flash.error(""No source and target varry parameters passed"",policy.getName());if(StringUtils.isNotBlank(assignPolicy.referrerUrl)){redirect(assignPolicy.referrerUrl);}else {list();}}}try{updateAssignPolicyParam(assignPolicy,assignPolicyParam);TaskResourceRep taskRes=getViprClient().fileProtectionPolicies().assignPolicy(uri(assignPolicy.id),assignPolicyParam);if(isTaskSuccessful(assignPolicy.id,taskRes)){flash.success(MessagesUtils.get(""assignPolicy.request.saved"",assignPolicy.policyName));}}catch(Exception ex){flash.error(ex.getMessage(),assignPolicy.policyName);}if(StringUtils.isNotBlank(assignPolicy.referrerUrl)){redirect(assignPolicy.referrerUrl);}else {list();}}"
3481	"@Override public void run(){while(!numStore.isRepeated5Times()){synchronized(numStore.getLock()){try{Thread.sleep(1000);}catch(InterruptedException e){e.printStackTrace();}int arr[]=null;int randomNum;for(int j=0;j<5;j++){arr=new int[5];randomNum=new Random().nextInt(100);arr[j]=randomNum;int prevVal=numStore.getNumStore().get(randomNum);numStore.getNumStore().put(randomNum,++prevVal);System.out.print(randomNum+"" "");}System.out.println();if(++counter%5==0){numStore.getLock().notify();try{numStore.getLock().wait();}catch(InterruptedException e){e.printStackTrace();}}}}}"
3482	"@SuppressWarnings(""unchecked"") public ExpressionExperiment switchExperimentToArrayDesign(ExpressionExperiment expExp,ArrayDesign arrayDesign){assert (arrayDesign!=null);processedExpressionDataVectorService.removeProcessedDataVectors(expExp);sampleCoexpressionMatrixService.delete(expExp);for(ExpressionExperimentSubSet subset : expressionExperimentService.getSubSets(expExp)){subsetService.delete(subset);}Map<BioSequence,Collection<CompositeSequence>> designElementMap=new HashMap<>();Collection<CompositeSequence> elsWithNoSeq=new HashSet<>();for(CompositeSequence cs : arrayDesign.getCompositeSequences()){BioSequence bs=cs.getBiologicalCharacteristic();if(bs==null){elsWithNoSeq.add(cs);}else {if(!designElementMap.containsKey(bs)){designElementMap.put(bs,new HashSet<CompositeSequence>());}designElementMap.get(bs).add(cs);}}expExp=expressionExperimentService.thaw(expExp);log.info(elsWithNoSeq.size()+"" elements on the new platform have no associated sequence."");designElementMap.put(NULL_BIOSEQUENCE,elsWithNoSeq);boolean multiPlatformPerSample=false;for(BioAssay assay : expExp.getBioAssays()){assay.setArrayDesignUsed(arrayDesign);if(!multiPlatformPerSample&&assay.getSampleUsed().getBioAssaysUsedIn().size()>1){multiPlatformPerSample=true;}}Collection<BioAssayDimension> unusedBADs=new HashSet<>();BioAssayDimension maxBAD=null;int maxSize=0;if(multiPlatformPerSample){for(BioAssay ba : expExp.getBioAssays()){Collection<BioAssayDimension> oldBioAssayDims=bioAssayService.findBioAssayDimensions(ba);for(BioAssayDimension bioAssayDim : oldBioAssayDims){unusedBADs.add(bioAssayDim);int size=bioAssayDim.getBioAssays().size();if(size>maxSize){maxSize=size;maxBAD=bioAssayDim;}}}assert (unusedBADs.size()>1);unusedBADs.remove(maxBAD);}Collection<ArrayDesign> oldArrayDesigns=expressionExperimentService.getArrayDesignsUsed(expExp);Map<CompositeSequence,Collection<BioAssayDimension>> usedDesignElements=new HashMap<>();for(ArrayDesign oldAd : oldArrayDesigns){if(oldAd.equals(arrayDesign)){continue;}oldAd=arrayDesignService.thaw(oldAd);if(oldAd.getCompositeSequences().size()==0&&!oldAd.getTechnologyType().equals(TechnologyType.NONE)){throw new IllegalStateException(oldAd+"" has no elements"");}Collection<QuantitationType> qts=expressionExperimentService.getQuantitationTypes(expExp,oldAd);log.info(""Processing ""+qts.size()+"" quantitation types for vectors on ""+oldAd);for(QuantitationType type : qts){usedDesignElements.clear();Collection<? extends DesignElementDataVector> vectorsForQt=getVectorsForOneQuantitationType(oldAd,type);if(vectorsForQt==null||vectorsForQt.size()==0){log.debug(""No vectors for ""+type+"" on ""+oldAd);continue;}log.info(""Switching ""+vectorsForQt.size()+"" vectors for ""+type+"" from ""+oldAd.getShortName()+"" to ""+arrayDesign.getShortName());int count=0;Class<? extends DesignElementDataVector> vectorClass=null;Collection<DesignElementDataVector> unMatched=new HashSet<>();for(DesignElementDataVector vector : vectorsForQt){if(vectorClass==null){vectorClass=vector.getClass();}if(!vector.getClass().equals(vectorClass)){throw new IllegalStateException(""Two types of vector for one quantitationtype: ""+type);}assert (RawExpressionDataVector.class.isAssignableFrom(vector.getClass())):""Unexpected class: ""+vector.getClass().getName();CompositeSequence oldDe=vector.getDesignElement();if(oldDe.getArrayDesign().equals(arrayDesign)){continue;}boolean ok=processVector(designElementMap,usedDesignElements,vector,maxBAD);if(!ok){log.warn(""No new design element available to match ""+oldDe+"" (seq=""+oldDe.getBiologicalCharacteristic()+""; array=""+oldDe.getArrayDesign());unMatched.add(vector);}if(++count%20000==0){log.info(""Found matches for ""+count+"" vectors for ""+type);}}if(unMatched.size()>0){throw new IllegalStateException(""There were ""+unMatched.size()+"" vectors that couldn't be matched to the new design for: ""+type+"", example: ""+unMatched.iterator().next());}if(RawExpressionDataVector.class.isAssignableFrom(vectorClass)){int s=expExp.getRawExpressionDataVectors().size();expExp.getRawExpressionDataVectors().removeAll(vectorsForQt);assert (s>expExp.getRawExpressionDataVectors().size());expExp.getRawExpressionDataVectors().addAll((Collection<? extends RawExpressionDataVector>)vectorsForQt);assert (s==expExp.getRawExpressionDataVectors().size());}else {int s=expExp.getProcessedExpressionDataVectors().size();expExp.getProcessedExpressionDataVectors().removeAll(vectorsForQt);assert (s>expExp.getProcessedExpressionDataVectors().size());expExp.getProcessedExpressionDataVectors().addAll((Collection<? extends ProcessedExpressionDataVector>)vectorsForQt);assert (s==expExp.getProcessedExpressionDataVectors().size());}}}expExp.setDescription(expExp.getDescription()+"" [Switched to use ""+arrayDesign.getShortName()+"" by Gemma]"");helperService.persist(expExp,arrayDesign);if(!unusedBADs.isEmpty()){log.info(""Cleaning up unused BioAssayDimensions and BioAssays after merge"");for(BioAssayDimension bioAssayDimension : unusedBADs){List<BioAssay> bioAssays=bioAssayDimension.getBioAssays();bioAssayDimensionService.remove(bioAssayDimension);bioAssayService.remove(bioAssays);}}return expExp;}"
3483	"@Override public void readMarshallable(WireIn wire) throws IllegalStateException{hostDetails.clear();if(!wire.hasMore()){return ;}while(wire.hasMore()){StringBuilder sb=Wires.acquireStringBuilder();ValueIn valueIn=wire.readEventName(sb);if(""context"".contentEquals(sb)){clusterContext=(C)valueIn.typedMarshallable();clusterContext.clusterName(clusterName);continue;}valueIn.marshallable(details -> {  final E hd=newHostDetails();  hd.readMarshallable(details);  hostDetails.put(sb.toString(),hd);});}if(clusterContext==null){throw new IllegalStateException(""required field 'context' is missing."");}}"
3484	"@Override public void save(){if(remPoints!=null){for(Point p : remPoints){System.out.println(""Rem point ""+p.getId());this.removePoint(p.getId());}remPoints=null;}if(diffPoints!=null){for(Point p : diffPoints){System.out.println(""Diff point updating ""+p.getId());this.removePoint(p.getId());this.addPoint(p);}diffPoints=null;}if(remPhysicians!=null){for(Physician p : remPhysicians){System.out.println(""Rem Physician ""+p.getID());this.removePhysician(p.getID());}remPhysicians=null;}if(diffPhysicians!=null){for(Physician p : diffPhysicians){System.out.println(""Diff Physician updating ""+p.getID());this.removePhysician(p.getID());this.addPhysician(p);}diffPhysicians=null;}}"
3485	"public boolean isTelemetryEnabled(){return telemetryEnabled;}"
3486	"@Override public void deleteData(int offset,int count) throws DOMException{if(offset<0){throw new DOMException(DOMException.INDEX_SIZE_ERR,""offset is out of bounds"");}if(cdata!=null){if(offset>cdata.length()){throw new DOMException(DOMException.INDEX_SIZE_ERR,""offset is out of bounds"");}if(offset+count>cdata.length()){cdata.delete(offset,cdata.length()-offset);}else {cdata.delete(offset,count);}}}"
3487	"@EventHandler public void onInventoryDrag(InventoryDragEvent event){Player player=(Player)event.getWhoClicked();if(parent.getBoxManager().isOpeningAttachBox(player)){int size=event.getInventory().getSize();for(int i : event.getRawSlots()){if(i<size){event.setCancelled(true);return ;}}}else {if(parent.getBoxManager().isOpeningEditmodeBox(player)){List<TradableMaterial> disables=parent.getUndineConfig().getProhibitItemsToAttach();if(disables.size()==0){return ;}if(!isDisableItem(event.getOldCursor())){return ;}int size=event.getInventory().getSize();for(int i : event.getRawSlots()){if(i<size){event.setCancelled(true);player.sendMessage(Messages.get(""ErrorProhibitItemAttached"",""%material"",event.getOldCursor().getType().toString()));return ;}}}}}"
3488	"@Override public int getDoc_User_ID(){if(m_AD_User_ID!=0){return m_AD_User_ID;}if(getC_BPartner_ID()!=0){MUser[] users=MUser.getOfBPartner(getCtx(),getC_BPartner_ID());if(users.length>0){m_AD_User_ID=users[0].getAD_User_ID();return m_AD_User_ID;}}return getCreatedBy();}"
3489	"@Override public void processInstruction(ExecutionContext ec) throws DMLRuntimeException{if(instOpcode.equalsIgnoreCase(""bias_add"")||instOpcode.equalsIgnoreCase(""bias_multiply"")){processBiasInstruction(instOpcode,ec);return ;}else {if(instOpcode.equalsIgnoreCase(""relu_backward"")){processReLUBackwardInstruction(ec);return ;}else {if(instOpcode.equalsIgnoreCase(""channel_sums"")){processChannelSumsInstruction(ec);return ;}}}GPUStatistics.incrementNoOfExecutedGPUInst();int pad_h=getScalarInput(ec,_padding,0);int pad_w=getScalarInput(ec,_padding,1);int stride_h=getScalarInput(ec,_stride,0);int stride_w=getScalarInput(ec,_stride,1);int N=getScalarInput(ec,_input_shape,0);int C=getScalarInput(ec,_input_shape,1);int H=getScalarInput(ec,_input_shape,2);int W=getScalarInput(ec,_input_shape,3);int K=getScalarInput(ec,_filter_shape,0);int R=getScalarInput(ec,_filter_shape,2);int S=getScalarInput(ec,_filter_shape,3);int P=(int)ConvolutionUtils.getP(H,R,stride_h,pad_h);int Q=(int)ConvolutionUtils.getQ(W,S,stride_w,pad_w);if(instOpcode.equalsIgnoreCase(""conv2d"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject filter=getMatrixInputForGPUInstruction(ec,_input2.getName());if(image.getNumRows()!=N||image.getNumColumns()!=C*H*W){throw new DMLRuntimeException(""Incorrect dimensions for image in conv2d"");}if(filter.getNumRows()!=K||filter.getNumColumns()!=C*R*S){throw new DMLRuntimeException(""Incorrect dimensions for filter in conv2d"");}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,K*P*Q);LibMatrixCuDNN.conv2d(ec.getGPUContext(0),getExtendedOpcode(),image,filter,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}else {if(instOpcode.equalsIgnoreCase(""conv2d_bias_add"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject bias=getMatrixInputForGPUInstruction(ec,_input2.getName());MatrixObject filter=getMatrixInputForGPUInstruction(ec,_input3.getName());if(image.getNumRows()!=N||image.getNumColumns()!=C*H*W){throw new DMLRuntimeException(""Incorrect dimensions for image in conv2d"");}if(filter.getNumRows()!=K||filter.getNumColumns()!=C*R*S){throw new DMLRuntimeException(""Incorrect dimensions for filter in conv2d"");}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,K*P*Q);LibMatrixCuDNN.conv2dBiasAdd(ec.getGPUContext(0),getExtendedOpcode(),image,bias,filter,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}else {if(instOpcode.equalsIgnoreCase(""conv2d_backward_filter"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject dout=getMatrixInputForGPUInstruction(ec,_input2.getName());if(image.getNumRows()!=N||image.getNumColumns()!=C*H*W){throw new DMLRuntimeException(""Incorrect dimensions for image in conv2d_backward_filter"");}if(dout.getNumRows()!=N||dout.getNumColumns()!=K*P*Q){throw new DMLRuntimeException(""Incorrect dimensions for dout in conv2d_backward_filter: ""+dout.getNumRows()+"" != ""+N+"" || ""+dout.getNumColumns()+"" != ""+K*P*Q);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),K,C*R*S);LibMatrixCuDNN.conv2dBackwardFilter(ec.getGPUContext(0),getExtendedOpcode(),image,dout,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}else {if(instOpcode.equalsIgnoreCase(""conv2d_backward_data"")){MatrixObject filter=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject dout=getMatrixInputForGPUInstruction(ec,_input2.getName());if(filter.getNumRows()!=K||filter.getNumColumns()!=C*R*S){throw new DMLRuntimeException(""Incorrect dimensions for filter in convolution_backward_data"");}if(dout.getNumRows()!=N||dout.getNumColumns()!=K*P*Q){throw new DMLRuntimeException(""Incorrect dimensions for dout in conv2d_backward_data: ""+dout.getNumRows()+"" != ""+N+"" || ""+dout.getNumColumns()+"" != ""+K*P*Q);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,C*H*W);LibMatrixCuDNN.conv2dBackwardData(ec.getGPUContext(0),getExtendedOpcode(),filter,dout,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}else {if(instOpcode.equalsIgnoreCase(""maxpooling"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());if(image.getNumRows()!=N||image.getNumColumns()!=C*H*W){throw new DMLRuntimeException(""Incorrect dimensions for image in maxpooling: ""+image.getNumRows()+"" != ""+N+"" || ""+image.getNumColumns()+"" != ""+C*H*W);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,C*P*Q);if(instOpcode.equalsIgnoreCase(""maxpooling"")){LibMatrixCuDNN.maxpooling(ec.getGPUContext(0),getExtendedOpcode(),image,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}}else {if(instOpcode.equalsIgnoreCase(""reorg_nkpq"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());if(image.getNumRows()!=N||image.getNumColumns()!=K*P*Q){throw new DMLRuntimeException(""Incorrect dimensions for image in reorg_nkpq: ""+image.getNumRows()+"" != ""+N+"" || ""+image.getNumColumns()+"" != ""+K*P*Q);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),K,N*P*Q);if(instOpcode.equalsIgnoreCase(""reorg_nkpq"")){LibMatrixCuDNN.reorg_nkpq(ec.getGPUContext(0),getExtendedOpcode(),image,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}}else {if(instOpcode.equalsIgnoreCase(""reorg_npqk"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());if(image.getNumRows()!=N*P*Q||image.getNumColumns()!=K){throw new DMLRuntimeException(""Incorrect dimensions for image in reorg_npqk: ""+image.getNumRows()+"" != ""+N*P*Q+"" || ""+image.getNumColumns()+"" != ""+K);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,K*P*Q);if(instOpcode.equalsIgnoreCase(""reorg_npqk"")){LibMatrixCuDNN.reorg_npqk(ec.getGPUContext(0),getExtendedOpcode(),image,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}}else {if(instOpcode.equalsIgnoreCase(""reorg_bias_add_npqk"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject bias=getMatrixInputForGPUInstruction(ec,_input2.getName());if(image.getNumRows()!=N*P*Q||image.getNumColumns()!=K){throw new DMLRuntimeException(""Incorrect dimensions for image in reorg_bias_add_npqk: ""+image.getNumRows()+"" != ""+N*P*Q+"" || ""+image.getNumColumns()+"" != ""+K);}if(bias.getNumRows()!=K||bias.getNumColumns()!=1){throw new DMLRuntimeException(""Incorrect dimensions for bias in reorg_bias_add_npqk: ""+bias.getNumRows()+"" != ""+K+"" || ""+bias.getNumColumns()+"" != 1"");}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,K*P*Q);if(instOpcode.equalsIgnoreCase(""reorg_bias_add_npqk"")){LibMatrixCuDNN.reorg_bias_add_npqk(ec.getGPUContext(0),getExtendedOpcode(),image,bias,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}}else {if(instOpcode.equalsIgnoreCase(""maxpooling_backward"")){MatrixObject image=getMatrixInputForGPUInstruction(ec,_input1.getName());MatrixObject dout=getMatrixInputForGPUInstruction(ec,_input2.getName());MatrixObject maxPoolOutput=_input3!=null?getMatrixInputForGPUInstruction(ec,_input3.getName()):null;if(dout.getNumRows()!=N||dout.getNumColumns()!=C*P*Q){throw new DMLRuntimeException(""Incorrect dimensions for dout in maxpooling_backward"");}if(image.getNumRows()!=N||image.getNumColumns()!=C*H*W){throw new DMLRuntimeException(""Incorrect dimensions for image in maxpooling_backward: ""+image.getNumRows()+"" != ""+N+"" || ""+image.getNumColumns()+"" != ""+K*P*Q);}MatrixObject out=getDenseMatrixOutputForGPUInstruction(ec,_output.getName(),N,C*H*W);LibMatrixCuDNN.maxpoolingBackward(ec.getGPUContext(0),getExtendedOpcode(),image,dout,maxPoolOutput,out,N,C,H,W,K,R,S,pad_h,pad_w,stride_h,stride_w,P,Q,_intermediateMemoryBudget);}else {throw new DMLRuntimeException(""Unsupported GPU context for ""+instOpcode);}}}}}}}}}ec.releaseMatrixInputForGPUInstruction(_input1.getName());if(!(instOpcode.equalsIgnoreCase(""maxpooling"")||instOpcode.equalsIgnoreCase(""reorg_npqk""))){ec.releaseMatrixInputForGPUInstruction(_input2.getName());}if(instOpcode.equalsIgnoreCase(""conv2d_bias_add"")||(instOpcode.equalsIgnoreCase(""maxpooling_backward"")&&_input3!=null)){ec.releaseMatrixInputForGPUInstruction(_input3.getName());}ec.releaseMatrixOutputForGPUInstruction(_output.getName());}"
3490	"@Override public void onViewCreated(View view,Bundle savedInstanceState){super.onViewCreated(view,savedInstanceState);listView=view.findViewById(R.id.listView);listViewAll=view.findViewById(R.id.listViewAll);textViewNoItem=view.findViewById(R.id.textViewNoItem);galaxy=view.findViewById(R.id.galaxy);setViewHide();galaxy.setVisibility(View.VISIBLE);if(activity.selectedCursus!=null){List<ProjectDataIntra> list=GalaxyUtils.getData(getContext(),activity.selectedCursus.cursusId,AppSettings.getUserCampus(activity.app),activity.user);galaxy.setData(list);}galaxy.setOnProjectClickListener(this);listView.setOnItemClickListener(this);listViewAll.setOnItemClickListener(this);}"
3491	"protected boolean canUpdate(){if(owner!=null&&(!owner.isShowOwner()&&!forceUpdate)){logInfo(null,""Owner disabled"");return false;}if(!forceUpdate&&owner!=null&&!Settings.get().isUpdatable(nextUpdate,false)){addError(null,""NOT ALLOWED YET"",""Not allowed yet.\r\n(Fix: Just wait a bit)"");return false;}if(invalidAccessPrivileges()){addError(null,""NOT ENOUGH ACCESS PRIVILEGES"",""Not enough access privileges.\r\n(Fix: Add ""+getTaskName()+"" to the API Key)"");return false;}return true;}"
3492	"public void move(Terrain terrain){checkInputs();super.increaseRotation(0,currentTurnSpeed*DisplayManager.getFrameTimeSeconds(),0);float distance=currentSpeed*DisplayManager.getFrameTimeSeconds();float dx=(float)(distance*Math.sin(Math.toRadians(super.getRotY())));float dz=(float)(distance*Math.cos(Math.toRadians(super.getRotY())));super.increasePosition(dx,0,dz);upwardsSpeed+=GRAVITY*DisplayManager.getFrameTimeSeconds();super.increasePosition(0,upwardsSpeed*DisplayManager.getFrameTimeSeconds(),0);float terrainHeight=terrain.getHeightOfTerrain(super.getPosition().x,super.getPosition().z);if(super.getPosition().y<terrainHeight){upwardsSpeed=0;super.getPosition().y=terrainHeight;inAir=false;}}"
3493	"public boolean autoCompleteStartTest(){for(int i=0;i<7;i++){if(stacks[i].getSize()>0&&!stacks[i].getCard(0).isUp()){return false;}}if(prefs.getSavedKlondikeVegasDrawModeOld(whichGame).equals(""3"")||hasLimitedRecycles()){if(getMainStack().getSize()>0||stacks[11].getSize()>0||stacks[12].getSize()>0){return false;}}return true;}"
3494	"public static boolean copyBlockBuffersToScenarioBuffer(){for(String s : blockTextBuffer){scenarioBuffer.add(s);}if(blockButtonBuffer.size()>0){scenarioBuffer.add(""/~reset-buttons"");for(String j : blockButtonBuffer){if(j.length()!=0){scenarioBuffer.add(j);}}scenarioBuffer.add(""/~user-input"");}scenarioBuffer.add("""");return true;}"
3495	"public boolean isDescriptionLengthMatch(){return (code.length()>0&&code.length()<=300);}"
3496	"public HashMap<String,ArrayList<String>> propagatePredicates(String expr,String predicate){HashMap<String,ArrayList<String>> predicates=new HashMap<String,ArrayList<String>>();Matcher m=METHOD_CALL.matcher(expr);while(m.find()){String apiName=m.group(1);if(!pattern.contains(apiName)){continue;}String receiver=getReceiver(expr,apiName);String args=m.group(3);ArrayList<String> arguments=new ArrayList<String>();if(args!=null){arguments=getArguments(args);for(String arg : arguments){HashMap<String,ArrayList<String>> p2=propagatePredicates(arg,predicate);for(String name : p2.keySet()){if(predicates.containsKey(name)){predicates.get(name).addAll(p2.get(name));}else {predicates.put(name,p2.get(name));}}}}HashSet<String> relevant_elements=new HashSet<String>();if(receiver!=null){relevant_elements.add(receiver);}relevant_elements.addAll(arguments);String conditioned_predicate=condition(relevant_elements,predicate);ArrayList<String> temp1=new ArrayList<String>();if(receiver!=null){temp1.add(receiver);}ArrayList<ArrayList<String>> temp2=new ArrayList<ArrayList<String>>();temp2.add(arguments);String normalized_predicate=normalize(conditioned_predicate,temp1,temp2);ArrayList<String> value;if(predicates.containsKey(apiName)){value=predicates.get(apiName);}else {value=new ArrayList<String>();}value.add(normalized_predicate);predicates.put(apiName,value);}return predicates;}"
3497	"public boolean isIntegration(){return preRelease!=null&&preRelease.isIntegration();}"
3498	"public Tour local_search(Tour tspdSolution){Random rand=new Random();Tour next_tour=null;System.out.println(""local_search::tspd input=""+tspdSolution.toString());ArrayList<Point> totalPoints=new ArrayList<Point>();ArrayList<Point> truckTour=tspdSolution.getTD().getTruck_tour();for(int i=1;i<truckTour.size()-1;i++){totalPoints.add(truckTour.get(i));}ArrayList<Point> droneNodes=tspd.getDroneNodes(tspdSolution);for(int i=0;i<droneNodes.size();i++){totalPoints.add(droneNodes.get(i));}int maxIter=20;int it=0;while(next_tour==null&&it<maxIter){int iMoveOperator=rand.nextInt(4);int iPa=rand.nextInt(totalPoints.size());int iPb=rand.nextInt(totalPoints.size());while(iPa==iPb){iPb=rand.nextInt(totalPoints.size());}int iPc=rand.nextInt(totalPoints.size());while(iPc==iPa||iPc==iPb){iPc=rand.nextInt(totalPoints.size());}Point a=totalPoints.get(iPa);Point b=totalPoints.get(iPb);Point c=totalPoints.get(iPc);System.out.println(""(""+a.toString()+"", ""+b.toString()+"", ""+c.toString()+"") is chosen to move"");if(iMoveOperator==0){next_tour=relocate(tspdSolution,a,b);}else {if(iMoveOperator==1){next_tour=relocate(tspdSolution,a,b,c);}else {if(iMoveOperator==2){next_tour=remove(tspdSolution,a,b);}else {next_tour=two_exchange(tspdSolution,a,b);}}}it++;}if(next_tour==null){return tspdSolution;}return next_tour;}"
3499	"public void consume() throws FileServerConnectorException{if(log.isDebugEnabled()){log.debug(""Polling for directory or file : ""+FileTransportUtils.maskURLPassword(fileURI));}try{boolean isFileExists;try{isFileExists=fileObject.exists();}catch(FileSystemException e){throw new FileServerConnectorException(""Error occurred when determining whether the file at URI : ""+FileTransportUtils.maskURLPassword(fileURI)+"" exists. ""+e);}boolean isFileReadable;try{isFileReadable=fileObject.isReadable();}catch(FileSystemException e){throw new FileServerConnectorException(""Error occurred when determining whether the file at URI : ""+FileTransportUtils.maskURLPassword(fileURI)+"" is readable. ""+e);}if(isFileExists&&isFileReadable){FileObject[] children=null;try{children=fileObject.getChildren();}catch(FileSystemException ignored){if(log.isDebugEnabled()){log.debug(""The file does not exist, or is not a folder, or an error ""+""has occurred when trying to list the children. File URI : ""+FileTransportUtils.maskURLPassword(fileURI),ignored);}}if(children==null||children.length==0){processFile(fileObject);deleteFile(fileObject);}else {directoryHandler(children);}}else {throw new FileServerConnectorException(""Unable to access or read file or directory : ""+FileTransportUtils.maskURLPassword(fileURI)+"". Reason: ""+(isFileExists?(isFileReadable?""Unknown reason"":""The file can not be read!""):""The file does not exist!""));}}finally{try{fileObject.close();}catch(FileSystemException e){log.warn(""Could not close file at URI: ""+FileTransportUtils.maskURLPassword(fileURI),e);}}if(log.isDebugEnabled()){log.debug(""End : Scanning directory or file : ""+FileTransportUtils.maskURLPassword(fileURI));}}"
3500	"private Saml2Client newClient(){Preconditions.checkNotNull(idpMetadata);Saml2Client client=new Saml2Client();client.setIdpMetadata(idpMetadata);client.setCallbackUrl(getConsumerServiceUrl());client.setDestinationBindingType(SAMLConstants.SAML2_REDIRECT_BINDING_URI);if(useEncryption){client.setKeystorePath(getKeystorePath());client.setKeystorePassword(getKeystorePassword());client.setPrivateKeyPassword(getPrivateKeyPassword());}LOG.fine(client.printClientMetadata());client.setMaximumAuthenticationLifetime(this.maximumAuthenticationLifetime);return client;}"
3501	"public boolean a(OItemStack var1,OEntityPlayer var2,OWorld var3,int var4,int var5,int var6,int var7){if(var7!=1){return false;}else {int var8=var3.a(var4,var5,var6);if(var8==OBlock.aB.bn&&var3.f(var4,var5+1,var6)){Block blockClicked=new Block(var3.world,var8,var4,var5,var6);blockClicked.setFaceClicked(Block.Face.fromId(var7));Block blockPlaced=new Block(var3.world,var3.a(var4,var5+1,var6),var4,var5+1,var6);Player player=((OEntityPlayerMP)var2).getPlayer();if((Boolean)etc.getLoader().callHook(PluginLoader.Hook.ITEM_USE,player,blockPlaced,blockClicked,new Item(var1))){return false;}var3.e(var4,var5+1,var6,this.a);--var1.a;return true;}else {return false;}}}"
3502	"public Set<File> getProjectSources(){try{if(type.equals(Type.PROJECT)){if(cachedSrc!=null){return cachedSrc;}this.cachedSrc=Session.findProject(this.file).map(wrapIO(Project::getAllSources)).orElse(Collections.emptySet());return this.cachedSrc;}return Collections.emptySet();}catch(IOException e){throw new UncheckedIOException(e);}}"
3503	"@Override public boolean checkPermission(MinecraftServer server,ICommandSender ics){return getRequiredPermissionLevel()==0||super.checkPermission(server,ics);}"
3504	"@Override public boolean onCreateOptionsMenu(Menu menu){if(viewDelegate.getOptionsMenuId()!=0){getMenuInflater().inflate(viewDelegate.getOptionsMenuId(),menu);}return super.onCreateOptionsMenu(menu);}"
3505	"public ImageView getCover(){if(mMediaController!=null){return mMediaController.getCover();}return null;}"
3506	"private static void notifyGamePlayerInfoIfRelevant(UserId userId,GameObject game) throws IOException{if(server.isPlayerInMenu(userId)||server.isPlayerHostingLobby(userId)){List<PlayerInfo> infos=server.getPlayerInfoForAllInGame(game);for(PlayerInfo info : infos){sendMessage(userId,new Msg.PlayerInfoUpdate(info));}}}"
3507	"@Override public void onClick(View view,int position){hideKeyboard();if(!"""".equals(etQuantity.getText().toString().trim())){if(locList.get(position).getQuantity()<Integer.parseInt(etQuantity.getText().toString())){showToast(""This location doesn't contain ""+etQuantity.getText().toString()+"" Material(s)!"");}else {materialLocID=locList.get(position).getLocationID();eqID=locList.get(position).getEquipmentID();rlBottomSheetJobnumber.setVisibility(View.VISIBLE);}}else {showToast(""Please enter quantity first!"");}}"
3508	"@Override public boolean isReferenceTo(PsiElement definitionElement){String refName=myElement.getName();if(definitionElement instanceof IdentifierPSINode&&isDefinitionNode(definitionElement.getParent())){definitionElement=definitionElement.getParent();}if(isDefinitionNode(definitionElement)){if(definitionElement instanceof FunctionDefinitionNode||definitionElement instanceof ConnectorDefinitionNode||definitionElement instanceof StructDefinitionNode||definitionElement instanceof ConstantDefinitionNode||definitionElement instanceof GlobalVariableDefinitionNode){PsiDirectory myDirectory=myElement.getContainingFile().getContainingDirectory();PsiDirectory definitionDirectory=definitionElement.getContainingFile().getContainingDirectory();if(myDirectory.equals(definitionDirectory)){if(myElement.getParent() instanceof NameReferenceNode){PackageNameNode packageNameNode=PsiTreeUtil.findChildOfType(myElement.getParent(),PackageNameNode.class);if(packageNameNode!=null){return false;}}boolean isStructField=BallerinaPsiImplUtil.isStructField(myElement);if(!isStructField){return isValid((PsiNameIdentifierOwner)definitionElement,refName);}}else {Map<String,String> allImports=BallerinaPsiImplUtil.getAllImportsInAFile(myElement.getContainingFile());if(!allImports.containsKey(definitionDirectory.getName())){return false;}if(myElement.getParent() instanceof NameReferenceNode){PackageNameNode packageNameNode=PsiTreeUtil.findChildOfType(myElement.getParent(),PackageNameNode.class);if(packageNameNode==null){return false;}PsiReference reference=packageNameNode.getReference();if(reference!=null){PsiElement resolvedElement=reference.resolve();if(!(resolvedElement instanceof PsiDirectory)){return false;}}}return isValid((PsiNameIdentifierOwner)definitionElement,refName);}}else {if(definitionElement instanceof ParameterNode){if(!(myElement.getParent() instanceof NameReferenceNode)){return false;}PsiElement commonContext=PsiTreeUtil.findCommonContext(definitionElement,myElement);if(!(commonContext instanceof FunctionDefinitionNode||commonContext instanceof ResourceDefinitionNode||commonContext instanceof ConnectorDefinitionNode||commonContext instanceof ActionDefinitionNode||commonContext instanceof TypeMapperNode)){return false;}VariableReferenceNode variableReferenceNode=PsiTreeUtil.getParentOfType(myElement,VariableReferenceNode.class);if(variableReferenceNode==null){return false;}while(variableReferenceNode!=null){PsiElement prevSibling=variableReferenceNode.getPrevSibling();if(prevSibling!=null){if(prevSibling instanceof LeafPsiElement){IElementType elementType=((LeafPsiElement)prevSibling).getElementType();if(elementType==BallerinaTypes.DOT){return false;}}}PsiElement variableReferenceNodeParent=variableReferenceNode.getParent();if(variableReferenceNodeParent instanceof VariableReferenceNode){variableReferenceNode=((VariableReferenceNode)variableReferenceNodeParent);}else {variableReferenceNode=null;}}boolean isStructField=BallerinaPsiImplUtil.isStructField(myElement);if(!isStructField){return isValid((PsiNameIdentifierOwner)definitionElement,refName);}}else {if(definitionElement instanceof VariableDefinitionNode){PsiElement commonContext=PsiTreeUtil.findCommonContext(definitionElement,myElement);if(!(commonContext instanceof CallableUnitBodyNode||commonContext instanceof ConnectorBodyNode||commonContext instanceof TypeMapperBodyNode)){return false;}VariableDefinitionNode variableDefinitionNode=PsiTreeUtil.getParentOfType(myElement,VariableDefinitionNode.class);if(variableDefinitionNode!=null){if(definitionElement.equals(variableDefinitionNode)){return false;}}boolean isStructField=BallerinaPsiImplUtil.isStructField(myElement);if(!isStructField){return isValid((PsiNameIdentifierOwner)definitionElement,refName);}}else {if(definitionElement instanceof FieldDefinitionNode){PsiReference reference=myElement.getReference();if(reference==null){return false;}PsiElement resolvedElement=reference.resolve();if(resolvedElement==null){return false;}return resolvedElement.getParent().equals(definitionElement);}else {if(definitionElement instanceof NameReferenceNode){}}}}}}return false;}"
3509	"public ItemStack getResultWithResources(CraftRecipe recipe){if(recipe==null){return null;}if(getMissingIngredients(recipe).length>0){return getRecipeResult(recipe,null);}ItemStack result=null;ItemStack[] foundItemStacks=findAndGetRecipeIngredients(recipe,false);InventoryCrafting matrix=InventoryUtils.simulateCraftingInventory(foundItemStacks);result=CraftingManager.getInstance().findMatchingRecipe(matrix,device.getWorld());return result;}"
3510	"public static boolean removePhotos(Collection<Photo> photoList){boolean cacheHasChanged=false;for(Photo photo : photoList){cacheHasChanged=cacheHasChanged||removePhoto(photo);}return cacheHasChanged;}"
3511	"private void handleAuth(){ShizukuState state=ShizukuClient.authorize();LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(Intents.ACTION_AUTH_RESULT).putExtra(Intents.EXTRA_RESULT,state));if(state.getCode()==ShizukuState.STATUS_OK){ShizukuManagerSettings.setLastLaunchMode(state.isRoot()?ShizukuManagerSettings.LaunchMethod.ROOT:ShizukuManagerSettings.LaunchMethod.ADB);}}"
3512	"@Override public void run(){while(true){if(!GameAudio.audioSupported){break;}if(MainMenu.mainMenu==null&&bgm!=null){if(bgm==audioArray[audioMap.get(""bgm_menu"")]){bgm.stop();int random=(int)(Math.random()*5);bgm=audioArray[audioMap.get(""bgm_game""+random)];bgm.play(0);}else {if(!bgm.isRunning()){bgm.stop();int random=(int)(Math.random()*5);bgm=audioArray[audioMap.get(""bgm_game""+random)];bgm.play(0);}}}else {if(MainMenu.mainMenu!=null){if(bgm!=audioArray[audioMap.get(""bgm_menu"")]){if(bgm!=null){bgm.stop();}bgm=audioArray[audioMap.get(""bgm_menu"")];bgm.loop();}}}try{Thread.sleep(100);}catch(InterruptedException e){e.printStackTrace();}}}"
3513	"@Override public boolean mouseMoved(InputEvent event,float x,float y){if(lineIndex>-1){System.out.println(lineIndex);}return super.mouseMoved(event,x,y);}"
3514	"public void setOptionNumberPerGroup(int optionNumberPerGroup){if(type!=GroupType.UP_TO_X_PER_Y_MODELS&&type!=GroupType.UP_TO_X_OF_EACH_PER_Y_MODELS&&type!=GroupType.ONE_PER_MODEL&&type!=GroupType.X_OF_EACH_PER_MODEL){if(this.optionNumberPerGroup!=Math.max(0,optionNumberPerGroup)){this.optionNumberPerGroup=Math.max(0,optionNumberPerGroup);validateAmounts();}}}"
3515	"@Override public void removeMember(EntityPlayer player,Group group){if(!this.assertValidGroup(group)||!this.assertMemberIn(group,player)){return ;}GroupMember member=GroupMember.get(player);this.removeMemberDirectly(group,member);UtilCore.NETWORK.sendToGroup(new PacketRemoveMember(this,group,member),group);if(this.settings.groupRemovedWhenEmpty()&&group.getMemberData().size()==0){this.remove(group);}}"
3516	"public boolean isComplete(){return !finished.containsValue(false);}"
3517	"@Override public ImpulseFrame process(StreamFrame inFrame){if(!(inFrame instanceof RawAudioFrame)){throw new RuntimeException(""Wrong frame type"");}int index=0;short[] frame=((RawAudioFrame)inFrame).getAudioData();int peakNum=maxHeight(frame,0,frame.length);short[] peakMagnitudes=new short[peakNum];int[] peakOffsets=new int[peakNum];System.out.print(peakNum+"" "");if(peakNum>0){for(int i=0;i<frame.length;i++){double value=java.lang.Math.abs((double)frame[i])/32768.0;if(value>threshold&&isPeak(frame,i)){peakMagnitudes[index]=frame[i];peakOffsets[index]=sampleToTimeOffset(i);index++;}}}ImpulseFrame impulseFrame=header.new ImpulseFrame(peakOffsets,peakMagnitudes);return impulseFrame;}"
3518	"public Item removeLast(){validateRemove();Item item=tail.item;if(tail.last==null){tail=null;head=null;}else {tail=tail.last;tail.next=null;}return item;}"
3519	"@Override public boolean matches(InventoryCrafting inv,World worldIn){int invSize=inv.getSizeInventory();for(int i=0;i<invSize;i++){if(inv.getStackInSlot(i)!=null){if(inv.getStackInSlot(i).getItem().equals(UIItems.mortarAndPestle)){for(int j=0;j<invSize;j++){if(inv.getStackInSlot(j)!=null){if(inv.getStackInSlot(j).getItem().equals(input.getItem())){return true;}}}}}}return false;}"
3520	"private UnManagedVolume createUnManagedVolume(UnManagedVolume unManagedVolume,String unManagedVolumeNativeGuid,XtremIOVolume volume,Map<String,List<UnManagedVolume>> igVolumesMap,StorageSystem system,StoragePool pool,DbClient dbClient){boolean created=false;if(null==unManagedVolume){unManagedVolume=new UnManagedVolume();unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);unManagedVolume.setStorageSystemUri(system.getId());if(pool!=null){unManagedVolume.setStoragePoolUri(pool.getId());}created=true;}unManagedVolume.setLabel(volume.getVolInfo().get(1));Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();Map<String,String> unManagedVolumeCharacteristics=new HashMap<String,String>();Boolean isVolumeExported=false;if(volume.getLunMaps().size()>0){unManagedVolume.getUnmanagedExportMasks().clear();unManagedVolume.getInitiatorNetworkIds().clear();unManagedVolume.getInitiatorUris().clear();isVolumeExported=true;for(List<Object> lunMapEntries : volume.getLunMaps()){ @SuppressWarnings(""unchecked"") List<Object> igDetails=(List<Object>)lunMapEntries.get(0);if(null==igDetails.get(1)||null==lunMapEntries.get(2)){log.warn(""IG Name is null in returned lun map response for volume {}"",volume.toString());continue;}String igNameToProcess=(String)igDetails.get(1);List<UnManagedVolume> igVolumes=igVolumesMap.get(igNameToProcess);if(igVolumes==null){igVolumes=new ArrayList<UnManagedVolume>();igVolumesMap.put(igNameToProcess,igVolumes);}igVolumes.add(unManagedVolume);}}unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());StringSet deviceLabel=new StringSet();deviceLabel.add(volume.getVolInfo().get(1));unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);StringSet wwn=new StringSet();String volumeWWN=volume.getWwn().isEmpty()?volume.getVolInfo().get(0):volume.getWwn();wwn.add(volumeWWN);unManagedVolumeInformation.put(SupportedVolumeInformation.WWN.toString(),wwn);StringSet systemTypes=new StringSet();systemTypes.add(system.getSystemType());StringSet provCapacity=new StringSet();provCapacity.add(String.valueOf(Long.parseLong(volume.getAllocatedCapacity())*1024));unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);StringSet allocatedCapacity=new StringSet();allocatedCapacity.add(String.valueOf(Long.parseLong(volume.getAllocatedCapacity())*1024));unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);StringSet nativeId=new StringSet();nativeId.add(volume.getVolInfo().get(0));unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.TRUE.toString());StringSet bwValues=new StringSet();bwValues.add(""0"");if(unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString())==null){unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString(),bwValues);}else {unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()).replace(bwValues);}StringSet iopsVal=new StringSet();iopsVal.add(""0"");if(unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString())==null){unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString(),iopsVal);}else {unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()).replace(iopsVal);}if(null!=pool){unManagedVolume.setStoragePoolUri(pool.getId());StringSet pools=new StringSet();pools.add(pool.getId().toString());unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);StringSet driveTypes=pool.getSupportedDriveTypes();if(null!=driveTypes){unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);}StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));if(unManagedVolumeInformation.containsKey(SupportedVolumeInformation.SUPPORTED_VPOOL_LIST.toString())){log.debug(""Matched Pools :""+Joiner.on(""\t"").join(matchedVPools));if(null!=matchedVPools&&matchedVPools.size()==0){unManagedVolumeInformation.get(SupportedVolumeInformation.SUPPORTED_VPOOL_LIST.toString()).clear();}else {unManagedVolumeInformation.get(SupportedVolumeInformation.SUPPORTED_VPOOL_LIST.toString()).replace(matchedVPools);log.info(""Replaced Pools :""+Joiner.on(""\t"").join(unManagedVolumeInformation.get(SupportedVolumeInformation.SUPPORTED_VPOOL_LIST.toString())));}}else {unManagedVolumeInformation.put(SupportedVolumeInformation.SUPPORTED_VPOOL_LIST.toString(),matchedVPools);}}unManagedVolume.addVolumeInformation(unManagedVolumeInformation);if(unManagedVolume.getVolumeCharacterstics()==null){unManagedVolume.setVolumeCharacterstics(new StringMap());}unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);if(created){unManagedVolumesToCreate.add(unManagedVolume);}else {unManagedVolumesToUpdate.add(unManagedVolume);}return unManagedVolume;}"
3521	"private void createCallbackInfo(Callback callback,boolean store){this.dupReturnValue(callback);callback.add(new TypeInsnNode(Opcodes.NEW,callback.target.callbackInfoClass),true,!store);callback.add(new InsnNode(Opcodes.DUP),true,true);this.invokeCallbackInfoCtor(callback);if(store){callback.add(new VarInsnNode(Opcodes.ASTORE,callback.marshallVar));}}"
3522	"private void addCommentToRecyclerView(Response response,ProgressDialog dialog){if(response.body()==null){BugReport.sendBugReport(response.raw().toString(),mContext);return ;}if(commentsIsRepeated(response)){Toast.makeText(mContext,mContext.getString(R.string.comment_is_repeated),Toast.LENGTH_SHORT).show();return ;}PostCommentResultModel model=(PostCommentResultModel)response.body();if(model.getIsModeration().equalsIgnoreCase(""false"")){mCommentModel.setCommentId(model.getCommentId());mOnPostComment.onPostComment(mCommentModel,dialog);}else {mBinding.headerWriteAComment.getText().clear();Toast.makeText(mContext,R.string.comment_under_moderation,Toast.LENGTH_SHORT).show();}hideField(true);}"
3523	"private void validateAll(){String filepath=sourceFileTxt.getText();File file=new File(filepath);if(file.isFile()==false){String errMsg=""Please select a validated WSDL/XSD file"";super.updateStatus(sourceFileTxt,errMsg);return ;}String projectName=typeLibraryProjTxt.getText();if((existProjBtn.getSelection()==true)&&projectName.isEmpty()==true){String errMsg=""Please select a validated type library"";super.updateStatus(typeLibraryProjTxt,errMsg);return ;}globalErrMsg=typeTable.validateSelectedTypes();if(globalErrMsg==null){super.updateStatus(null,globalErrMsg);}else {super.updateStatus(typeTable.getTable(),globalErrMsg);}}"
3524	"public void onPlayerInteract(PlayerInteractEvent event){if(running||!livePlayers.contains(event.getPlayer())){return ;}Player p=event.getPlayer();Action a=event.getAction();if((a==Action.RIGHT_CLICK_AIR)||(a==Action.RIGHT_CLICK_BLOCK)){event.setUseItemInHand(Result.DENY);event.setCancelled(true);}if(event.hasBlock()&&event.getClickedBlock().getTypeId()==42){if(classMap.containsKey(p)){MAUtils.tellPlayer(p,MAMessages.get(Msg.LOBBY_PLAYER_READY));playerReady(p);}else {MAUtils.tellPlayer(p,MAMessages.get(Msg.LOBBY_PICK_CLASS));}return ;}if(event.hasBlock()&&event.getClickedBlock().getState() instanceof Sign){if(a==Action.RIGHT_CLICK_BLOCK){MAUtils.tellPlayer(p,MAMessages.get(Msg.LOBBY_RIGHT_CLICK));return ;}Sign sign=(Sign)event.getClickedBlock().getState();String className=sign.getLine(0);if(!classes.contains(className)){return ;}if(!MobArena.hasDefTrue(p,""mobarena.classes.""+className)){MAUtils.tellPlayer(p,MAMessages.get(Msg.LOBBY_CLASS_PERMISSION));return ;}assignClass(p,className);MAUtils.tellPlayer(p,MAMessages.get(Msg.LOBBY_CLASS_PICKED,className));return ;}}"
3525	"@Override boolean isEmpty(){return selectedId==null;}"
3526	"public boolean removeUser(User aUser){boolean wasRemoved=false;if(!this.equals(aUser.getFacade())){users.remove(aUser);wasRemoved=true;}return wasRemoved;}"
3527	"protected void runDistributedTrain() throws IOException,InterruptedException,ClassNotFoundException{LOG.info(""Started {} d-training."",isDryTrain?""dry"":"""");Configuration conf=new Configuration();SourceType sourceType=super.getModelConfig().getDataSet().getSource(); final List<String> args=new ArrayList<String>();GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());prepareCommonParams(gs.hasHyperParam(),args,sourceType);String alg=super.getModelConfig().getTrain().getAlgorithm();FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));int baggingNum=isForVarSelect?1:super.getModelConfig().getBaggingNum();if(modelConfig.isClassification()&&modelConfig.getTrain().isOneVsAll()){baggingNum=modelConfig.getTags().size();if(baggingNum!=super.getModelConfig().getBaggingNum()){LOG.warn(""'train:baggingNum' is set to {} because of ONEVSALL multiple classification."",baggingNum);}}if(modelConfig.getTrain().getNumKFold()>0){baggingNum=modelConfig.getTrain().getNumKFold();if(baggingNum!=super.getModelConfig().getBaggingNum()){LOG.warn(""'train:baggingNum' is set to {} because of k-fold cross validation is enabled by 'numKFold' not -1."",baggingNum);}}long start=System.currentTimeMillis();LOG.info(""Distributed trainning with baggingNum: {}"",baggingNum);boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();GuaguaMapReduceClient guaguaClient;if(modelConfig.getNormalize().getIsParquet()){guaguaClient=new GuaguaParquetMapReduceClient();RequiredFieldList requiredFieldList=new RequiredFieldList();int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);int inputNodeCount=inputOutputIndex[0]==0?inputOutputIndex[2]:inputOutputIndex[0];int candidateCount=inputOutputIndex[2];for(ColumnConfig columnConfig : super.columnConfigList){if(columnConfig.isTarget()){requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));}else {if(inputNodeCount==candidateCount){if(!columnConfig.isMeta()&&!columnConfig.isTarget()&&CommonUtils.isGoodCandidate(columnConfig)){requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));}}else {if(!columnConfig.isMeta()&&!columnConfig.isTarget()&&columnConfig.isFinalSelect()){requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));}}}}requiredFieldList.add(new RequiredField(""weight"",columnConfigList.size(),null,DataType.DOUBLE));args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""parquet.private.pig.required.fields"",serializeRequiredFieldList(requiredFieldList)));args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""parquet.private.pig.column.index.access"",""true""));}else {guaguaClient=new GuaguaMapReduceClient();}int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""5""));int parallelGroups=1;if(gs.hasHyperParam()){parallelGroups=(gs.getFlattenParams().size()%parallelNum==0?gs.getFlattenParams().size()/parallelNum:gs.getFlattenParams().size()/parallelNum+1);}else {parallelGroups=baggingNum%parallelNum==0?baggingNum/parallelNum:baggingNum/parallelNum+1;}List<String> progressLogList=new ArrayList<String>(baggingNum);boolean isOneJobNotContinuous=false;for(int j=0;j<parallelGroups;j++){int currBags=baggingNum;if(gs.hasHyperParam()){if(j==parallelGroups-1){currBags=gs.getFlattenParams().size()%parallelNum==0?parallelNum:gs.getFlattenParams().size()%parallelNum;}else {currBags=parallelNum;}}else {if(j==parallelGroups-1){currBags=baggingNum%parallelNum==0?parallelNum:baggingNum%parallelNum;}else {currBags=parallelNum;}}for(int k=0;k<currBags;k++){int i=j*parallelNum+k;if(gs.hasHyperParam()){LOG.info(""Start the {}th grid search job with params: {}"",i,gs.getParams(i));}List<String> localArgs=new ArrayList<String>(args);localArgs.add(""-n"");localArgs.add(String.format(""Shifu Master-Workers %s Training Iteration: %s id:%s"",alg,super.getModelConfig().getModelSetName(),i));LOG.info(""Start trainer with id: {}"",i);String modelName=getModelName(i);Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));boolean isContinous=checkContinuousTraining(fileSystem,localArgs,modelPath);if(isContinous&&CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())){isContinous=false;LOG.warn(""RF does not support continuous training"");}if(gs.hasHyperParam()){isContinous=false;}if(!isContinous&&!isOneJobNotContinuous){isOneJobNotContinuous=true;String srcModelPath=super.getPathFinder().getModelsPath(sourceType);String mvModelPath=srcModelPath+""_""+System.currentTimeMillis();LOG.info(""Old model path has been moved to {}"",mvModelPath);fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));fileSystem.mkdirs(new Path(srcModelPath));FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);}localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));if(gs.hasHyperParam()){Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""val_error_""+i));localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));}localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i))); final String progressLogFile=getProgressLogFile(i);progressLogList.add(progressLogFile);localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));String hdpVersion=HDPUtils.getHdpVersionForHDP224();if(StringUtils.isNotBlank(hdpVersion)){localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""hdp.version"",hdpVersion));HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""hdfs-site.xml""),conf);HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""core-site.xml""),conf);HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""mapred-site.xml""),conf);HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""yarn-site.xml""),conf);}if(isParallel){guaguaClient.addJob(localArgs.toArray(new String[0]));}else {TailThread tailThread=startTailThread(new String{progressLogFile});guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);stopTailThread(tailThread);}}if(isParallel){TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));guaguaClient.run();stopTailThread(tailThread);}}boolean isKFoldCV=false;Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();if(kCrossValidation!=null&&kCrossValidation>0){isKFoldCV=true;}if(isKFoldCV){List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);double sum=0.0;for(Double err : valErrs){sum+=err;}LOG.info(""Average validation error for current k-fold cross validation is {}."",sum/valErrs.size());LOG.info(""K-fold cross validation on distributed training finished in {}ms."",System.currentTimeMillis()-start);}else {if(gs.hasHyperParam()){LOG.info(""Original grid search params: {}"",modelConfig.getParams());Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);for(Entry<String,Object> entry : params.entrySet()){modelConfig.getParams().put(entry.getKey(),entry.getValue());}super.pathFinder.getModelConfigPath(SourceType.LOCAL);JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);LOG.info(""Grid search on distributed training finished in {}ms."",System.currentTimeMillis()-start);}else {if(!gs.hasHyperParam()){for(int i=0;i<baggingNum;i++){String modelName=getModelName(i);Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));if(ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)){copyModelToLocal(modelName,modelPath,sourceType);}else {LOG.warn(""Model {} isn't there, maybe job is failed, for bagging it can be ignored."",modelPath.toString());}}boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""true""));if(CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())){copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""false""));}if(copyTmpModelsToLocal){copyTmpModelsToLocal(tmpModelsPath,sourceType);}else {LOG.info(""Tmp models are not copied into local, please find them in hdfs path: {}"",tmpModelsPath);}LOG.info(""Distributed training finished in {}ms."",System.currentTimeMillis()-start);}}}}"
3528	"public boolean shouldHaveStudentRole(){ final boolean activeRegistration=getRegistrationStream().map(r -> r.getLastStateType()).filter(st -> st != null).anyMatch(st -> (st.isActive() && st != RegistrationStateType.SCHOOLPARTCONCLUDED) || st == RegistrationStateType.FLUNKED || st == RegistrationStateType.INTERRUPTED || st == RegistrationStateType.MOBILITY);if(activeRegistration){return true;}for(PhdIndividualProgramProcess process : getPerson().getPhdIndividualProgramProcessesSet()){ final PhdIndividualProgramProcessState state=process.getActiveState();if((state.isActive()&&state!=PhdIndividualProgramProcessState.CONCLUDED)||state==PhdIndividualProgramProcessState.SUSPENDED||state==PhdIndividualProgramProcessState.FLUNKED){return true;}}return false;}"
3529	"private void getNewRoute(LatLng start,LatLng destination) throws SocketTimeoutException{List routePointList;try{RouteRequest rr=new RouteRequest(start,destination);routePointList=rr.execute().get();if(direction_require_update){currentDirectionList=rr.getCurrentDirectionList();direction_require_update=updateDirection(start,true);}if(routePointList==null){throw new SocketTimeoutException();}else {lastPosition=start;if(routePointList.size()>1){bearing=(float)SphericalUtil.computeHeading((LatLng)routePointList.get(0),(LatLng)routePointList.get(1));}route=map.addPolyline(new PolylineOptions().addAll(routePointList).width(10).color(ROUTE_COLOR));}}catch(InterruptedException e){e.printStackTrace();}catch(ExecutionException e){e.printStackTrace();}}"
3530	"public T popNode(int index){if(index<0||index>=this.size()){return null;}int i=0;Node<T> temp=head;Node<T> preTemp=head;while(i<index&&temp.getNext()!=null){preTemp=temp;temp=temp.getNext();i++;}if(i==index){preTemp.setNext(temp.getNext());}return temp.getValue();}"
3531	"@SuppressWarnings(""unchecked"") public void closeSocket(SocketChannel channel,boolean normal,String msg){if(channel==null){return ;}String logInf=((normal)?"" normal close "":""abnormal close "")+((channel==frontChannel)?"" front socket. "":"" backend socket. "");logger.info(logInf+sessionInfo()+""  reason:""+msg);try{channel.close();}catch(IOException e){}if(channel==frontChannel){((FrontIOHandler)curProxyHandler).onFrontSocketClosed(this,normal);frontChannel=null;}else {if(channel==frontChannel){((BackendIOHandler)curProxyHandler).onBackendSocketClosed(this,normal);backendChannel=null;}}}"
3532	"@Override public boolean onTouchEvent(MotionEvent ev){switch (ev.getAction()&MotionEvent.ACTION_MASK){case MotionEvent.ACTION_DOWN :mPreviousX=ev.getX();mPreviousY=ev.getY();mCurPointerId=ev.getPointerId(0);if(traceLongClick==false){traceLongClick=true;lastClick=Calendar.getInstance().getTimeInMillis();}break;case MotionEvent.ACTION_MOVE :int index=ev.findPointerIndex(mCurPointerId);float x=ev.getX(index);float y=ev.getY(index);float relshiftX=x-mPreviousX;float relshiftY=y-mPreviousY;boolean invalidate=false;if(mWidth>mScreenWidth){if(mShiftX+relshiftX>0){mShiftX=0;mPreviousX=0;}else {if(mShiftX+relshiftX<-(mWidth-mScreenWidth)){mShiftX=-(mWidth-mScreenWidth);mPreviousX=x;}else {mShiftX+=relshiftX;mPreviousX=x;}}invalidate=true;}if(mHeight>mScreenHeight){if(mShiftY+relshiftY>0){mShiftY=0;mPreviousY=0;}else {if(mShiftY+relshiftY<-(mHeight-mScreenHeight)){mShiftY=-(mHeight-mScreenHeight);mPreviousY=y;}else {mShiftY+=relshiftY;mPreviousY=y;}}invalidate=true;}if(invalidate){invalidate();}traceLongClick=false;break;case MotionEvent.ACTION_UP :mCurPointerId=Final.INVALID_POINTER_ID;if(traceLongClick){if(Calendar.getInstance().getTimeInMillis()-lastClick>=mLongClickDuration){traceLongClick=false;int sq_x=mControllerDraw.getSquareCoordsX(ev.getX()+-mShiftX);int sq_y=mControllerDraw.getSquareCoordsY(ev.getY()+-mShiftY);int moves[]=mControllerGame.checkForAwailableEdges(sq_x,sq_y);Log.i(""lazer"",""long touch"");Log.i(""lazer"",""""+moves[0]+"" ""+moves[1]+"" ""+moves[2]+"" ""+moves[3]);int sum=0;for(int i=0;i<4;i++){sum+=moves[i];}if(sum==1){int[] axis=mControllerGame.getEdgeSingularMove(moves);mControllerGame.turn(sq_x,sq_y,axis[0],axis[1]);}else {if(sum>1){createChooser(sq_x,sq_y,moves);}}}}break;case MotionEvent.ACTION_CANCEL :mCurPointerId=Final.INVALID_POINTER_ID;break;case MotionEvent.ACTION_POINTER_UP :{ final int pointerIndex=(ev.getAction()&MotionEvent.ACTION_POINTER_INDEX_MASK)>>MotionEvent.ACTION_POINTER_INDEX_SHIFT; final int pointerId=ev.getPointerId(pointerIndex);if(pointerId==mCurPointerId){ final int newPointerIndex=pointerIndex==0?1:0;mPreviousX=ev.getX(newPointerIndex);mPreviousY=ev.getY(newPointerIndex);mCurPointerId=ev.getPointerId(newPointerIndex);}break;}}return true;}"
3533	"public BruteCollinearPoints(Point[] points){if(points==null){throw new java.lang.NullPointerException();}for(Point p : points){if(p==null){throw new java.lang.NullPointerException();}}for(int i=0;i<points.length;i++){for(int j=i+1;j<points.length;j++){if(points[i].compareTo(points[j])==0){throw new java.lang.IllegalArgumentException();}}}for(int i=0;i<points.length;i++){for(int j=i+1;j<points.length;j++){for(int m=j+1;m<points.length;m++){for(int n=m+1;n<points.length;n++){Point pointa=points[i];Point pointb=points[j];Point pointc=points[m];Point pointd=points[n];if(pointa.slopeTo(pointb)==pointb.slopeTo(pointc)&&pointb.slopeTo(pointc)==pointc.slopeTo(pointd)&&pointa.compareTo(pointb)<1&&pointb.compareTo(pointc)<1&&pointc.compareTo(pointd)<1){lss.add(new LineSegment(pointa,pointd));}}}}}}"
3534	"private boolean override(ItemStack stack){return stack!=null&&stack.getItem().getClass().getAnnotation(IOverrideItemUse.class)!=null;}"
3535	"public boolean fromByteArray(ByteBuffer buffer){try{buffer.order(ByteOrder.LITTLE_ENDIAN);byte[] header=new byte[4];buffer.get(header);this.header=new String(header);if(!this.header.equals(SPL_STANDARD_MESSAGE_STRUCT_HEADER)){errors.add(""wrong header; expected ""+SPL_STANDARD_MESSAGE_STRUCT_HEADER+"", is: ""+this.header);}else {headerValid=true;version=buffer.get();if(version!=SPL_STANDARD_MESSAGE_STRUCT_VERSION){errors.add(""wrong version; expected ""+SPL_STANDARD_MESSAGE_STRUCT_VERSION+"", is: ""+version);}else {versionValid=true;playerNum=buffer.get();if(playerNum<1||playerNum>6){errors.add(""player number not within [1,6]; is: ""+playerNum);}else {playerNumValid=true;}teamNum=buffer.get();if(teamNum<0){errors.add(""team number not set"");}else {teamNumValid=true;} final byte fallenState=buffer.get();switch (fallenState){case 0 :fallen=false;fallenValid=true;break;case 1 :fallen=true;fallenValid=true;break;default :errors.add(""invalid fallen state; expected 0 or 1, is: ""+fallenState);}pose=new float[3];pose[0]=buffer.getFloat();pose[1]=buffer.getFloat();pose[2]=buffer.getFloat();walkingTo=new float[2];walkingTo[0]=buffer.getFloat();walkingTo[1]=buffer.getFloat();shootingTo=new float[2];shootingTo[0]=buffer.getFloat();shootingTo[1]=buffer.getFloat();ballAge=buffer.getFloat();ball=new float[2];ball[0]=buffer.getFloat();ball[1]=buffer.getFloat();ballVel=new float[2];ballVel[0]=buffer.getFloat();ballVel[1]=buffer.getFloat();this.suggestion=new Suggestion[SPL_STANDARD_MESSAGE_MAX_NUM_OF_PLAYERS];for(int i=0;i<SPL_STANDARD_MESSAGE_MAX_NUM_OF_PLAYERS;i++){int s=(int)buffer.get();if(s==-1){s=0;}if(s<0||s>=Suggestion.values().length){errors.add(""invalid suggestion; expected value in [0,""+(Suggestion.values().length-1)+""], is: ""+s);suggestionValid[i]=false;}else {this.suggestion[i]=Suggestion.values()[s];suggestionValid[i]=true;}}int intention=(int)buffer.get();if(intention<0||intention>=Intention.values().length){errors.add(""invalid intention; expected value in [0,""+(Intention.values().length-1)+""], is: ""+intention);}else {this.intention=Intention.values()[intention];intentionValid=true;}averageWalkSpeed=buffer.getShort();if(averageWalkSpeed<0){errors.add(""invalid average walk speed, is: ""+averageWalkSpeed);}else {averageWalkSpeedValid=true;}maxKickDistance=buffer.getShort();if(maxKickDistance<0){errors.add(""invalid maximum kick distance, is: ""+maxKickDistance);}else {maxKickDistanceValid=true;}currentPositionConfidence=buffer.get();if(currentPositionConfidence<0||currentPositionConfidence>100){errors.add(""invalid position confidence; expected in [0,100], is: ""+currentPositionConfidence);}else {currentPositionConfidenceValid=true;}currentSideConfidence=buffer.get();if(currentSideConfidence<0||currentSideConfidence>100){errors.add(""invalid side confidence; expected in [0,100], is: ""+currentPositionConfidence);}else {currentSideConfidenceValid=true;}nominalDataBytes=buffer.getShort();boolean dValid=true;if(nominalDataBytes>SPL_STANDARD_MESSAGE_DATA_SIZE){errors.add(""custom data size too large; allowed up to ""+SPL_STANDARD_MESSAGE_DATA_SIZE+"", is: ""+nominalDataBytes);dValid=false;}if(buffer.remaining()<nominalDataBytes){errors.add(""custom data size is smaller than named: ""+buffer.remaining()+"" instead of ""+nominalDataBytes);dValid=false;}data=new byte[nominalDataBytes];buffer.get(data,0,nominalDataBytes);dataValid=dValid;}}}catch(RuntimeException e){errors.add(""error while reading message: ""+e.getClass().getSimpleName()+e.getMessage());}valid=headerValid&&versionValid&&playerNumValid&&teamNumValid&&fallenValid&&intentionValid&&averageWalkSpeedValid&&maxKickDistanceValid&&currentPositionConfidenceValid&&currentSideConfidenceValid&&dataValid;if(valid){for(boolean v : suggestionValid){if(!v){valid=false;return false;}}}return valid;}"
3536	"private boolean validNodes(){return nodes!=null&&nodes.size()>0;}"
3537	"public boolean place(int x,int y,int value){ArrayList<Integer> flips=viableMove(x,y,value);if(flips!=null){if(value<0){black.add(y*8+x);}else {white.add(y*8+x);}for(int i : flips){int dx=i%8;int dy=i/8;field[x][y]=value;field[dx][dy]*=(-1);if(value<0){black.add(i);}else {white.add(i);}}}return true;}"
3538	"@Override public boolean hasNext(){if(mCurrentCompleteDawgPathIterator!=null&&mCurrentCompleteDawgPathIterator.hasNext()){return true;}if(!mOpenCompleteDawgPaths.isEmpty()){mCurrentCompleteDawgPathIterator=mOpenCompleteDawgPaths.pop().iterator();assert (mCurrentCompleteDawgPathIterator.hasNext());return true;}DawgPath newCompletePath=lookForNewCompletePath();if(newCompletePath==null){return false;}else {mOpenCompleteDawgPaths.addLast(newCompletePath);assert (mOpenCompleteDawgPaths.peekLast().iterator().hasNext());return true;}}"
3539	"private StringList tokenize(String in){sb.setLength(0);list.clear();char charBefore=0;boolean quote=false;for(int s=0;s<in.length();s++){char charPresent=in.charAt(s);if(charPresent=='\""'){if(!quote){switchToNextToken();sb.append(charPresent);}else {sb.append(charPresent);switchToNextToken();}quote=!quote;continue;}if(quote){sb.append(charPresent);continue;}if(charBefore==0){}else {if(Character.isWhitespace(charBefore)){switchToNextToken();}else {if(Character.isDigit(charBefore)){if(!Character.isDigit(charPresent)){switchToNextToken();}}else {if(Character.isLetter(charBefore)){if(!Character.isLetter(charPresent)){switchToNextToken();}}else {if(Character.isDigit(charPresent)||Character.isLetter(charPresent)){switchToNextToken();}}}}}sb.append(charPresent);charBefore=charPresent;}list.add(sb.toString());return list;}"
3540	"public void continueButton_Clicked(){if(continue_Button.isVisible()==true){System.out.println(""continue button clicked"");fragPathPos++;currentFloor=globalFloorSequence.get(fragPathPos);System.out.println(""current floor displayed: ""+currentFloor);System.out.println(""frag path pos updated to: ""+fragPathPos);multifloorUpdate();if(fragPathPos==globalFragList.size()-1){continue_Button.setVisible(false);}}}"
3541	"public boolean isAllowedToBeExecutedAgain(){return this.enabled&&this.module.getState().isEnabled()&&(this.maxExecutions!=-1?this.maxExecutions>this.executionCount:true)&&(this.registrable!=null?this.registrable.isEnabled():true);}"
3542	"@Override public Resource getResource(String path) throws MalformedURLException{Resource result=null;for(Resource base : this.searchPaths){this.setBaseResource(base);result=super.getResource(path);if(result!=null){LOG.debug(""Skybar source ""+path+"" found: ""+result);break;}}if(result==null){LOG.warn(""Skybar source NOT found: ""+path);}return result;}"
3543	"void addWall(WallFunction wallFunction){if(!walls.contains(wallFunction)){walls.add(wallFunction);}else {System.out.println(""Meh! AddWallTwice"");}}"
3544	"@Override public Iterator<T> iterator(){if(DBLogger.isLoggable(Level.FINE)){DBLogger.LOGGER.fine(""extent.iterator() on class: ""+extClass);}if(isDummyExtent){return new MergingIterator<T>();}try{pm.getSession().getLock().lock(); @SuppressWarnings(""unchecked"") SynchronizedROIteratorC<T> it=new SynchronizedROIteratorC<T>((CloseableIterator<T>)pm.getSession().loadAllInstances(extClass,subclasses,!ignoreCache),pm.getSession().getLock());allIterators.add(it);return it;}finally{pm.getSession().getLock().unlock();}}"
3545	"public boolean isFrosted(){return (mFrostView!=null);}"
3546	"private BodyForm buildBody(Object signalBean,HttpRequest request,Feature[] features){ final BodyPreprocessor[] bodyPreprocessors=BodyPreprocessor.Util.filter(features);if(null!=bodyPreprocessors){ final List<BodyBuilder> builders=new ArrayList<>();for(BodyPreprocessor bodyPreprocessor : bodyPreprocessors){try{ final BodyBuilder builder=bodyPreprocessor.call(signalBean,request);if(null!=builder){builders.add(builder);}}catch(Exception e){LOG.warn(""exception when BodyPreprocessor({}).call, detail: {}"",bodyPreprocessor,ExceptionUtils.exception2detail(e));}if(!builders.isEmpty()){Collections.sort(builders,Ordered.ASC);for(BodyBuilder builder : builders){try{if(builder instanceof FeaturesAware){((FeaturesAware)builder).setFeatures(features);} final BodyForm body=builder.call();if(null!=body){return body;}}catch(Exception e){LOG.warn(""exception when BodyBuilder({}).call, detail: {}"",builder,ExceptionUtils.exception2detail(e));}}}}}return null;}"
3547	"private static Results compileAndRun(String filePath,String classpath,String packageName,int timeoutLimit){try{String pathSeparator=System.getProperty(""path.separator"");String systemClassPath=System.getProperty(""java.class.path"");String executionDir=getExecutionDirectory(filePath,packageName);Path fPath=Paths.get(filePath).getParent();String dirPath=null;if(fPath!=null){dirPath=fPath.toString();}String command=""javac -classpath ""+systemClassPath;command+=pathSeparator+""."";if(classpath!=null){command+=pathSeparator+classpath;}command+="" ""+filePath;Outputs cRes=runProcess(command,executionDir,timeoutLimit);if(cRes==null||!cRes.errout.isEmpty()){System.out.println(cRes.errout);return null;}String className=getClassName(filePath);if(packageName!=null){className=packageName+"".""+className;}command=""java -classpath ""+systemClassPath;command+=pathSeparator+""."";if(dirPath!=null){command+=pathSeparator+dirPath;}if(classpath!=null){command+=pathSeparator+classpath;}command+="" org.junit.runner.JUnitCore ""+className;Outputs rRes=runProcess(command,executionDir,timeoutLimit);if(rRes==null){return null;}return new Results(cRes,rRes);}catch(Exception e){System.err.println(""Error running process:"");e.printStackTrace();return null;}}"
3548	"public void resume(){try{synchronized(event){if(!event.isResuming()&&!event.isResumedOnTimeout()&&event.isSuspended()&&isInScope){action.type=AtmosphereServlet.Action.TYPE.RESUME;try{logger.debug(""Resuming {}"",getRequest());}catch(Throwable ex){return ;}Broadcaster b=getBroadcaster(false);if(!b.isDestroyed()&&b instanceof DefaultBroadcaster){((DefaultBroadcaster)b).broadcastOnResume(this);}notifyListeners();listeners.clear();try{if(!b.isDestroyed()){broadcaster.removeAtmosphereResource(this);}}catch(IllegalStateException ex){logger.warn(""Unable to resume"",this);logger.debug(ex.getMessage(),ex);}if(b.getScope()==Broadcaster.SCOPE.REQUEST){logger.debug(""Broadcaster's scope is set to request, destroying it {}"",b.getID());b.destroy();}if(BroadcasterFactory.getDefault()!=null){BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);}try{req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT,Boolean.FALSE);Meteor m=(Meteor)req.getAttribute(METEOR);if(m!=null){m.destroy();}}catch(Exception ex){logger.debug(""Cannot resume an already resumed/cancelled request"");}if(req.getAttribute(PRE_SUSPEND)==null){cometSupport.action(this);}}else {logger.debug(""Cannot resume an already resumed/cancelled request {}"",getRequest());}if(AtmosphereResponse.class.isAssignableFrom(response.getClass())){AtmosphereResponse.class.cast(response).destroy();}if(AtmosphereRequest.class.isAssignableFrom(req.getClass())){AtmosphereRequest.class.cast(req).destroy();}}}catch(Throwable t){logger.trace(""Wasn't able to resume a connection {}"",this,t);}}"
3549	"@Override public void writeByte(int adr,byte value){ final int offset=adr&0b1111;switch (offset){case CIA_TOD_10THS :if(isSetRTCAlarmTime()){this.todAlarm10s=Misc.bcdToBinary(value&0xff);}else {this.tod10s=Misc.bcdToBinary(value&0xff);}return ;case CIA_TOD_SECOND :if(isSetRTCAlarmTime()){this.todAlarmSeconds=Misc.bcdToBinary(value&0xff);}else {this.todSeconds=Misc.bcdToBinary(value&0xff);}return ;case CIA_TOD_MIN :if(isSetRTCAlarmTime()){this.todAlarmMinutes=Misc.bcdToBinary(value&0xff);}else {this.todMinutes=Misc.bcdToBinary(value&0xff);}return ;case CIA_TOD_HOUR :if(isSetRTCAlarmTime()){this.todAlarmTimeOfDay=(value&1<<7)!=0?TimeOfDay.AM:TimeOfDay.PM;this.todAlarmHours=Misc.bcdToBinary(value&0b0111_1111);}else {this.timeOfDay=(value&1<<7)!=0?TimeOfDay.AM:TimeOfDay.PM;this.todHours=Misc.bcdToBinary(value&0b0111_1111);}this.todRunning=false;return ;case CIA_ICR : final int oldMask=irqMask;if((value&1<<7)==0){int mask=~(value&0b11111);irqMask&=mask;}else {int mask=(value&0b11111);irqMask|=mask;}this.rtcAlarmIRQEnabled=(irqMask&1<<2)!=0;if(raiseIRQ==0&&(icr_read&irqMask)!=0){raiseIRQ=icr_read&irqMask;}if(DEBUG&&(oldMask!=irqMask)){System.out.println(this+"" ICR = ""+Integer.toBinaryString(irqMask));}break;case CIA_TALO :timerALatch=(timerALatch&0xff00)|(value&0xff);break;case CIA_TAHI :timerALatch=(timerALatch&0x00ff)|((value&0xff)<<8);if(!timerARunning){reloadTimerA=true;}break;case CIA_TBLO :timerBLatch=(timerBLatch&0xff00)|(value&0xff);break;case CIA_TBHI :timerBLatch=(timerBLatch&0x00ff)|((value&0xff)<<8);if(!timerBRunning){reloadTimerB=true;}break;case CIA_CRA :if((value&1<<5)!=0){throw new RuntimeException(""Counting CNT slopes is not supported for ""+this+"" , Timer A"");}boolean oldState=timerARunning;timerARunning=(value&1)!=0;if(DEBUG_VERBOSE){if(oldState!=timerARunning){System.out.println(this+"" , timer A running: ""+timerARunning);}}if((value&1<<4)!=0){timerAValue=timerALatch;}break;case CIA_CRB :switch ((value>>5)&0b11){case 0b00 :case 0b10 :break;case 0b01 :case 0b11 :throw new RuntimeException(""Unsupported timer mode for ""+this+"", timer B: %""+Integer.toBinaryString(value));}oldState=timerBRunning;timerBRunning=(value&1)!=0;if(DEBUG_VERBOSE){if(oldState!=timerBRunning){System.out.println(this+"" , timer B running: ""+timerBRunning);}}if((value&1<<4)!=0){if(DEBUG_TIMER_LOAD&&DEBUG_VERBOSE){System.out.println(this+"" , FORCED loading timer B from latch: ""+timerBLatch);}timerBValue=timerBLatch;}break;}super.writeByte(offset,value);}"
3550	"@RemoteMethod public String saveUser(Map<String,List<String>> parameters){IWContext iwc=CoreUtil.getIWContext();IWBundle bundle=iwc.getIWMainApplication().getBundle(CitizenConstants.IW_BUNDLE_IDENTIFIER);IWResourceBundle iwrb=bundle.getResourceBundle(iwc);String successMsg=iwrb.getLocalizedString(""user_profile_saved"",""User profile successfully saved"");String failureMsg=iwrb.getLocalizedString(""failed_saving_user_profile"",""Failed to save user profile"")+""!"";User user=null;int id=-1;UserBusiness userBusiness=getUserBusiness();try{id=Integer.valueOf(parameters.get(CitizenConstants.USER_EDIT_USER_ID_PARAMETER).get(0));if(id==-1){user=userBusiness.getUserHome().create();}else {user=userBusiness.getUser(id);}}catch(RemoteException e){this.getLogger().log(Level.WARNING,""failed getting user ""+id,e);return failureMsg;}catch(CreateException e){this.getLogger().log(Level.WARNING,""failed creating user"",e);return failureMsg;}String name=null;List<String> params=parameters.get(CitizenConstants.USER_EDIT_NAME_PARAMETER);if(params!=null){name=params.get(0);user.setName(name);}String born=null;params=parameters.get(CitizenConstants.USER_EDIT_BORN_PARAMETER);if(params!=null){born=params.get(0);Date bornDate=IWDatePickerHandler.getParsedDate(born,iwc.getCurrentLocale());user.setDateOfBirth(new java.sql.Date(bornDate.getTime()));}String resume=null;params=parameters.get(CitizenConstants.USER_EDIT_RESUME_PARAMETER);if(params!=null){resume=params.get(0);user.setResume(resume);}String personalId=null;params=parameters.get(CitizenConstants.USER_EDIT_PERSONAL_ID_PARAMETER);if(params!=null){personalId=params.get(0);user.setPersonalID(personalId);}try{user.store();}catch(Exception e){}String report=saveAddress(parameters,iwrb,user.getId());if(!StringUtil.isEmpty(report)){successMsg+=CoreConstants.NEWLINE+report;}report=saveFamilyRelations(parameters,iwrb,iwc,user);if(!StringUtil.isEmpty(report)){successMsg+=CoreConstants.NEWLINE+report;}return successMsg;}"
3551	"public void addObject(PositionObject object) throws Exception{this.objects.put(object.getId(),object);Map<String,Coordinate> coordinateMap=new HashMap<>();if(coordinateObjects.containsKey(object.getId())){coordinateMap=coordinateObjects.get(object.getId());}this.coordinateObjects.put(object.getId(),coordinateMap);if(!(object instanceof MovableObject)){coordinateIds.put(object.getCenter(),object.getId());}}"
3552	"public TileReadersOptionWindow(Collection<TileStoreReaderAdapter> readerAdapters,Consumer<Collection<TileStoreReader>> readerConsumer){if(readerAdapters==null||readerAdapters.size()<1){throw new IllegalArgumentException(""Adapter collection may not be null or empty"");}this.setTitle(""File Options"");this.setResizable(false);this.contentPanel.setLayout(new BoxLayout(this.contentPanel,BoxLayout.PAGE_AXIS));this.readerAdapters=readerAdapters;this.readerConsumer=readerConsumer;for(TileStoreReaderAdapter adapter : this.readerAdapters){if(adapter!=null){this.needsInput|=adapter.needsInput(); final JPanel readerPanel=new JPanel(new GridBagLayout());readerPanel.setBorder(BorderFactory.createTitledBorder(adapter.getFile().getName()));int rowCount=0;for(Collection<JComponent> row : adapter.getReaderParameterControls()){int columnCount=0;for(JComponent column : row){if(columnCount==1){column.setPreferredSize(new Dimension(220,25));}readerPanel.add(column,new SimpleGridBagConstraints(columnCount,rowCount,columnCount==1));++columnCount;}++rowCount;}this.contentPanel.add(readerPanel);}}this.pack();}"
3553	"public double evaluate(){ final ArrayStack output=new ArrayStack();for(int i=0;i<tokens.length;i++){Token t=tokens[i];if(t.getType()==Token.TOKEN_NUMBER){output.push(((NumberToken)t).getValue());}else {if(t.getType()==Token.TOKEN_VARIABLE){ final String name=((VariableToken)t).getName(); final Double value=this.variables.get(name);if(value==null){throw new IllegalArgumentException(""No value has been set for the setVariable '""+name+""'."");}output.push(value);}else {if(t.getType()==Token.TOKEN_OPERATOR){OperatorToken op=(OperatorToken)t;if(output.size()<op.getOperator().getNumOperands()){throw new IllegalArgumentException(""Invalid number of operands available for '""+op.getOperator().getSymbol()+""' operator"");}if(op.getOperator().getNumOperands()==2){double rightArg=output.pop();double leftArg=output.pop();output.push(op.getOperator().apply(leftArg,rightArg));}else {if(op.getOperator().getNumOperands()==1){double arg=output.pop();output.push(op.getOperator().apply(arg));}}}else {if(t.getType()==Token.TOKEN_FUNCTION){FunctionToken func=(FunctionToken)t;int functionArgs=func.getArgumentCount();if(functionArgs<func.getFunction().getMinNumArguments()||functionArgs>func.getFunction().getMaxNumArguments()){throw new IllegalArgumentException(""Invalid number of arguments available for '""+func.getFunction().getName()+""' function"");}double[] args=new double[functionArgs];for(int j=0;j<functionArgs;j++){args[j]=output.pop();}output.push(func.getFunction().apply(this.reverseInPlace(args)));}}}}}if(output.size()>1){throw new IllegalArgumentException(""Invalid number of items on the output queue. Might be caused by an invalid number of arguments for a function."");}return output.pop();}"
3554	"@SuppressWarnings(""rawtypes"") private JSONObject marshallChild(Object t){try{Class<? extends Object> pClass=t.getClass();JSONObject obj=new JSONObject();List<Field> lField=new ArrayList<Field>();Field[] fields=pClass.getDeclaredFields();for(Field field : fields){if(!Modifier.isStatic(field.getModifiers())){lField.add(field);}}Class superClass=pClass.getSuperclass();if(!superClass.equals(Object.class)){Field[] superFields=superClass.getDeclaredFields();for(Field field : superFields){if(!Modifier.isStatic(field.getModifiers())){lField.add(field);}}}for(Field field : lField){if(field.isAnnotationPresent(JsonIgnoreProperty.class)){continue;}JsonProperty jsonP=field.getAnnotation(JsonProperty.class);String value="""";if(jsonP!=null){value=jsonP.value();}String fieldName=field.getName();String jsonKey=value.isEmpty()?fieldName:value;String firtChar=fieldName.subSequence(0,1).toString();Method method=pClass.getMethod(""get""+fieldName.replaceFirst(firtChar,firtChar.toUpperCase()),new Class{});JsonIgnoreEmpty jsonIEP=field.getAnnotation(JsonIgnoreEmpty.class);Object valueOfField=method.invoke(t,new Object{});if(valueOfField==null){continue;}Class currentClass=valueOfField.getClass();if(!(currentClass.isPrimitive()||currentClass.equals(String.class)||Number.class.isAssignableFrom(currentClass))){if(currentClass.isArray()){valueOfField=marshallArray(valueOfField);}else {if(List.class.isAssignableFrom(currentClass)){valueOfField=marshallList(valueOfField);}else {if(Map.class.isAssignableFrom(currentClass)){valueOfField=marshallMap(valueOfField);}else {valueOfField=marshallChild(valueOfField);}}}}if(jsonIEP!=null){if(valueOfField==null){continue;}else {obj.put(jsonKey,valueOfField);}}else {obj.put(jsonKey,valueOfField);}}return obj;}catch(Exception ex){logger.error(ex.getMessage(),ex);}return null;}"
3555	"public void update(boolean ignoreActionButtons,float deltaTime,boolean canPlayerMove){this.canPlayerMove=canPlayerMove||(ArchipeloClient.IS_MOBILE&&ArchipeloClient.getGame().isWindowOpen());for(int key : KEYS_TO_CHECK){if(ignoreActionButtons&&(key==Keys.Z||key==Keys.X)){continue;}if(Gdx.input.isKeyJustPressed(key)){keysDown.add(key);keyDown(key);}}ArrayList<Integer> keysToRemove=new ArrayList<Integer>();for(int key : keysDown){if(ignoreActionButtons&&(key==Keys.Z||key==Keys.X)){continue;}if(!Gdx.input.isKeyPressed(key)){keysToRemove.add(key);keyUp(key);}}keysDown.removeAll(keysToRemove);for(int pointer=0;pointer<POINTERS_TO_CHECK;pointer++){if(Gdx.input.isTouched(pointer)&&!pointersDown.contains(pointer)){pointersDown.add(pointer);touchDown(Gdx.input.getX(pointer),Gdx.input.getY(pointer),pointer);}}ArrayList<Integer> pointersToRemove=new ArrayList<Integer>();for(int pointer : pointersDown){if(!Gdx.input.isTouched(pointer)){pointersToRemove.add(pointer);touchUp(Gdx.input.getX(pointer),Gdx.input.getY(pointer),pointer);}}pointersDown.removeAll(pointersToRemove);for(int pointer : pointersDown){pointerMoved(Gdx.input.getX(pointer),Gdx.input.getY(pointer),pointer);}}"
3556	"@Override public void nativeKeyReleased(NativeKeyEvent e){JSONArray msg=(JSONArray)jsonObject.get(NativeKeyEvent.getKeyText(e.getKeyCode()));String[] messageArray=jsonArrayToStringArray(msg);String message;if(messageArray!=null){message=messageArray[new Random().nextInt(messageArray.length)];}else {message=null;}if(message!=null&&message.equals(TILTMASTER_ON)){activityListener.setActive(false);}else {if(message!=null&&message.equals(TILTMASTER_OFF)){activityListener.setActive(true);}else {if(message!=null&&message.equals(TILTMASTER_TOGGLE)){activityListener.setActive(!activityListener.isActive());}else {if(message!=null&&!activityListener.isActive()){System.out.println(""Firing Message: ""+message);this.fire(message);}}}}}"
3557	"public static TLAbstractFacet findNonEmptyFacet(TLPropertyOwner originatingFacet,TLAbstractFacet referencedFacet){FacetCodegenDelegateFactory factory=new FacetCodegenDelegateFactory(null);TLAbstractFacet result=referencedFacet;if((referencedFacet!=null)&&!factory.getDelegate(referencedFacet).hasContent()){TLAbstractFacet[] alternateFacets=getAlternateFacets(originatingFacet,referencedFacet);for(TLAbstractFacet alternateFacet : alternateFacets){if(factory.getDelegate(alternateFacet).hasContent()){result=alternateFacet;break;}}}return result;}"
3558	"private void switchChannel(String newChannel){Log.d(TAG,""switchChannel to ""+newChannel);currentChannel=newChannel;setTitle(newChannel);if(chatMessages!=null){chatMessages.clear();}else {chatMessages=new ArrayList<ChatMessage>();}if(chatAdapter!=null){chatAdapter.notifyDataSetChanged();}else {chatAdapter=new ChatAdapter(this,R.layout.chat_item,chatMessages);listView.setAdapter(chatAdapter);}Log.d(TAG,""switchChannel calls loadNewMessages"");loadNewMessages();}"
3559	"@Override protected Boolean evaluate(Operator operator,Iterator<Boolean> operands,Object evaluationContext){if(operator==NEGATE){return !operands.next();}else {if(operator==OR){Boolean o1=operands.next();Boolean o2=operands.next();return o1||o2;}else {if(operator==AND){Boolean o1=operands.next();Boolean o2=operands.next();return o1&&o2;}else {if(operator==EQUAL){Object o1=operands.next();Object o2=operands.next();return o1.equals(o2);}else {return super.evaluate(operator,operands,evaluationContext);}}}}}"
3560	"public void actionPerformed(ActionEvent e){Object o=e.getSource();if(o==jButton3){client.sendMessage(new ChatMessage(ChatMessage.LOGOUT,""""));return ;}if(o==jButton2){client.sendMessage(new ChatMessage(ChatMessage.WHOISIN,""""));return ;}if(o==jButton1){client.sendMessage(new ChatMessage(ChatMessage.MESSAGE,jFormattedTextField1.getText()));jFormattedTextField1.setText("""");return ;}}"
3561	"public void DefineDefault(){pref=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());if(!pref.contains(""Dificuldade"")&&!pref.contains(""Click"")){SharedPreferences.Editor editor=pref.edit();editor.putInt(""Dificuldade"",2);editor.putInt(""Click"",0);editor.apply();}}"
3562	"public static boolean isPartialGoal(DFA first,DFA other,State selfState,State otherState){return selfState.isBanned()||otherState.isBanned()||(selfState.isGoal()&&!otherState.isGoal()&&selfState!=first.startState)||(!selfState.isGoal()&&otherState.isGoal()&&otherState!=other.startState);}"
3563	"public boolean isRunning(){return mEndTime==null;}"
3564	"private HttpEntity buildHttpBody(Document document) throws MifielException{ final MultipartEntityBuilder entityBuilder=MultipartEntityBuilder.create();entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE); final List<Signature> signatures=document.getSignatures(); final String filePath=document.getFile(); final String fileName=document.getFileName(); final String originalHash=document.getOriginalHash();if(!StringUtils.isEmpty(filePath)){ final File pdfFile=new File(filePath);entityBuilder.addBinaryBody(""file"",pdfFile,ContentType.create(MifielUtils.PDF_CONTENT_TYPE),pdfFile.getName());}else {if(!StringUtils.isEmpty(originalHash)&&!StringUtils.isEmpty(fileName)){entityBuilder.addTextBody(""original_hash"",originalHash);entityBuilder.addTextBody(""name"",fileName);MifielUtils.appendTextParamToHttpBody(entityBuilder,""callback_url"",document.getCallbackUrl());if(signatures!=null){for(int i=0;i<signatures.size();i++){MifielUtils.appendTextParamToHttpBody(entityBuilder,""signatories[""+i+""][name]"",signatures.get(i).getSignature());MifielUtils.appendTextParamToHttpBody(entityBuilder,""signatories[""+i+""][email]"",signatures.get(i).getEmail());MifielUtils.appendTextParamToHttpBody(entityBuilder,""signatories[""+i+""][tax_id]"",signatures.get(i).getTaxId());}}}else {throw new MifielException(""You must provide file or original hash and file name"");}}return entityBuilder.build();}"
3565	"@Override public boolean appliesToProperty(Object propertyId){if(propertyId.equals(""Index"")||propertyId.equals(""Username"")){return true;}return false;}"
3566	"@Override public void onCreate(Bundle savedInstanceState){Helper.setTheme(this);super.onCreate(savedInstanceState);requestWindowFeature(Window.FEATURE_NO_TITLE);mPref=new Preferences(this);mSpinner=false;mToast=Toast.makeText(this,"""",Toast.LENGTH_SHORT);LayoutInflater layoutInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view=layoutInflater.inflate(R.layout.location,null);setContentView(view);mLocationView=(LocationView)view.findViewById(R.id.location);mLocationView.setGestureCallback(new GestureInterface(){  InfoLineFieldLoc _InfoLineFieldLoc;  int _nNewSelection=0;  @Override public void gestureCallBack(  int nEvent,  InfoLineFieldLoc infoLineFieldLoc){    if (infoLineFieldLoc == null) {      return;    }    _InfoLineFieldLoc=infoLineFieldLoc;    if (GestureInterface.LONG_PRESS == nEvent) {      if (mService != null) {        mService.getInfoLines().longPress(_InfoLineFieldLoc);        return;      }    }    if (GestureInterface.TOUCH == nEvent) {      if (mService != null) {        mService.getInfoLines().touch(_InfoLineFieldLoc);        return;      }    }    if (GestureInterface.DOUBLE_TAP == nEvent) {      AlertDialog.Builder builder=new AlertDialog.Builder(LocationActivity.this);      builder.setTitle(R.string.SelectTextFieldTitle);      builder.setSingleChoiceItems(_InfoLineFieldLoc.getOptions(),_InfoLineFieldLoc.getSelected(),new DialogInterface.OnClickListener(){        @Override public void onClick(        DialogInterface dialog,        int which){          _nNewSelection=which;        }      });      builder.setPositiveButton(R.string.OK,new DialogInterface.OnClickListener(){        @Override public void onClick(        DialogInterface dialog,        int id){          if (mService != null) {            mService.getInfoLines().setFieldType(_InfoLineFieldLoc,_nNewSelection);          }        }      });      builder.setNegativeButton(R.string.Cancel,new DialogInterface.OnClickListener(){        @Override public void onClick(        DialogInterface dialog,        int id){        }      });      AlertDialog dialog=builder.create();      dialog.show();    }  }  @Override public void gestureCallBack(  int event,  LongTouchDestination data){    if (GestureInterface.TOUCH == event) {      hideMenu();    }    if (GestureInterface.LONG_PRESS == event) {      mAirportPressed=data.airport;      if (mAirportPressed.contains(""&"")) {        mPlatesButton.setEnabled(false);        mAfdButton.setEnabled(false);      } else {        mPlatesButton.setEnabled(true);        mAfdButton.setEnabled(true);      }      mCrossButton.setText(data.airport + ""\n"" + data.info);      mDestLayout.setVisibility(View.VISIBLE);      if (isSameDest(data.airport)) {        mDestButton.setText(getString(R.string.Delete));      } else {        mDestButton.setText(getString(R.string.ShortDestination));      }      PopoutAdapter p=new PopoutAdapter(getApplicationContext(),data);      mListPopout.setAdapter(p);    }  }});mListPopout=(ExpandableListView)view.findViewById(R.id.location_list_popout);mChartSpinner=(Spinner)view.findViewById(R.id.location_spinner_chart);mChartSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){  public void onItemSelected(  AdapterView<?> parent,  View view,  int pos,  long id){    if (mSpinner == false) {      mSpinner=true;      mChartSpinner.setSelection(Integer.parseInt(mPref.getChartType()));      return;    }    mPref.setChartType("""" + id);    if (mPref.getChartType().equals(Tile.ELEVATION_INDEX)) {      mBar.setVisibility(View.VISIBLE);    } else {      mBar.setVisibility(View.INVISIBLE);    }    mLocationView.forceReload();  }  @Override public void onNothingSelected(  AdapterView<?> arg0){  }});mLayerSpinner=(Spinner)view.findViewById(R.id.location_spinner_layer);mLayerSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){  public void onItemSelected(  AdapterView<?> parent,  View view,  int pos,  long id){    if (mSpinner == false) {      mSpinner=true;      int index=Arrays.asList(getResources().getStringArray(R.array.LayerType)).indexOf(mPref.getLayerType());      mLayerSpinner.setSelection(index);      mLocationView.setLayerType(mPref.getLayerType());      return;    }    mPref.setLayerType(getResources().getStringArray(R.array.LayerType)[pos]);    mLocationView.setLayerType(mPref.getLayerType());  }  @Override public void onNothingSelected(  AdapterView<?> arg0){  }});mBar=(VerticalSeekBar)view.findViewById(R.id.location_seekbar_threshold);mBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){  @Override public void onStopTrackingTouch(  SeekBar seekBar){  }  @Override public void onStartTrackingTouch(  SeekBar seekBar){  }  @Override public void onProgressChanged(  SeekBar seekBar,  int progress,  boolean fromUser){    mLocationView.updateThreshold(progress);  }});mCenterButton=(Button)view.findViewById(R.id.location_button_center);mCenterButton.getBackground().setAlpha(255);mCenterButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    mLocationView.center();  }});mCenterButton.setOnLongClickListener(new View.OnLongClickListener(){  @Override public boolean onLongClick(  View v){    mPref.setTrackUp(!mPref.isTrackUp());    mToast.setText(mPref.isTrackUp() ? getString(R.string.TrackUp) : getString(R.string.NorthUp));    mToast.show();    mLocationView.invalidate();    return true;  }});mCrossButton=(Button)view.findViewById(R.id.location_button_cross);mCrossButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    mDestLayout.setVisibility(View.INVISIBLE);  }});mDestLayout=(RelativeLayout)view.findViewById(R.id.location_popout_layout);mMenuButton=(Button)view.findViewById(R.id.location_button_menu);mMenuButton.getBackground().setAlpha(255);mMenuButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    showMenu();  }});mHelpButton=(Button)view.findViewById(R.id.location_button_help);mHelpButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    Intent intent=new Intent(LocationActivity.this,WebActivity.class);    intent.putExtra(""url"",NetworkHelper.getHelpUrl(LocationActivity.this));    startActivity(intent);  }});mPlatesButton=(Button)view.findViewById(R.id.location_button_plate);mPlatesButton.getBackground().setAlpha(255);mPlatesButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null != mAirportPressed) {      if (mService != null) {        mService.setLastPlateAirport(mAirportPressed);        mService.setLastPlateIndex(0);        ((MainActivity)LocationActivity.this.getParent()).showPlatesTab();      }      mAirportPressed=null;    }  }});mAfdButton=(Button)view.findViewById(R.id.location_button_afd);mAfdButton.getBackground().setAlpha(255);mAfdButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null != mAirportPressed) {      if (mService != null) {        mService.setLastAfdAirport(mAirportPressed);        ((MainActivity)LocationActivity.this.getParent()).showAfdTab();        mAirportPressed=null;      }    }  }});mPlanButton=(Button)view.findViewById(R.id.location_button_plan);mPlanButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null == mAirportPressed) {      return;    }    String type=Destination.BASE;    if (mAirportPressed.contains(""&"")) {      type=Destination.GPS;    }    planTo(mAirportPressed,type);    mAirportPressed=null;  }});mDrawClearButton=(Button)view.findViewById(R.id.location_button_draw_clear);mDrawClearButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (mService != null) {      if (mLocationView.getDraw()) {        mService.getDraw().clear();      }    }  }});mDownloadButton=(Button)view.findViewById(R.id.location_button_dl);mDownloadButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    Intent i=new Intent(LocationActivity.this,ChartsDownloadActivity.class);    i.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);    startActivity(i);  }});mPrefButton=(Button)view.findViewById(R.id.location_button_pref);mPrefButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(LocationActivity.this,PrefActivity.class));  }});mWebButton=(Button)view.findViewById(R.id.location_button_ads);mWebButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    startActivity(new Intent(LocationActivity.this,MessageActivity.class));  }});mDestButton=(Button)view.findViewById(R.id.location_button_dest);mDestButton.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null == mAirportPressed) {      return;    }    String dest=mAirportPressed;    mAirportPressed=null;    if (mDestButton.getText().toString().equals(getString(R.string.Delete))) {      mService.setDestination(null);      mDestLayout.setVisibility(View.INVISIBLE);      mLocationView.invalidate();      return;    }    String type=Destination.BASE;    if (dest.contains(""&"")) {      type=Destination.GPS;    }    goTo(dest,type);  }});mSimButton=(TwoButton)view.findViewById(R.id.location_button_sim);if(mPref.isSimulationMode()){mSimButton.setText(getString(R.string.SimulationMode));mSimButton.setChecked(true);}else {mSimButton.setText(getString(R.string.Navigate));mSimButton.setChecked(false);}mSimButton.setTwoClickListener(new TwoClickListener(){  @Override public void onClick(  View v){    if (mSimButton.getText().equals(getString(R.string.SimulationMode))) {      mPref.setSimMode(true);      if (null != mService) {        Destination dest=mService.getDestination();        if (null != dest) {          Location l=dest.getLocation();          mLocationView.updateParams(new GpsParams(l));        }        mLocationView.forceReload();      }    } else {      mPref.setSimMode(false);    }  }});mDrawButton=(TwoButton)view.findViewById(R.id.location_button_draw);mDrawButton.setTwoClickListener(new TwoClickListener(){  @Override public void onClick(  View v){    if (mDrawButton.getText().equals(getString(R.string.Draw))) {      mLocationView.setDraw(true);      mDrawClearButton.setVisibility(View.VISIBLE);    } else {      mLocationView.setDraw(false);      mDrawClearButton.setVisibility(View.INVISIBLE);    }  }});mTracksButton=(TwoButton)view.findViewById(R.id.location_button_tracks);mTracksButton.setTwoClickListener(new TwoClickListener(){  @Override public void onClick(  View v){    if (null != mService && mPref.shouldSaveTracks()) {      setTrackState(!mService.getTracks());    }  }});if(Gps.isGpsDisabled(getApplicationContext(),mPref)){mGpsWarnDialog=new AlertDialog.Builder(this).create();mGpsWarnDialog.setTitle(getString(R.string.GPSEnable));mGpsWarnDialog.setCancelable(false);mGpsWarnDialog.setCanceledOnTouchOutside(false);mGpsWarnDialog.setButton(AlertDialog.BUTTON_POSITIVE,getString(R.string.Yes),new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();    Intent i=new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);    startActivity(i);  }});mGpsWarnDialog.setButton(AlertDialog.BUTTON_NEGATIVE,getString(R.string.No),new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();  }});mGpsWarnDialog.show();}if(mPref.showTips()){mWarnDialog=new AlertDialog.Builder(this).create();mWarnDialog.setTitle(getString(R.string.Tip));mWarnDialog.setMessage(Tips.getTip(getApplicationContext()));mWarnDialog.setCancelable(false);mWarnDialog.setCanceledOnTouchOutside(false);mWarnDialog.setButton(AlertDialog.BUTTON_POSITIVE,getString(R.string.OK),new DialogInterface.OnClickListener(){  public void onClick(  DialogInterface dialog,  int which){    dialog.dismiss();  }});mWarnDialog.show();}mExtras=getIntent().getExtras();mPlanPrev=(Button)view.findViewById(R.id.plan_prev);mPlanPrev.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null != mService) {      Plan activePlan=mService.getPlan();      if (true == activePlan.isActive()) {        activePlan.regress();      }    }  }});mPlanPause=(ImageButton)view.findViewById(R.id.plan_pause);mPlanPause.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null != mService) {      Plan activePlan=mService.getPlan();      if (null != activePlan) {        if (true == activePlan.suspendResume()) {          mPlanPause.setImageResource(android.R.drawable.ic_media_pause);        } else {          mPlanPause.setImageResource(android.R.drawable.ic_media_play);        }      }    }  }});mPlanNext=(Button)view.findViewById(R.id.plan_next);mPlanNext.setOnClickListener(new OnClickListener(){  @Override public void onClick(  View v){    if (null != mService) {      Plan activePlan=mService.getPlan();      if (true == activePlan.isActive()) {        activePlan.advance();      }    }  }});mService=null;mAnimateTracks=new AnimateButton(getApplicationContext(),mTracksButton,AnimateButton.DIRECTION_R_L,mPlanPrev);mAnimateWeb=new AnimateButton(getApplicationContext(),mWebButton,AnimateButton.DIRECTION_L_R);mAnimateSim=new AnimateButton(getApplicationContext(),mSimButton,AnimateButton.DIRECTION_R_L,mPlanNext);mAnimateTrack=new AnimateButton(getApplicationContext(),mLayerSpinner,AnimateButton.DIRECTION_R_L,mPlanPause);mAnimateChart=new AnimateButton(getApplicationContext(),mChartSpinner,AnimateButton.DIRECTION_R_L,(View[])null);mAnimateHelp=new AnimateButton(getApplicationContext(),mHelpButton,AnimateButton.DIRECTION_L_R,mCenterButton,mDrawButton,mMenuButton);mAnimateDownload=new AnimateButton(getApplicationContext(),mDownloadButton,AnimateButton.DIRECTION_L_R,(View[])null);mAnimatePref=new AnimateButton(getApplicationContext(),mPrefButton,AnimateButton.DIRECTION_L_R,(View[])null);mTankObserver=new TankObserver();mInitLocation=Gps.getLastLocation(getApplicationContext());if(null==mInitLocation){mInitLocation=mPref.getLastLocation();}}"
3567	"@Override public void takeTurn(){if(Entity_to_follow_!=null){attackIfNear(Entity_to_follow_);follow(Entity_to_follow_);--turns_to_follow_;if(turns_to_follow_<0){Entity_to_follow_=null;}}}"
3568	"public void updateItemBlock(ItemStack force){TileController controller=getController();if(controller!=null){ItemStack stack=force.isEmpty()?controller.getStackForPosition(pos):force;if(!stack.isEmpty()){if(stack.getItem() instanceof ItemBlock){Block block=Block.getBlockFromItem(stack.getItem());isBlock=true;itemBlock=ForgeRegistries.BLOCKS.getKey(block).toString();itemBlockMeta=stack.getItemDamage();markDirtyAndNotify();return ;}else {Item item=stack.getItem();isBlock=false;itemBlock=ForgeRegistries.ITEMS.getKey(item).toString();itemBlockMeta=stack.getItemDamage();markDirtyAndNotify();return ;}}}itemBlock=null;itemBlockMeta=0;markDirtyAndNotify();}"
3569	"public void stopNotification(boolean isRingTone,boolean isVibration,boolean isFlash){if(isRingTone){playRingtone.stopSong();}if(isVibration){vibration.stopVibrate();}if(isFlash&&(!checkFlash)){turnOnFlash.turnOff();}}"
3570	"@Override public void onSuccess(int statusCode,Header[] headers,JSONArray response){super.onSuccess(statusCode,headers,response);try{String isSucceed=response.getString(0);if(isSucceed==""false""){}else {user=new Gson().fromJson(response.get(1).toString(),JsonUser.class);Log.d(""login"",user.getPhone());Log.d(""login"",user.getPass());Log.d(""login"",user.getUsername());Log.d(""login"",user.getUserNo());Log.d(""login"",user.toString());}}catch(JSONException e){e.printStackTrace();}}"
3571	"public void fixPart(IPartWork partWork,Person tech){TargetRoll target=getTargetFor(partWork,tech);String report="""";String action="" fix "";if(partWork instanceof AmmoBin){action="" reload "";}if(partWork.isSalvaging()){action="" salvage "";}if(partWork instanceof MissingPart){action="" replace "";}if(partWork instanceof MekLocation){if(((MekLocation)partWork).isBlownOff()){action="" re-attach "";}else {if(((MekLocation)partWork).isBreached()){action="" seal "";}}}if((partWork instanceof Armor)&&!partWork.isSalvaging()){if(!((Armor)partWork).isInSupply()){report+=""<b>Not enough armor remaining.  Task suspended.</b>"";addReport(report);return ;}}if((partWork instanceof ProtomekArmor)&&!partWork.isSalvaging()){if(!((ProtomekArmor)partWork).isInSupply()){report+=""<b>Not enough Protomech armor remaining.  Task suspended.</b>"";addReport(report);return ;}}if((partWork instanceof BaArmor)&&!partWork.isSalvaging()){if(!((BaArmor)partWork).isInSupply()){report+=""<b>Not enough BA armor remaining.  Task suspended.</b>"";addReport(report);return ;}}report+=tech.getHyperlinkedFullTitle()+"" attempts to""+action+partWork.getPartName();if(null!=partWork.getUnit()){report+="" on ""+partWork.getUnit().getName();}int minutes=partWork.getTimeLeft();int minutesUsed=minutes;boolean usedOvertime=false;if(minutes>tech.getMinutesLeft()){minutes-=tech.getMinutesLeft();if(isOvertimeAllowed()&&minutes<=tech.getOvertimeLeft()){usedOvertime=true;tech.setMinutesLeft(0);tech.setOvertimeLeft(tech.getOvertimeLeft()-minutes);}else {minutesUsed=tech.getMinutesLeft();if(isOvertimeAllowed()){minutesUsed+=tech.getOvertimeLeft();partWork.setWorkedOvertime(true);usedOvertime=true;}partWork.addTimeSpent(minutesUsed);tech.setMinutesLeft(0);tech.setOvertimeLeft(0);int helpMod=getShorthandedMod(getAvailableAstechs(minutesUsed,usedOvertime),false);if(null!=partWork.getUnit()&&(partWork.getUnit().getEntity() instanceof Dropship||partWork.getUnit().getEntity() instanceof Jumpship)){helpMod=0;}if(partWork.getShorthandedMod()<helpMod){partWork.setShorthandedMod(helpMod);}partWork.setTeamId(tech.getId());partWork.reservePart();report+="" - <b>Not enough time, the remainder of the task will be finished tomorrow.</b>"";MekHQ.triggerEvent(new PartWorkEvent(tech,partWork));addReport(report);return ;}}else {tech.setMinutesLeft(tech.getMinutesLeft()-minutes);}int astechMinutesUsed=minutesUsed*getAvailableAstechs(minutesUsed,usedOvertime);if(astechPoolMinutes<astechMinutesUsed){astechMinutesUsed-=astechPoolMinutes;astechPoolMinutes=0;astechPoolOvertime-=astechMinutesUsed;}else {astechPoolMinutes-=astechMinutesUsed;}int roll;String wrongType="""";if(tech.isRightTechTypeFor(partWork)){roll=Compute.d6(2);}else {roll=Utilities.roll3d6();wrongType="" <b>Warning: wrong tech type for this repair.</b>"";}report=report+"",  needs ""+target.getValueAsString()+"" and rolls ""+roll+"":"";int xpGained=0;if(getCampaignOptions().useSupportEdge()&&tech.getOptions().booleanOption(PersonnelOptions.EDGE_REPAIR_BREAK_PART)&&tech.getEdge()>0){if((getCampaignOptions().isDestroyByMargin()&&getCampaignOptions().getDestroyMargin()<=(target.getValue()-roll))||(tech.getExperienceLevel(false)==SkillType.EXP_ELITE||tech.getPrimaryRole()==12)&&roll<target.getValue()){tech.setEdge(tech.getEdge()-1);if(tech.isRightTechTypeFor(partWork)){roll=Compute.d6(2);}else {roll=Utilities.roll3d6();}if(tech.isEngineer()){tech.setEdgeUsed(tech.getEdgeUsed()+1);}report+="" <b>failed!</b> and would destroy the part, but uses Edge to reroll...getting a ""+roll+"":"";}}if(roll>=target.getValue()){report=report+partWork.succeed();if(roll==12&&target.getValue()!=TargetRoll.AUTOMATIC_SUCCESS){xpGained+=getCampaignOptions().getSuccessXP();}if(target.getValue()!=TargetRoll.AUTOMATIC_SUCCESS){tech.setNTasks(tech.getNTasks()+1);}if(tech.getNTasks()>=getCampaignOptions().getNTasksXP()){xpGained+=getCampaignOptions().getTaskXP();tech.setNTasks(0);}}else {int modePenalty=partWork.getMode().expReduction;int effectiveSkillLvl=tech.getSkillForWorkingOn(partWork).getExperienceLevel()-modePenalty;if(getCampaignOptions().isDestroyByMargin()){if(getCampaignOptions().getDestroyMargin()>(target.getValue()-roll)){effectiveSkillLvl=SkillType.EXP_ULTRA_GREEN;}else {effectiveSkillLvl=SkillType.EXP_ELITE;}}report=report+partWork.fail(effectiveSkillLvl);if(roll==2&&target.getValue()!=TargetRoll.AUTOMATIC_FAIL){xpGained+=getCampaignOptions().getMistakeXP();}}if(xpGained>0){tech.setXp(tech.getXp()+xpGained);report+="" (""+xpGained+""XP gained) "";if(tech.isEngineer()){tech.setEngineerXp(xpGained);}}report+=wrongType;partWork.resetTimeSpent();partWork.resetOvertime();partWork.setTeamId(null);partWork.cancelReservation();MekHQ.triggerEvent(new PartWorkEvent(tech,partWork));addReport(report);}"
3572	"@Override public boolean execute(LivingEntity caster,int level,List<LivingEntity> targets){boolean worked=false;String status=settings.getString(STATUS).toLowerCase();String potion=settings.getString(POTION).toUpperCase().replace(' ','_');PotionEffectType type=null;try{type=PotionEffectType.getByName(potion);}catch(Exception ex){}for(LivingEntity target : targets){if(status.equals(""any"")){for(String flag : StatusFlag.NEGATIVE){if(FlagManager.hasFlag(target,flag)){FlagManager.removeFlag(target,flag);worked=true;}}}else {if(FlagManager.hasFlag(target,status)){FlagManager.removeFlag(target,status);worked=true;}}if(type==null){for(PotionEffectType p : POTIONS){if(target.hasPotionEffect(p)){target.removePotionEffect(p);worked=true;}}}else {if(target.hasPotionEffect(type)){target.removePotionEffect(type);worked=true;}}}return worked;}"
3573	"@Override public DrafterTileEntityConfig ReadFromNBTTagCompound(NBTTagCompound compound){DrafterTileEntityConfig config=new DrafterTileEntityConfig();if(compound.hasKey(""drafter"")){NBTTagCompound drafter=compound.getCompoundTag(""drafter"");if(drafter.hasKey(""x"")){this.pos=new BlockPos(drafter.getInteger(""x""),drafter.getInteger(""y""),drafter.getInteger(""z""));}if(drafter.hasKey(""basement_rooms"")){NBTTagCompound basement_rooms=(NBTTagCompound)drafter.getTag(""basement_rooms"");this.createRoomsFromTag(basement_rooms,this.BasementFloorRooms);}if(drafter.hasKey(""basement2_rooms"")){NBTTagCompound basement2_rooms=(NBTTagCompound)drafter.getTag(""basement2_rooms"");this.createRoomsFromTag(basement2_rooms,this.Basement2FloorRooms);}if(drafter.hasKey(""first_rooms"")){NBTTagCompound first_rooms=(NBTTagCompound)drafter.getTag(""first_rooms"");this.createRoomsFromTag(first_rooms,this.FirstFloorRooms);}if(drafter.hasKey(""second_rooms"")){NBTTagCompound second_rooms=(NBTTagCompound)drafter.getTag(""second_rooms"");this.createRoomsFromTag(second_rooms,this.SecondFloorRooms);}if(drafter.hasKey(""third_rooms"")){NBTTagCompound third_rooms=(NBTTagCompound)drafter.getTag(""third_rooms"");this.createRoomsFromTag(third_rooms,this.ThirdFloorRooms);}if(drafter.hasKey(""pendingChanges"")){NBTTagCompound pendingChanges=drafter.getCompoundTag(""pendingChanges"");for(String key : pendingChanges.getKeySet()){NBTTagCompound pendingChange=compound.getCompoundTag(key);AvailableRoomType roomType=AvailableRoomType.Field;RoomInfo roomInfo=null;for(String pendingChangeKey : pendingChange.getKeySet()){if(pendingChangeKey.equals(""availableRoomType"")){roomType=AvailableRoomType.ValueOf(pendingChange.getString(pendingChangeKey));}else {roomInfo=RoomInfo.CreateFromNBTTag(pendingChange.getCompoundTag(pendingChangeKey));}}if(roomInfo!=null){this.AddUpdatePendingChange(roomInfo,roomType);}}}}return config;}"
3574	"@Override public String getPath(){if(eContainer!=null&&eContainer instanceof AbstractActor){return ((AbstractActor)eContainer).getPath()+""/""+getName();}return getName();}"
3575	"protected void overrideAllMethods(MethodBodyCreator override){Class<?> currentClass=getSuperClass();while(currentClass!=null){for(Method method : getSuperClass().getDeclaredMethods()){if(Modifier.isStatic(method.getModifiers())||Modifier.isPrivate(method.getModifiers())){continue;}MethodIdentifier identifier=MethodIdentifier.getIdentifierForMethod(method);if(Modifier.isFinal(method.getModifiers())){continue;}if(!SKIP_BY_DEFAULT.contains(identifier)){overrideMethod(method,identifier,override);}}currentClass=currentClass.getSuperclass();}}"
3576	"private void addEvent(){mProgress.setMessage(""Submitting Event...""); final String theTitle=eventTitle.getText().toString().trim(); final String theDescription=eventDescription.getText().toString().trim(); final String theTopic=""userSubmitted""; final String theLat=lat; final String theLng=lng; final String theStartDateTime=dateTimeText.getText().toString().trim();Log.d(""thestartDateTimeis"",theStartDateTime); final Boolean theNotified=notified; final String theVoteCt=voteCt;if(!TextUtils.isEmpty(theTitle)&&!TextUtils.isEmpty(theDescription)&&!TextUtils.isEmpty(theTopic)&&!TextUtils.isEmpty(theLat)&&!TextUtils.isEmpty(theLng)&&!TextUtils.isEmpty(theStartDateTime)){mProgress.show();DatabaseReference submitEvent=mDatabase.push();submitEvent.child(""description"").setValue(theDescription);submitEvent.child(""lat"").setValue(theLat);submitEvent.child(""lng"").setValue(theLng);submitEvent.child(""notified"").setValue(theNotified);submitEvent.child(""startDateTime"").setValue(theStartDateTime);submitEvent.child(""topic"").setValue(theTopic);submitEvent.child(""title"").setValue(theTitle);submitEvent.child(""voteCt"").setValue(theVoteCt);mProgress.dismiss();Toast.makeText(this,""Event was submited!"",Toast.LENGTH_LONG).show();Intent postCreation=new Intent(this,HomeLandingPage.class);startActivity(postCreation);}else {Toast.makeText(this,""Please fill out every field"",Toast.LENGTH_LONG).show();}}"
3577	"public boolean isLegal(Cell origin,Cell destination){if(playerTurn(origin)){if(origin.getState()==CellState.RED_KING||origin.getState()==CellState.BLACK_KING){count++;return Math.abs(destination.getColumn()-origin.getColumn())==1&&Math.abs(destination.getRow()-origin.getRow())==1;}else {return LegalMoves(origin,destination);}}else {return false;}}"
3578	"public OverlayMapping performNodeEmbedding(Graph G,ArrayList<Tuple> chain,int[] mbSpecs,ArrayList<Tuple> candidateNodes){int[] nodeCaps=new int[candidateNodes.size()];int[] internalSwitchingNodeCap=new int[candidateNodes.size()];for(int e=0;e<nodeCaps.length;e++){nodeCaps[e]=G.getNodeCap()[candidateNodes.get(e).getSource()];internalSwitchingNodeCap[e]=G.getInterNodeSwitchingCap()[candidateNodes.get(e).getSource()];}OverlayMapping om=new OverlayMapping(f.getChain().size());for(int j=0;j<candidateNodes.size();j++){int serverIndex=candidateNodes.get(j).getSource();System.out.println(""Candidate Server ""+serverIndex);HashMap<Integer,ArrayList<Integer>> OCs=new HashMap<Integer,ArrayList<Integer>>();HashMap<Integer,ArrayList<Tuple>> intSwitchedLinks=new HashMap<Integer,ArrayList<Tuple>>();for(int t=0;t<=chain.size();t++){int nodeCap=nodeCaps[j];int internalSwitchingCap=internalSwitchingNodeCap[j];int NFType=-1;if(t==chain.size()){NFType=chain.get(t-1).getDestination();}else {NFType=chain.get(t).getSource();}if(om.nodeMapping[getIndexNF(f,NFType)]!=-1){continue;}if(nodeCap<(mbSpecs[NFType])){continue;}nodeCap-=mbSpecs[NFType];OCs.put(NFType,new ArrayList<Integer>());intSwitchedLinks.put(NFType,new ArrayList<Tuple>());OCs.get(NFType).add(NFType);for(int k=t;k<chain.size();k++){if(om.nodeMapping[getIndexNF(f,chain.get(k).getSource())]!=-1){continue;}if(om.nodeMapping[getIndexNF(f,chain.get(k).getDestination())]!=-1){continue;}if(!OCs.get(NFType).contains(chain.get(k).getSource())){if(nodeCap>=(mbSpecs[chain.get(k).getSource()]+mbSpecs[chain.get(k).getDestination()])){if(internalSwitchingCap>=f.getBw()){nodeCap-=(mbSpecs[chain.get(k).getSource()]+mbSpecs[chain.get(k).getDestination()]);internalSwitchingCap-=f.getBw();OCs.get(NFType).add(chain.get(k).getSource());OCs.get(NFType).add(chain.get(k).getDestination());intSwitchedLinks.get(NFType).add(chain.get(k));}}}else {if(nodeCap>=mbSpecs[chain.get(k).getDestination()]){if(internalSwitchingCap>=f.getBw()){nodeCap-=mbSpecs[chain.get(k).getDestination()];internalSwitchingCap-=f.getBw();OCs.get(NFType).add(chain.get(k).getDestination());intSwitchedLinks.get(NFType).add(chain.get(k));}}}}}int index=-1;int maxInterLinks=-1;Iterator it=OCs.entrySet().iterator();while(it.hasNext()){Map.Entry pair=(Map.Entry)it.next();System.out.println(""OC NF ""+pair.getKey()+"": ""+pair.getValue());if(((ArrayList<Tuple>)pair.getValue()).size()>maxInterLinks){maxInterLinks=((ArrayList<Tuple>)pair.getValue()).size();index=(int)pair.getKey();}}System.out.println(""NF Type chosen = ""+index);for(int k=0;k<OCs.get(index).size();k++){System.out.println(""Placed NF ""+OCs.get(index).get(k)+"" on ""+serverIndex);om.nodeMapping[getIndexNF(f,OCs.get(index).get(k))]=serverIndex;nodeCaps[j]-=mbSpecs[OCs.get(index).get(k)];}for(int k=0;k<intSwitchedLinks.get(index).size();k++){System.out.println(""Internally Switched V. Links ""+intSwitchedLinks.get(index).get(k));om.linkMapping.put(intSwitchedLinks.get(index).get(k),new ArrayList<Tuple>());internalSwitchingNodeCap[j]-=f.getBw();}if(om.numNodesSettled()==f.getChain().size()){om.setChainOrder(chain);System.out.println(""Node Embedding for Chain ""+chain+""\n""+om);return om;}}return null;}"
3579	"protected void changeQuestion(int index){if(!listQuestions.isEmpty()){if(index<listQuestions.size()&&index>=0&&questionsNotAnswered()){ final Question question=listQuestions.get(index);tvQuestion.setText(question.getQuestion());List<String> answers=question.getAnswers();for(int i=0;i<answers.size();i++){listButtonAnswers.get(i).setText(answers.get(i));if(i==question.getIndexCorrectAnswer()){listButtonAnswers.get(i).setOnClickListener(new AnswerButtonListener(true,question.isAnswered(),i,index));}else {listButtonAnswers.get(i).setOnClickListener(new AnswerButtonListener(false,question.isAnswered(),question.getIndexCorrectAnswer(),index));}}}else {showMessage(""No more questions to follow!"");}}else {showMessage(""The app does not have questions loaded."");}}"
3580	"private int findMainVerbIndex(List<String> tags,String verbTag){boolean verbFound=false;int verbIndex=-1;for(int i=0;i<tags.size();i++){String tag=tags.get(i);if((verbTag.equals(tag)||Tags.IS_ARE.equals(tag))&&!verbFound){verbIndex=i;}else {if((verbTag.equals(tag)||Tags.IS_ARE.equals(tag))&&verbFound){verbIndex=-1;}}}return verbIndex;}"
3581	"protected ActivityImproved getActivityImproved(){if(getActivity()!=null){return (ActivityImproved)getActivity();}else {return null;}}"
3582	"public static PartitionUpdate merge(Collection<PartitionUpdate> updates){assert (!updates.isEmpty());if(updates.size()==1){return Iterables.getOnlyElement(updates);}int totalSize=0;PartitionColumns.Builder builder=PartitionColumns.builder();DecoratedKey key=null;CFMetaData metadata=null;for(PartitionUpdate update : updates){totalSize+=update.rows;builder.addAll(update.columns());if(key==null){key=update.partitionKey();}else {assert (key.equals(update.partitionKey()));}if(metadata==null){metadata=update.metadata();}else {assert (metadata.cfId.equals(update.metadata().cfId));}}PartitionUpdate newUpdate=new PartitionUpdate(metadata,key,builder.build(),totalSize,Iterables.getOnlyElement(updates).nowInSec());for(PartitionUpdate update : updates){newUpdate.deletionInfo.add(update.deletionInfo);if(!update.staticRow.isEmpty()){if(newUpdate.staticRow.isEmpty()){newUpdate.staticRow=update.staticRow().takeAlias();}else {Rows.merge(newUpdate.staticRow,update.staticRow,newUpdate.columns().statics,newUpdate.staticWriter(),newUpdate.nowInSec(),SecondaryIndexManager.nullUpdater);}}for(Row row : update){row.copyTo(newUpdate.writer);}}return newUpdate;}"
3583	"private void searchResponse(AIResponse aiResponse,boolean tts){if(aiResponse.getResult()==null){Toast.makeText(getContext(),""I do not understand what you said."",Toast.LENGTH_LONG).show();}switch (aiResponse.getResult().getAction()){case APIAIService.NEARBY_LOCATION :PlaceCategories category;try{switch (aiResponse.getResult().getParameters().get(""Category"").getAsString().toLowerCase()){case ""hotel"" :category=PlaceCategories.Hotel;break;case ""food"" :category=PlaceCategories.Restaurant;break;default :category=PlaceCategories.All;break;}}catch(Exception e){category=PlaceCategories.All;}AppCompatActivity activity=(AppCompatActivity)getContext();activity.getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_animation,R.anim.fade_out_animation,R.anim.fade_in_animation,R.anim.fade_out_animation).replace(R.id.content_frameLayout,NearByFragment.newInstance(category)).addToBackStack(MainActivity.fragment_nav_backstack_tag).commit();if(tts){TTS.speak(""Searching for nearby location for you!"");}break;case APIAIService.SEARCH :Intent intent=new Intent(getContext(),SearchActivity.class);intent.putExtra(""searchQuery"",aiResponse.getResult().getParameters().get(""Places"").getAsString());getContext().startActivity(intent);break;default :Toast.makeText(getContext(),""I do not understand what you said."",Toast.LENGTH_LONG).show();break;}}"
3584	"public void authenticate(){try{int accountNumber=Integer.parseInt(usernameInput.getText());int pin=Integer.parseInt(passwordInput.getText());userAuthenticated=bankDatabase.authenticateUser(accountNumber,pin);if(userAuthenticated){currentAccountNumber=accountNumber;customerName=bankDatabase.getName(currentAccountNumber);if(atmObject.customerThreadList.indexOf(customerName)==-1){DateFormat dateFormat=new SimpleDateFormat(""dd/MM/yyyy"");Date date=new Date();DateFormat time=new SimpleDateFormat(""HH:mm:ss"");Calendar cal=Calendar.getInstance();atmObject.thread=new Thread(customerName);atmObject.threads.add(atmObject.thread);atmObject.thread.run();atmObject.customerThreadList.add(customerName);atmObject.customerThreadList.add(Long.toString(atmObject.thread.getId()));atmObject.customerTransactionMessage.add(customerName);atmObject.customerTransactionMessage.add("""");threadId=atmObject.customerThreadList.get((atmObject.customerThreadList.indexOf(customerName)+1));transacMessage=atmObject.customerTransactionMessage.get((atmObject.customerTransactionMessage.indexOf(customerName)+1));threadMessage+=String.format(""Thread id:  %s.  Customer name:  %s.  Thread state: %s. Start time: %s    %s %n"",threadId,customerName,""Customer Login"",dateFormat.format(date),time.format(cal.getTime()));startTime=cal.getTimeInMillis();startOptionWindow();AtmWindow.setTitle(customerName);atmObject.addCustomer(customerName);atmObject.customerList.setSelectedItem(customerName);JSONObject obj=new JSONObject(getWeather());String weatherDescription="""";Double currentTemp=0.0;JSONArray arr=obj.getJSONArray(""weather"");for(int i=0;i<arr.length();i++){weatherDescription=arr.getJSONObject(i).getString(""description"");}currentTemp=obj.getJSONObject(""main"").getDouble(""temp"")*9/5-459.67;String weatherMessage=String.format(""Hi! %s.%nCurrent weather description: %s%nTemperature: %.2f F%n"",customerName,weatherDescription,currentTemp);JOptionPane.showMessageDialog(null,weatherMessage);}else {JOptionPane.showMessageDialog(null,""User already logged in."");newCustomer();}}else {usernameInput.setText("""");passwordInput.setText("""");JOptionPane.showMessageDialog(null,""Invalid Account number or Pin. Please try again!"");}}catch(Exception error){JOptionPane.showMessageDialog(null,""Please provide valid account details"");}}"
3585	"private static boolean MacroParams_0(PsiBuilder b,int l){if(!recursion_guard_(b,l,""MacroParams_0"")){return false;}boolean r;Marker m=enter_section_(b);r=consumeTokens(b,0,NUMBER,MINUS);r=r&&MacroParams_0_2(b,l+1);exit_section_(b,m,null,r);return r;}"
3586	"@Override public String toString(){if(this.getClass()==Pawn.class){return """"+this.getField();}else {if(this.getClass()==Rock.class){return ""R""+this.getField();}else {if(this.getClass()==Knight.class){return ""N""+this.getField();}else {if(this.getClass()==Bishop.class){return ""B""+this.getField();}else {if(this.getClass()==Queen.class){return ""Q""+this.getField();}else {if(this.getClass()==King.class){return ""K""+this.getField();}}}}}}return null;}"
3587	"public void updateStatus(){greenBalls=0;pinkBalls=0;for(int i=0;i<height;i++){for(int j=0;j<width;j++){if(tiles[i][j].getBall() instanceof BallGreen){greenBalls++;}else {if(tiles[i][j].getBall() instanceof BallPink){pinkBalls++;}}}}if((playerTurn==1&&pinkBalls<=2)||(playerTurn==0&&greenBalls<=2)){limitedMove=true;}else {limitedMove=false;}if(pinkBalls==0||greenBalls==0){gameOver=true;}}"
3588	"protected boolean isValidPosition(Position p){if(p.getP_x()>=0&&p.getP_x()<this.board.length&&p.getP_y()>=0&&p.getP_y()<this.board[0].length){return true;}return false;}"
3589	"@Override public Object instantiateItem(ViewGroup container,int position){MonthView view;if(cacheView!=null){view=cacheView;}else {view=new MonthView(container.getContext(),attrs);}int[] date=CalendarUtil.positionToDate(position);view.setDateList(CalendarUtil.getMonthDate(date[0],date[1]));container.addView(view);return view;}"
3590	"private void populateMacroHandles(Map<String,Handle> handleMap){for(int iteration=0;iteration<this.macroMap.size();iteration++){Boolean bAllDependencyMet=true;for(Map.Entry<String,Macro> entry : this.macroMap.entrySet()){Macro macro=entry.getValue();if(macro!=null&&!macro.getOutputs().isEmpty()&&!handleMap.containsKey(getHandle(macro.getOutputs().get(0).getHandle()))){boolean bDependencyMet=true;for(Sequence input : macro.getInputs()){Handle handleType=handleMap.get(getHandle(input.getHandle()));if(handleType==null){bDependencyMet=false;}}bAllDependencyMet&=bDependencyMet;if(bDependencyMet){for(Sequence output : macro.getOutputs()){String outputHandle=getHandle(output.getHandle());handleMap.put(outputHandle,new MacroHandle(outputHandle,macro));}}}}if(bAllDependencyMet){break;}}for(Map.Entry<String,Macro> entry : this.macroMap.entrySet()){Macro macro=entry.getValue();for(Sequence input : macro.getInputs()){Handle handleType=handleMap.get(getHandle(input.getHandle()));if(handleType==null){imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_OPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format(""Invalid handle %s in %s macro"",input.getHandle(),macro.getName()));}}}for(String handle : this.aliasMap.values()){Handle handleType=handleMap.get(handle);if(handleType==null&&!handle.contains(""/inputs/"")){imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_OPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format(""Invalid handle %s in alias"",handle));}}}"
3591	"private String createValues(){values=""("";if(jText1.isVisible()){values+=""'""+jText1.getText()+""'"";}if(jText2.isVisible()){values+="", '""+jText2.getText()+""'"";}if(jText3.isVisible()){values+="", '""+jText3.getText()+""'"";}if(jText4.isVisible()){values+="", '""+jText4.getText()+""'"";}if(jText5.isVisible()){if(selTab.getSelectedIndex()>2&&selTab.getSelectedIndex()<6){values+="", DATE '""+jText5.getText()+""'"";}}if(jText6.isVisible()){if(!""GIOCATORE"".equals((String)selTab.getSelectedItem())){values+="", '""+jText6.getText()+""'"";}}if(box.isVisible()&&!"""".equals((String)box.getSelectedItem())){if(""PARTITA"".equals((String)selTab.getSelectedItem())){}else {values+="", '""+(String)box.getSelectedItem()+""'"";}}if(""Torneo ad Eliminazione"".equals((String)box.getSelectedItem())){if(!"""".equals(jText6.getText())){Integer num=null;try{num=DBproject.numT(this,Integer.parseInt(jText6.getText()));}catch(SQLException ex){Logger.getLogger(Insert.class.getName()).log(Level.SEVERE,null,ex);}values+="", '""+num+""'"";}}values+="")"";return values;}"
3592	"private void addCallButtonForUser(User user){ final ContextThemeWrapper context=new ContextThemeWrapper(getActivity(),R.style.MenuButtonsStyle);if(!parentActivity.callHasId(user.Id)){com.github.clans.fab.FloatingActionButton programFab2=new com.github.clans.fab.FloatingActionButton(context);programFab2.setLabelText(user.displayName);if(user.buddyPicture.length()!=0){String path=user.buddyPicture.substring(4);String url=""https://""+parentActivity.getServerAddress()+RoomActivity.BUDDY_IMG_PATH+path;ThumbnailsCacheManager.LoadImage(url,programFab2,user.displayName,true,true);}else {programFab2.setImageResource(R.drawable.user_icon_round);}programFab2.setOnClickListener(new View.OnClickListener(){  @Override public void onClick(  View view){    Intent intent=new Intent(mContext,CallActivity.class);    intent.setAction(CallActivity.ACTION_NEW_CALL);    intent.putExtra(WebsocketService.EXTRA_USER,user);    intent.putExtra(WebsocketService.EXTRA_OWN_ID,mOwnId);    intent.putExtra(WebsocketService.EXTRA_ID,user.Id);    intent.putExtra(WebsocketService.EXTRA_USERACTION,true);    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    mContext.startActivity(intent);    addToCallButton.close(true);  }});programFab2.setTag(user.Id);addToCallButton.addMenuButton(programFab2);}}"
3593	"@Override public void mouseClicked(MouseEvent e){if(isInBoardBounds((int)getLocationRelativeToBoard().getX(),(int)getLocationRelativeToBoard().getY())){boolean hit=false;for(Ship ship : ships){if(ship.isInBounds(getLocationRelativeToBoard())){if(ship.isMovable()&&Main.localPlayer==player){System.out.println(""Rotating"");ship.rotate();repaint();}else {if(Main.getCurrentPlayer()==player){}else {if(Main.gameStart){if(isInBoardBoundsAttack((int)getLocationRelativeToBoard().getX(),(int)getLocationRelativeToBoard().getY())){hit=true;if(ship.attack(getLocationRelativeToBoard())){System.out.println(""Hit!"");if(ship.checkDestroyed()){floatingShips--;}if(floatingShips<=0){player.defeat();}repaint();Main.nextTurn();}}}}}}}if(!hit&&Main.gameStart&&!player.isCurrentTurn()){if(isInBoardBoundsAttack((int)getLocationRelativeToBoard().getX()+1,(int)getLocationRelativeToBoard().getY()+1)){int mX=(int)getLocationRelativeToBoard().getX(),mY=(int)getLocationRelativeToBoard().getY();if(!misses[mX][mY]){misses[mX][mY]=true;System.out.println(""Miss!"");repaint();Main.nextTurn();}}}}}"
3594	"@Override public boolean hasNext() throws CacheAccessException{return next!=null;}"
3595	"private void addStocks(IngameUser user,int stockId,int stockAmount,int amount,boolean removeFromStock) throws SQLException{int newAmount=stockAmount-amount;if(newAmount<0){throw new IllegalStateException(""Corporation doesn't have enough stocks"");}if(removeFromStock){StocksTable table=Module.getTable(getModule(),StocksTable.class);table.executeUpdate(""UPDATE `{TABLE}` SET `amount` = ? WHERE `id` = ?"",newAmount,stockId);}CorpUserRow tmp=CorporationUtil.getCorpUser(corpModule,user);if(tmp==null){tmp=CorporationUtil.insertUser(corpModule,user,null);}StockUsersTable usersTable=Module.getTable(getModule(),StockUsersTable.class);StockUserRow[] rows=usersTable.get(""SELECT * FROM `{TABLE}` WHERE `user_id` = ? AND `stock_id` = ?"",tmp.uuid,stockId);if(rows.length>0){StockUserRow row=rows[0];int totalAmount=row.amount+amount;usersTable.executeUpdate(""UPDATE `{TABLE}` SET `amount` = ? WHERE `id` = ?"",totalAmount,row.id);return ;}StockUserRow row=new StockUserRow();row.amount=amount;row.stockId=stockId;row.userId=tmp.id;usersTable.insert(row);}"
3596	"@Override public void render(SpriteBatch spriteBatch){if(wasPressed){TitanicClass.playBGM.playSound(""Button"");}if(type==1){spriteBatch.draw(current.getTexture(),position.x,position.y);}else {obj.animation=current;obj.render(spriteBatch);}}"
3597	"void _create(String title,Image image,boolean fullscreen){created=true;glfwWindowHint(GLFW_VISIBLE,GLFW_FALSE);glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,4);glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);boolean supported;try{window=glfwCreateWindow(width,height,""Context Preloading"",NULL,NULL);supported=window!=NULL;}catch(RuntimeException ignore){supported=false;}if(!supported){glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);compatibility=true;}else {glfwDestroyWindow(window);}glfwWindowHint(GLFW_VISIBLE,GLFW_TRUE);window=glfwCreateWindow(width,height,title,fullscreen?glfwGetPrimaryMonitor():NULL,NULL);if(image!=null){if(image.ignoreAlpha){throw new RuntimeException(""Image has to contain alpha (do not call ignoreAlpha=true)!"");}GLFWImage.Buffer iconImages=GLFWImage.malloc(1);iconImages.get(0).set(image.getWidth(),image.getHeight(),image.data);glfwSetWindowIcon(window,iconImages);iconImages.free();}if(window==NULL){throw new RuntimeException(""Failed to create the GLFW window. Update your graphics card drivers."");}glfwSetScrollCallback(window,scrollCallback=new GLFWScrollCallback(){  @Override public void invoke(  long window,  double xoffset,  double yoffset){    inputs.add(new ScrollInput(System.nanoTime(),(int)yoffset));  }});glfwSetKeyCallback(window,keyCallback=new GLFWKeyCallback(){  @Override public void invoke(  long window,  int key,  int scancode,  int action,  int mods){    inputs.add(new KeyInput(System.nanoTime(),key,action == GLFW_PRESS));  }});glfwSetCharModsCallback(window,charCallback=new GLFWCharModsCallback(){  @Override public void invoke(  long window,  int codepoint,  int mods){    EnumSet<KeyModifier> enumSet=EnumSet.noneOf(KeyModifier.class);    if ((mods & GLFW_MOD_CONTROL) != 0) {      enumSet.add(KeyModifier.CTRL);    }    if ((mods & GLFW_MOD_ALT) != 0) {      enumSet.add(KeyModifier.ALT);    }    if ((mods & GLFW_MOD_SHIFT) != 0) {      enumSet.add(KeyModifier.SHIFT);    }    if ((mods & GLFW_MOD_SUPER) != 0) {      enumSet.add(KeyModifier.SUPER);    }    inputs.add(new ModsInput(System.nanoTime(),codepoint,enumSet));  }});glfwSetCursorPosCallback(window,cursorPosCallback=new GLFWCursorPosCallback(){  @Override public void invoke(  long window,  double xpos,  double ypos){    inputs.add(new MoveInput(System.nanoTime(),xpos,height - ypos));  }});glfwSetMouseButtonCallback(window,mouseButtonCallback=new GLFWMouseButtonCallback(){  @Override public void invoke(  long window,  int button,  int action,  int mods){    inputs.add(new MouseInput(System.nanoTime(),button + 1,action == GLFW_PRESS));  }});glfwMakeContextCurrent(window);glfwSwapInterval(1);GL.createCapabilities(true);if(!compatibility){glEnable(GL_DEBUG_OUTPUT);glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);glDebugMessageCallback(new GLDebugMessageCallback(){  @Override public void invoke(  int source,  int type,  int id,  int severity,  int length,  long message,  long userParam){    if (id == 131185 || id == 131218) {      return;    }    String sourceS;switch (source) {case GL_DEBUG_SOURCE_API:      sourceS=""API"";    break;case GL_DEBUG_SOURCE_APPLICATION:  sourceS=""Application"";break;case GL_DEBUG_SOURCE_SHADER_COMPILER:sourceS=""Shader_compiler"";break;case GL_DEBUG_SOURCE_THIRD_PARTY:sourceS=""Third_party"";break;case GL_DEBUG_SOURCE_WINDOW_SYSTEM:sourceS=""Window_system"";break;case GL_DEBUG_SOURCE_OTHER:default :sourceS=""Other"";break;}String typeS;switch (type) {case GL_DEBUG_TYPE_ERROR:typeS=""Error"";break;case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:typeS=""Deprecated_bhvr"";break;case GL_DEBUG_TYPE_MARKER:typeS=""Marker"";break;case GL_DEBUG_TYPE_PERFORMANCE:typeS=""Performance"";break;case GL_DEBUG_TYPE_POP_GROUP:typeS=""Pop_group"";break;case GL_DEBUG_TYPE_PUSH_GROUP:typeS=""Push_group"";break;case GL_DEBUG_TYPE_PORTABILITY:typeS=""Portability"";break;case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:typeS=""Undefined_bhvr"";break;case GL_DEBUG_TYPE_OTHER:default :typeS=""Other"";break;}String severityS;switch (severity) {case GL_DEBUG_SEVERITY_HIGH:severityS=""High"";break;case GL_DEBUG_SEVERITY_MEDIUM:severityS=""Medium"";break;case GL_DEBUG_SEVERITY_LOW:severityS=""Low"";break;case GL_DEBUG_SEVERITY_NOTIFICATION:severityS=""Notification"";break;default :severityS=""Other"";break;}System.err.println(""OpenGL Warning/Error: Source: "" + sourceS + "" - Type: ""+ typeS+ "" - Severity: ""+ severityS+ "" - Id: ""+ id+ "" - Message: ""+ MemoryUtil.memUTF8(MemoryUtil.memByteBuffer(message,length)));if (severity != GL_DEBUG_SEVERITY_NOTIFICATION) {Thread.dumpStack();}}},0L);}glEnable(GL_BLEND);glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);glDisable(GL_CULL_FACE);glDisable(GL_DEPTH_TEST);glClearColor(0,0,0,0);circleVao=glGenVertexArrays();glBindVertexArray(circleVao);int vertShader=glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertShader,readFile(""circle.vert""));glCompileShader(vertShader);if(glGetShaderi(vertShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(vertShader));}int fragShader=glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragShader,readFile(""circle.frag""));glCompileShader(fragShader);if(glGetShaderi(fragShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(fragShader));}circleProgram=glCreateProgram();glAttachShader(circleProgram,vertShader);glAttachShader(circleProgram,fragShader);glLinkProgram(circleProgram);if(glGetProgrami(circleProgram,GL_LINK_STATUS)!=GL_TRUE){throw new RuntimeException(glGetProgramInfoLog(circleProgram));}glDetachShader(circleProgram,vertShader);glDetachShader(circleProgram,fragShader);glDeleteShader(vertShader);glDeleteShader(fragShader);glUseProgram(circleProgram);texVao=glGenVertexArrays();glBindVertexArray(texVao);vertShader=glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertShader,readFile(""tex.vert""));glCompileShader(vertShader);if(glGetShaderi(vertShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(vertShader));}fragShader=glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragShader,readFile(""tex.frag""));glCompileShader(fragShader);if(glGetShaderi(fragShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(fragShader));}texProgram=glCreateProgram();glAttachShader(texProgram,vertShader);glAttachShader(texProgram,fragShader);glLinkProgram(texProgram);if(glGetProgrami(texProgram,GL_LINK_STATUS)!=GL_TRUE){throw new RuntimeException(glGetProgramInfoLog(texProgram));}glDetachShader(texProgram,vertShader);glDetachShader(texProgram,fragShader);glDeleteShader(vertShader);glDeleteShader(fragShader);glUseProgram(texProgram);fontVao=glGenVertexArrays();glBindVertexArray(fontVao);vertShader=glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertShader,readFile(""font.vert""));glCompileShader(vertShader);if(glGetShaderi(vertShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(vertShader));}fragShader=glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragShader,readFile(""font.frag""));glCompileShader(fragShader);if(glGetShaderi(fragShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(fragShader));}fontProgram=glCreateProgram();glAttachShader(fontProgram,vertShader);glAttachShader(fontProgram,fragShader);glLinkProgram(fontProgram);if(glGetProgrami(fontProgram,GL_LINK_STATUS)!=GL_TRUE){throw new RuntimeException(glGetProgramInfoLog(fontProgram));}glDetachShader(fontProgram,vertShader);glDetachShader(fontProgram,fragShader);glDeleteShader(vertShader);glDeleteShader(fragShader);glUseProgram(fontProgram);vao=glGenVertexArrays();glBindVertexArray(vao);vertShader=glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertShader,readFile(""std.vert""));glCompileShader(vertShader);if(glGetShaderi(vertShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(vertShader));}fragShader=glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragShader,readFile(""std.frag""));glCompileShader(fragShader);if(glGetShaderi(fragShader,GL_COMPILE_STATUS)!=GL_TRUE){throw new RuntimeException(glGetShaderInfoLog(fragShader));}program=glCreateProgram();glAttachShader(program,vertShader);glAttachShader(program,fragShader);glLinkProgram(program);if(glGetProgrami(program,GL_LINK_STATUS)!=GL_TRUE){throw new RuntimeException(glGetProgramInfoLog(program));}glDetachShader(program,vertShader);glDetachShader(program,fragShader);glDeleteShader(vertShader);glDeleteShader(fragShader);glUseProgram(program);indexCircleCircle=glGetUniformLocation(circleProgram,""circle"");indexCircleColor=glGetUniformLocation(circleProgram,""color"");indexCircleMinLength=glGetUniformLocation(circleProgram,""minLength"");indexFontFontPosition=glGetUniformLocation(fontProgram,""fontPosition"");indexFontImagePosition=glGetUniformLocation(fontProgram,""imagePosition"");indexFontColor=glGetUniformLocation(fontProgram,""color"");indexStdMatrix=glGetUniformLocation(program,""matrix"");indexStdColor=glGetUniformLocation(program,""color"");indexTexScreenPosition=glGetUniformLocation(texProgram,""screenPosition"");indexTexTexPosition=glGetUniformLocation(texProgram,""texPosition"");indexTexAlpha=glGetUniformLocation(texProgram,""alpha"");bufferRectangle=glGenBuffers();glBindBuffer(GL_ARRAY_BUFFER,bufferRectangle);float[] rawPositions={-0.5,-0.5,0.5,-0.5,0.5,0.5,-0.5,-0.5,-0.5,0.5,0.5,0.5};try(MemoryStack stack=stackPush()){FloatBuffer fb=stack.mallocFloat(16);fb.put(rawPositions);fb.flip();glBufferData(GL_ARRAY_BUFFER,fb,GL_STATIC_DRAW);}glEnableVertexAttribArray(0);glVertexAttribPointer(0,2,GL_FLOAT,false,0,0);glBindVertexArray(texVao);glEnableVertexAttribArray(0);glVertexAttribPointer(0,2,GL_FLOAT,false,0,0);glBindVertexArray(fontVao);glEnableVertexAttribArray(0);glVertexAttribPointer(0,2,GL_FLOAT,false,0,0);bufferMat4x4=MemoryUtil.memAllocFloat(16);mat4x4=new Matrix4f();for(Font font : Font.values()){try{ByteBuffer buf=Utils.getResourceBuffer(font.getName()+"".ttf"");fontBuffer.put(font,buf);}catch(IOException e){System.err.println(""Couldn't fetch font: ""+font+"": ""+e.getMessage());}}}"
3598	"public int compareTo(Constant v){if(v instanceof Null){return 0;}else {return 1;}}"
3599	"public boolean isAdmin(){return this._roles!=null&&this._roles.contains(Group.ADMIN);}"
3600	"@Override public boolean apply(InetAddress inetAddress){return !getEndpoint().equals(inetAddress);}"
3601	"@Override public void onAnimationEnd(Animator animation){if(mHeader!=null){mHeaderOffsetBottom=mHeader.getBottom();}if(mTargetView!=null){mTargetOffsetTop=mTargetView.getTop();Log.i(TAG,""mRefreshListener, onAnimationEnd: mTargetOffsetTop =""+mTargetOffsetTop);}}"
3602	"@Override protected void onCreate(Bundle savedInstanceState){setTheme(R.style.AppTheme);super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);setupLastPodcast();prepareUIMetrics();prepareUI();populateUI();if(fabPlayPause.getId()==R.id.play_pause_button&&PodcasterProjectApplication.getInstance().getSharedPreferencesUtils().getLastState()!=PlayerService.PAUSED){new MaterialDialog.Builder(this).title(R.string.restore_confirmation_dialog_title).content(R.string.restore_confirmation_dialog_content).positiveText(R.string.restore_confirmation_dialog_positive_text).negativeText(R.string.restore_confirmation_dialog_negative_text).onPositive(new MaterialDialog.SingleButtonCallback(){  @Override public void onClick(  @NonNull MaterialDialog dialog,  @NonNull DialogAction which){    startMediaPlayback(true);  }}).onNegative(new MaterialDialog.SingleButtonCallback(){  @Override public void onClick(  @NonNull MaterialDialog dialog,  @NonNull DialogAction which){    PodcasterProjectApplication.getInstance().getSharedPreferencesUtils().setLastState(PlayerService.PAUSED);    dialog.dismiss();  }}).show();}}"
3603	"public boolean isMainGroup(){return row.getInteger(""maingroup"")==1;}"
3604	"private void handleShowInvites(String data){try{Log.d(TAG,""SHOW_INVITES result"");JSONObject result=new JSONObject(data);if(!result.has(""error"")){JSONArray invites=result.getJSONArray(""invites"");totalGameInvites=invites.length();if(totalGameInvites==0){gameInvitesFinished();}for(int i=0;i<totalGameInvites;i++){JSONObject invite=invites.getJSONObject(i); final int inviteId=invite.getInt(""inviteId""); final int inviterId=invite.getInt(""inviterId""); final int gameId=invite.getInt(""gameId"");dataServer.sendRequest(ServerCommand.SHOW_GAME,ImmutableMap.of(""gameId"",String.valueOf(gameId)),new HttpConnector.Callback(){  @Override public void handleResult(  String data){    handleShowGame(data,inviteId,inviterId,gameId);  }});}}else {Log.e(TAG,""Server error while receiving gameInvites."");gameInvitesFinished();}}catch(JSONException e){e.printStackTrace();Log.e(TAG,""JSON error while receiving gameInvites."");gameInvitesFinished();}}"
3605	"private void processMessageToForward(Message message) throws MessagingException{String subject=message.getSubject();if(subject!=null&&!subject.toLowerCase(Locale.US).startsWith(""fwd:"")){mSubjectView.setText(""Fwd: ""+subject);}else {mSubjectView.setText(subject);}mQuoteStyle=QuoteStyle.HEADER;if(!TextUtils.isEmpty(message.getMessageId())){mInReplyTo=message.getMessageId();mReferences=mInReplyTo;}else {if(K9.DEBUG){Log.d(K9.LOG_TAG,""could not get Message-ID."");}}populateUIWithQuotedMessage(true);if(!mSourceMessageProcessed){if(!loadAttachments(message,0)){mHandler.sendEmptyMessage(MSG_SKIPPED_ATTACHMENTS);}}}"
3606	"@Override public boolean setBiome(Vector2D position,BaseBiome biome){if(manager.isPlayerIgnoringWELimit(player)){return extent.setBiome(position,biome);}else {Location loc=new Location(player.getWorld(),position.getX(),0,position.getZ());Plot plot=manager.getPlot(loc);return plot!=null&&plot.isAllowed(actor.getUniqueId())&&extent.setBiome(position,biome);}}"
3607	"private boolean deleteRenderedPathWithRspName(RspName rspName){boolean ret=true;ret=SfcProviderServiceForwarderAPI.deletePathFromServiceForwarderState(rspName);ret=(ret&&SfcProviderServiceFunctionAPI.deleteRspFromServiceFunctionState(rspName));ret=(ret&&SfcProviderRenderedPathAPI.deleteRenderedServicePath(rspName));return ret;}"
3608	"public static String parseSaveAttr(Cell cell){if((cell.getCellTypeEnum()==CellType.STRING)&&(cell!=null)&&!cell.getCellStyle().getLocked()){String saveAttr=parseSaveAttrString(cell.getStringCellValue());if(!saveAttr.isEmpty()){return ""$""+cell.getColumnIndex()+""=""+saveAttr+"","";}}return """";}"
3609	"@Override public boolean accept(File current,String name){return new File(current,name).isDirectory()&&Main.getAuthorizer().isAccessibleContainer(apiKeyCopy,name);}"
3610	"public MetadataMessageBuilder getBuilderForType(MetadataMessageBuilder builder,String branch){ final boolean isDeprecated=javaType.hasAnnotation(Deprecated.class);builder.appendContent(""`""+getTypeType()+""` "");builder.appendContent((isDeprecated?""~~"":"""")+""`""+javaType.getQualifiedName()+""`""+(isDeprecated?""~~"":"""")+""\n"");EmbedBuilder embed=new EmbedBuilder().ignoreNullEmptyFields().withFooterText(""Branch: ""+branch);embed.withAuthorName(javaType.getName());embed.withAuthorIcon(getTypeIcon());if(javaType instanceof Extendable){Extendable<?> jt=(Extendable)javaType;if(jt.getSuperType()!=null){embed.appendField(""Extends"",""`""+jt.getSuperType()+""`"",false);}}if(javaType instanceof InterfaceCapable){InterfaceCapable jt=(InterfaceCapable)javaType;if(jt.getInterfaces().size()>0){embed.appendField(""Implements"",jt.getInterfaces().stream().collect(Collectors.joining(""\n"",""`"",""`"")),false);}}addJavaDocFields(embed,javaType.getJavaDoc());{MethodHolder<?> methodHolder=(MethodHolder<?>)javaType;String desc=""Found ""+methodHolder.getMethods().size()+"" method""+(methodHolder.getMethods().size()==1?"""":""s"")+""\n"";if(methodHolder.getMethods().size()>16){}int index=0;for(Method m : methodHolder.getMethods()){desc+=""`"";desc+=m.getName();desc+=getMethodParams(m,false);desc+="" : "";desc+=(m.getReturnType()==null?(m.isConstructor()?""constructor"":""void""):m.getReturnType().toString());desc+=""`"";desc+=""\n"";index++;if(index%10==0||index==methodHolder.getMethods().size()-1){embed.appendField(""Methods""+(index>10?"" (cont.)"":""""),desc,false);desc="""";}}}builder.withEmbed(embed.build());return builder;}"
3611	"public int getFreedomSpace(LetterTile lt){int verUpFreedom=0;int verDownFreedom=0;int horLeftFreedom=0;int horRightFreedom=0;Tile tileHolder=getLetterTileHolder(lt);int holderCol=tileHolder.getCol();int holderRow=tileHolder.getRow();for(int i=holderCol+1;i<Board.BOARD_COLS-1;i++){if(isTileEmptyAI(i,holderRow)&&isTileEmptyAI(i+1,holderRow)&&isTileEmptyAI(i,holderRow+1)&&isTileEmptyAI(i,holderRow-1)){horRightFreedom++;}else {break;}}for(int i=holderCol-1;i>=1;i--){if(isTileEmptyAI(i,holderRow)&&isTileEmptyAI(i-1,holderRow)&&isTileEmptyAI(i,holderRow+1)&&isTileEmptyAI(i,holderRow-1)){horLeftFreedom++;}else {break;}}for(int i=holderRow+1;i<Board.BOARD_ROWS-1;i++){if(isTileEmptyAI(holderCol,i)&&isTileEmptyAI(holderCol,i+1)&&isTileEmptyAI(holderCol+1,i)&&isTileEmptyAI(holderCol-1,i)){verDownFreedom++;}else {break;}}for(int i=holderRow-1;i>=1;i--){if(isTileEmptyAI(holderCol,i)&&isTileEmptyAI(holderCol,i-1)&&isTileEmptyAI(holderCol+1,i)&&isTileEmptyAI(holderCol-1,i)){verUpFreedom++;}else {break;}}int totalHorFreedom=horLeftFreedom+horRightFreedom;int totalVerFreedom=verUpFreedom+verDownFreedom;if(totalHorFreedom>=totalVerFreedom){lt.setAIMovement(Movement.HORIZONTAL);lt.setAIDirectionFreedom(new int{horLeftFreedom,horRightFreedom});return totalHorFreedom;}else {lt.setAIMovement(Movement.VERTICAL);lt.setAIDirectionFreedom(new int{verUpFreedom,verDownFreedom});return totalVerFreedom;}}"
3612	"@Override public void endContact(Contact contact){fixA=contact.getFixtureA();fixB=contact.getFixtureB();if(fixturesNotNull()){if(fixA.getUserData().equals(""Player"")||fixB.getUserData().equals(""Player"")){if(fixA.getUserData().toString().startsWith(""Rock"")||fixB.getUserData().toString().startsWith(""Rock"")){for(int i=0;i<=4;i++){if(fixA.getUserData().toString().endsWith(""""+i)||fixB.getUserData().toString().endsWith(""""+i)){switch (i){case 1 :intPuzzle.collideOff();break;case 2 :stringPuzzle.collideOff();break;case 3 :booleanPuzzle.collideOff();break;case 4 :floatPuzzle.collideOff();break;}}}}}else {if(fixA.getUserData().toString().startsWith(""Rock"")||fixB.getUserData().toString().startsWith(""Rock"")){System.out.println(""--Rock"");if(fixA.getUserData().toString().startsWith(""Hole"")||fixB.getUserData().toString().startsWith(""Hole"")){System.out.println(""--Rock+Hole"");for(int i=0;i<=4;i++){if(fixA.getUserData().toString().endsWith(""""+i)||fixB.getUserData().toString().endsWith(""""+i)){switch (i){case 1 :intHole.collideOff();break;case 2 :stringHole.collideOff();break;case 3 :booleanHole.collideOff();break;case 4 :floatHole.collideOff();break;}}}}}}}}"
3613	"public boolean containsKey(String uuid){return table.getIfPresent(uuid)!=null;}"
3614	"@Override public void write(CorfuDBRuntime client,long address,Map<UUID,Long> streams,byte[] data) throws OverwriteException,TrimmedException,OutOfSpaceException,SubLogException{IStreamAwareRepProtocol reconfiguredRP=null;while(true){try{if(reconfiguredRP!=null){reconfiguredRP.write(client,address,streams,data);return ;}long layer0=address%layers.get(0).size();IServerProtocol first=layers.get(0).get((int)layer0);try{((IWriteOnceLogUnit)first).write(address,streams.keySet(),data);}catch(OverwriteException e){if(!e.payload.equals(ByteBuffer.wrap(data))){throw e;}}long layer1=streams.keySet().iterator().next().hashCode()%layers.get(1).size();IServerProtocol second=layers.get(1).get((int)layer1);try{((IStreamAwareLogUnit)second).streamAwareWrite(address,streams,data);}catch(OverwriteException e){if(!e.payload.equals(ByteBuffer.wrap(data))){throw e;}}return ;}catch(NetworkException e){log.warn(""Unable to write, requesting new view."",e);client.invalidateViewAndWait(e);reconfiguredRP=client.getView().getSegments().get(0).getStreamAwareRepProtocol();}}}"
3615	"@Override public boolean onTouch(View view,MotionEvent motionEvent){float initialY=motionEvent.getY(),initialX=motionEvent.getX();int i=grid.pointToPosition((int)motionEvent.getX(),(int)motionEvent.getY());if(i>=0&&i<42){if(motionEvent.getAction()==MotionEvent.ACTION_DOWN){changeSateAndResetPos(cells.get(i),i,initialX,initialY);launchMultiSelectMenu();}else {if(motionEvent.getAction()==MotionEvent.ACTION_MOVE){if(checkDistance(startX,startY,motionEvent.getX(),motionEvent.getY(),grid.getChildAt(i).getWidth(),grid.getChildAt(i).getHeight())){changeSateAndResetPos(cells.get(i),i,initialX,initialY);}}}}return true;}"
3616	"@Override public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException,ServletException{HttpServletRequest request=(HttpServletRequest)req;HttpServletResponse response=(HttpServletResponse)res;HttpSession session=request.getSession();Medico User=null;if(session.getAttribute(""User"")!=null){User=(Medico)session.getAttribute(""MedicoLogged"");}String path=((HttpServletRequest)request).getRequestURI();if(!path.contains(pathToBeIgnored)&&!path.contains(""/js"")&&!path.contains(""img"")&&!path.contains(""css"")&&!path.contains(""/guest"")&&!path.contains(""/public"")&&!path.contains(""font"")&&(session==null||session.getAttribute(""User"")==null||(User!=null&&User.getEmail().equals("""")))){response.sendRedirect(request.getContextPath()+""/login.jsp"");}else {chain.doFilter(req,res);}}"
3617	"public void copyInto(double[] copy,int offset){ final int rowCount=structure.rowCount; final int columnCount=structure.columnCount;if(structure.stride(ArrayStructure2D.ROW_DIMENSION)==1){for(int rowIndex=0;rowIndex<rowCount;rowIndex++){ final ArrayStore1D row=row(rowIndex);row.copyInto(copy,offset+rowIndex*columnCount);}}else {if(structure.stride(ArrayStructure2D.COLUMN_DIMENSION)==1){for(int columnIndex=0;columnIndex<columnCount;columnIndex++){ final ArrayStore1D column=column(columnIndex);column.copyInto(copy,offset+columnIndex*rowCount);}}else { final PrimitiveIterator.OfDouble spliterator=iterator();while(spliterator.hasNext()){copy[offset++]=spliterator.nextDouble();}}}}"
3618	"@Override public void create(){super.create();String title;String message;int type;if(invalidContextValues==null){title=TITLE_NO_INVALID_CONTEXT;message=MESSAGE_NO_INVALID_CONTEXT;type=IMessageProvider.INFORMATION;}else {title=TITLE_INVALID_CONTEXT;message=MESSAGE_INVALID_CONTEXT;type=IMessageProvider.ERROR;}setTitle(title);setMessage(message,type);}"
3619	"@Override public void onServiceStateChanged(Boolean newState){serviceRunningPref=newState;if(serviceRunningPref&&!Utils.isServiceRunning(AutomaticCleanerService.class,this)){startCleanerService();}else {if(Utils.isServiceRunning(AutomaticCleanerService.class,this)){stopCleanerService();}}saveSettings();}"
3620	"public List<DateInfo> getIntersection(Long tableId,int minSize){List<DateInfo> intersections=getAllIntersection(tableId);List<DateInfo> intersectionsByTime=new ArrayList<>();int preTime=intersections.get(0).getTime();int size=0;int p=0;if(minSize==1){return intersections;}for(int i=1;i<intersections.size();i++){if(preTime+1==intersections.get(i).getTime()){size++;}else {if(size+1>=minSize){intersectionsByTime.addAll(intersections.subList(p,p+size+1));}size=0;p=i;}if(i==intersections.size()-1&&size+1>=minSize){intersectionsByTime.addAll(intersections.subList(p,p+size+1));}preTime=intersections.get(i).getTime();}return intersectionsByTime;}"
3621	"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){if(resultCode==RESULT_OK){if(requestCode==Constants.REQUEST_SELECT_PICTURE){refreshGallery(Utils.rootDirectoryPath()+Constants.TEMP_FILE_NAME);try{Bitmap photo=BitmapFactory.decodeFile(Utils.rootDirectoryPath()+Constants.TEMP_FILE_NAME);if(sdk<android.os.Build.VERSION_CODES.JELLY_BEAN){drawingView.setBackgroundDrawable(new BitmapDrawable(photo));}else {drawingView.setBackground(new BitmapDrawable(photo));}}catch(Exception e){e.printStackTrace();Utils.showToast(this,getString(R.string.msg_general_error),Toast.LENGTH_LONG);}}}if(!mHelper.handleActivityResult(requestCode,resultCode,data)){super.onActivityResult(requestCode,resultCode,data);}}"
3622	"public boolean hasContent(){return getFigTextField0().getText().length()>0&&getFigTextField1().getText().length()>0;}"
3623	"@Override public void onClick(View v){if(subView.getVisibility()==View.VISIBLE){subView.setVisibility(View.GONE);rootView.setSelected(false);}else {subView.setVisibility(View.VISIBLE);rootView.setSelected(true);}if(mListener!=null){mListener.OnMarkerItemClick(position);}}"
3624	"@Override public Boolean notValidAttribute(){return items==null;}"
3625	"private boolean shouldReturn(String id,long duration){return id==null||(duration<this.MAX_DURATION_TOLERANCE)&&id.equals(lastFetchedHongbaoId)&&(lastFetchedHongbaoId.equals(this.WECHAT_DEFAULT_TEXT_CH)||lastFetchedHongbaoId.equals(this.WECHAT_DEFAULT_TEXT_EN));}"
3626	"@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""/ingest"") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NamedFileSystemList ingestFileSystems(FileSystemIngest param) throws InternalException{if((null==param.getUnManagedFileSystems())||(param.getUnManagedFileSystems().toString().length()==0)||(param.getUnManagedFileSystems().isEmpty())||(param.getUnManagedFileSystems().get(0).toString().isEmpty())){throw APIException.badRequests.invalidParameterUnManagedFsListEmpty();}if(null==param.getProject()||(param.getProject().toString().length()==0)){throw APIException.badRequests.invalidParameterProjectEmpty();}if(null==param.getVarray()||(param.getVarray().toString().length()==0)){throw APIException.badRequests.invalidParameterVirtualArrayEmpty();}if(null==param.getVpool()||(param.getVpool().toString().length()==0)){throw APIException.badRequests.invalidParameterVirtualPoolEmpty();}if(param.getUnManagedFileSystems().size()>getMaxBulkSize()){throw APIException.badRequests.exceedingLimit(""unmanaged filesystems"",getMaxBulkSize());}_logger.info(""Ingest called with Virtual Array {}"",param.getVarray());_logger.info(""Ingest called with Virtual Pool {}"",param.getVpool());_logger.info(""Ingest called with Project {}"",param.getProject());_logger.info(""Ingest called with UnManagedFileSystems {}"",param.getUnManagedFileSystems());NamedFileSystemList filesystemList=new NamedFileSystemList();List<UnManagedFileSystem> unManagedFileSystems=new ArrayList<UnManagedFileSystem>();try{Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);ArgValidator.checkUri(param.getProject());ArgValidator.checkEntity(project,param.getProject(),false);VirtualArray neighborhood=FileSystemIngestionUtil.getVirtualArrayForFileSystemCreateRequest(project,param.getVarray(),_permissionsHelper,_dbClient);VirtualPool cos=FileSystemIngestionUtil.getVirtualPoolForFileSystemCreateRequest(project,param.getVpool(),_permissionsHelper,_dbClient);if(null!=cos.getVirtualArrays()&&!cos.getVirtualArrays().isEmpty()&&!cos.getVirtualArrays().contains(param.getVarray().toString())){throw APIException.internalServerErrors.virtualPoolNotMatchingVArray(param.getVarray());}long unManagedFileSystemsCapacity=FileSystemIngestionUtil.getTotalUnManagedFileSystemCapacity(_dbClient,param.getUnManagedFileSystems());_logger.info(""Requested UnManagedFile System Capacity {}"",unManagedFileSystemsCapacity);TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());CapacityUtils.validateQuotasForProvisioning(_dbClient,cos,project,tenant,unManagedFileSystemsCapacity,""filesystem"");FileSystemIngestionUtil.isIngestionRequestValidForUnManagedFileSystems(param.getUnManagedFileSystems(),cos,_dbClient);List<FileShare> filesystems=new ArrayList<FileShare>();Map<URI,FileShare> unManagedFSURIToFSMap=new HashMap<>();List<FileExportRule> fsExportRules=new ArrayList<FileExportRule>();List<CifsShareACL> fsCifsShareAcls=new ArrayList<CifsShareACL>();List<NFSShareACL> fsNfsShareAcls=new ArrayList<NFSShareACL>();List<UnManagedFileExportRule> inActiveUnManagedExportRules=new ArrayList<UnManagedFileExportRule>();List<UnManagedCifsShareACL> inActiveUnManagedShareCifs=new ArrayList<UnManagedCifsShareACL>();List<UnManagedNFSShareACL> inActiveUnManagedShareNfs=new ArrayList<UnManagedNFSShareACL>();List<CifsShareACL> cifsShareACLList=new ArrayList<CifsShareACL>();List<URI> full_pools=new ArrayList<URI>();List<URI> full_systems=new ArrayList<URI>();Calendar timeNow=Calendar.getInstance();for(URI unManagedFileSystemUri : param.getUnManagedFileSystems()){long softLimit=0;int softGrace=0;long notificationLimit=0;UnManagedFileSystem unManagedFileSystem=_dbClient.queryObject(UnManagedFileSystem.class,unManagedFileSystemUri);if(null==unManagedFileSystem||null==unManagedFileSystem.getFileSystemCharacterstics()||null==unManagedFileSystem.getFileSystemInformation()){_logger.warn(""UnManaged FileSystem {} partially discovered, hence not enough information available to validate neither virtualPool nor other criterias.Skipping Ingestion.."",unManagedFileSystemUri);continue;}if(unManagedFileSystem.getInactive()){_logger.warn(""UnManaged FileSystem {} is inactive.Skipping Ingestion.."",unManagedFileSystemUri);continue;}if(!FileSystemIngestionUtil.checkVirtualPoolValidForUnManagedFileSystem(_dbClient,cos,unManagedFileSystemUri)){continue;}StringSetMap unManagedFileSystemInformation=unManagedFileSystem.getFileSystemInformation();String fsNativeGuid=unManagedFileSystem.getNativeGuid().replace(FileSystemIngestionUtil.UNMANAGEDFILESYSTEM,FileSystemIngestionUtil.FILESYSTEM);String deviceLabel=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.DEVICE_LABEL.toString(),unManagedFileSystemInformation);String fsName=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NAME.toString(),unManagedFileSystemInformation);URI storagePoolUri=unManagedFileSystem.getStoragePoolUri();String storagePortUri=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.STORAGE_PORT.toString(),unManagedFileSystemInformation);String capacity=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),unManagedFileSystemInformation);String usedCapacity=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),unManagedFileSystemInformation);String nasUri=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NAS.toString(),unManagedFileSystemInformation);String path=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.PATH.toString(),unManagedFileSystemInformation);String mountPath=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.MOUNT_PATH.toString(),unManagedFileSystemInformation);String nativeId=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NATIVE_ID.toString(),unManagedFileSystemInformation);String systemType=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.SYSTEM_TYPE.toString(),unManagedFileSystemInformation);String softLt=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.SOFT_LIMIT.toString(),unManagedFileSystemInformation);String softGr=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.SOFT_GRACE.toString(),unManagedFileSystemInformation);String notificationLt=PropertySetterUtil.extractValueFromStringSet(SupportedFileSystemInformation.NOTIFICATION_LIMIT.toString(),unManagedFileSystemInformation);if(null!=softLt&&!softLt.isEmpty()){softLimit=Long.valueOf(softLt);}if(null!=softGr&&!softGr.isEmpty()){softGrace=Integer.valueOf(softGr);}if(null!=notificationLt&&!notificationLt.isEmpty()){notificationLimit=Long.valueOf(notificationLt);}Long lcapcity=Long.valueOf(capacity);Long lusedCapacity=Long.valueOf(usedCapacity);StoragePool pool=_dbClient.queryObject(StoragePool.class,storagePoolUri);StoragePort port=null;if(storagePortUri!=null){port=_dbClient.queryObject(StoragePort.class,URI.create(storagePortUri));}StorageHADomain dataMover=null;if(port!=null&&port.getStorageHADomain()!=null){dataMover=_dbClient.queryObject(StorageHADomain.class,port.getStorageHADomain());}if(dataMover!=null){_logger.info(""Data Mover to Use {} {} {}"",new Object{dataMover.getAdapterName(),dataMover.getName(),dataMover.getLabel()});}if(FileSystemIngestionUtil.checkForDuplicateFSName(_dbClient,project.getId(),deviceLabel,filesystems)){_logger.info(""File System with name: {}  already exists in the given project: {} so, ignoring it.."",deviceLabel,project.getLabel());continue;}if(!isIngestUmfsValidForProject(project,_dbClient,nasUri)){_logger.info(""UnManaged FileSystem path {} is mounted on vNAS URI {} which is invalid for project."",path,nasUri);continue;}if(null!=pool){StringSet taggedVirtualArrays=pool.getTaggedVirtualArrays();if((null==taggedVirtualArrays)||(!taggedVirtualArrays.contains(neighborhood.getId().toString()))){_logger.warn(""UnManaged FileSystem {} storagepool doesn't related to the Virtual Array {}. Skipping Ingestion.."",unManagedFileSystemUri,neighborhood.getId().toString());continue;}}else {_logger.warn(""UnManaged FileSystem {} doesn't contain a storagepool. Skipping Ingestiong"",unManagedFileSystemUri);continue;}if(full_pools.contains(storagePoolUri)){continue;}if(pool.getIsResourceLimitSet()){if(pool.getMaxResources()<=StoragePoolService.getNumResources(pool,_dbClient)){full_pools.add(storagePoolUri);continue;}}FileShare filesystem=new FileShare();filesystem.setId(URIUtil.createId(FileShare.class));filesystem.setNativeGuid(fsNativeGuid);filesystem.setCapacity(lcapcity);filesystem.setUsedCapacity(lusedCapacity);filesystem.setPath(path);filesystem.setMountPath(mountPath);filesystem.setVirtualPool(param.getVpool());filesystem.setVirtualArray(param.getVarray());filesystem.setSoftLimit(softLimit);filesystem.setSoftGracePeriod(softGrace);filesystem.setNotificationLimit(notificationLimit);if(nasUri!=null){filesystem.setVirtualNAS(URI.create(nasUri));}if(nativeId!=null){filesystem.setNativeId(nativeId);}URI storageSystemUri=unManagedFileSystem.getStorageSystemUri();StorageSystem system=_dbClient.queryObject(StorageSystem.class,storageSystemUri);if(full_systems.contains(storageSystemUri)){continue;}if(system.getIsResourceLimitSet()){if(system.getMaxResources()<=StorageSystemService.getNumResources(system,_dbClient)){full_systems.add(storageSystemUri);continue;}}filesystem.setStorageDevice(storageSystemUri);filesystem.setCreationTime(timeNow);filesystem.setPool(storagePoolUri);filesystem.setProtocol(new StringSet());StringSet fsSupportedProtocols=new StringSet();for(StorageProtocol.File fileProtocol : StorageProtocol.File.values()){fsSupportedProtocols.add(fileProtocol.name());}fsSupportedProtocols.retainAll(pool.getProtocols());fsSupportedProtocols.retainAll(cos.getProtocols());filesystem.getProtocol().addAll(fsSupportedProtocols);filesystem.setLabel(null==deviceLabel?"""":deviceLabel);filesystem.setName(null==fsName?"""":fsName);filesystem.setTenant(new NamedURI(project.getTenantOrg().getURI(),filesystem.getLabel()));filesystem.setProject(new NamedURI(param.getProject(),filesystem.getLabel()));_logger.info(""Un Managed File System {} has exports? : {}"",unManagedFileSystem.getId(),unManagedFileSystem.getHasExports());StoragePort sPort=null;if(port!=null&&neighborhood!=null){if(StorageSystem.Type.isilon.toString().equals(system.getSystemType())){sPort=getIsilonStoragePort(port,nasUri,neighborhood.getId());}else {sPort=compareAndSelectPortURIForUMFS(system,port,neighborhood);}}if(sPort==null){_logger.warn(""Storage port of UMFS {} doesn't belong to a matching NetWork. So skipping ingestion"",unManagedFileSystemUri);continue;}_logger.info(""Storage Port Found {}"",sPort);filesystem.setPortName(sPort.getPortName());filesystem.setStoragePort(sPort.getId());if(unManagedFileSystem.getHasExports()){filesystem.setFsExports(PropertySetterUtil.convertUnManagedExportMapToManaged(unManagedFileSystem.getFsUnManagedExportMap(),sPort,dataMover));_logger.info(""Export map for {} = {}"",fsName,filesystem.getFsExports());List<UnManagedFileExportRule> exports=queryDBFSExports(unManagedFileSystem);_logger.info(""Number of Exports Found : {} for UnManaged Fs path : {}"",exports.size(),unManagedFileSystem.getMountPath());if(exports!=null&&!exports.isEmpty()){for(UnManagedFileExportRule rule : exports){rule.setFileSystemId(filesystem.getId());createRule(rule,fsExportRules);rule.setInactive(true);inActiveUnManagedExportRules.add(rule);}}}if(unManagedFileSystem.getHasShares()){filesystem.setSMBFileShares(PropertySetterUtil.convertUnManagedSMBMapToManaged(unManagedFileSystem.getUnManagedSmbShareMap(),sPort,dataMover));_logger.info(""Share map for {} = {}"",fsName,filesystem.getSMBFileShares());List<UnManagedCifsShareACL> cifsACLs=queryDBCifsShares(unManagedFileSystem);_logger.info(""Number of Cifs ACL Found : {} for UnManaged Fs path : {}"",cifsACLs.size(),unManagedFileSystem.getMountPath());if(cifsACLs!=null&&!cifsACLs.isEmpty()){for(UnManagedCifsShareACL umCifsAcl : cifsACLs){umCifsAcl.setFileSystemId(filesystem.getId());createACL(umCifsAcl,fsCifsShareAcls,filesystem);umCifsAcl.setInactive(true);inActiveUnManagedShareCifs.add(umCifsAcl);}}}if(unManagedFileSystem.getHasNFSAcl()){List<UnManagedNFSShareACL> nfsACLs=queryDBNfsShares(unManagedFileSystem);if(nfsACLs!=null&&!nfsACLs.isEmpty()){for(UnManagedNFSShareACL umNfsAcl : nfsACLs){umNfsAcl.setFileSystemId(filesystem.getId());if(umNfsAcl.getPermissions().isEmpty()){continue;}createNFSACL(umNfsAcl,fsNfsShareAcls,filesystem);umNfsAcl.setInactive(true);inActiveUnManagedShareNfs.add(umNfsAcl);}}}if(null!=unManagedFileSystem.getExtensions()&&null!=unManagedFileSystem.getExtensions().get(QUOTA)){if(null==filesystem.getExtensions()){filesystem.setExtensions(new StringMap());}filesystem.getExtensions().put(QUOTA,unManagedFileSystem.getExtensions().get(QUOTA));}filesystems.add(PropertySetterUtil.addFileSystemDetails(unManagedFileSystemInformation,filesystem));filesystemList.getFilesystems().add(toNamedRelatedResource(ResourceTypeEnum.FILE,filesystem.getId(),filesystem.getNativeGuid()));unManagedFileSystem.setInactive(true);unManagedFileSystems.add(unManagedFileSystem);unManagedFSURIToFSMap.put(unManagedFileSystemUri,filesystem);}int i=0;for(FileShare fs : filesystems){++i;_logger.info(""{} --> Saving FS to DB {}"",i,fs);_logger.info("" --> Fs  Storage Pool {} and Virtual Pool {}"",fs.getPool(),fs.getVirtualPool());}_dbClient.createObject(filesystems);for(URI unManagedFSURI : param.getUnManagedFileSystems()){FileShare fs=unManagedFSURIToFSMap.get(unManagedFSURI);if(fs!=null){_logger.debug(""ingesting quota directories for filesystem {}"",fs.getId());ingestFileQuotaDirectories(fs);}}i=0;for(FileExportRule rule : fsExportRules){++i;_logger.info(""{} --> Saving Export rule to DB {}"",i,rule);}_dbClient.createObject(fsExportRules);i=0;for(CifsShareACL acl : fsCifsShareAcls){++i;_logger.info(""{} --> Saving New Cifs ACL to DB {}"",i,acl);}if(fsCifsShareAcls!=null&&!fsCifsShareAcls.isEmpty()){_dbClient.createObject(fsCifsShareAcls);}i=0;for(UnManagedCifsShareACL acl : inActiveUnManagedShareCifs){++i;_logger.info(""{} Updating UnManagedACL DB as InActive TRUE {}"",acl);}_dbClient.updateObject(inActiveUnManagedShareCifs);i=0;for(UnManagedFileExportRule rule : inActiveUnManagedExportRules){++i;_logger.info(""{} Updating DB as InActive TRUE {}"",rule);}_dbClient.updateObject(inActiveUnManagedExportRules);_dbClient.updateObject(unManagedFileSystems);if(fsNfsShareAcls!=null&&!fsNfsShareAcls.isEmpty()){_logger.info(""Saving {} NFS ACLs to DB"",fsNfsShareAcls.size());_dbClient.createObject(fsNfsShareAcls);}if(inActiveUnManagedShareNfs!=null&&!inActiveUnManagedShareNfs.isEmpty()){_logger.info(""Saving {} UnManagedNFS ACLs to DB"",inActiveUnManagedShareNfs.size());_dbClient.updateObject(inActiveUnManagedShareNfs);}for(FileShare filesystem : filesystems){recordFileSystemOperation(_dbClient,OperationTypeEnum.INGEST_FILE_SYSTEM,Status.ready,filesystem.getId());}}catch(InternalException e){throw e;}catch(Exception e){_logger.error(""Unexpected exception:"",e);throw APIException.internalServerErrors.genericApisvcError(e.getMessage(),e);}return filesystemList;}"
3627	"@Override public void handleReceived(ClientConnection connection){TridentPlayer player=((PlayerConnection)connection).player();location.setWorld(player.world());Substance substance=player.heldItem().type();if(substance!=Substance.AIR){Vector vector=determineOffset();if(!substance.isBlock()){}if(location.y()+vector.y()>255||location.y()+vector.y()<0){return ;}Position position=location.relative(vector);Block block=new OwnedTridentBlock(player,position.block());short yaw=(short)(player.position().yaw()*10);short meta=player.heldItem().damageValue();Value<Byte> result=Value.of((byte)0);Value<Substance> substanceValue=Value.of(substance);boolean allow=MetaFactory.decode(block,substanceValue,new byte{writeFirst(yaw),writeSecond(yaw),direction,((byte)cursorPosition.x()),((byte)cursorPosition.y()),((byte)cursorPosition.z()),writeFirst(meta),writeSecond(meta)},result);if(allow){block.setSubstanceAndMeta(substanceValue.get(),result.get());}}}"
3628	"public int loop(){try{if(!Game.isLoggedIn()){return 500;}if(FailSafeThread.leaving()&&!MyPlayer.get().isInCombat()){if(MyPlayer.get().isInCombat()){MyPlayer.attack(MyPlayer.currentRoom().getNearestEnemy());}else {return 500;}}if(Walking.getEnergy()>random(60,75)&&!Walking.isRunEnabled()){Walking.setRun(true);}if(Combat.isAutoRetaliateEnabled()){Combat.setAutoRetaliate(false);}if(Explore.getBossRoom()!=null){if(Explore.getBossRoom().contains(MyPlayer.location())&&MyPlayer.currentRoom().equals(Explore.getBossRoom())&&Npcs.getNearest(GameConstants.INROOM_ENEMY_FILTER)!=null){status=((Boss)Explore.getBossRoom()).status();return ((Boss)Explore.getBossRoom()).kill();}}if(false){if(MyPlayer.currentRoom()!=null){for(Plugin boss : bosses){if(boss.isValid()){boss.startupMessage();status=boss.getStatus();return boss.loop();}}}}Camera.setPitch(true);if(MyPlayer.hp()<50){MyPlayer.eat();}if(MyPlayer.currentRoom()!=null&&MyPlayer.currentRoom().contains(MyPlayer.location())){if(MyPlayer.getComplexity()>4&&Explore.inDungeon()&&MyPlayer.currentRoom().getType()==Room.PUZZLE&&!((Puzzle)MyPlayer.currentRoom()).isSolved()){if(MyPlayer.currentRoom().hasEnemies()){MyPlayer.attack(MyPlayer.currentRoom().getNearestEnemy());}Puzzle room=((Puzzle)MyPlayer.currentRoom());status=room.status();return room.solve();}}Npc smuggler=Npcs.getNearest(GameConstants.SMUGGLER);if(smuggler!=null){if(Explore.getRooms().indexOf(MyPlayer.currentRoom())==1&&MyPlayer.currentRoom().contains(smuggler)){clearAll();}}for(Strategy strategy : strategies){if(strategy.isValid()){status=strategy.getStatus();if(status==null||status.length()<1){status=""Switching strategy"";}return strategy.execute();}}log(""No strats valid"");}catch(Exception e){e.printStackTrace();}return random(400,600);}"
3629	"public ArrayList<String> testNeighbours(int selectedShape,int radiusOfShape,ImagePlus imgToShow,JProgressBar progressBar,boolean selectionMode,int modeNumGraphlets,ImageOverlay overlay){for(int indexEpiCell=0;indexEpiCell<this.cells.size();indexEpiCell++){progressBar.setValue(indexEpiCell*40/this.cells.size());createNeighbourhood(indexEpiCell,selectedShape,radiusOfShape);}progressBar.setValue(40);float percentageOfSquares=0;float percentageOfPentagons=0;this.percentageOfHexagons=0;float percentageOfHeptagons=0;float percentageOfOctogons=0;int validCells=0;int[][] actualPixels;ColorProcessor colorImgToShow=this.raw_img.getChannelProcessor().convertToColorProcessor();Color colorOfCell;int color;for(int i=0;i<this.cells.size();i++){colorOfCell=Color.WHITE;if(this.cells.get(i).isValid_cell()&&(!selectionMode||this.cells.get(i).isSelected())){switch (this.cells.get(i).getNeighbours().size()){case 4 :percentageOfSquares++;colorOfCell=new Color((int)255,(int)(0.4*255),(int)(0*255));break;case 5 :percentageOfPentagons++;colorOfCell=Color.green;break;case 6 :percentageOfHexagons++;colorOfCell=new Color(0,(int)(0.4*255),(int)(1*255));break;case 7 :percentageOfHeptagons++;colorOfCell=new Color((int)(0.6*255),0*255,1*255);break;case 8 :percentageOfOctogons++;colorOfCell=new Color(0,(int)(0.4*255),(int)(0.6*255));break;}validCells++;}else {if(selectionMode){if(modeNumGraphlets<2){this.cells.get(i).setWithinTheRange(selectedCellWithinAGivenLength(i,5));}else {this.cells.get(i).setWithinTheRange(selectedCellWithinAGivenLength(i,4));}if(this.cells.get(i).isWithinTheRange()){colorOfCell=Color.red;}else {colorOfCell=Color.black;}switch (this.cells.get(i).getNeighbours().size()){case 4 :percentageOfSquares++;break;case 5 :percentageOfPentagons++;break;case 6 :percentageOfHexagons++;break;case 7 :percentageOfHeptagons++;break;case 8 :percentageOfOctogons++;break;}validCells++;}else {colorOfCell=Color.BLACK;}}actualPixels=this.cells.get(i).getPixels();color=(int)((colorOfCell.getRed()&0xff)<<16|(colorOfCell.getGreen()&0xff)<<8|(colorOfCell.getBlue()&0xff));for(int numPixel=0;numPixel<actualPixels.length;numPixel++){colorImgToShow.set(actualPixels[numPixel][0],actualPixels[numPixel][1],color);}}progressBar.setValue(60);percentageOfSquares/=validCells;percentageOfPentagons/=validCells;this.percentageOfHexagons/=validCells;percentageOfHeptagons/=validCells;percentageOfOctogons/=validCells;float percentageOfHexagonsToShow=this.percentageOfHexagons;this.percentageOfHexagons=this.percentageOfHexagons*100;ArrayList<String> percentajesList=new ArrayList<String>();if(imgToShow!=null){overlay=new ImageOverlay(colorImgToShow);((OverlayedImageCanvas)imgToShow.getCanvas()).clearOverlay();((OverlayedImageCanvas)imgToShow.getCanvas()).addOverlay(overlay);NumberFormat defaultFormat=NumberFormat.getPercentInstance();defaultFormat.setMaximumFractionDigits(2);percentajesList.add(defaultFormat.format(percentageOfSquares));percentajesList.add(defaultFormat.format(percentageOfPentagons));percentajesList.add(defaultFormat.format(percentageOfHexagonsToShow));percentajesList.add(defaultFormat.format(percentageOfHeptagons));percentajesList.add(defaultFormat.format(percentageOfOctogons));return percentajesList;}return null;}"
3630	"@Override public void update(double dt){this.elapsedTime+=dt;int playerX=(int)this.level.player.getPosX();int playerY=(int)this.level.player.getPosY();if(playerX>=this.posX-200&&playerX<=this.posX+200&&playerY>=this.posY&&playerY<=this.posY+128){System.out.println(""player detected !"");this.isShooting=true;}else {this.isShooting=false;}if(!this.isMoving&&this.timeWalk==0&&!this.isShooting){this.isMoving=rnd.nextBoolean();this.timeWalk=rnd.nextInt(150-100)+100;}if(this.isMoving&&!this.isShooting){if(this.elapsedTime<timeWalk){if(this.direction==LEFT){this.velX=-(Defines.SPEED/2);}else {if(this.direction==RIGHT){this.velX=(Defines.SPEED/2);}else {this.velX=0;}}move();this.timeAnim+=dt;if(this.timeAnim>=10){this.timeAnim=0;this.offset++;if(this.offset>2){this.offset=0;}this.sprite=this.spritesheet.getSubimage(this.offset*84,0,84,128);}}}else {this.offset=0;this.sprite=this.spritesheet.getSubimage(this.offset*84,0,84,128);}if(this.elapsedTime>=timeWalk){this.isMoving=false;this.elapsedTime=0;this.timeWalk=0;}}"
3631	"@Override public void visitToken(DetailAST ast){DetailAST startToken;DetailAST brace;switch (ast.getType()){case TokenTypes.CTOR_DEF :case TokenTypes.METHOD_DEF :startToken=skipAnnotationOnlyLines(ast);brace=ast.findFirstToken(TokenTypes.SLIST);break;case TokenTypes.INTERFACE_DEF :case TokenTypes.CLASS_DEF :case TokenTypes.ANNOTATION_DEF :case TokenTypes.ENUM_DEF :case TokenTypes.ENUM_CONSTANT_DEF :startToken=skipAnnotationOnlyLines(ast); final DetailAST objBlock=ast.findFirstToken(TokenTypes.OBJBLOCK);brace=objBlock==null?null:objBlock.getFirstChild();break;case TokenTypes.LITERAL_WHILE :case TokenTypes.LITERAL_CATCH :case TokenTypes.LITERAL_SYNCHRONIZED :case TokenTypes.LITERAL_FOR :case TokenTypes.LITERAL_TRY :case TokenTypes.LITERAL_FINALLY :case TokenTypes.LITERAL_DO :case TokenTypes.LITERAL_IF :case TokenTypes.STATIC_INIT :startToken=ast;brace=ast.findFirstToken(TokenTypes.SLIST);break;case TokenTypes.LITERAL_ELSE :startToken=ast; final DetailAST candidate=ast.getFirstChild();brace=candidate.getType()==TokenTypes.SLIST?candidate:null;break;default :startToken=ast;brace=ast.findFirstToken(TokenTypes.LCURLY);break;}if(brace!=null){verifyBrace(brace,startToken);}}"
3632	"@Override public Query withinQuery(String field,Object from,Object to,boolean includeLower,boolean includeUpper){InetAddress lower=(InetAddress)from;InetAddress upper=(InetAddress)to;return InetAddressRange.newWithinQuery(field,includeLower?lower:nextUp(lower),includeUpper?upper:nextDown(upper));}"
3633	"private void createAlert(RemoteMessage remoteMessage){Log.d(TAG,""got notification"");Map<String,String> data=remoteMessage.getData();SharedPreferences sharedPref=getSharedPreferences(""userInfo"",Context.MODE_PRIVATE);SharedPreferences.Editor editor=sharedPref.edit();String eventtitle=data.get(""eventtitle"");String eventdetails=data.get(""eventdetails"");String eventlat=data.get(""latitude"");String eventlng=data.get(""longitude"");String respondee=data.get(""patient"");String id=data.get(""caseid"");Location phonelocation=new Location(""phone"");phonelocation.setLatitude(Double.parseDouble(sharedPref.getString(""userlat"","""")));phonelocation.setLongitude(Double.parseDouble(sharedPref.getString(""userlng"","""")));String notification=sharedPref.getString(""notification"","""");double distance;Boolean notify=(notification.equals("""")||notification.equals(""true""));double RAD=8.998719E-6;distance=Math.sqrt(Math.pow(Double.parseDouble(sharedPref.getString(""userlat"",""""))-Double.parseDouble(eventlat),2)+Math.pow(Double.parseDouble(sharedPref.getString(""userlng"",""""))-Double.parseDouble(eventlng),2))/RAD;Log.d(""Distance"",distance+"""");Log.d(""Userlat"",phonelocation.getLatitude()+"""");Log.d(""Userlng"",phonelocation.getLongitude()+"""");Log.d(""eventlat"",eventlat);Log.d(""eventlng"",eventlng);if(distance<800&&notify){editor.putString(""event"",eventtitle);editor.putString(""eventdetails"",eventdetails);editor.putString(""eventlat"",eventlat);editor.putString(""eventlng"",eventlng);editor.putLong(""eventtime"",System.currentTimeMillis());editor.putString(""respondee"",respondee);editor.putString(""id"",id);Set<String> events=sharedPref.getStringSet(""events"",new LinkedHashSet<String>());DateFormat dateFormat=new SimpleDateFormat(""HH:mm:ss dd/MM/yyyy"");Date date=new Date();events.add(dateFormat.format(date)+"" : ""+eventdetails);editor.putStringSet(""events"",events);editor.apply();NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_notificationlogo).setContentTitle(eventtitle).setContentText(eventdetails).setWhen(System.currentTimeMillis()).setAutoCancel(true);Intent intent=new Intent(this,LoginActivity.class);PendingIntent pending=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);mBuilder.setContentIntent(pending);Uri alarmSound=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);mBuilder.setSound(alarmSound);NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);nm.notify(59283,mBuilder.build());}}"
3634	"@Override public void afterTextChanged(Editable s){if(getSearchText()==s){filterString=s.toString();if(adapter!=null){adapter.applyFilter(filterString);}}if(!isUsingActionBar()){lastQueryString=filterString;}}"
3635	"protected BasicOutput setType(OutputType type,boolean writeCover,boolean writeInfo){this.type=type;this.writeCover=writeCover;this.writeInfo=writeInfo;return this;}"
3636	"@Override protected Object call() throws Exception{while(true){if(!cancelled){pcap.loop(1,jpacketHandler,"""");}}}"
3637	"@Override public OutputStream getOutputStream(String relativePath,boolean mustExist){return getOutputStream(relativePath,null,null);}"
3638	"public static ItemStack copyStack(ItemStack itemstack){if(itemstack==null){return null;}return copyStack(itemstack,itemstack.getCount());}"
3639	"@Override public void mousePressed(MouseEvent e){int x=e.getX();int y=e.getY();System.out.println(""x & y = ""+x+"" & ""+y);if(x<=WIDTH&&y<=HEIGHT){if(e.getButton()==MouseEvent.BUTTON3){System.out.println(""LEFT"");initalPress=0;}else {if(e.getButton()==MouseEvent.BUTTON1){if(GameBoard.Board[y/80][x/80].getCurrentPiece()!=null||initalPress==1){if(initalPress==0){row=y/80;col=x/80;initalPress++;System.out.println(""IM SELECTED ""+GameBoard.Board[row][col].getCurrentPiece());if(GameBoard.gameState==2){System.out.println(""THIS IS CHECKED BOYS"");}else {System.out.println(""normality"");GameBoard.Board[row][col].getCurrentPiece().getMoveLocations();}}else {System.out.println(""R&C:""+row+"" ""+col);row1=y/80;col1=x/80;if(row==row1&&col==col1){initalPress=0;System.out.println(""DO BETTER U CUC"");}else {GameBoard.Board[row][col].getCurrentPiece().move(row1,col1);if(GameBoard.Board[row][col].getCurrentPiece()==null){initalPress=0;System.out.println(""MOVE ME DADDY"");}}}}}}}repaint();}"
3640	"private void register(List<RegisteredListener<? extends Event>> handlers){synchronized(this.lock){boolean changed=false;for(RegisteredListener<?> handler : handlers){if(this.handlersByEvent.put(handler.getEventClass(),handler)){changed=true;this.checker.registerListenerFor(handler.getEventClass());}}if(changed){this.handlersCache.invalidateAll();}}}"
3641	"@SubscribeEvent public void onEntityLivingDrops(LivingDropsEvent e){Random rand=e.entity.worldObj.rand;if(e.entityLiving instanceof EntitySpider){if(!BBConfig.spidersDropString){Iterator iterator=e.drops.iterator();while(iterator.hasNext()){EntityItem entityItem=(EntityItem)iterator.next();Item item=entityItem.getEntityItem().getItem();if(item==Items.string){iterator.remove();}}}int dropCount=rand.nextInt(3+e.lootingLevel)+2;for(int i=0;i<dropCount;++i){e.entityLiving.dropItem(RegisterItems.silk,1);}}if(BBConfig.moreBones){if(!BBConfig.moreBonesPeacefulOnly||e.entity.worldObj.getDifficulty()==EnumDifficulty.PEACEFUL){int maxBones=0;int maxShards=0;if(e.entityLiving instanceof EntityCow){maxBones=4;}if(e.entityLiving instanceof EntitySheep||e.entityLiving instanceof EntityPig){maxBones=3;}if(e.entityLiving instanceof EntityChicken||e.entityLiving instanceof EntityOcelot){maxShards=3;}if(e.entityLiving instanceof EntityZombie){maxBones=2;maxShards=3;}if(maxBones>0&&e.recentlyHit&&!e.entityLiving.isChild()){int dropCount=rand.nextInt(maxBones+e.lootingLevel);for(int i=0;i<dropCount;++i){e.entityLiving.dropItem(Items.bone,1);}}if(maxShards>0&&e.recentlyHit&&!e.entityLiving.isChild()){int dropCount=rand.nextInt(maxShards+e.lootingLevel);for(int i=0;i<dropCount;++i){e.entityLiving.dropItem(RegisterItems.boneShard,1);}}}if(e.entityLiving instanceof EntitySkeleton){int dropCount=rand.nextInt(3+e.lootingLevel);e.entityLiving.dropItem(Items.bone,1);e.entityLiving.dropItem(RegisterItems.boneShard,dropCount);}}if(BBConfig.flamingAnimalsDropCharredMeat){if(e.entityLiving instanceof EntityCow||e.entityLiving instanceof EntityPig||e.entityLiving instanceof EntityChicken){int charredDrops=0;Iterator iterator=e.drops.iterator();while(iterator.hasNext()){EntityItem entityItem=(EntityItem)iterator.next();Item item=entityItem.getEntityItem().getItem();if(item==Items.cooked_beef||item==Items.cooked_porkchop||item==Items.cooked_chicken){iterator.remove();charredDrops+=entityItem.getEntityItem().stackSize;}}e.entityLiving.dropItem(RegisterItems.charredMeat,charredDrops);}}}"
3642	"@RequestMapping(value=""/emailRegis/*"") public ModelAndView emailRegistration(HttpServletRequest request){if(userService.getAuthentication()!=null){return new ModelAndView(""redirect:/user/home"");}ModelAndView modelAndView=new ModelAndView(""/login"");URLMassage urlMassage=urlMassageService.getByUrl(urlMassageService.getURL(request));if(urlMassage!=null){User user=urlMassage.getUser();user.setStatus(true);userService.update(user);urlMassageService.remove(urlMassage);modelAndView.addObject(""error"",""You have confirmed the registration.""+"" Enter the username and password to log on to the website"");}else {modelAndView.addObject(""error"",""Link not found"");}return modelAndView;}"
3643	"@Override public boolean apply(T t,Game game){return !predicate.apply(t,game);}"
3644	"@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){int itemType=listView.getPackedPositionType(id);long packedPosition=listView.getExpandableListPosition(position);if(itemType==ExpandableListView.PACKED_POSITION_TYPE_CHILD){memberPositon=listView.getPackedPositionChild(packedPosition);groupPosition=listView.getPackedPositionGroup(packedPosition);if(!groups.get(groupPosition).getName().equals(""Znajomi"")){View v=listView.getChildAt(position);if(v==null){v=listView.getChildAt(listView.getLastVisiblePosition()-6);}PopupMenu menu=new PopupMenu(context,v);menu.getMenuInflater().inflate(R.menu.group_friend_popup_menu,menu.getMenu());menu.setOnMenuItemClickListener(this);menu.show();return true;}return false;}else {if(itemType==ExpandableListView.PACKED_POSITION_TYPE_GROUP){groupPosition=listView.getPackedPositionGroup(packedPosition);View v=listView.getChildAt(position);if(v==null){v=listView.getChildAt(listView.getLastVisiblePosition()-3);}PopupMenu menu=new PopupMenu(context,v);menu.getMenuInflater().inflate(R.menu.group_popup_menu,menu.getMenu());menu.setOnMenuItemClickListener(this);MenuItem item=menu.getMenu().findItem(R.id.visible);if(!groups.get(groupPosition).getVisible()){item.setTitle(R.string.group_menu_visible_on);}menu.show();return true;}else {return false;}}}"
3645	"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){mAdapter.swapCursor(data);if(data.getCount()!=0){mProgressBar.setVisibility(View.INVISIBLE);mRecyclerView.setVisibility(View.VISIBLE);}}"
3646	"public boolean getDateData(String account,String date){SQLiteDatabase db=this.getWritableDatabase();Cursor res=db.rawQuery(""select * from ""+TABLE_NAME+"" where ""+COL_2+"" = '""+account+""' and ""+COL_10+"" = '""+date+""'"",null);return res.getCount()>0;}"
3647	"@Override public void processPacket(){ChatColor[] COLOR_LIST={ChatColor.AQUA,ChatColor.BLACK,ChatColor.BLUE,ChatColor.DARK_AQUA,ChatColor.DARK_BLUE,ChatColor.DARK_GRAY,ChatColor.DARK_GREEN,ChatColor.DARK_PURPLE,ChatColor.DARK_RED,ChatColor.GOLD,ChatColor.GRAY,ChatColor.GREEN,ChatColor.LIGHT_PURPLE,ChatColor.RED,ChatColor.YELLOW};boolean firstLine=true;for(String message : messages){for(UUID uuid : players){OfflinePlayer offlinePlayer=Bukkit.getOfflinePlayer(uuid);if(offlinePlayer.isOnline()){Player player=(Player)offlinePlayer;String tag="""";if(firstLine){tag=ZavMessage.getMainConfig().getConfig().getString(""chatformat"");tag=ChatColor.translateAlternateColorCodes('&',tag);tag=tag.replace(""%msg"",message);firstLine=false;}else {tag=message;}Random random=new Random();tag=tag.replace(""%r"",COLOR_LIST[random.nextInt(COLOR_LIST.length)].toString());PluginPM.sendMessage(PluginPM.MessageType.NO_TAG,player,tag);}}if(ZavMessage.getMainConfig().getConfig().getBoolean(""messagesinconsole"")){PluginPM.sendMessage(Level.INFO,message);}}players.clear();}"
3648	"public void addMoreMines(int amount){int num=amount;int range=100;if(mLevel==Level.Hard){range=25;}for(int i=0;i<mBoard.length;i++){if(amount==0){i=mBoard.length;}else {if(mBoard[i].getState()==Cell.CellState.close&&mBoard[i].getBody()==Cell.CellBody.empty){mBoard[i].setBody(Cell.CellBody.mine);mBoard[i].setValue(-1);amount--;}}}int flags=Integer.parseInt(mFlags.getText().toString());int mines=Integer.parseInt(mMines.getText().toString());mines=mines+num-amount;flags=flags+num-amount;mFlagsCounter=flags;mMines.setText(""""+mines);mFlags.setText(""""+flags);initValuesInCells();for(int i=0;i<mBoard.length;i++){if(mBoard[i].getState()==Cell.CellState.opened&&mBoard[i].getValue()!=0){addNumberValueToCell(i,mBoard[i].getValue());}}if(mGridview!=null){((BaseAdapter)mGridview.getAdapter()).notifyDataSetChanged();}}"
3649	"public void loadFishShop(){if(hasEconomy()&&getConfig().getBoolean(""fish-shop.enable"")){manager.registerEvents(new SignListener(this),this);manager.registerEvents(fishShopGUI,this);}}"
3650	"public void update(){if(!getWorld().isRemote){tryConsumeMod();if(getTicksRemaining()>0){if(currentEnergyStorage<ModConfig.META_MAX_ENERGY_STORED){currentRemainingTicks--;currentEnergyStorage=(Math.min(currentEnergyStorage+ModConfig.META_FE_PER_TICK,ModConfig.META_MAX_ENERGY_STORED));}}}if(wasActive!=isActive()){LogUtility.info(""Switching block state to %b"",isActive());getWorld().markBlockRangeForRenderUpdate(pos,pos);WorldTools.notifyNeighborsOfStateChange(getWorld(),pos,ModBlocks.blockMETA);getWorld().markAndNotifyBlock(pos,getWorld().getChunkFromBlockCoords(pos),getWorld().getBlockState(pos),getWorld().getBlockState(pos).withProperty(BlockMETA.PROPERTY_ACTIVE,isActive()),3);}wasActive=isActive();}"
3651	"public static String RPAD(String first_string,int length,String second_string){if(first_string==null||length<1){return null;}int OriginLength=first_string.length();if(OriginLength>=length){return first_string;}for(int i=OriginLength;i<length;i++){if(second_string==null){first_string=first_string+"" "";}else {first_string=first_string+second_string;if(first_string.length()>length){first_string=first_string.substring(0,length);}}}return first_string;}"
3652	"@Override public boolean isDirty(){return keymapsSection.isDirty()||editorPropertiesSection.isDirty();}"
3653	"private void readCommandTask(){ final LineReader lineReader=TerminalConsoleAppender.getReader();while(this.active){String command=lineReader.readLine(""> "");if(command!=null){command=command.trim();if(!command.isEmpty()){ final String runCommand=command.startsWith(""/"")?command.substring(1):command;this.scheduler.createTaskBuilder().execute(() -> this.commandManager.process(LanternConsoleSource.INSTANCE,runCommand)).submit(this.pluginContainer);}}}}"
3654	"@Override public boolean handleMessage(Message msg){switch (msg.what){case HANDLE_START :currentQueried=0;mUiHandler.sendEmptyMessage(HANDLE_SEND);isStatusChecking=true;invalidateOptionsMenu();return true;case HANDLE_SEND :Button deviceOpenButton=(Button)mMainLayout.getChildAt(currentQueried);Device.CommonSettings details=(Device.CommonSettings)deviceOpenButton.getTag(R.integer.device_details);deviceOpenButton.setText(""? ""+deviceOpenButton.getText()+"" ?"");sendStatusQuerySms(details);mUiHandler.sendEmptyMessageDelayed(HANDLE_TIMEOUT,SMS_ROUNDTRIP_TIMEOUT);return true;case HANDLE_ACK :String number=(String)msg.obj;if(number.equals(mDeviceIds[currentQueried])){mUiHandler.removeMessages(HANDLE_TIMEOUT);continueQueryIfNeeded();return true;}case HANDLE_TIMEOUT :Toast.makeText(this,R.string.sms_wait_timeout,Toast.LENGTH_LONG).show();continueQueryIfNeeded();return true;case HANDLE_TERMINATE :restoreOldName();case HANDLE_FINISH :isStatusChecking=false;invalidateOptionsMenu();return true;}return false;}"
3655	"private static Label get_onto_label(Node node){Iterable<Label> labels=node.getLabels();for(Label label : labels){if(label==GraphConvenience.Labels.ROOT){continue;}return label;}assert (false);return null;}"
3656	"public void bus(Event evt){this.listeners.rebuild();while(this.listeners.hasMore()){ final EventListener l=this.listeners.next();if(l.priority==5){if(!evt.isCanceled()){l.call(evt);}else {Main.out.debug(""System-level ""+l+"" cannot act upon ""+evt);}}else {l.call(evt);}}}"
3657	"@Override protected void onHandleIntent(Intent intent){Log.i(TAG,""Handling intent"");Bundle extras=intent.getExtras();GoogleCloudMessaging gcm=GoogleCloudMessaging.getInstance(getApplicationContext());String messageType=gcm.getMessageType(intent);if(extras!=null&&!extras.isEmpty()){if(GoogleCloudMessaging.MESSAGE_TYPE_MESSAGE.equals(messageType)){ final Message msg=new Message(extras);if(msg.isValid()){if(Countly.sharedInstance().isLoggingEnabled()){Log.i(TAG,""Got a message from Countly Messaging: ""+msg);}Intent broadcast=new Intent(CountlyMessaging.getBroadcastAction(getApplicationContext()));broadcast.putExtra(CountlyMessaging.BROADCAST_RECEIVER_ACTION_MESSAGE,msg);sendBroadcast(broadcast);if(!Countly.sharedInstance().isInitialized()){if(!CountlyMessaging.initCountly(getApplicationContext())){Log.e(TAG,""Cannot init Countly in background"");}}if(CountlyMessaging.isUIDisabled(this)){Log.i(TAG,""Won't do anything since Countly Messaging UI is disabled"");CountlyMessaging.completeWakefulIntent(intent);return ;}if(!msg.isSilent()){Intent proxy=new Intent(getApplicationContext(),ProxyActivity.class);proxy.putExtra(CountlyMessaging.EXTRA_MESSAGE,msg);notify(proxy);}}}}CountlyMessaging.completeWakefulIntent(intent);}"
3658	"@Override public boolean equals(Object other){return this==other||!(other==null||getClass()!=other.getClass())&&propertyDispatcher.equals(value,((Trivial)other).value);}"
3659	"@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);if(getArguments()==null||!getArguments().containsKey(VIDEO_URL_BUNDLE)||!getArguments().containsKey(TITLE_BUNDLE)){throw new InvalidParameterException(""Missing some required parameters"");}mVideoUrl=getArguments().getString(VIDEO_URL_BUNDLE);mTitle=getArguments().getString(TITLE_BUNDLE);}"
3660	"public static synchronized GroovyIndentationService get(IJavaProject project){if(lastIndenter!=null&&!project.equals(lastIndenter.project)){disposeLastImpl();}if(lastIndenter==null){lastIndenter=new GroovyIndentationService(project);}return lastIndenter;}"
3661	"@SuppressWarnings({""unchecked"",""rawtypes""}) public final Object parseObject(Map object,Object fieldName){ final JSONLexer lexer=this.lexer;int token=lexer.token;if(token==JSONToken.NULL){lexer.nextToken();return null;}if(token!=JSONToken.LBRACE&&token!=JSONToken.COMMA){throw new JSONException(""syntax error, expect {, actual ""+JSONToken.name(token)+"", ""+lexer.info());} final Map innerMap; final boolean isJSONObject;if(object instanceof JSONObject){JSONObject jsonObject=(JSONObject)object;innerMap=jsonObject.getInnerMap();isJSONObject=true;}else {isJSONObject=false;innerMap=null;} final boolean allowISO8601DateFormat=(lexer.features&Feature.AllowISO8601DateFormat.mask)!=0; final boolean disableCircularReferenceDetect=lexer.disableCircularReferenceDetect;ParseContext context=this.contex;try{boolean setContextFlag=false;for(;;){char ch=lexer.ch;if(ch!='""'&&ch!='}'){lexer.skipWhitespace();ch=lexer.ch;}while(ch==','){lexer.next();lexer.skipWhitespace();ch=lexer.ch;}boolean isObjectKey=false;Object key;if(ch=='""'){key=lexer.scanSymbol(symbolTable,'""');ch=lexer.ch;if(ch!=':'){lexer.skipWhitespace();ch=lexer.ch;if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.pos+"", name ""+key);}}}else {if(ch=='}'){{int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));}lexer.sp=0;lexer.nextToken(JSONToken.COMMA);return object;}else {if(ch=='\''){key=lexer.scanSymbol(symbolTable,'\'');if(lexer.ch!=':'){lexer.skipWhitespace();}ch=lexer.ch;if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.pos);}}else {if(ch==EOI){throw new JSONException(""syntax error, ""+lexer.info());}else {if(ch==','){throw new JSONException(""syntax error, ""+lexer.info());}else {if((ch>='0'&&ch<='9')||ch=='-'){lexer.sp=0;lexer.scanNumber();try{if(lexer.token==JSONToken.LITERAL_INT){key=lexer.integerValue();}else {key=lexer.decimalValue(true);}if(isJSONObject){key=key.toString();}}catch(NumberFormatException ex){throw new JSONException(""parse number key error, ""+lexer.info());}ch=lexer.ch;if(ch!=':'){throw new JSONException(""parse number key error, ""+lexer.info());}}else {if(ch=='{'||ch=='['){lexer.nextToken();key=parse();isObjectKey=true;if(isJSONObject){key=key.toString();}}else {key=lexer.scanSymbolUnQuoted(symbolTable);lexer.skipWhitespace();ch=lexer.ch;if(ch!=':'){throw new JSONException(""expect ':' at ""+lexer.bp+"", actual ""+ch);}if(isJSONObject){key=key.toString();}}}}}}}}if(!isObjectKey){{int index=++lexer.bp;ch=lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));}for(;;){if(ch<=' '&&(ch==' '||ch=='\n'||ch=='\r'||ch=='\t'||ch=='\f'||ch=='\b')){lexer.next();ch=lexer.ch;}else {break;}}}else {ch=lexer.ch;}lexer.sp=0;if(key==JSON.DEFAULT_TYPE_KEY&&!lexer.isEnabled(Feature.DisableSpecialKeyDetect)){String typeName=lexer.scanSymbol(symbolTable,'""');Class<?> clazz=TypeUtils.loadClass(typeName,this.config.defaultClassLoader);if(clazz==null){object.put(JSON.DEFAULT_TYPE_KEY,typeName);continue;}lexer.nextToken(JSONToken.COMMA);if(lexer.token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);try{Object instance=null;ObjectDeserializer deserializer=this.config.getDeserializer(clazz);if(deserializer instanceof JavaBeanDeserializer){instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);}if(instance==null){if(clazz==Cloneable.class){instance=new HashMap();}else {if(""java.util.Collections$EmptyMap"".equals(typeName)){instance=Collections.emptyMap();}else {instance=clazz.newInstance();}}}return instance;}catch(Exception e){throw new JSONException(""create instance error"",e);}}this.resolveStatus=TypeNameRedirect;if(this.contex!=null&&!(fieldName instanceof Integer)){this.popContext();}if(object.size()>0){Object newObj=TypeUtils.cast(object,clazz,this.config);this.parseObject(newObj);return newObj;}ObjectDeserializer deserializer=config.getDeserializer(clazz);return deserializer.deserialze(this,clazz,fieldName);}if(key==""$ref""&&!lexer.isEnabled(Feature.DisableSpecialKeyDetect)){lexer.nextToken(JSONToken.LITERAL_STRING);if(lexer.token==JSONToken.LITERAL_STRING){String ref=lexer.stringVal();lexer.nextToken(JSONToken.RBRACE);Object refValue=null;if(""@"".equals(ref)){if(this.contex!=null){ParseContext thisContext=this.contex;Object thisObj=thisContext.object;if(thisObj instanceof Object[]||thisObj instanceof Collection<?>){refValue=thisObj;}else {if(thisContext.parent!=null){refValue=thisContext.parent.object;}}}}else {if("".."".equals(ref)){if(context.object!=null){refValue=context.object;}else {addResolveTask(new ResolveTask(context,ref));resolveStatus=DefaultJSONParser.NeedToResolve;}}else {if(""$"".equals(ref)){ParseContext rootContext=context;while(rootContext.parent!=null){rootContext=rootContext.parent;}if(rootContext.object!=null){refValue=rootContext.object;}else {addResolveTask(new ResolveTask(rootContext,ref));resolveStatus=DefaultJSONParser.NeedToResolve;}}else {addResolveTask(new ResolveTask(context,ref));resolveStatus=DefaultJSONParser.NeedToResolve;}}}if(lexer.token!=JSONToken.RBRACE){throw new JSONException(""syntax error, ""+lexer.info());}lexer.nextToken(JSONToken.COMMA);return refValue;}else {throw new JSONException(""illegal ref, ""+JSONToken.name(lexer.token));}}if((!disableCircularReferenceDetect)&&!setContextFlag){ParseContext contextR=setContext(this.contex,object,fieldName);if(context==null){context=contextR;}setContextFlag=true;}Object value;if(ch=='""'){String strValue=lexer.scanStringValue('""');value=strValue;if(allowISO8601DateFormat){JSONLexer iso8601Lexer=new JSONLexer(strValue);if(iso8601Lexer.scanISO8601DateIfMatch(true)){value=iso8601Lexer.calendar.getTime();}iso8601Lexer.close();}if(innerMap!=null){innerMap.put(key,value);}else {object.put(key,value);}}else {if(ch>='0'&&ch<='9'||ch=='-'){value=lexer.scanNumberValue();object.put(key,value);}else {if(ch=='['){lexer.token=JSONToken.LBRACKET;{int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));}ArrayList list=new ArrayList(); final boolean parentIsArray=fieldName!=null&&fieldName.getClass()==Integer.class;if(!parentIsArray){this.setContext(context);}this.parseArray(list,key);value=new JSONArray(list);if(innerMap!=null){innerMap.put(key,value);}else {object.put(key,value);}token=lexer.token;if(token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);return object;}else {if(token==JSONToken.COMMA){continue;}else {throw new JSONException(""syntax error, ""+lexer.info());}}}else {if(ch=='{'){{int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));lexer.token=JSONToken.LBRACE;} final boolean parentIsArray=fieldName instanceof Integer;JSONObject input=(lexer.features&Feature.OrderedField.mask)!=0?new JSONObject(new LinkedHashMap<String,Object>()):new JSONObject();ParseContext ctxLocal=null;if((!disableCircularReferenceDetect)&&!parentIsArray){ctxLocal=setContext(context,input,key);}Object obj=null;boolean objParsed=false;if(fieldTypeResolver!=null){String resolveFieldName=key!=null?key.toString():null;Type fieldType=fieldTypeResolver.resolve(object,resolveFieldName);if(fieldType!=null){ObjectDeserializer fieldDeser=config.getDeserializer(fieldType);obj=fieldDeser.deserialze(this,fieldType,key);objParsed=true;}}if(!objParsed){obj=this.parseObject(input,key);}if(ctxLocal!=null&&input!=obj){ctxLocal.object=object;}if(resolveStatus==NeedToResolve){checkMapResolve(object,key.toString());}if(innerMap!=null){innerMap.put(key,obj);}else {object.put(key,obj);}if(parentIsArray){setContext(context,obj,key);}token=lexer.token;if(token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);if(!disableCircularReferenceDetect){this.contex=context;}return object;}else {if(token==JSONToken.COMMA){continue;}else {throw new JSONException(""syntax error, ""+lexer.info());}}}else {if(ch=='t'){if(lexer.text.startsWith(""true"",lexer.bp)){lexer.bp+=3;lexer.next();object.put(key,Boolean.TRUE);}}else {if(ch=='f'){if(lexer.text.startsWith(""false"",lexer.bp)){lexer.bp+=4;lexer.next();object.put(key,Boolean.FALSE);}}else {lexer.nextToken();value=parse();object.put(object.getClass()==JSONObject.class?key.toString():key,value);if(lexer.token==JSONToken.RBRACE){lexer.nextToken(JSONToken.COMMA);return object;}else {if(lexer.token==JSONToken.COMMA){continue;}else {throw new JSONException(""syntax error, ""+lexer.info());}}}}}}}}ch=lexer.ch;if(ch!=','&&ch!='}'){lexer.skipWhitespace();ch=lexer.ch;}if(ch==','){{int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));}continue;}else {if(ch=='}'){{int index=++lexer.bp;ch=lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));}lexer.sp=0;if(ch==','){int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));lexer.token=JSONToken.COMMA;}else {if(ch=='}'){int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));lexer.token=JSONToken.RBRACE;}else {if(ch==']'){int index=++lexer.bp;lexer.ch=(index>=lexer.len?EOI:lexer.text.charAt(index));lexer.token=JSONToken.RBRACKET;}else {lexer.nextToken();}}}if(!disableCircularReferenceDetect){this.setContext(this.contex,object,fieldName);}return object;}else {throw new JSONException(""syntax error, ""+lexer.info());}}}}finally{if(!disableCircularReferenceDetect){this.contex=context;}}}"
3662	"protected void moveStackToInventory(int sourceIndex){ItemStack stackToMove=null;if(sourceIndex==-1){if(Util.client.thePlayer.inventory.getItemStack()!=null){stackToMove=Util.client.thePlayer.inventory.getItemStack();}}else {stackToMove=getItemStack(sourceIndex);if(Util.client.thePlayer.inventory.getItemStack()!=null){moveStackToInventory(-1);}}if(stackToMove==null){Logger.debug(""moveStackToInvetory(i)"",""Stack at sourceIndex not found."");return ;}int destIndex=calcInventoryDestination(stackToMove);if(sourceIndex!=-1){leftClick(sourceIndex);}if(destIndex==-1){leftClick(-999);Logger.info(""moveStackToInventory(i)"",""Dropped item from index ""+sourceIndex+""."");}else {leftClick(destIndex);Logger.info(""moveStackToInventory(i)"",""Moved item from index ""+sourceIndex+"" to ""+destIndex+""."");}}"
3663	"private static boolean readOptions(CommandLine cmd){if(cmd.hasOption(""h"")){printHelp();return true;}inputPath=null;if(cmd.hasOption(""f"")&&cmd.hasOption(""d"")){printError(""You can set either -f or -d options, not both."");return false;}if(cmd.hasOption(""f"")){inputPath=new File(cmd.getOptionValue(""f""));if(!inputPath.exists()||!inputPath.isFile()){printError(""Invalid path: ""+inputPath.getAbsolutePath());return false;}}else {if(cmd.hasOption(""d"")){inputPath=new File(cmd.getOptionValue(""d""));if(!inputPath.exists()||!inputPath.isDirectory()){printError(""Invalid path: ""+inputPath.getAbsolutePath());return false;}}}if(inputPath==null){printError(""No input file or directory detected."");return false;}if(cmd.hasOption(""o"")){outputPath=new File(cmd.getOptionValue(""o""));if(!outputPath.exists()&&!outputPath.mkdir()){printError(""Cannot create output directory."");return false;}}else {outputPath=new File(System.getProperty(""user.dir""));}if(cmd.hasOption(""c"")&&cmd.hasOption(""cd"")){printError(""You should specify only one pipeline!"");return false;}else {if(!cmd.hasOption(""c"")&&!cmd.hasOption(""cd"")){printError(""You should specify a pipeline!"");return false;}else {if(cmd.hasOption(""c"")){configPath=new File(cmd.getOptionValue(""c""));if(!configPath.exists()||!configPath.isFile()){printError(""Invalid path: ""+configPath.getAbsolutePath());return false;}}else {if(cmd.hasOption(""cd"")){defaultConfig=cmd.getOptionValue(""cd"");}}}}if(cmd.hasOption(""ps"")){printSentences=true;}if(cmd.hasOption(""pg"")){printGrams=true;}if(!printSentences&&!printGrams){printError(""You should select something to print."");return false;}if(cmd.hasOption(""v"")){verbose=true;}if(cmd.hasOption(""l"")){language=new Locale(cmd.getOptionValue(""l""));}return true;}"
3664	"private void cleanup(){for(HousePart p : parts){if(p instanceof Roof){ final Roof r=(Roof)p; final HousePart c=r.getContainer();if(c!=null&&!c.getChildren().contains(r)){c.getChildren().add(r);}}} final ArrayList<HousePart> toBeRemoved=new ArrayList<HousePart>();for(HousePart p : parts){if(!p.isValid()){toBeRemoved.add(p);}else {if(p.getContainer()==null){if(p instanceof Wall||p instanceof Roof||p instanceof Window||p instanceof Door||p instanceof SolarPanel||p instanceof Rack||p instanceof ParabolicTrough||p instanceof ParabolicDish||p instanceof FresnelReflector||p instanceof Mirror||p instanceof Sensor||p instanceof Floor){toBeRemoved.add(p);}}else {if(!parts.contains(p.getContainer())){toBeRemoved.add(p);}}}}for(HousePart p : toBeRemoved){remove(p,false);}toBeRemoved.clear();for(HousePart p : parts){if(p instanceof Wall){if(((Wall)p).isAtSamePlaceAsAnotherPart()){toBeRemoved.add(p);}}}for(HousePart p : toBeRemoved){remove(p,false);}toBeRemoved.clear();for(HousePart p : parts){for(HousePart child : p.getChildren()){if(child.getContainer()!=p&&!toBeRemoved.contains(child)){toBeRemoved.add(child);}}}for(HousePart p : toBeRemoved){remove(p,false);}for(HousePart p : parts){for(HousePart r : toBeRemoved){p.getChildren().remove(r);}}toBeRemoved.clear();for(HousePart p : parts){for(HousePart child : p.getChildren()){if(!parts.contains(child)&&!toBeRemoved.contains(child)){toBeRemoved.add(child);}}}for(HousePart p : toBeRemoved){remove(p,false);}for(HousePart p : parts){if(!p.isDrawCompleted()){p.complete();}}}"
3665	"public static void bindFieldValueToPreparedStatement(Field field,Object obj,int index,SQLiteStatement statement){try{if(field.getType().equals(String.class)){Object val=field.get(obj);if(val==null){statement.bindNull(index);}else {statement.bindString(index,(String)val);}return ;}else {if(field.getType().equals(long.class)||field.getType().equals(int.class)||field.getType().equals(short.class)){statement.bindLong(index,field.getLong(obj));return ;}else {if(field.getType().equals(double.class)||field.getType().equals(float.class)){statement.bindDouble(index,field.getDouble(obj));return ;}else {if(field.getType().equals(boolean.class)){statement.bindLong(index,field.getBoolean(obj)?1:0);}}}}return ;}catch(Exception e){}statement.bindNull(index);return ;}"
3666	"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){Logger.v(TAG,""onProgressChanged fromUser=""+fromUser+"", progress=""+progress);if(mViewHolder.mPlayer==null||!fromUser){return ;}long duration=mViewHolder.mPlayer.getDuration();long newPosition=duration*progress/PROGRESS_MAX;mViewHolder.mPlayer.seekTo((int)newPosition);updateProgressBar(progress);}"
3667	"TreeNode parseFactor(){TreeNode x;if(eat('(')){x=parseComma();eat(')');return x;}if(eat('+')){return new UnaryTreeNode(Operator.PLUS,parseFactor());}if(eat('-')){return new UnaryTreeNode(Operator.MINUS,parseFactor());}if(eat('~')){return new UnaryTreeNode(Operator.INVERT,parseFactor());}if(eat('!')){return new UnaryTreeNode(Operator.NOT,parseFactor());}long num;int startPos=this.pos;if(ch>='0'&&ch<='9'){boolean hex=false;while((ch>='0'&&ch<='9')||ch=='x'||(ch>='a'&&ch<='f')||(ch>='A'&&ch<='F')){nextChar();if(ch=='x'){startPos=this.pos+1;hex=true;}}if(hex){num=Long.parseLong(str.substring(startPos,this.pos),16);}else {num=Long.parseLong(str.substring(startPos,this.pos));}x=new ConstantTreeNode(num);}else {if((ch>='A'&&ch<='Z')||(ch>='a'&&ch<='z')){while((ch>='A'&&ch<='Z')||(ch>='a'&&ch<='z')||(ch>='0'&&ch<='9')||ch=='_'){nextChar();}String var=str.substring(startPos,this.pos);if(constants.containsKey(var)){x=new ConstantTreeNode(constants.get(var));}else {x=new VariableTreeNode(var);}}else {throw new RuntimeException(""Unexpected: ""+(char)ch+"" at: ""+pos);}}return x;}"
3668	"@Override public boolean load(){return buffer.size()>=count;}"
3669	"public int takeInput(int lowerBound,int upperBound){if(savedInput!=0){input=savedInput;savedInput=0;saveKeyInput=false;return input;}input=-1;while(input<lowerBound||input>upperBound){latch=new CountDownLatch(1);try{latch.await();}catch(InterruptedException e){e.printStackTrace();}if(saveKeyInput){System.out.println(""saving key input"");switch (input){case KeyEvent.VK_UP :savedInput=1;break;case KeyEvent.VK_DOWN :savedInput=2;break;case KeyEvent.VK_LEFT :savedInput=3;break;case KeyEvent.VK_RIGHT :savedInput=4;break;}System.out.println(""key input saved as ""+savedInput);}if(lowerBound==0&&upperBound==0){return 0;}if(keys){switch (input){case KeyEvent.VK_UP :input=1;break;case KeyEvent.VK_DOWN :input=2;break;case KeyEvent.VK_LEFT :input=3;break;case KeyEvent.VK_RIGHT :input=4;break;}}if(!keys&&(input>=37&&input<=40)){input=1;}if(input>40){input-=48;}}textArea.setText("""");return input;}"
3670	"private static double correlateStrings(String s1,String s2,boolean truncate){int minLength=Math.min(s1.length(),s2.length());if(truncate&&minLength==1){return s1.charAt(0)==s2.charAt(0)?1.0:0.0;}else {if(s1.length()==1&&s2.length()==1){return s1.equals(s2)?1.0:0.0;}else {if(minLength==0){return s1.isEmpty()&&s2.isEmpty()?1.0:0;}}}if(truncate){if(s1.length()>minLength){s1=s1.substring(0,minLength);}if(s2.length()>minLength){s2=s2.substring(0,minLength);}}double[] n1=DuplicateCheck.numberizeString(s1);double[] n2=DuplicateCheck.numberizeString(s2);if(!truncate){if(n1.length<n2.length){n1=DuplicateCheck.stretchArray(n1,n2.length);}else {if(n2.length<n1.length){n2=DuplicateCheck.stretchArray(n2,n1.length);}}}return DuplicateCheck.corrCoef(n1,n2);}"
3671	"public static boolean matchIgfsCacheName(String cacheName){return (cacheName!=null&&cacheName.startsWith(IGFS_CACHE_PREFIX)&&(cacheName.endsWith(DATA_CACHE_SUFFIX)||cacheName.endsWith(META_CACHE_SUFFIX)));}"
3672	"public boolean controlRunTrain(int idx){if(log.isDebugEnabled()){log.debug(""controlRunTrain({})= {} runMode= {}, warrant= {}"",idx,CNTRL_CMDS[idx],MODES[_runMode],getDisplayName());}boolean ret=false;if(_engineer==null){switch (idx){case HALT :case RESUME :case RETRY :case RAMP_HALT :firePropertyChange(""SpeedChange"",null,idx);break;case STOP :case ABORT :if(_runMode==Warrant.MODE_LEARN){firePropertyChange(""abortLearn"",-MODE_LEARN,_idxCurrentOrder);}else {firePropertyChange(""controlChange"",MODE_RUN,ABORT);stopWarrant(true);}break;default :}return ret;}int runState=_engineer.getRunState();synchronized(_engineer){switch (idx){case RAMP_HALT :cancelRamp();_engineer.setHalt(true);ret=true;break;case RESUME :_engineer.setHalt(false);BlockOrder bo=getBlockOrderAt(_idxCurrentOrder);OBlock block=bo.getBlock();if((block.getState()&(OBlock.OCCUPIED|OBlock.UNDETECTED))!=0){if(runState==WAIT_FOR_CLEAR){int idxBlockOrder=_idxCurrentOrder;String speedType=_curSpeedType;while(!_speedUtil.secondGreaterThanFirst(speedType,_curSpeedType)&&idxBlockOrder<_orders.size()-1){speedType=getSpeedTypeForBlock(idxBlockOrder++);}if(idxBlockOrder>_idxCurrentOrder+1){_engineer.setWaitforClear(false,0);}}ret=setMovement(MID);}else {if(runState==WAIT_FOR_TRAIN){float speed=_engineer.getSpeedSetting();speed+=_speedUtil.getSpeedIncrement();_engineer.setSpeed(speed);}}break;case RETRY :bo=getBlockOrderAt(_idxCurrentOrder+1);if(bo!=null){block=bo.getBlock();if(block.allocate(this)==null&&(block.getState()&OBlock.OCCUPIED)!=0){_idxCurrentOrder++;if(block.equals(_stoppingBlock)&&clearStoppingBlock()){_waitForBlock=false;_engineer.rampSpeedTo(_curSpeedType,0);}bo.setPath(this);goingActive(block);ret=true;}}break;case ABORT :stopWarrant(true);ret=true;break;case HALT :case STOP :cancelRamp();_engineer.setStop(false);ret=true;break;case ESTOP :cancelRamp();_engineer.setStop(true);ret=true;break;default :}}if(ret){firePropertyChange(""controlChange"",runState,idx);}return ret;}"
3673	"public void repaint(Graphics g){g.setColor(Color.black);Font mundane=new Font(""Arial"",Font.BOLD,20);g.setFont(mundane);g.drawString(""SOLVE"",550,30);g.drawString(""MAIN"",550,400);g.drawString(""MENU"",547,420);g.setColor(Color.white);g.fillRect(0,0,450,450);int i=50;g.setColor(Color.black);g.fillRect(450,0,70,450);while(i<450){g.fillRect(i,0,1,450);g.fillRect(0,i,450,1);if(i==150||i==300){g.fillRect(i,0,3,450);g.fillRect(0,i,450,3);}i+=50;}i=15;int num=1;g.setColor(Color.white);while(i<450){g.fillRect(475,i,20,20);g.setColor(Color.black);Font font=new Font(""Saab"",Font.BOLD,16);g.setFont(font);g.drawString(num+"""",481,i+15);i+=50;num++;g.setColor(Color.white);}g.setColor(Color.black);for(int k=0;k<puzzle.length;k++){for(int j=0;j<puzzle[0].length;j++){if(orig[k][j].equals("""")){g.setColor(Color.cyan);}g.drawString(puzzle[k][j]+"""",50*j+25,50*k+25);g.setColor(Color.black);}}if(solveNow){String[][] temp=new String[9][9];if(SudokuSolver.canBeSolved(puzzle,0,0)){for(int a=0;a<9;a++){for(int b=0;b<9;b++){orig[a][b]=puzzle[a][b];}}g.setColor(Color.black);for(int k=0;k<puzzle.length;k++){for(int j=0;j<puzzle[0].length;j++){if(orig[k][j].equals("""")){g.setColor(Color.cyan);}g.drawString(puzzle[k][j]+"""",50*j+25,50*k+25);g.setColor(Color.black);}}}else {for(int a=0;a<9;a++){for(int b=0;b<9;b++){puzzle[a][b]=temp[a][b];}}for(int a=0;a<9;a++){for(int b=0;b<9;b++){temp[a][b]=puzzle[a][b];}}solveNow=false;}}}"
3674	"public boolean StopGameServer(){if(serverRunning){serverRunning=false;while(connectionThread.isAlive()){try{Thread.sleep(1);}catch(InterruptedException e){}}CleanUpConnections();server=null;return true;}return false;}"
3675	"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{List<Service> services=_client.locateAllServices(_name,_version,_tag,_endpointKey);if(services==null||services.size()==0){throw CoordinatorException.fatals.endPointUnavailable();}_log.info(""Invoking task {}: {} "",method,args);Throwable lastError=null;for(int index=0;index<services.size();index++){Service svc=services.get(index);URI endpoint=null;if(_endpointKey!=null){endpoint=svc.getEndpoint(_endpointKey);}else {endpoint=svc.getEndpoint();}Object rmiProxy=_proxyMap.get(endpoint);try{if(rmiProxy==null){rmiProxy=createRmiProxy(endpoint);}_log.info(""Sending RMI request to {} "",endpoint);return method.invoke(rmiProxy,args);}catch(RemoteLookupFailureException e){lastError=e;_log.warn(""Unable to lookup registry at {}"",endpoint);continue;}catch(InvocationTargetException e){Throwable target=e.getTargetException();if(target instanceof RemoteException||target instanceof RemoteLookupFailureException){lastError=target;_log.warn(""Remote exception trying to reach {}"",endpoint,target);continue;}throw target;}}throw CoordinatorException.fatals.unableToConnectToEndpoint(lastError);}"
3676	"public void shoot(Player shooter,Player target,double v,double angle,Wind wind){ParabolicMotion motion=new ParabolicMotion(shooter.getPos(),v,angle,wind);calculateLength(motion);int time=0;do {printAtTime(time,motion.at(time));Interface.delay(100);++time;} while(motion.at(time).getY()>Game.EPS);if(motion.timeMax()>time-1+Game.EPS){printAtTime(motion.timeMax(),motion.max());}double radiusTarget=Math.abs(motion.max().getX()-target.getPos().getX()),radiusShooter=Math.abs(motion.max().getX()-shooter.getPos().getX());int damage;boolean miss=true,gameover=false;if(radiusTarget<CANNON_RADIUS+Game.EPS){miss=false;damage=(int)((1-(radiusTarget/CANNON_RADIUS))*CANNON_BASE_DAMAGE);System.out.println(""Tembakan ""+shooter.getName()+"" mengenai ""+target.getName()+"" dengan damage ""+damage);if(target.hit(damage)){System.out.println(""HP ""+target.getName()+"" habis!"");System.out.println(shooter.getName()+"" menang!"");gameover=true;}else {System.out.println(""HP ""+target.getName()+"" berkurang menjadi ""+target.getHealth());}Interface.delay(1000);}if(radiusShooter<CANNON_RADIUS+Game.EPS){miss=false;damage=(int)((1-(radiusShooter/CANNON_RADIUS))*CANNON_BASE_DAMAGE);System.out.println(""Tembakan ""+shooter.getName()+"" mengenai dirinya sendiri dengan damage ""+damage);if(shooter.hit(damage)){System.out.println(""HP ""+shooter.getName()+"" habis!"");if(target.getHealth()>0){System.out.println(target.getName()+"" menang!"");}else {System.out.println(""Pertandingan ini seri."");}gameover=true;}else {System.out.println(""HP ""+shooter.getName()+"" berkurang menjadi ""+shooter.getHealth());}Interface.delay(1000);}if(gameover){Interface.gameOver();System.exit(0);}if(miss){System.out.println(""Tembakan ""+shooter.getName()+"" meleset."");}}"
3677	"public void addKPI(String content){String[] kpi=content.split(""\\^"",-1);String parentContent=kpi[1].trim();String name=kpi[2].trim();String description=kpi[3].trim();String kpiType=kpi[6].trim();String kpiSource=kpi[7].trim();String valueType=kpi[8].trim();String numberDecimalPlaces=kpi[9].trim();String acceptValues=kpi[10].trim();String documentFile=kpi[14].trim();String visibleToSupplier=kpi[4].trim();String teamAccessControl=kpi[5].trim();String rangeLower=kpi[11].trim();String rangeUpper=kpi[12].trim();String reportMetric=kpi[13].trim();String subContent=kpi[17].trim();boolean createKPIunderKPI=false;if(!parentContent.isEmpty()&&name.isEmpty()&&subContent.isEmpty()){click(Element.btnAdd);click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'KPI')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",parentContent);}else {if(!parentContent.isEmpty()&&!name.isEmpty()&&subContent.isEmpty()){clickAlt(By.xpath(""//a[contains(@class,'awmenuLink')]/b[text()='""+parentContent+""']""));click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'KPI')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",name);}else {if(!parentContent.isEmpty()&&!name.isEmpty()&&!subContent.isEmpty()){clickAlt(By.xpath(""//a[contains(@class,'awmenuLink')]/b[text()='""+name+""']""));click(By.xpath(""//div[@class='awmenu w-pm-menu']//a[contains(text(),'KPI')]""));waitForButtonToExist(""OK"",5);populateTextField(""Name"",subContent);}}}inputDescription(Element.txtProjectDescription,description);writeToLogs("">>KPI Type: ""+kpiType);switch (kpiType){case ""This KPI will contain supporting data (KPIs, questions, and/or requirements)"" :if(!createKPIunderKPI){click(Element.rdoKPISupportingData);waitFor(2);}break;case ""This KPI will be based on Survey or Report Data"" :if(!createKPIunderKPI){click(Element.rdoKPIBasedonSurvey);waitFor(3);}populateDropdown(""KPI Source"",kpiSource);switch (kpiSource){case ""Survey"" :waitFor(2);populateDropdownAlt(""Value Type"",valueType);populateTextField(""Number of decimal places"",numberDecimalPlaces);populateDropdownAlt(""Acceptable Values"",acceptValues);if(!documentFile.isEmpty()){waitFor(2);sendKeysEnter(Element.lnkAttFile);click(Element.lnkUpdateFromDesktop);uploadFile(documentFile);click(Element.btnOK);waitForButtonToExist(""Done"",60);}break;case ""Report"" :sendKeysEnter(Element.lnkReport);waitFor(3);waitForButtonToExist(""Cancel"",5);if(isElementVisible(By.linkText(""Vault""),5)){click(By.linkText(""Vault""));waitFor(3);}String[] c=reportMetric.split(""\\>"");for(int i=0;i<c.length;i++){System.out.println(c[i].trim());if(c[i].trim().contentEquals(""Vault"")){i=i+1;}if(i==c.length-1){if(isElementVisible(By.linkText(c[i].trim()),5)){click(By.linkText(c[i].trim()));break;}else {writeToLogs(""[ERROR]""+c[i].trim()+"" is not available"");}}if(isElementVisible(By.xpath(""//span[contains(.,'""+c[i].trim()+""')]""),5)){click(By.xpath(""//span[contains(.,'""+c[i].trim()+""')]""));waitFor(2);}else {writeToLogs(""[ERROR]""+c[i].trim()+"" is not available"");}}waitFor(2);populateDropdownAlt(""Value Type"",valueType);populateTextField(""Number of decimal places"",numberDecimalPlaces);populateDropdownAlt(""Acceptable Values"",acceptValues);if(!documentFile.isEmpty()){waitFor(2);sendKeysEnter(Element.lnkAttFile);click(Element.lnkUpdateFromDesktop);uploadFile(documentFile);click(Element.btnOK);waitForButtonToExist(""Done"",60);}break;}}if(acceptValues.equals(""Limited Range"")){inputText(Element.txtRangeLow,rangeLower);inputText(Element.txtRangeUp,rangeUpper);}populateDropdown(""Visible to Supplier"",visibleToSupplier);waitFor(3);populateChooserMultiple(""Team Access Control"",teamAccessControl);clickButton(""Done"");}"
3678	"@Override public void requestLayout(){if(!mHandlingLayoutInLayoutRequest){checkThread();mLayoutRequested=true;scheduleTraversals();}}"
3679	"@Override public void updateTick(World worldIn,BlockPos pos,IBlockState state,Random rand){if(worldIn.isAirBlock(pos.up())){int height;BlockPos ground=pos;for(height=1;worldIn.getBlockState(ground=ground.down()).getBlock()==this;++height){;}if(height<MAX_HEIGHT){worldIn.setBlockState(pos.up(),getDefaultState());}}super.updateTick(worldIn,pos,state,rand);}"
3680	"@Override public void onReceive(Context context,Intent intent){ZyncApplication app=(ZyncApplication)context.getApplicationContext();ConnectivityManager conMan=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo netInfo=conMan.getActiveNetworkInfo();if(netInfo!=null&&netInfo.getType()==ConnectivityManager.TYPE_WIFI){if(!app.getPreferences().getBoolean(""use_on_data"",true)&&app.httpRequestQueue()==null){app.setupNetwork();}}else {if(app.httpRequestQueue()!=null){app.removeNetworkUsages();}}}"
3681	"private void updateVisibleProgress(){if(mAnimationLogic==null){super.setProgress(mTargetProgress);if(!mIsStarted){postOnAnimationDelayed(mHideRunnable,mHidingDelayMs);}}else {if(!mProgressAnimator.isStarted()){mProgressAnimator.start();}}}"
3682	"@Override public Task processInput(String input){switch (state().sessionState){case CHOOSE_NAME :{await(sendMessage(""\033[1;34m""+input));ICharacter character=IActor.getReference(ICharacter.class,input.toLowerCase());state().character=character;boolean registeredName=await(character.registerName(input));System.out.print(registeredName);if(registeredName){await(sendMessage(localized.nameRegistered));state().sessionState=SessionState.PROVIDE_PASSWORD;}else {await(sendMessage(localized.verifyOwnership));state().sessionState=SessionState.VERIFY_OWNER;}return writeState();}case VERIFY_OWNER :{await(sendMessage(""\033[1;34m""+input));if(input.equals(""yes"")){state().sessionState=SessionState.PROVIDE_PASSWORD;await(sendMessage(localized.enterPassword));}else {if(input.equals(""no"")){state().sessionState=SessionState.CHOOSE_NAME;await(sendMessage(localized.chooseName));}}return writeState();}case PROVIDE_PASSWORD :{boolean validPassword=await(state().character.verifyPassword(input));if(validPassword){state().sessionState=SessionState.LOGGED_IN;await(sendMessage(""login was ok""));}else {await(sendMessage(""\033[1;31m""+localized.invalidPassword));state().sessionState=SessionState.CHOOSE_NAME;await(sendMessage(localized.chooseName));}return writeState();}}return Task.done();}"
3683	"public void setIgnoreMethod(boolean aValue){mIgnoreMethod=aValue;}"
3684	"private void initView(){iv_profileImg.setDefaultImageResId(R.drawable.default_user);if(isUserVisible){iv_profileImg.setVisibility(View.GONE);etClue.setVisibility(View.GONE);tvUserName.setVisibility(View.GONE);allowCheckBox.setText(String.format(getString(R.string.allow_to_get_reply),getString(R.string.sender)));}}"
3685	"public boolean isPlotAvailable(PlotId id,PlotMapInfo pmi){return pmi!=null&&pmi.getPlot(id)==null;}"
3686	"public static int testInventoryInsertion(IInventory inventory,ItemStack item,EnumFacing side){if(item==ItemStack.EMPTY||item.getCount()==0){return 0;}item=item.copy();if(inventory==null){return 0;}inventory.getSizeInventory();int itemSizeCounter=item.getCount();int[] availableSlots=new int[0];if(inventory instanceof ISidedInventory){availableSlots=((ISidedInventory)inventory).getSlotsForFace(side);}else {availableSlots=buildSlotsForLinearInventory(inventory);}for(int i : availableSlots){if(itemSizeCounter<=0){break;}if(!inventory.isItemValidForSlot(i,item)){continue;}if(side!=null&&inventory instanceof ISidedInventory){if(!((ISidedInventory)inventory).canInsertItem(i,item,side.getOpposite())){continue;}}ItemStack inventorySlot=inventory.getStackInSlot(i);if(inventorySlot==ItemStack.EMPTY){itemSizeCounter-=Math.min(Math.min(itemSizeCounter,inventory.getInventoryStackLimit()),item.getMaxStackSize());}else {if(areMergeCandidates(item,inventorySlot)){int space=Math.min(inventory.getInventoryStackLimit(),inventorySlot.getMaxStackSize())-inventorySlot.getCount();itemSizeCounter-=Math.min(itemSizeCounter,space);}}}if(itemSizeCounter!=item.getCount()){itemSizeCounter=Math.max(itemSizeCounter,0);return item.getCount()-itemSizeCounter;}return 0;}"
3687	"@Override protected void validate(OtpKeyRequest message) throws Exception{if(message.getKeyFunction()==null){fail(INVALID_KEY_FUNCTION,""keyFunction one of NEW, DELETE"");}Long systemId=message.getSystemId();if(systemId==null){fail(NO_SYSTEM_ID,""No systemId"");}switch (message.getKeyFunction()){case DELETE :if(!systemId.equals(message.getProcessorKey())){fail(SYSTEM_ID_MISMATCH,""systemId does not match processor id"");}break;default :break;}Integer size=message.getKeySize();if(size!=null&&!utils.isPowerOf2(size)){fail(INVALID_KEY_SIZE,""Invalid key size, expecting powers of 2"");}if(size>maxKeySize){fail(INVALID_KEY_SIZE,""Size ""+size+"" is greater than the maximum ""+maxKeySize);}}"
3688	"public static Date futureFromNow(TimeValue value,boolean clearTimeOfDay){return diffDayFromNow(value.getValueInMilliseconds(),clearTimeOfDay);}"
3689	"public boolean updateLostTicket(int lostTicketNumber,int exitStationId,int summaryId,double totalAmount,double taxAmount,int transactionTypeId,int payTypeId,int printed,boolean lost){String sql;sql=""UPDATE transactions SET ExitStationId = ""+exitStationId+"",""+""SummaryId = ""+summaryId+"",""+""TotalAmount = ""+totalAmount+"",""+""PayDateTime = CURRENT_TIMESTAMP,""+""ExitDateTime = CURRENT_TIMESTAMP,""+""Printed =  ""+printed+"",""+""Exited = 1,""+""Exonerated = 0,""+""Lost = ""+lost+"" ""+"" WHERE Id = ""+lostTicketNumber;if(this.update(sql)){sql=""INSERT INTO TransactionsDetail (TransactionId,TypeId,TotalAmount,TaxAmount)""+"" VALUES (""+lostTicketNumber+"",""+transactionTypeId+"",""+totalAmount+"",""+taxAmount+"")"";this.insert(sql);sql=""INSERT INTO TransactionsPay (TransactionId,PayTypeId,Amount)""+"" VALUES (""+lostTicketNumber+"",""+payTypeId+"",""+totalAmount+"")"";this.insert(sql);return true;}return false;}"
3690	"@Override public void doAction(){if(targetId<0||!mCrushable.has(targetId)){return ;} final Position p=mPosition.get(targetId);obstacles.del(p.x,p.y);world.delete(targetId);for(int i=0;i<3;i++){items.add(makeStone(p.x,p.y),p.x,p.y);}sStamina.consume(actorId,cost);}"
3691	"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){View rootview=inflater.inflate(R.layout.fragment_recipe_detail_list,container,false);RecipeDetailActivity activity=(RecipeDetailActivity)getActivity();Recipe recipe=activity.getRecipe();activity.setIngredientState(false);recipeIv=(ImageView)rootview.findViewById(R.id.iv_recipe);servingsTv=(TextView)rootview.findViewById(R.id.tv_servings);if(recipe.getImage()!=null&&!recipe.getImage().equals("""")){recipeIv.setVisibility(View.VISIBLE);Picasso.with(getContext()).load(recipe.getImage()).fit().centerCrop().placeholder(R.drawable.ic_image_24dp).error(R.drawable.ic_error_outline_24dp).into(recipeIv);}if(recipe.getServings()!=null&&!recipe.getServings().equals("""")){LinearLayout servingsLl=(LinearLayout)rootview.findViewById(R.id.ll_servings);servingsLl.setVisibility(View.VISIBLE);servingsTv.setText(recipe.getServings());}recipeTitle=(TextView)rootview.findViewById(R.id.tv_recipe_detail_ingredients_recipe_description);recipeTitle.setText(recipe.getName());rv=(RecyclerView)rootview.findViewById(R.id.rv_recipe_detail_list);mLayoutManager=new LinearLayoutManager(getContext());rv.setLayoutManager(mLayoutManager);adapter=new RecipeDetailListRecyclerViewAdapter(recipe.getIngredients(),activity,activity);steps=recipe.getSteps();Step blankstep=new Step();if(steps.get(0).getId()!=null){}else {steps.add(0,blankstep);}adapter.swapData(steps);rv.setAdapter(adapter);return rootview;}"
3692	"public void GamePlay(){System.out.println(""Current Player: ""+currentPlayerInGame.getPlayerName());if(this.currentPlayerInGame.getPlayerName().equals(""CompSci"")){this.doneWithHuman=false;this.targetSelected=false;int row=this.currentPlayerInGame.getCurrentRow();int col=this.currentPlayerInGame.getCurrentColumn();calcTargets(col,row,this.dieRollValue);repaint();this.updateHumanPosition(selectedBox.getCol(),selectedBox.getRow(),dieRollValue,this.currentPlayerInGame);repaint();inWindow=true;if(!getCellAt(row,col).isWalkway()){if(getCellAt(col,row).isRoom()){inWindow=true;JFrame myFrame=new JFrame(""Suggestion"");myFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);try{UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());}catch(Exception e){e.printStackTrace();}JPanel myPanel=new JPanel();Suggestion suggest=new Suggestion();myPanel=suggest;myPanel.setLayout(new BoxLayout(myPanel,BoxLayout.Y_AXIS));myPanel.setOpaque(true);JTextArea text=new JTextArea(15,50);text.setEditable(false);text.setFont(Font.getFont(Font.SANS_SERIF));JPanel input=new JPanel();input.setLayout(new FlowLayout());myPanel.add(input);myFrame.getContentPane().add(BorderLayout.CENTER,myPanel);myFrame.pack();myFrame.setLocationByPlatform(true);myFrame.setVisible(true);myFrame.setResizable(false);}inWindow=false;}if(this.currentPlayerInGame.getPlayerName().equals(""MechE"")||this.currentPlayerInGame.getPlayerName().equals(""ChemE"")||this.currentPlayerInGame.getPlayerName().equals(""Mining"")||this.currentPlayerInGame.getPlayerName().equals(""Geology"")||this.currentPlayerInGame.getPlayerName().equals(""Physics"")){this.doneWithComputer=false;int row=this.currentPlayerInGame.getCurrentRow();int col=this.currentPlayerInGame.getCurrentColumn();Card returnCardAnswer=new Card();if(this.compReadyMakeAccusation&&!this.compSuggestionDisproved){}if(getCellAt(col,row).isDoorway()){System.out.println(""Computer's Room location: ""+getCellAt(row,col).getInitial());for(ComputerPlayer computer : computerPlayers){if(computer.getPlayerName().equals(this.currentPlayerInGame.getPlayerName())){returnCardAnswer=handleSuggestion(computer);this.compReadyMakeAccusation=computer.isAccusationReady();}}}else {this.currentResults="""";this.currentGuess="""";}repaint();this.updateComputerPosition(col,row,this.dieRollValue,this.currentPlayerInGame);repaint();}}}"
3693	"protected static void updateEdgeWeightColumn(){_edgeWeightColumnBox.removeAllItems();if(_applicationManager==null||_applicationManager.getCurrentNetwork()==null){return ;}Collection<CyColumn> columns=_applicationManager.getCurrentNetwork().getDefaultEdgeTable().getColumns();for(CyColumn column : columns){if(column.getType()==Double.class){_edgeWeightColumnBox.addItem(column.getName());}}}"
3694	"public void add(Object key,Tuple value){Vector<Tuple> currentRecords=index.get(key);if(currentRecords==null){currentRecords=new Vector<Tuple>();index.put(key,currentRecords);}currentRecords.add(value);}"
3695	"private String parseDateline(VTDNav vn) throws NavException{require(vn.matchElement(AgigaConstants.DOC));if(!vn.toElement(VTDNav.FIRST_CHILD,AgigaConstants.DATELINE)){log.finer(""No dateline found"");return null;}return vn.toString(vn.getText()).trim();}"
3696	"@Override protected int nextValue(int count){count++;if(getMax()+1==count){signalOverflow();count=0;}return count;}"
3697	"private static List<Price> findPossibleMatches(InstanceInput input,InstanceOutput output,boolean forceBreakInstances){LOGGER.debug(""Calculating instance: ""+input.getDescription());Predicate<Price> predicate=region(input).and(ec2(input)).and(tenancy(input)).and(licenceModel(input)).and(operatingSystem(input)).and(preInstalledSw(input)).and(termType(input)).and(offeringClass(input)).and(leaseContractLength(input)).and(purchaseOption(input)).and(memory(input)).and(newGeneration(input));if(input.getSaps()!=null){predicate=predicate.and(saps(input));}else {predicate=predicate.and(cpu(input));}if(input.getSapInstanceType()!=null&&(input.getSapInstanceType().startsWith(SAPInstanceType.APPS.name())||input.getSapInstanceType().startsWith(SAPInstanceType.ANY_DB.name()))){predicate=predicate.and(sapProductionCertifiedInstances(input));}if(input.getSapInstanceType()!=null&&(SAPInstanceType.HANA_OLTP.name().equals(input.getSapInstanceType())||SAPInstanceType.HANA_OLAP.name().equals(input.getSapInstanceType()))){if(Environment.PROD.name().equals(input.getEnvironment())){predicate=predicate.and(hanaProductionCertifiedInstances(input));}else {predicate=predicate.and(hanaDevQaInstances(input));}}List<Price> possibleMatches=Constants.ec2PriceList.stream().filter(predicate).collect(Collectors.toList());if(!forceBreakInstances&&possibleMatches.size()>0){return possibleMatches;}else {if(SAPInstanceType.HANA_OLAP.name().equals(input.getSapInstanceType())){breakInManyInstances(input,output);List<Price> findPossibleMatches=findPossibleMatches(input,output,false);return findPossibleMatches;}else {output.setErrorMessage(""Could not find a match for this server configuration."");return null;}}}"
3698	"public boolean login(String username,String password){user=users.findByMatIdAndPassword(username,password);return user!=null;}"
3699	"@Override public boolean isCellEditable(int row,int col){if(col==1){String code=(String)this.getValueAt(row,0);return isNameEditableComment(code);}if(col==BUNDLE_COLUMN){String code=(String)this.getValueAt(row,0);return (code!=null&&code.startsWith(ClaimConst.ADMIN_CODE_START));}if(col==ONEDAY_COLUMN){String code=(String)this.getValueAt(row,0);boolean editableComment=isNameEditableComment(code);boolean codeIsAdmin=(code!=null&&code.startsWith(ClaimConst.ADMIN_CODE_START));boolean codeIs82Comment=(is82Comment(code));return (code!=null&&!editableComment&&!codeIsAdmin&&!codeIs82Comment);}return false;}"
3700	"@JsonIgnore public boolean isLastBuildFailed(){return BuildStatus.FAILED==m_color||BuildStatus.TEST_FAILED==m_color;}"
3701	"@Override public void nextState(String s){if(s.equals(""Move"")){isMoving=!isMoving;}if(s.equals(""JumpMade"")&&isMoving){gameFigure.mState=new Move(gameFigure);}else {if(s.equals(""JumpMade"")){gameFigure.mState=new NeutralMotion(gameFigure);}}}"
3702	"public void flipTheView(){if(!flipEnabled){return ;}if(mSetRightOut.isRunning()||mSetLeftIn.isRunning()){return ;}if(!mIsBackVisible){mSetRightOut.setTarget(mCardFrontLayout);mSetLeftIn.setTarget(mCardBackLayout);mSetRightOut.start();mSetLeftIn.start();mIsBackVisible=true;mFlipState=FlipState.BACK_SIDE;}else {mSetRightOut.setTarget(mCardBackLayout);mSetLeftIn.setTarget(mCardFrontLayout);mSetRightOut.start();mSetLeftIn.start();mIsBackVisible=false;mFlipState=FlipState.FRONT_SIDE;}}"
3703	"@Override public boolean hasNext(){return at<=size;}"
3704	"@Override protected void onPostExecute(Object o){super.onPostExecute(o);if(!kathruListTask.isCancelled()){ArrayList<KathruMini> kathruMinis=(ArrayList<KathruMini>)o; final AutoCompleteTextView autoTextView=(AutoCompleteTextView)getActivity().findViewById(R.id.auto_complete_kathru);ArrayAdapter<KathruMini> adapter=new ArrayAdapter<KathruMini>(getActivity(),android.R.layout.simple_dropdown_item_1line,kathruMinis);if(autoTextView!=null){autoTextView.setAdapter(adapter);autoTextView.setOnItemClickListener(new AdapterView.OnItemClickListener(){  @Override public void onItemClick(  AdapterView<?> arg0,  View arg1,  int arg2,  long arg3){    KathruMini selected=(KathruMini)arg0.getAdapter().getItem(arg2);    autoTextView.setText(selected.getName());  }});}}}"
3705	"public Node getNextNode(){if(node.getParent()==null){return null;}while(node.getParent().getParent()!=null){node=node.getParent();}return node;}"
3706	"@Override protected void emitDatatypeProperty(String uri,String base,String domain,String type,String xsdtype,boolean required){EAttribute attr=coreFactory.createEAttribute();if(index.eDataTypes.containsKey(type)){EDataType dt=index.eDataTypes.get(type);attr.setEType(dt);}else {if(index.eTypes.containsKey(xsdtype)){attr.setEType(index.eTypes.get(xsdtype));}else {log(""No EType [""+xsdtype+""] found for ""+uri+""."");}}if(required==true){attr.setUpperBound(1);}attr.setLowerBound(1);if(index.eClasses.containsKey(domain)){EClass klass=index.eClasses.get(domain);klass.getEStructuralFeatures().add(attr);}else {log(""Problem locating class [""+uri+""] for attribute [""+type+""]."");}index.eAttributes.put(uri,attr);}"
3707	"@Override public void executed(OperationData result,IMonit