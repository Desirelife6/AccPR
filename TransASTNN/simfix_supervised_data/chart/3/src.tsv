1	"public void test(){int m=calendar.get(Calendar.MONTH)+1;int y=calendar.get(Calendar.YEAR);this.serialDate=SerialDate.createInstance(d,m,y);}"
2	"public void test(){for(int i=0;i<this.optionalLibraries.size();i++){OptionalLibraryHolder holder=(OptionalLibraryHolder)this.optionalLibraries.get(i);Library l=holder.getLibrary();if(l!=null){libraries.add(l);}}}"
3	"public void test(){if(i<ncomponents){Component component=parent.getComponent(i);Dimension d=component.getPreferredSize();int h=d.height;int adjust=(this.rowHeight[r]-h)/2;parent.getComponent(i).setBounds(x,y+adjust,this.colWidth[c],h);}}"
4	"public void test(){if(i<ncomponents){Component component=parent.getComponent(i);Dimension d=component.getPreferredSize();int h=d.height;int adjust=(this.rowHeight[r]-h)/2;parent.getComponent(i).setBounds(x,y+adjust,this.colWidth[c],h);}y=y+this.rowHeight[r];}"
5	"public void test(){int result=0;List urls=(List)this.urlSeries.get(list);if(urls!=null){result=urls.size();}return result;}"
6	"public void test(){if(series<getListCount()){List urls=(List)this.urlSeries.get(series);if(urls!=null){if(item<urls.size()){result=(String)urls.get(item);}}}}"
7	"public void test(){if(item<urls.size()){result=(String)urls.get(item);}}"
8	"public void test(){int result=0;Map urlMap=(Map)this.urls.get(list);if(urlMap!=null){result=urlMap.size();}return result;}"
9	"public void test(){if(mapIndex<getListCount()){Map urlMap=(Map)this.urls.get(mapIndex);if(urlMap!=null){result=(String)urlMap.get(key);}}}"
10	"public void test(){if(urlMap!=null){result=(String)urlMap.get(key);}}"
11	"public void test(){if(getURLCount(pieItem)!=generator.getURLCount(pieItem)){return false;}keySet=((HashMap)this.urls.get(pieItem)).keySet();String key;}"
12	"public void test(){for(Iterator j=map.keySet().iterator();j.hasNext();){key=(String)j.next();newMap.put(key,map.get(key));}}"
13	"public void test(){for(int i=entityCount-1;i>=0;i--){ChartEntity entity=(ChartEntity)this.entities.get(i);if(entity.getArea().contains(x,y)){return entity;}}}"
14	"public void test(){for(int i=0;i<this.entities.size();i++){ChartEntity entity=(ChartEntity)this.entities.get(i);clone.entities.add(entity.clone());}}"
15	"public void test(){ImageEncoder imageEncoder=null;String className=(String)encoders.get(format);if(className==null){throw new IllegalArgumentException(""Unsupported image format - ""+format);}}"
16	"public void test(){for(int i=0;i<crosshairs.size();i++){Crosshair c=(Crosshair)crosshairs.get(i);this.xCrosshairs.remove(c);c.removePropertyChangeListener(this);}}"
17	"public void test(){for(int i=0;i<crosshairs.size();i++){Crosshair c=(Crosshair)crosshairs.get(i);this.yCrosshairs.remove(c);c.removePropertyChangeListener(this);}}"
18	"public void test(){for(int r=0;r<this.rows;r++){int index=r*this.columns+c;if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){b.setBounds(new Rectangle2D.Double(c*width,r*height,width,height));}}}"
19	"public void test(){if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){Size2D s=b.arrange(g2,bc);maxH=Math.max(maxH,s.getHeight());}}"
20	"public void test(){if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){Size2D s=b.arrange(g2,bc);maxW=Math.max(maxW,s.getWidth());}}"
21	"public void test(){for(int i=0;i<blocks.size();i++){Block block=(Block)blocks.get(i);sizes[i]=block.arrange(g2,RectangleConstraint.NONE);width=width+sizes[i].getWidth();maxHeight=Math.max(sizes[i].height,maxHeight);block.setBounds(new Rectangle2D.Double(x,0.0,sizes[i].width,sizes[i].height));x=x+sizes[i].width;}}"
22	"public void test(){List blocks=container.getBlocks();Block b=(Block)blocks.get(0);Size2D s=b.arrange(g2,RectangleConstraint.NONE);double width=constraint.getWidth();Rectangle2D bounds=new Rectangle2D.Double((width-s.width)/2.0,0.0,s.width,s.height);b.setBounds(bounds);return new Size2D((width-s.width)/2.0,s.height);}"
23	"public void test(){List blocks=container.getBlocks();Block b=(Block)blocks.get(0);Size2D s=b.arrange(g2,RectangleConstraint.NONE);b.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));return new Size2D(s.width,s.height);}"
24	"public void test(){for(int i=0;i<blocks.size();i++){Block block=(Block)blocks.get(i);sizes[i]=block.arrange(g2,RectangleConstraint.NONE);height=height+sizes[i].getHeight();maxWidth=Math.max(sizes[i].width,maxWidth);block.setBounds(new Rectangle2D.Double(0.0,y,sizes[i].width,sizes[i].height));y=y+sizes[i].height;}}"
25	"public void test(){if(count==0){return this.defaultPaint;}PaintItem item=(PaintItem)this.lookupTable.get(0);if(value<item.value){return this.defaultPaint;}}"
26	"public void test(){while(high-low>1){int current=(low+high)/2;item=(PaintItem)this.lookupTable.get(current);if(value>=item.value){low=current;}else {high=current;}}}"
27	"public void test(){if(high>low){item=(PaintItem)this.lookupTable.get(high);if(value<item.value){item=(PaintItem)this.lookupTable.get(low);}}}"
28	"public void test(){if(value<item.value){item=(PaintItem)this.lookupTable.get(low);}}"
29	"public void test(){ItemLabelPosition position=(ItemLabelPosition)this.positiveItemLabelPositionList.get(series);if(position==null){position=this.basePositiveItemLabelPosition;}return position;}"
30	"public void test(){ItemLabelPosition position=(ItemLabelPosition)this.negativeItemLabelPositionList.get(series);if(position==null){position=this.baseNegativeItemLabelPosition;}return position;}"
31	"public void test(){double outlier=((Number)yOutliers.get(i)).doubleValue();Number minOutlier=bawDataset.getMinOutlier(row,column);Number maxOutlier=bawDataset.getMaxOutlier(row,column);Number minRegular=bawDataset.getMinRegularValue(row,column);}"
32	"public void test(){if(this.useSeriesOffset){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}Number n=(Number)values.get(i);double value=n.doubleValue();}"
33	"public void test(){CategoryItemLabelGenerator generator=(CategoryItemLabelGenerator)this.itemLabelGeneratorList.get(row);if(generator==null){generator=this.baseItemLabelGenerator;}return generator;}"
34	"public void test(){CategoryURLGenerator generator=(CategoryURLGenerator)this.urlGeneratorList.get(row);if(generator==null){generator=this.baseURLGenerator;}return generator;}"
35	"public void test(){double result=Double.NaN;Number n=(Number)this.seriesBarWidthList.get(series);if(n!=null){result=n.doubleValue();}return result;}"
36	"public void test(){int index=(inverted?blockCount-k:k);Object[] prev=(Object[])values.get(index);Object[] curr=(Object[])values.get(index+1);int series=0;}"
37	"public void test(){Object[] record=(Object[])itemLabelList.get(i);int series=((Integer)record[0]).intValue();Rectangle2D bar=(Rectangle2D)record[1];boolean neg=((Boolean)record[2]).booleanValue();}"
38	"public void test(){{double outlier=((Number)yOutliers.get(i)).doubleValue();if(outlier>boxAndWhiskerData.getMaxOutlier(series,item).doubleValue()){outlierListCollection.setHighFarOut(true);}else if(outlier<boxAndWhiskerData.getMinOutlier(series,item).doubleValue()){outlierListCollection.setLowFarOut(true);}else if(outlier>boxAndWhiskerData.getMaxRegularValue(series,item).doubleValue()){yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);outliers.add(new Outlier(xx,yyOutlier,oRadius));}else if(outlier<boxAndWhiskerData.getMinRegularValue(series,item).doubleValue()){yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);outliers.add(new Outlier(xx,yyOutlier,oRadius));}Collections.sort(outliers);}}"
39	"public void test(){XYItemLabelGenerator generator=(XYItemLabelGenerator)this.itemLabelGeneratorList.get(series);if(generator==null){generator=this.baseItemLabelGenerator;}return generator;}"
40	"public void test(){XYToolTipGenerator generator=(XYToolTipGenerator)this.toolTipGeneratorList.get(series);if(generator==null){generator=this.baseToolTipGenerator;}return generator;}"
41	"public void test(){XYURLGenerator generator=(XYURLGenerator)this.urlGeneratorList.get(series);if(generator==null){generator=this.baseURLGenerator;}return generator;}"
42	"public void test(){g2.setPaint(getItemFillPaint(series,item,selected));GeneralPath area=new GeneralPath();double[] coords=(double[])drState.lowerCoordinates.get(0);area.moveTo((float)coords[0],(float)coords[1]);for(int i=1;i<drState.lowerCoordinates.size();i++){coords=(double[])drState.lowerCoordinates.get(i);area.lineTo((float)coords[0],(float)coords[1]);}}"
43	"public void test(){for(int i=1;i<drState.lowerCoordinates.size();i++){coords=(double[])drState.lowerCoordinates.get(i);area.lineTo((float)coords[0],(float)coords[1]);}}"
44	"public void test(){for(int i=1;i<drState.lowerCoordinates.size();i++){coords=(double[])drState.lowerCoordinates.get(i);area.lineTo((float)coords[0],(float)coords[1]);}int count=drState.upperCoordinates.size();coords=(double[])drState.upperCoordinates.get(count-1);area.lineTo((float)coords[0],(float)coords[1]);}"
45	"public void test(){for(int i=count-2;i>=0;i--){coords=(double[])drState.upperCoordinates.get(i);area.lineTo((float)coords[0],(float)coords[1]);}}"
46	"public void test(){{ControlPoint cp1=(ControlPoint)this.points.get(1);s.seriesPath.lineTo(cp1.x,cp1.y);}}"
47	"public void test(){for(int i=0;i<np;i++){ControlPoint cpi=(ControlPoint)this.points.get(i);x[i]=cpi.x;d[i]=cpi.y;}}"
48	"public void test(){g2.setPaint(plot.getAngleGridlinePaint());g2.drawLine(center.x,center.y,p.x,p.y);if(plot.isAngleLabelsVisible()){int x=p.x;int y=p.y;g2.setPaint(plot.getAngleLabelPaint());TextUtilities.drawAlignedString(tick.getText(),g2,x,y,TextAnchor.CENTER);}}"
49	"public void test(){if(plot.isAngleLabelsVisible()){int x=p.x;int y=p.y;g2.setPaint(plot.getAngleLabelPaint());TextUtilities.drawAlignedString(tick.getText(),g2,x,y,TextAnchor.CENTER);}}"
50	"public void test(){int upperLeftX=center.x-r;int upperLeftY=center.y-r;int d=2*r;Ellipse2D ring=new Ellipse2D.Double(upperLeftX,upperLeftY,d,d);g2.setPaint(plot.getRadiusGridlinePaint());}"
51	"public void test(){int upperLeftY=center.y-r;int d=2*r;Ellipse2D ring=new Ellipse2D.Double(upperLeftX,upperLeftY,d,d);g2.setPaint(plot.getRadiusGridlinePaint());g2.draw(ring);}"
52	"public void test(){Font result=(Font)this.labelFontList.get(series);if(result==null){result=this.defaultLabelFont;}return result;}"
53	"public void test(){if(Modifier.isPublic(f.getModifiers())&&Modifier.isFinal(f.getModifiers())){String name=f.getName();Object oColor=f.get(null);if(oColor instanceof Color){if(c.equals(oColor)){return name;}}}}"
54	"public void test(){try{ final Field f=Color.class.getField(value);return (Color)f.get(null);}catch (Exception ce) {  return Color.black;}}"
55	"public void test(){if(key==null){throw new IllegalArgumentException(""Null \'key\' argument."");}return (Stroke)this.store.get(key);}"
56	"public void test(){}"
57	"public void test(){if(!ShapeUtilities.equal((Shape)get(i),(Shape)that.get(i))){return false;}}"
58	"public void test(){if(key==null){throw new IllegalArgumentException(""Null \'key\' argument."");}return (Paint)this.store.get(key);}"
59	"public void test(){for(int y=0;y<shadowSize;y++,bufferOffset+=dstWidth){int a=dataBuffer[bufferOffset]>>>24;aHistory[y]=a;aSum+=a;}}"
60	"public void test(){for(int y=yStart;y<yStop;y++,bufferOffset+=dstWidth){int a=(int)(aSum*sumDivider);dataBuffer[bufferOffset]=a<<24|shadowRgb;aSum-=aHistory[historyIdx];a=dataBuffer[bufferOffset+lastPixelOffset]>>>24;aHistory[historyIdx]=a;aSum+=a;if(++historyIdx>=shadowSize){historyIdx-=shadowSize;}}}"
61	"public void test(){if(!ObjectUtilities.equal(get(i),other.get(i))){return false;}}"
62	"public void test(){for(int i=0;i<count;i++){ final Object object=get(i);if(object!=null&&object instanceof Serializable){stream.writeInt(i);stream.writeObject(object);}else {stream.writeInt(-1);}}}"
63	"public void test(){Rectangle s=getMaximumWindowBounds();Dimension f=frame.getSize();int w=Math.max(s.width-f.width,0);int h=Math.max(s.height-f.height,0);int x=(int)(horizontalPercent*w)+s.x;int y=(int)(verticalPercent*h)+s.y;frame.setBounds(x,y,f.width,f.height);}"
64	"public void test(){int h=d.height+p.height;int x=baseX+(int)(horizontalPercent*w);int y=baseY+(int)(verticalPercent*h);Rectangle s=getMaximumWindowBounds();x=Math.min(x,(s.width-d.width));}"
65	"public void test(){x=Math.min(x,(s.width-d.width));x=Math.max(x,0);y=Math.min(y,(s.height-d.height));y=Math.max(y,0);dialog.setBounds(x+s.x,y+s.y,d.width,d.height);}"
66	"public void test(){x=Math.max(x,0);y=Math.min(y,(s.height-d.height));y=Math.max(y,0);dialog.setBounds(x+s.x,y+s.y,d.width,d.height);}"
67	"public void test(){if(this.subplots.get(i)==subplot){position=i;}}"
68	"public void test(){if(subplotIndex>=0){result=(CategoryPlot)this.subplots.get(subplotIndex);}}"
69	"public void test(){for(int i=0;i<n;i++){CategoryPlot sub=(CategoryPlot)this.subplots.get(i);totalWeight+=sub.getWeight();}}"
70	"public void test(){{CategoryPlot plot=(CategoryPlot)this.subplots.get(i);if(orientation==PlotOrientation.HORIZONTAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateRangeAxisSpace(g2,this.subplotAreas[i],null);space.ensureAtLeast(subSpace);}}"
71	"public void test(){CategoryPlot plot=(CategoryPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=null;if(info!=null){subplotInfo=new PlotRenderingInfo(info.getOwner());info.addSubplotInfo(subplotInfo);}}"
72	"public void test(){if(dataArea.contains(x,y)){for(int i=0;i<this.subplots.size();i++){CategoryPlot subplot=(CategoryPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);subplot.handleClick(x,y,subplotInfo);}}}"
73	"public void test(){for(int i=0;i<this.subplots.size();i++){CategoryPlot subplot=(CategoryPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);subplot.handleClick(x,y,subplotInfo);}}"
74	"public void test(){DialLayer layer=(DialLayer)this.layers.get(index);if(layer!=null){layer.removeChangeListener(this);}this.layers.remove(index);fireChangeEvent();}"
75	"public void test(){DialPointer pointer=(DialPointer)this.pointers.get(index);if(pointer!=null){pointer.removeChangeListener(this);}this.pointers.remove(index);fireChangeEvent();}"
76	"public void test(){if(this.datasets.size()>index){result=(ValueDataset)this.datasets.get(index);}}"
77	"public void test(){ValueDataset existing=(ValueDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);}"
78	"public void test(){if(scale==null){throw new IllegalArgumentException(""Null \'scale\' argument."");}DialScale existing=(DialScale)this.scales.get(index);if(existing!=null){removeLayer(existing);}}"
79	"public void test(){if(this.scales.size()>index){result=(DialScale)this.scales.get(index);}}"
80	"public void test(){DialScale result=(DialScale)this.scales.get(0);Integer scaleIndex=(Integer)this.datasetToScaleMap.get(datasetIndex);if(scaleIndex!=null){result=getScale(scaleIndex.intValue());}return result;}"
81	"public void test(){if(index<this.domainAxes.size()){result=(ValueAxis)this.domainAxes.get(index);}}"
82	"public void test(){for(int i=0;i<this.domainAxes.size();i++){ValueAxis axis=(ValueAxis)this.domainAxes.get(i);if(axis!=null){axis.removeChangeListener(this);}}}"
83	"public void test(){for(int i=0;i<this.domainAxes.size();i++){ValueAxis axis=(ValueAxis)this.domainAxes.get(i);if(axis!=null){axis.configure();}}}"
84	"public void test(){if(index<this.domainAxisLocations.size()){result=(AxisLocation)this.domainAxisLocations.get(index);}}"
85	"public void test(){if(index<this.rangeAxes.size()){result=(ValueAxis)this.rangeAxes.get(index);}}"
86	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis axis=(ValueAxis)this.rangeAxes.get(i);if(axis!=null){axis.removeChangeListener(this);}}}"
87	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis axis=(ValueAxis)this.rangeAxes.get(i);if(axis!=null){axis.configure();}}}"
88	"public void test(){if(index<this.rangeAxisLocations.size()){result=(AxisLocation)this.rangeAxisLocations.get(index);}}"
89	"public void test(){if(this.datasets.size()>index){result=(XYDataset)this.datasets.get(index);}}"
90	"public void test(){if(dataset==this.datasets.get(i)){result=i;break;}}"
91	"public void test(){for(int i=0;i<count;i++){Object item=indices.get(i);if(!(item instanceof Integer)){throw new IllegalArgumentException(""Indices must be Integer instances."");}if(set.contains(item)){throw new IllegalArgumentException(""Indices must be unique."");}set.add(item);}}"
92	"public void test(){if(this.renderers.size()>index){result=(XYItemRenderer)this.renderers.get(index);}}"
93	"public void test(){if(this.datasets.get(i)==dataset){result=(XYItemRenderer)this.renderers.get(i);if(result==null){result=getRenderer();}break;}}"
94	"public void test(){Collection markers=(Collection)this.backgroundDomainMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}"
95	"public void test(){Collection markers=(Collection)this.foregroundDomainMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}"
96	"public void test(){markers=(Collection)this.foregroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundDomainMarkers.put(new Integer(index),markers);}}"
97	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
98	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));}}"
99	"public void test(){markers=(Collection)this.foregroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundRangeMarkers.put(new Integer(index),markers);}}"
100	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
101	"public void test(){Collection markers=(Collection)this.backgroundRangeMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}"
102	"public void test(){Collection markers=(Collection)this.foregroundRangeMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}"
103	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));}}"
104	"public void test(){for(int i=0;i<this.annotations.size();i++){XYAnnotation annotation=(XYAnnotation)this.annotations.get(i);annotation.removeChangeListener(this);}}"
105	"public void test(){for(int i=0;i<this.domainAxes.size();i++){Axis axis=(Axis)this.domainAxes.get(i);if(axis!=null){RectangleEdge edge=getDomainAxisEdge(i);space=axis.reserveSpace(g2,this,plotArea,edge,space);}}}"
106	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){Axis axis=(Axis)this.rangeAxes.get(i);if(axis!=null){RectangleEdge edge=getRangeAxisEdge(i);space=axis.reserveSpace(g2,this,plotArea,edge,space);}}}"
107	"public void test(){g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));AxisState domainAxisState=(AxisState)axisStateMap.get(getDomainAxis());if(domainAxisState==null){if(parentState!=null){domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());}}}"
108	"public void test(){if(parentState!=null){domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());}}"
109	"public void test(){if(domainAxisState==null){if(parentState!=null){domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());}}AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());if(rangeAxisState==null){if(parentState!=null){rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());}}}"
110	"public void test(){if(parentState!=null){rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());}}"
111	"public void test(){for(int index=0;index<this.domainAxes.size();index++){ValueAxis axis=(ValueAxis)this.domainAxes.get(index);if(axis!=null){axisCollection.add(axis,getDomainAxisEdge(index));}}}"
112	"public void test(){for(int index=0;index<this.rangeAxes.size();index++){ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(index);if(yAxis!=null){axisCollection.add(yAxis,getRangeAxisEdge(index));}}}"
113	"public void test(){ValueAxis valueAxis=null;List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getDomainAxis(axisIndex.intValue());}else {valueAxis=getDomainAxis(0);}}"
114	"public void test(){if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getDomainAxis(axisIndex.intValue());}else {valueAxis=getDomainAxis(0);}}"
115	"public void test(){ValueAxis valueAxis=null;List axisIndices=(List)this.datasetToRangeAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getRangeAxis(axisIndex.intValue());}else {valueAxis=getRangeAxis(0);}}"
116	"public void test(){if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getRangeAxis(axisIndex.intValue());}else {valueAxis=getRangeAxis(0);}}"
117	"public void test(){if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundDomainMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundDomainMarkers.get(key);}}"
118	"public void test(){if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundDomainMarkers.get(key);}}"
119	"public void test(){if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundRangeMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundRangeMarkers.get(key);}}"
120	"public void test(){if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundRangeMarkers.get(key);}}"
121	"public void test(){if(dataArea.contains(x,y)){ValueAxis xaxis=getDomainAxis();if(xaxis!=null){double hvalue=xaxis.java2DToValue(x,info.getDataArea(),getDomainAxisEdge());setDomainCrosshairValue(hvalue);}ValueAxis yaxis=getRangeAxis();if(yaxis!=null){double vvalue=yaxis.java2DToValue(y,info.getDataArea(),getRangeAxisEdge());setRangeCrosshairValue(vvalue);}}}"
122	"public void test(){if(yaxis!=null){double vvalue=yaxis.java2DToValue(y,info.getDataArea(),getRangeAxisEdge());setRangeCrosshairValue(vvalue);}}"
123	"public void test(){List mappedAxes=(List)this.datasetToDomainAxesMap.get(new Integer(i));if(mappedAxes==null){if(axisIndex.equals(ZERO)){result.add(this.datasets.get(i));}}else {if(mappedAxes.contains(axisIndex)){result.add(this.datasets.get(i));}}}"
124	"public void test(){if(axisIndex.equals(ZERO)){result.add(this.datasets.get(i));}}"
125	"public void test(){if(mappedAxes.contains(axisIndex)){result.add(this.datasets.get(i));}}"
126	"public void test(){List mappedAxes=(List)this.datasetToRangeAxesMap.get(new Integer(i));if(mappedAxes==null){if(axisIndex.equals(ZERO)){result.add(this.datasets.get(i));}}else {if(mappedAxes.contains(axisIndex)){result.add(this.datasets.get(i));}}}"
127	"public void test(){{ValueAxis domainAxis=(ValueAxis)this.domainAxes.get(i);if(domainAxis!=null){if(useAnchor){double sourceX=source.getX();if(this.orientation==PlotOrientation.HORIZONTAL){sourceX=source.getY();}double anchorX=domainAxis.java2DToValue(sourceX,info.getDataArea(),getDomainAxisEdge());domainAxis.resizeRange2(factor,anchorX);}else {domainAxis.resizeRange(factor);}}}}"
128	"public void test(){for(int i=0;i<this.domainAxes.size();i++){ValueAxis domainAxis=(ValueAxis)this.domainAxes.get(i);if(domainAxis!=null){domainAxis.zoomRange(lowerPercent,upperPercent);}}}"
129	"public void test(){{ValueAxis rangeAxis=(ValueAxis)this.rangeAxes.get(i);if(rangeAxis!=null){if(useAnchor){double sourceY=source.getY();if(this.orientation==PlotOrientation.HORIZONTAL){sourceY=source.getX();}double anchorY=rangeAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());rangeAxis.resizeRange2(factor,anchorY);}else {rangeAxis.resizeRange(factor);}}}}"
130	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis rangeAxis=(ValueAxis)this.rangeAxes.get(i);if(rangeAxis!=null){rangeAxis.zoomRange(lowerPercent,upperPercent);}}}"
131	"public void test(){for(int i=0;i<this.domainAxes.size();i++){ValueAxis axis=(ValueAxis)this.domainAxes.get(i);if(axis!=null){ValueAxis clonedAxis=(ValueAxis)axis.clone();clone.domainAxes.set(i,clonedAxis);clonedAxis.setPlot(clone);clonedAxis.addChangeListener(clone);}}}"
132	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis axis=(ValueAxis)this.rangeAxes.get(i);if(axis!=null){ValueAxis clonedAxis=(ValueAxis)axis.clone();clone.rangeAxes.set(i,clonedAxis);clonedAxis.setPlot(clone);clonedAxis.addChangeListener(clone);}}}"
133	"public void test(){XYItemRenderer renderer2=(XYItemRenderer)this.renderers.get(i);if(renderer2 instanceof PublicCloneable){PublicCloneable pc=(PublicCloneable)renderer2;XYItemRenderer rc=(XYItemRenderer)pc.clone();clone.renderers.set(i,rc);rc.setPlot(clone);rc.addChangeListener(clone);}}"
134	"public void test(){for(int i=0;i<domainAxisCount;i++){Axis axis=(Axis)this.domainAxes.get(i);if(axis!=null){axis.setPlot(this);axis.addChangeListener(this);}}}"
135	"public void test(){for(int i=0;i<rangeAxisCount;i++){Axis axis=(Axis)this.rangeAxes.get(i);if(axis!=null){axis.setPlot(this);axis.addChangeListener(this);}}}"
136	"public void test(){for(int i=0;i<datasetCount;i++){Dataset dataset=(Dataset)this.datasets.get(i);if(dataset!=null){dataset.addChangeListener(this);}}}"
137	"public void test(){for(int i=0;i<rendererCount;i++){XYItemRenderer renderer=(XYItemRenderer)this.renderers.get(i);if(renderer!=null){renderer.addChangeListener(this);}}}"
138	"public void test(){XYDataset dataset=(XYDataset)this.datasets.get(d);if(dataset==null){continue;}XYDatasetSelectionState state=findSelectionStateForDataset(dataset,source);}"
139	"public void test(){if(renderer.hitTest(xx,yy,g2,dataArea,this,getDomainAxisForDataset(d),getRangeAxisForDataset(d),dataset,s,i,rs,false)){state.setSelected(s,i,!state.isSelected(s,i));}}"
140	"public void test(){for(int d=0;d<datasetCount;d++){XYDataset dataset=(XYDataset)this.datasets.get(d);if(dataset instanceof AbstractXYDataset){AbstractXYDataset axyd=(AbstractXYDataset)dataset;if(axyd.getSelectionState()!=null){XYDatasetSelectionState selState=axyd.getSelectionState();selState.clearSelection();}}}}"
141	"public void test(){{CategoryPlot plot=(CategoryPlot)this.subplots.get(i);if(orientation==PlotOrientation.VERTICAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateDomainAxisSpace(g2,this.subplotArea[i],null);space.ensureAtLeast(subSpace);}}"
142	"public void test(){prefetchSectionPaints();int x=(int)area.getX();int y=(int)area.getY();int width=((int)area.getWidth())/displayCols;int height=((int)area.getHeight())/displayRows;}"
143	"public void test(){rect.setBounds(x+xoffset,y+(height*row),width,height);String title=null;if(this.dataExtractOrder==TableOrder.BY_ROW){title=this.dataset.getRowKey(pieIndex).toString();}else {title=this.dataset.getColumnKey(pieIndex).toString();}}"
144	"public void test(){if(key.equals(this.aggregatedItemsKey)){p=this.aggregatedItemsPaint;}else {p=(Paint)this.sectionPaints.get(key);}}"
145	"public void test(){if(p==null){p=(Paint)this.sectionPaints.get(key);if(p==null){p=getDrawingSupplier().getNextPaint();}}}"
146	"public void test(){String label=key.toString();String description=label;Paint paint=(Paint)this.sectionPaints.get(key);LegendItem item=new LegendItem(label,description,null,null,getLegendItemShape(),paint,Plot.DEFAULT_OUTLINE_STROKE,paint);item.setSeriesKey(key);}"
147	"public void test(){for(int i=0;i<this.subplotInfo.size();i++){PlotRenderingInfo info=(PlotRenderingInfo)this.subplotInfo.get(i);clone.subplotInfo.add(info.clone());}}"
148	"public void test(){for(int y=1;y<=ychips;y++){double upperLeftY=(startY-chipHeight)+(chipHeight*y);chip.setFrame(upperLeftX,upperLeftY,chipWidth,chipHeight);g2.setColor(Color.white);if(this.dataset.getChipValue(x-1,ychips-y)!=null){g2.setPaint(this.renderer.getChipColor(this.dataset.getChipValue(x-1,ychips-y)));}g2.fill(chip);g2.setColor(Color.lightGray);g2.draw(chip);}}"
149	"public void test(){double upperLeftY=(startY-chipHeight)+(chipHeight*y);chip.setFrame(upperLeftX,upperLeftY,chipWidth,chipHeight);g2.setColor(Color.white);if(this.dataset.getChipValue(x-1,ychips-y)!=null){g2.setPaint(this.renderer.getChipColor(this.dataset.getChipValue(x-1,ychips-y)));}}"
150	"public void test(){if(this.dataset.getChipValue(x-1,ychips-y)!=null){g2.setPaint(this.renderer.getChipColor(this.dataset.getChipValue(x-1,ychips-y)));}}"
151	"public void test(){for(int i=0;i<n;i++){XYPlot sub=(XYPlot)this.subplots.get(i);totalWeight+=sub.getWeight();}}"
152	"public void test(){{XYPlot plot=(XYPlot)this.subplots.get(i);if(orientation==PlotOrientation.HORIZONTAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateRangeAxisSpace(g2,this.subplotAreas[i],null);space.ensureAtLeast(subSpace);}}"
153	"public void test(){for(int i=0;i<this.subplots.size();i++){XYPlot plot=(XYPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=null;if(info!=null){subplotInfo=new PlotRenderingInfo(info.getOwner());info.addSubplotInfo(subplotInfo);}plot.draw(g2,this.subplotAreas[i],anchor,parentState,subplotInfo);}}"
154	"public void test(){if(subplotIndex>=0){result=(XYPlot)this.subplots.get(subplotIndex);}}"
155	"public void test(){if(dataArea.contains(x,y)){for(int i=0;i<this.subplots.size();i++){XYPlot subplot=(XYPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);subplot.handleClick(x,y,subplotInfo);}}}"
156	"public void test(){for(int i=0;i<this.subplots.size();i++){XYPlot subplot=(XYPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);subplot.handleClick(x,y,subplotInfo);}}"
157	"public void test(){if(this.explodePercentages!=null){Number percent=(Number)this.explodePercentages.get(key);if(percent!=null){result=percent.doubleValue();}}}"
158	"public void test(){while(iterator.hasNext()){Comparable key=(Comparable)iterator.next();Number explode=(Number)this.explodePercentages.get(key);if(explode!=null){result=Math.max(result,explode.doubleValue());}}}"
159	"public void test(){Arc2D arc=new Arc2D.Double(labelsArea,getStartAngle(),mid-getStartAngle(),Arc2D.OPEN);int x=(int)arc.getEndPoint().getX();int y=(int)arc.getEndPoint().getY();PieSectionLabelGenerator labelGenerator=getLabelGenerator();if(labelGenerator==null){continue;}}"
160	"public void test(){Rectangle2D out=this.labelPadding.createOutsetRectangle(bounds);Shape bg=ShapeUtilities.createTranslatedShape(out,x-bounds.getCenterX(),y-bounds.getCenterY());if(this.labelShadowPaint!=null&&this.shadowGenerator==null){Shape shadow=ShapeUtilities.createTranslatedShape(bg,this.shadowXOffset,this.shadowYOffset);g2.setPaint(this.labelShadowPaint);g2.fill(shadow);}}"
161	"public void test(){if(this.labelOutlinePaint!=null&&this.labelOutlineStroke!=null){g2.setPaint(this.labelOutlinePaint);g2.setStroke(this.labelOutlineStroke);g2.draw(bg);}g2.setPaint(this.labelPaint);g2.setFont(this.labelFont);TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(),key),g2,x,y,TextAnchor.CENTER);}"
162	"public void test(){arc=(Arc2D.Double)arcList.get(categoryIndex);if(arc==null){continue;}Comparable key=getSectionKey(categoryIndex);}"
163	"public void test(){arc=(Arc2D.Double)arcList.get(sectionIndex);if(arc==null){continue;}upperArc=new Arc2D.Double(arcX,arcY,pieArea.getWidth(),pieArea.getHeight()-depth,arc.getAngleStart(),arc.getAngleExtent(),Arc2D.PIE);}"
164	"public void test(){if(arc==null){continue;}upperArc=new Arc2D.Double(arcX,arcY,pieArea.getWidth(),pieArea.getHeight()-depth,arc.getAngleStart(),arc.getAngleExtent(),Arc2D.PIE);Comparable currentKey=(Comparable)sectionKeys.get(sectionIndex);paint=lookupSectionPaint(currentKey,true);outlinePaint=lookupSectionOutlinePaint(currentKey,false);}"
165	"public void test(){if(index<this.domainAxes.size()){result=(CategoryAxis)this.domainAxes.get(index);}}"
166	"public void test(){CategoryAxis existing=(CategoryAxis)this.domainAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
167	"public void test(){for(int i=0;i<this.domainAxes.size();i++){CategoryAxis axis=(CategoryAxis)this.domainAxes.get(i);if(axis!=null){axis.removeChangeListener(this);}}}"
168	"public void test(){for(int i=0;i<this.domainAxes.size();i++){CategoryAxis axis=(CategoryAxis)this.domainAxes.get(i);if(axis!=null){axis.configure();}}}"
169	"public void test(){ValueAxis existing=(ValueAxis)this.rangeAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
170	"public void test(){if(this.datasets.size()>index){result=(CategoryDataset)this.datasets.get(index);}}"
171	"public void test(){CategoryDataset existing=(CategoryDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);}"
172	"public void test(){CategoryAxis axis=null;List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getDomainAxis(axisIndex.intValue());}else {axis=getDomainAxis(0);}}"
173	"public void test(){if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getDomainAxis(axisIndex.intValue());}else {axis=getDomainAxis(0);}}"
174	"public void test(){ValueAxis axis=null;List axisIndices=(List)this.datasetToRangeAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getRangeAxis(axisIndex.intValue());}else {axis=getRangeAxis(0);}}"
175	"public void test(){if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getRangeAxis(axisIndex.intValue());}else {axis=getRangeAxis(0);}}"
176	"public void test(){if(this.renderers.size()>index){result=(CategoryItemRenderer)this.renderers.get(index);}}"
177	"public void test(){CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);}"
178	"public void test(){if(this.datasets.get(i)==dataset){result=(CategoryItemRenderer)this.renderers.get(i);break;}}"
179	"public void test(){if(dataArea.contains(x,y)){double java2D=0.0;if(this.orientation==PlotOrientation.HORIZONTAL){java2D=x;}else if(this.orientation==PlotOrientation.VERTICAL){java2D=y;}RectangleEdge edge=Plot.resolveRangeAxisLocation(getRangeAxisLocation(),this.orientation);double value=getRangeAxis().java2DToValue(java2D,info.getDataArea(),edge);setAnchorValue(value);setRangeCrosshairValue(value);}}"
180	"public void test(){if(this.orientation==PlotOrientation.VERTICAL){java2D=y;}}"
181	"public void test(){for(int i=0;i<this.annotations.size();i++){CategoryAnnotation annotation=(CategoryAnnotation)this.annotations.get(i);annotation.removeChangeListener(this);}}"
182	"public void test(){for(int i=0;i<this.domainAxes.size();i++){Axis xAxis=(Axis)this.domainAxes.get(i);if(xAxis!=null){RectangleEdge edge=getDomainAxisEdge(i);space=xAxis.reserveSpace(g2,this,plotArea,edge,space);}}}"
183	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){Axis yAxis=(Axis)this.rangeAxes.get(i);if(yAxis!=null){RectangleEdge edge=getRangeAxisEdge(i);space=yAxis.reserveSpace(g2,this,plotArea,edge,space);}}}"
184	"public void test(){drawDomainGridlines(g2,dataArea);AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());if(rangeAxisState==null){if(parentState!=null){rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());}}}"
185	"public void test(){for(int index=0;index<this.domainAxes.size();index++){CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);if(xAxis!=null){axisCollection.add(xAxis,getDomainAxisEdge(index));}}}"
186	"public void test(){{List mappedAxes=(List)this.datasetToDomainAxesMap.get(new Integer(i));CategoryDataset dataset=(CategoryDataset)this.datasets.get(i);if(mappedAxes==null){if(key.equals(ZERO)){if(dataset!=null){result.add(dataset);}}}else {if(mappedAxes.contains(key)){if(dataset!=null){result.add(dataset);}}}}}"
187	"public void test(){List mappedAxes=(List)this.datasetToRangeAxesMap.get(new Integer(i));if(mappedAxes==null){if(key.equals(ZERO)){result.add(this.datasets.get(i));}}else {if(mappedAxes.contains(key)){result.add(this.datasets.get(i));}}}"
188	"public void test(){if(key.equals(ZERO)){result.add(this.datasets.get(i));}}"
189	"public void test(){if(mappedAxes.contains(key)){result.add(this.datasets.get(i));}}"
190	"public void test(){for(int i=0;i<this.domainAxes.size();i++){CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(i);if(xAxis!=null){CategoryAxis clonedAxis=(CategoryAxis)xAxis.clone();clone.setDomainAxis(i,clonedAxis);}}}"
191	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(i);if(yAxis!=null){ValueAxis clonedAxis=(ValueAxis)yAxis.clone();clone.setRangeAxis(i,clonedAxis);}}}"
192	"public void test(){CategoryItemRenderer renderer2=(CategoryItemRenderer)this.renderers.get(i);if(renderer2 instanceof PublicCloneable){PublicCloneable pc=(PublicCloneable)renderer2;CategoryItemRenderer rc=(CategoryItemRenderer)pc.clone();clone.renderers.set(i,rc);rc.setPlot(clone);rc.addChangeListener(clone);}}"
193	"public void test(){while(iterator.hasNext()){Object key=iterator.next();List entry=(List)map.get(key);Object toAdd=ObjectUtilities.deepClone(entry);clone.put(key,toAdd);}}"
194	"public void test(){for(int i=0;i<this.domainAxes.size();i++){CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(i);if(xAxis!=null){xAxis.setPlot(this);xAxis.addChangeListener(this);}}}"
195	"public void test(){for(int i=0;i<this.rangeAxes.size();i++){ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(i);if(yAxis!=null){yAxis.setPlot(this);yAxis.addChangeListener(this);}}}"
196	"public void test(){for(int i=0;i<rendererCount;i++){CategoryItemRenderer renderer=(CategoryItemRenderer)this.renderers.get(i);if(renderer!=null){renderer.addChangeListener(this);}}}"
197	"public void test(){CategoryDataset dataset=(CategoryDataset)this.datasets.get(d);if(dataset==null){continue;}CategoryDatasetSelectionState state=findSelectionStateForDataset(dataset,source);}"
198	"public void test(){if(renderer.hitTest(x,y,null,dataArea,this,getDomainAxisForDataset(d),getRangeAxisForDataset(d),dataset,r,c,false,rs)){state.setSelected(r,c,!state.isSelected(r,c));}}"
199	"public void test(){for(int d=0;d<datasetCount;d++){CategoryDataset dataset=(CategoryDataset)this.datasets.get(d);if(dataset instanceof SelectableCategoryDataset){SelectableCategoryDataset scd=(SelectableCategoryDataset)dataset;if(scd.getSelectionState()!=null){CategoryDatasetSelectionState selState=scd.getSelectionState();selState.clearSelection();}}}}"
200	"public void test(){{XYPlot plot=(XYPlot)this.subplots.get(i);if(orientation==PlotOrientation.VERTICAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateDomainAxisSpace(g2,this.subplotAreas[i],null);space.ensureAtLeast(subSpace);}}"
201	"public void test(){if((index<0)||(index>=getSubtitleCount())){throw new IllegalArgumentException(""Index out of range."");}return (Title)this.subtitles.get(index);}"
202	"public void test(){Object val=this.renderingHints.get(RenderingHints.KEY_ANTIALIASING);return RenderingHints.VALUE_ANTIALIAS_ON.equals(val);}"
203	"public void test(){Object val=this.renderingHints.get(RenderingHints.KEY_ANTIALIASING);if(val==null){val=RenderingHints.VALUE_ANTIALIAS_DEFAULT;}if(!flag&&RenderingHints.VALUE_ANTIALIAS_OFF.equals(val)||flag&&RenderingHints.VALUE_ANTIALIAS_ON.equals(val)){return ;}}"
204	"public void test(){Insets insets=getInsets();int x=(int)(java2DPoint.getX()*this.scaleX+insets.left);int y=(int)(java2DPoint.getY()*this.scaleY+insets.top);return new Point(x,y);}"
205	"public void test(){Insets insets=getInsets();int x=(int)((e.getX()-insets.left)/this.scaleX);int y=(int)((e.getY()-insets.top)/this.scaleY);ChartEntity entity=null;if(this.info!=null){EntityCollection entities=this.info.getEntityCollection();if(entities!=null){entity=entities.getEntity(x,y);}}}"
206	"public void test(){if(entities!=null){entity=entities.getEntity(x,y);}}"
207	"public void test(){Point2D selectOrigin=translateScreenToJava2D(new Point(x,y));int subplotIndex=plotInfo.getSubplotIndex(selectOrigin);if(subplotIndex==-1){return null;}}"
208	"public void test(){if(this.zoomOutBothMenuItem!=null){this.zoomOutBothMenuItem.setEnabled(isDomainZoomable&&isRangeZoomable);}if(this.zoomResetBothMenuItem!=null){this.zoomResetBothMenuItem.setEnabled(isDomainZoomable&&isRangeZoomable);}this.popup.show(this,x,y);}"
209	"public void test(){for(int i=0;i<legendItems.getItemCount();i++){LegendItem item=legendItems.get(i);Block block=createLegendItemBlock(item);this.items.add(block);}}"
210	"public void test(){String strToReturn;try{strToReturn=(String)this.symbols.get((int)value);}catch (IndexOutOfBoundsException ex) {  strToReturn="""";}return strToReturn;}"
211	"public void test(){if(RectangleEdge.isTopOrBottom(edge)){xx=(float)(x0+(i+0.5)*width);yy=(float)area.getCenterY();}else {xx=(float)area.getCenterX();yy=(float)(y0+(i+0.5)*height);}String label=this.subCategories.get(i).toString();TextUtilities.drawRotatedString(label,g2,xx,yy,TextAnchor.CENTER,0.0,TextAnchor.CENTER);}"
212	"public void test(){int index=Collections.binarySearch(this.tickUnits,unit);if(index>=0){index=index+1;}else {index=-index;}return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}"
213	"public void test(){if(index>=0){return (TickUnit)this.tickUnits.get(index);}else {index=-(index+1);return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}}"
214	"public void test(){this.calendar.setTime(date);int month=this.calendar.get(Calendar.MONTH);toAppendTo.append(this.months[month]);if(this.showYear[month]){toAppendTo.append(this.yearFormatter.format(date));}return toAppendTo;}"
215	"public void test(){this.timeZone=timeZone;this.locale=locale;this.calendar=Calendar.getInstance(timeZone,locale);this.first.peg(this.calendar);this.last.peg(this.calendar);}"
216	"public void test(){this.locale=locale;this.calendar=Calendar.getInstance(timeZone,locale);this.first.peg(this.calendar);this.last.peg(this.calendar);this.autoRangeTimePeriodClass=first.getClass();}"
217	"public void test(){this.calendar=Calendar.getInstance(timeZone,locale);this.first.peg(this.calendar);this.last.peg(this.calendar);this.autoRangeTimePeriodClass=first.getClass();this.majorTickTimePeriodClass=first.getClass();}"
218	"public void test(){if(first==null){throw new IllegalArgumentException(""Null \'first\' argument."");}this.first=first;this.first.peg(this.calendar);notifyListeners(new AxisChangeEvent(this));}"
219	"public void test(){if(last==null){throw new IllegalArgumentException(""Null \'last\' argument."");}this.last=last;this.last.peg(this.calendar);notifyListeners(new AxisChangeEvent(this));}"
220	"public void test(){if(zone==null){throw new IllegalArgumentException(""Null \'zone\' argument."");}this.timeZone=zone;this.calendar=Calendar.getInstance(zone,this.locale);this.first.peg(this.calendar);this.last.peg(this.calendar);notifyListeners(new AxisChangeEvent(this));}"
221	"public void test(){long upper=Math.round(range.getUpperBound());long lower=Math.round(range.getLowerBound());this.first=createInstance(this.autoRangeTimePeriodClass,new Date(lower),this.timeZone,this.locale);this.last=createInstance(this.autoRangeTimePeriodClass,new Date(upper),this.timeZone,this.locale);super.setRange(new Range(this.first.getFirstMillisecond(),this.last.getLastMillisecond()+1.0),turnOffAutoRange,notify);}"
222	"public void test(){double insideLength=getTickMarkInsideLength();double outsideLength=getTickMarkOutsideLength();RegularTimePeriod t=createInstance(this.majorTickTimePeriodClass,this.first.getStart(),getTimeZone(),this.locale);long t0=t.getFirstMillisecond();Line2D inside=null;}"
223	"public void test(){if(tt0>=firstOnAxis){g2.setPaint(this.minorTickMarkPaint);g2.setStroke(this.minorTickMarkStroke);g2.draw(inside);g2.draw(outside);}tminor=tminor.next();tminor.peg(this.calendar);tt0=tminor.getFirstMillisecond();}"
224	"public void test(){g2.setFont(this.labelInfo[band].getLabelFont());g2.setPaint(this.labelInfo[band].getLabelPaint());RegularTimePeriod p1=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);RegularTimePeriod p2=this.labelInfo[band].createInstance(new Date(axisMax),this.timeZone,this.locale);String label1=this.labelInfo[band].getDateFormat().format(new Date(p1.getMiddleMillisecond()));}"
225	"public void test(){g2.setPaint(this.labelInfo[band].getLabelPaint());RegularTimePeriod p1=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);RegularTimePeriod p2=this.labelInfo[band].createInstance(new Date(axisMax),this.timeZone,this.locale);String label1=this.labelInfo[band].getDateFormat().format(new Date(p1.getMiddleMillisecond()));String label2=this.labelInfo[band].getDateFormat().format(new Date(p2.getMiddleMillisecond()));}"
226	"public void test(){long length=p1.getLastMillisecond()-p1.getFirstMillisecond();int periods=(int)(ww/length)+1;RegularTimePeriod p=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);Rectangle2D b=null;long lastXX=0L;}"
227	"public void test(){lastXX=last;for(int i=0;i<periods;i++){p=p.next();}p.peg(this.calendar);}"
228	"public void test(){long upper=Math.round(r.getUpperBound());long lower=Math.round(r.getLowerBound());this.first=createInstance(this.autoRangeTimePeriodClass,new Date(lower),this.timeZone,this.locale);this.last=createInstance(this.autoRangeTimePeriodClass,new Date(upper),this.timeZone,this.locale);setRange(r,false,false);}"
229	"public void test(){long lower=Math.round(r.getLowerBound());this.first=createInstance(this.autoRangeTimePeriodClass,new Date(lower),this.timeZone,this.locale);this.last=createInstance(this.autoRangeTimePeriodClass,new Date(upper),this.timeZone,this.locale);setRange(r,false,false);}"
230	"public void test(){this.calendar.setTime(date);int year=this.calendar.get(Calendar.YEAR);int month=this.calendar.get(Calendar.MONTH);int quarter=month/3;}"
231	"public void test(){int months;int years;Calendar calendar=Calendar.getInstance(this.timeZone,this.locale);calendar.setTime(date);int count=unit.getMultiple();}"
232	"public void test(){int years;Calendar calendar=Calendar.getInstance(this.timeZone,this.locale);calendar.setTime(date);int count=unit.getMultiple();int current=calendar.get(unit.getCalendarField());}"
233	"public void test(){calendar.setTime(date);int count=unit.getMultiple();int current=calendar.get(unit.getCalendarField());int value=count*(current/count);DateTickUnitType t=unit.getUnitType();}"
234	"public void test(){years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);}"
235	"public void test(){years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);}"
236	"public void test(){months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);seconds=calendar.get(Calendar.SECOND);}"
237	"public void test(){days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);}"
238	"public void test(){hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);calendar.set(Calendar.MILLISECOND,value);}"
239	"public void test(){minutes=calendar.get(Calendar.MINUTE);seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);calendar.set(Calendar.MILLISECOND,value);Date mm=calendar.getTime();}"
240	"public void test(){seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);calendar.set(Calendar.MILLISECOND,value);Date mm=calendar.getTime();if(mm.getTime()>=date.getTime()){calendar.set(Calendar.MILLISECOND,value-1);mm=calendar.getTime();}}"
241	"public void test(){calendar.set(Calendar.MILLISECOND,value);Date mm=calendar.getTime();if(mm.getTime()>=date.getTime()){calendar.set(Calendar.MILLISECOND,value-1);mm=calendar.getTime();}}"
242	"public void test(){if(mm.getTime()>=date.getTime()){calendar.set(Calendar.MILLISECOND,value-1);mm=calendar.getTime();}}"
243	"public void test(){months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);}"
244	"public void test(){hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);if(this.tickMarkPosition==DateTickMarkPosition.START){milliseconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){milliseconds=500;}else {milliseconds=999;}}"
245	"public void test(){if(this.tickMarkPosition==DateTickMarkPosition.START){milliseconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){milliseconds=500;}else {milliseconds=999;}calendar.set(Calendar.MILLISECOND,milliseconds);calendar.set(years,months,days,hours,minutes,value);}"
246	"public void test(){calendar.set(Calendar.MILLISECOND,milliseconds);calendar.set(years,months,days,hours,minutes,value);Date dd=calendar.getTime();if(dd.getTime()>=date.getTime()){calendar.set(Calendar.SECOND,value-1);dd=calendar.getTime();}}"
247	"public void test(){calendar.set(years,months,days,hours,minutes,value);Date dd=calendar.getTime();if(dd.getTime()>=date.getTime()){calendar.set(Calendar.SECOND,value-1);dd=calendar.getTime();}}"
248	"public void test(){if(dd.getTime()>=date.getTime()){calendar.set(Calendar.SECOND,value-1);dd=calendar.getTime();}}"
249	"public void test(){days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);if(this.tickMarkPosition==DateTickMarkPosition.START){seconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){seconds=30;}else {seconds=59;}}"
250	"public void test(){if(this.tickMarkPosition==DateTickMarkPosition.START){seconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){seconds=30;}else {seconds=59;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,hours,value,seconds);}"
251	"public void test(){calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,hours,value,seconds);Date d0=calendar.getTime();if(d0.getTime()>=date.getTime()){calendar.set(Calendar.MINUTE,value-1);d0=calendar.getTime();}}"
252	"public void test(){calendar.set(years,months,days,hours,value,seconds);Date d0=calendar.getTime();if(d0.getTime()>=date.getTime()){calendar.set(Calendar.MINUTE,value-1);d0=calendar.getTime();}}"
253	"public void test(){if(d0.getTime()>=date.getTime()){calendar.set(Calendar.MINUTE,value-1);d0=calendar.getTime();}}"
254	"public void test(){calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,value,minutes,seconds);Date d1=calendar.getTime();if(d1.getTime()>=date.getTime()){calendar.set(Calendar.HOUR_OF_DAY,value-1);d1=calendar.getTime();}}"
255	"public void test(){calendar.set(years,months,days,value,minutes,seconds);Date d1=calendar.getTime();if(d1.getTime()>=date.getTime()){calendar.set(Calendar.HOUR_OF_DAY,value-1);d1=calendar.getTime();}}"
256	"public void test(){if(d1.getTime()>=date.getTime()){calendar.set(Calendar.HOUR_OF_DAY,value-1);d1=calendar.getTime();}}"
257	"public void test(){calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,value,hours,0,0);Date d2=calendar.getTime();if(d2.getTime()>=date.getTime()){calendar.set(Calendar.DATE,value-1);d2=calendar.getTime();}}"
258	"public void test(){calendar.set(years,months,value,hours,0,0);Date d2=calendar.getTime();if(d2.getTime()>=date.getTime()){calendar.set(Calendar.DATE,value-1);d2=calendar.getTime();}}"
259	"public void test(){if(d2.getTime()>=date.getTime()){calendar.set(Calendar.DATE,value-1);d2=calendar.getTime();}}"
260	"public void test(){years=calendar.get(Calendar.YEAR);calendar.clear(Calendar.MILLISECOND);calendar.set(years,value,1,0,0,0);Month month=new Month(calendar.getTime(),this.timeZone,this.locale);}"
261	"public void test(){years=calendar.get(Calendar.YEAR);calendar.clear(Calendar.MILLISECOND);calendar.set(years,value,1,0,0,0);Month month=new Month(calendar.getTime(),this.timeZone,this.locale);Date standardDate=calculateDateForPosition(month,this.tickMarkPosition);}"
262	"public void test(){calendar.clear(Calendar.MILLISECOND);calendar.set(years,value,1,0,0,0);Month month=new Month(calendar.getTime(),this.timeZone,this.locale);Date standardDate=calculateDateForPosition(month,this.tickMarkPosition);long millis=standardDate.getTime();}"
263	"public void test(){calendar.clear(Calendar.MILLISECOND);calendar.set(value,months,days,0,0,0);Date d3=calendar.getTime();if(d3.getTime()>=date.getTime()){calendar.set(Calendar.YEAR,value-1);d3=calendar.getTime();}}"
264	"public void test(){calendar.set(value,months,days,0,0,0);Date d3=calendar.getTime();if(d3.getTime()>=date.getTime()){calendar.set(Calendar.YEAR,value-1);d3=calendar.getTime();}}"
265	"public void test(){if(d3.getTime()>=date.getTime()){calendar.set(Calendar.YEAR,value-1);d3=calendar.getTime();}}"
266	"public void test(){Date previous=previousStandardDate(date,unit);Calendar calendar=Calendar.getInstance(this.timeZone,this.locale);calendar.setTime(previous);calendar.add(unit.getCalendarField(),unit.getMultiple());return calendar.getTime();}"
267	"public void test(){{TextBlock label=super.createLabel(category,width,edge,g2);String s=(String)this.sublabels.get(category);if(s!=null){if(edge==RectangleEdge.TOP||edge==RectangleEdge.BOTTOM){TextLine line=new TextLine(s,this.sublabelFont,this.sublabelPaint);label.addLine(line);}else if(edge==RectangleEdge.LEFT||edge==RectangleEdge.RIGHT){TextLine line=label.getLastLine();if(line!=null){line.addFragment(new TextFragment(""  ""+s,this.sublabelFont,this.sublabelPaint));}}}return label;}}"
268	"public void test(){if(category==null){throw new IllegalArgumentException(""Null \'category\' argument."");}Font result=(Font)this.tickLabelFontMap.get(category);if(result==null){result=getTickLabelFont();}return result;}"
269	"public void test(){if(category==null){throw new IllegalArgumentException(""Null \'category\' argument."");}Paint result=(Paint)this.tickLabelPaintMap.get(category);if(result==null){result=getTickLabelPaint();}return result;}"
270	"public void test(){if(category==null){throw new IllegalArgumentException(""Null \'category\' argument."");}return (String)this.categoryLabelToolTips.get(category);}"
271	"public void test(){while(iterator.hasNext()){Comparable key=(Comparable)iterator.next();out.writeObject(key);SerialUtilities.writePaint((Paint)map.get(key),out);}}"
272	"public void test(){while(iterator.hasNext()){Map.Entry entry=(Map.Entry)iterator.next();Paint p1=(Paint)entry.getValue();Paint p2=(Paint)map2.get(entry.getKey());if(!PaintUtilities.equal(p1,p2)){return false;}}}"
273	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(base);calendar.add(this.unitType.getCalendarField(),this.count);return calendar.getTime();}"
274	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(base);calendar.add(this.rollUnitType.getCalendarField(),this.rollCount);return calendar.getTime();}"
275	"public void test(){while(cal.get(Calendar.DAY_OF_WEEK)!=Calendar.MONDAY){cal.add(Calendar.DATE,1);}}"
276	"public void test(){while((p=binarySearchExceptionSegments(segment))>=0){segment=getSegment(millisecond=((Segment)this.exceptionSegments.get(p)).getSegmentEnd()+1);}}"
277	"public void test(){if(this.adjustForDaylightSaving){this.workingCalendarNoDST.setTime(new Date(date));this.workingCalendar.set(this.workingCalendarNoDST.get(Calendar.YEAR),this.workingCalendarNoDST.get(Calendar.MONTH),this.workingCalendarNoDST.get(Calendar.DATE),this.workingCalendarNoDST.get(Calendar.HOUR_OF_DAY),this.workingCalendarNoDST.get(Calendar.MINUTE),this.workingCalendarNoDST.get(Calendar.SECOND));this.workingCalendar.set(Calendar.MILLISECOND,this.workingCalendarNoDST.get(Calendar.MILLISECOND));result=this.workingCalendar.getTime().getTime();}}"
278	"public void test(){int mid=(low+high)/2;Segment midSegment=(Segment)this.exceptionSegments.get(mid);if(segment.contains(midSegment)||midSegment.contains(segment)){return mid;}}"
279	"public void test(){if(this.adjustForDaylightSaving){this.workingCalendar.setTime(date);this.workingCalendarNoDST.set(this.workingCalendar.get(Calendar.YEAR),this.workingCalendar.get(Calendar.MONTH),this.workingCalendar.get(Calendar.DATE),this.workingCalendar.get(Calendar.HOUR_OF_DAY),this.workingCalendar.get(Calendar.MINUTE),this.workingCalendar.get(Calendar.SECOND));this.workingCalendarNoDST.set(Calendar.MILLISECOND,this.workingCalendar.get(Calendar.MILLISECOND));Date revisedDate=this.workingCalendarNoDST.getTime();result=revisedDate.getTime();}}"
280	"public void test(){Integer key=new Integer(series);List labelList=(List)this.seriesLabelLists.get(key);if(labelList==null){labelList=new java.util.ArrayList();this.seriesLabelLists.put(key,labelList);}labelList.add(label);}"
281	"public void test(){Integer key=new Integer(series);List extraLabels=(List)this.seriesLabelLists.get(key);if(extraLabels!=null){Object[] temp=new Object[1];for(int i=0;i<extraLabels.size();i++){temp[0]=extraLabels.get(i);String labelAddition=MessageFormat.format(this.additionalFormatPattern,temp);label.append(labelAddition);}}}"
282	"public void test(){for(int i=0;i<extraLabels.size();i++){temp[0]=extraLabels.get(i);String labelAddition=MessageFormat.format(this.additionalFormatPattern,temp);label.append(labelAddition);}}"
283	"public void test(){Object key=iterator.next();Object entry=this.seriesLabelLists.get(key);Object toAdd=entry;if(entry instanceof PublicCloneable){PublicCloneable pc=(PublicCloneable)entry;toAdd=pc.clone();}}"
284	"public void test(){int result=0;List tooltips=(List)this.toolTipSeries.get(list);if(tooltips!=null){result=tooltips.size();}return result;}"
285	"public void test(){if(series<getListCount()){List tooltips=(List)this.toolTipSeries.get(series);if(tooltips!=null){if(item<tooltips.size()){result=(String)tooltips.get(item);}}}}"
286	"public void test(){if(item<tooltips.size()){result=(String)tooltips.get(item);}}"
287	"public void test(){if(index>=0){last=(TextLine)this.lines.get(index);}}"
288	"public void test(){if(this.fragments.size()>0){result=(TextFragment)this.fragments.get(0);}}"
289	"public void test(){if(this.fragments.size()>0){result=(TextFragment)this.fragments.get(this.fragments.size()-1);}}"
290	"public void test(){Number result=null;DefaultKeyedValues rowData=(DefaultKeyedValues)this.rows.get(row);if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getValue(index);}}}"
291	"public void test(){if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getValue(index);}}}"
292	"public void test(){if(row>=0){DefaultKeyedValues rowData=(DefaultKeyedValues)this.rows.get(row);int col=rowData.getIndex(columnKey);return (col>=0?rowData.getValue(col):null);}else {throw new UnknownKeyException(""Unrecognised rowKey: ""+rowKey);}}"
293	"public void test(){int rowIndex=getRowIndex(rowKey);DefaultKeyedValues row=(DefaultKeyedValues)this.rows.get(rowIndex);for(int item=0,itemCount=row.getItemCount();item<itemCount;item++){if(row.getValue(item)!=null){allNull=false;break;}}}"
294	"public void test(){for(int item=0,itemCount=this.rows.size();item<itemCount;item++){row=(DefaultKeyedValues)this.rows.get(item);int columnIndex=row.getIndex(columnKey);if(columnIndex>=0&&row.getValue(columnIndex)!=null){allNull=false;break;}}}"
295	"public void test(){for(int item=0,itemCount=this.rows.size();item<itemCount;item++){row=(DefaultKeyedValues)this.rows.get(item);int columnIndex=row.getIndex(columnKey);if(columnIndex>=0){row.removeValue(columnIndex);}}}"
296	"public void test(){Object result=null;KeyedObjects rowData=(KeyedObjects)this.rows.get(row);if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}}"
297	"public void test(){if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}}"
298	"public void test(){if(column<0){throw new UnknownKeyException(""Column key (""+columnKey);}KeyedObjects rowData=(KeyedObjects)this.rows.get(row);int index=rowData.getIndex(columnKey);}"
299	"public void test(){if(rowIndex>=0){row=(KeyedObjects)this.rows.get(rowIndex);}else {this.rowKeys.add(rowKey);row=new KeyedObjects();this.rows.add(row);}}"
300	"public void test(){boolean allNull=true;KeyedObjects row=(KeyedObjects)this.rows.get(rowIndex);for(int item=0,itemCount=row.getItemCount();item<itemCount;item++){if(row.getObject(item)!=null){allNull=false;break;}}}"
301	"public void test(){for(int item=0,itemCount=this.rows.size();item<itemCount;item++){row=(KeyedObjects)this.rows.get(item);int colIndex=row.getIndex(columnKey);if(colIndex>=0&&row.getObject(colIndex)!=null){allNull=false;break;}}}"
302	"public void test(){for(int item=0,itemCount=this.rows.size();item<itemCount;item++){row=(KeyedObjects)this.rows.get(item);int colIndex=row.getIndex(columnKey);if(colIndex>=0){row.removeValue(colIndex);}}}"
303	"public void test(){if(x==null){throw new IllegalArgumentException(""Null \'x\' argument."");}this.x=x;this.obj=y;}"
304	"public void test(){Object result=null;KeyedObject kobj=(KeyedObject)this.data.get(item);if(kobj!=null){result=kobj.getObject();}return result;}"
305	"public void test(){Comparable result=null;KeyedObject item=(KeyedObject)this.data.get(index);if(item!=null){result=item.getKey();}return result;}"
306	"public void test(){if(keyIndex>=0){KeyedObject ko=(KeyedObject)this.data.get(keyIndex);ko.setObject(object);}else {KeyedObject ko=new KeyedObject(key,object);this.data.add(ko);}}"
307	"public void test(){if(fieldIndex==0){String key=line.substring(start,i);rowKey=removeStringDelimiters(key);}else {Double value=Double.valueOf(removeStringDelimiters(line.substring(start,i)));dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex-1));}}"
308	"public void test(){for(int i=0;i<line.length();i++){if(line.charAt(i)==this.fieldDelimiter){if(fieldIndex==0){String key=line.substring(start,i);rowKey=removeStringDelimiters(key);}else {Double value=Double.valueOf(removeStringDelimiters(line.substring(start,i)));dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex-1));}start=i+1;fieldIndex++;}}Double value=Double.valueOf(removeStringDelimiters(line.substring(start,line.length())));dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex-1));}"
309	"public void test(){for(int i=0;i<this.data.size();i++){VectorSeries series=(VectorSeries)this.data.get(i);series.removeChangeListener(this);}}"
310	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (VectorSeries)this.data.get(series);}"
311	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getXValue();}"
312	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getYValue();}"
313	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVector();}"
314	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVectorX();}"
315	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVectorY();}"
316	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (Comparable)this.seriesKeys.get(series);}"
317	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}double[][] seriesArray=(double[][])this.seriesList.get(series);return seriesArray[0].length;}"
318	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[0][item];}"
319	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[3][item];}"
320	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[1][item];}"
321	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[2][item];}"
322	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[4][item];}"
323	"public void test(){double[][] seriesData=(double[][])this.seriesList.get(series);return seriesData[5][item];}"
324	"public void test(){double[][] d1=(double[][])this.seriesList.get(i);double[][] d2=(double[][])that.seriesList.get(i);double[] d1x=d1[0];double[] d2x=d2[0];}"
325	"public void test(){double[][] data=(double[][])this.seriesList.get(i);double[] x=data[0];double[] xStart=data[1];double[] xEnd=data[2];}"
326	"public void test(){int i=getItemRow(itemIndex);int j=getItemColumn(itemIndex);double mij=get(i,j)*this.m_scaleFactor;Number n=new Double(mij/this.m_totalSum);return n;}"
327	"public void test(){this.m_totalSum-=get(i,j);this.m_totalSum+=mij;super.update(i,j,mij);}"
328	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (XIntervalSeries)this.data.get(series);}"
329	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return di.getX();}"
330	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);return s.getXLowValue(item);}"
331	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);return s.getXHighValue(item);}"
332	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);return s.getYValue(item);}"
333	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getYValue());}"
334	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getXLowValue());}"
335	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getXHighValue());}"
336	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds."");}XIntervalSeries ts=(XIntervalSeries)this.data.get(series);ts.removeChangeListener(this);this.data.remove(series);fireDatasetChanged(new DatasetChangeInfo());}"
337	"public void test(){for(int i=0;i<this.data.size();i++){XIntervalSeries series=(XIntervalSeries)this.data.get(i);series.removeChangeListener(this);}}"
338	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (YIntervalSeries)this.data.get(series);}"
339	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return s.getX(item);}"
340	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return s.getYValue(item);}"
341	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return s.getYLowValue(item);}"
342	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return s.getYHighValue(item);}"
343	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return new Double(s.getYValue(item));}"
344	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return new Double(s.getYLowValue(item));}"
345	"public void test(){YIntervalSeries s=(YIntervalSeries)this.data.get(series);return new Double(s.getYHighValue(item));}"
346	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds."");}YIntervalSeries ts=(YIntervalSeries)this.data.get(series);ts.removeChangeListener(this);this.data.remove(series);fireDatasetChanged(new DatasetChangeInfo());}"
347	"public void test(){for(int i=0;i<this.data.size();i++){YIntervalSeries series=(YIntervalSeries)this.data.get(i);series.removeChangeListener(this);}}"
348	"public void test(){int i=getItemRow(itemIndex);int j=getItemColumn(itemIndex);Number n=new Double(get(i,j));return n;}"
349	"public void test(){if(get(r,c)!=that.get(r,c)){return false;}}"
350	"public void test(){double[][] data=(double[][])this.seriesList.get(i);double[] x=data[0];double[] y=data[1];double[] z=data[2];}"
351	"public void test(){if((seriesIndex<0)||(seriesIndex>getSeriesCount())){throw new IllegalArgumentException(""Index outside valid range."");}MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);return series;}"
352	"public void test(){MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);int x=series.getItemColumn(itemIndex);return new Integer(x);}"
353	"public void test(){MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);int y=series.getItemRow(itemIndex);return new Integer(y);}"
354	"public void test(){MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);Number z=series.getItem(itemIndex);return z;}"
355	"public void test(){for(int i=0;i<this.seriesList.size();i++){MatrixSeries series=(MatrixSeries)this.seriesList.get(i);series.removeChangeListener(this);}}"
356	"public void test(){if((seriesIndex<0)||(seriesIndex>getSeriesCount())){throw new IllegalArgumentException(""Index outside valid range."");}MatrixSeries series=(MatrixSeries)this.seriesList.get(seriesIndex);series.removeChangeListener(this);this.seriesList.remove(seriesIndex);fireDatasetChanged(new DatasetChangeInfo());}"
357	"public void test(){for(int seriesNo=0;seriesNo<seriesCount;seriesNo++){XYSeries dataSeries=(XYSeries)this.data.get(seriesNo);if(!dataSeries.equals(series)){dataSeries.add(xValue,null);}}}"
358	"public void test(){for(int s=0;s<this.data.size();s++){updateXPoints((XYSeries)this.data.get(s));}}"
359	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Index outside valid range."");}return (XYSeries)this.data.get(series);}"
360	"public void test(){XYSeries s=(XYSeries)this.data.get(series);return s.getX(item);}"
361	"public void test(){XYSeries s=(XYSeries)this.data.get(series);return s.getY(index);}"
362	"public void test(){for(int i=0;i<this.data.size();i++){XYSeries series=(XYSeries)this.data.get(i);series.removeChangeListener(this);}}"
363	"public void test(){if((series<0)||(series>getSeriesCount())){throw new IllegalArgumentException(""Index outside valid range."");}XYSeries s=(XYSeries)this.data.get(series);s.removeChangeListener(this);}"
364	"public void test(){for(int s=0;s<this.data.size();s++){XYSeries series=(XYSeries)this.data.get(s);series.remove(x);}}"
365	"public void test(){for(int s=0;s<this.data.size();s++){XYSeries series=(XYSeries)this.data.get(s);if(series.getY(series.indexOf(x))!=null){return false;}}}"
366	"public void test(){for(int i=0;i<seriesCount;i++){XYSeries series=(XYSeries)this.data.get(i);clone.data.add(series.clone());}}"
367	"public void test(){if(series<0||series>=getSeriesCount()){throw new IllegalArgumentException(""Invalid series index: ""+series);}List oneSeriesData=(List)this.allSeriesData.get(series);return oneSeriesData.size();}"
368	"public void test(){if(series<0||series>=getSeriesCount()){throw new IllegalArgumentException(""Invalid series index: ""+series);}return (Comparable)this.seriesKeys.get(series);}"
369	"public void test(){List oneSeriesData=(List)this.allSeriesData.get(series);WindDataItem windItem=(WindDataItem)oneSeriesData.get(item);return windItem.getX();}"
370	"public void test(){List oneSeriesData=(List)this.allSeriesData.get(series);WindDataItem windItem=(WindDataItem)oneSeriesData.get(item);return windItem.getWindDirection();}"
371	"public void test(){List oneSeriesData=(List)this.allSeriesData.get(series);WindDataItem windItem=(WindDataItem)oneSeriesData.get(item);return windItem.getWindForce();}"
372	"public void test(){double[][] data=(double[][])this.seriesList.get(i);double[] x=data[0];double[] y=data[1];double[] xx=new double[x.length];}"
373	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (XYIntervalSeries)this.data.get(series);}"
374	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getX(item);}"
375	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getXLowValue(item);}"
376	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getXHighValue(item);}"
377	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getYValue(item);}"
378	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getYLowValue(item);}"
379	"public void test(){XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);return s.getYHighValue(item);}"
380	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds."");}XYIntervalSeries ts=(XYIntervalSeries)this.data.get(series);ts.removeChangeListener(this);this.data.remove(series);fireDatasetChanged(new DatasetChangeInfo());}"
381	"public void test(){for(int i=0;i<this.data.size();i++){XYIntervalSeries series=(XYIntervalSeries)this.data.get(i);series.removeChangeListener(this);}}"
382	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds."");}XYSeries ts=(XYSeries)this.data.get(series);ts.removeChangeListener(this);this.data.remove(series);fireDatasetChanged(new DatasetChangeInfo());}"
383	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (XYSeries)this.data.get(series);}"
384	"public void test(){while(index<size&&item.compareTo(this.data.get(index))==0){index++;}}"
385	"public void test(){XYDataItem item=(XYDataItem)this.data.get(index);return (XYDataItem)item.clone();}"
386	"public void test(){XYDataItem existing=(XYDataItem)this.data.get(index);overwritten=(XYDataItem)existing.clone();boolean iterate=false;double oldY=existing.getYValue();}"
387	"public void test(){for(int i=0;i<this.data.size();i++){XYDataItem item=(XYDataItem)this.data.get(i);if(item.getX().equals(x)){return i;}}}"
388	"public void test(){for(int index=start;index<=end;index++){XYDataItem item=(XYDataItem)this.data.get(index);XYDataItem clone=(XYDataItem)item.clone();try{copy.add(clone);}catch (SeriesException e) {  System.err.println(""Unable to add cloned data item."");}}}"
389	"public void test(){if(key==null){throw new IllegalArgumentException(""Null \'key\' argument."");} final Integer i=(Integer)this.indexMap.get(key);if(i==null){return -1;}return i.intValue();}"
390	"public void test(){for(int i=0;i<this.keys.size();i++){ final Object key=this.keys.get(i);this.indexMap.put(key,new Integer(i));}}"
391	"public void test(){for(int i=0;i<size;i++){data[i]=new DefaultKeyedValue((Comparable)this.keys.get(i),(Number)this.values.get(i));}}"
392	"public void test(){for(int column=0;column<this.rows.size();column++){ArrayList row=(ArrayList)this.rows.get(column);row.clear();}}"
393	"public void test(){{row=(ArrayList)this.rows.get(rowNum);for(int column=1;column<numberOfColumns;column++){Object testValue=row.get(column);if(testValue!=null){double test=((Number)testValue).doubleValue();if(test<this.minValue){this.minValue=test;}if(test>this.maxValue){this.maxValue=test;}}}}}"
394	"public void test(){Object testValue=row.get(column);if(testValue!=null){double test=((Number)testValue).doubleValue();if(test<this.minValue){this.minValue=test;}if(test>this.maxValue){this.maxValue=test;}}}"
395	"public void test(){ArrayList row=(ArrayList)this.rows.get(itemIndex);return (Number)row.get(0);}"
396	"public void test(){ArrayList row=(ArrayList)this.rows.get(itemIndex);return (Number)row.get(seriesIndex+1);}"
397	"public void test(){ComparableObjectItem item=new ComparableObjectItem(x,y);add(item,notify);}"
398	"public void test(){for(int i=0;i<this.data.size();i++){ComparableObjectItem item=(ComparableObjectItem)this.data.get(i);if(item.getComparable().equals(x)){return i;}}}"
399	"public void test(){if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}}"
400	"public void test(){ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}"
401	"public void test(){if(key==null){throw new IllegalArgumentException(""Null \'key\' argument."");}Comparable result=this.defaultGroup;Comparable group=(Comparable)this.keyToGroupMap.get(key);if(group!=null){result=group;}return result;}"
402	"public void test(){for(int i=0;i<itemCount;i++){copy.add(i,values.get(i));}}"
403	"public void test(){if(count>1){Number value=(Number)values.get((count-1)/2);result=value.doubleValue();}else {Number value=(Number)values.get(0);result=value.doubleValue();}}"
404	"public void test(){{Number value1=(Number)values.get(count/2-1);Number value2=(Number)values.get(count/2);result=(value1.doubleValue()+value2.doubleValue())/2.0;}}"
405	"public void test(){for(int i=start;i<=end;i++){working.add(values.get(i));}}"
406	"public void test(){if(count>1){Number value=(Number)values.get(start+(count-1)/2);result=value.doubleValue();}else {Number value=(Number)values.get(start);result=value.doubleValue();}}"
407	"public void test(){{Number value1=(Number)values.get(start+count/2-1);Number value2=(Number)values.get(start+count/2);result=(value1.doubleValue()+value2.doubleValue())/2.0;}}"
408	"public void test(){if(values[i]<maximum){double fraction=(values[i]-minimum)/(maximum-minimum);if(fraction<0.0){fraction=0.0;}binIndex=(int)(fraction*bins);if(binIndex>=bins){binIndex=bins-1;}}HistogramBin bin=(HistogramBin)binList.get(binIndex);}"
409	"public void test(){Map map=(Map)this.list.get(series);return (List)map.get(""bins"");}"
410	"public void test(){Map map=(Map)this.list.get(series);return ((Integer)map.get(""values.length"")).intValue();}"
411	"public void test(){Map map=(Map)this.list.get(series);return ((Double)map.get(""bin width"")).doubleValue();}"
412	"public void test(){Map map=(Map)this.list.get(series);return (Comparable)map.get(""key"");}"
413	"public void test(){List bins=getBins(series);HistogramBin bin=(HistogramBin)bins.get(item);double x=(bin.getStartBoundary()+bin.getEndBoundary())/2.0;return new Double(x);}"
414	"public void test(){List bins=getBins(series);HistogramBin bin=(HistogramBin)bins.get(item);double total=getTotal(series);double binWidth=getBinWidth(series);}"
415	"public void test(){List bins=getBins(series);HistogramBin bin=(HistogramBin)bins.get(item);return new Double(bin.getStartBoundary());}"
416	"public void test(){List bins=getBins(series);HistogramBin bin=(HistogramBin)bins.get(item);return new Double(bin.getEndBoundary());}"
417	"public void test(){for(int i=0;i<seriesCount;i++){clone.list.add(new HashMap((Map)this.list.get(i)));}}"
418	"public void test(){for(int i=0;i<vlist.size();i++){Number n=(Number)vlist.get(i);double v=n.doubleValue();minval=Math.min(minval,v);maxval=Math.max(maxval,v);}}"
419	"public void test(){for(int i=0;i<l.size();i++){Number n=(Number)l.get(i);average+=n.doubleValue();count+=1;}}"
420	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMean();}return result;}"
421	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMedian();}return result;}"
422	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getQ1();}return result;}"
423	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getQ3();}return result;}"
424	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMinRegularValue();}return result;}"
425	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMaxRegularValue();}return result;}"
426	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMinOutlier();}return result;}"
427	"public void test(){Number result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getMaxOutlier();}return result;}"
428	"public void test(){List result=null;BoxAndWhiskerItem stats=(BoxAndWhiskerItem)this.items.get(item);if(stats!=null){result=stats.getOutliers();}return result;}"
429	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);return (bin.getLowerBound()+bin.getUpperBound())/2.0;}"
430	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);if(this.adjustForBinSize){return bin.getItemCount()/(bin.getUpperBound()-bin.getLowerBound());}else {return bin.getItemCount();}}"
431	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);return bin.getLowerBound();}"
432	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);return bin.getUpperBound();}"
433	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);return bin.isSelected();}"
434	"public void test(){SimpleHistogramBin bin=(SimpleHistogramBin)this.bins.get(item);bin.setSelected(selected);if(notify){fireSelectionEvent();}}"
435	"public void test(){TaskSeries s=this.underlying.getSeries(series);Task t=s.get(item);TimePeriod duration=t.getDuration();Date start=duration.getStart();Date end=duration.getEnd();return (start.getTime()+end.getTime())/2.0;}"
436	"public void test(){TaskSeries s=this.underlying.getSeries(series);Task t=s.get(item);TimePeriod duration=t.getDuration();Date start=duration.getStart();return start.getTime();}"
437	"public void test(){TaskSeries s=this.underlying.getSeries(series);Task t=s.get(item);TimePeriod duration=t.getDuration();Date end=duration.getEnd();return end.getTime();}"
438	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (TaskSeries)this.data.get(series);}"
439	"public void test(){TaskSeries ts=(TaskSeries)this.data.get(series);return ts.getKey();}"
440	"public void test(){for(int i=0;i<count;i++){TaskSeries s=(TaskSeries)this.data.get(i);if(s.getKey().equals(rowKey)){result=i;break;}}}"
441	"public void test(){TaskSeries series=(TaskSeries)this.data.get(index);return series.getKey();}"
442	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""TaskSeriesCollection.remove(): index outside valid range."");}TaskSeries ts=(TaskSeries)this.data.get(series);ts.removeChangeListener(this);this.data.remove(series);fireDatasetChanged(new DatasetChangeInfo());}"
443	"public void test(){Number result=null;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){TimePeriod duration=task.getDuration();if(duration!=null){result=new Long(duration.getStart().getTime());}}}"
444	"public void test(){TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){TimePeriod duration=task.getDuration();if(duration!=null){result=new Long(duration.getStart().getTime());}}}"
445	"public void test(){Number result=null;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){TimePeriod duration=task.getDuration();if(duration!=null){result=new Long(duration.getEnd().getTime());}}}"
446	"public void test(){TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){TimePeriod duration=task.getDuration();if(duration!=null){result=new Long(duration.getEnd().getTime());}}}"
447	"public void test(){Number result=null;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){result=task.getPercentComplete();}return result;}"
448	"public void test(){int result=0;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){result=task.getSubtaskCount();}return result;}"
449	"public void test(){Number result=null;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());}"
450	"public void test(){TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){Task sub=task.getSubtask(subinterval);if(sub!=null){TimePeriod duration=sub.getDuration();result=new Long(duration.getStart().getTime());}}}"
451	"public void test(){TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){Task sub=task.getSubtask(subinterval);if(sub!=null){TimePeriod duration=sub.getDuration();result=new Long(duration.getEnd().getTime());}}}"
452	"public void test(){Number result=null;int row=getRowIndex(rowKey);TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){Task sub=task.getSubtask(subinterval);if(sub!=null){result=sub.getPercentComplete();}}}"
453	"public void test(){TaskSeries series=(TaskSeries)this.data.get(row);Task task=series.get(columnKey.toString());if(task!=null){Task sub=task.getSubtask(subinterval);if(sub!=null){result=sub.getPercentComplete();}}}"
454	"public void test(){TaskSeries series=(TaskSeries)this.data.get(i);Iterator iterator=series.getTasks().iterator();while(iterator.hasNext()){Task task=(Task)iterator.next();String key=task.getDescription();int index=this.keys.indexOf(key);if(index<0){this.keys.add(key);}}}"
455	"public void test(){for(int i=0;i<count;i++){Task t=(Task)this.tasks.get(i);if(t.getDescription().equals(description)){result=t;break;}}}"
456	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);this.millisecond=calendar.get(Calendar.MILLISECOND);this.second=(byte)calendar.get(Calendar.SECOND);}"
457	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);this.millisecond=calendar.get(Calendar.MILLISECOND);this.second=(byte)calendar.get(Calendar.SECOND);this.minute=(byte)calendar.get(Calendar.MINUTE);}"
458	"public void test(){calendar.setTime(time);this.millisecond=calendar.get(Calendar.MILLISECOND);this.second=(byte)calendar.get(Calendar.SECOND);this.minute=(byte)calendar.get(Calendar.MINUTE);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);}"
459	"public void test(){this.millisecond=calendar.get(Calendar.MILLISECOND);this.second=(byte)calendar.get(Calendar.SECOND);this.minute=(byte)calendar.get(Calendar.MINUTE);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);}"
460	"public void test(){this.second=(byte)calendar.get(Calendar.SECOND);this.minute=(byte)calendar.get(Calendar.MINUTE);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
461	"public void test(){this.minute=(byte)calendar.get(Calendar.MINUTE);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
462	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,this.second);calendar.set(Calendar.MILLISECOND,this.millisecond);return calendar.getTime().getTime();}"
463	"public void test(){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);return (TimeSeriesDataItem)item.clone();}"
464	"public void test(){if(index>=0){return (TimeSeriesDataItem)this.data.get(index);}else {return null;}}"
465	"public void test(){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);boolean iterate=false;Number oldYN=item.getValue();if(oldYN!=null){double oldY=oldYN.doubleValue();if(!Double.isNaN(oldY)){iterate=oldY<=this.minY||oldY>=this.maxY;}}}"
466	"public void test(){TimeSeriesDataItem existing=(TimeSeriesDataItem)this.data.get(index);overwritten=(TimeSeriesDataItem)existing.clone();boolean iterate=false;Number oldYN=existing.getValue();}"
467	"public void test(){for(int index=start;index<=end;index++){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();try{copy.add(clone);}catch (SeriesException e) {  e.printStackTrace();}}}"
468	"public void test(){if(zone==null){throw new IllegalArgumentException(""Null \'zone\' argument."");}Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);}"
469	"public void test(){if(zone==null){throw new IllegalArgumentException(""Null \'zone\' argument."");}Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);}"
470	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
471	"public void test(){calendar.setTime(time);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
472	"public void test(){this.firstMillisecond=getFirstMillisecond(calendar);this.lastMillisecond=getLastMillisecond(calendar);}"
473	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int dom=this.day.getDayOfMonth();calendar.set(year,month,dom,this.hour,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
474	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int dom=this.day.getDayOfMonth();calendar.set(year,month,dom,this.hour,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
475	"public void test(){if(locale==null){throw new IllegalArgumentException(""Null \'locale\' argument."");}Calendar calendar=Calendar.getInstance(zone,locale);calendar.setTime(time);}"
476	"public void test(){if(locale==null){throw new IllegalArgumentException(""Null \'locale\' argument."");}Calendar calendar=Calendar.getInstance(zone,locale);calendar.setTime(time);int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR);}"
477	"public void test(){if(tempWeek==1&&calendar.get(Calendar.MONTH)==Calendar.DECEMBER){this.week=1;this.year=(short)(calendar.get(Calendar.YEAR)+1);}else {this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);int yyyy=calendar.get(Calendar.YEAR);if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.week>=52){yyyy--;}this.year=(short)yyyy;}}"
478	"public void test(){{this.week=1;this.year=(short)(calendar.get(Calendar.YEAR)+1);}}"
479	"public void test(){this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);int yyyy=calendar.get(Calendar.YEAR);if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.week>=52){yyyy--;}}"
480	"public void test(){if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.week>=52){yyyy--;}}"
481	"public void test(){if(tempWeek==1&&calendar.get(Calendar.MONTH)==Calendar.DECEMBER){this.week=1;this.year=(short)(calendar.get(Calendar.YEAR)+1);}else {this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);int yyyy=calendar.get(Calendar.YEAR);if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.week>=52){yyyy--;}this.year=(short)yyyy;}peg(calendar);}"
482	"public void test(){{Calendar calendar=Calendar.getInstance();calendar.set(this.year,Calendar.DECEMBER,31);int actualMaxWeek=calendar.getActualMaximum(Calendar.WEEK_OF_YEAR);if(this.week<actualMaxWeek){result=new Week(this.week+1,this.year);}else {if(this.year<9999){result=new Week(FIRST_WEEK_IN_YEAR,this.year+1);}else {result=null;}}}}"
483	"public void test(){Calendar c=(Calendar)calendar.clone();c.clear();c.set(Calendar.YEAR,this.year);c.set(Calendar.WEEK_OF_YEAR,this.week);}"
484	"public void test(){Calendar c=(Calendar)calendar.clone();c.clear();c.set(Calendar.YEAR,this.year);c.set(Calendar.WEEK_OF_YEAR,this.week+1);}"
485	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Series index out of bounds"");}return (OHLCSeries)this.data.get(series);}"
486	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);RegularTimePeriod period=di.getPeriod();return getX(period);}"
487	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return new Double(di.getYValue());}"
488	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getOpenValue();}"
489	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getCloseValue();}"
490	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getHighValue();}"
491	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getLowValue();}"
492	"public void test(){for(int i=0;i<this.data.size();i++){OHLCSeries series=(OHLCSeries)this.data.get(i);series.removeChangeListener(this);}}"
493	"public void test(){for(int i=0;i<this.data.size();i++){result=HashUtilities.hashCode(result,this.data.get(i));}}"
494	"public void test(){long m1=getFirstMillisecond(calendar);long m2=getLastMillisecond(calendar);return m1+(m2-m1)/2;}"
495	"public void test(){Calendar calendar=Calendar.getInstance(zone,locale);calendar.setTime(time);this.month=calendar.get(Calendar.MONTH)+1;this.year=calendar.get(Calendar.YEAR);peg(calendar);}"
496	"public void test(){calendar.set(this.year,this.month-1,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
497	"public void test(){int eom=SerialDate.lastDayOfMonth(this.month,this.year);calendar.set(this.year,this.month-1,eom,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
498	"public void test(){this.serialDate=SerialDate.createInstance(day,month,year);peg(Calendar.getInstance());}"
499	"public void test(){if(serialDate==null){throw new IllegalArgumentException(""Null \'serialDate\' argument."");}}"
500	"public void test(){if(serialDate==null){throw new IllegalArgumentException(""Null \'serialDate\' argument."");}this.serialDate=serialDate;peg(Calendar.getInstance());}"
501	"public void test(){if(zone==null){throw new IllegalArgumentException(""Null \'zone\' argument."");}Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);int d=calendar.get(Calendar.DAY_OF_MONTH);int m=calendar.get(Calendar.MONTH)+1;}"
502	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);int d=calendar.get(Calendar.DAY_OF_MONTH);int m=calendar.get(Calendar.MONTH)+1;int y=calendar.get(Calendar.YEAR);}"
503	"public void test(){calendar.setTime(time);int d=calendar.get(Calendar.DAY_OF_MONTH);int m=calendar.get(Calendar.MONTH)+1;int y=calendar.get(Calendar.YEAR);this.serialDate=SerialDate.createInstance(d,m,y);}"
504	"public void test(){int d=calendar.get(Calendar.DAY_OF_MONTH);int m=calendar.get(Calendar.MONTH)+1;int y=calendar.get(Calendar.YEAR);this.serialDate=SerialDate.createInstance(d,m,y);peg(calendar);}"
505	"public void test(){int m=calendar.get(Calendar.MONTH)+1;int y=calendar.get(Calendar.YEAR);this.serialDate=SerialDate.createInstance(d,m,y);peg(calendar);}"
506	"public void test(){Day result;int serial=this.serialDate.toSerial();if(serial>SerialDate.SERIAL_LOWER_BOUND){SerialDate yesterday=SerialDate.createInstance(serial-1);return new Day(yesterday);}else {result=null;}}"
507	"public void test(){if(serial>SerialDate.SERIAL_LOWER_BOUND){SerialDate yesterday=SerialDate.createInstance(serial-1);return new Day(yesterday);}else {result=null;}}"
508	"public void test(){Day result;int serial=this.serialDate.toSerial();if(serial<SerialDate.SERIAL_UPPER_BOUND){SerialDate tomorrow=SerialDate.createInstance(serial+1);return new Day(tomorrow);}else {result=null;}}"
509	"public void test(){if(serial<SerialDate.SERIAL_UPPER_BOUND){SerialDate tomorrow=SerialDate.createInstance(serial+1);return new Day(tomorrow);}else {result=null;}}"
510	"public void test(){int year=this.serialDate.getYYYY();int month=this.serialDate.getMonth();int day=this.serialDate.getDayOfMonth();calendar.clear();calendar.set(year,month-1,day,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
511	"public void test(){int year=this.serialDate.getYYYY();int month=this.serialDate.getMonth();int day=this.serialDate.getDayOfMonth();calendar.clear();calendar.set(year,month-1,day,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
512	"public void test(){if(!this.serialDate.equals(that.getSerialDate())){return false;}}"
513	"public void test(){if(o1 instanceof Day){Day d=(Day)o1;result=-d.getSerialDate().compare(this.serialDate);}else if(o1 instanceof RegularTimePeriod){result=0;}else {result=1;}}"
514	"public void test(){if(keys.isEmpty()){return null;}TimePeriod first=(TimePeriod)keys.get(0);TimePeriod last=(TimePeriod)keys.get(keys.size()-1);}"
515	"public void test(){TimePeriod first=(TimePeriod)keys.get(0);TimePeriod last=(TimePeriod)keys.get(keys.size()-1);if(!includeInterval||this.domainIsPointsInTime){return new Range(getXValue(first),getXValue(last));}else {return new Range(first.getStart().getTime(),last.getEnd().getTime());}}"
516	"public void test(){for(int i=0;i<this.data.size();i++){TimePeriodValue tpv=(TimePeriodValue)this.data.get(i);updateBounds(tpv.getPeriod(),i);}}"
517	"public void test(){for(int index=start;index<=end;index++){TimePeriodValue item=(TimePeriodValue)this.data.get(index);TimePeriodValue clone=(TimePeriodValue)item.clone();try{copy.add(clone);}catch (SeriesException e) {  System.err.println(""Failed to add cloned item."");}}}"
518	"public void test(){Calendar calendar=Calendar.getInstance(zone,locale);calendar.setTime(time);int month=calendar.get(Calendar.MONTH)+1;this.quarter=(byte)SerialDate.monthCodeToQuarter(month);this.year=(short)calendar.get(Calendar.YEAR);peg(calendar);}"
519	"public void test(){int month=Quarter.FIRST_MONTH_IN_QUARTER[this.quarter];calendar.set(this.year,month-1,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
520	"public void test(){int month=Quarter.LAST_MONTH_IN_QUARTER[this.quarter];int eom=SerialDate.lastDayOfMonth(month,this.year);calendar.set(this.year,month-1,eom,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
521	"public void test(){ final Calendar calendar=Calendar.getInstance();calendar.set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);return calendar.getTime();}"
522	"public void test(){ final int yy=((y-1900)*365)+SerialDate.leapYearCount(y-1);int mm=SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];if(m>MonthConstants.FEBRUARY){if(SerialDate.isLeapYear(y)){mm=mm+1;}} final int dd=d;return yy+mm;}"
523	"public void test(){if(m>MonthConstants.FEBRUARY){if(SerialDate.isLeapYear(y)){mm=mm+1;}}}"
524	"public void test(){if(SerialDate.isLeapYear(y)){mm=mm+1;}}"
525	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""Index \'series\' out of range."");}return (TimePeriodValues)this.data.get(series);}"
526	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);TimePeriod period=dp.getPeriod();return new Long(getX(period));}"
527	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return new Long(dp.getPeriod().getStart().getTime());}"
528	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return new Long(dp.getPeriod().getEnd().getTime());}"
529	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return dp.getValue();}"
530	"public void test(){ final int serialDayNumber=base.toSerial()+days;return SerialDate.createInstance(serialDayNumber);}"
531	"public void test(){ final int yy=(12*base.getYYYY()+base.getMonth()+months-1)/12; final int mm=(12*base.getYYYY()+base.getMonth()+months-1)%12+1; final int dd=Math.min(base.getDayOfMonth(),SerialDate.lastDayOfMonth(mm,yy));return SerialDate.createInstance(dd,mm,yy);}"
532	"public void test(){ final int baseY=base.getYYYY(); final int baseM=base.getMonth(); final int baseD=base.getDayOfMonth(); final int targetY=baseY+years; final int targetD=Math.min(baseD,SerialDate.lastDayOfMonth(baseM,targetY));return SerialDate.createInstance(targetD,baseM,targetY);}"
533	"public void test(){ final int last=SerialDate.lastDayOfMonth(base.getMonth(),base.getYYYY());return SerialDate.createInstance(last,base.getMonth(),base.getYYYY());}"
534	"public void test(){ final GregorianCalendar calendar=new GregorianCalendar();calendar.setTime(date);return new SpreadsheetDate(calendar.get(Calendar.DATE),calendar.get(Calendar.MONTH)+1,calendar.get(Calendar.YEAR));}"
535	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);this.second=(byte)calendar.get(Calendar.SECOND);this.minute=(byte)calendar.get(Calendar.MINUTE);this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
536	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,this.second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
537	"public void test(){if(zone==null){throw new IllegalArgumentException(""Null \'zone\' argument."");}Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);int min=calendar.get(Calendar.MINUTE);this.minute=(byte)min;}"
538	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(time);int min=calendar.get(Calendar.MINUTE);this.minute=(byte)min;this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);}"
539	"public void test(){int min=calendar.get(Calendar.MINUTE);this.minute=(byte)min;this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
540	"public void test(){this.minute=(byte)min;this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);this.day=new Day(time,zone);peg(calendar);}"
541	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
542	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
543	"public void test(){if((series<0)||(series>=getSeriesCount())){throw new IllegalArgumentException(""The \'series\' argument is out of bounds (""+series);}return (TimeSeries)this.data.get(series);}"
544	"public void test(){for(int i=0;i<this.data.size();i++){TimeSeries series=(TimeSeries)this.data.get(i);series.removeChangeListener(this);}}"
545	"public void test(){TimeSeries s=(TimeSeries)this.data.get(series);RegularTimePeriod period=s.getTimePeriod(item);return getX(period);}"
546	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);RegularTimePeriod period=ts.getTimePeriod(item);return new Long(getX(period));}"
547	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);return new Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar));}"
548	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);return new Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar));}"
549	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);return ts.getValue(item);}"
550	"public void test(){Calendar calendar=Calendar.getInstance(zone,locale);calendar.setTime(time);this.year=(short)calendar.get(Calendar.YEAR);peg(calendar);}"
551	"public void test(){calendar.set(this.year,Calendar.JANUARY,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
552	"public void test(){calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
553	"public void test(){int y;try{y=Integer.parseInt(s.trim());}catch (NumberFormatException e) {  throw new TimePeriodFormatException(""Cannot parse string."");}}"
554	"public void test(){try{y=Integer.parseInt(s.trim());}catch (NumberFormatException e) {  throw new TimePeriodFormatException(""Cannot parse string."");}}"
555	"public void test(){try{return new Year(y);}catch (IllegalArgumentException e) {  throw new TimePeriodFormatException(""Year outside valid range."");}}"