1	"public void test(){int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){return result;}}"
2	"public void test(){renderer.setSeriesPaint(1,gp1);renderer.setSeriesPaint(2,gp2);CategoryAxis domainAxis=plot.getDomainAxis();domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/6.0));return chart;}"
3	"public void test(){if(das.getDataset()==dataset){return das.getSelection();}}"
4	"public void test(){String url=this.prefix;Comparable seriesKey=dataset.getRowKey(series);Comparable categoryKey=dataset.getColumnKey(category);boolean firstParameter=url.indexOf(""?"")==-1;url+=firstParameter?""?"":""&amp;"";}"
5	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}}"
6	"public void test(){super(area,toolTipText,urlText);if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}this.dataset=dataset;this.rowKey=rowKey;this.columnKey=columnKey;}"
7	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}this.dataset=dataset;}"
8	"public void test(){if(!ObjectUtilities.equal(this.dataset,that.dataset)){return false;}}"
9	"public void test(){for(int r=0;r<this.rows;r++){int index=r*this.columns+c;if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){b.setBounds(new Rectangle2D.Double(c*width,r*height,width,height));}}}"
10	"public void test(){if(index>=blocks.size()){break;}}"
11	"public void test(){for(int c=0;c<this.columns;c++){int index=r*this.columns+c;if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){Size2D s=b.arrange(g2,bc);maxH=Math.max(maxH,s.getHeight());}}}"
12	"public void test(){for(int c=0;c<this.columns;c++){int index=r*this.columns+c;if(index>=blocks.size()){break;}Block b=(Block)blocks.get(index);if(b!=null){Size2D s=b.arrange(g2,bc);maxW=Math.max(maxW,s.getWidth());}}}"
13	"public void test(){PaintItem item=new PaintItem(value,paint);int index=Collections.binarySearch(this.lookupTable,item);if(index>=0){this.lookupTable.set(index,item);}else {this.lookupTable.add(-(index+1),item);}}"
14	"public void test(){if(index>=0){this.lookupTable.set(index,item);}else {this.lookupTable.add(-(index+1),item);}}"
15	"public void test(){if(dataset instanceof GanttCategoryDataset){GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;drawTasks(g2,state,dataArea,plot,domainAxis,rangeAxis,gcd,row,column,selected);}else {super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}}"
16	"public void test(){if(count==0){drawTask(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}}"
17	"public void test(){RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();Number value0=dataset.getStartValue(row,column,subinterval);if(value0==null){return ;}double translatedValue0=rangeAxis.valueToJava2D(value0.doubleValue(),dataArea,rangeAxisLocation);}"
18	"public void test(){if(translatedValue1<translatedValue0){double temp=translatedValue1;translatedValue1=translatedValue0;translatedValue0=temp;}double rectStart=calculateBarW0(plot,plot.getOrientation(),dataArea,domainAxis,state,row,column);double rectLength=Math.abs(translatedValue1-translatedValue0);}"
19	"public void test(){if(plot.getOrientation()==PlotOrientation.HORIZONTAL){bar=new Rectangle2D.Double(translatedValue0,rectStart,rectLength,rectBreadth);barBase=RectangleEdge.LEFT;}else if(plot.getOrientation()==PlotOrientation.VERTICAL){bar=new Rectangle2D.Double(rectStart,translatedValue0,rectBreadth,rectLength);barBase=RectangleEdge.BOTTOM;}}"
20	"public void test(){if(plot.getOrientation()==PlotOrientation.VERTICAL){bar=new Rectangle2D.Double(rectStart,translatedValue0,rectBreadth,rectLength);barBase=RectangleEdge.BOTTOM;}}"
21	"public void test(){if(subinterval==count-1){int datasetIndex=plot.indexOf(dataset);Comparable columnKey=dataset.getColumnKey(column);Comparable rowKey=dataset.getRowKey(row);double xx=domainAxis.getCategorySeriesMiddle(columnKey,rowKey,dataset,getItemMargin(),dataArea,plot.getDomainAxisEdge());updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value1.doubleValue(),datasetIndex,xx,translatedValue1,orientation);}}"
22	"public void test(){PlotOrientation orientation=plot.getOrientation();RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();Number value0=dataset.getEndValue(row,column);if(value0==null){return ;}}"
23	"public void test(){if(java2dValue1<java2dValue0){double temp=java2dValue1;java2dValue1=java2dValue0;java2dValue0=temp;Number tempNum=value1;value1=value0;value0=tempNum;}double rectStart=calculateBarW0(plot,orientation,dataArea,domainAxis,state,row,column);double rectBreadth=state.getBarWidth();}"
24	"public void test(){if(plot.getOrientation()==PlotOrientation.HORIZONTAL){completeBar=new Rectangle2D.Double(java2dValue0,rectStart+start*rectBreadth,rectLength*p,rectBreadth*(end-start));incompleteBar=new Rectangle2D.Double(java2dValue0+rectLength*p,rectStart+start*rectBreadth,rectLength*(1-p),rectBreadth*(end-start));}else if(plot.getOrientation()==PlotOrientation.VERTICAL){completeBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1+rectLength*(1-p),rectBreadth*(end-start),rectLength*p);incompleteBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1,rectBreadth*(end-start),rectLength*(1-p));}}"
25	"public void test(){if(plot.getOrientation()==PlotOrientation.VERTICAL){completeBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1+rectLength*(1-p),rectBreadth*(end-start),rectLength*p);incompleteBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1,rectBreadth*(end-start),rectLength*(1-p));}}"
26	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,false);}}"
27	"public void test(){CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column,selected);if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,false);}int datasetIndex=plot.indexOf(dataset);Comparable columnKey=dataset.getColumnKey(column);Comparable rowKey=dataset.getRowKey(row);}"
28	"public void test(){if(this.renderAsPercentages){return new Range(0.0,1.0);}else {return DatasetUtilities.findStackedRangeBounds(dataset);}}"
29	"public void test(){EntityCollection entities=state.getEntityCollection();double y1=0.0;Number n=dataset.getValue(row,column);if(n!=null){y1=n.doubleValue();}double[] stack1=getStackValues(dataset,row,column);}"
30	"public void test(){Number n=dataset.getValue(row,column);if(n!=null){y1=n.doubleValue();}double[] stack1=getStackValues(dataset,row,column);double xx1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double y0=0.0;}"
31	"public void test(){if(n!=null){y1=n.doubleValue();}double[] stack1=getStackValues(dataset,row,column);double xx1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double y0=0.0;n=dataset.getValue(row,Math.max(column-1,0));}"
32	"public void test(){double xx1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double y0=0.0;n=dataset.getValue(row,Math.max(column-1,0));if(n!=null){y0=n.doubleValue();}double[] stack0=getStackValues(dataset,row,Math.max(column-1,0));}"
33	"public void test(){n=dataset.getValue(row,Math.max(column-1,0));if(n!=null){y0=n.doubleValue();}double[] stack0=getStackValues(dataset,row,Math.max(column-1,0));double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int itemCount=dataset.getColumnCount();}"
34	"public void test(){if(n!=null){y0=n.doubleValue();}double[] stack0=getStackValues(dataset,row,Math.max(column-1,0));double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int itemCount=dataset.getColumnCount();double y2=0.0;}"
35	"public void test(){int itemCount=dataset.getColumnCount();double y2=0.0;n=dataset.getValue(row,Math.min(column+1,itemCount-1));if(n!=null){y2=n.doubleValue();}double[] stack2=getStackValues(dataset,row,Math.min(column+1,itemCount-1));}"
36	"public void test(){n=dataset.getValue(row,Math.min(column+1,itemCount-1));if(n!=null){y2=n.doubleValue();}double[] stack2=getStackValues(dataset,row,Math.min(column+1,itemCount-1));double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double xxLeft=xx0;}"
37	"public void test(){if(n!=null){y2=n.doubleValue();}double[] stack2=getStackValues(dataset,row,Math.min(column+1,itemCount-1));double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double xxLeft=xx0;double xxRight=xx2;}"
38	"public void test(){if(entities!=null){GeneralPath gp=new GeneralPath(left);gp.append(right,false);entityArea=gp;addEntity(entities,entityArea,dataset,row,column,selected);}}"
39	"public void test(){if(this.renderAsPercentages){total=DataUtilities.calculateColumnTotal(dataset,category);}}"
40	"public void test(){for(int i=0;i<series;i++){n=dataset.getValue(i,category);if(n!=null){double v=n.doubleValue();if(this.renderAsPercentages){v=v/total;}result+=v;}}}"
41	"public void test(){double v=0.0;Number n=dataset.getValue(i,index);if(n!=null){v=n.doubleValue();}if(!Double.isNaN(v)){if(v>=0.0){result[1]+=v;}else {result[0]+=v;}}}"
42	"public void test(){if(cp==null){return null;}if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=cp.getDataset(datasetIndex);String label=getLegendItemLabelGenerator().generateLabel(dataset,series);String description=label;}"
43	"public void test(){if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=cp.getDataset(datasetIndex);String label=getLegendItemLabelGenerator().generateLabel(dataset,series);String description=label;String toolTipText=null;}"
44	"public void test(){if(getLegendItemToolTipGenerator()!=null){toolTipText=getLegendItemToolTipGenerator().generateLabel(dataset,series);}}"
45	"public void test(){if(getLegendItemURLGenerator()!=null){urlText=getLegendItemURLGenerator().generateLabel(dataset,series);}}"
46	"public void test(){Paint labelPaint=lookupLegendTextPaint(series);if(labelPaint!=null){result.setLabelPaint(labelPaint);}result.setDataset(dataset);result.setDatasetIndex(datasetIndex);result.setSeriesKey(dataset.getRowKey(series));}"
47	"public void test(){result.setDataset(dataset);result.setDatasetIndex(datasetIndex);result.setSeriesKey(dataset.getRowKey(series));result.setSeriesIndex(series);return result;}"
48	"public void test(){int columns=dataset.getColumnCount();int rows=dataset.getRowCount();double space=0.0;PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else if(orientation==PlotOrientation.VERTICAL){space=dataArea.getWidth();}}"
49	"public void test(){double space=0.0;PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else if(orientation==PlotOrientation.VERTICAL){space=dataArea.getWidth();}}"
50	"public void test(){if((rows*columns)>0){state.setBarWidth(Math.min(used/(dataset.getColumnCount()*dataset.getRowCount()),maxWidth));}else {state.setBarWidth(Math.min(used,maxWidth));}}"
51	"public void test(){if(!(dataset instanceof BoxAndWhiskerCategoryDataset)){throw new IllegalArgumentException(""BoxAndWhiskerRenderer.drawItem() : the data should be ""+""of type BoxAndWhiskerCategoryDataset only."");}}"
52	"public void test(){if(!(dataset instanceof BoxAndWhiskerCategoryDataset)){throw new IllegalArgumentException(""BoxAndWhiskerRenderer.drawItem() : the data should be ""+""of type BoxAndWhiskerCategoryDataset only."");}PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}}"
53	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}}"
54	"public void test(){if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}}"
55	"public void test(){if(entities!=null){addEntity(entities,box,dataset,row,column,selected);}}"
56	"public void test(){if(!getItemVisible(row,column)){return ;}Number value=dataset.getValue(row,column);if(value==null){return ;}}"
57	"public void test(){Number value=dataset.getValue(row,column);if(value==null){return ;}PlotOrientation orientation=plot.getOrientation();RectangleEdge axisEdge=plot.getDomainAxisEdge();int count=dataset.getColumnCount();}"
58	"public void test(){if(value==null){return ;}PlotOrientation orientation=plot.getOrientation();RectangleEdge axisEdge=plot.getDomainAxisEdge();int count=dataset.getColumnCount();float x0=(float)domainAxis.getCategoryStart(column,count,dataArea,axisEdge);}"
59	"public void test(){if(column>0){Number n0=dataset.getValue(row,column-1);if(n0!=null){yy0=(n0.doubleValue()+yy1)/2.0;}}}"
60	"public void test(){if(column<dataset.getColumnCount()-1){Number n2=dataset.getValue(row,column+1);if(n2!=null){yy2=(n2.doubleValue()+yy1)/2.0;}}else if(this.endType==AreaRendererEndType.LEVEL){yy2=yy1;}}"
61	"public void test(){if(column<dataset.getColumnCount()-1){Number n2=dataset.getValue(row,column+1);if(n2!=null){yy2=(n2.doubleValue()+yy1)/2.0;}}else if(this.endType==AreaRendererEndType.LEVEL){yy2=yy1;}RectangleEdge edge=plot.getRangeAxisEdge();float y0=(float)rangeAxis.valueToJava2D(yy0,dataArea,edge);}"
62	"public void test(){if(isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,labelXX,labelYY,(value.doubleValue()<0.0));}}"
63	"public void test(){g2.fill(area);if(isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,labelXX,labelYY,(value.doubleValue()<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),yy1,datasetIndex,x1,y1,orientation);EntityCollection entities=state.getEntityCollection();}"
64	"public void test(){if(isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,labelXX,labelYY,(value.doubleValue()<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),yy1,datasetIndex,x1,y1,orientation);EntityCollection entities=state.getEntityCollection();if(entities!=null){addEntity(entities,area,dataset,row,column,selected);}}"
65	"public void test(){if(entities!=null){addEntity(entities,area,dataset,row,column,selected);}}"
66	"public void test(){if(dataset==null){return null;}}"
67	"public void test(){if(dataset==null){return null;}boolean allItemsNull=true;double minimum=0.0;double maximum=0.0;int columnCount=dataset.getColumnCount();}"
68	"public void test(){for(int row=0;row<dataset.getRowCount();row++){double runningTotal=0.0;for(int column=0;column<=columnCount-1;column++){Number n=dataset.getValue(row,column);if(n!=null){allItemsNull=false;double value=n.doubleValue();if(column==columnCount-1){runningTotal=value;}else {runningTotal=runningTotal+value;}minimum=Math.min(minimum,runningTotal);maximum=Math.max(maximum,runningTotal);}}}}"
69	"public void test(){{Number n=dataset.getValue(row,column);if(n!=null){allItemsNull=false;double value=n.doubleValue();if(column==columnCount-1){runningTotal=value;}else {runningTotal=runningTotal+value;}minimum=Math.min(minimum,runningTotal);maximum=Math.max(maximum,runningTotal);}}}"
70	"public void test(){if(column==dataset.getColumnCount()-1){previous=0.0;}}"
71	"public void test(){if(column==dataset.getColumnCount()-1){previous=0.0;}double current=0.0;Number n=dataset.getValue(row,column);if(n!=null){current=previous+n.doubleValue();}state.setSeriesRunningTotal(current);}"
72	"public void test(){if(j2dy1<j2dy0){double temp=j2dy1;j2dy1=j2dy0;j2dy0=temp;}double rectWidth=state.getBarWidth();double rectHeight=Math.max(getMinimumBarLength(),Math.abs(j2dy1-j2dy0));Comparable seriesKey=dataset.getRowKey(row);Comparable categoryKey=dataset.getColumnKey(column);}"
73	"public void test(){if(orientation==PlotOrientation.VERTICAL){rectX=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.TOP);rectX=rectX-rectWidth/2.0;rectY=j2dy0;}}"
74	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(valDiff<0.0));}}"
75	"public void test(){if(entities!=null){addEntity(entities,bar,dataset,row,column,selected);}}"
76	"public void test(){if(visibleRow<0){return ;}int visibleRowCount=state.getVisibleSeriesCount();PlotOrientation orientation=plot.getOrientation();MultiValueCategoryDataset d=(MultiValueCategoryDataset)dataset;List values=d.getValues(row,column);}"
77	"public void test(){int visibleRowCount=state.getVisibleSeriesCount();PlotOrientation orientation=plot.getOrientation();MultiValueCategoryDataset d=(MultiValueCategoryDataset)dataset;List values=d.getValues(row,column);if(values==null){return ;}}"
78	"public void test(){if(this.useSeriesOffset){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
79	"public void test(){Number n=(Number)values.get(i);double value=n.doubleValue();double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());Shape shape=getItemShape(row,column,selected);if(orientation==PlotOrientation.HORIZONTAL){shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);}else if(orientation==PlotOrientation.VERTICAL){shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);}}"
80	"public void test(){CategoryDataset dataset=cp.getDataset(datasetIndex);String label=getLegendItemLabelGenerator().generateLabel(dataset,series);String description=label;String toolTipText=null;if(getLegendItemToolTipGenerator()!=null){toolTipText=getLegendItemToolTipGenerator().generateLabel(dataset,series);}}"
81	"public void test(){if(plot==null){throw new IllegalArgumentException(""Null \'plot\' argument."");}}"
82	"public void test(){if(plot==null){throw new IllegalArgumentException(""Null \'plot\' argument."");}this.plot=plot;}"
83	"public void test(){setPlot(plot);if(dataset!=null){this.rowCount=dataset.getRowCount();this.columnCount=dataset.getColumnCount();}else {this.rowCount=0;this.columnCount=0;}}"
84	"public void test(){if(dataset!=null){this.rowCount=dataset.getRowCount();this.columnCount=dataset.getColumnCount();}else {this.rowCount=0;this.columnCount=0;}}"
85	"public void test(){if(dataset instanceof SelectableCategoryDataset){SelectableCategoryDataset scd=(SelectableCategoryDataset)dataset;selectionState=scd.getSelectionState();}}"
86	"public void test(){if(cri!=null){RenderingSource rs=cri.getRenderingSource();selectionState=(CategoryDatasetSelectionState)rs.getSelectionState(dataset);}}"
87	"public void test(){List visibleSeriesKeys=new ArrayList();int seriesCount=dataset.getRowCount();for(int s=0;s<seriesCount;s++){if(isSeriesVisible(s)){visibleSeriesKeys.add(dataset.getRowKey(s));}}}"
88	"public void test(){if(isSeriesVisible(s)){visibleSeriesKeys.add(dataset.getRowKey(s));}}"
89	"public void test(){int seriesCount=dataset.getRowCount();for(int s=0;s<seriesCount;s++){if(isSeriesVisible(s)){visibleSeriesKeys.add(dataset.getRowKey(s));}}return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,includeInterval);}"
90	"public void test(){if(getDataBoundsIncludesVisibleSeriesOnly()){List visibleSeriesKeys=new ArrayList();int seriesCount=dataset.getRowCount();for(int s=0;s<seriesCount;s++){if(isSeriesVisible(s)){visibleSeriesKeys.add(dataset.getRowKey(s));}}return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,includeInterval);}else {return DatasetUtilities.findRangeBounds(dataset,includeInterval);}}"
91	"public void test(){Line2D line=null;PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){line=new Line2D.Double(dataArea.getMinX(),value,dataArea.getMaxX(),value);}else if(orientation==PlotOrientation.VERTICAL){line=new Line2D.Double(value,dataArea.getMinY(),value,dataArea.getMaxY());}}"
92	"public void test(){Range range=axis.getRange();if(!range.contains(value)){return ;}PlotOrientation orientation=plot.getOrientation();Line2D line=null;double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());}"
93	"public void test(){Line2D line=null;double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());if(orientation==PlotOrientation.HORIZONTAL){line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());}else if(orientation==PlotOrientation.VERTICAL){line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);}}"
94	"public void test(){Comparable category=marker.getKey();CategoryDataset dataset=plot.getDataset(plot.getIndexOf(this));int columnIndex=dataset.getColumnIndex(category);if(columnIndex<0){return ;}}"
95	"public void test(){Comparable category=marker.getKey();CategoryDataset dataset=plot.getDataset(plot.getIndexOf(this));int columnIndex=dataset.getColumnIndex(category);if(columnIndex<0){return ;} final Composite savedComposite=g2.getComposite();}"
96	"public void test(){if(columnIndex<0){return ;} final Composite savedComposite=g2.getComposite();g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));PlotOrientation orientation=plot.getOrientation();Rectangle2D bounds=null;}"
97	"public void test(){double v=axis.getCategoryMiddle(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());Line2D line=null;if(orientation==PlotOrientation.HORIZONTAL){line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);}else if(orientation==PlotOrientation.VERTICAL){line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());}}"
98	"public void test(){double v0=axis.getCategoryStart(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());double v1=axis.getCategoryEnd(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());Rectangle2D area=null;if(orientation==PlotOrientation.HORIZONTAL){area=new Rectangle2D.Double(dataArea.getMinX(),v0,dataArea.getWidth(),(v1-v0));}else if(orientation==PlotOrientation.VERTICAL){area=new Rectangle2D.Double(v0,dataArea.getMinY(),(v1-v0),dataArea.getHeight());}}"
99	"public void test(){g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));PlotOrientation orientation=plot.getOrientation();double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());Line2D line=null;if(orientation==PlotOrientation.HORIZONTAL){line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());}else if(orientation==PlotOrientation.VERTICAL){line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);}}"
100	"public void test(){if(p==null){return null;}if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=p.getDataset(datasetIndex);String label=this.legendItemLabelGenerator.generateLabel(dataset,series);String description=label;}"
101	"public void test(){if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=p.getDataset(datasetIndex);String label=this.legendItemLabelGenerator.generateLabel(dataset,series);String description=label;String toolTipText=null;}"
102	"public void test(){if(this.legendItemToolTipGenerator!=null){toolTipText=this.legendItemToolTipGenerator.generateLabel(dataset,series);}}"
103	"public void test(){if(this.legendItemURLGenerator!=null){urlText=this.legendItemURLGenerator.generateLabel(dataset,series);}}"
104	"public void test(){Paint labelPaint=lookupLegendTextPaint(series);if(labelPaint!=null){item.setLabelPaint(labelPaint);}item.setSeriesKey(dataset.getRowKey(series));item.setSeriesIndex(series);item.setDataset(dataset);}"
105	"public void test(){item.setSeriesKey(dataset.getRowKey(series));item.setSeriesIndex(series);item.setDataset(dataset);item.setDatasetIndex(datasetIndex);return item;}"
106	"public void test(){if(this.plot.isRangeCrosshairLockedOnData()){crosshairState.updateCrosshairPoint(rowKey,columnKey,value,datasetIndex,transX,transY,orientation);}else {crosshairState.updateCrosshairX(rowKey,columnKey,datasetIndex,transX,orientation);}}"
107	"public void test(){g2.setFont(labelFont);g2.setPaint(paint);String label=generator.generateLabel(dataset,row,column);ItemLabelPosition position=null;if(!negative){position=getPositiveItemLabelPosition(row,column,selected);}else {position=getNegativeItemLabelPosition(row,column,selected);}}"
108	"public void test(){int datasetIndex=plot.indexOf(dataset);return plot.getDomainAxisForDataset(datasetIndex);}"
109	"public void test(){ValueAxis result=plot.getRangeAxis(index);if(result==null){result=plot.getRangeAxis();}return result;}"
110	"public void test(){if(result==null){result=plot.getRangeAxis();}}"
111	"public void test(){LegendItemCollection result=new LegendItemCollection();if(this.plot==null){return result;}int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);}"
112	"public void test(){if(this.plot==null){return result;}}"
113	"public void test(){LegendItemCollection result=new LegendItemCollection();if(this.plot==null){return result;}int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){return result;}}"
114	"public void test(){if(this.plot==null){return result;}int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){return result;}int seriesCount=dataset.getRowCount();}"
115	"public void test(){if(dataset!=null){return result;}}"
116	"public void test(){int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){return result;}int seriesCount=dataset.getRowCount();}"
117	"public void test(){if(plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)){for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}else {for(int i=seriesCount-1;i>=0;i--){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
118	"public void test(){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}"
119	"public void test(){if(item!=null){result.add(item);}}"
120	"public void test(){if(hotspot==null){throw new IllegalArgumentException(""Null \'hotspot\' argument."");}addEntity(entities,hotspot,dataset,row,column,selected,0.0,0.0);}"
121	"public void test(){if(generator!=null){tip=generator.generateToolTip(dataset,row,column);}}"
122	"public void test(){if(urlster!=null){url=urlster.generateURL(dataset,row,column);}}"
123	"public void test(){CategoryURLGenerator urlster=getURLGenerator(row,column,selected);if(urlster!=null){url=urlster.generateURL(dataset,row,column);}CategoryItemEntity entity=new CategoryItemEntity(s,tip,url,dataset,dataset.getRowKey(row),dataset.getColumnKey(column));entities.add(entity);}"
124	"public void test(){if(result==null){result=new Rectangle();}Comparable key=dataset.getColumnKey(column);Number y=dataset.getValue(row,column);if(y==null){return null;}}"
125	"public void test(){if(result==null){result=new Rectangle();}Comparable key=dataset.getColumnKey(column);Number y=dataset.getValue(row,column);if(y==null){return null;}double xx=domainAxis.getCategoryMiddle(key,plot.getCategoriesForAxis(domainAxis),dataArea,plot.getDomainAxisEdge());}"
126	"public void test(){Number y=dataset.getValue(row,column);if(y==null){return null;}double xx=domainAxis.getCategoryMiddle(key,plot.getCategoriesForAxis(domainAxis),dataArea,plot.getDomainAxisEdge());double yy=rangeAxis.valueToJava2D(y.doubleValue(),dataArea,plot.getRangeAxisEdge());result.setRect(xx-2,yy-2,4,4);}"
127	"public void test(){if(y==null){return null;}double xx=domainAxis.getCategoryMiddle(key,plot.getCategoriesForAxis(domainAxis),dataArea,plot.getDomainAxisEdge());double yy=rangeAxis.valueToJava2D(y.doubleValue(),dataArea,plot.getRangeAxisEdge());result.setRect(xx-2,yy-2,4,4);return result;}"
128	"public void test(){Rectangle2D bounds=createHotSpotBounds(g2,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,state,null);if(bounds==null){return false;}return bounds.contains(xx,yy);}"
129	"public void test(){CategoryItemRendererState state=super.initialise(g2,dataArea,plot,dataset,info);calculateBarWidth(plot,dataArea,dataset,state);return state;}"
130	"public void test(){int columns=dataset.getColumnCount();int rows=state.getVisibleSeriesCount()>=0?state.getVisibleSeriesCount():dataset.getRowCount();double space=0.0;PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else if(orientation==PlotOrientation.VERTICAL){space=dataArea.getWidth();}}"
131	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else {space=dataArea.getWidth();}double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int seriesCount=state.getVisibleSeriesCount()>=0?state.getVisibleSeriesCount():getRowCount();}"
132	"public void test(){if(seriesCount>1){double seriesGap=space*getItemMargin()/(categoryCount*(seriesCount-1));double seriesW=calculateSeriesWidth(space,domainAxis,categoryCount,seriesCount);barW0=barW0+row*(seriesW+seriesGap)+(seriesW/2.0)-(state.getBarWidth()/2.0);}else {barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;}}"
133	"public void test(){if(dataset==null){return null;}Range result=super.findRangeBounds(dataset,includeInterval);if(result!=null){if(this.includeBaseInRange){result=Range.expandToInclude(result,this.base);}}return result;}"
134	"public void test(){result.setDataset(dataset);result.setDatasetIndex(datasetIndex);result.setSeriesKey(dataset.getRowKey(series));result.setSeriesIndex(series);if(this.gradientPaintTransformer!=null){result.setFillPaintTransformer(this.gradientPaintTransformer);}}"
135	"public void test(){if(visibleRow<0){return ;}Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}}"
136	"public void test(){if(dataValue==null){return ;} final double value=dataValue.doubleValue();PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());}"
137	"public void test(){ final double value=dataValue.doubleValue();PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return ;}}"
138	"public void test(){double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return ;}RectangleEdge edge=plot.getRangeAxisEdge();double transL0=rangeAxis.valueToJava2D(barL0L1[0],dataArea,edge);double transL1=rangeAxis.valueToJava2D(barL0L1[1],dataArea,edge);}"
139	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(value<0.0));}}"
140	"public void test(){CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column,selected);if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(value<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL0,orientation);EntityCollection entities=state.getEntityCollection();}"
141	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(value<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL0,orientation);EntityCollection entities=state.getEntityCollection();if(entities!=null){addEntity(entities,bar,dataset,row,column,selected);}}"
142	"public void test(){String label=generator.generateLabel(dataset,row,column);if(label==null){return ;}Font labelFont=getItemLabelFont(row,column,selected);g2.setFont(labelFont);}"
143	"public void test(){if(!negative){position=getPositiveItemLabelPosition(row,column,selected);}else {position=getNegativeItemLabelPosition(row,column,selected);}Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());}"
144	"public void test(){if(position!=null){anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());}}"
145	"public void test(){if(!this.getItemVisible(row,column)){return null;}Number dataValue=dataset.getValue(row,column);if(dataValue==null){return null;}}"
146	"public void test(){if(dataValue==null){return null;} final double value=dataValue.doubleValue();PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());}"
147	"public void test(){ final double value=dataValue.doubleValue();PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return null;}}"
148	"public void test(){double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return null;}RectangleEdge edge=plot.getRangeAxisEdge();double transL0=rangeAxis.valueToJava2D(barL0L1[0],dataArea,edge);double transL1=rangeAxis.valueToJava2D(barL0L1[1],dataArea,edge);}"
149	"public void test(){CategoryItemRendererState state=super.initialise(g2,dataArea,plot,dataset,info);calculateItemWidth(plot,dataArea,dataset,state);return state;}"
150	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else {space=dataArea.getWidth();}double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int seriesCount=state.getVisibleSeriesCount();}"
151	"public void test(){if(dataValue==null){return ;}double value=dataValue.doubleValue();PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);RectangleEdge edge=plot.getRangeAxisEdge();}"
152	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,x,y,(value<0.0));}}"
153	"public void test(){CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column,selected);if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,x,y,(value<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);EntityCollection entities=state.getEntityCollection();}"
154	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,x,y,(value<0.0));}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);EntityCollection entities=state.getEntityCollection();if(entities!=null){addEntity(entities,line.getBounds(),dataset,row,column,selected);}}"
155	"public void test(){if(entities!=null){addEntity(entities,line.getBounds(),dataset,row,column,selected);}}"
156	"public void test(){if(dataset==null){return null;}Range r=DatasetUtilities.findStackedRangeBounds(dataset,this.seriesToGroupMap);return r;}"
157	"public void test(){PlotOrientation orientation=plot.getOrientation();double space=0.0;if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else if(orientation==PlotOrientation.VERTICAL){space=dataArea.getWidth();}}"
158	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else {space=dataArea.getWidth();}double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int groupCount=this.seriesToGroupMap.getGroupCount();}"
159	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else {space=dataArea.getWidth();}double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());int groupCount=this.seriesToGroupMap.getGroupCount();int groupIndex=this.seriesToGroupMap.getGroupIndex(this.seriesToGroupMap.getGroup(plot.getDataset(plot.getIndexOf(this)).getRowKey(row)));int categoryCount=getColumnCount();}"
160	"public void test(){if(groupCount>1){double groupGap=space*getItemMargin()/(categoryCount*(groupCount-1));double groupW=calculateSeriesWidth(space,domainAxis,categoryCount,groupCount);barW0=barW0+groupIndex*(groupW+groupGap)+(groupW/2.0)-(state.getBarWidth()/2.0);}else {barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;}}"
161	"public void test(){Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}double value=dataValue.doubleValue();Comparable group=this.seriesToGroupMap.getGroup(dataset.getRowKey(row));}"
162	"public void test(){if(dataValue==null){return ;}double value=dataValue.doubleValue();Comparable group=this.seriesToGroupMap.getGroup(dataset.getRowKey(row));PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,row,column);}"
163	"public void test(){if(group.equals(this.seriesToGroupMap.getGroup(dataset.getRowKey(i)))){Number v=dataset.getValue(i,column);if(v!=null){double d=v.doubleValue();if(d>0){positiveBase=positiveBase+d;}else {negativeBase=negativeBase+d;}}}}"
164	"public void test(){RectangleEdge location=plot.getRangeAxisEdge();if(value>0.0){translatedBase=rangeAxis.valueToJava2D(positiveBase,dataArea,location);translatedValue=rangeAxis.valueToJava2D(positiveBase+value,dataArea,location);}else {translatedBase=rangeAxis.valueToJava2D(negativeBase,dataArea,location);translatedValue=rangeAxis.valueToJava2D(negativeBase+value,dataArea,location);}}"
165	"public void test(){if(this.visibleSeries==null){return rowIndex;}int index=-1;for(int vRow=0;vRow<this.visibleSeries.length;vRow++){if(this.visibleSeries[vRow]==rowIndex){index=vRow;break;}}return index;}"
166	"public void test(){if(this.visibleSeries[vRow]==rowIndex){index=vRow;break;}}"
167	"public void test(){if(p==null){return null;}if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=p.getDataset(datasetIndex);String label=getLegendItemLabelGenerator().generateLabel(dataset,series);String description=label;}"
168	"public void test(){if(!isSeriesVisible(series)||!isSeriesVisibleInLegend(series)){return null;}CategoryDataset dataset=p.getDataset(datasetIndex);String label=getLegendItemLabelGenerator().generateLabel(dataset,series);String description=label;String toolTipText=null;}"
169	"public void test(){Number value=dataset.getValue(row,column);if(value==null){return ;}PlotOrientation orientation=plot.getOrientation();double x1s=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}"
170	"public void test(){if(value==null){return ;}PlotOrientation orientation=plot.getOrientation();double x1s=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());double x1e=2*x1-x1s;}"
171	"public void test(){double x0e=2*x0-x0s;double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());if(getStagger()){int xStagger=row*STAGGER_WIDTH;if(xStagger>(x1s-x0e)){xStagger=(int)(x1s-x0e);}x1s=x0e+xStagger;}}"
172	"public void test(){if(isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value.doubleValue()<0.0));}}"
173	"public void test(){if(entities!=null){Rectangle2D hotspot=new Rectangle2D.Double();if(orientation==PlotOrientation.VERTICAL){hotspot.setRect(x1s,y1,x1e-x1s,4.0);}else {hotspot.setRect(y1-2.0,x1s,4.0,x1e-x1s);}addEntity(entities,hotspot,dataset,row,column,selected);}}"
174	"public void test(){clip.closePath();Composite originalComposite=g2.getComposite();g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));Paint backgroundPaint=plot.getBackgroundPaint();if(backgroundPaint!=null){g2.setPaint(backgroundPaint);g2.fill(clip);}}"
175	"public void test(){g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));Paint backgroundPaint=plot.getBackgroundPaint();if(backgroundPaint!=null){g2.setPaint(backgroundPaint);g2.fill(clip);}}"
176	"public void test(){g2.draw(corner);Image backgroundImage=plot.getBackgroundImage();if(backgroundImage!=null){Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX()+getXOffset(),dataArea.getY(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());plot.drawBackgroundImage(g2,adjusted);}}"
177	"public void test(){if(backgroundImage!=null){Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX()+getXOffset(),dataArea.getY(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());plot.drawBackgroundImage(g2,adjusted);}}"
178	"public void test(){clip.lineTo(x2,y0);clip.closePath();Stroke outlineStroke=plot.getOutlineStroke();Paint outlinePaint=plot.getOutlinePaint();if((outlineStroke!=null)&&(outlinePaint!=null)){g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(clip);}}"
179	"public void test(){Stroke outlineStroke=plot.getOutlineStroke();Paint outlinePaint=plot.getOutlinePaint();if((outlineStroke!=null)&&(outlinePaint!=null)){g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(clip);}}"
180	"public void test(){if(!range.contains(value)){return ;}Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());Line2D line1=null;Line2D line2=null;PlotOrientation orientation=plot.getOrientation();}"
181	"public void test(){if(orientation==PlotOrientation.VERTICAL){double y0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());double y1=y0-getYOffset();double x0=dataArea.getMinX();double x1=x0+getXOffset();double x2=dataArea.getMaxX();line1=new Line2D.Double(x0,y0,x1,y1);line2=new Line2D.Double(x1,y1,x2,y1);}}"
182	"public void test(){Range range=axis.getRange();if(!range.contains(value)){return ;}GeneralPath path=null;PlotOrientation orientation=plot.getOrientation();}"
183	"public void test(){if(!getItemVisible(row,column)){return ;}Number v=dataset.getValue(row,column);if(v==null){return ;}}"
184	"public void test(){if(v==null){return ;}Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());PlotOrientation orientation=plot.getOrientation();double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),adjusted,plot.getDomainAxisEdge());double value=v.doubleValue();}"
185	"public void test(){double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),adjusted,plot.getDomainAxisEdge());double value=v.doubleValue();double y1=rangeAxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());Shape shape=getItemShape(row,column,selected);if(orientation==PlotOrientation.HORIZONTAL){shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);}else if(orientation==PlotOrientation.VERTICAL){shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);}}"
186	"public void test(){if(isItemLabelVisible(row,column,selected)){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value<0.0));}}"
187	"public void test(){if(entities!=null){addEntity(entities,shape,dataset,row,column,selected);}}"
188	"public void test(){if(!(dataset instanceof StatisticalCategoryDataset)){throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");}}"
189	"public void test(){if(visibleRow<0){return ;}if(!(dataset instanceof StatisticalCategoryDataset)){throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");}StatisticalCategoryDataset statDataset=(StatisticalCategoryDataset)dataset;PlotOrientation orientation=plot.getOrientation();}"
190	"public void test(){StatisticalCategoryDataset statDataset=(StatisticalCategoryDataset)dataset;PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statDataset,visibleRow,row,column,selected);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statDataset,visibleRow,row,column,selected);}}"
191	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statDataset,visibleRow,row,column,selected);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statDataset,visibleRow,row,column,selected);}}"
192	"public void test(){if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statDataset,visibleRow,row,column,selected);}}"
193	"public void test(){RectangleEdge xAxisLocation=plot.getDomainAxisEdge();double rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);int seriesCount=state.getVisibleSeriesCount()>=0?state.getVisibleSeriesCount():getRowCount();int categoryCount=getColumnCount();if(seriesCount>1){double seriesGap=dataArea.getHeight()*getItemMargin()/(categoryCount*(seriesCount-1));rectY=rectY+visibleRow*(state.getBarWidth()+seriesGap);}else {rectY=rectY+visibleRow*state.getBarWidth();}}"
194	"public void test(){RectangleEdge xAxisLocation=plot.getDomainAxisEdge();double rectX=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,xAxisLocation);int seriesCount=state.getVisibleSeriesCount()>=0?state.getVisibleSeriesCount():getRowCount();int categoryCount=getColumnCount();if(seriesCount>1){double seriesGap=dataArea.getWidth()*getItemMargin()/(categoryCount*(seriesCount-1));rectX=rectX+visibleRow*(state.getBarWidth()+seriesGap);}else {rectX=rectX+visibleRow*state.getBarWidth();}}"
195	"public void test(){if(dataset instanceof IntervalCategoryDataset){IntervalCategoryDataset d=(IntervalCategoryDataset)dataset;drawInterval(g2,state,dataArea,plot,domainAxis,rangeAxis,d,row,column,selected);}else {super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);}}"
196	"public void test(){int seriesCount=state.getVisibleSeriesCount()>=0?state.getVisibleSeriesCount():getRowCount();int categoryCount=getColumnCount();PlotOrientation orientation=plot.getOrientation();double rectX=0.0;double rectY=0.0;}"
197	"public void test(){double rectY=0.0;RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();Number value0=dataset.getEndValue(row,column);if(value0==null){return ;}}"
198	"public void test(){if((rows*columns)>0){state.setBarWidth(Math.min(used/(dataset.getColumnCount()),maxWidth));}else {state.setBarWidth(Math.min(used,maxWidth));}}"
199	"public void test(){PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}}"
200	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}else if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}}"
201	"public void test(){if(orientation==PlotOrientation.VERTICAL){drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected);}}"
202	"public void test(){Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}double value=dataValue.doubleValue();double base=0.0;}"
203	"public void test(){if(generator!=null&&isItemLabelVisible(row,column,selected)){drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(transX1>transX2));}}"
204	"public void test(){Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}double rectX=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;int seriesCount=getRowCount();}"
205	"public void test(){Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}double rectX=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;int seriesCount=getRowCount();double value=dataValue.doubleValue();}"
206	"public void test(){Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());CategoryItemRendererState state=super.initialise(g2,adjusted,plot,dataset,info);return state;}"
207	"public void test(){Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}double value=dataValue.doubleValue();Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());}"
208	"public void test(){Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());PlotOrientation orientation=plot.getOrientation();double barW0=calculateBarW0(plot,orientation,adjusted,domainAxis,state,row,column);double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return ;}}"
209	"public void test(){double[] barL0L1=calculateBarL0L1(value,rangeAxis.getLowerBound(),rangeAxis.getUpperBound());if(barL0L1==null){return ;}RectangleEdge edge=plot.getRangeAxisEdge();double transL0=rangeAxis.valueToJava2D(barL0L1[0],adjusted,edge);double transL1=rangeAxis.valueToJava2D(barL0L1[1],adjusted,edge);}"
210	"public void test(){if(this.renderAsPercentages){return new Range(0.0,1.0);}else {return DatasetUtilities.findStackedRangeBounds(dataset,getBase());}}"
211	"public void test(){if(!isSeriesVisible(row)){return ;}Number dataValue=dataset.getValue(row,column);if(dataValue==null){return ;}}"
212	"public void test(){if(this.renderAsPercentages){total=DataUtilities.calculateColumnTotal(dataset,column,state.getVisibleSeriesArray());value=value/total;}}"
213	"public void test(){if(this.renderAsPercentages){total=DataUtilities.calculateColumnTotal(dataset,column,state.getVisibleSeriesArray());value=value/total;}PlotOrientation orientation=plot.getOrientation();double barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;}"
214	"public void test(){if(this.renderAsPercentages){total=DataUtilities.calculateColumnTotal(dataset,column,state.getVisibleSeriesArray());value=value/total;}PlotOrientation orientation=plot.getOrientation();double barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge())-state.getBarWidth()/2.0;double positiveBase=getBase();double negativeBase=positiveBase;}"
215	"public void test(){Number v=dataset.getValue(i,column);if(v!=null&&isSeriesVisible(i)){double d=v.doubleValue();if(this.renderAsPercentages){d=d/total;}if(d>0){positiveBase=positiveBase+d;}else {negativeBase=negativeBase+d;}}}"
216	"public void test(){RectangleEdge location=plot.getRangeAxisEdge();if(positive){translatedBase=rangeAxis.valueToJava2D(positiveBase,dataArea,location);translatedValue=rangeAxis.valueToJava2D(positiveBase+value,dataArea,location);}else {translatedBase=rangeAxis.valueToJava2D(negativeBase,dataArea,location);translatedValue=rangeAxis.valueToJava2D(negativeBase+value,dataArea,location);}}"
217	"public void test(){if(!getItemLineVisible(row,column)&&!getItemShapeVisible(row,column)){return ;}Number v=dataset.getValue(row,column);if(v==null){return ;}}"
218	"public void test(){if(visibleRow<0){return ;}int visibleRowCount=state.getVisibleSeriesCount();PlotOrientation orientation=plot.getOrientation();double x1;if(this.useSeriesOffset){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
219	"public void test(){if(this.useSeriesOffset){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}double value=v.doubleValue();double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());}"
220	"public void test(){if(this.useSeriesOffset){x0=domainAxis.getCategorySeriesMiddle(column-1,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x0=domainAxis.getCategoryMiddle(column-1,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
221	"public void test(){if(this.useSeriesOffset){x0=domainAxis.getCategorySeriesMiddle(column-1,dataset.getColumnCount(),visibleRow,visibleRowCount,this.itemMargin,dataArea,plot.getDomainAxisEdge());}else {x0=domainAxis.getCategoryMiddle(column-1,getColumnCount(),dataArea,plot.getDomainAxisEdge());}double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());Line2D line=null;}"
222	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawItemLabel(g2,orientation,dataset,row,column,selected,y1,x1,(value<0.0));}else if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value<0.0));}}"
223	"public void test(){if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value<0.0));}}"
224	"public void test(){if(isItemLabelVisible(row,column,selected)){if(orientation==PlotOrientation.HORIZONTAL){drawItemLabel(g2,orientation,dataset,row,column,selected,y1,x1,(value<0.0));}else if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value<0.0));}}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,x1,y1,orientation);}"
225	"public void test(){if(isItemLabelVisible(row,column,selected)){if(orientation==PlotOrientation.HORIZONTAL){drawItemLabel(g2,orientation,dataset,row,column,selected,y1,x1,(value<0.0));}else if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(value<0.0));}}int datasetIndex=plot.indexOf(dataset);updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,x1,y1,orientation);EntityCollection entities=state.getEntityCollection();}"
226	"public void test(){if(!(dataset instanceof StatisticalCategoryDataset)){super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,selected,pass);return ;}}"
227	"public void test(){if(visibleRow<0){return ;}int visibleRowCount=state.getVisibleSeriesCount();StatisticalCategoryDataset statDataset=(StatisticalCategoryDataset)dataset;Number meanValue=statDataset.getMeanValue(row,column);if(meanValue==null){return ;}}"
228	"public void test(){Number meanValue=statDataset.getMeanValue(row,column);if(meanValue==null){return ;}PlotOrientation orientation=plot.getOrientation();double x1;if(getUseSeriesOffset()){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
229	"public void test(){if(getUseSeriesOffset()){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
230	"public void test(){if(getUseSeriesOffset()){x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());}else {x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());}double y1=rangeAxis.valueToJava2D(meanValue.doubleValue(),dataArea,plot.getRangeAxisEdge());Number sdv=statDataset.getStdDevValue(row,column);}"
231	"public void test(){RectangleEdge yAxisLocation=plot.getRangeAxisEdge();double valueDelta=sdv.doubleValue();double highVal,lowVal;if((meanValue.doubleValue()+valueDelta)>rangeAxis.getRange().getUpperBound()){highVal=rangeAxis.valueToJava2D(rangeAxis.getRange().getUpperBound(),dataArea,yAxisLocation);}else {highVal=rangeAxis.valueToJava2D(meanValue.doubleValue()+valueDelta,dataArea,yAxisLocation);}}"
232	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawItemLabel(g2,orientation,dataset,row,column,selected,y1,x1,(meanValue.doubleValue()<0.0));}else if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(meanValue.doubleValue()<0.0));}}"
233	"public void test(){if(orientation==PlotOrientation.VERTICAL){drawItemLabel(g2,orientation,dataset,row,column,selected,x1,y1,(meanValue.doubleValue()<0.0));}}"
234	"public void test(){if(getUseSeriesOffset()){x0=domainAxis.getCategorySeriesMiddle(column-1,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());}else {x0=domainAxis.getCategoryMiddle(column-1,getColumnCount(),dataArea,plot.getDomainAxisEdge());}}"
235	"public void test(){if(getUseSeriesOffset()){x0=domainAxis.getCategorySeriesMiddle(column-1,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());}else {x0=domainAxis.getCategoryMiddle(column-1,getColumnCount(),dataArea,plot.getDomainAxisEdge());}double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());Line2D line=null;}"
236	"public void test(){if(entities!=null){addEntity(entities,hotspot,dataset,row,column,selected,x1,y1);}}"
237	"public void test(){shape=new Rectangle2D.Double(x1-4,y1-4,8.0,8.0);PlotOrientation orient=plot.getOrientation();if(orient==PlotOrientation.VERTICAL){this.objectIcon.paintIcon(null,g2,(int)x1,(int)y1);}else {this.objectIcon.paintIcon(null,g2,(int)y1,(int)x1);}}"
238	"public void test(){if(dataset.getRowCount()-1==row){g2.setPaint(this.groupPaint);g2.setStroke(this.groupStroke);double minY=rangeAxis.valueToJava2D(this.min,dataArea,plot.getRangeAxisEdge());double maxY=rangeAxis.valueToJava2D(this.max,dataArea,plot.getRangeAxisEdge());if(orient==PlotOrientation.VERTICAL){g2.draw(new Line2D.Double(x1,minY,x1,maxY));this.minIcon.paintIcon(null,g2,(int)x1,(int)minY);this.maxIcon.paintIcon(null,g2,(int)x1,(int)maxY);}else {g2.draw(new Line2D.Double(minY,x1,maxY,x1));this.minIcon.paintIcon(null,g2,(int)minY,(int)x1);this.maxIcon.paintIcon(null,g2,(int)maxY,(int)x1);}}}"
239	"public void test(){{g2.setPaint(this.groupPaint);g2.setStroke(this.groupStroke);double minY=rangeAxis.valueToJava2D(this.min,dataArea,plot.getRangeAxisEdge());double maxY=rangeAxis.valueToJava2D(this.max,dataArea,plot.getRangeAxisEdge());if(orient==PlotOrientation.VERTICAL){g2.draw(new Line2D.Double(x1,minY,x1,maxY));this.minIcon.paintIcon(null,g2,(int)x1,(int)minY);this.maxIcon.paintIcon(null,g2,(int)x1,(int)maxY);}else {g2.draw(new Line2D.Double(minY,x1,maxY,x1));this.minIcon.paintIcon(null,g2,(int)minY,(int)x1);this.maxIcon.paintIcon(null,g2,(int)maxY,(int)x1);}}}"
240	"public void test(){{Number previousValue=dataset.getValue(row,column-1);if(previousValue!=null){double previous=previousValue.doubleValue();double x0=domainAxis.getCategoryMiddle(column-1,getColumnCount(),dataArea,plot.getDomainAxisEdge());double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());g2.setPaint(getItemPaint(row,column,selected));g2.setStroke(getItemStroke(row,column,selected));Line2D line;if(orient==PlotOrientation.VERTICAL){line=new Line2D.Double(x0,y0,x1,y1);}else {line=new Line2D.Double(y0,x0,y1,x1);}g2.draw(line);}}}"
241	"public void test(){if(entities!=null&&shape!=null){addEntity(entities,shape,dataset,row,column,selected);}}"
242	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){space=dataArea.getHeight();}else if(orientation==PlotOrientation.VERTICAL){space=dataArea.getWidth();}double maxWidth=space*getMaximumBarWidth();int columns=dataset.getColumnCount();double categoryMargin=0.0;if(columns>1){categoryMargin=domainAxis.getCategoryMargin();}}"
243	"public void test(){if(asPercentages){total=DataUtilities.calculateColumnTotal(dataset,dataset.getColumnIndex(category),includedRows);}}"
244	"public void test(){int r=includedRows[i];Number n=dataset.getValue(dataset.getRowKey(r),category);if(n==null){continue;}double v=n.doubleValue();}"
245	"public void test(){if(row<dataset.getRowCount()-1){return ;}}"
246	"public void test(){if(row<dataset.getRowCount()-1){return ;}Comparable category=dataset.getColumnKey(column);List values=createStackedValueList(dataset,dataset.getColumnKey(column),state.getVisibleSeriesArray(),getBase(),this.renderAsPercentages);Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());}"
247	"public void test(){if(row<dataset.getRowCount()-1){return ;}Comparable category=dataset.getColumnKey(column);List values=createStackedValueList(dataset,dataset.getColumnKey(column),state.getVisibleSeriesArray(),getBase(),this.renderAsPercentages);Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());PlotOrientation orientation=plot.getOrientation();}"
248	"public void test(){Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY()+getYOffset(),dataArea.getWidth()-getXOffset(),dataArea.getHeight()-getYOffset());PlotOrientation orientation=plot.getOrientation();if(orientation==PlotOrientation.HORIZONTAL){drawStackHorizontal(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);}else {drawStackVertical(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);}}"
249	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){drawStackHorizontal(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);}else {drawStackVertical(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);}}"
250	"public void test(){if(curr[0]==null){series=-((Integer)prev[0]).intValue()-1;}else {series=((Integer)curr[0]).intValue();if(series<0){series=-((Integer)prev[0]).intValue()-1;}}double v0=((Double)prev[1]).doubleValue();double vv0=rangeAxis.valueToJava2D(v0,dataArea,plot.getRangeAxisEdge());double v1=((Double)curr[1]).doubleValue();}"
251	"public void test(){if(entities!=null){addEntity(entities,faces[5],dataset,series,column,false);}}"
252	"public void test(){if(generator!=null&&isItemLabelVisible(series,column,false)){drawItemLabelForBar(g2,plot,dataset,series,column,false,generator,bar,neg);}}"
253	"public void test(){XYPlot plot=getPlot();if(plot==null){return null;}LegendItem result=null;XYDataset dataset=plot.getDataset(datasetIndex);}"
254	"public void test(){if(plot==null){return null;}XYDataset dataset=plot.getDataset(datasetIndex);if(dataset==null){return null;}}"
255	"public void test(){for(int i=0;i<series;i++){double value=dataset.getYValue(i,index);if(!Double.isNaN(value)){result+=value;}}}"
256	"public void test(){for(int i=0;i<series;i++){double v=dataset.getYValue(i,index);if(!Double.isNaN(v)){if(v>=0.0){result[1]+=v;}else {result[0]+=v;}}}}"
257	"public void test(){if(p!=null){ValueAxis xAxis=null;int index=p.getIndexOf(this);if(index>=0){xAxis=plot.getDomainAxisForDataset(index);}if(xAxis!=null){xRange=xAxis.getRange();}}}"
258	"public void test(){if(index>=0){xAxis=plot.getDomainAxisForDataset(index);}}"
259	"public void test(){if(this.plot==null){return new LegendItemCollection();}LegendItemCollection result=new LegendItemCollection();int index=this.plot.getIndexOf(this);XYDataset dataset=this.plot.getDataset(index);}"
260	"public void test(){int index=this.plot.getIndexOf(this);XYDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
261	"public void test(){{if(this.plot==null){return new LegendItemCollection();}LegendItemCollection result=new LegendItemCollection();int index=this.plot.getIndexOf(this);XYDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}return result;}}"
262	"public void test(){if(xyplot==null){return null;}XYDataset dataset=xyplot.getDataset(datasetIndex);if(dataset==null){return null;}}"
263	"public void test(){LegendItem result=null;XYPlot plot=getPlot();if(plot==null){return null;}XYDataset dataset=plot.getDataset(datasetIndex);}"
264	"public void test(){{XYDataset dataset=polarPlot.getDataset();if(dataset!=null){String label=dataset.getSeriesKey(series).toString();String description=label;Shape shape=lookupSeriesShape(series);Paint paint=lookupSeriesPaint(series);Paint outlinePaint=lookupSeriesOutlinePaint(series);Stroke outlineStroke=lookupSeriesOutlineStroke(series);result=new LegendItem(label,description,null,null,shape,paint,outlineStroke,outlinePaint);result.setDataset(dataset);}}}"
265	"public void test(){int index=0;double x=dataset.getXValue(series,index);while(index<itemCount&&(x<xLow||x>xHigh)){index++;if(index<itemCount){x=dataset.getXValue(series,index);}}}"
266	"public void test(){while(index<itemCount&&(x<xLow||x>xHigh)){index++;if(index<itemCount){x=dataset.getXValue(series,index);}}}"
267	"public void test(){if(index<itemCount){x=dataset.getXValue(series,index);}}"
268	"public void test(){while(index<itemCount&&(x<xLow||x>xHigh)){index++;if(index<itemCount){x=dataset.getXValue(series,index);}}return Math.min(Math.max(0,index),itemCount-1);}"
269	"public void test(){int index=itemCount-1;double x=dataset.getXValue(series,index);while(index>=0&&(x<xLow||x>xHigh)){index--;if(index>=0){x=dataset.getXValue(series,index);}}}"
270	"public void test(){while(index>=0&&(x<xLow||x>xHigh)){index--;if(index>=0){x=dataset.getXValue(series,index);}}}"
271	"public void test(){if(index>=0){x=dataset.getXValue(series,index);}}"
272	"public void test(){while(index>=0&&(x<xLow||x>xHigh)){index--;if(index>=0){x=dataset.getXValue(series,index);}}return Math.max(index,0);}"
273	"public void test(){if(this.plot==null){return ;}WaferMapDataset data=this.plot.getDataset();Number dataMin=data.getMinValue();Number dataMax=data.getMaxValue();}"
274	"public void test(){if(unique.add(entry.getValue())){String label=getMinPaintValue((Integer)entry.getValue()).toString()+"" - "";String description=label;Shape shape=new Rectangle2D.Double(1.0,1.0,1.0,1.0);Paint paint=getSeriesPaint(((Integer)entry.getValue()).intValue());Paint outlinePaint=Color.black;Stroke outlineStroke=DEFAULT_STROKE;result.add(new LegendItem(label,description,null,null,shape,paint,outlineStroke,outlinePaint));}}"
275	"public void test(){Object result=null;if(this.equals(AreaRendererEndType.LEVEL)){result=AreaRendererEndType.LEVEL;}else if(this.equals(AreaRendererEndType.TAPER)){result=AreaRendererEndType.TAPER;}else if(this.equals(AreaRendererEndType.TRUNCATE)){result=AreaRendererEndType.TRUNCATE;}return result;}"
276	"public void test(){if(this.equals(AreaRendererEndType.LEVEL)){result=AreaRendererEndType.LEVEL;}else if(this.equals(AreaRendererEndType.TAPER)){result=AreaRendererEndType.TAPER;}else if(this.equals(AreaRendererEndType.TRUNCATE)){result=AreaRendererEndType.TRUNCATE;}}"
277	"public void test(){if(this.equals(AreaRendererEndType.TAPER)){result=AreaRendererEndType.TAPER;}else if(this.equals(AreaRendererEndType.TRUNCATE)){result=AreaRendererEndType.TRUNCATE;}}"
278	"public void test(){if(this.equals(AreaRendererEndType.TRUNCATE)){result=AreaRendererEndType.TRUNCATE;}}"
279	"public void test(){int index=-1;for(int i=0;(index==-1)&&(i<menu.getComponentCount());i++){Component comp=menu.getComponent(i);if(comp instanceof JMenuItem){JMenuItem item=(JMenuItem)comp;if(text.equals(item.getText())){index=i;}}}return index;}"
280	"public void test(){for(int i=0;(index==-1)&&(i<menu.getComponentCount());i++){Component comp=menu.getComponent(i);if(comp instanceof JMenuItem){JMenuItem item=(JMenuItem)comp;if(text.equals(item.getText())){index=i;}}}}"
281	"public void test(){if(text.equals(item.getText())){index=i;}}"
282	"public void test(){if(order==null){throw new IllegalArgumentException(""Null \'order\' argument."");}MultiplePiePlot plot=new MultiplePiePlot(dataset);plot.setDataExtractOrder(order);plot.setBackgroundPaint(null);}"
283	"public void test(){renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
284	"public void test(){CategoryAxis categoryAxis=new CategoryAxis(domainAxisLabel);ValueAxis valueAxis=new NumberAxis(rangeAxisLabel);StackedBarRenderer renderer=new StackedBarRenderer();renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
285	"public void test(){CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);plot.setForegroundAlpha(0.75);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
286	"public void test(){CategoryAxis categoryAxis=new CategoryAxis3D(categoryAxisLabel);ValueAxis valueAxis=new NumberAxis3D(valueAxisLabel);CategoryItemRenderer renderer=new StackedBarRenderer3D();renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
287	"public void test(){CategoryAxis categoryAxis=new CategoryAxis(categoryAxisLabel);ValueAxis valueAxis=new NumberAxis(valueAxisLabel);LineAndShapeRenderer renderer=new LineAndShapeRenderer(true,false);renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
288	"public void test(){CategoryAxis categoryAxis=new CategoryAxis3D(categoryAxisLabel);ValueAxis valueAxis=new NumberAxis3D(valueAxisLabel);LineRenderer3D renderer=new LineRenderer3D();renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
289	"public void test(){CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,dateAxis,renderer);plot.setOrientation(PlotOrientation.HORIZONTAL);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
290	"public void test(){baseline.setPaint(Color.black);plot.addRangeMarker(baseline,Layer.FOREGROUND);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
291	"public void test(){renderer.setBaseToolTipGenerator(new BoxAndWhiskerToolTipGenerator());CategoryPlot plot=new CategoryPlot(dataset,categoryAxis,valueAxis,renderer);JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);currentTheme.apply(chart);return chart;}"
292	"public void test(){RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);if(orientation==PlotOrientation.HORIZONTAL){anchorY=(float)domainAxis.getCategoryJava2DCoordinate(this.categoryAnchor,catIndex,catCount,dataArea,domainEdge);anchorX=(float)rangeAxis.valueToJava2D(this.value,dataArea,rangeEdge);}else if(orientation==PlotOrientation.VERTICAL){anchorX=(float)domainAxis.getCategoryJava2DCoordinate(this.categoryAnchor,catIndex,catCount,dataArea,domainEdge);anchorY=(float)rangeAxis.valueToJava2D(this.value,dataArea,rangeEdge);}}"
293	"public void test(){BlockParams p=new BlockParams();if(info!=null){if(info.getOwner().getEntityCollection()!=null){p.setGenerateEntities(true);}}Object result=this.title.draw(g2,titleRect,p);}"
294	"public void test(){if(result instanceof EntityBlockResult){EntityBlockResult ebr=(EntityBlockResult)result;info.getOwner().getEntityCollection().addAll(ebr.getEntityCollection());}}"
295	"public void test(){for(int i=0;i<count;i++){ final int index=stream.readInt();if(index!=-1){setPaint(index,SerialUtilities.readPaint(stream));}}}"
296	"public void test(){if(index!=-1){setPaint(index,SerialUtilities.readPaint(stream));}}"
297	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){setShape(index,SerialUtilities.readShape(stream));}}}"
298	"public void test(){if(index!=-1){setShape(index,SerialUtilities.readShape(stream));}}"
299	"public void test(){while(c.isArray()){c=c.getComponentType();} final String baseName=c.getName(); final int index=baseName.lastIndexOf('.');if(index==-1){return name;} final String pkgName=baseName.substring(0,index);}"
300	"public void test(){if(index==-1){return name;}}"
301	"public void test(){ final int index=baseName.lastIndexOf('.');if(index==-1){return name;} final String pkgName=baseName.substring(0,index);return pkgName.replace('.','/')+""/"";}"
302	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){setStroke(index,SerialUtilities.readStroke(stream));}}}"
303	"public void test(){if(index!=-1){setStroke(index,SerialUtilities.readStroke(stream));}}"
304	"public void test(){Object result=null;if(index>=0&&index<this.size){result=this.objects[index];}return result;}"
305	"public void test(){if(index>=0&&index<this.size){result=this.objects[index];}}"
306	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires index >= 0."");}}"
307	"public void test(){if(index>=this.objects.length){Object[] enlarged=new Object[index+this.increment];System.arraycopy(this.objects,0,enlarged,0,this.objects.length);this.objects=enlarged;}}"
308	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires index >= 0."");}if(index>=this.objects.length){Object[] enlarged=new Object[index+this.increment];System.arraycopy(this.objects,0,enlarged,0,this.objects.length);this.objects=enlarged;}this.objects[index]=object;this.size=Math.max(this.size,index+1);}"
309	"public void test(){for(int index=0;index<this.size;index++){if(this.objects[index]==object){return (index);}}}"
310	"public void test(){if(this.objects[index]==object){return (index);}}"
311	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){set(index,stream.readObject());}}}"
312	"public void test(){if(index!=-1){set(index,stream.readObject());}}"
313	"public void test(){CategoryPlot plot=(CategoryPlot)this.subplots.get(i);if(orientation==PlotOrientation.HORIZONTAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
314	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
315	"public void test(){if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
316	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.VERTICAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateRangeAxisSpace(g2,this.subplotAreas[i],null);}"
317	"public void test(){CategoryPlot plot=(CategoryPlot)this.subplots.get(i);PlotRenderingInfo subplotInfo=null;if(info!=null){subplotInfo=new PlotRenderingInfo(info.getOwner());info.addSubplotInfo(subplotInfo);}}"
318	"public void test(){if(info!=null){subplotInfo=new PlotRenderingInfo(info.getOwner());info.addSubplotInfo(subplotInfo);}Point2D subAnchor=null;if(anchor!=null&&this.subplotAreas[i].contains(anchor)){subAnchor=anchor;}plot.draw(g2,this.subplotAreas[i],subAnchor,parentState,subplotInfo);}"
319	"public void test(){LegendItemCollection result=getFixedLegendItems();if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){CategoryPlot plot=(CategoryPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}}"
320	"public void test(){if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){CategoryPlot plot=(CategoryPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}}"
321	"public void test(){{LegendItemCollection result=getFixedLegendItems();if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){CategoryPlot plot=(CategoryPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}return result;}}"
322	"public void test(){while(iterator.hasNext()){CategoryPlot plot=(CategoryPlot)iterator.next();List more=plot.getCategories();Iterator moreIterator=more.iterator();while(moreIterator.hasNext()){Comparable category=(Comparable)moreIterator.next();if(!result.contains(category)){result.add(category);}}}}"
323	"public void test(){DialLayer layer=(DialLayer)this.layers.get(index);if(layer!=null){layer.removeChangeListener(this);}this.layers.remove(index);fireChangeEvent();}"
324	"public void test(){DialPointer pointer=(DialPointer)this.pointers.get(index);if(pointer!=null){pointer.removeChangeListener(this);}this.pointers.remove(index);fireChangeEvent();}"
325	"public void test(){if(this.datasets.size()>index){result=(ValueDataset)this.datasets.get(index);}}"
326	"public void test(){ValueDataset existing=(ValueDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset,new DatasetChangeInfo());datasetChanged(event);}"
327	"public void test(){double result=Double.NaN;ValueDataset dataset=getDataset(datasetIndex);if(dataset!=null){Number n=dataset.getValue();if(n!=null){result=n.doubleValue();}}return result;}"
328	"public void test(){if(scale==null){throw new IllegalArgumentException(""Null \'scale\' argument."");}DialScale existing=(DialScale)this.scales.get(index);if(existing!=null){removeLayer(existing);}}"
329	"public void test(){if(existing!=null){removeLayer(existing);}this.layers.add(scale);this.scales.set(index,scale);scale.addChangeListener(this);fireChangeEvent();}"
330	"public void test(){if(this.scales.size()>index){result=(DialScale)this.scales.get(index);}}"
331	"public void test(){if(extract==null){throw new IllegalArgumentException(""Null \'extract\' argument."");}this.dataset=dataset;if(dataset!=null){dataset.addChangeListener(this);}}"
332	"public void test(){if(dataset!=null){dataset.addChangeListener(this);}}"
333	"public void test(){if(this.dataset!=null){this.dataset.removeChangeListener(this);}}"
334	"public void test(){if(this.dataset!=null){this.dataset.removeChangeListener(this);}this.dataset=dataset;if(dataset!=null){setDatasetGroup(dataset.getGroup());dataset.addChangeListener(this);}datasetChanged(new DatasetChangeEvent(this,dataset,new DatasetChangeInfo()));}"
335	"public void test(){if(dataset!=null){setDatasetGroup(dataset.getGroup());dataset.addChangeListener(this);}}"
336	"public void test(){LegendItemCollection result=new LegendItemCollection();if(getDataset()==null){return result;}List keys=null;if(this.dataExtractOrder==TableOrder.BY_ROW){keys=this.dataset.getRowKeys();}else if(this.dataExtractOrder==TableOrder.BY_COLUMN){keys=this.dataset.getColumnKeys();}}"
337	"public void test(){if(getDataset()==null){return result;}}"
338	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){keys=this.dataset.getRowKeys();}else if(this.dataExtractOrder==TableOrder.BY_COLUMN){keys=this.dataset.getColumnKeys();}}"
339	"public void test(){if(this.dataExtractOrder==TableOrder.BY_COLUMN){keys=this.dataset.getColumnKeys();}}"
340	"public void test(){if(keys==null){return result;}}"
341	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){seriesCount=this.dataset.getRowCount();catCount=this.dataset.getColumnCount();}else {seriesCount=this.dataset.getColumnCount();catCount=this.dataset.getRowCount();}}"
342	"public void test(){if(this.toolTipGenerator!=null){tip=this.toolTipGenerator.generateToolTip(this.dataset,row,col);}}"
343	"public void test(){if(this.urlGenerator!=null){url=this.urlGenerator.generateURL(this.dataset,row,col);}}"
344	"public void test(){if(this.urlGenerator!=null){url=this.urlGenerator.generateURL(this.dataset,row,col);}Shape area=new Rectangle((int)(point.getX()-headW),(int)(point.getY()-headH),(int)(headW*2),(int)(headH*2));CategoryItemEntity entity=new CategoryItemEntity(area,tip,url,this.dataset,this.dataset.getRowKey(row),this.dataset.getColumnKey(col));entities.add(entity);}"
345	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){value=this.dataset.getValue(series,cat);}else if(this.dataExtractOrder==TableOrder.BY_COLUMN){value=this.dataset.getValue(cat,series);}}"
346	"public void test(){if(this.dataExtractOrder==TableOrder.BY_COLUMN){value=this.dataset.getValue(cat,series);}}"
347	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){label=this.labelGenerator.generateColumnLabel(this.dataset,cat);}else {label=this.labelGenerator.generateRowLabel(this.dataset,cat);}}"
348	"public void test(){if(this.dataset!=null){this.dataset.addChangeListener(this);}}"
349	"public void test(){if(index<this.domainAxes.size()){result=(ValueAxis)this.domainAxes.get(index);}}"
350	"public void test(){if(parent instanceof XYPlot){XYPlot xy=(XYPlot)parent;result=xy.getDomainAxis(index);}}"
351	"public void test(){ValueAxis existing=getDomainAxis(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
352	"public void test(){if(axis!=null){axis.setPlot(this);}this.domainAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}}"
353	"public void test(){if(index<this.domainAxisLocations.size()){result=(AxisLocation)this.domainAxisLocations.get(index);}}"
354	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}}"
355	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}this.domainAxisLocations.set(index,location);if(notify){fireChangeEvent();}}"
356	"public void test(){AxisLocation location=getDomainAxisLocation(index);RectangleEdge result=Plot.resolveDomainAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getDomainAxisEdge());}return result;}"
357	"public void test(){if(index<this.rangeAxes.size()){result=(ValueAxis)this.rangeAxes.get(index);}}"
358	"public void test(){if(parent instanceof XYPlot){XYPlot xy=(XYPlot)parent;result=xy.getRangeAxis(index);}}"
359	"public void test(){ValueAxis existing=getRangeAxis(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
360	"public void test(){if(axis!=null){axis.setPlot(this);}this.rangeAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}}"
361	"public void test(){if(index<this.rangeAxisLocations.size()){result=(AxisLocation)this.rangeAxisLocations.get(index);}}"
362	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}this.rangeAxisLocations.set(index,location);if(notify){fireChangeEvent();}}"
363	"public void test(){AxisLocation location=getRangeAxisLocation(index);RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getRangeAxisEdge());}return result;}"
364	"public void test(){if(this.datasets.size()>index){result=(XYDataset)this.datasets.get(index);}}"
365	"public void test(){XYDataset existing=getDataset(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset,new DatasetChangeInfo());datasetChanged(event);}"
366	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires \'index\' >= 0."");}}"
367	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires \'index\' >= 0."");}checkAxisIndices(axisIndices);Integer key=new Integer(index);this.datasetToDomainAxesMap.put(key,new ArrayList(axisIndices));datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));}"
368	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires \'index\' >= 0."");}checkAxisIndices(axisIndices);Integer key=new Integer(index);this.datasetToRangeAxesMap.put(key,new ArrayList(axisIndices));datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));}"
369	"public void test(){if(this.renderers.size()>index){result=(XYItemRenderer)this.renderers.get(index);}}"
370	"public void test(){XYItemRenderer existing=getRenderer(index);if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);if(renderer!=null){renderer.setPlot(this);renderer.addChangeListener(this);}}"
371	"public void test(){if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);if(renderer!=null){renderer.setPlot(this);renderer.addChangeListener(this);}}"
372	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}}"
373	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}return this.quadrantPaint[index];}"
374	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}this.quadrantPaint[index]=paint;fireChangeEvent();}"
375	"public void test(){Integer key=new Integer(index);if(this.backgroundDomainMarkers!=null){Collection markers=(Collection)this.backgroundDomainMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}}"
376	"public void test(){markers=(Collection)this.foregroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}"
377	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.foregroundDomainMarkers.put(new Integer(index),markers);}}"
378	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
379	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}}"
380	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));}}"
381	"public void test(){markers=(Collection)this.foregroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}"
382	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.foregroundRangeMarkers.put(new Integer(index),markers);}}"
383	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
384	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}}"
385	"public void test(){Integer key=new Integer(index);if(this.backgroundRangeMarkers!=null){Collection markers=(Collection)this.backgroundRangeMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}}"
386	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));}}"
387	"public void test(){for(int index=0;index<this.domainAxes.size();index++){ValueAxis axis=(ValueAxis)this.domainAxes.get(index);if(axis!=null){axisCollection.add(axis,getDomainAxisEdge(index));}}}"
388	"public void test(){if(axis!=null){axisCollection.add(axis,getDomainAxisEdge(index));}}"
389	"public void test(){for(int index=0;index<this.rangeAxes.size();index++){ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(index);if(yAxis!=null){axisCollection.add(yAxis,getRangeAxisEdge(index));}}}"
390	"public void test(){if(yAxis!=null){axisCollection.add(yAxis,getRangeAxisEdge(index));}}"
391	"public void test(){foundData=true;ValueAxis xAxis=getDomainAxisForDataset(index);ValueAxis yAxis=getRangeAxisForDataset(index);if(xAxis==null||yAxis==null){return foundData;}}"
392	"public void test(){foundData=true;ValueAxis xAxis=getDomainAxisForDataset(index);ValueAxis yAxis=getRangeAxisForDataset(index);if(xAxis==null||yAxis==null){return foundData;}XYItemRenderer renderer=getRenderer(index);}"
393	"public void test(){if(xAxis==null||yAxis==null){return foundData;}XYItemRenderer renderer=getRenderer(index);if(renderer==null){renderer=getRenderer();if(renderer==null){return foundData;}}}"
394	"public void test(){if(index<0||index>=upper){throw new IllegalArgumentException(""Index ""+index);}}"
395	"public void test(){ValueAxis valueAxis=null;List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getDomainAxis(axisIndex.intValue());}else {valueAxis=getDomainAxis(0);}}"
396	"public void test(){ValueAxis valueAxis=null;List axisIndices=(List)this.datasetToRangeAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);valueAxis=getRangeAxis(axisIndex.intValue());}else {valueAxis=getRangeAxis(0);}}"
397	"public void test(){XYItemRenderer r=getRenderer(index);if(r==null){return ;}if(index>=getDatasetCount()){return ;}}"
398	"public void test(){if(index>=getDatasetCount()){return ;}}"
399	"public void test(){if(r==null){return ;}if(index>=getDatasetCount()){return ;}Collection markers=getDomainMarkers(index,layer);ValueAxis axis=getDomainAxisForDataset(index);}"
400	"public void test(){Collection markers=getDomainMarkers(index,layer);ValueAxis axis=getDomainAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker marker=(Marker)iterator.next();r.drawDomainMarker(g2,this,axis,marker,dataArea);}}}"
401	"public void test(){if(r==null){return ;}if(index>=getDatasetCount()){return ;}Collection markers=getRangeMarkers(index,layer);ValueAxis axis=getRangeAxisForDataset(index);}"
402	"public void test(){Collection markers=getRangeMarkers(index,layer);ValueAxis axis=getRangeAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker marker=(Marker)iterator.next();r.drawRangeMarker(g2,this,axis,marker,dataArea);}}}"
403	"public void test(){Collection result=null;Integer key=new Integer(index);if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundDomainMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundDomainMarkers.get(key);}}"
404	"public void test(){Collection result=null;Integer key=new Integer(index);if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundRangeMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundRangeMarkers.get(key);}}"
405	"public void test(){int result=0;XYDataset dataset=getDataset();if(dataset!=null){result=dataset.getSeriesCount();}return result;}"
406	"public void test(){{XYDataset dataset=getDataset(datasetIndex);if(dataset!=null){XYItemRenderer renderer=getRenderer(datasetIndex);if(renderer==null){renderer=getRenderer(0);}if(renderer!=null){int seriesCount=dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){if(renderer.isSeriesVisible(i)&&renderer.isSeriesVisibleInLegend(i)){LegendItem item=renderer.getLegendItem(datasetIndex,i);if(item!=null){result.add(item);}}}}}}}"
407	"public void test(){for(int i=0;i<clone.datasets.size();++i){XYDataset d=getDataset(i);if(d!=null){d.addChangeListener(clone);}}}"
408	"public void test(){CategoryPlot plot=(CategoryPlot)this.subplots.get(i);if(orientation==PlotOrientation.VERTICAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
409	"public void test(){if(orientation==PlotOrientation.VERTICAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
410	"public void test(){if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}}"
411	"public void test(){if(orientation==PlotOrientation.VERTICAL){double w=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());x=x+w;}else if(orientation==PlotOrientation.HORIZONTAL){double h=usableSize*plot.getWeight()/totalWeight;this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);y=y+h;}AxisSpace subSpace=plot.calculateDomainAxisSpace(g2,this.subplotArea[i],null);}"
412	"public void test(){if(info!=null){subplotInfo=new PlotRenderingInfo(info.getOwner());info.addSubplotInfo(subplotInfo);}Point2D subAnchor=null;if(anchor!=null&&this.subplotArea[i].contains(anchor)){subAnchor=anchor;}plot.draw(g2,this.subplotArea[i],subAnchor,parentState,subplotInfo);}"
413	"public void test(){if(DatasetUtilities.isEmptyOrNull(this.dataset)){drawNoDataMessage(g2,area);return ;}}"
414	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){pieCount=this.dataset.getRowCount();}else {pieCount=this.dataset.getColumnCount();}}"
415	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){title=this.dataset.getRowKey(pieIndex).toString();}else {title=this.dataset.getColumnKey(pieIndex).toString();}}"
416	"public void test(){PieDataset piedataset=null;PieDataset dd=new CategoryToPieDataset(this.dataset,this.dataExtractOrder,pieIndex);if(this.limit>0.0){piedataset=DatasetUtilities.createConsolidatedPieDataset(dd,this.aggregatedItemsKey,this.limit);}else {piedataset=dd;}}"
417	"public void test(){for(int c=0;c<this.dataset.getColumnCount();c++){Comparable key=this.dataset.getColumnKey(c);Paint p=piePlot.getSectionPaint(key,false);if(p==null){p=(Paint)this.sectionPaints.get(key);if(p==null){p=getDrawingSupplier().getNextPaint();}}this.sectionPaints.put(key,p);}}"
418	"public void test(){for(int r=0;r<this.dataset.getRowCount();r++){Comparable key=this.dataset.getRowKey(r);Paint p=piePlot.getSectionPaint(key,false);if(p==null){p=(Paint)this.sectionPaints.get(key);if(p==null){p=getDrawingSupplier().getNextPaint();}}this.sectionPaints.put(key,p);}}"
419	"public void test(){LegendItemCollection result=new LegendItemCollection();if(this.dataset==null){return result;}List keys=null;prefetchSectionPaints();}"
420	"public void test(){if(this.dataset==null){return result;}}"
421	"public void test(){if(this.dataExtractOrder==TableOrder.BY_ROW){keys=this.dataset.getColumnKeys();}else if(this.dataExtractOrder==TableOrder.BY_COLUMN){keys=this.dataset.getRowKeys();}}"
422	"public void test(){if(this.dataExtractOrder==TableOrder.BY_COLUMN){keys=this.dataset.getRowKeys();}}"
423	"public void test(){if(this.limit>0.0){LegendItem a=new LegendItem(this.aggregatedItemsKey.toString(),this.aggregatedItemsKey.toString(),null,null,getLegendItemShape(),this.aggregatedItemsPaint,Plot.DEFAULT_OUTLINE_STROKE,this.aggregatedItemsPaint);result.add(a);}}"
424	"public void test(){if((needle!=null)&&(index<this.seriesNeedle.length)){this.seriesNeedle[index]=needle;}}"
425	"public void test(){Object result=null;if(this.equals(PlotOrientation.HORIZONTAL)){result=PlotOrientation.HORIZONTAL;}else if(this.equals(PlotOrientation.VERTICAL)){result=PlotOrientation.VERTICAL;}return result;}"
426	"public void test(){if(this.equals(PlotOrientation.HORIZONTAL)){result=PlotOrientation.HORIZONTAL;}else if(this.equals(PlotOrientation.VERTICAL)){result=PlotOrientation.VERTICAL;}}"
427	"public void test(){if(this.equals(PlotOrientation.VERTICAL)){result=PlotOrientation.VERTICAL;}}"
428	"public void test(){Object result=null;if(this.equals(PieLabelLinkStyle.STANDARD)){result=PieLabelLinkStyle.STANDARD;}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){result=PieLabelLinkStyle.QUAD_CURVE;}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){result=PieLabelLinkStyle.CUBIC_CURVE;}return result;}"
429	"public void test(){if(this.equals(PieLabelLinkStyle.STANDARD)){result=PieLabelLinkStyle.STANDARD;}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){result=PieLabelLinkStyle.QUAD_CURVE;}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){result=PieLabelLinkStyle.CUBIC_CURVE;}}"
430	"public void test(){if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){result=PieLabelLinkStyle.QUAD_CURVE;}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){result=PieLabelLinkStyle.CUBIC_CURVE;}}"
431	"public void test(){if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){result=PieLabelLinkStyle.CUBIC_CURVE;}}"
432	"public void test(){LegendItemCollection result=getFixedLegendItems();if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){XYPlot plot=(XYPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}}"
433	"public void test(){if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){XYPlot plot=(XYPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}}"
434	"public void test(){{LegendItemCollection result=getFixedLegendItems();if(result==null){result=new LegendItemCollection();if(this.subplots!=null){Iterator iterator=this.subplots.iterator();while(iterator.hasNext()){XYPlot plot=(XYPlot)iterator.next();LegendItemCollection more=plot.getLegendItems();result.addAll(more);}}}return result;}}"
435	"public void test(){if(this.dataset!=null){state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));}}"
436	"public void test(){double v=0.0;Number n=getDataset().getValue(key);if(n==null){include=!getIgnoreNullValues();}else {v=n.doubleValue();include=getIgnoreZeroValues()?v>0.0:v>=0.0;}}"
437	"public void test(){if(this.labelOutlinePaint!=null&&this.labelOutlineStroke!=null){g2.setPaint(this.labelOutlinePaint);g2.setStroke(this.labelOutlineStroke);g2.draw(bg);}g2.setPaint(this.labelPaint);g2.setFont(this.labelFont);TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(),key),g2,x,y,TextAnchor.CENTER);}"
438	"public void test(){LegendItemCollection result=new LegendItemCollection();if(this.dataset==null){return result;}List keys=this.dataset.getKeys();int section=0;}"
439	"public void test(){{LegendItemCollection result=new LegendItemCollection();Iterator iterator=this.intervals.iterator();while(iterator.hasNext()){MeterInterval mi=(MeterInterval)iterator.next();Paint color=mi.getBackgroundPaint();if(color==null){color=mi.getOutlinePaint();}LegendItem item=new LegendItem(mi.getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),color);item.setDataset(getDataset());result.add(item);}return result;}}"
440	"public void test(){while(iterator.hasNext()){MeterInterval mi=(MeterInterval)iterator.next();Paint color=mi.getBackgroundPaint();if(color==null){color=mi.getOutlinePaint();}LegendItem item=new LegendItem(mi.getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),color);item.setDataset(getDataset());result.add(item);}}"
441	"public void test(){state.setPieHRadius((pieArea.getHeight()-depth)/2.0);PieDataset dataset=getDataset();if(DatasetUtilities.isEmptyOrNull(getDataset())){drawNoDataMessage(g2,plotArea);g2.setClip(savedClip);drawOutline(g2,plotArea);return ;}}"
442	"public void test(){if(DatasetUtilities.isEmptyOrNull(getDataset())){drawNoDataMessage(g2,plotArea);g2.setClip(savedClip);drawOutline(g2,plotArea);return ;}}"
443	"public void test(){this.renderers=new ObjectList();this.datasets=new ObjectList();this.datasets.set(0,dataset);if(dataset!=null){dataset.addChangeListener(this);}this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);}"
444	"public void test(){if(index<this.domainAxes.size()){result=(CategoryAxis)this.domainAxes.get(index);}}"
445	"public void test(){if(parent instanceof CategoryPlot){CategoryPlot cp=(CategoryPlot)parent;result=cp.getDomainAxis(index);}}"
446	"public void test(){CategoryAxis existing=(CategoryAxis)this.domainAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
447	"public void test(){RectangleEdge result=null;AxisLocation location=getDomainAxisLocation(index);if(location!=null){result=Plot.resolveDomainAxisLocation(location,this.orientation);}else {result=RectangleEdge.opposite(getDomainAxisEdge(0));}return result;}"
448	"public void test(){if(parent instanceof CategoryPlot){CategoryPlot cp=(CategoryPlot)parent;result=cp.getRangeAxis(index);}}"
449	"public void test(){ValueAxis existing=(ValueAxis)this.rangeAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}}"
450	"public void test(){AxisLocation location=getRangeAxisLocation(index);RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getRangeAxisEdge(0));}return result;}"
451	"public void test(){if(this.datasets.size()>index){result=(CategoryDataset)this.datasets.get(index);}}"
452	"public void test(){CategoryDataset existing=(CategoryDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset,new DatasetChangeInfo());datasetChanged(event);}"
453	"public void test(){if(dataset==this.datasets.get(i)){result=i;break;}}"
454	"public void test(){if(index<0){throw new IllegalArgumentException(""Negative \'index\'."");}}"
455	"public void test(){CategoryAxis axis=null;List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getDomainAxis(axisIndex.intValue());}else {axis=getDomainAxis(0);}}"
456	"public void test(){ValueAxis axis=null;List axisIndices=(List)this.datasetToRangeAxesMap.get(new Integer(index));if(axisIndices!=null){Integer axisIndex=(Integer)axisIndices.get(0);axis=getRangeAxis(axisIndex.intValue());}else {axis=getRangeAxis(0);}}"
457	"public void test(){if(this.renderers.size()>index){result=(CategoryItemRenderer)this.renderers.get(index);}}"
458	"public void test(){CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);if(renderer!=null){renderer.setPlot(this);renderer.addChangeListener(this);}}"
459	"public void test(){if(this.datasets.get(i)==dataset){result=(CategoryItemRenderer)this.renderers.get(i);break;}}"
460	"public void test(){{if(this.fixedLegendItems!=null){return this.fixedLegendItems;}LegendItemCollection result=new LegendItemCollection();int count=this.datasets.size();for(int datasetIndex=0;datasetIndex<count;datasetIndex++){CategoryDataset dataset=getDataset(datasetIndex);if(dataset!=null){CategoryItemRenderer renderer=getRenderer(datasetIndex);if(renderer!=null){result.addAll(renderer.getLegendItems());}}}return result;}}"
461	"public void test(){for(int datasetIndex=0;datasetIndex<count;datasetIndex++){CategoryDataset dataset=getDataset(datasetIndex);if(dataset!=null){CategoryItemRenderer renderer=getRenderer(datasetIndex);if(renderer!=null){result.addAll(renderer.getLegendItems());}}}}"
462	"public void test(){if(dataset!=null){CategoryItemRenderer renderer=getRenderer(datasetIndex);if(renderer!=null){result.addAll(renderer.getLegendItems());}}}"
463	"public void test(){if(renderer!=null){result.addAll(renderer.getLegendItems());}}"
464	"public void test(){this.crosshairDatasetIndex=index;if(notify){fireChangeEvent();}}"
465	"public void test(){for(int index=0;index<this.domainAxes.size();index++){CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);if(xAxis!=null){axisCollection.add(xAxis,getDomainAxisEdge(index));}}}"
466	"public void test(){if(xAxis!=null){axisCollection.add(xAxis,getDomainAxisEdge(index));}}"
467	"public void test(){CategoryAnchor anchor=getDomainGridlinePosition();RectangleEdge domainAxisEdge=getDomainAxisEdge();CategoryDataset dataset=getDataset();if(dataset==null){return ;}CategoryAxis axis=getDomainAxis();}"
468	"public void test(){if(dataset==null){return ;}}"
469	"public void test(){if(axis!=null){int columnCount=dataset.getColumnCount();for(int c=0;c<columnCount;c++){double xx=axis.getCategoryJava2DCoordinate(anchor,c,columnCount,dataArea,domainAxisEdge);CategoryItemRenderer renderer1=getRenderer();if(renderer1!=null){renderer1.drawDomainLine(g2,this,dataArea,xx,getDomainGridlinePaint(),getDomainGridlineStroke());}}}}"
470	"public void test(){CategoryItemRenderer r=getRenderer(index);if(r==null){return ;}Collection markers=getDomainMarkers(index,layer);CategoryAxis axis=getDomainAxisForDataset(index);}"
471	"public void test(){Collection markers=getDomainMarkers(index,layer);CategoryAxis axis=getDomainAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){CategoryMarker marker=(CategoryMarker)iterator.next();r.drawDomainMarker(g2,this,axis,marker,dataArea);}}}"
472	"public void test(){CategoryItemRenderer r=getRenderer(index);if(r==null){return ;}Collection markers=getRangeMarkers(index,layer);ValueAxis axis=getRangeAxisForDataset(index);}"
473	"public void test(){{CategoryDataset dataset=getDataset(datasetIndex);CategoryAxis axis=getDomainAxisForDataset(datasetIndex);CategoryItemRenderer renderer=getRenderer(datasetIndex);Line2D line=null;if(orientation==PlotOrientation.VERTICAL){double xx=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.BOTTOM);line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());}else {double yy=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.LEFT);line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);}g2.setStroke(stroke);g2.setPaint(paint);g2.draw(line);}}"
474	"public void test(){if(orientation==PlotOrientation.VERTICAL){double xx=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.BOTTOM);line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());}else {double yy=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.LEFT);line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);}}"
475	"public void test(){{List mappedAxes=(List)this.datasetToDomainAxesMap.get(new Integer(i));CategoryDataset dataset=(CategoryDataset)this.datasets.get(i);if(mappedAxes==null){if(key.equals(ZERO)){if(dataset!=null){result.add(dataset);}}}else {if(mappedAxes.contains(key)){if(dataset!=null){result.add(dataset);}}}}}"
476	"public void test(){if(dataset!=null){result.add(dataset);}}"
477	"public void test(){{Integer key=new Integer(index);List result=new ArrayList();for(int i=0;i<this.datasets.size();i++){List mappedAxes=(List)this.datasetToRangeAxesMap.get(new Integer(i));if(mappedAxes==null){if(key.equals(ZERO)){result.add(this.datasets.get(i));}}else {if(mappedAxes.contains(key)){result.add(this.datasets.get(i));}}}return result;}}"
478	"public void test(){if(getDataset()!=null){result=Collections.unmodifiableList(getDataset().getColumnKeys());}}"
479	"public void test(){while(iterator.hasNext()){CategoryDataset dataset=(CategoryDataset)iterator.next();for(int i=0;i<dataset.getColumnCount();i++){Comparable category=dataset.getColumnKey(i);if(!result.contains(category)){result.add(category);}}}}"
480	"public void test(){for(int i=0;i<dataset.getColumnCount();i++){Comparable category=dataset.getColumnKey(i);if(!result.contains(category)){result.add(category);}}}"
481	"public void test(){for(int i=0;i<clone.datasets.size();i++){CategoryDataset dataset=clone.getDataset(i);if(dataset!=null){dataset.addChangeListener(clone);}}}"
482	"public void test(){if(dataset!=null){dataset.addChangeListener(clone);}}"
483	"public void test(){CategoryDataset dataset=(CategoryDataset)this.datasets.get(d);if(dataset==null){continue;}CategoryDatasetSelectionState state=findSelectionStateForDataset(dataset,source);if(state==null){continue;}}"
484	"public void test(){if(dataset==null){continue;}}"
485	"public void test(){if(dataset==null){continue;}CategoryDatasetSelectionState state=findSelectionStateForDataset(dataset,source);if(state==null){continue;}}"
486	"public void test(){if(state==null){continue;}Graphics2D g2=source.createGraphics2D();CategoryItemRenderer renderer=getRendererForDataset(dataset);CategoryItemRendererState rs=renderer.initialise(g2,dataArea,this,dataset,null);int rowCount=dataset.getRowCount();}"
487	"public void test(){CategoryItemRenderer renderer=getRendererForDataset(dataset);CategoryItemRendererState rs=renderer.initialise(g2,dataArea,this,dataset,null);int rowCount=dataset.getRowCount();int columnCount=dataset.getColumnCount();for(int r=0;r<rowCount;r++){for(int c=0;c<columnCount;c++){if(renderer.hitTest(x,y,null,dataArea,this,getDomainAxisForDataset(d),getRangeAxisForDataset(d),dataset,r,c,false,rs)){state.setSelected(r,c,!state.isSelected(r,c));}}}}"
488	"public void test(){int rowCount=dataset.getRowCount();int columnCount=dataset.getColumnCount();for(int r=0;r<rowCount;r++){for(int c=0;c<columnCount;c++){if(renderer.hitTest(x,y,null,dataArea,this,getDomainAxisForDataset(d),getRangeAxisForDataset(d),dataset,r,c,false,rs)){state.setSelected(r,c,!state.isSelected(r,c));}}}}"
489	"public void test(){if(renderer.hitTest(x,y,null,dataArea,this,getDomainAxisForDataset(d),getRangeAxisForDataset(d),dataset,r,c,false,rs)){state.setSelected(r,c,!state.isSelected(r,c));}}"
490	"public void test(){for(int d=0;d<datasetCount;d++){CategoryDataset dataset=(CategoryDataset)this.datasets.get(d);if(dataset instanceof SelectableCategoryDataset){SelectableCategoryDataset scd=(SelectableCategoryDataset)dataset;if(scd.getSelectionState()!=null){CategoryDatasetSelectionState selState=scd.getSelectionState();selState.clearSelection();}}}}"
491	"public void test(){if(dataset instanceof SelectableCategoryDataset){SelectableCategoryDataset scd=(SelectableCategoryDataset)dataset;if(scd.getSelectionState()!=null){CategoryDatasetSelectionState selState=scd.getSelectionState();selState.clearSelection();}}}"
492	"public void test(){if(dataset instanceof SelectableCategoryDataset){SelectableCategoryDataset sd=(SelectableCategoryDataset)dataset;CategoryDatasetSelectionState s=sd.getSelectionState();return s;}}"
493	"public void test(){PieDataset dataset=getDataset();Number n=dataset.getValue(section);if(n==null){return ;}double value=n.doubleValue();}"
494	"public void test(){LegendItemCollection result=new LegendItemCollection();if(this.dataset!=null){if(this.renderer!=null){int seriesCount=this.dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){LegendItem item=this.renderer.getLegendItem(i);result.add(item);}}}return result;}"
495	"public void test(){for(int i=0,n=plot.getDatasetCount();i<n;i++){ final XYDataset dataset=plot.getDataset(i);if(!DatasetUtilities.isEmptyOrNull(dataset)){return false;}}}"
496	"public void test(){plot.setDomainGridlinePaint(this.domainGridlinePaint);plot.setRangeGridlinePaint(this.rangeGridlinePaint);plot.setRangeZeroBaselinePaint(this.baselinePaint);int domainAxisCount=plot.getDomainAxisCount();for(int i=0;i<domainAxisCount;i++){CategoryAxis axis=plot.getDomainAxis(i);if(axis!=null){applyToCategoryAxis(axis);}}}"
497	"public void test(){plot.setRangeZeroBaselinePaint(this.baselinePaint);int domainAxisCount=plot.getDomainAxisCount();for(int i=0;i<domainAxisCount;i++){CategoryAxis axis=plot.getDomainAxis(i);if(axis!=null){applyToCategoryAxis(axis);}}}"
498	"public void test(){for(int i=0;i<domainAxisCount;i++){CategoryAxis axis=plot.getDomainAxis(i);if(axis!=null){applyToCategoryAxis(axis);}}}"
499	"public void test(){for(int i=0;i<domainAxisCount;i++){CategoryAxis axis=plot.getDomainAxis(i);if(axis!=null){applyToCategoryAxis(axis);}}int rangeAxisCount=plot.getRangeAxisCount();for(int i=0;i<rangeAxisCount;i++){ValueAxis axis=(ValueAxis)plot.getRangeAxis(i);if(axis!=null){applyToValueAxis(axis);}}}"
500	"public void test(){for(int i=0;i<rangeAxisCount;i++){ValueAxis axis=(ValueAxis)plot.getRangeAxis(i);if(axis!=null){applyToValueAxis(axis);}}}"
501	"public void test(){for(int i=0;i<rangeAxisCount;i++){ValueAxis axis=(ValueAxis)plot.getRangeAxis(i);if(axis!=null){applyToValueAxis(axis);}}int rendererCount=plot.getRendererCount();for(int i=0;i<rendererCount;i++){CategoryItemRenderer r=plot.getRenderer(i);if(r!=null){applyToCategoryItemRenderer(r);}}}"
502	"public void test(){for(int i=0;i<rendererCount;i++){CategoryItemRenderer r=plot.getRenderer(i);if(r!=null){applyToCategoryItemRenderer(r);}}}"
503	"public void test(){if(plot instanceof CombinedDomainCategoryPlot){CombinedDomainCategoryPlot cp=(CombinedDomainCategoryPlot)plot;Iterator iterator=cp.getSubplots().iterator();while(iterator.hasNext()){CategoryPlot subplot=(CategoryPlot)iterator.next();if(subplot!=null){applyToPlot(subplot);}}}}"
504	"public void test(){if(plot instanceof CombinedRangeCategoryPlot){CombinedRangeCategoryPlot cp=(CombinedRangeCategoryPlot)plot;Iterator iterator=cp.getSubplots().iterator();while(iterator.hasNext()){CategoryPlot subplot=(CategoryPlot)iterator.next();if(subplot!=null){applyToPlot(subplot);}}}}"
505	"public void test(){if(seen==index){return (LegendTitle)subtitle;}else {seen++;}}"
506	"public void test(){if((index<0)||(index>=getSubtitleCount())){throw new IllegalArgumentException(""Index out of range."");}}"
507	"public void test(){if((index<0)||(index>=getSubtitleCount())){throw new IllegalArgumentException(""Index out of range."");}return (Title)this.subtitles.get(index);}"
508	"public void test(){if(index<0||index>getSubtitleCount()){throw new IllegalArgumentException(""The \'index\' argument is out of range."");}}"
509	"public void test(){if(index<0||index>getSubtitleCount()){throw new IllegalArgumentException(""The \'index\' argument is out of range."");}if(subtitle==null){throw new IllegalArgumentException(""Null \'subtitle\' argument."");}this.subtitles.add(index,subtitle);subtitle.addChangeListener(this);fireChartChanged();}"
510	"public void test(){CategoryPlot plot=(CategoryPlot)getPlot();int categoryCount=0;CategoryDataset dataset=plot.getDataset();if(dataset!=null){categoryCount=dataset.getColumnCount();}double maxdim=getMaxDim(g2,edge);}"
511	"public void test(){if(dataset!=null){categoryCount=dataset.getColumnCount();}}"
512	"public void test(){direction=direction%360;if(direction<0.0){direction=direction+360.0;}int index=((int)Math.floor(direction/11.25)+1)/2;return DIRECTIONS[index];}"
513	"public void test(){int index=Collections.binarySearch(this.tickUnits,unit);if(index>=0){index=index+1;}else {index=-index;}return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}"
514	"public void test(){if(index>=0){index=index+1;}else {index=-index;}}"
515	"public void test(){int index=Collections.binarySearch(this.tickUnits,unit);if(index>=0){return (TickUnit)this.tickUnits.get(index);}else {index=-(index+1);return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}}"
516	"public void test(){if(index>=0){return (TickUnit)this.tickUnits.get(index);}else {index=-(index+1);return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}}"
517	"public void test(){if(plot.getRenderer() instanceof Effect3D){Effect3D e3D=(Effect3D)plot.getRenderer();double adjustedX=dataArea.getMinX();double adjustedY=dataArea.getMinY();double adjustedW=dataArea.getWidth()-e3D.getXOffset();double adjustedH=dataArea.getHeight()-e3D.getYOffset();if(edge==RectangleEdge.LEFT||edge==RectangleEdge.BOTTOM){adjustedY+=e3D.getYOffset();}else if(edge==RectangleEdge.RIGHT||edge==RectangleEdge.TOP){adjustedX+=e3D.getXOffset();}adjustedDataArea.setRect(adjustedX,adjustedY,adjustedW,adjustedH);}else {adjustedDataArea.setRect(dataArea);}}"
518	"public void test(){Object result=null;if(this.equals(TickType.MAJOR)){result=TickType.MAJOR;}else if(this.equals(TickType.MINOR)){result=TickType.MINOR;}return result;}"
519	"public void test(){if(this.equals(TickType.MAJOR)){result=TickType.MAJOR;}else if(this.equals(TickType.MINOR)){result=TickType.MINOR;}}"
520	"public void test(){if(this.equals(TickType.MINOR)){result=TickType.MINOR;}}"
521	"public void test(){List ticks=new java.util.ArrayList();if(dataArea.getHeight()<=0.0||dataArea.getWidth()<0.0){return ticks;}CategoryPlot plot=(CategoryPlot)getPlot();List categories=plot.getCategoriesForAxis(this);double max=0.0;}"
522	"public void test(){if(dataArea.getHeight()<=0.0||dataArea.getWidth()<0.0){return ticks;}CategoryPlot plot=(CategoryPlot)getPlot();List categories=plot.getCategoriesForAxis(this);double max=0.0;}"
523	"public void test(){Plot p=getPlot();if(p==null){return ;}CategoryPlot plot=(CategoryPlot)p;double il=getTickMarkInsideLength();double ol=getTickMarkOutsideLength();}"
524	"public void test(){boolean isVertical=this.plotOrientation.equals(PlotOrientation.VERTICAL);int index=isVertical?ORIENTATION_VERTICAL:ORIENTATION_HORIZONTAL;interior.add(new JLabel(localizationResources.getString(""Orientation"")));this.orientationCombo=new JComboBox(orientationNames);this.orientationCombo.setSelectedIndex(index);}"
525	"public void test(){int index=this.orientationCombo.getSelectedIndex();if(index==ORIENTATION_VERTICAL){this.plotOrientation=PlotOrientation.VERTICAL;}else {this.plotOrientation=PlotOrientation.HORIZONTAL;}}"
526	"public void test(){if(index==ORIENTATION_VERTICAL){this.plotOrientation=PlotOrientation.VERTICAL;}else {this.plotOrientation=PlotOrientation.HORIZONTAL;}}"
527	"public void test(){Object[] result=new Object[5];result[0]=dataset.getRowKey(row).toString();result[1]=dataset.getColumnKey(column).toString();Number value=dataset.getValue(row,column);if(getNumberFormat()!=null){result[2]=getNumberFormat().format(value);}else if(getDateFormat()!=null){result[2]=getDateFormat().format(value);}}"
528	"public void test(){result[1]=dataset.getColumnKey(column).toString();Number value=dataset.getValue(row,column);if(getNumberFormat()!=null){result[2]=getNumberFormat().format(value);}else if(getDateFormat()!=null){result[2]=getDateFormat().format(value);}}"
529	"public void test(){if(dataset instanceof IntervalCategoryDataset){IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;Number start=icd.getStartValue(row,column);Number end=icd.getEndValue(row,column);if(getNumberFormat()!=null){result[3]=getNumberFormat().format(start);result[4]=getNumberFormat().format(end);}else if(getDateFormat()!=null){result[3]=getDateFormat().format(start);result[4]=getDateFormat().format(end);}}}"
530	"public void test(){IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;Number start=icd.getStartValue(row,column);Number end=icd.getEndValue(row,column);if(getNumberFormat()!=null){result[3]=getNumberFormat().format(start);result[4]=getNumberFormat().format(end);}else if(getDateFormat()!=null){result[3]=getDateFormat().format(start);result[4]=getDateFormat().format(end);}}"
531	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}String result=null;Object[] items=createItemArray(dataset,row,column);result=MessageFormat.format(this.labelFormat,items);return result;}"
532	"public void test(){result[1]=dataset.getColumnKey(column).toString();Number value=dataset.getValue(row,column);if(value!=null){if(this.numberFormat!=null){result[2]=this.numberFormat.format(value);}else if(this.dateFormat!=null){result[2]=this.dateFormat.format(value);}}else {result[2]=this.nullValueString;}}"
533	"public void test(){if(value!=null){double total=DataUtilities.calculateColumnTotal(dataset,column);double percent=value.doubleValue()/total;result[3]=this.percentFormat.format(percent);}}"
534	"public void test(){if(dataset instanceof BoxAndWhiskerCategoryDataset){BoxAndWhiskerCategoryDataset d=(BoxAndWhiskerCategoryDataset)dataset;result[2]=formatter.format(d.getMeanValue(series,item));result[3]=formatter.format(d.getMedianValue(series,item));result[4]=formatter.format(d.getMinRegularValue(series,item));result[5]=formatter.format(d.getMaxRegularValue(series,item));result[6]=formatter.format(d.getQ1Value(series,item));result[7]=formatter.format(d.getQ3Value(series,item));}}"
535	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}String label=MessageFormat.format(this.formatPattern,createItemArray(dataset,series));return label;}"
536	"public void test(){Object[] result=new Object[1];result[0]=dataset.getRowKey(series).toString();return result;}"
537	"public void test(){TextLine last=null; final int index=this.lines.size()-1;if(index>=0){last=(TextLine)this.lines.get(index);}return last;}"
538	"public void test(){if(index>=0){last=(TextLine)this.lines.get(index);}}"
539	"public void test(){String line=input.substring(start,index);if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}"
540	"public void test(){if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}"
541	"public void test(){if(index==start){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}else {result.addLine(input,font,paint);moreInputToProcess=false;}}"
542	"public void test(){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}"
543	"public void test(){if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getValue(index);}}}"
544	"public void test(){if(index>=0){result=rowData.getValue(index);}}"
545	"public void test(){if(rowKey==null){throw new IllegalArgumentException(""Null \'rowKey\' argument."");}int index=getRowIndex(rowKey);if(index>=0){removeRow(index);}else {throw new UnknownKeyException(""Unknown key: ""+rowKey);}}"
546	"public void test(){if(index>=0){removeRow(index);}else {throw new UnknownKeyException(""Unknown key: ""+rowKey);}}"
547	"public void test(){while(iterator.hasNext()){DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();int index=rowData.getIndex(columnKey);if(index>=0){rowData.removeValue(columnKey);}}}"
548	"public void test(){if(index>=0){rowData.removeValue(columnKey);}}"
549	"public void test(){Object result=null;KeyedObjects rowData=(KeyedObjects)this.rows.get(row);if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}}"
550	"public void test(){if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}"
551	"public void test(){if(index>=0){result=rowData.getObject(columnKey);}}"
552	"public void test(){{Object result=null;KeyedObjects rowData=(KeyedObjects)this.rows.get(row);if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}return result;}}"
553	"public void test(){KeyedObjects rowData=(KeyedObjects)this.rows.get(row);int index=rowData.getIndex(columnKey);if(index>=0){return rowData.getObject(index);}else {return null;}}"
554	"public void test(){if(index>=0){return rowData.getObject(index);}else {return null;}}"
555	"public void test(){int index=getRowIndex(rowKey);if(index<0){throw new UnknownKeyException(""Row key (""+rowKey);}removeRow(index);}"
556	"public void test(){if(index<0){throw new UnknownKeyException(""Row key (""+rowKey);}}"
557	"public void test(){int index=getColumnIndex(columnKey);if(index<0){throw new UnknownKeyException(""Column key (""+columnKey);}Iterator iterator=this.rows.iterator();while(iterator.hasNext()){KeyedObjects rowData=(KeyedObjects)iterator.next();int i=rowData.getIndex(columnKey);if(i>=0){rowData.removeValue(i);}}}"
558	"public void test(){if(index<0){throw new UnknownKeyException(""Column key (""+columnKey);}}"
559	"public void test(){Object result=null;KeyedObject kobj=(KeyedObject)this.data.get(item);if(kobj!=null){result=kobj.getObject();}return result;}"
560	"public void test(){if(kobj!=null){result=kobj.getObject();}}"
561	"public void test(){Comparable result=null;KeyedObject item=(KeyedObject)this.data.get(index);if(item!=null){result=item.getKey();}return result;}"
562	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key);}return getObject(index);}"
563	"public void test(){if(index<0){throw new UnknownKeyException(""The key (""+key);}}"
564	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key.toString());}removeValue(index);}"
565	"public void test(){if(index<0){throw new UnknownKeyException(""The key (""+key.toString());}}"
566	"public void test(){if(extract==null){throw new IllegalArgumentException(""Null \'extract\' argument."");}this.source=source;if(this.source!=null){this.source.addChangeListener(this);}this.extract=extract;this.index=index;}"
567	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getValue(this.index,item);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(item,this.index);}}"
568	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(item,this.index);}}"
569	"public void test(){if(index<0||index>=getItemCount()){throw new IndexOutOfBoundsException(""Invalid \'index\': ""+index);}}"
570	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getColumnKey(index);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getRowKey(index);}}"
571	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getRowKey(index);}}"
572	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getValue(this.index,keyIndex);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(keyIndex,this.index);}}"
573	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(keyIndex,this.index);}}"
574	"public void test(){int index=this.underlying.getColumnIndex(key);if(index>=this.firstCategoryIndex&&index<=lastCategoryIndex()){return index-this.firstCategoryIndex;}return -1;}"
575	"public void test(){if(index>=this.firstCategoryIndex&&index<=lastCategoryIndex()){return index-this.firstCategoryIndex;}}"
576	"public void test(){Object result=null;if(this.equals(PieDatasetChangeType.ADD)){result=PieDatasetChangeType.ADD;}return result;}"
577	"public void test(){if(this.equals(PieDatasetChangeType.ADD)){result=PieDatasetChangeType.ADD;}}"
578	"public void test(){int index=this.data.getIndex(key);PieDatasetChangeType ct=PieDatasetChangeType.ADD;if(index>=0){ct=PieDatasetChangeType.UPDATE;}this.data.setObject(key,new SelectableValue(value));PieDatasetChangeInfo info=new PieDatasetChangeInfo(ct,index,index);fireDatasetChanged(info);}"
579	"public void test(){if(index>=0){ct=PieDatasetChangeType.UPDATE;}}"
580	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getX();}"
581	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getXLowValue();}"
582	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getXHighValue();}"
583	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getYValue();}"
584	"public void test(){XYSeries s=(XYSeries)this.data.get(series);return s.getY(index);}"
585	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getX();}"
586	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getXLowValue();}"
587	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getXHighValue();}"
588	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYValue();}"
589	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYLowValue();}"
590	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYHighValue();}"
591	"public void test(){VectorDataItem result=(VectorDataItem)this.data.remove(index);fireSeriesChanged();return result;}"
592	"public void test(){VectorDataItem item=(VectorDataItem)this.getDataItem(index);return item.getXValue();}"
593	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getYValue();}"
594	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getVectorX();}"
595	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getVectorY();}"
596	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getX();}"
597	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYValue();}"
598	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYLowValue();}"
599	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYHighValue();}"
600	"public void test(){if(index<0){this.data.add(-index-1,item);}else {if(this.allowDuplicateXValues){int size=this.data.size();while(index<size&&item.compareTo(this.data.get(index))==0){index++;}if(index<this.data.size()){this.data.add(index,item);}else {this.data.add(item);}}else {throw new SeriesException(""X-value already exists."");}}}"
601	"public void test(){if(index<this.data.size()){this.data.add(index,item);}else {this.data.add(item);}}"
602	"public void test(){if(!this.allowDuplicateXValues){int index=indexOf(item.getX());if(index>=0){throw new SeriesException(""X-value already exists."");}}}"
603	"public void test(){if(index>=0){throw new SeriesException(""X-value already exists."");}}"
604	"public void test(){XYDataItem removed=(XYDataItem)this.data.remove(index);updateBoundsForRemovedItem(removed);fireSeriesChanged();return removed;}"
605	"public void test(){XYDataItem item=(XYDataItem)this.data.get(index);return (XYDataItem)item.clone();}"
606	"public void test(){XYDataItem item=getRawDataItem(index);boolean iterate=false;double oldY=item.getYValue();if(!Double.isNaN(oldY)){iterate=oldY<=this.minY||oldY>=this.maxY;}}"
607	"public void test(){int index=indexOf(x);if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {updateByIndex(index,y);}}"
608	"public void test(){if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {updateByIndex(index,y);}}"
609	"public void test(){if(this.allowDuplicateXValues){add(item);return null;}XYDataItem overwritten=null;int index=indexOf(item.getX());}"
610	"public void test(){XYDataItem existing=(XYDataItem)this.data.get(index);overwritten=(XYDataItem)existing.clone();boolean iterate=false;double oldY=existing.getYValue();if(!Double.isNaN(oldY)){iterate=oldY<=this.minY||oldY>=this.maxY;}}"
611	"public void test(){if(this.autoSort){this.data.add(-index-1,item);}else {this.data.add(item);}}"
612	"public void test(){Object result=null;if(this.equals(SeriesChangeType.ADD)){result=SeriesChangeType.ADD;}return result;}"
613	"public void test(){if(this.equals(SeriesChangeType.ADD)){result=SeriesChangeType.ADD;}}"
614	"public void test(){int row=dataset.getRowIndex(rowKey);return createPieDatasetForRow(dataset,row);}"
615	"public void test(){DefaultPieDataset result=new DefaultPieDataset();int columnCount=dataset.getColumnCount();for(int current=0;current<columnCount;current++){Comparable columnKey=dataset.getColumnKey(current);result.setValue(columnKey,dataset.getValue(row,current));}return result;}"
616	"public void test(){int column=dataset.getColumnIndex(columnKey);return createPieDatasetForColumn(dataset,column);}"
617	"public void test(){DefaultPieDataset result=new DefaultPieDataset();int rowCount=dataset.getRowCount();for(int i=0;i<rowCount;i++){Comparable rowKey=dataset.getRowKey(i);result.setValue(rowKey,dataset.getValue(i,column));}return result;}"
618	"public void test(){if(dataset==null){return true;}}"
619	"public void test(){if(dataset==null){return true;}int rowCount=dataset.getRowCount();int columnCount=dataset.getColumnCount();if(rowCount==0||columnCount==0){return true;}}"
620	"public void test(){if(dataset.getValue(r,c)!=null){return false;}}"
621	"public void test(){if(dataset instanceof RangeInfo){RangeInfo info=(RangeInfo)dataset;result=info.getRangeBounds(includeInterval);}else {result=iterateRangeBounds(dataset,includeInterval);}}"
622	"public void test(){if(dataset instanceof CategoryRangeInfo){CategoryRangeInfo info=(CategoryRangeInfo)dataset;result=info.getRangeBounds(visibleSeriesKeys,includeInterval);}else {result=iterateToFindRangeBounds(dataset,visibleSeriesKeys,includeInterval);}}"
623	"public void test(){for(int column=0;column<columnCount;column++){Number value=dataset.getValue(row,column);if(value!=null){double v=value.doubleValue();if(!Double.isNaN(v)){minimum=Math.min(minimum,v);maximum=Math.max(maximum,v);}}}}"
624	"public void test(){if(visibleSeriesKeys==null){throw new IllegalArgumentException(""Null \'visibleSeriesKeys\' argument."");}double minimum=Double.POSITIVE_INFINITY;double maximum=Double.NEGATIVE_INFINITY;int columnCount=dataset.getColumnCount();}"
625	"public void test(){{IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;Number lvalue,uvalue;Iterator iterator=visibleSeriesKeys.iterator();while(iterator.hasNext()){Comparable seriesKey=(Comparable)iterator.next();int series=dataset.getRowIndex(seriesKey);for(int column=0;column<columnCount;column++){lvalue=icd.getStartValue(series,column);uvalue=icd.getEndValue(series,column);if(lvalue!=null&&!Double.isNaN(lvalue.doubleValue())){minimum=Math.min(minimum,lvalue.doubleValue());}if(uvalue!=null&&!Double.isNaN(uvalue.doubleValue())){maximum=Math.max(maximum,uvalue.doubleValue());}}}}}"
626	"public void test(){Comparable seriesKey=(Comparable)iterator.next();int series=dataset.getRowIndex(seriesKey);for(int column=0;column<columnCount;column++){lvalue=icd.getStartValue(series,column);uvalue=icd.getEndValue(series,column);if(lvalue!=null&&!Double.isNaN(lvalue.doubleValue())){minimum=Math.min(minimum,lvalue.doubleValue());}if(uvalue!=null&&!Double.isNaN(uvalue.doubleValue())){maximum=Math.max(maximum,uvalue.doubleValue());}}}"
627	"public void test(){{Comparable seriesKey=(Comparable)iterator.next();int series=dataset.getRowIndex(seriesKey);for(int column=0;column<columnCount;column++){List values=mvcd.getValues(series,column);Iterator valueIterator=values.iterator();while(valueIterator.hasNext()){Object o=valueIterator.next();if(o instanceof Number){double v=((Number)o).doubleValue();if(!Double.isNaN(v)){minimum=Math.min(minimum,v);maximum=Math.max(maximum,v);}}}}}}"
628	"public void test(){Comparable seriesKey=(Comparable)iterator.next();int series=dataset.getRowIndex(seriesKey);for(int column=0;column<columnCount;column++){Number value=dataset.getValue(series,column);if(value!=null){double v=value.doubleValue();if(!Double.isNaN(v)){minimum=Math.min(minimum,v);maximum=Math.max(maximum,v);}}}}"
629	"public void test(){for(int column=0;column<columnCount;column++){Number value=dataset.getValue(series,column);if(value!=null){double v=value.doubleValue();if(!Double.isNaN(v)){minimum=Math.min(minimum,v);maximum=Math.max(maximum,v);}}}}"
630	"public void test(){{RangeInfo info=(RangeInfo)dataset;return new Double(info.getRangeLowerBound(true));}}"
631	"public void test(){if(dataset instanceof IntervalCategoryDataset){IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;value=icd.getStartValue(series,item);}else {value=dataset.getValue(series,item);}}"
632	"public void test(){{RangeInfo info=(RangeInfo)dataset;return new Double(info.getRangeUpperBound(true));}}"
633	"public void test(){if(dataset instanceof IntervalCategoryDataset){IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;value=icd.getEndValue(series,item);}else {value=dataset.getValue(series,item);}}"
634	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}Range result=null;double minimum=Double.POSITIVE_INFINITY;double maximum=Double.NEGATIVE_INFINITY;int categoryCount=dataset.getColumnCount();}"
635	"public void test(){{double positive=base;double negative=base;int seriesCount=dataset.getRowCount();for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){double value=number.doubleValue();if(value>0.0){positive=positive+value;}if(value<0.0){negative=negative+value;}}}minimum=Math.min(minimum,negative);maximum=Math.max(maximum,positive);}}"
636	"public void test(){for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){double value=number.doubleValue();if(value>0.0){positive=positive+value;}if(value<0.0){negative=negative+value;}}}}"
637	"public void test(){Number number=dataset.getValue(series,item);if(number!=null){hasValidData=true;double value=number.doubleValue();if(value>0.0){positive[groupIndex[series]]=positive[groupIndex[series]]+value;}if(value<0.0){negative[groupIndex[series]]=negative[groupIndex[series]]+value;}}}"
638	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}Number result=null;boolean hasValidData=false;double minimum=0.0;int categoryCount=dataset.getColumnCount();}"
639	"public void test(){double total=0.0;int seriesCount=dataset.getRowCount();for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){hasValidData=true;double value=number.doubleValue();if(value<0.0){total=total+value;}}}}"
640	"public void test(){for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){hasValidData=true;double value=number.doubleValue();if(value<0.0){total=total+value;}}}}"
641	"public void test(){if(dataset==null){throw new IllegalArgumentException(""Null \'dataset\' argument."");}Number result=null;boolean hasValidData=false;double maximum=0.0;int categoryCount=dataset.getColumnCount();}"
642	"public void test(){double total=0.0;int seriesCount=dataset.getRowCount();for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){hasValidData=true;double value=number.doubleValue();if(value>0.0){total=total+value;}}}}"
643	"public void test(){for(int series=0;series<seriesCount;series++){Number number=dataset.getValue(series,item);if(number!=null){hasValidData=true;double value=number.doubleValue();if(value>0.0){total=total+value;}}}}"
644	"public void test(){for(int row=0;row<dataset.getRowCount();row++){double runningTotal=0.0;for(int column=0;column<=dataset.getColumnCount()-1;column++){Number n=dataset.getValue(row,column);if(n!=null){allItemsNull=false;double value=n.doubleValue();if(!Double.isNaN(value)){runningTotal=runningTotal+value;minimum=Math.min(minimum,runningTotal);maximum=Math.max(maximum,runningTotal);}}}}}"
645	"public void test(){for(int column=0;column<=dataset.getColumnCount()-1;column++){Number n=dataset.getValue(row,column);if(n!=null){allItemsNull=false;double value=n.doubleValue();if(!Double.isNaN(value)){runningTotal=runningTotal+value;minimum=Math.min(minimum,runningTotal);maximum=Math.max(maximum,runningTotal);}}}}"
646	"public void test(){Number n=dataset.getValue(row,column);if(n!=null){allItemsNull=false;double value=n.doubleValue();if(!Double.isNaN(value)){runningTotal=runningTotal+value;minimum=Math.min(minimum,runningTotal);maximum=Math.max(maximum,runningTotal);}}}"
647	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""Key not found: ""+key);}return getValue(index);}"
648	"public void test(){if(index<0){throw new UnknownKeyException(""Key not found: ""+key);}}"
649	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key);}removeValue(index);}"
650	"public void test(){if(!this.allowDuplicateXValues){int index=indexOf(item.getComparable());if(index>=0){throw new SeriesException(""X-value already exists."");}}}"
651	"public void test(){int index=indexOf(x);if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}}"
652	"public void test(){if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}}"
653	"public void test(){ComparableObjectItem result=(ComparableObjectItem)this.data.remove(index);fireSeriesChanged();return result;}"
654	"public void test(){if(Modifier.isPublic(m.getModifiers())){try{result=m.invoke(object,(Object[])null);}catch (Exception e) {  e.printStackTrace();}}}"
655	"public void test(){if(key==null){throw new NullPointerException(""Null \'key\' argument."");}TaskSeries result=null;int index=getRowIndex(key);if(index>=0){result=getSeries(index);}return result;}"
656	"public void test(){if(index>=0){result=getSeries(index);}}"
657	"public void test(){TaskSeries series=(TaskSeries)this.data.get(index);return series.getKey();}"
658	"public void test(){while(iterator.hasNext()){Task task=(Task)iterator.next();String key=task.getDescription();int index=this.keys.indexOf(key);if(index<0){this.keys.add(key);}}}"
659	"public void test(){if(index<0){this.keys.add(key);}}"
660	"public void test(){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);return (TimeSeriesDataItem)item.clone();}"
661	"public void test(){int index=getIndex(period);if(index>=0){return getDataItem(index);}else {return null;}}"
662	"public void test(){if(index>=0){return getDataItem(index);}else {return null;}}"
663	"public void test(){int index=getIndex(period);if(index>=0){return (TimeSeriesDataItem)this.data.get(index);}else {return null;}}"
664	"public void test(){if(index>=0){return (TimeSeriesDataItem)this.data.get(index);}else {return null;}}"
665	"public void test(){for(int i=0;i<series.getItemCount();i++){RegularTimePeriod period=series.getTimePeriod(i);int index=getIndex(period);if(index<0){result.add(period);}}}"
666	"public void test(){if(index<0){result.add(period);}}"
667	"public void test(){int index=getIndex(period);if(index>=0){return getValue(index);}else {return null;}}"
668	"public void test(){if(index>=0){return getValue(index);}else {return null;}}"
669	"public void test(){{int index=Collections.binarySearch(this.data,item);if(index<0){this.data.add(-index-1,item);added=true;}else {StringBuffer b=new StringBuffer();b.append(""You are attempting to add an observation for "");b.append(""the time period "");b.append(item.getPeriod().toString());b.append("" but the series already contains an observation"");b.append("" for that time period. Duplicates are not "");b.append(""permitted.  Try using the addOrUpdate() method."");throw new SeriesException(b.toString());}}}"
670	"public void test(){if(index<0){this.data.add(-index-1,item);added=true;}else {StringBuffer b=new StringBuffer();b.append(""You are attempting to add an observation for "");b.append(""the time period "");b.append(item.getPeriod().toString());b.append("" but the series already contains an observation"");b.append("" for that time period. Duplicates are not "");b.append(""permitted.  Try using the addOrUpdate() method."");throw new SeriesException(b.toString());}}"
671	"public void test(){TimeSeriesDataItem temp=new TimeSeriesDataItem(period,value);int index=Collections.binarySearch(this.data,temp);if(index<0){throw new SeriesException(""There is no existing value for the ""+""specified \'period\'."");}update(index,value);}"
672	"public void test(){if(index<0){throw new SeriesException(""There is no existing value for the ""+""specified \'period\'."");}}"
673	"public void test(){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);boolean iterate=false;Number oldYN=item.getValue();if(oldYN!=null){double oldY=oldYN.doubleValue();if(!Double.isNaN(oldY)){iterate=oldY<=this.minY||oldY>=this.maxY;}}}"
674	"public void test(){if(this.timePeriodClass==null){this.timePeriodClass=periodClass;}else if(!this.timePeriodClass.equals(periodClass)){String msg=""You are trying to add data where the time ""+""period class is ""+periodClass.getName();throw new SeriesException(msg);}TimeSeriesDataItem overwritten=null;int index=Collections.binarySearch(this.data,item);}"
675	"public void test(){TimeSeriesDataItem existing=(TimeSeriesDataItem)this.data.get(index);overwritten=(TimeSeriesDataItem)existing.clone();boolean iterate=false;Number oldYN=existing.getValue();double oldY=oldYN!=null?oldYN.doubleValue():Double.NaN;}"
676	"public void test(){item=(TimeSeriesDataItem)item.clone();this.data.add(-index-1,item);updateBoundsForAddedItem(item);if(getItemCount()>this.maximumItemCount){TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);updateBoundsForRemovedItem(d);}}"
677	"public void test(){int index=getIndex(period);if(index>=0){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.remove(index);updateBoundsForRemovedItem(item);if(this.data.isEmpty()){this.timePeriodClass=null;}fireSeriesChanged();}}"
678	"public void test(){if(index>=0){TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.remove(index);updateBoundsForRemovedItem(item);if(this.data.isEmpty()){this.timePeriodClass=null;}fireSeriesChanged();}}"
679	"public void test(){OHLCItem item=(OHLCItem)getDataItem(index);return item.getPeriod();}"
680	"public void test(){OHLCSeries series=getSeries(index);if(series!=null){removeSeries(series);}}"
681	"public void test(){invalidateRangeInfo();if(seriesNumber>=this.valueHistory.length){throw new IllegalArgumentException(""TimeSeriesDataset.addValue(): series #""+seriesNumber);}if(this.valueHistory[seriesNumber]==null){this.valueHistory[seriesNumber]=new ValueSequence(this.historyCount);this.seriesCount++;}this.valueHistory[seriesNumber].enterData(index,value);fireSeriesChanged();}"
682	"public void test(){if(start<minStart){this.minStartIndex=index;}}"
683	"public void test(){if(this.minStartIndex>=0){long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();if(start<minStart){this.minStartIndex=index;}}else {this.minStartIndex=index;}}"
684	"public void test(){if(start>maxStart){this.maxStartIndex=index;}}"
685	"public void test(){if(this.maxStartIndex>=0){long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();if(start>maxStart){this.maxStartIndex=index;}}else {this.maxStartIndex=index;}}"
686	"public void test(){if(middle<minMiddle){this.minMiddleIndex=index;}}"
687	"public void test(){if(this.minMiddleIndex>=0){long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();long minMiddle=s+(e-s)/2;if(middle<minMiddle){this.minMiddleIndex=index;}}else {this.minMiddleIndex=index;}}"
688	"public void test(){if(middle>maxMiddle){this.maxMiddleIndex=index;}}"
689	"public void test(){if(this.maxMiddleIndex>=0){long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime();long maxMiddle=s+(e-s)/2;if(middle>maxMiddle){this.maxMiddleIndex=index;}}else {this.maxMiddleIndex=index;}}"
690	"public void test(){if(end<minEnd){this.minEndIndex=index;}}"
691	"public void test(){if(this.minEndIndex>=0){long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();if(end<minEnd){this.minEndIndex=index;}}else {this.minEndIndex=index;}}"
692	"public void test(){if(end>maxEnd){this.maxEndIndex=index;}}"
693	"public void test(){if(this.maxEndIndex>=0){long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();if(end>maxEnd){this.maxEndIndex=index;}}else {this.maxEndIndex=index;}}"
694	"public void test(){TimePeriodValues series=getSeries(index);if(series!=null){removeSeries(series);}}"
695	"public void test(){TimeSeries series=getSeries(index);if(series!=null){removeSeries(series);}}"