1	"public void test(){if(this.maxMiddleIndex>=0){long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();long maxMiddle=s+(e-s)/2;if(middle>maxMiddle){this.maxMiddleIndex=index;}}else {this.maxMiddleIndex=index;}}"
2	"public void test(){for(int r=0;r<this.rows;r++){int index=r*this.columns+c;if(index==blocks.size()){break;}Block b=(Block)blocks.get(index);b.setBounds(new Rectangle2D.Double(c*width,r*height,width,height));}}"
3	"public void test(){if(index==blocks.size()){break;}}"
4	"public void test(){for(int c=0;c<this.columns;c++){int index=r*this.columns+c;if(index==blocks.size()){break;}Block b=(Block)blocks.get(index);Size2D s=b.arrange(g2,constraint2);maxH=Math.max(maxH,s.getHeight());}}"
5	"public void test(){PaintItem item=new PaintItem(value,paint);int index=Collections.binarySearch(this.lookupTable,item);if(index>=0){this.lookupTable.set(index,item);}else {this.lookupTable.add(-(index+1),item);}}"
6	"public void test(){if(index>=0){this.lookupTable.set(index,item);}else {this.lookupTable.add(-(index+1),item);}}"
7	"public void test(){if(isSeriesVisible(i)){double v=0.0;Number n=dataset.getValue(i,index);if(n!=null){v=n.doubleValue();}if(!Double.isNaN(v)){if(v>=0.0){result[1]+=v;}else {result[0]+=v;}}}}"
8	"public void test(){CategoryAxis result=plot.getDomainAxis(index);if(result==null){result=plot.getDomainAxis();}return result;}"
9	"public void test(){ValueAxis result=plot.getRangeAxis(index);if(result==null){result=plot.getRangeAxis();}return result;}"
10	"public void test(){if(this.plot==null){return new LegendItemCollection();}LegendItemCollection result=new LegendItemCollection();int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getRowCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
11	"public void test(){int index=this.plot.getIndexOf(this);CategoryDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getRowCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
12	"public void test(){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}"
13	"public void test(){int index=(inverted?blockCount-k:k);Object[] prev=(Object[])values.get(index);Object[] curr=(Object[])values.get(index+1);int series=0;if(curr[0]==null){series=-((Integer)prev[0]).intValue();}else {series=((Integer)curr[0]).intValue();if(series<0){series=-((Integer)prev[0]).intValue();}}}"
14	"public void test(){for(int i=0;i<series;i++){double value=dataset.getYValue(i,index);if(!Double.isNaN(value)){result+=value;}}}"
15	"public void test(){for(int i=0;i<series;i++){double v=dataset.getYValue(i,index);if(!Double.isNaN(v)){if(v>=0.0){result[1]+=v;}else {result[0]+=v;}}}}"
16	"public void test(){if(this.plot==null){return new LegendItemCollection();}LegendItemCollection result=new LegendItemCollection();int index=this.plot.getIndexOf(this);XYDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
17	"public void test(){int index=this.plot.getIndexOf(this);XYDataset dataset=this.plot.getDataset(index);if(dataset!=null){int seriesCount=dataset.getSeriesCount();for(int i=0;i<seriesCount;i++){if(isSeriesVisibleInLegend(i)){LegendItem item=getLegendItem(index,i);if(item!=null){result.add(item);}}}}}"
18	"public void test(){{int index=0;while(index<itemCount&&dataset.getXValue(series,index)<xLow){index++;}return Math.max(0,index-1);}}"
19	"public void test(){{int index=itemCount-1;while(index>=0&&dataset.getXValue(series,index)>xHigh){index--;}return Math.min(itemCount-1,index+1);}}"
20	"public void test(){int index=-1;for(int i=0;(index==-1)&&(i<menu.getComponentCount());i++){Component comp=menu.getComponent(i);if(comp instanceof JMenuItem){JMenuItem item=(JMenuItem)comp;if(text.equals(item.getText())){index=i;}}}return index;}"
21	"public void test(){for(int i=0;(index==-1)&&(i<menu.getComponentCount());i++){Component comp=menu.getComponent(i);if(comp instanceof JMenuItem){JMenuItem item=(JMenuItem)comp;if(text.equals(item.getText())){index=i;}}}}"
22	"public void test(){if(text.equals(item.getText())){index=i;}}"
23	"public void test(){long currentMillis=date.getTime();long elapsed=currentMillis-this.baseMillis;String signPrefix;if(elapsed<0){elapsed*=-1L;signPrefix=""-"";}else {signPrefix=this.positivePrefix;}long days=elapsed/MILLISECONDS_IN_ONE_DAY;}"
24	"public void test(){for(int i=0;i<count;i++){ final int index=stream.readInt();if(index!=-1){setPaint(index,SerialUtilities.readPaint(stream));}}}"
25	"public void test(){if(index!=-1){setPaint(index,SerialUtilities.readPaint(stream));}}"
26	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){setShape(index,SerialUtilities.readShape(stream));}}}"
27	"public void test(){if(index!=-1){setShape(index,SerialUtilities.readShape(stream));}}"
28	"public void test(){if(name.startsWith(""/"")){return name.substring(1);}while(c.isArray()){c=c.getComponentType();} final String baseName=c.getName(); final int index=baseName.lastIndexOf('.');if(index==-1){return name;} final String pkgName=baseName.substring(0,index);return pkgName.replace('.','/')+""/"";}"
29	"public void test(){if(index==-1){return name;}}"
30	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){setStroke(index,SerialUtilities.readStroke(stream));}}}"
31	"public void test(){if(index!=-1){setStroke(index,SerialUtilities.readStroke(stream));}}"
32	"public void test(){if(index>=0&&index<this.size){result=this.objects[index];}}"
33	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires index >= 0."");}}"
34	"public void test(){if(index>=this.objects.length){Object[] enlarged=new Object[index+this.increment];System.arraycopy(this.objects,0,enlarged,0,this.objects.length);this.objects=enlarged;}}"
35	"public void test(){if(index<0){throw new IllegalArgumentException(""Requires index >= 0."");}if(index>=this.objects.length){Object[] enlarged=new Object[index+this.increment];System.arraycopy(this.objects,0,enlarged,0,this.objects.length);this.objects=enlarged;}this.objects[index]=object;this.size=Math.max(this.size,index+1);}"
36	"public void test(){for(int index=0;index<this.size;index++){if(this.objects[index]==object){return (index);}}}"
37	"public void test(){if(this.objects[index]==object){return (index);}}"
38	"public void test(){for(int i=0;i<count;i++){int index=stream.readInt();if(index!=-1){set(index,stream.readObject());}}}"
39	"public void test(){if(index!=-1){set(index,stream.readObject());}}"
40	"public void test(){DialLayer layer=(DialLayer)this.layers.get(index);if(layer!=null){layer.removeChangeListener(this);}this.layers.remove(index);fireChangeEvent();}"
41	"public void test(){DialPointer pointer=(DialPointer)this.pointers.get(index);if(pointer!=null){pointer.removeChangeListener(this);}this.pointers.remove(index);fireChangeEvent();}"
42	"public void test(){if(this.datasets.size()>index){result=(ValueDataset)this.datasets.get(index);}}"
43	"public void test(){ValueDataset existing=(ValueDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset);datasetChanged(event);}"
44	"public void test(){if(scale==null){throw new IllegalArgumentException(""Null \'scale\' argument."");}DialScale existing=(DialScale)this.scales.get(index);if(existing!=null){removeLayer(existing);}this.layers.add(scale);this.scales.set(index,scale);scale.addChangeListener(this);fireChangeEvent();}"
45	"public void test(){if(this.scales.size()>index){result=(DialScale)this.scales.get(index);}}"
46	"public void test(){if(index<this.domainAxes.size()){result=(ValueAxis)this.domainAxes.get(index);}}"
47	"public void test(){if(parent instanceof XYPlot){XYPlot xy=(XYPlot)parent;result=xy.getDomainAxis(index);}}"
48	"public void test(){ValueAxis existing=getDomainAxis(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}this.domainAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}if(notify){fireChangeEvent();}}"
49	"public void test(){if(index<this.domainAxisLocations.size()){result=(AxisLocation)this.domainAxisLocations.get(index);}}"
50	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}}"
51	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}this.domainAxisLocations.set(index,location);if(notify){fireChangeEvent();}}"
52	"public void test(){AxisLocation location=getDomainAxisLocation(index);RectangleEdge result=Plot.resolveDomainAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getDomainAxisEdge());}return result;}"
53	"public void test(){if(index<this.rangeAxes.size()){result=(ValueAxis)this.rangeAxes.get(index);}}"
54	"public void test(){if(parent instanceof XYPlot){XYPlot xy=(XYPlot)parent;result=xy.getRangeAxis(index);}}"
55	"public void test(){ValueAxis existing=getRangeAxis(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}this.rangeAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}if(notify){fireChangeEvent();}}"
56	"public void test(){if(index<this.rangeAxisLocations.size()){result=(AxisLocation)this.rangeAxisLocations.get(index);}}"
57	"public void test(){if(index==0&&location==null){throw new IllegalArgumentException(""Null \'location\' for index 0 not permitted."");}this.rangeAxisLocations.set(index,location);if(notify){fireChangeEvent();}}"
58	"public void test(){AxisLocation location=getRangeAxisLocation(index);RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getRangeAxisEdge());}return result;}"
59	"public void test(){if(this.datasets.size()>index){result=(XYDataset)this.datasets.get(index);}}"
60	"public void test(){XYDataset existing=getDataset(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset);datasetChanged(event);}"
61	"public void test(){if(this.renderers.size()>index){result=(XYItemRenderer)this.renderers.get(index);}}"
62	"public void test(){XYItemRenderer existing=getRenderer(index);if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);if(renderer!=null){renderer.setPlot(this);renderer.addChangeListener(this);}configureDomainAxes();configureRangeAxes();if(notify){fireChangeEvent();}}"
63	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}}"
64	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}return this.quadrantPaint[index];}"
65	"public void test(){if(index<0||index>3){throw new IllegalArgumentException(""The index value (""+index);}this.quadrantPaint[index]=paint;fireChangeEvent();}"
66	"public void test(){Integer key=new Integer(index);if(this.backgroundDomainMarkers!=null){Collection markers=(Collection)this.backgroundDomainMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}}"
67	"public void test(){if(layer==Layer.FOREGROUND){markers=(Collection)this.foregroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}else if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
68	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.foregroundDomainMarkers.put(new Integer(index),markers);}}"
69	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundDomainMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
70	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.backgroundDomainMarkers.put(new Integer(index),markers);}}"
71	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));}}"
72	"public void test(){if(layer==Layer.FOREGROUND){markers=(Collection)this.foregroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.foregroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}else if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
73	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.foregroundRangeMarkers.put(new Integer(index),markers);}}"
74	"public void test(){if(layer==Layer.BACKGROUND){markers=(Collection)this.backgroundRangeMarkers.get(new Integer(index));if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}markers.add(marker);}}"
75	"public void test(){if(markers==null){markers=new java.util.ArrayList();this.backgroundRangeMarkers.put(new Integer(index),markers);}}"
76	"public void test(){Integer key=new Integer(index);if(this.backgroundRangeMarkers!=null){Collection markers=(Collection)this.backgroundRangeMarkers.get(key);if(markers!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker m=(Marker)iterator.next();m.removeChangeListener(this);}markers.clear();}}}"
77	"public void test(){if(layer==Layer.FOREGROUND){markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));}else {markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));}}"
78	"public void test(){for(int index=0;index<this.domainAxes.size();index++){ValueAxis axis=(ValueAxis)this.domainAxes.get(index);if(axis!=null){axisCollection.add(axis,getDomainAxisEdge(index));}}}"
79	"public void test(){if(axis!=null){axisCollection.add(axis,getDomainAxisEdge(index));}}"
80	"public void test(){for(int index=0;index<this.rangeAxes.size();index++){ValueAxis yAxis=(ValueAxis)this.rangeAxes.get(index);if(yAxis!=null){axisCollection.add(yAxis,getRangeAxisEdge(index));}}}"
81	"public void test(){if(yAxis!=null){axisCollection.add(yAxis,getRangeAxisEdge(index));}}"
82	"public void test(){foundData=true;ValueAxis xAxis=getDomainAxisForDataset(index);ValueAxis yAxis=getRangeAxisForDataset(index);XYItemRenderer renderer=getRenderer(index);if(renderer==null){renderer=getRenderer();if(renderer==null){return foundData;}}XYItemRendererState state=renderer.initialise(g2,dataArea,this,dataset,info);}"
83	"public void test(){foundData=true;ValueAxis xAxis=getDomainAxisForDataset(index);ValueAxis yAxis=getRangeAxisForDataset(index);XYItemRenderer renderer=getRenderer(index);if(renderer==null){renderer=getRenderer();if(renderer==null){return foundData;}}XYItemRendererState state=renderer.initialise(g2,dataArea,this,dataset,info);int passCount=renderer.getPassCount();}"
84	"public void test(){if(index<0||index>=getDatasetCount()){throw new IllegalArgumentException(""Index ""+index);}}"
85	"public void test(){if(index<0||index>=getDatasetCount()){throw new IllegalArgumentException(""Index ""+index);}ValueAxis valueAxis=null;Integer axisIndex=(Integer)this.datasetToDomainAxisMap.get(new Integer(index));if(axisIndex!=null){valueAxis=getDomainAxis(axisIndex.intValue());}else {valueAxis=getDomainAxis(0);}return valueAxis;}"
86	"public void test(){if(index<0||index>=getDatasetCount()){throw new IllegalArgumentException(""Index ""+index);}ValueAxis valueAxis=null;Integer axisIndex=(Integer)this.datasetToRangeAxisMap.get(new Integer(index));if(axisIndex!=null){valueAxis=getRangeAxis(axisIndex.intValue());}else {valueAxis=getRangeAxis(0);}return valueAxis;}"
87	"public void test(){XYItemRenderer r=getRenderer(index);if(r==null){return ;}if(index>=getDatasetCount()){return ;}Collection markers=getDomainMarkers(index,layer);ValueAxis axis=getDomainAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker marker=(Marker)iterator.next();r.drawDomainMarker(g2,this,axis,marker,dataArea);}}}"
88	"public void test(){if(index>=getDatasetCount()){return ;}}"
89	"public void test(){XYItemRenderer r=getRenderer(index);if(r==null){return ;}if(index>=getDatasetCount()){return ;}Collection markers=getRangeMarkers(index,layer);ValueAxis axis=getRangeAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker marker=(Marker)iterator.next();r.drawRangeMarker(g2,this,axis,marker,dataArea);}}}"
90	"public void test(){Collection result=null;Integer key=new Integer(index);if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundDomainMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundDomainMarkers.get(key);}if(result!=null){result=Collections.unmodifiableCollection(result);}return result;}"
91	"public void test(){Collection result=null;Integer key=new Integer(index);if(layer==Layer.FOREGROUND){result=(Collection)this.foregroundRangeMarkers.get(key);}else if(layer==Layer.BACKGROUND){result=(Collection)this.backgroundRangeMarkers.get(key);}if(result!=null){result=Collections.unmodifiableCollection(result);}return result;}"
92	"public void test(){if((needle!=null)&&(index<this.seriesNeedle.length)){this.seriesNeedle[index]=needle;}}"
93	"public void test(){if(index<this.domainAxes.size()){result=(CategoryAxis)this.domainAxes.get(index);}}"
94	"public void test(){if(parent instanceof CategoryPlot){CategoryPlot cp=(CategoryPlot)parent;result=cp.getDomainAxis(index);}}"
95	"public void test(){CategoryAxis existing=(CategoryAxis)this.domainAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}this.domainAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}if(notify){fireChangeEvent();}}"
96	"public void test(){RectangleEdge result=null;AxisLocation location=getDomainAxisLocation(index);if(location!=null){result=Plot.resolveDomainAxisLocation(location,this.orientation);}else {result=RectangleEdge.opposite(getDomainAxisEdge(0));}return result;}"
97	"public void test(){if(parent instanceof CategoryPlot){CategoryPlot cp=(CategoryPlot)parent;result=cp.getRangeAxis(index);}}"
98	"public void test(){ValueAxis existing=(ValueAxis)this.rangeAxes.get(index);if(existing!=null){existing.removeChangeListener(this);}if(axis!=null){axis.setPlot(this);}this.rangeAxes.set(index,axis);if(axis!=null){axis.configure();axis.addChangeListener(this);}if(notify){fireChangeEvent();}}"
99	"public void test(){AxisLocation location=getRangeAxisLocation(index);RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);if(result==null){result=RectangleEdge.opposite(getRangeAxisEdge(0));}return result;}"
100	"public void test(){if(this.datasets.size()>index){result=(CategoryDataset)this.datasets.get(index);}}"
101	"public void test(){CategoryDataset existing=(CategoryDataset)this.datasets.get(index);if(existing!=null){existing.removeChangeListener(this);}this.datasets.set(index,dataset);if(dataset!=null){dataset.addChangeListener(this);}DatasetChangeEvent event=new DatasetChangeEvent(this,dataset);datasetChanged(event);}"
102	"public void test(){CategoryAxis result=getDomainAxis();Integer axisIndex=(Integer)this.datasetToDomainAxisMap.get(index);if(axisIndex!=null){result=getDomainAxis(axisIndex.intValue());}return result;}"
103	"public void test(){ValueAxis result=getRangeAxis();Integer axisIndex=(Integer)this.datasetToRangeAxisMap.get(index);if(axisIndex!=null){result=getRangeAxis(axisIndex.intValue());}return result;}"
104	"public void test(){if(this.renderers.size()>index){result=(CategoryItemRenderer)this.renderers.get(index);}}"
105	"public void test(){CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);if(existing!=null){existing.removeChangeListener(this);}this.renderers.set(index,renderer);if(renderer!=null){renderer.setPlot(this);renderer.addChangeListener(this);}configureDomainAxes();configureRangeAxes();if(notify){fireChangeEvent();}}"
106	"public void test(){for(int index=0;index<this.domainAxes.size();index++){CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);if(xAxis!=null){axisCollection.add(xAxis,getDomainAxisEdge(index));}}}"
107	"public void test(){if(xAxis!=null){axisCollection.add(xAxis,getDomainAxisEdge(index));}}"
108	"public void test(){CategoryItemRenderer r=getRenderer(index);if(r==null){return ;}Collection markers=getDomainMarkers(index,layer);CategoryAxis axis=getDomainAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){CategoryMarker marker=(CategoryMarker)iterator.next();r.drawDomainMarker(g2,this,axis,marker,dataArea);}}}"
109	"public void test(){CategoryItemRenderer r=getRenderer(index);if(r==null){return ;}Collection markers=getRangeMarkers(index,layer);ValueAxis axis=getRangeAxisForDataset(index);if(markers!=null&&axis!=null){Iterator iterator=markers.iterator();while(iterator.hasNext()){Marker marker=(Marker)iterator.next();r.drawRangeMarker(g2,this,axis,marker,dataArea);}}}"
110	"public void test(){if(index==0){result.add(dataset);}}"
111	"public void test(){if(m.intValue()==index){result.add(dataset);}}"
112	"public void test(){if(seen==index){return (LegendTitle)subtitle;}else {seen++;}}"
113	"public void test(){if((index<0)||(index>=getSubtitleCount())){throw new IllegalArgumentException(""Index out of range."");}}"
114	"public void test(){if((index<0)||(index>=getSubtitleCount())){throw new IllegalArgumentException(""Index out of range."");}return (Title)this.subtitles.get(index);}"
115	"public void test(){if(index<0||index>getSubtitleCount()){throw new IllegalArgumentException(""The \'index\' argument is out of range."");}}"
116	"public void test(){if(index<0||index>getSubtitleCount()){throw new IllegalArgumentException(""The \'index\' argument is out of range."");}if(subtitle==null){throw new IllegalArgumentException(""Null \'subtitle\' argument."");}this.subtitles.add(index,subtitle);subtitle.addChangeListener(this);fireChartChanged();}"
117	"public void test(){direction=direction%360;if(direction<0.0){direction=direction+360.0;}int index=((int)Math.floor(direction/11.25)+1)/2;return DIRECTIONS[index];}"
118	"public void test(){int index=Collections.binarySearch(this.tickUnits,unit);if(index>=0){index=index+1;}else {index=-index;}return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}"
119	"public void test(){if(index>=0){index=index+1;}else {index=-index;}}"
120	"public void test(){int index=Collections.binarySearch(this.tickUnits,unit);if(index>=0){return (TickUnit)this.tickUnits.get(index);}else {index=-(index+1);return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}}"
121	"public void test(){if(index>=0){return (TickUnit)this.tickUnits.get(index);}else {index=-(index+1);return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));}}"
122	"public void test(){if(lower.getTime()>=upper.getTime()){throw new IllegalArgumentException(""Requires \'lower\' < \'upper\'."");}}"
123	"public void test(){if(date==null){throw new IllegalArgumentException(""Null \'date\' argument."");}Date maxDate=getMaximumDate();long maxMillis=maxDate.getTime();long newMinMillis=date.getTime();if(maxMillis<=newMinMillis){Date oldMin=getMinimumDate();long length=maxMillis-oldMin.getTime();maxDate=new Date(newMinMillis+length);}setRange(new DateRange(date,maxDate),true,false);notifyListeners(new AxisChangeEvent(this));}"
124	"public void test(){if(maxMillis<=newMinMillis){Date oldMin=getMinimumDate();long length=maxMillis-oldMin.getTime();maxDate=new Date(newMinMillis+length);}}"
125	"public void test(){if(maximumDate==null){throw new IllegalArgumentException(""Null \'maximumDate\' argument."");}Date minDate=getMinimumDate();long minMillis=minDate.getTime();long newMaxMillis=maximumDate.getTime();if(minMillis>=newMaxMillis){Date oldMax=getMaximumDate();long length=oldMax.getTime()-minMillis;minDate=new Date(newMaxMillis-length);}setRange(new DateRange(minDate,maximumDate),true,false);notifyListeners(new AxisChangeEvent(this));}"
126	"public void test(){if(minMillis>=newMaxMillis){Date oldMax=getMaximumDate();long length=oldMax.getTime()-minMillis;minDate=new Date(newMaxMillis-length);}}"
127	"public void test(){double value=date.getTime();return valueToJava2D(value,area,edge);}"
128	"public void test(){seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);calendar.set(Calendar.MILLISECOND,value);Date mm=calendar.getTime();if(mm.getTime()>=date.getTime()){calendar.set(Calendar.MILLISECOND,value-1);mm=calendar.getTime();}return mm;case (DateTickUnit.SECOND) :}"
129	"public void test(){if(mm.getTime()>=date.getTime()){calendar.set(Calendar.MILLISECOND,value-1);mm=calendar.getTime();}}"
130	"public void test(){if(this.tickMarkPosition==DateTickMarkPosition.START){milliseconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){milliseconds=500;}else {milliseconds=999;}calendar.set(Calendar.MILLISECOND,milliseconds);calendar.set(years,months,days,hours,minutes,value);Date dd=calendar.getTime();if(dd.getTime()>=date.getTime()){calendar.set(Calendar.SECOND,value-1);dd=calendar.getTime();}return dd;}"
131	"public void test(){if(dd.getTime()>=date.getTime()){calendar.set(Calendar.SECOND,value-1);dd=calendar.getTime();}}"
132	"public void test(){if(this.tickMarkPosition==DateTickMarkPosition.START){seconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){seconds=30;}else {seconds=59;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,hours,value,seconds);Date d0=calendar.getTime();if(d0.getTime()>=date.getTime()){calendar.set(Calendar.MINUTE,value-1);d0=calendar.getTime();}return d0;}"
133	"public void test(){if(d0.getTime()>=date.getTime()){calendar.set(Calendar.MINUTE,value-1);d0=calendar.getTime();}}"
134	"public void test(){if(this.tickMarkPosition==DateTickMarkPosition.START){minutes=0;seconds=0;}else if(this.tickMarkPosition==DateTickMarkPosition.MIDDLE){minutes=30;seconds=0;}else {minutes=59;seconds=59;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,value,minutes,seconds);Date d1=calendar.getTime();if(d1.getTime()>=date.getTime()){calendar.set(Calendar.HOUR_OF_DAY,value-1);d1=calendar.getTime();}return d1;case (DateTickUnit.DAY) :}"
135	"public void test(){if(d1.getTime()>=date.getTime()){calendar.set(Calendar.HOUR_OF_DAY,value-1);d1=calendar.getTime();}}"
136	"public void test(){if(d2.getTime()>=date.getTime()){calendar.set(Calendar.DATE,value-1);d2=calendar.getTime();}}"
137	"public void test(){calendar.set(years,value,1,0,0,0);Month month=new Month(calendar.getTime(),this.timeZone);Date standardDate=calculateDateForPosition(month,this.tickMarkPosition);long millis=standardDate.getTime();if(millis>=date.getTime()){month=(Month)month.previous();standardDate=calculateDateForPosition(month,this.tickMarkPosition);}return standardDate;case (DateTickUnit.YEAR) :}"
138	"public void test(){if(millis>=date.getTime()){month=(Month)month.previous();standardDate=calculateDateForPosition(month,this.tickMarkPosition);}}"
139	"public void test(){if(d3.getTime()>=date.getTime()){calendar.set(Calendar.YEAR,value-1);d3=calendar.getTime();}}"
140	"public void test(){Date previous=previousStandardDate(date,unit);Calendar calendar=Calendar.getInstance(this.timeZone);calendar.setTime(previous);calendar.add(unit.getCalendarField(),unit.getCount());return calendar.getTime();}"
141	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(base);calendar.add(getCalendarField(this.unit),this.count);return calendar.getTime();}"
142	"public void test(){Calendar calendar=Calendar.getInstance(zone);calendar.setTime(base);calendar.add(getCalendarField(this.rollUnit),this.rollCount);return calendar.getTime();}"
143	"public void test(){int offset=TimeZone.getDefault().getRawOffset();TimeZone z=new SimpleTimeZone(offset,""UTC-""+offset);Calendar cal=new GregorianCalendar(z);cal.set(1900,0,1,0,0,0);cal.set(Calendar.MILLISECOND,0);while(cal.get(Calendar.DAY_OF_WEEK)!=Calendar.MONDAY){cal.add(Calendar.DATE,1);}return cal.getTime().getTime();}"
144	"public void test(){if(this.adjustForDaylightSaving){this.workingCalendarNoDST.setTime(new Date(date));this.workingCalendar.set(this.workingCalendarNoDST.get(Calendar.YEAR),this.workingCalendarNoDST.get(Calendar.MONTH),this.workingCalendarNoDST.get(Calendar.DATE),this.workingCalendarNoDST.get(Calendar.HOUR_OF_DAY),this.workingCalendarNoDST.get(Calendar.MINUTE),this.workingCalendarNoDST.get(Calendar.SECOND));this.workingCalendar.set(Calendar.MILLISECOND,this.workingCalendarNoDST.get(Calendar.MILLISECOND));result=this.workingCalendar.getTime().getTime();}}"
145	"public void test(){long result=date.getTime();if(this.adjustForDaylightSaving){this.workingCalendar.setTime(date);this.workingCalendarNoDST.set(this.workingCalendar.get(Calendar.YEAR),this.workingCalendar.get(Calendar.MONTH),this.workingCalendar.get(Calendar.DATE),this.workingCalendar.get(Calendar.HOUR_OF_DAY),this.workingCalendar.get(Calendar.MINUTE),this.workingCalendar.get(Calendar.SECOND));this.workingCalendarNoDST.set(Calendar.MILLISECOND,this.workingCalendar.get(Calendar.MILLISECOND));Date revisedDate=this.workingCalendarNoDST.getTime();result=revisedDate.getTime();}return result;}"
146	"public void test(){if(this.adjustForDaylightSaving){this.workingCalendar.setTime(date);this.workingCalendarNoDST.set(this.workingCalendar.get(Calendar.YEAR),this.workingCalendar.get(Calendar.MONTH),this.workingCalendar.get(Calendar.DATE),this.workingCalendar.get(Calendar.HOUR_OF_DAY),this.workingCalendar.get(Calendar.MINUTE),this.workingCalendar.get(Calendar.SECOND));this.workingCalendarNoDST.set(Calendar.MILLISECOND,this.workingCalendar.get(Calendar.MILLISECOND));Date revisedDate=this.workingCalendarNoDST.getTime();result=revisedDate.getTime();}}"
147	"public void test(){this.workingCalendarNoDST.setTime(new Date(value));return (this.workingCalendarNoDST.getTime());}"
148	"public void test(){if(this.plotOrientation!=null){boolean isVertical=this.plotOrientation.equals(PlotOrientation.VERTICAL);int index=isVertical?ORIENTATION_VERTICAL:ORIENTATION_HORIZONTAL;interior.add(new JLabel(localizationResources.getString(""Orientation"")));this.orientationCombo=new JComboBox(orientationNames);this.orientationCombo.setSelectedIndex(index);this.orientationCombo.setActionCommand(""Orientation"");this.orientationCombo.addActionListener(this);interior.add(new JPanel());interior.add(this.orientationCombo);}}"
149	"public void test(){int index=this.orientationCombo.getSelectedIndex();if(index==ORIENTATION_VERTICAL){this.plotOrientation=PlotOrientation.VERTICAL;}else {this.plotOrientation=PlotOrientation.HORIZONTAL;}}"
150	"public void test(){if(index==ORIENTATION_VERTICAL){this.plotOrientation=PlotOrientation.VERTICAL;}else {this.plotOrientation=PlotOrientation.HORIZONTAL;}}"
151	"public void test(){TextLine last=null; final int index=this.lines.size()-1;if(index>=0){last=(TextLine)this.lines.get(index);}return last;}"
152	"public void test(){if(index>=0){last=(TextLine)this.lines.get(index);}}"
153	"public void test(){{int index=input.indexOf(""\n"");if(index>start){String line=input.substring(start,index);if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}else if(index==start){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}else {result.addLine(input,font,paint);moreInputToProcess=false;}}}"
154	"public void test(){if(index>start){String line=input.substring(start,index);if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}else if(index==start){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}else {result.addLine(input,font,paint);moreInputToProcess=false;}}"
155	"public void test(){{String line=input.substring(start,index);if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}}"
156	"public void test(){if(index<input.length()-1){result.addLine(line,font,paint);input=input.substring(index+1);}else {moreInputToProcess=false;}}"
157	"public void test(){if(index==start){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}else {result.addLine(input,font,paint);moreInputToProcess=false;}}"
158	"public void test(){if(index<input.length()-1){input=input.substring(index+1);}else {moreInputToProcess=false;}}"
159	"public void test(){if(rowData!=null){Comparable columnKey=(Comparable)this.columnKeys.get(column);int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getValue(index);}}}"
160	"public void test(){if(index>=0){result=rowData.getValue(index);}}"
161	"public void test(){while(iterator.hasNext()){DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();int index=rowData.getIndex(columnKey);if(index>=0){rowData.removeValue(columnKey);}}}"
162	"public void test(){if(index>=0){rowData.removeValue(columnKey);}}"
163	"public void test(){if(columnKey!=null){int index=rowData.getIndex(columnKey);if(index>=0){result=rowData.getObject(columnKey);}}}"
164	"public void test(){if(index>=0){result=rowData.getObject(columnKey);}}"
165	"public void test(){int column=this.columnKeys.indexOf(columnKey);if(column<0){throw new UnknownKeyException(""Column key (""+columnKey);}KeyedObjects rowData=(KeyedObjects)this.rows.get(row);int index=rowData.getIndex(columnKey);if(index>=0){return rowData.getObject(index);}else {return null;}}"
166	"public void test(){if(index>=0){return rowData.getObject(index);}else {return null;}}"
167	"public void test(){int index=getRowIndex(rowKey);if(index<0){throw new UnknownKeyException(""Row key (""+rowKey);}removeRow(index);}"
168	"public void test(){if(index<0){throw new UnknownKeyException(""Row key (""+rowKey);}}"
169	"public void test(){int index=getColumnIndex(columnKey);if(index<0){throw new UnknownKeyException(""Column key (""+columnKey);}Iterator iterator=this.rows.iterator();while(iterator.hasNext()){KeyedObjects rowData=(KeyedObjects)iterator.next();int i=rowData.getIndex(columnKey);if(i>=0){rowData.removeValue(i);}}this.columnKeys.remove(columnKey);}"
170	"public void test(){if(index<0){throw new UnknownKeyException(""Column key (""+columnKey);}}"
171	"public void test(){Comparable result=null;KeyedObject item=(KeyedObject)this.data.get(index);if(item!=null){result=item.getKey();}return result;}"
172	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key);}return getObject(index);}"
173	"public void test(){if(index<0){throw new UnknownKeyException(""The key (""+key);}}"
174	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key.toString());}removeValue(index);}"
175	"public void test(){if(index<0){throw new UnknownKeyException(""The key (""+key.toString());}}"
176	"public void test(){if(extract==null){throw new IllegalArgumentException(""Null \'extract\' argument."");}this.source=source;if(this.source!=null){this.source.addChangeListener(this);}this.extract=extract;this.index=index;}"
177	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getValue(this.index,item);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(item,this.index);}}"
178	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(item,this.index);}}"
179	"public void test(){if(index<0||index>=getItemCount()){throw new IndexOutOfBoundsException(""Invalid \'index\': ""+index);}}"
180	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getColumnKey(index);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getRowKey(index);}}"
181	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getRowKey(index);}}"
182	"public void test(){if(this.extract==TableOrder.BY_ROW){result=this.source.getValue(this.index,keyIndex);}else if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(keyIndex,this.index);}}"
183	"public void test(){if(this.extract==TableOrder.BY_COLUMN){result=this.source.getValue(keyIndex,this.index);}}"
184	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getXValue();}"
185	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getYValue();}"
186	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVector();}"
187	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVectorX();}"
188	"public void test(){VectorSeries s=(VectorSeries)this.data.get(series);VectorDataItem di=(VectorDataItem)s.getDataItem(item);return di.getVectorY();}"
189	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getX();}"
190	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getXLowValue();}"
191	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getXHighValue();}"
192	"public void test(){XIntervalDataItem item=(XIntervalDataItem)getDataItem(index);return item.getYValue();}"
193	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return di.getX();}"
194	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getYValue());}"
195	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getXLowValue());}"
196	"public void test(){XIntervalSeries s=(XIntervalSeries)this.data.get(series);XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);return new Double(di.getXHighValue());}"
197	"public void test(){XYSeries s=(XYSeries)this.data.get(series);XYDataItem dataItem=s.getDataItem(item);return dataItem.getX();}"
198	"public void test(){XYSeries ts=(XYSeries)this.data.get(series);XYDataItem dataItem=ts.getDataItem(index);return dataItem.getY();}"
199	"public void test(){if(xObject instanceof Date){Date xDate=(Date)xObject;xNumber=new Long(xDate.getTime());}else {xNumber=new Integer(0);}}"
200	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getX();}"
201	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getXLowValue();}"
202	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getXHighValue();}"
203	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYValue();}"
204	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYLowValue();}"
205	"public void test(){XYIntervalDataItem item=(XYIntervalDataItem)getDataItem(index);return item.getYHighValue();}"
206	"public void test(){VectorDataItem result=(VectorDataItem)this.data.remove(index);fireSeriesChanged();return result;}"
207	"public void test(){VectorDataItem item=(VectorDataItem)this.getDataItem(index);return item.getXValue();}"
208	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getYValue();}"
209	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getVectorX();}"
210	"public void test(){VectorDataItem item=(VectorDataItem)getDataItem(index);return item.getVectorY();}"
211	"public void test(){XYSeries ts=(XYSeries)this.data.get(series);XYDataItem xyItem=ts.getDataItem(item);return xyItem.getX();}"
212	"public void test(){XYSeries ts=(XYSeries)this.data.get(series);XYDataItem xyItem=ts.getDataItem(index);return xyItem.getY();}"
213	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getX();}"
214	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYValue();}"
215	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYLowValue();}"
216	"public void test(){YIntervalDataItem item=(YIntervalDataItem)getDataItem(index);return item.getYHighValue();}"
217	"public void test(){{int index=Collections.binarySearch(this.data,item);if(index<0){this.data.add(-index-1,item);}else {if(this.allowDuplicateXValues){int size=this.data.size();while(index<size&&item.compareTo(this.data.get(index))==0){index++;}if(index<this.data.size()){this.data.add(index,item);}else {this.data.add(item);}}else {throw new SeriesException(""X-value already exists."");}}}}"
218	"public void test(){if(index<0){this.data.add(-index-1,item);}else {if(this.allowDuplicateXValues){int size=this.data.size();while(index<size&&item.compareTo(this.data.get(index))==0){index++;}if(index<this.data.size()){this.data.add(index,item);}else {this.data.add(item);}}else {throw new SeriesException(""X-value already exists."");}}}"
219	"public void test(){if(index<this.data.size()){this.data.add(index,item);}else {this.data.add(item);}}"
220	"public void test(){if(!this.allowDuplicateXValues){int index=indexOf(item.getX());if(index>=0){throw new SeriesException(""X-value already exists."");}}}"
221	"public void test(){if(index>=0){throw new SeriesException(""X-value already exists."");}}"
222	"public void test(){XYDataItem result=(XYDataItem)this.data.remove(index);fireSeriesChanged();return result;}"
223	"public void test(){int index=indexOf(x);if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {XYDataItem item=getDataItem(index);item.setY(y);fireSeriesChanged();}}"
224	"public void test(){if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {XYDataItem item=getDataItem(index);item.setY(y);fireSeriesChanged();}}"
225	"public void test(){if(index>=0){XYDataItem existing=(XYDataItem)this.data.get(index);try{overwritten=(XYDataItem)existing.clone();}catch (CloneNotSupportedException e) {  throw new SeriesException(""Couldn't clone XYDataItem!"");}existing.setY(y);}else {if(this.autoSort){this.data.add(-index-1,new XYDataItem(x,y));}else {this.data.add(new XYDataItem(x,y));}if(getItemCount()>this.maximumItemCount){this.data.remove(0);}}}"
226	"public void test(){if(this.autoSort){this.data.add(-index-1,new XYDataItem(x,y));}else {this.data.add(new XYDataItem(x,y));}}"
227	"public void test(){if(count>0){XYDataItem item=getDataItem(0);result=29*result+item.hashCode();}}"
228	"public void test(){if(count>1){XYDataItem item=getDataItem(count-1);result=29*result+item.hashCode();}}"
229	"public void test(){if(count>2){XYDataItem item=getDataItem(count/2);result=29*result+item.hashCode();}}"
230	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""Key not found: ""+key);}return getValue(index);}"
231	"public void test(){if(index<0){throw new UnknownKeyException(""Key not found: ""+key);}}"
232	"public void test(){int index=getIndex(key);if(index<0){throw new UnknownKeyException(""The key (""+key);}removeValue(index);}"
233	"public void test(){if(!this.allowDuplicateXValues){int index=indexOf(item.getComparable());if(index>=0){throw new SeriesException(""X-value already exists."");}}}"
234	"public void test(){int index=indexOf(x);if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}}"
235	"public void test(){if(index<0){throw new SeriesException(""No observation for x = ""+x);}else {ComparableObjectItem item=getDataItem(index);item.setObject(y);fireSeriesChanged();}}"
236	"public void test(){ComparableObjectItem result=(ComparableObjectItem)this.data.remove(index);fireSeriesChanged();return result;}"
237	"public void test(){if(count>0){ComparableObjectItem item=getDataItem(0);result=29*result+item.hashCode();}}"
238	"public void test(){if(count>1){ComparableObjectItem item=getDataItem(count-1);result=29*result+item.hashCode();}}"
239	"public void test(){if(count>2){ComparableObjectItem item=getDataItem(count/2);result=29*result+item.hashCode();}}"
240	"public void test(){if(key==null){throw new NullPointerException(""Null \'key\' argument."");}TaskSeries result=null;int index=getRowIndex(key);if(index>=0){result=getSeries(index);}return result;}"
241	"public void test(){if(index>=0){result=getSeries(index);}}"
242	"public void test(){TaskSeries series=(TaskSeries)this.data.get(index);return series.getKey();}"
243	"public void test(){while(iterator.hasNext()){Task task=(Task)iterator.next();String key=task.getDescription();int index=this.keys.indexOf(key);if(index<0){this.keys.add(key);}}}"
244	"public void test(){if(index<0){this.keys.add(key);}}"
245	"public void test(){if(duration!=null){result=new Long(duration.getStart().getTime());}}"
246	"public void test(){if(duration!=null){result=new Long(duration.getEnd().getTime());}}"
247	"public void test(){if(sub!=null){TimePeriod duration=sub.getDuration();result=new Long(duration.getStart().getTime());}}"
248	"public void test(){if(sub!=null){TimePeriod duration=sub.getDuration();result=new Long(duration.getEnd().getTime());}}"
249	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,this.second);calendar.set(Calendar.MILLISECOND,this.millisecond);return calendar.getTime().getTime();}"
250	"public void test(){int index=getIndex(period);if(index>=0){return (TimeSeriesDataItem)this.data.get(index);}else {return null;}}"
251	"public void test(){if(index>=0){return (TimeSeriesDataItem)this.data.get(index);}else {return null;}}"
252	"public void test(){for(int i=0;i<series.getItemCount();i++){RegularTimePeriod period=series.getTimePeriod(i);int index=getIndex(period);if(index<0){result.add(period);}}}"
253	"public void test(){if(index<0){result.add(period);}}"
254	"public void test(){int index=getIndex(period);if(index>=0){return getValue(index);}else {return null;}}"
255	"public void test(){if(index>=0){return getValue(index);}else {return null;}}"
256	"public void test(){if(!item.getPeriod().getClass().equals(this.timePeriodClass)){StringBuffer b=new StringBuffer();b.append(""You are trying to add data where the time period class "");b.append(""is "");b.append(item.getPeriod().getClass().getName());b.append("", but the TimeSeries is expecting an instance of "");b.append(this.timePeriodClass.getName());b.append(""."");throw new SeriesException(b.toString());}}"
257	"public void test(){if(item.getPeriod().compareTo(last)>0){this.data.add(item);added=true;}else {int index=Collections.binarySearch(this.data,item);if(index<0){this.data.add(-index-1,item);added=true;}else {StringBuffer b=new StringBuffer();b.append(""You are attempting to add an observation for "");b.append(""the time period "");b.append(item.getPeriod().toString());b.append("" but the series already contains an observation"");b.append("" for that time period. Duplicates are not "");b.append(""permitted.  Try using the addOrUpdate() method."");throw new SeriesException(b.toString());}}}"
258	"public void test(){int index=Collections.binarySearch(this.data,item);if(index<0){this.data.add(-index-1,item);added=true;}else {StringBuffer b=new StringBuffer();b.append(""You are attempting to add an observation for "");b.append(""the time period "");b.append(item.getPeriod().toString());b.append("" but the series already contains an observation"");b.append("" for that time period. Duplicates are not "");b.append(""permitted.  Try using the addOrUpdate() method."");throw new SeriesException(b.toString());}}"
259	"public void test(){if(index<0){this.data.add(-index-1,item);added=true;}else {StringBuffer b=new StringBuffer();b.append(""You are attempting to add an observation for "");b.append(""the time period "");b.append(item.getPeriod().toString());b.append("" but the series already contains an observation"");b.append("" for that time period. Duplicates are not "");b.append(""permitted.  Try using the addOrUpdate() method."");throw new SeriesException(b.toString());}}"
260	"public void test(){TimeSeriesDataItem temp=new TimeSeriesDataItem(period,value);int index=Collections.binarySearch(this.data,temp);if(index>=0){TimeSeriesDataItem pair=(TimeSeriesDataItem)this.data.get(index);pair.setValue(value);fireSeriesChanged();}else {throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");}}"
261	"public void test(){if(index>=0){TimeSeriesDataItem pair=(TimeSeriesDataItem)this.data.get(index);pair.setValue(value);fireSeriesChanged();}else {throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");}}"
262	"public void test(){for(int i=0;i<series.getItemCount();i++){TimeSeriesDataItem item=series.getDataItem(i);TimeSeriesDataItem oldItem=addOrUpdate(item.getPeriod(),item.getValue());if(oldItem!=null){overwritten.add(oldItem);}}}"
263	"public void test(){if(index>=0){TimeSeriesDataItem existing=(TimeSeriesDataItem)this.data.get(index);overwritten=(TimeSeriesDataItem)existing.clone();existing.setValue(value);removeAgedItems(false);fireSeriesChanged();}else {this.data.add(-index-1,new TimeSeriesDataItem(period,value));if(getItemCount()>this.maximumItemCount){this.data.remove(0);}removeAgedItems(false);fireSeriesChanged();}}"
264	"public void test(){int index=getIndex(period);if(index>=0){this.data.remove(index);fireSeriesChanged();}}"
265	"public void test(){if(index>=0){this.data.remove(index);fireSeriesChanged();}}"
266	"public void test(){if(!getDataItem(i).equals(s.getDataItem(i))){return false;}}"
267	"public void test(){if(count>0){TimeSeriesDataItem item=getDataItem(0);result=29*result+item.hashCode();}}"
268	"public void test(){if(count>1){TimeSeriesDataItem item=getDataItem(count-1);result=29*result+item.hashCode();}}"
269	"public void test(){if(count>2){TimeSeriesDataItem item=getDataItem(count/2);result=29*result+item.hashCode();}}"
270	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int dom=this.day.getDayOfMonth();calendar.set(year,month,dom,this.hour,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
271	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int dom=this.day.getDayOfMonth();calendar.set(year,month,dom,this.hour,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
272	"public void test(){Calendar c=(Calendar)calendar.clone();c.clear();c.set(Calendar.YEAR,this.year);c.set(Calendar.WEEK_OF_YEAR,this.week);c.set(Calendar.DAY_OF_WEEK,c.getFirstDayOfWeek());c.set(Calendar.HOUR,0);c.set(Calendar.MINUTE,0);c.set(Calendar.SECOND,0);c.set(Calendar.MILLISECOND,0);return c.getTime().getTime();}"
273	"public void test(){Calendar c=(Calendar)calendar.clone();c.clear();c.set(Calendar.YEAR,this.year);c.set(Calendar.WEEK_OF_YEAR,this.week+1);c.set(Calendar.DAY_OF_WEEK,c.getFirstDayOfWeek());c.set(Calendar.HOUR,0);c.set(Calendar.MINUTE,0);c.set(Calendar.SECOND,0);c.set(Calendar.MILLISECOND,0);return c.getTime().getTime()-1;}"
274	"public void test(){ final OHLCItem item=(OHLCItem)getDataItem(index);return item.getPeriod();}"
275	"public void test(){if(getItemCount()>0){OHLCItem item0=(OHLCItem)this.getDataItem(0);if(!period.getClass().equals(item0.getPeriod().getClass())){throw new IllegalArgumentException(""Can\'t mix RegularTimePeriod class types."");}}}"
276	"public void test(){if(!period.getClass().equals(item0.getPeriod().getClass())){throw new IllegalArgumentException(""Can\'t mix RegularTimePeriod class types."");}}"
277	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);RegularTimePeriod period=di.getPeriod();return getX(period);}"
278	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return new Double(di.getYValue());}"
279	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getOpenValue();}"
280	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getCloseValue();}"
281	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getHighValue();}"
282	"public void test(){OHLCSeries s=(OHLCSeries)this.data.get(series);OHLCItem di=(OHLCItem)s.getDataItem(item);return di.getLowValue();}"
283	"public void test(){if(!this.getStart().equals(that.getStart())){return false;}}"
284	"public void test(){if(!this.getEnd().equals(that.getEnd())){return false;}}"
285	"public void test(){calendar.set(this.year,this.month-1,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
286	"public void test(){int eom=SerialDate.lastDayOfMonth(this.month,this.year);calendar.set(this.year,this.month-1,eom,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
287	"public void test(){int year=this.serialDate.getYYYY();int month=this.serialDate.getMonth();int day=this.serialDate.getDayOfMonth();calendar.clear();calendar.set(year,month-1,day,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
288	"public void test(){int year=this.serialDate.getYYYY();int month=this.serialDate.getMonth();int day=this.serialDate.getDayOfMonth();calendar.clear();calendar.set(year,month-1,day,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
289	"public void test(){if((i-offset)>=0){TimeSeriesDataItem item=source.getDataItem(i-offset);RegularTimePeriod p=item.getPeriod();Number v=item.getValue();long currentIndex=p.getSerialIndex();if(currentIndex>serialLimit){if(v!=null){sum=sum+v.doubleValue();n=n+1;}}else {finished=true;}}}"
290	"public void test(){for(int i=0;i<source.getItemCount();i++){TimeSeriesDataItem current=source.getDataItem(i);RegularTimePeriod period=current.getPeriod();rollingSumForPeriod+=current.getValue().doubleValue();if(i>pointCount-1){TimeSeriesDataItem startOfMovingAvg=source.getDataItem(i-pointCount);rollingSumForPeriod-=startOfMovingAvg.getValue().doubleValue();result.add(period,rollingSumForPeriod/pointCount);}else if(i==pointCount-1){result.add(period,rollingSumForPeriod/pointCount);}}}"
291	"public void test(){if(i>pointCount-1){TimeSeriesDataItem startOfMovingAvg=source.getDataItem(i-pointCount);rollingSumForPeriod-=startOfMovingAvg.getValue().doubleValue();result.add(period,rollingSumForPeriod/pointCount);}else if(i==pointCount-1){result.add(period,rollingSumForPeriod/pointCount);}}"
292	"public void test(){invalidateRangeInfo();if(seriesNumber>=this.valueHistory.length){throw new IllegalArgumentException(""TimeSeriesDataset.addValue(): series #""+seriesNumber);}if(this.valueHistory[seriesNumber]==null){this.valueHistory[seriesNumber]=new ValueSequence(this.historyCount);this.seriesCount++;}this.valueHistory[seriesNumber].enterData(index,value);fireSeriesChanged();}"
293	"public void test(){TimePeriod period=(TimePeriod)this.values.getRowKey(item);return period.getStart().getTime();}"
294	"public void test(){TimePeriod period=(TimePeriod)this.values.getRowKey(item);return period.getEnd().getTime();}"
295	"public void test(){if(this.xPosition==TimePeriodAnchor.START){result=period.getStart().getTime();}else if(this.xPosition==TimePeriodAnchor.MIDDLE){long t0=period.getStart().getTime();long t1=period.getEnd().getTime();result=t0+(t1-t0)/2L;}else if(this.xPosition==TimePeriodAnchor.END){result=period.getEnd().getTime();}}"
296	"public void test(){if(this.xPosition==TimePeriodAnchor.MIDDLE){long t0=period.getStart().getTime();long t1=period.getEnd().getTime();result=t0+(t1-t0)/2L;}else if(this.xPosition==TimePeriodAnchor.END){result=period.getEnd().getTime();}}"
297	"public void test(){if(this.xPosition==TimePeriodAnchor.END){result=period.getEnd().getTime();}}"
298	"public void test(){if(!includeInterval||this.domainIsPointsInTime){return new Range(getXValue(first),getXValue(last));}else {return new Range(first.getStart().getTime(),last.getEnd().getTime());}}"
299	"public void test(){if(item==null){throw new IllegalArgumentException(""Null item not allowed."");}this.data.add(item);updateBounds(item.getPeriod(),this.data.size()-1);fireSeriesChanged();}"
300	"public void test(){long start=period.getStart().getTime();long end=period.getEnd().getTime();long middle=start+((end-start)/2);if(this.minStartIndex>=0){long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();if(start<minStart){this.minStartIndex=index;}}else {this.minStartIndex=index;}}"
301	"public void test(){if(this.minStartIndex>=0){long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();if(start<minStart){this.minStartIndex=index;}}else {this.minStartIndex=index;}}"
302	"public void test(){if(start<minStart){this.minStartIndex=index;}}"
303	"public void test(){if(this.maxStartIndex>=0){long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();if(start>maxStart){this.maxStartIndex=index;}}else {this.maxStartIndex=index;}}"
304	"public void test(){if(start>maxStart){this.maxStartIndex=index;}}"
305	"public void test(){if(this.minMiddleIndex>=0){long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();long minMiddle=s+(e-s)/2;if(middle<minMiddle){this.minMiddleIndex=index;}}else {this.minMiddleIndex=index;}}"
306	"public void test(){if(middle<minMiddle){this.minMiddleIndex=index;}}"
307	"public void test(){if(this.maxMiddleIndex>=0){long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();long maxMiddle=s+(e-s)/2;if(middle>maxMiddle){this.maxMiddleIndex=index;}}else {this.maxMiddleIndex=index;}}"
308	"public void test(){if(middle>maxMiddle){this.maxMiddleIndex=index;}}"
309	"public void test(){if(this.minEndIndex>=0){long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();if(end<minEnd){this.minEndIndex=index;}}else {this.minEndIndex=index;}}"
310	"public void test(){if(end<minEnd){this.minEndIndex=index;}}"
311	"public void test(){if(this.maxEndIndex>=0){long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();if(end>maxEnd){this.maxEndIndex=index;}}else {this.maxEndIndex=index;}}"
312	"public void test(){if(end>maxEnd){this.maxEndIndex=index;}}"
313	"public void test(){if(!getDataItem(i).equals(that.getDataItem(i))){return false;}}"
314	"public void test(){int result;result=(this.domain!=null?this.domain.hashCode():0);result=29*result+(this.range!=null?this.range.hashCode():0);result=29*result+this.data.hashCode();result=29*result+this.minStartIndex;result=29*result+this.maxStartIndex;result=29*result+this.minMiddleIndex;result=29*result+this.maxMiddleIndex;result=29*result+this.minEndIndex;result=29*result+this.maxEndIndex;return result;}"
315	"public void test(){int month=Quarter.FIRST_MONTH_IN_QUARTER[this.quarter];calendar.set(this.year,month-1,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
316	"public void test(){int month=Quarter.LAST_MONTH_IN_QUARTER[this.quarter];int eom=SerialDate.lastDayOfMonth(month,this.year);calendar.set(this.year,month-1,eom,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
317	"public void test(){ final Calendar calendar=Calendar.getInstance();calendar.set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);return calendar.getTime();}"
318	"public void test(){TimePeriodValues series=getSeries(index);if(series!=null){removeSeries(series);}}"
319	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);TimePeriod period=dp.getPeriod();return new Long(getX(period));}"
320	"public void test(){if(this.xPosition==TimePeriodAnchor.START){return period.getStart().getTime();}else if(this.xPosition==TimePeriodAnchor.MIDDLE){return period.getStart().getTime()/2+period.getEnd().getTime()/2;}else if(this.xPosition==TimePeriodAnchor.END){return period.getEnd().getTime();}else {throw new IllegalStateException(""TimePeriodAnchor unknown."");}}"
321	"public void test(){if(this.xPosition==TimePeriodAnchor.MIDDLE){return period.getStart().getTime()/2+period.getEnd().getTime()/2;}else if(this.xPosition==TimePeriodAnchor.END){return period.getEnd().getTime();}else {throw new IllegalStateException(""TimePeriodAnchor unknown."");}}"
322	"public void test(){if(this.xPosition==TimePeriodAnchor.END){return period.getEnd().getTime();}else {throw new IllegalStateException(""TimePeriodAnchor unknown."");}}"
323	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return new Long(dp.getPeriod().getStart().getTime());}"
324	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return new Long(dp.getPeriod().getEnd().getTime());}"
325	"public void test(){TimePeriodValues ts=(TimePeriodValues)this.data.get(series);TimePeriodValue dp=ts.getDataItem(item);return dp.getValue();}"
326	"public void test(){if(this.xPosition==TimePeriodAnchor.MIDDLE){TimePeriod minMiddle=series.getTimePeriod(series.getMinMiddleIndex());long s1=minMiddle.getStart().getTime();long e1=minMiddle.getEnd().getTime();TimePeriod maxMiddle=series.getTimePeriod(series.getMaxMiddleIndex());long s2=maxMiddle.getStart().getTime();long e2=maxMiddle.getEnd().getTime();temp=new Range(s1+(e1-s1)/2,s2+(e2-s2)/2);}else if(this.xPosition==TimePeriodAnchor.END){TimePeriod minEnd=series.getTimePeriod(series.getMinEndIndex());temp=new Range(minEnd.getEnd().getTime(),end.getEnd().getTime());}}"
327	"public void test(){if(this.xPosition==TimePeriodAnchor.END){TimePeriod minEnd=series.getTimePeriod(series.getMinEndIndex());temp=new Range(minEnd.getEnd().getTime(),end.getEnd().getTime());}}"
328	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,this.second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
329	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
330	"public void test(){int year=this.day.getYear();int month=this.day.getMonth()-1;int day=this.day.getDayOfMonth();calendar.clear();calendar.set(year,month,day,this.hour,this.minute,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"
331	"public void test(){if(o1 instanceof TimeSeriesDataItem){TimeSeriesDataItem datapair=(TimeSeriesDataItem)o1;result=getPeriod().compareTo(datapair.getPeriod());}else {result=1;}}"
332	"public void test(){TimeSeries series=getSeries(index);if(series!=null){removeSeries(series);}}"
333	"public void test(){TimeSeries s=(TimeSeries)this.data.get(series);TimeSeriesDataItem i=s.getDataItem(item);RegularTimePeriod period=i.getPeriod();return getX(period);}"
334	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);TimeSeriesDataItem dp=ts.getDataItem(item);RegularTimePeriod period=dp.getPeriod();return new Long(getX(period));}"
335	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);TimeSeriesDataItem dp=ts.getDataItem(item);return new Long(dp.getPeriod().getFirstMillisecond(this.workingCalendar));}"
336	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);TimeSeriesDataItem dp=ts.getDataItem(item);return new Long(dp.getPeriod().getLastMillisecond(this.workingCalendar));}"
337	"public void test(){TimeSeries ts=(TimeSeries)this.data.get(series);TimeSeriesDataItem dp=ts.getDataItem(item);return dp.getValue();}"
338	"public void test(){calendar.set(this.year,Calendar.JANUARY,1,0,0,0);calendar.set(Calendar.MILLISECOND,0);return calendar.getTime().getTime();}"
339	"public void test(){calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);calendar.set(Calendar.MILLISECOND,999);return calendar.getTime().getTime();}"