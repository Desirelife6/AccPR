1	"public void test(){int sum=0;for(int i=0;i<pointSet.size();i++){ final T p=pointSet.get(i); final Cluster<T> nearest=getNearestCluster(resultSet,p); final double d=p.distanceFrom(nearest.getCenter());sum+=d*d;dx2[i]=sum;}}"
2	"public void test(){double ret=1;double d=denominatorDegreesOfFreedom;if(d>2){ret=d/(d-2);}return ret;}"
3	"public void test(){if(d>2){ret=d/(d-2);}}"
4	"public void test(){double d=x-mu;double v=d/(x+mu);double s1=v*d;double s=Double.NaN;double ej=2.0*x;v=v*v;int j=1;while(s1!=s){s=s1;ej*=v;s1=s+ej/((j*2)+1);++j;}}"
5	"public void test(){for(int i=0;i<sampleSize;i++){out[i]=sample();}}"
6	"public void test(){for(int i=0;i<buf.length;i++){buf[i]=a.charAt(i);if(buf[i]>='1'&&buf[i]<='9'){leading=false;}if(buf[i]=='.'){sig+=(400-sig)%4;leading=false;}if(sig==(field.getRadixDigits()/2)*4){sp=i;break;}if(buf[i]>='0'&&buf[i]<='9'&&!leading){sig++;}}}"
7	"public void test(){buf[i]=a.charAt(i);if(buf[i]>='1'&&buf[i]<='9'){leading=false;}if(buf[i]=='.'){sig+=(400-sig)%4;leading=false;}if(sig==(field.getRadixDigits()/2)*4){sp=i;break;}}"
8	"public void test(){if(buf[i]>='1'&&buf[i]<='9'){leading=false;}}"
9	"public void test(){if(buf[i]=='.'){sig+=(400-sig)%4;leading=false;}}"
10	"public void test(){if(sig==(field.getRadixDigits()/2)*4){sp=i;break;}}"
11	"public void test(){if(buf[i]>='0'&&buf[i]<='9'&&!leading){sig++;}}"
12	"public void test(){for(int i=0;i<buf.length;i++){buf[i]=a.charAt(i);if(buf[i]>='0'&&buf[i]<='9'&&i<sp){buf[i]='0';}}}"
13	"public void test(){if(buf[i]>='0'&&buf[i]<='9'&&i<sp){buf[i]='0';}}"
14	"public void test(){for(int i=1;i<90;i++){x=x.multiply(a);fact=fact.divide(i);y=y.add(x.multiply(fact));if(y.equals(py)){break;}py=new Dfp(y);}}"
15	"public void test(){for(int i=0;i<10000;i++){num=num.multiply(x);num=num.multiply(x);den=den+2;t=num.divide(den);y=y.add(t);if(y.equals(py)){break;}py=new Dfp(y);}}"
16	"public void test(){for(int i=3;i<90;i+=2){x=x.multiply(c);x=x.negate();fact=fact.divide((i-1)*i);y=y.add(x.multiply(fact));if(y.equals(py))break;py=new Dfp(y);}}"
17	"public void test(){for(int i=2;i<90;i+=2){x=x.multiply(c);x=x.negate();fact=fact.divide((i-1)*i);y=y.add(x.multiply(fact));if(y.equals(py)){break;}py=new Dfp(y);}}"
18	"public void test(){for(int i=3;i<90;i+=2){x=x.multiply(a);x=x.multiply(a);x=x.negate();y=y.add(x.divide(i));if(y.equals(py)){break;}py=new Dfp(y);}}"
19	"public void test(){for(int i=0;i<buf.length;i++){buf[i]=a.charAt(i);if(buf[i]>='1'&&buf[i]<='9'){leading=false;}if(buf[i]=='.'){sig+=(400-sig)%4;leading=false;}if(sig==(radixDigits/2)*4){sp=i;break;}if(buf[i]>='0'&&buf[i]<='9'&&!leading){sig++;}}}"
20	"public void test(){buf[i]=a.charAt(i);if(buf[i]>='1'&&buf[i]<='9'){leading=false;}if(buf[i]=='.'){sig+=(400-sig)%4;leading=false;}if(sig==(radixDigits/2)*4){sp=i;break;}}"
21	"public void test(){if(sig==(radixDigits/2)*4){sp=i;break;}}"
22	"public void test(){for(int i=1;i<20;i++){ final Dfp ykM1=yk; final Dfp y2=yk.multiply(yk); final Dfp oneMinusY4=one.subtract(y2.multiply(y2)); final Dfp s=oneMinusY4.sqrt().sqrt();yk=one.subtract(s).divide(one.add(s));two2kp3=two2kp3.multiply(four); final Dfp p=one.add(yk); final Dfp p2=p.multiply(p);ak=ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));if(yk.equals(ykM1)){break;}}}"
23	"public void test(){for(int i=0;i<10000;i++){x=x.multiply(a);y=y.add(x.divide(f));fi=fi.add(one);f=f.multiply(fi);if(y.equals(py)){break;}py=new Dfp(y);}}"
24	"public void test(){for(int i=0;i<10000;i++){num=num.multiply(x);num=num.multiply(x);den=den+2;Dfp t=num.divide(den);y=y.add(t);if(y.equals(py)){break;}py=new Dfp(y);}}"
25	"public void test(){for(int i=0;i<mant.length-1;i++){if(mant[i]!=0){mant[i]++;break;}}}"
26	"public void test(){if(mant[i]!=0){mant[i]++;break;}}"
27	"public void test(){for(int i=0;i<fpexp.length();i++){if(fpexp.charAt(i)=='-'){negative=true;continue;}if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9')sciexp=sciexp*10+fpexp.charAt(i)-'0';}}"
28	"public void test(){if(fpexp.charAt(i)=='-'){negative=true;continue;}}"
29	"public void test(){int trailingZeros=0;while(p>q){if(striped[p]!='0'){break;}trailingZeros++;p--;}int i=((rsize*100)-decimalPos)%rsize;q-=i;decimalPos+=i;}"
30	"public void test(){while(p>q){if(striped[p]!='0'){break;}trailingZeros++;p--;}int i=((rsize*100)-decimalPos)%rsize;q-=i;decimalPos+=i;while((p-q)<(mant.length*rsize)){for(i=0;i<rsize;i++){striped[++p]='0';}}}"
31	"public void test(){int i=((rsize*100)-decimalPos)%rsize;q-=i;decimalPos+=i;while((p-q)<(mant.length*rsize)){for(i=0;i<rsize;i++){striped[++p]='0';}}for(i=mant.length-1;i>=0;i--){mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');q+=4;}}"
32	"public void test(){for(i=0;i<rsize;i++){striped[++p]='0';}}"
33	"public void test(){for(i=mant.length-1;i>=0;i--){mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');q+=4;}}"
34	"public void test(){for(int i=mant.length-1;i>0;i--){mant[i]=mant[i-1];}}"
35	"public void test(){for(int i=0;i<mant.length-1;i++){mant[i]=mant[i+1];}}"
36	"public void test(){for(int i=0;i<adiff;i++){if(diff<0){if(lostdigit!=0){inexact=true;}lostdigit=mant[0];shiftRight();}else {shiftLeft();}}}"
37	"public void test(){for(int i=a.mant.length-1;i>=0;i--){if(a.mant[i]>b.mant[i]){return a.sign;}if(a.mant[i]<b.mant[i]){return -a.sign;}}}"
38	"public void test(){if(a.mant[i]>b.mant[i]){return a.sign;}}"
39	"public void test(){if(a.mant[i]<b.mant[i]){return -a.sign;}}"
40	"public void test(){for(int i=0;i<mant.length-result.exp;i++){changed|=result.mant[i]!=0;result.mant[i]=0;}}"
41	"public void test(){for(int i=mant.length-1;i>=mant.length-rounded.exp;i--){result=result*RADIX+rounded.mant[i];}}"
42	"public void test(){for(int i=0;i<mant.length;i++){mant[i]=RADIX-mant[i];}}"
43	"public void test(){for(int i=0;i<mant.length;i++){ final int r=mant[i]+rh;rh=r/RADIX;mant[i]=r-rh*RADIX;}}"
44	"public void test(){for(int i=0;i<mant.length;i++){ final int r=a.mant[i]+b.mant[i];rh=r/RADIX;result.mant[i]=r-rh*RADIX;}}"
45	"public void test(){for(int i=0;i<mant.length;i++){if(result.mant[mant.length-1]!=0){break;}result.shiftLeft();if(i==0){result.mant[0]=aextradigit+bextradigit;aextradigit=0;bextradigit=0;}}}"
46	"public void test(){if(i==0){result.mant[0]=aextradigit+bextradigit;aextradigit=0;bextradigit=0;}}"
47	"public void test(){for(int i=0;i<mant.length;i++){int rh=0;for(int j=0;j<mant.length;j++){int r=mant[i]*x.mant[j];r=r+product[i+j];rh=r/RADIX;product[i+j]=r-rh*RADIX;}product[i+mant.length]=rh;}}"
48	"public void test(){for(int j=0;j<mant.length;j++){int r=mant[i]*x.mant[j];r=r+product[i+j];rh=r/RADIX;product[i+j]=r-rh*RADIX;}}"
49	"public void test(){for(int i=mant.length*2-1;i>=0;i--){if(product[i]!=0){md=i;break;}}}"
50	"public void test(){if(product[i]!=0){md=i;break;}}"
51	"public void test(){for(int i=0;i<mant.length;i++){result.mant[mant.length-i]=product[md-i];}}"
52	"public void test(){for(int i=0;i<mant.length;i++){ final int r=mant[i]*x+rh;rh=r/RADIX;result.mant[i]=r-rh*RADIX;}}"
53	"public void test(){for(int i=0;i<mant.length;i++){dividend[i]=mant[i];quotient[i]=0;remainder[i]=0;}}"
54	"public void test(){for(int i=0;i<mant.length+1;i++){int dm=(i<mant.length)?divisor.mant[i]:0; final int r=(dm*trial)+rh;rh=r/RADIX;remainder[i]=r-rh*RADIX;}}"
55	"public void test(){for(int i=0;i<mant.length+1;i++){ final int r=((RADIX-1)-remainder[i])+dividend[i];rh=r/RADIX;remainder[i]=r-rh*RADIX;}}"
56	"public void test(){for(int i=mant.length-1;i>=0;i--){if(divisor.mant[i]>remainder[i]){trialgood=true;}if(divisor.mant[i]<remainder[i]){break;}}}"
57	"public void test(){if(divisor.mant[i]>remainder[i]){trialgood=true;}}"
58	"public void test(){if(divisor.mant[i]<remainder[i]){break;}}"
59	"public void test(){for(int i=0;i<mant.length;i++){dividend[i+1]=remainder[i];}}"
60	"public void test(){for(int i=mant.length+1;i>=0;i--){if(quotient[i]!=0){md=i;break;}}}"
61	"public void test(){if(quotient[i]!=0){md=i;break;}}"
62	"public void test(){for(int i=0;i<mant.length;i++){result.mant[mant.length-i]=quotient[md-i];}}"
63	"public void test(){for(int i=mant.length-1;i>=0;i--){ final int r=rl*RADIX+result.mant[i]; final int rh=r/divisor;rl=r-rh*divisor;result.mant[i]=rh;}}"
64	"public void test(){for(int i=mant.length-1;i>=0;i--){rawdigits[p++]=(char)((mant[i]/1000)+'0');rawdigits[p++]=(char)(((mant[i]/100)%10)+'0');rawdigits[p++]=(char)(((mant[i]/10)%10)+'0');rawdigits[p++]=(char)(((mant[i])%10)+'0');}}"
65	"public void test(){for(int i=mant.length-1;i>=0;i--){buffer[p++]=(char)((mant[i]/1000)+'0');buffer[p++]=(char)(((mant[i]/100)%10)+'0');buffer[p++]=(char)(((mant[i]/10)%10)+'0');buffer[p++]=(char)(((mant[i])%10)+'0');if(--e==0){buffer[p++]='.';pointInserted=true;}}}"
66	"public void test(){for(int i=0;i<lsbshift%4;i++){lsbthreshold*=10;}}"
67	"public void test(){for(int i=0;i<lsd;i++){discarded|=mant[i];mant[i]=0;}}"
68	"public void test(){for(int i=lsd;i<mant.length;i++){ final int r=mant[i]+rh;rh=r/RADIX;mant[i]=r%RADIX;}}"
69	"public void test(){int l=sequence.size();if(representation.size()!=l){throw new IllegalArgumentException(String.format(""Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)"",l,representation.size()));}if(representation.size()!=sortedRepr.size()){throw new IllegalArgumentException(String.format(""Representation and sortedRepr must have same sizes, %d != %d"",representation.size(),sortedRepr.size()));}List<Double> reprCopy=new ArrayList<Double>(representation);List<S> res=new ArrayList<S>(l);for(int i=0;i<l;i++){int index=reprCopy.indexOf(sortedRepr.get(i));res.add(sequence.get(index));reprCopy.set(index,null);}}"
70	"public void test(){if(representation.size()!=l){throw new IllegalArgumentException(String.format(""Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)"",l,representation.size()));}}"
71	"public void test(){if(representation.size()!=sortedRepr.size()){throw new IllegalArgumentException(String.format(""Representation and sortedRepr must have same sizes, %d != %d"",representation.size(),sortedRepr.size()));}}"
72	"public void test(){for(int i=0;i<l;i++){int index=reprCopy.indexOf(sortedRepr.get(i));res.add(sequence.get(index));reprCopy.set(index,null);}}"
73	"public void test(){for(int i=0;i<getLength();i++){if(thisPerm.get(i)!=anotherPerm.get(i))return false;}}"
74	"public void test(){for(int i=0;i<l;i++){repr.add(GeneticAlgorithm.getRandomGenerator().nextDouble());}}"
75	"public void test(){for(int i=0;i<l;i++){repr.add((double)i/l);}}"
76	"public void test(){if(originalData.size()!=permutedData.size()){throw new IllegalArgumentException(""originalData and permutedData must have same length"");}}"
77	"public void test(){if(originalData.size()!=permutedData.size()){throw new IllegalArgumentException(""originalData and permutedData must have same length"");}int l=originalData.size();List<S> origDataCopy=new ArrayList<S>(originalData);Double[] res=new Double[l];for(int i=0;i<l;i++){int index=origDataCopy.indexOf(permutedData.get(i));if(index==-1){throw new IllegalArgumentException(""originalData and permutedData must contain the same objects."");}res[index]=(double)i/l;origDataCopy.set(index,null);}}"
78	"public void test(){for(int i=0;i<l;i++){int index=origDataCopy.indexOf(permutedData.get(i));if(index==-1){throw new IllegalArgumentException(""originalData and permutedData must contain the same objects."");}res[index]=(double)i/l;origDataCopy.set(index,null);}}"
79	"public void test(){for(int i=0;i<l;i++){baseSequence.add(i);}}"
80	"public void test(){for(int i=0;i<crossoverIndex;i++){child1Rep.add(parent1Rep.get(i));child2Rep.add(parent2Rep.get(i));}}"
81	"public void test(){for(int i=crossoverIndex;i<length;i++){child1Rep.add(parent2Rep.get(i));child2Rep.add(parent1Rep.get(i));}}"
82	"public void test(){for(int i : chromosomeRepresentation){if(i<0||i>1)throw new InvalidRepresentationException(""Elements can be only 0 or 1."");}}"
83	"public void test(){for(int i=0;i<getRepresentation().size();i++){if(!(getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))))return false;}}"
84	"public void test(){if(chromosomes.size()>populationLimit){throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,chromosomes.size(),populationLimit,false);}}"
85	"public void test(){Chromosome bestChromosome=this.chromosomes.get(0);for(Chromosome chromosome : this.chromosomes){if(chromosome.compareTo(bestChromosome)>0){bestChromosome=chromosome;}}return bestChromosome;}"
86	"public void test(){if(!(original instanceof RandomKey<?>)){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS,original.getClass().getSimpleName());}RandomKey<?> originalRk=(RandomKey<?>)original;List<Double> repr=originalRk.getRepresentation();int rInd=GeneticAlgorithm.getRandomGenerator().nextInt(repr.size());List<Double> newRepr=new ArrayList<Double>(repr);newRepr.set(rInd,GeneticAlgorithm.getRandomGenerator().nextDouble());return originalRk.newFixedLengthChromosome(newRepr);}"
87	"public void test(){for(int i=0;i<this.arity;i++){int rind=GeneticAlgorithm.getRandomGenerator().nextInt(chromosomes.size());tournamentPopulation.addChromosome(chromosomes.get(rind));chromosomes.remove(rind);}}"
88	"public void test(){if(!(original instanceof BinaryChromosome)){throw new IllegalArgumentException(""Binary mutation works on BinaryChromosome only."");}BinaryChromosome origChrom=(BinaryChromosome)original;List<Integer> newRepr=new ArrayList<Integer>(origChrom.getRepresentation());int geneIndex=GeneticAlgorithm.getRandomGenerator().nextInt(origChrom.getLength());newRepr.set(geneIndex,origChrom.getRepresentation().get(geneIndex)==0?1:0);Chromosome newChrom=origChrom.newFixedLengthChromosome(newRepr);return newChrom;}"
89	"public void test(){ElitisticListPopulation nextGeneration=new ElitisticListPopulation(this.getPopulationLimit(),this.getElitismRate());List<Chromosome> oldChromosomes=this.getChromosomes();Collections.sort(oldChromosomes);int boundIndex=(int)FastMath.ceil((1.0-this.getElitismRate())*oldChromosomes.size());for(int i=boundIndex;i<oldChromosomes.size();i++){nextGeneration.addChromosome(oldChromosomes.get(i));}return nextGeneration;}"
90	"public void test(){for(int i=boundIndex;i<oldChromosomes.size();i++){nextGeneration.addChromosome(oldChromosomes.get(i));}}"
91	"public void test(){if(model.steps.size()==0){return ;}}"
92	"public void test(){if(steps.size()==0){initialTime=model.initialTime;forward=model.forward;}else {if(getInterpolatedState().length!=model.getInterpolatedState().length){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,getInterpolatedState().length,model.getInterpolatedState().length);}if(forward^model.forward){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);} final StepInterpolator lastInterpolator=steps.get(index); final double current=lastInterpolator.getCurrentTime(); final double previous=lastInterpolator.getPreviousTime(); final double step=current-previous; final double gap=model.getInitialTime()-current;if(FastMath.abs(gap)>0.001*FastMath.abs(step)){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));}}}"
93	"public void test(){if(getInterpolatedState().length!=model.getInterpolatedState().length){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,getInterpolatedState().length,model.getInterpolatedState().length);}if(forward^model.forward){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);} final StepInterpolator lastInterpolator=steps.get(index); final double current=lastInterpolator.getCurrentTime(); final double previous=lastInterpolator.getPreviousTime(); final double step=current-previous;}"
94	"public void test(){if(steps.size()==0){initialTime=interpolator.getPreviousTime();forward=interpolator.isForward();}}"
95	"public void test(){if(isLast){finalTime=interpolator.getCurrentTime();index=steps.size()-1;}}"
96	"public void test(){int iMin=0; final StepInterpolator sMin=steps.get(iMin);double tMin=0.5*(sMin.getPreviousTime()+sMin.getCurrentTime());int iMax=steps.size()-1; final StepInterpolator sMax=steps.get(iMax);double tMax=0.5*(sMax.getPreviousTime()+sMax.getCurrentTime());if(locatePoint(time,sMin)<=0){index=iMin;sMin.setInterpolatedTime(time);return ;}}"
97	"public void test(){double tMin=0.5*(sMin.getPreviousTime()+sMin.getCurrentTime());int iMax=steps.size()-1; final StepInterpolator sMax=steps.get(iMax);double tMax=0.5*(sMax.getPreviousTime()+sMax.getCurrentTime());if(locatePoint(time,sMin)<=0){index=iMin;sMin.setInterpolatedTime(time);return ;}}"
98	"public void test(){ final StepInterpolator si=steps.get(index); final int location=locatePoint(time,si);if(location<0){iMax=index;tMax=0.5*(si.getPreviousTime()+si.getCurrentTime());}else if(location>0){iMin=index;tMin=0.5*(si.getPreviousTime()+si.getCurrentTime());}else {si.setInterpolatedTime(time);return ;}}"
99	"public void test(){if(location<0){iMax=index;tMax=0.5*(si.getPreviousTime()+si.getCurrentTime());}else if(location>0){iMin=index;tMin=0.5*(si.getPreviousTime()+si.getCurrentTime());}else {si.setInterpolatedTime(time);return ;} final int iMed=(iMin+iMax)/2; final StepInterpolator sMed=steps.get(iMed); final double tMed=0.5*(sMed.getPreviousTime()+sMed.getCurrentTime());}"
100	"public void test(){while((index<=iMax)&&(locatePoint(time,steps.get(index))>0)){++index;}}"
101	"public void test(){for(int i=0;i<interpolatedState.length;++i){interpolatedState[i]=currentState[i]-oneMinusThetaH*yDotK[0][i];}}"
102	"public void test(){for(int i=0;i<interpolatedState.length;++i){ final double yDot0=yDotK[0][i]; final double yDot2=yDotK[2][i]; final double yDot3=yDotK[3][i]; final double yDot4=yDotK[4][i]; final double yDot5=yDotK[5][i]; final double yDot6=yDotK[6][i];v1[i]=A70*yDot0+A72*yDot2+A73*yDot3+A74*yDot4+A75*yDot5;v2[i]=yDot0-v1[i];v3[i]=v1[i]-v2[i];v4[i]=D0*yDot0+D2*yDot2+D3*yDot3+D4*yDot4+D5*yDot5+D6*yDot6;}}"
103	"public void test(){for(int i=0;i<interpolatedState.length;++i){interpolatedState[i]=currentState[i]-oneMinusThetaH*(v1[i]-theta*(v2[i]+theta*(v3[i]+eta*v4[i])));interpolatedDerivatives[i]=v1[i]+dot2*v2[i]+dot3*v3[i]+dot4*v4[i];}}"
104	"public void test(){for(int i=shiftedP.length-1;i>0;--i){shiftedP[i]=shiftedP[i-1];}}"
105	"public void test(){for(int i=0;i<nSteps;++i){c1[i]=bigC1[i].doubleValue();}}"
106	"public void test(){synchronized(CACHE){AdamsNordsieckTransformer t=CACHE.get(nSteps);if(t==null){t=new AdamsNordsieckTransformer(nSteps);CACHE.put(nSteps,t);}return t;}}"
107	"public void test(){for(int i=0;i<pData.length;++i){ final BigFraction[] pI=pData[i]; final int factor=-(i+1);int aj=factor;for(int j=0;j<pI.length;++j){pI[j]=new BigFraction(aj*(j+2));aj*=factor;}}}"
108	"public void test(){for(int i=0;i<multistep.length;++i){ final double[] msI=multistep[i];for(int j=0;j<first.length;++j){msI[j]-=first[j];}}}"
109	"public void test(){for(int i=0;i<data.length;++i){ final double[] dataI=data[i]; final double c1I=c1[i];for(int j=0;j<dataI.length;++j){dataI[j]+=c1I*(start[j]-end[j]);}}}"
110	"public void test(){for(int i=0;i<interpolatedState.length;++i){ final double yDot1=yDotK[0][i]; final double yDot2=yDotK[1][i];interpolatedState[i]=currentState[i]+coeff1*yDot1-coeff2*yDot2;interpolatedDerivatives[i]=coeffDot1*yDot1+coeffDot2*yDot2;}}"
111	"public void test(){for(int i=0;i<stages;++i){yDotK[i]=new double[y0.length];}}"
112	"public void test(){ final double yDot1=yDotK[0][i]; final double yDot6=yDotK[5][i]; final double yDot7=yDotK[6][i]; final double yDot8=yDotK[7][i]; final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i];}"
113	"public void test(){ final double yDot1=yDotK[0][i]; final double yDot6=yDotK[5][i]; final double yDot7=yDotK[6][i]; final double yDot8=yDotK[7][i]; final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i];}"
114	"public void test(){ final double yDot6=yDotK[5][i]; final double yDot7=yDotK[6][i]; final double yDot8=yDotK[7][i]; final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i];}"
115	"public void test(){ final double yDot7=yDotK[6][i]; final double yDot8=yDotK[7][i]; final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i];}"
116	"public void test(){ final double yDot8=yDotK[7][i]; final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];}"
117	"public void test(){ final double yDot9=yDotK[8][i]; final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];v[0][i]=B_01*yDot1+B_06*yDot6+B_07*yDot7+B_08*yDot8+B_09*yDot9+B_10*yDot10+B_11*yDot11+B_12*yDot12;}"
118	"public void test(){ final double yDot10=yDotK[9][i]; final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];v[0][i]=B_01*yDot1+B_06*yDot6+B_07*yDot7+B_08*yDot8+B_09*yDot9+B_10*yDot10+B_11*yDot11+B_12*yDot12;v[1][i]=yDot1-v[0][i];}"
119	"public void test(){ final double yDot11=yDotK[10][i]; final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];v[0][i]=B_01*yDot1+B_06*yDot6+B_07*yDot7+B_08*yDot8+B_09*yDot9+B_10*yDot10+B_11*yDot11+B_12*yDot12;v[1][i]=yDot1-v[0][i];v[2][i]=v[0][i]-v[1][i];}"
120	"public void test(){ final double yDot12=yDotK[11][i]; final double yDot13=yDotK[12][i]; final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];v[0][i]=B_01*yDot1+B_06*yDot6+B_07*yDot7+B_08*yDot8+B_09*yDot9+B_10*yDot10+B_11*yDot11+B_12*yDot12;v[1][i]=yDot1-v[0][i];v[2][i]=v[0][i]-v[1][i];for(int k=0;k<D.length;++k){v[k+3][i]=D[k][0]*yDot1+D[k][1]*yDot6+D[k][2]*yDot7+D[k][3]*yDot8+D[k][4]*yDot9+D[k][5]*yDot10+D[k][6]*yDot11+D[k][7]*yDot12+D[k][8]*yDot13+D[k][9]*yDot14+D[k][10]*yDot15+D[k][11]*yDot16;}}"
121	"public void test(){ final double yDot14=yDotKLast[0][i]; final double yDot15=yDotKLast[1][i]; final double yDot16=yDotKLast[2][i];v[0][i]=B_01*yDot1+B_06*yDot6+B_07*yDot7+B_08*yDot8+B_09*yDot9+B_10*yDot10+B_11*yDot11+B_12*yDot12;v[1][i]=yDot1-v[0][i];v[2][i]=v[0][i]-v[1][i];for(int k=0;k<D.length;++k){v[k+3][i]=D[k][0]*yDot1+D[k][1]*yDot6+D[k][2]*yDot7+D[k][3]*yDot8+D[k][4]*yDot9+D[k][5]*yDot10+D[k][6]*yDot11+D[k][7]*yDot12+D[k][8]*yDot13+D[k][9]*yDot14+D[k][10]*yDot15+D[k][11]*yDot16;}}"
122	"public void test(){for(int k=0;k<D.length;++k){v[k+3][i]=D[k][0]*yDot1+D[k][1]*yDot6+D[k][2]*yDot7+D[k][3]*yDot8+D[k][4]*yDot9+D[k][5]*yDot10+D[k][6]*yDot11+D[k][7]*yDot12+D[k][8]*yDot13+D[k][9]*yDot14+D[k][10]*yDot15+D[k][11]*yDot16;}}"
123	"public void test(){for(int i=0;i<interpolatedState.length;++i){interpolatedState[i]=currentState[i]-oneMinusThetaH*(v[0][i]-theta*(v[1][i]+theta*(v[2][i]+eta*(v[3][i]+theta*(v[4][i]+eta*(v[5][i]+theta*(v[6][i])))))));interpolatedDerivatives[i]=v[0][i]+dot1*v[1][i]+dot2*v[2][i]+dot3*v[3][i]+dot4*v[4][i]+dot5*v[5][i]+dot6*v[6][i];}}"
124	"public void test(){for(int i=0;i<dimension;++i){out.writeDouble(yDotKLast[0][i]);out.writeDouble(yDotKLast[1][i]);out.writeDouble(yDotKLast[2][i]);}}"
125	"public void test(){for(int i=0;i<dimension;++i){yDotKLast[0][i]=in.readDouble();yDotKLast[1][i]=in.readDouble();yDotKLast[2][i]=in.readDouble();}}"
126	"public void test(){for(int i=0;i<n;++i){out.writeDouble(yDotK[k][i]);}}"
127	"public void test(){for(int i=0;i<n;++i){yDotK[k][i]=in.readDouble();}}"
128	"public void test(){for(int i=0;i<interpolatedState.length;++i){ final double yDot1=yDotK[0][i]; final double yDot2=yDotK[1][i]; final double yDot3=yDotK[2][i]; final double yDot4=yDotK[3][i];interpolatedState[i]=currentState[i]-coeff1*yDot1-coeff2*yDot2-coeff3*yDot3-coeff4*yDot4;interpolatedDerivatives[i]=coeffDot1*yDot1+coeffDot2*yDot2+coeffDot3*yDot3+coeffDot4*yDot4;}}"
129	"public void test(){for(int i=0;i<interpolatedState.length;++i){ final double yDot0=yDotK[0][i]; final double yDot2=yDotK[2][i]; final double yDot3=yDotK[3][i]; final double yDot4=yDotK[4][i]; final double yDot5=yDotK[5][i];interpolatedState[i]=currentState[i]+b0*yDot0+b2*yDot2+b3*yDot3+b4*yDot4+b5*yDot5;interpolatedDerivatives[i]=bDot0*yDot0+bDot2*yDot2+bDot3*yDot3+bDot4*yDot4+bDot5*yDot5;}}"
130	"public void test(){for(int i=0;i<scale.length;++i){scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);}}"
131	"public void test(){for(int i=0;i<scale.length;++i){scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);}}"
132	"public void test(){for(int i=0;i<interpolatedState.length;++i){ final double yDot1=yDotK[0][i]; final double yDot23=yDotK[1][i]+yDotK[2][i]; final double yDot4=yDotK[3][i];interpolatedState[i]=currentState[i]+coeff1*yDot1+coeff23*yDot23+coeff4*yDot4;interpolatedDerivatives[i]=coeffDot1*yDot1+coeffDot23*yDot23+coeffDot4*yDot4;}}"
133	"public void test(){if((sequence==null)||(sequence.length!=size)){sequence=new int[size];costPerStep=new int[size];coeff=new double[size][];costPerTimeUnit=new double[size];optimalStep=new double[size];}}"
134	"public void test(){for(int k=0;k<size;++k){sequence[k]=4*k+2;}}"
135	"public void test(){for(int k=0;k<size;++k){sequence[k]=2*(k+1);}}"
136	"public void test(){for(int k=1;k<size;++k){costPerStep[k]=costPerStep[k-1]+sequence[k];}}"
137	"public void test(){for(int k=0;k<size;++k){coeff[k]=(k>0)?new double[k]:null;for(int l=0;l<k;++l){ final double ratio=((double)sequence[k])/sequence[k-l];coeff[k][l]=1.0/(ratio*ratio-1.0);}}}"
138	"public void test(){for(int i=0;i<scale.length;++i){ final double yi=FastMath.max(FastMath.abs(y1[i]),FastMath.abs(y2[i]));scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*yi;}}"
139	"public void test(){for(int i=0;i<scale.length;++i){ final double yi=FastMath.max(FastMath.abs(y1[i]),FastMath.abs(y2[i]));scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*yi;}}"
140	"public void test(){for(int i=0;i<y0.length;++i){yTmp[i]=y0[i];yEnd[i]=y0[i]+subStep*f[0][i];}}"
141	"public void test(){for(int i=0;i<y0.length;++i){ final double middle=yEnd[i];yEnd[i]=yTmp[i]+subStep2*f[j][i];yTmp[i]=middle;}}"
142	"public void test(){for(int i=0;i<y0.length;++i){yEnd[i]=0.5*(yTmp[i]+yEnd[i]);}}"
143	"public void test(){for(int i=0;i<last.length;++i){diag[k-j][i]=diag[k-j][i]+coeff[k+offset][j-1]*(diag[k-j][i]-diag[k-j][i]);}}"
144	"public void test(){for(int i=0;i<last.length;++i){last[i]=diag[0][i]+coeff[k+offset][k-1]*(diag[0][i]-last[i]);}}"
145	"public void test(){for(int i=0;i<y0.length;++i){yMidDots[l+1][i]=factor*fk[l2][middleIndex+l][i];}}"
146	"public void test(){for(int i=0;i<y0.length;++i){diagonal[j-1][i]=factor*fk[l2+j][middleIndex+l][i];}}"
147	"public void test(){for(int i=0;i<y0.length;++i){yMidDots[l+1][i]*=stepSize;}}"
148	"public void test(){for(int i=0;i<y0.length;++i){fk[j][m][i]-=fk[j][m-2][i];}}"
149	"public void test(){for(int i=0;i<after.length;++i){after[i]+=previous[i]+scaled[i];if(i<mainSetDimension){ final double yScale=FastMath.max(FastMath.abs(previous[i]),FastMath.abs(after[i])); final double tol=(vecAbsoluteTolerance==null)?(scalAbsoluteTolerance+scalRelativeTolerance*yScale):(vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*yScale); final double ratio=(after[i]-before[i])/tol;error+=ratio*ratio;}}}"
150	"public void test(){if(i<mainSetDimension){ final double yScale=FastMath.max(FastMath.abs(previous[i]),FastMath.abs(after[i])); final double tol=(vecAbsoluteTolerance==null)?(scalAbsoluteTolerance+scalRelativeTolerance*yScale):(vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*yScale); final double ratio=(after[i]-before[i])/tol;error+=ratio*ratio;}}"
151	"public void test(){for(int i=0;i<polynoms.length;++i){polynoms[i]=new double[dimension];System.arraycopy(interpolator.polynoms[i],0,polynoms[i],0,dimension);}}"
152	"public void test(){for(int i=polynoms.length;i<newPols.length;++i){newPols[i]=new double[currentState.length];}}"
153	"public void test(){for(int i=0;i<newPols.length;++i){newPols[i]=new double[currentState.length];}}"
154	"public void test(){for(int i=0;i<errfac.length;++i){ final int ip5=i+5;errfac[i]=1.0/(ip5*ip5); final double e=0.5*FastMath.sqrt(((double)(i+1))/ip5);for(int j=0;j<=i;++j){errfac[i]*=e/(j+1);}}}"
155	"public void test(){for(int j=0;j<=i;++j){errfac[i]*=e/(j+1);}}"
156	"public void test(){ final double yp0=h*y0Dot[i]; final double yp1=h*y1Dot[i]; final double ydiff=y1[i]-currentState[i]; final double aspl=ydiff-yp1; final double bspl=yp0-ydiff;polynoms[0][i]=currentState[i];polynoms[1][i]=ydiff;polynoms[2][i]=aspl;}"
157	"public void test(){ final double yp1=h*y1Dot[i]; final double ydiff=y1[i]-currentState[i]; final double aspl=ydiff-yp1; final double bspl=yp0-ydiff;polynoms[0][i]=currentState[i];polynoms[1][i]=ydiff;polynoms[2][i]=aspl;polynoms[3][i]=bspl;if(mu<0){return ;}}"
158	"public void test(){ final double aspl=ydiff-yp1; final double bspl=yp0-ydiff;polynoms[0][i]=currentState[i];polynoms[1][i]=ydiff;polynoms[2][i]=aspl;polynoms[3][i]=bspl;if(mu<0){return ;}}"
159	"public void test(){ final double bspl=yp0-ydiff;polynoms[0][i]=currentState[i];polynoms[1][i]=ydiff;polynoms[2][i]=aspl;polynoms[3][i]=bspl;if(mu<0){return ;} final double ph0=0.5*(currentState[i]+y1[i])+0.125*(aspl+bspl);}"
160	"public void test(){polynoms[0][i]=currentState[i];polynoms[1][i]=ydiff;polynoms[2][i]=aspl;polynoms[3][i]=bspl;if(mu<0){return ;} final double ph0=0.5*(currentState[i]+y1[i])+0.125*(aspl+bspl);polynoms[4][i]=16*(yMidDots[0][i]-ph0);}"
161	"public void test(){ final double ph1=ydiff+0.25*(aspl-bspl);polynoms[5][i]=16*(yMidDots[1][i]-ph1);if(mu>1){ final double ph2=yp1-yp0;polynoms[6][i]=16*(yMidDots[2][i]-ph2+polynoms[4][i]);if(mu>2){ final double ph3=6*(bspl-aspl);polynoms[7][i]=16*(yMidDots[3][i]-ph3+3*polynoms[5][i]);for(int j=4;j<=mu;++j){ final double fac1=0.5*j; final double fac2=2*fac1;polynoms[j+4][i]=16*(yMidDots[j][i]+fac1*polynoms[j+2][i]-fac2*polynoms[j][i]);}}}}"
162	"public void test(){if(mu>1){ final double ph2=yp1-yp0;polynoms[6][i]=16*(yMidDots[2][i]-ph2+polynoms[4][i]);if(mu>2){ final double ph3=6*(bspl-aspl);polynoms[7][i]=16*(yMidDots[3][i]-ph3+3*polynoms[5][i]);for(int j=4;j<=mu;++j){ final double fac1=0.5*j; final double fac2=2*fac1;polynoms[j+4][i]=16*(yMidDots[j][i]+fac1*polynoms[j+2][i]-fac2*polynoms[j][i]);}}}}"
163	"public void test(){if(mu>2){ final double ph3=6*(bspl-aspl);polynoms[7][i]=16*(yMidDots[3][i]-ph3+3*polynoms[5][i]);for(int j=4;j<=mu;++j){ final double fac1=0.5*j; final double fac2=2*fac1;polynoms[j+4][i]=16*(yMidDots[j][i]+fac1*polynoms[j+2][i]-fac2*polynoms[j][i]);}}}"
164	"public void test(){for(int j=4;j<=mu;++j){ final double fac1=0.5*j; final double fac2=2*fac1;polynoms[j+4][i]=16*(yMidDots[j][i]+fac1*polynoms[j+2][i]-fac2*polynoms[j][i]);}}"
165	"public void test(){for(int i=0;i<scale.length;++i){ final double e=polynoms[currentDegree][i]/scale[i];error+=e*e;}}"
166	"public void test(){for(int i=0;i<dimension;++i){ final double p0=polynoms[0][i]; final double p1=polynoms[1][i]; final double p2=polynoms[2][i]; final double p3=polynoms[3][i];interpolatedState[i]=p0+theta*(p1+oneMinusTheta*(p2*theta+p3*oneMinusTheta));interpolatedDerivatives[i]=dot1*p1+dot2*p2+dot3*p3;if(currentDegree>3){double cDot=0;double c=polynoms[currentDegree][i];for(int j=currentDegree-1;j>3;--j){ final double d=1.0/(j-3);cDot=d*(theta05*cDot+c);c=polynoms[j][i]+c*d;}interpolatedState[i]+=t4*c;interpolatedDerivatives[i]+=(t4*cDot+t4Dot*c)/h;}}}"
167	"public void test(){{ final double p0=polynoms[0][i]; final double p1=polynoms[1][i]; final double p2=polynoms[2][i]; final double p3=polynoms[3][i];interpolatedState[i]=p0+theta*(p1+oneMinusTheta*(p2*theta+p3*oneMinusTheta));interpolatedDerivatives[i]=dot1*p1+dot2*p2+dot3*p3;if(currentDegree>3){double cDot=0;double c=polynoms[currentDegree][i];for(int j=currentDegree-1;j>3;--j){ final double d=1.0/(j-3);cDot=d*(theta05*cDot+c);c=polynoms[j][i]+c*d;}interpolatedState[i]+=t4*c;interpolatedDerivatives[i]+=(t4*cDot+t4Dot*c)/h;}}}"
168	"public void test(){interpolatedState[i]=p0+theta*(p1+oneMinusTheta*(p2*theta+p3*oneMinusTheta));interpolatedDerivatives[i]=dot1*p1+dot2*p2+dot3*p3;if(currentDegree>3){double cDot=0;double c=polynoms[currentDegree][i];for(int j=currentDegree-1;j>3;--j){ final double d=1.0/(j-3);cDot=d*(theta05*cDot+c);c=polynoms[j][i]+c*d;}interpolatedState[i]+=t4*c;interpolatedDerivatives[i]+=(t4*cDot+t4Dot*c)/h;}}"
169	"public void test(){if(currentDegree>3){double cDot=0;double c=polynoms[currentDegree][i];for(int j=currentDegree-1;j>3;--j){ final double d=1.0/(j-3);cDot=d*(theta05*cDot+c);c=polynoms[j][i]+c*d;}interpolatedState[i]+=t4*c;interpolatedDerivatives[i]+=(t4*cDot+t4Dot*c)/h;}}"
170	"public void test(){for(int j=currentDegree-1;j>3;--j){ final double d=1.0/(j-3);cDot=d*(theta05*cDot+c);c=polynoms[j][i]+c*d;}}"
171	"public void test(){for(int i=0;i<mainSetDimension;++i){ final double yScale=FastMath.abs(y[i]); final double tol=(vecAbsoluteTolerance==null)?(scalAbsoluteTolerance+scalRelativeTolerance*yScale):(vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*yScale); final double ratio=nordsieck.getEntry(lastRow,i)/tol;error+=ratio*ratio;}}"
172	"public void test(){for(int i=0;i<scaled.length;++i){scaled[i]*=ratio;}}"
173	"public void test(){for(int i=0;i<nData.length;++i){power*=ratio; final double[] nDataI=nData[i];for(int j=0;j<nDataI.length;++j){nDataI[j]*=power;}}}"
174	"public void test(){for(int i=nData.length-1;i>=0;--i){ final int order=i+2; final double[] nDataI=nData[i]; final double power=FastMath.pow(normalizedAbscissa,order);for(int j=0;j<nDataI.length;++j){ final double d=nDataI[j]*power;stateVariation[j]+=d;interpolatedDerivatives[j]+=order*d;}}}"
175	"public void test(){for(int j=0;j<nDataI.length;++j){ final double d=nDataI[j]*power;stateVariation[j]+=d;interpolatedDerivatives[j]+=order*d;}}"
176	"public void test(){for(int i=0;i<currentDerivative.length;++i){out.writeDouble(currentDerivative[i]);}}"
177	"public void test(){for(int i=0;i<currentDerivative.length;++i){currentDerivative[i]=in.readDouble();}}"
178	"public void test(){for(int i=0;i<currentState.length;++i){out.writeDouble(currentState[i]);}}"
179	"public void test(){for(int i=0;i<currentState.length;++i){currentState[i]=in.readDouble();}}"
180	"public void test(){for(int i=1;i<=nSteps;++i){interpolator.setInterpolatedTime(prev+stepSize*i); final double[] msI=interpolator.getInterpolatedDerivatives().clone();for(int j=0;j<n;++j){msI[j]*=stepSize;}multistep[i-1]=msI;}}"
181	"public void test(){for(int i=0;i<N;i++){c[i]=new Complex(f[2*i],f[2*i+1]);}}"
182	"public void test(){for(int i=1;i<N;i++){Complex A=z[N-i].conjugate();Complex B=z[i].add(A);Complex C=z[i].subtract(A);Complex D=new Complex(-roots.getOmegaImaginary(i),roots.getOmegaReal(i));F[i]=B.subtract(C.multiply(D));F[2*N-i]=F[i].conjugate();}}"
183	"public void test(){for(int i=0;i<n;i++){f[i]=data[ii];int k=n>>1;while(ii>=k&&k>0){ii-=k;k>>=1;}ii+=k;}}"
184	"public void test(){for(int i=0;i<n;i+=4){ final Complex a=f[i].add(f[i+1]); final Complex b=f[i+2].add(f[i+3]); final Complex c=f[i].subtract(f[i+1]); final Complex d=f[i+2].subtract(f[i+3]); final Complex e1=c.add(d.multiply(Complex.I)); final Complex e2=c.subtract(d.multiply(Complex.I));f[i]=a.add(b);f[i+2]=a.subtract(b);f[i+1]=roots.isForward()?e2:e1;f[i+3]=roots.isForward()?e1:e2;}}"
185	"public void test(){for(int i=4;i<n;i<<=1){ final int m=n/(i<<1);for(int j=0;j<n;j+=i<<1){for(int k=0;k<i;k++){ final int k_times_m=k*m; final double omega_k_times_m_real=roots.getOmegaReal(k_times_m); final double omega_k_times_m_imaginary=roots.getOmegaImaginary(k_times_m); final Complex z=new Complex(f[i+j].getReal()*omega_k_times_m_real-f[i+j].getImaginary()*omega_k_times_m_imaginary,f[i+j].getReal()*omega_k_times_m_imaginary+f[i+j].getImaginary()*omega_k_times_m_real);f[i+j]=f[j+k].subtract(z);f[j+k]=f[j+k].add(z);}}}}"
186	"public void test(){for(int j=0;j<n;j+=i<<1){for(int k=0;k<i;k++){ final int k_times_m=k*m; final double omega_k_times_m_real=roots.getOmegaReal(k_times_m); final double omega_k_times_m_imaginary=roots.getOmegaImaginary(k_times_m); final Complex z=new Complex(f[i+j].getReal()*omega_k_times_m_real-f[i+j].getImaginary()*omega_k_times_m_imaginary,f[i+j].getReal()*omega_k_times_m_imaginary+f[i+j].getImaginary()*omega_k_times_m_real);f[i+j]=f[j+k].subtract(z);f[j+k]=f[j+k].add(z);}}}"
187	"public void test(){for(int k=0;k<i;k++){ final int k_times_m=k*m; final double omega_k_times_m_real=roots.getOmegaReal(k_times_m); final double omega_k_times_m_imaginary=roots.getOmegaImaginary(k_times_m); final Complex z=new Complex(f[i+j].getReal()*omega_k_times_m_real-f[i+j].getImaginary()*omega_k_times_m_imaginary,f[i+j].getReal()*omega_k_times_m_imaginary+f[i+j].getImaginary()*omega_k_times_m_real);f[i+j]=f[j+k].subtract(z);f[j+k]=f[j+k].add(z);}}"
188	"public void test(){for(int i=0;i<n;i++){s[i]=f.value(min+i*h);}}"
189	"public void test(){}"
190	"public void test(){for(int i=0;i<f.length;i++){f[i]*=d;}}"
191	"public void test(){for(int i=0;i<f.length;i++){f[i]=new Complex(d*f[i].getReal(),d*f[i].getImaginary());}}"
192	"public void test(){for(int i=0;i<dimensionSize.length;i++){mdfft(mdcm,forward,i,new int[0]);}}"
193	"public void test(){for(int i=0;i<dimensionSize[d];i++){subVector[d]=i;temp[i]=mdcm.get(subVector);}}"
194	"public void test(){for(int i=0;i<dimensionSize[d];i++){subVector[d]=i;mdcm.set(temp[i],subVector);}}"
195	"public void test(){for(int i=0;i<dimensionSize[subVector.length];i++){vector[subVector.length]=i;mdfft(mdcm,forward,d,vector);}}"
196	"public void test(){for(int i=0;i<dimensionSize.length;i++){lastDimension=((Object[])lastDimension)[vector[i]];}}"
197	"public void test(){for(int i=0;i<dimensionSize.length-1;i++){lastDimension=(Object[])lastDimension[vector[i]];}}"
198	"public void test(){{int[] vector=new int[dimensionSize.length];int size=1;for(int i=0;i<dimensionSize.length;i++){size*=dimensionSize[i];}int[][] vectorList=new int[size][dimensionSize.length];for(int[] nextVector : vectorList){System.arraycopy(vector,0,nextVector,0,dimensionSize.length);for(int i=0;i<dimensionSize.length;i++){vector[i]++;if(vector[i]<dimensionSize[i]){break;}else {vector[i]=0;}}}for(int[] nextVector : vectorList){mdcm.set(get(nextVector),nextVector);}}}"
199	"public void test(){for(int i=0;i<dimensionSize.length;i++){size*=dimensionSize[i];}}"
200	"public void test(){for(int i=0;i<dimensionSize.length;i++){size*=dimensionSize[i];}int[][] vectorList=new int[size][dimensionSize.length];for(int[] nextVector : vectorList){System.arraycopy(vector,0,nextVector,0,dimensionSize.length);for(int i=0;i<dimensionSize.length;i++){vector[i]++;if(vector[i]<dimensionSize[i]){break;}else {vector[i]=0;}}}}"
201	"public void test(){for(int i=0;i<dimensionSize.length;i++){vector[i]++;if(vector[i]<dimensionSize[i]){break;}else {vector[i]=0;}}}"
202	"public void test(){if(vector[i]<dimensionSize[i]){break;}else {vector[i]=0;}}"
203	"public void test(){for(int[] nextVector : vectorList){mdcm.set(get(nextVector),nextVector);}}"
204	"public void test(){for(int i=1;i<absN;i++){omegaReal[i]=omegaReal[i-1]*cosT+omegaImaginaryForward[i-1]*sinT;omegaImaginaryForward[i]=omegaImaginaryForward[i-1]*cosT-omegaReal[i-1]*sinT;omegaImaginaryInverse[i]=-omegaImaginaryForward[i];}}"
205	"public void test(){for(int i=1;i<(n>>1);i++){ final double a=FastMath.sin(i*FastMath.PI/n)*(f[i]+f[n-i]); final double b=0.5*(f[i]-f[n-i]);x[i]=a+b;x[n-i]=a-b;}}"
206	"public void test(){for(int i=1;i<(n>>1);i++){transformed[2*i]=-y[i].getImaginary();transformed[2*i+1]=y[i].getReal()+transformed[2*i-1];}}"
207	"public void test(){for(int i=1;i<(n>>1);i++){ final double a=0.5*(f[i]+f[n-i]); final double b=FastMath.sin(i*FastMath.PI/n)*(f[i]-f[n-i]); final double c=FastMath.cos(i*FastMath.PI/n)*(f[i]-f[n-i]);x[i]=a-b;x[n-i]=a+b;t1+=c;}}"
208	"public void test(){for(int i=1;i<(n>>1);i++){transformed[2*i]=y[i].getReal();transformed[2*i+1]=transformed[2*i-1]-y[i].getImaginary();}}"
209	"public void test(){for(int i=0;i<halfN;++i){ final int twoI=2*i;yCurrent[i]=yPrevious[twoI]+yPrevious[twoI+1];}}"
210	"public void test(){for(int i=halfN;i<n;++i){ final int twoI=2*i;yCurrent[i]=yPrevious[twoI-n]-yPrevious[twoI-n+1];}}"
211	"public void test(){double x22=m2[2];double fn=0;double fn1;double[][] o=new double[3][3];double[] o0=o[0];double[] o1=o[1];double[] o2=o[2];int i=0;}"
212	"public void test(){long l0=(mt[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l);long l1=(mt[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l);long l=(l0^((l1^(l1>>30))*1664525l))+seed[j];mt[i]=(int)(l&0xffffffffl);i++;j++;if(i>=N){mt[0]=mt[N-1];i=1;}}"
213	"public void test(){long l1=(mt[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l);long l=(l0^((l1^(l1>>30))*1664525l))+seed[j];mt[i]=(int)(l&0xffffffffl);i++;j++;if(i>=N){mt[0]=mt[N-1];i=1;}if(j>=seed.length){j=0;}}"
214	"public void test(){if(i>=N){mt[0]=mt[N-1];i=1;}}"
215	"public void test(){for(int k=N-1;k!=0;k--){long l0=(mt[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l);long l1=(mt[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l);long l=(l0^((l1^(l1>>30))*1566083941l))-i;mt[i]=(int)(l&0xffffffffL);i++;if(i>=N){mt[0]=mt[N-1];i=1;}}}"
216	"public void test(){while((str=inputStream.readLine())!=null){val=Double.parseDouble(str);SummaryStatistics stats=binStats.get(findBin(val));stats.addValue(val);}}"
217	"public void test(){for(int i=0;i<inputArray.length;i++){sampleStats.addValue(inputArray[i]);}}"
218	"public void test(){for(int i=0;i<inputArray.length;i++){SummaryStatistics stats=binStats.get(findBin(inputArray[i]));stats.addValue(inputArray[i]);}}"
219	"public void test(){for(int i=0;i<binCount;i++){SummaryStatistics stats=new SummaryStatistics();binStats.add(i,stats);}}"
220	"public void test(){DataAdapterFactory aFactory=new DataAdapterFactory();DataAdapter da=aFactory.getAdapter(in);da.computeBinStats();upperBounds=new double[binCount];upperBounds[0]=((double)binStats.get(0).getN())/(double)sampleStats.getN();for(int i=1;i<binCount-1;i++){upperBounds[i]=upperBounds[i-1]+((double)binStats.get(i).getN())/(double)sampleStats.getN();}upperBounds[binCount-1]=1.0;}"
221	"public void test(){for(int i=1;i<binCount-1;i++){upperBounds[i]=upperBounds[i-1]+((double)binStats.get(i).getN())/(double)sampleStats.getN();}}"
222	"public void test(){for(int i=0;i<binCount;i++){if(x<=upperBounds[i]){SummaryStatistics stats=binStats.get(i);if(stats.getN()>0){if(stats.getStandardDeviation()>0){return randomData.nextGaussian(stats.getMean(),stats.getStandardDeviation());}else {return stats.getMean();}}}}}"
223	"public void test(){if(x<=upperBounds[i]){SummaryStatistics stats=binStats.get(i);if(stats.getN()>0){if(stats.getStandardDeviation()>0){return randomData.nextGaussian(stats.getMean(),stats.getStandardDeviation());}else {return stats.getMean();}}}}"
224	"public void test(){for(int i=1;i<binCount-1;i++){binUpperBounds[i]=binUpperBounds[i-1]+delta;}}"
225	"public void test(){for(int i=0;i<values.length;i++){values[i]=getNext();}}"
226	"public void test(){for(int i=0;i<length;i++){out[i]=getNext();}}"
227	"public void test(){if((empiricalDistribution==null)||(empiricalDistribution.getBinStats().size()==0)){throw MathRuntimeException.createIllegalStateException(LocalizedFormats.DIGEST_NOT_INITIALIZED);}}"
228	"public void test(){for(int i=0;i<random.length;++i){random[i]=mean[i]+standardDeviation[i]*generator.nextNormalizedDouble();}}"
229	"public void test(){for(int i=seed.length;i<v.length;++i){ final long l=v[i-seed.length];v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);}}"
230	"public void test(){for(int i=0;i<3;i++){if(i>0){randInt=randInt>>8;}bytes[bytesOut++]=(byte)randInt;if(bytesOut==bytes.length){return ;}}}"
231	"public void test(){if(i>0){randInt=randInt>>8;}}"
232	"public void test(){for(int i=0;i<randomBytes.length;i++){Integer c=Integer.valueOf(randomBytes[i]);String hex=Integer.toHexString(c.intValue()+128);if(hex.length()==1){hex=""0""+hex;}outBuffer.append(hex);}}"
233	"public void test(){for(int i=0;i<hash.length;i++){Integer c=Integer.valueOf(hash[i]);String hex=Integer.toHexString(c.intValue()+128);if(hex.length()==1){hex=""0""+hex;}outBuffer.append(hex);}}"
234	"public void test(){for(int i=0;i<k;i++){result[i]=index[n-i];}}"
235	"public void test(){int len=c.size();if(k>len){throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,k,len,true);}if(k<=0){throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);}Object[] objects=c.toArray();int[] index=nextPermutation(len,k);Object[] result=new Object[k];for(int i=0;i<k;i++){result[i]=objects[index[i]];}return result;}"
236	"public void test(){for(int i=0;i<k;i++){result[i]=objects[index[i]];}}"
237	"public void test(){for(int i=list.length-1;i>=end;i--){if(i==0){target=0;}else {target=nextInt(0,i);}int temp=list[target];list[target]=list[i];list[i]=temp;}}"
238	"public void test(){if(i==0){target=0;}else {target=nextInt(0,i);}}"
239	"public void test(){for(int i=0;i<n;i++){natural[i]=i;}}"
240	"public void test(){for(int i=0;i<dimension;i++){ final double comp=2*rand.nextDouble()-1;v[i]=comp;normSq+=comp*comp;}}"
241	"public void test(){for(int i=0;i<dimension;i++){v[i]*=f;}}"
242	"public void test(){int i=0; final int iEnd=bytes.length-3;while(i<iEnd){ final int random=next(32);bytes[i]=(byte)(random&0xff);bytes[i+1]=(byte)((random>>8)&0xff);bytes[i+2]=(byte)((random>>16)&0xff);bytes[i+3]=(byte)((random>>24)&0xff);i+=4;}}"
243	"public void test(){while(i<iEnd){ final int random=next(32);bytes[i]=(byte)(random&0xff);bytes[i+1]=(byte)((random>>8)&0xff);bytes[i+2]=(byte)((random>>16)&0xff);bytes[i+3]=(byte)((random>>24)&0xff);i+=4;}}"
244	"public void test(){while(i<bytes.length){bytes[i++]=(byte)(random&0xff);random=random>>8;}}"
245	"public void test(){for(int i=0;i<order;++i){mean[i]=0;}}"
246	"public void test(){for(int i=0;i<order;++i){index[i]=i;}}"
247	"public void test(){for(int i=rank+1;i<order;++i){int ii=index[i];int isi=index[swap[i]];if(c[ii][ii]>c[isi][isi]){swap[rank]=i;}}}"
248	"public void test(){if(c[ii][ii]>c[isi][isi]){swap[rank]=i;}}"
249	"public void test(){for(int i=rank;i<order;++i){if(c[index[i]][index[i]]<-small){throw new NonPositiveDefiniteMatrixException(i,small);}}}"
250	"public void test(){if(c[index[i]][index[i]]<-small){throw new NonPositiveDefiniteMatrixException(i,small);}}"
251	"public void test(){for(int i=rank+1;i<order;++i){int ii=index[i];double e=inverse*c[ii][ir];b[i][rank]=e;c[ii][ii]-=e*e;for(int j=rank+1;j<i;++j){int ij=index[j];double f=c[ii][ij]-e*b[j][rank];c[ii][ij]=f;c[ij][ii]=f;}}}"
252	"public void test(){for(int j=rank+1;j<i;++j){int ij=index[j];double f=c[ii][ij]-e*b[j][rank];c[ii][ij]=f;c[ij][ii]=f;}}"
253	"public void test(){for(int i=0;i<order;++i){for(int j=0;j<rank;++j){root.setEntry(index[i],j,b[i][j]);}}}"
254	"public void test(){for(int j=0;j<rank;++j){root.setEntry(index[i],j,b[i][j]);}}"
255	"public void test(){for(int i=0;i<rank;++i){normalized[i]=generator.nextNormalizedDouble();}}"
256	"public void test(){for(int i=0;i<correlated.length;++i){correlated[i]=mean[i];for(int j=0;j<rank;++j){correlated[i]+=root.getEntry(i,j)*normalized[j];}}}"
257	"public void test(){for(int j=0;j<rank;++j){correlated[i]+=root.getEntry(i,j)*normalized[j];}}"
258	"public void test(){if(map.size()!=rhs.map.size()){return false;}}"
259	"public void test(){if(!entry.getValue().equals(rhs.map.get(entry.getKey()))){return false;}}"
260	"public void test(){for(int i=0;i<dimension;i++){if(counter[i]!=size[i]-1){return true;}}}"
261	"public void test(){if(counter[i]!=size[i]-1){return true;}}"
262	"public void test(){for(int i=last;i>=0;i--){if(counter[i]==size[i]-1){counter[i]=0;}else {++counter[i];break;}}}"
263	"public void test(){if(counter[i]==size[i]-1){counter[i]=0;}else {++counter[i];break;}}"
264	"public void test(){dimension=size.length;this.size=MathUtils.copyOf(size);uniCounterOffset=new int[dimension];last=dimension-1;int tS=size[last];for(int i=0;i<last;i++){int count=1;for(int j=i+1;j<dimension;j++){count*=size[j];}uniCounterOffset[i]=count;tS*=size[i];}}"
265	"public void test(){last=dimension-1;int tS=size[last];for(int i=0;i<last;i++){int count=1;for(int j=i+1;j<dimension;j++){count*=size[j];}uniCounterOffset[i]=count;tS*=size[i];}}"
266	"public void test(){for(int i=0;i<last;i++){int count=1;for(int j=i+1;j<dimension;j++){count*=size[j];}uniCounterOffset[i]=count;tS*=size[i];}}"
267	"public void test(){for(int j=i+1;j<dimension;j++){count*=size[j];}}"
268	"public void test(){for(int i=0;i<last;i++){int idx=0; final int offset=uniCounterOffset[i];while(count<=index){count+=offset;++idx;}--idx;count-=offset;indices[i]=idx;}}"
269	"public void test(){for(int i=0;i<dimension;i++){ final int index=c[i];if(index<0||index>=size[i]){throw new OutOfRangeException(index,0,size[i]-1);}count+=uniCounterOffset[i]*c[i];}}"
270	"public void test(){if(index<0||index>=size[i]){throw new OutOfRangeException(index,0,size[i]-1);}}"
271	"public void test(){for(int i=0;i<dimension;i++){sb.append(""["").append(getCount(i)).append(""]"");}}"
272	"public void test(){for(int i=0;i<special.length;++i){number=parseNumber(source,special[i],pos);if(number!=null){break;}}}"
273	"public void test(){for(int i=0;i<maxPower;i++){lastScaleFactor=scaleFactor;scaleFactor*=scale;if(a!=0.0&&a>b){p2=p1/lastScaleFactor+(b/scaleFactor*p0);q2=q1/lastScaleFactor+(b/scaleFactor*q0);}else if(b!=0){p2=(a/scaleFactor*p1)+p0/lastScaleFactor;q2=(a/scaleFactor*q1)+q0/lastScaleFactor;}infinite=Double.isInfinite(p2)||Double.isInfinite(q2);if(!infinite){break;}}}"
274	"public void test(){if(d>-MathUtils.SAFE_MIN&&d<MathUtils.SAFE_MIN){return d;}}"
275	"public void test(){if(d>-MathUtils.SAFE_MIN&&d<MathUtils.SAFE_MIN){return d;}long xl=Double.doubleToLongBits(d);xl=xl&MASK_30BITS;return Double.longBitsToDouble(xl);}"
276	"public void test(){for(int i=19;i>=0;i--){splitMult(xs,ys,as);ys[0]=as[0];ys[1]=as[1];split(FACT[i],as);splitReciprocal(as,facts);splitAdd(ys,facts,as);ys[0]=as[0];ys[1]=as[1];}}"
277	"public void test(){if(d<Infinity&&d>-Infinity){ final double a=d*HEX_40000000;split[0]=(d+a)-a;split[1]=d-split[0];}else { final double a=d*9.313226E-10;split[0]=(d+a-d)*HEX_40000000;split[1]=d-split[0];}}"
278	"public void test(){ final double c=a[0]+a[1]; final double d=-(c-a[0]);if(c<Infinity&&c>-Infinity){double z=c*HEX_40000000;a[0]=(c+z)-z;a[1]=c-a[0]+d;}else {double z=c*9.313226E-10;a[0]=(c+z-c)*HEX_40000000;a[1]=c-a[0]+d;}}"
279	"public void test(){if(c<Infinity&&c>-Infinity){double z=c*HEX_40000000;a[0]=(c+z)-z;a[1]=c-a[0]+d;}else {double z=c*9.313226E-10;a[0]=(c+z-c)*HEX_40000000;a[1]=c-a[0]+d;}}"
280	"public void test(){for(int i=0;i<2;i++){double err=1.0-result[0]*in[0]-result[0]*in[1]-result[1]*in[0]-result[1]*in[1];err=err*(result[0]+result[1]);result[1]+=err;}}"
281	"public void test(){for(int i=LN_QUICK_COEF.length-2;i>=0;i--){aa=ya*xa;ab=ya*xb+yb*xa+yb*xb;tmp=aa*HEX_40000000;ya=aa+tmp-tmp;yb=aa-ya+ab;aa=ya+LN_QUICK_COEF[i][0];ab=yb+LN_QUICK_COEF[i][1];tmp=aa*HEX_40000000;ya=aa+tmp-tmp;yb=aa-ya+ab;}}"
282	"public void test(){for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){aa=ya*xa;ab=ya*xb+yb*xa+yb*xb;tmp=aa*HEX_40000000;ya=aa+tmp-tmp;yb=aa-ya+ab;aa=ya+LN_HI_PREC_COEF[i][0];ab=yb+LN_HI_PREC_COEF[i][1];tmp=aa*HEX_40000000;ya=aa+tmp-tmp;yb=aa-ya+ab;}}"
283	"public void test(){double a=LN_2_A*exp;double b=0.0;double c=a+lnm[0];double d=-(c-a);a=c;b=b+d;c=a+lnza;d=-(c-a);}"
284	"public void test(){double b=0.0;double c=a+lnm[0];double d=-(c-a);a=c;b=b+d;c=a+lnza;d=-(c-a);a=c;b=b+d;}"
285	"public void test(){double d=-(c-a);a=c;b=b+d;c=a+lnza;d=-(c-a);a=c;b=b+d;c=a+LN_2_B*exp;d=-(c-a);}"
286	"public void test(){b=b+d;c=a+lnza;d=-(c-a);a=c;b=b+d;c=a+LN_2_B*exp;d=-(c-a);a=c;b=b+d;}"
287	"public void test(){d=-(c-a);a=c;b=b+d;c=a+LN_2_B*exp;d=-(c-a);a=c;b=b+d;c=a+lnm[1];d=-(c-a);}"
288	"public void test(){b=b+d;c=a+LN_2_B*exp;d=-(c-a);a=c;b=b+d;c=a+lnm[1];d=-(c-a);a=c;b=b+d;}"
289	"public void test(){d=-(c-a);a=c;b=b+d;c=a+lnm[1];d=-(c-a);a=c;b=b+d;c=a+lnzb;d=-(c-a);}"
290	"public void test(){b=b+d;c=a+lnm[1];d=-(c-a);a=c;b=b+d;c=a+lnzb;d=-(c-a);a=c;b=b+d;}"
291	"public void test(){a=c;b=b+d;c=a+lnzb;d=-(c-a);a=c;b=b+d;if(hiPrec!=null){hiPrec[0]=a;hiPrec[1]=b;}}"
292	"public void test(){c=a+lnzb;d=-(c-a);a=c;b=b+d;if(hiPrec!=null){hiPrec[0]=a;hiPrec[1]=b;}return a+b;}"
293	"public void test(){for(int i=LN_SPLIT_COEF.length-2;i>=0;i--){splitMult(y,x2,a);y[0]=a[0];y[1]=a[1];splitAdd(y,LN_SPLIT_COEF[i],a);y[0]=a[0];y[1]=a[1];}}"
294	"public void test(){for(int i=19;i>=0;i--){splitMult(xs,ys,as);ys[0]=as[0];ys[1]=as[1];if((i&1)==0){continue;}split(FACT[i],as);splitReciprocal(as,facts);if((i&2)!=0){facts[0]=-facts[0];facts[1]=-facts[1];}splitAdd(ys,facts,as);ys[0]=as[0];ys[1]=as[1];}}"
295	"public void test(){if((i&1)==0){continue;}}"
296	"public void test(){ys[1]=as[1];if((i&1)==0){continue;}split(FACT[i],as);splitReciprocal(as,facts);if((i&2)!=0){facts[0]=-facts[0];facts[1]=-facts[1];}}"
297	"public void test(){if((i&2)!=0){facts[0]=-facts[0];facts[1]=-facts[1];}}"
298	"public void test(){for(int i=19;i>=0;i--){splitMult(xs,ys,as);ys[0]=as[0];ys[1]=as[1];if((i&1)!=0){continue;}split(FACT[i],as);splitReciprocal(as,facts);if((i&2)!=0){facts[0]=-facts[0];facts[1]=-facts[1];}splitAdd(ys,facts,as);ys[0]=as[0];ys[1]=as[1];}}"
299	"public void test(){if((i&1)!=0){continue;}}"
300	"public void test(){ys[1]=as[1];if((i&1)!=0){continue;}split(FACT[i],as);splitReciprocal(as,facts);if((i&2)!=0){facts[0]=-facts[0];facts[1]=-facts[1];}}"
301	"public void test(){for(int i=0;i<7;i++){double x=i/8.0;slowSin(x,result);SINE_TABLE_A[i]=result[0];SINE_TABLE_B[i]=result[1];slowCos(x,result);COSINE_TABLE_A[i]=result[0];COSINE_TABLE_B[i]=result[1];}}"
302	"public void test(){xs[0]=SINE_TABLE_A[i/2];xs[1]=SINE_TABLE_B[i/2];ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];splitMult(xs,ys,result);SINE_TABLE_A[i]=result[0]*2.0;SINE_TABLE_B[i]=result[1]*2.0;splitMult(ys,ys,as);}"
303	"public void test(){xs[1]=SINE_TABLE_B[i/2];ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];splitMult(xs,ys,result);SINE_TABLE_A[i]=result[0]*2.0;SINE_TABLE_B[i]=result[1]*2.0;splitMult(ys,ys,as);splitMult(xs,xs,temps);temps[0]=-temps[0];}"
304	"public void test(){ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];splitMult(xs,ys,result);SINE_TABLE_A[i]=result[0]*2.0;SINE_TABLE_B[i]=result[1]*2.0;splitMult(ys,ys,as);splitMult(xs,xs,temps);temps[0]=-temps[0];temps[1]=-temps[1];}"
305	"public void test(){SINE_TABLE_B[i]=result[1]*2.0;splitMult(ys,ys,as);splitMult(xs,xs,temps);temps[0]=-temps[0];temps[1]=-temps[1];splitAdd(as,temps,result);COSINE_TABLE_A[i]=result[0];COSINE_TABLE_B[i]=result[1];}"
306	"public void test(){xs[0]=SINE_TABLE_A[i/2];xs[1]=SINE_TABLE_B[i/2];ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];as[0]=SINE_TABLE_A[i/2+1];as[1]=SINE_TABLE_B[i/2+1];bs[0]=COSINE_TABLE_A[i/2+1];bs[1]=COSINE_TABLE_B[i/2+1];}"
307	"public void test(){xs[0]=SINE_TABLE_A[i/2];xs[1]=SINE_TABLE_B[i/2];ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];as[0]=SINE_TABLE_A[i/2+1];as[1]=SINE_TABLE_B[i/2+1];bs[0]=COSINE_TABLE_A[i/2+1];bs[1]=COSINE_TABLE_B[i/2+1];splitMult(xs,bs,temps);}"
308	"public void test(){xs[1]=SINE_TABLE_B[i/2];ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];as[0]=SINE_TABLE_A[i/2+1];as[1]=SINE_TABLE_B[i/2+1];bs[0]=COSINE_TABLE_A[i/2+1];bs[1]=COSINE_TABLE_B[i/2+1];splitMult(xs,bs,temps);splitMult(ys,as,result);}"
309	"public void test(){ys[0]=COSINE_TABLE_A[i/2];ys[1]=COSINE_TABLE_B[i/2];as[0]=SINE_TABLE_A[i/2+1];as[1]=SINE_TABLE_B[i/2+1];bs[0]=COSINE_TABLE_A[i/2+1];bs[1]=COSINE_TABLE_B[i/2+1];splitMult(xs,bs,temps);splitMult(ys,as,result);splitAdd(result,temps,result);}"
310	"public void test(){ys[1]=COSINE_TABLE_B[i/2];as[0]=SINE_TABLE_A[i/2+1];as[1]=SINE_TABLE_B[i/2+1];bs[0]=COSINE_TABLE_A[i/2+1];bs[1]=COSINE_TABLE_B[i/2+1];splitMult(xs,bs,temps);splitMult(ys,as,result);splitAdd(result,temps,result);SINE_TABLE_A[i]=result[0];}"
311	"public void test(){bs[1]=COSINE_TABLE_B[i/2+1];splitMult(xs,bs,temps);splitMult(ys,as,result);splitAdd(result,temps,result);SINE_TABLE_A[i]=result[0];SINE_TABLE_B[i]=result[1];splitMult(ys,bs,result);splitMult(xs,as,temps);temps[0]=-temps[0];}"
312	"public void test(){splitMult(xs,bs,temps);splitMult(ys,as,result);splitAdd(result,temps,result);SINE_TABLE_A[i]=result[0];SINE_TABLE_B[i]=result[1];splitMult(ys,bs,result);splitMult(xs,as,temps);temps[0]=-temps[0];temps[1]=-temps[1];}"
313	"public void test(){SINE_TABLE_B[i]=result[1];splitMult(ys,bs,result);splitMult(xs,as,temps);temps[0]=-temps[0];temps[1]=-temps[1];splitAdd(result,temps,result);COSINE_TABLE_A[i]=result[0];COSINE_TABLE_B[i]=result[1];}"
314	"public void test(){for(int i=0;i<14;i++){double xs[]=new double[2];double ys[]=new double[2];double as[]=new double[2];as[0]=COSINE_TABLE_A[i];as[1]=COSINE_TABLE_B[i];splitReciprocal(as,ys);xs[0]=SINE_TABLE_A[i];xs[1]=SINE_TABLE_B[i];splitMult(xs,ys,as);TANGENT_TABLE_A[i]=as[0];TANGENT_TABLE_B[i]=as[1];}}"
315	"public void test(){double xs[]=new double[2];double ys[]=new double[2];double as[]=new double[2];as[0]=COSINE_TABLE_A[i];as[1]=COSINE_TABLE_B[i];splitReciprocal(as,ys);xs[0]=SINE_TABLE_A[i];xs[1]=SINE_TABLE_B[i];}"
316	"public void test(){double xs[]=new double[2];double ys[]=new double[2];double as[]=new double[2];as[0]=COSINE_TABLE_A[i];as[1]=COSINE_TABLE_B[i];splitReciprocal(as,ys);xs[0]=SINE_TABLE_A[i];xs[1]=SINE_TABLE_B[i];splitMult(xs,ys,as);}"
317	"public void test(){double as[]=new double[2];as[0]=COSINE_TABLE_A[i];as[1]=COSINE_TABLE_B[i];splitReciprocal(as,ys);xs[0]=SINE_TABLE_A[i];xs[1]=SINE_TABLE_B[i];splitMult(xs,ys,as);TANGENT_TABLE_A[i]=as[0];TANGENT_TABLE_B[i]=as[1];}"
318	"public void test(){as[0]=COSINE_TABLE_A[i];as[1]=COSINE_TABLE_B[i];splitReciprocal(as,ys);xs[0]=SINE_TABLE_A[i];xs[1]=SINE_TABLE_B[i];splitMult(xs,ys,as);TANGENT_TABLE_A[i]=as[0];TANGENT_TABLE_B[i]=as[1];}"
319	"public void test(){double a=0;double b=0;double t=sintA;double c=a+t;double d=-(c-a);a=c;b=b+d;t=costA*sinEpsA;c=a+t;}"
320	"public void test(){double t=sintA;double c=a+t;double d=-(c-a);a=c;b=b+d;t=costA*sinEpsA;c=a+t;d=-(c-a);a=c;}"
321	"public void test(){a=c;b=b+d;t=costA*sinEpsA;c=a+t;d=-(c-a);a=c;b=b+d;b=b+sintA*cosEpsB+costA*sinEpsB;b=b+sintB+sintB*cosEpsB+costB*sinEpsB;}"
322	"public void test(){c=a+t;d=-(c-a);a=c;b=b+d;b=b+sintA*cosEpsB+costA*sinEpsB;b=b+sintB+sintB*cosEpsB+costB*sinEpsB;if(xb!=0.0){t=((costA+costB)*(cosEpsA+cosEpsB)-(sintA+sintB)*(sinEpsA+sinEpsB))*xb;c=a+t;d=-(c-a);a=c;b=b+d;}}"
323	"public void test(){if(xb!=0.0){t=((costA+costB)*(cosEpsA+cosEpsB)-(sintA+sintB)*(sinEpsA+sinEpsB))*xb;c=a+t;d=-(c-a);a=c;b=b+d;}}"
324	"public void test(){t=costA*sinEpsA;c=a+t;d=-(c-a);a=c;b=b+d;b=b+sintA*cosEpsB+costA*sinEpsB;b=b+sintB+sintB*cosEpsB+costB*sinEpsB;double sina=a+b;double sinb=-(sina-a);}"
325	"public void test(){b=b+sintA*cosEpsB+costA*sinEpsB;b=b+sintB+sintB*cosEpsB+costB*sinEpsB;double sina=a+b;double sinb=-(sina-a);a=b=c=d=0.0;t=costA*cosEpsA;c=a+t;d=-(c-a);a=c;}"
326	"public void test(){double sinb=-(sina-a);a=b=c=d=0.0;t=costA*cosEpsA;c=a+t;d=-(c-a);a=c;b=b+d;t=-sintA*sinEpsA;c=a+t;}"
327	"public void test(){t=costA*cosEpsA;c=a+t;d=-(c-a);a=c;b=b+d;t=-sintA*sinEpsA;c=a+t;d=-(c-a);a=c;}"
328	"public void test(){a=c;b=b+d;t=-sintA*sinEpsA;c=a+t;d=-(c-a);a=c;b=b+d;b=b+costB*cosEpsA+costA*cosEpsB+costB*cosEpsB;b=b-(sintB*sinEpsA+sintA*sinEpsB+sintB*sinEpsB);}"
329	"public void test(){t=-sintA*sinEpsA;c=a+t;d=-(c-a);a=c;b=b+d;b=b+costB*cosEpsA+costA*cosEpsB+costB*cosEpsB;b=b-(sintB*sinEpsA+sintA*sinEpsB+sintB*sinEpsB);double cosa=a+b;double cosb=-(cosa-a);}"
330	"public void test(){if((n>-1023)&&(n<1024)){return d*Double.longBitsToDouble(((long)(n+1023))<<52);}}"
331	"public void test(){if(Double.isNaN(d)||Double.isInfinite(d)){return d;}}"
332	"public void test(){if(n<-2098){return (d>0)?0.0:-0.0;}}"
333	"public void test(){if(n>2097){return (d>0)?Double.POSITIVE_INFINITY:Double.NEGATIVE_INFINITY;}}"
334	"public void test(){if(Double.isNaN(d)||Double.isInfinite(d)){return d;}if(n<-2098){return (d>0)?0.0:-0.0;}if(n>2097){return (d>0)?Double.POSITIVE_INFINITY:Double.NEGATIVE_INFINITY;} final long bits=Double.doubleToLongBits(d); final long sign=bits&0x8000000000000000L;int exponent=((int)(bits>>>52))&0x7ff;long mantissa=bits&0x000fffffffffffffL;}"
335	"public void test(){if(Double.isNaN(d)||Double.isNaN(direction)){return Double.NaN;}else if(d==direction){return direction;}else if(Double.isInfinite(d)){return (d<0)?-Double.MAX_VALUE:Double.MAX_VALUE;}else if(d==0){return (direction<0)?-Double.MIN_VALUE:Double.MIN_VALUE;}}"
336	"public void test(){if(d==direction){return direction;}else if(Double.isInfinite(d)){return (d<0)?-Double.MAX_VALUE:Double.MAX_VALUE;}else if(d==0){return (direction<0)?-Double.MIN_VALUE:Double.MIN_VALUE;}}"
337	"public void test(){if(Double.isInfinite(d)){return (d<0)?-Double.MAX_VALUE:Double.MAX_VALUE;}else if(d==0){return (direction<0)?-Double.MIN_VALUE:Double.MIN_VALUE;}}"
338	"public void test(){if(d==0){return (direction<0)?-Double.MIN_VALUE:Double.MIN_VALUE;}}"
339	"public void test(){if(Double.isNaN(d)||Double.isNaN(direction)){return Double.NaN;}else if(d==direction){return direction;}else if(Double.isInfinite(d)){return (d<0)?-Double.MAX_VALUE:Double.MAX_VALUE;}else if(d==0){return (direction<0)?-Double.MIN_VALUE:Double.MIN_VALUE;} final long bits=Double.doubleToLongBits(d); final long sign=bits&0x8000000000000000L;}"
340	"public void test(){if((direction<d)^(sign==0L)){return Double.longBitsToDouble(sign|((bits&0x7fffffffffffffffL)+1));}else {return Double.longBitsToDouble(sign|((bits&0x7fffffffffffffffL)-1));}}"
341	"public void test(){double y=floor(x);double d=x-y;if(d>0.5){if(y==-1.0){return -0.0;}return y+1.0;}if(d<0.5){return y;}long z=(long)y;return (z&1)==0?y:y+1.0;}"
342	"public void test(){if(d>0.5){if(y==-1.0){return -0.0;}return y+1.0;}}"
343	"public void test(){if(d<0.5){return y;}}"
344	"public void test(){ final int length=source.keys.length;keys=new int[length];System.arraycopy(source.keys,0,keys,0,length);values=new double[length];System.arraycopy(source.values,0,values,0,length);states=new byte[length];System.arraycopy(source.states,0,states,0,length);missingEntries=source.missingEntries;size=source.size;mask=source.mask;count=source.count;}"
345	"public void test(){keys[index]=0;states[index]=REMOVED; final double previous=values[index];values[index]=missingEntries;--size;++count;return previous;}"
346	"public void test(){if(newMapping){++size;if(shouldGrowTable()){growTable();}++count;}}"
347	"public void test(){for(int i=0;i<oldLength;++i){if(oldStates[i]==FULL){ final int key=oldKeys[i]; final int index=findInsertionIndex(newKeys,newStates,key,newMask);newKeys[index]=key;newValues[index]=oldValues[i];newStates[index]=FULL;}}}"
348	"public void test(){if(oldStates[i]==FULL){ final int key=oldKeys[i]; final int index=findInsertionIndex(newKeys,newStates,key,newMask);newKeys[index]=key;newValues[index]=oldValues[i];newStates[index]=FULL;}}"
349	"public void test(){values=buildArray(length);System.arraycopy(source.values,0,values,0,length);states=new byte[length];System.arraycopy(source.states,0,states,0,length);missingEntries=source.missingEntries;size=source.size;mask=source.mask;count=source.count;}"
350	"public void test(){keys[index]=0;states[index]=REMOVED; final T previous=values[index];values[index]=missingEntries;--size;++count;return previous;}"
351	"public void test(){{int i=n-k+1;for(int j=1;j<=k;j++){result=result*i/j;i++;}}}"
352	"public void test(){for(int j=1;j<=k;j++){result=result*i/j;i++;}}"
353	"public void test(){if(n<=66){int i=n-k+1;for(int j=1;j<=k;j++){ final long d=gcd(i,j);result=(result/(j/d))*(i/d);i++;}}else {int i=n-k+1;for(int j=1;j<=k;j++){ final long d=gcd(i,j);result=mulAndCheck(result/(j/d),i/d);i++;}}}"
354	"public void test(){for(int j=1;j<=k;j++){ final long d=gcd(i,j);result=(result/(j/d))*(i/d);i++;}}"
355	"public void test(){for(int j=1;j<=k;j++){ final long d=gcd(i,j);result=mulAndCheck(result/(j/d),i/d);i++;}}"
356	"public void test(){for(int i=1;i<=k;i++){result*=(double)(n-k+i)/(double)i;}}"
357	"public void test(){for(int i=n-k+1;i<=n;i++){logSum+=FastMath.log(i);}}"
358	"public void test(){for(int i=2;i<=k;i++){logSum-=FastMath.log(i);}}"
359	"public void test(){for(int i=0;i<x.length;++i){if(!equals(x[i],y[i])){return false;}}}"
360	"public void test(){if(!equals(x[i],y[i])){return false;}}"
361	"public void test(){for(int i=0;i<x.length;++i){if(!equalsIncludingNaN(x[i],y[i])){return false;}}}"
362	"public void test(){if(!equalsIncludingNaN(x[i],y[i])){return false;}}"
363	"public void test(){for(int i=2;i<=n;i++){logSum+=FastMath.log(i);}}"
364	"public void test(){for(int i=0;i<len;i++){if(Double.isInfinite(values[i])){throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);}if(!Double.isNaN(values[i])){sum+=values[i];}}}"
365	"public void test(){if(Double.isInfinite(values[i])){throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);}}"
366	"public void test(){if(!Double.isNaN(values[i])){sum+=values[i];}}"
367	"public void test(){for(int i=0;i<len;i++){if(Double.isNaN(values[i])){out[i]=Double.NaN;}else {out[i]=values[i]*normalizedSum/sum;}}}"
368	"public void test(){if(Double.isNaN(values[i])){out[i]=Double.NaN;}else {out[i]=values[i]*normalizedSum/sum;}}"
369	"public void test(){for(int i=0;i<p1.length;i++){sum+=FastMath.abs(p1[i]-p2[i]);}}"
370	"public void test(){int sum=0;for(int i=0;i<p1.length;i++){sum+=FastMath.abs(p1[i]-p2[i]);}return sum;}"
371	"public void test(){for(int i=0;i<p1.length;i++){ final double dp=p1[i]-p2[i];sum+=dp*dp;}}"
372	"public void test(){for(int i=0;i<p1.length;i++){max=FastMath.max(max,FastMath.abs(p1[i]-p2[i]));}}"
373	"public void test(){if(val[i]<=previous){ok=false;}}"
374	"public void test(){if(val[i]<previous){ok=false;}}"
375	"public void test(){if(val[i]>=previous){ok=false;}}"
376	"public void test(){if(val[i]>previous){ok=false;}}"
377	"public void test(){if(!ok&&abort){throw new NonMonotonousSequenceException(val[i],previous,i,dir,strict);}}"
378	"public void test(){for(int i=0;i<val.length;i++){ final double x=val[i];if(Double.isInfinite(x)||Double.isNaN(x)){throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT,x,i);}}}"
379	"public void test(){if(Double.isInfinite(x)||Double.isNaN(x)){throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT,x,i);}}"
380	"public void test(){for(int i=0;i<len;i++){ final double[] yValues=new double[yListLen];for(int j=0;j<yListLen;j++){double[] y=yList[j];if(y.length!=len){throw new DimensionMismatchException(y.length,len);}yValues[j]=y[i];}list.add(new Pair<Double,double[]>(x[i],yValues));}}"
381	"public void test(){for(int j=0;j<yListLen;j++){double[] y=yList[j];if(y.length!=len){throw new DimensionMismatchException(y.length,len);}yValues[j]=y[i];}}"
382	"public void test(){for(int i=0;i<len;i++){ final Pair<Double,double[]> e=list.get(i);x[i]=e.getKey(); final double[] yValues=e.getValue();for(int j=0;j<yListLen;j++){yList[j][i]=yValues[j];}}}"
383	"public void test(){for(int j=0;j<yListLen;j++){yList[j][i]=yValues[j];}}"
384	"public void test(){for(int i=0;i<value;i++){incrementCount();}}"
385	"public void test(){if(i>numElements){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY,i,numElements);}else if(i<0){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS,i);}else {numElements-=i;if(front)startIndex+=i;}}"
386	"public void test(){if(i<0){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS,i);}else {numElements-=i;if(front)startIndex+=i;}}"
387	"public void test(){double[] tempArray=new double[size];System.arraycopy(internalArray,0,tempArray,0,internalArray.length);internalArray=tempArray;}"
388	"public void test(){if(i<0){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,i);}}"
389	"public void test(){if((startIndex+i)>internalArray.length){expandTo(startIndex+i);}}"
390	"public void test(){if(i<0){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,i);}if((startIndex+i)>internalArray.length){expandTo(startIndex+i);}numElements=i;}"
391	"public void test(){if(isNaN()||rhs.isNaN()){return NaN;}double c=rhs.getReal();double d=rhs.getImaginary();if(c==0.0&&d==0.0){return NaN;}if(rhs.isInfinite()&&!isInfinite()){return ZERO;}}"
392	"public void test(){if(c==0.0&&d==0.0){return NaN;}}"
393	"public void test(){if(FastMath.abs(c)<FastMath.abs(d)){double q=c/d;double denominator=c*q+d;return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);}else {double q=d/c;double denominator=d*q+c;return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);}}"
394	"public void test(){if(isNaN()){return Complex.NaN;}double real2=2.0*real;double imaginary2=2.0*imaginary;double d=FastMath.cos(real2)+MathUtils.cosh(imaginary2);return createComplex(FastMath.sin(real2)/d,MathUtils.sinh(imaginary2)/d);}"
395	"public void test(){if(isNaN()){return Complex.NaN;}double real2=2.0*real;double imaginary2=2.0*imaginary;double d=MathUtils.cosh(real2)+FastMath.cos(imaginary2);return createComplex(MathUtils.sinh(real2)/d,FastMath.sin(imaginary2)/d);}"
396	"public void test(){for(int i=0;i<starts;++i){try{optima[i]=optimizer.optimize(maxEval-totalEvaluations,f,target,weights,i==0?startPoint:generator.nextVector());}catch (MathUserException mue) {  lastException=mue;  optima[i]=null;}catch (ConvergenceException oe) {  optima[i]=null;}totalEvaluations+=optimizer.getEvaluations();}}"
397	"public void test(){for(int i=0;i<p.length;++i){ final double pi=p[i]; final double ci=c[i]; final double difference=FastMath.abs(pi-ci); final double size=FastMath.max(FastMath.abs(pi),FastMath.abs(ci));if(difference>size*getRelativeThreshold()&&difference>getAbsoluteThreshold()){return false;}}}"
398	"public void test(){if(difference>size*getRelativeThreshold()&&difference>getAbsoluteThreshold()){return false;}}"
399	"public void test(){double[] target=new double[observations.size()];double[] weights=new double[observations.size()];int i=0;for(WeightedObservedPoint point : observations){target[i]=point.getY();weights[i]=point.getWeight();++i;}VectorialPointValuePair optimum=optimizer.optimize(maxEval,new TheoreticalValuesFunction(f),target,weights,initialGuess);return optimum.getPointRef();}"
400	"public void test(){for(WeightedObservedPoint point : observations){target[i]=point.getY();weights[i]=point.getWeight();++i;}}"
401	"public void test(){ final double[] values=new double[observations.size()];int i=0;for(WeightedObservedPoint observed : observations){values[i++]=f.value(observed.getX(),point);}return values;}"
402	"public void test(){for(WeightedObservedPoint observed : observations){values[i++]=f.value(observed.getX(),point);}}"
403	"public void test(){for(int i=1;i<points.length;i++){if(points[i].getY()>points[maxYIdx].getY()){maxYIdx=i;}}}"
404	"public void test(){if(points[i].getY()>points[maxYIdx].getY()){maxYIdx=i;}}"
405	"public void test(){for(int i=startIdx;(idxStep<0)?(i+idxStep>=0):(i+idxStep<points.length);i+=idxStep){if(isBetween(y,points[i].getY(),points[i+idxStep].getY())){return (idxStep<0)?new WeightedObservedPoint[]{points[i+idxStep],points[i]}:new WeightedObservedPoint[]{points[i],points[i+idxStep]};}}}"
406	"public void test(){if(isBetween(y,points[i].getY(),points[i+idxStep].getY())){return (idxStep<0)?new WeightedObservedPoint[]{points[i+idxStep],points[i]}:new WeightedObservedPoint[]{points[i],points[i+idxStep]};}}"
407	"public void test(){if(curr.getX()<prec.getX()){int i=j-1;WeightedObservedPoint mI=observations[i];while((i>=0)&&(curr.getX()<mI.getX())){observations[i+1]=mI;if(i--!=0){mI=observations[i];}}observations[i+1]=curr;curr=observations[j];}}"
408	"public void test(){while((i>=0)&&(curr.getX()<mI.getX())){observations[i+1]=mI;if(i--!=0){mI=observations[i];}}}"
409	"public void test(){if(i--!=0){mI=observations[i];}}"
410	"public void test(){ final double previousX=currentX; final double previousY=currentY;currentX=observations[i].getX();currentY=observations[i].getY(); final double dx=currentX-previousX; final double dy=currentY-previousY; final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3; final double fPrime2StepIntegral=dy*dy/dx;}"
411	"public void test(){for(int i=1;i<observations.length;++i){ final double y=observations[i].getY();if(y<yMin){yMin=y;}if(y>yMax){yMax=y;}}}"
412	"public void test(){for(int i=1;i<observations.length;++i){ final double previousX=currentX; final double previousY=currentY;currentX=observations[i].getX();currentY=observations[i].getY(); final double currentYPrime=(currentY-previousY)/(currentX-previousX);double omegaX=omega*currentX;double cosine=FastMath.cos(omegaX);double sine=FastMath.sin(omegaX);fcMean+=omega*currentY-currentYPrime*sine;fsMean+=omega*currentY+currentYPrime*cosine;}}"
413	"public void test(){ final double p=previous.getValue(); final double c=current.getValue(); final double difference=FastMath.abs(p-c); final double size=FastMath.max(FastMath.abs(p),FastMath.abs(c));return difference<=size*getRelativeThreshold()||difference<=getAbsoluteThreshold();}"
414	"public void test(){for(int i=0;i<residuals.length;++i){residuals[i]-=observations[i];}}"
415	"public void test(){for(int i=0;i<residuals.length;++i){ final double ri=residuals[i];sumSquares+=weights[i]*ri;}}"
416	"public void test(){for(int i=0;i<rows;i++){qtf[i]=weightedResiduals[i];}}"
417	"public void test(){for(int i=0;i<=j;++i){sum+=weightedResidualJacobian[i][pj]*qtf[i];}}"
418	"public void test(){for(int i=0;i<=j;++i){work1[i]+=weightedResidualJacobian[i][pj]*dirJ;}}"
419	"public void test(){for(int i=0;i<k;++i){lmDir[permutation[i]]-=ypk*weightedResidualJacobian[i][pk];}}"
420	"public void test(){for(int i=0;i<j;++i){sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];}}"
421	"public void test(){for(int i=0;i<=j;++i){sum+=weightedResidualJacobian[i][pj]*qy[i];}}"
422	"public void test(){for(int i=j+1;i<solvedCols;++i){work1[permutation[i]]-=weightedResidualJacobian[i][pj]*tmp;}}"
423	"public void test(){for(int i=j+1;i<solvedCols;++i){weightedResidualJacobian[i][pj]=weightedResidualJacobian[j][permutation[i]];}}"
424	"public void test(){for(int i=k+1;i<solvedCols;++i){double rik=weightedResidualJacobian[i][pk]; final double temp2=cos*rik+sin*lmDiag[i];lmDiag[i]=-sin*rik+cos*lmDiag[i];weightedResidualJacobian[i][pk]=temp2;}}"
425	"public void test(){for(int i=j+1;i<nSing;++i){sum+=weightedResidualJacobian[i][pj]*work[i];}}"
426	"public void test(){for(int i=0;i<weightedResidualJacobian.length;++i){double akk=weightedResidualJacobian[i][k];norm2+=akk*akk;}}"
427	"public void test(){for(int i=k;i<cols;++i){double norm2=0;for(int j=k;j<weightedResidualJacobian.length;++j){double aki=weightedResidualJacobian[j][permutation[i]];norm2+=aki*aki;}if(Double.isInfinite(norm2)||Double.isNaN(norm2)){throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);}if(norm2>ak2){nextColumn=i;ak2=norm2;}}}"
428	"public void test(){for(int j=k;j<weightedResidualJacobian.length;++j){double aki=weightedResidualJacobian[j][permutation[i]];norm2+=aki*aki;}}"
429	"public void test(){if(norm2>ak2){nextColumn=i;ak2=norm2;}}"
430	"public void test(){for(int i=k;i<rows;++i){gamma+=weightedResidualJacobian[i][pk]*y[i];}}"
431	"public void test(){for(int i=k;i<rows;++i){y[i]-=gamma*weightedResidualJacobian[i][pk];}}"
432	"public void test(){for(int i=0;i<n;++i){r[i]=-r[i];}}"
433	"public void test(){for(int i=0;i<n;++i){delta+=r[i]*searchDirection[i];}}"
434	"public void test(){for(int i=0;i<point.length;++i){point[i]+=step*searchDirection[i];}}"
435	"public void test(){for(int i=0;i<n;++i){delta+=r[i]*newSteepestDescent[i];}}"
436	"public void test(){for(int i=0;i<r.length;++i){deltaMid+=r[i]*steepestDescent[i];}}"
437	"public void test(){for(int i=0;i<n;++i){searchDirection[i]=steepestDescent[i]+beta*searchDirection[i];}}"
438	"public void test(){for(int i=0;i<shiftedPoint.length;++i){shiftedPoint[i]+=x*searchDirection[i];}}"
439	"public void test(){for(int i=0;i<gradient.length;++i){dotProduct+=gradient[i]*searchDirection[i];}}"
440	"public void test(){for(int i=0;i<rows;++i){ final double[] grad=weightedResidualJacobian[i]; final double weight=residualsWeights[i]; final double residual=objective[i]-targetValues[i]; final double wr=weight*residual;for(int j=0;j<cols;++j){b[j]+=wr*grad[j];}for(int k=0;k<cols;++k){double[] ak=a[k];double wgk=weight*grad[k];for(int l=0;l<cols;++l){ak[l]+=wgk*grad[l];}}}}"
441	"public void test(){ final double[] grad=weightedResidualJacobian[i]; final double weight=residualsWeights[i]; final double residual=objective[i]-targetValues[i]; final double wr=weight*residual;for(int j=0;j<cols;++j){b[j]+=wr*grad[j];}for(int k=0;k<cols;++k){double[] ak=a[k];double wgk=weight*grad[k];for(int l=0;l<cols;++l){ak[l]+=wgk*grad[l];}}}"
442	"public void test(){for(int i=0;i<cols;++i){point[i]+=dX[i];}}"
443	"public void test(){for(int i=0;i<rows;i++){ final double[] ji=weightedResidualJacobian[i];double wi=FastMath.sqrt(residualsWeights[i]);for(int j=0;j<cols;++j){weightedResidualJacobian[i][j]=-ji[j]*wi;}}}"
444	"public void test(){for(int j=0;j<cols;++j){weightedResidualJacobian[i][j]=-ji[j]*wi;}}"
445	"public void test(){for(int i=0;i<rows;i++){ final double residual=targetValues[i]-objective[i];weightedResiduals[i]=residual*FastMath.sqrt(residualsWeights[i]);cost+=residualsWeights[i]*residual;index+=cols;}}"
446	"public void test(){for(int i=0;i<cols;++i){for(int j=i;j<cols;++j){double sum=0;for(int k=0;k<rows;++k){sum+=weightedResidualJacobian[k][i]*weightedResidualJacobian[k][j];}jTj[i][j]=sum;jTj[j][i]=sum;}}}"
447	"public void test(){for(int j=i;j<cols;++j){double sum=0;for(int k=0;k<rows;++k){sum+=weightedResidualJacobian[k][i]*weightedResidualJacobian[k][j];}jTj[i][j]=sum;jTj[j][i]=sum;}}"
448	"public void test(){for(int k=0;k<rows;++k){sum+=weightedResidualJacobian[k][i]*weightedResidualJacobian[k][j];}}"
449	"public void test(){for(int i=0;i<errors.length;++i){errors[i]=FastMath.sqrt(covar[i][i])*c;}}"
450	"public void test(){for(int i=0;i<p.length;++i){ final double pi=p[i]; final double ci=c[i]; final double difference=Math.abs(pi-ci); final double size=Math.max(Math.abs(pi),Math.abs(ci));if(difference>size*getRelativeThreshold()&&difference>getAbsoluteThreshold()){return false;}}}"
451	"public void test(){double x=mid;double v=x;double w=x;double d=0;double e=0;double fx=computeObjectiveValue(x);if(!isMinim){fx=-fx;}}"
452	"public void test(){p=(x-v)*q-(x-w)*r;q=2*(q-r);if(q>0){p=-p;}else {q=-q;}r=e;e=d;}"
453	"public void test(){{d=p/q;u=x+d;if(u-a<tol2||b-u<tol2){if(x<=m){d=tol1;}else {d=-tol1;}}}}"
454	"public void test(){if(x<=m){d=tol1;}else {d=-tol1;}}"
455	"public void test(){{if(x<m){e=b-x;}else {e=a-x;}d=GOLDEN_SECTION*e;}}"
456	"public void test(){if(FastMath.abs(d)<tol1){if(d>=0){u=x+tol1;}else {u=x-tol1;}}else {u=x+d;}}"
457	"public void test(){if(d>=0){u=x+tol1;}else {u=x-tol1;}}"
458	"public void test(){for(int i=0;i<starts;++i){try{ final double s=(i==0)?startValue:min+generator.nextDouble()*(max-min);optima[i]=optimizer.optimize(maxEval-totalEvaluations,f,goal,min,max,s);}catch (MathUserException mue) {  lastException=mue;  optima[i]=null;}totalEvaluations+=optimizer.getEvaluations();}}"
459	"public void test(){for(int i=0;i<getOriginalNumDecisionVariables();i++){columnLabels.add(""x""+i);}}"
460	"public void test(){for(int i=0;i<getNumSlackVariables();i++){columnLabels.add(""s""+i);}}"
461	"public void test(){for(int i=0;i<getNumArtificialVariables();i++){columnLabels.add(""a""+i);}}"
462	"public void test(){int width=numDecisionVariables+numSlackVariables;int height=constraints.size()+getNumObjectiveFunctions();Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);if(getNumObjectiveFunctions()==2){matrix.setEntry(0,0,-1);}int zIndex=(getNumObjectiveFunctions()==1)?0:1;matrix.setEntry(zIndex,zIndex,maximize?1:-1);RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();}"
463	"public void test(){for(int i=0;i<constraints.size();i++){LinearConstraint constraint=constraints.get(i);int row=getNumObjectiveFunctions()+i;copyArray(constraint.getCoefficients().getData(),matrix.getDataRef()[row]);if(!restrictToNonNegative){matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoeffiecientSum(constraint.getCoefficients()));}matrix.setEntry(row,width-1,constraint.getValue());if(constraint.getRelationship()==Relationship.LEQ){matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);}else if(constraint.getRelationship()==Relationship.GEQ){matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);}if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));}}}"
464	"public void test(){LinearConstraint constraint=constraints.get(i);int row=getNumObjectiveFunctions()+i;copyArray(constraint.getCoefficients().getData(),matrix.getDataRef()[row]);if(!restrictToNonNegative){matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoeffiecientSum(constraint.getCoefficients()));}matrix.setEntry(row,width-1,constraint.getValue());if(constraint.getRelationship()==Relationship.LEQ){matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);}else if(constraint.getRelationship()==Relationship.GEQ){matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);}}"
465	"public void test(){for(int i=0;i<getHeight();i++){if(MathUtils.equals(getEntry(i,col),1.0,epsilon)&&(row==null)){row=i;}else if(!MathUtils.equals(getEntry(i,col),0.0,epsilon)){return null;}}}"
466	"public void test(){if(MathUtils.equals(getEntry(i,col),1.0,epsilon)&&(row==null)){row=i;}else if(!MathUtils.equals(getEntry(i,col),0.0,epsilon)){return null;}}"
467	"public void test(){if(!MathUtils.equals(getEntry(i,col),0.0,epsilon)){return null;}}"
468	"public void test(){for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){if(MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon)>0){columnsToDrop.add(i);}}}"
469	"public void test(){if(MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon)>0){columnsToDrop.add(i);}}"
470	"public void test(){for(int i=0;i<getNumArtificialVariables();i++){int col=i+getArtificialVariableOffset();if(getBasicRow(col)==null){columnsToDrop.add(col);}}}"
471	"public void test(){for(int i=0;i<getNumArtificialVariables();i++){int col=i+getArtificialVariableOffset();if(getBasicRow(col)==null){columnsToDrop.add(col);}}double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];for(int i=1;i<getHeight();i++){int col=0;for(int j=0;j<getWidth();j++){if(!columnsToDrop.contains(j)){matrix[i-1][col++]=tableau.getEntry(i,j);}}}}"
472	"public void test(){for(int i=1;i<getHeight();i++){int col=0;for(int j=0;j<getWidth();j++){if(!columnsToDrop.contains(j)){matrix[i-1][col++]=tableau.getEntry(i,j);}}}}"
473	"public void test(){if(!columnsToDrop.contains(j)){matrix[i-1][col++]=tableau.getEntry(i,j);}}"
474	"public void test(){for(int i=columnsToDrop.size()-1;i>=0;i--){columnLabels.remove((int)columnsToDrop.get(i));}}"
475	"public void test(){for(int i=getNumObjectiveFunctions();i<getWidth()-1;i++){if(MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon)<0){return false;}}}"
476	"public void test(){if(MathUtils.compareTo(tableau.getEntry(0,i),0,epsilon)<0){return false;}}"
477	"public void test(){for(int i=0;i<coefficients.length;i++){int colIndex=columnLabels.indexOf(""x""+i);if(colIndex<0){coefficients[i]=0;continue;}Integer basicRow=getBasicRow(colIndex);if(basicRows.contains(basicRow)){coefficients[i]=0;}else {basicRows.add(basicRow);coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);}}}"
478	"public void test(){if(colIndex<0){coefficients[i]=0;continue;}}"
479	"public void test(){if(basicRows.contains(basicRow)){coefficients[i]=0;}else {basicRows.add(basicRow);coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);}}"
480	"public void test(){for(int i=0;i<sub.length;++i){sub[i]=lhsCoefficients[i]-rhsCoefficients[i];}}"
481	"public void test(){for(int i=tableau.getNumObjectiveFunctions();i<tableau.getWidth()-1;i++){if(MathUtils.compareTo(tableau.getEntry(0,i),minValue,epsilon)<0){minValue=tableau.getEntry(0,i);minPos=i;}}}"
482	"public void test(){if(MathUtils.compareTo(tableau.getEntry(0,i),minValue,epsilon)<0){minValue=tableau.getEntry(0,i);minPos=i;}}"
483	"public void test(){for(int i=tableau.getNumObjectiveFunctions();i<tableau.getHeight();i++){ final double rhs=tableau.getEntry(i,tableau.getWidth()-1); final double entry=tableau.getEntry(i,col);if(MathUtils.compareTo(entry,0,epsilon)>0){ final double ratio=rhs/entry;if(MathUtils.equals(ratio,minRatio,epsilon)){minRatioPositions.add(i);}else if(ratio<minRatio){minRatio=ratio;minRatioPositions=new ArrayList<Integer>();minRatioPositions.add(i);}}}}"
484	"public void test(){if(MathUtils.equals(ratio,minRatio,epsilon)){minRatioPositions.add(i);}else if(ratio<minRatio){minRatio=ratio;minRatioPositions=new ArrayList<Integer>();minRatioPositions.add(i);}}"
485	"public void test(){if(ratio<minRatio){minRatio=ratio;minRatioPositions=new ArrayList<Integer>();minRatioPositions.add(i);}}"
486	"public void test(){if(minRatioPositions.size()==0){return null;}else if(minRatioPositions.size()>1){for(Integer row : minRatioPositions){for(int i=0;i<tableau.getNumArtificialVariables();i++){int column=i+tableau.getArtificialVariableOffset();if(MathUtils.equals(tableau.getEntry(row,column),1,epsilon)&&row.equals(tableau.getBasicRow(column))){return row;}}}}}"
487	"public void test(){if(minRatioPositions.size()>1){for(Integer row : minRatioPositions){for(int i=0;i<tableau.getNumArtificialVariables();i++){int column=i+tableau.getArtificialVariableOffset();if(MathUtils.equals(tableau.getEntry(row,column),1,epsilon)&&row.equals(tableau.getBasicRow(column))){return row;}}}}}"
488	"public void test(){for(int i=0;i<tableau.getNumArtificialVariables();i++){int column=i+tableau.getArtificialVariableOffset();if(MathUtils.equals(tableau.getEntry(row,column),1,epsilon)&&row.equals(tableau.getBasicRow(column))){return row;}}}"
489	"public void test(){if(minRatioPositions.size()==0){return null;}else if(minRatioPositions.size()>1){for(Integer row : minRatioPositions){for(int i=0;i<tableau.getNumArtificialVariables();i++){int column=i+tableau.getArtificialVariableOffset();if(MathUtils.equals(tableau.getEntry(row,column),1,epsilon)&&row.equals(tableau.getBasicRow(column))){return row;}}}}return minRatioPositions.get(0);}"
490	"public void test(){for(int i=0;i<tableau.getHeight();i++){if(i!=pivotRow){double multiplier=tableau.getEntry(i,pivotCol);tableau.subtractRow(i,pivotRow,multiplier);}}}"
491	"public void test(){if(i!=pivotRow){double multiplier=tableau.getEntry(i,pivotCol);tableau.subtractRow(i,pivotRow,multiplier);}}"
492	"public void test(){for(int i=0;i<p.length;++i){ final double difference=FastMath.abs(p[i]-c[i]); final double size=FastMath.max(FastMath.abs(p[i]),FastMath.abs(c[i]));if(difference>size*getRelativeThreshold()&&difference>getAbsoluteThreshold()){return false;}}}"
493	"public void test(){for(int i=0;i<simplex.getSize();i++){ @SuppressWarnings(""null"") RealPointValuePair prev=previous[i];converged&=checker.converged(iteration,prev,simplex.getPoint(i));}}"
494	"public void test(){for(int i=0;i<dimension;i++){ final double[] vertexI=startConfiguration[i];for(int j=0;j<i+1;j++){if(steps[j]==0){throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);}System.arraycopy(steps,0,vertexI,0,j+1);}}}"
495	"public void test(){for(int j=0;j<i+1;j++){if(steps[j]==0){throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);}System.arraycopy(steps,0,vertexI,0,j+1);}}"
496	"public void test(){ final double[] refI=referenceSimplex[i];if(refI.length!=dimension){throw new DimensionMismatchException(refI.length,dimension);}for(int j=0;j<i;j++){ final double[] refJ=referenceSimplex[j];boolean allEquals=true;for(int k=0;k<dimension;k++){if(refI[k]!=refJ[k]){allEquals=false;break;}}if(allEquals){throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,i,j);}}}"
497	"public void test(){for(int j=0;j<i;j++){ final double[] refJ=referenceSimplex[j];boolean allEquals=true;for(int k=0;k<dimension;k++){if(refI[k]!=refJ[k]){allEquals=false;break;}}if(allEquals){throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,i,j);}}}"
498	"public void test(){if(allEquals){throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,i,j);}}"
499	"public void test(){if(i>0){ final double[] confI=startConfiguration[i-1];for(int k=0;k<dimension;k++){confI[k]=refI[k]-ref0[k];}}}"
500	"public void test(){for(int i=0;i<dimension;i++){ final double[] confI=startConfiguration[i]; final double[] vertexI=new double[dimension];for(int k=0;k<dimension;k++){vertexI[k]=startPoint[k]+confI[k];}simplex[i+1]=new RealPointValuePair(vertexI,Double.NaN);}}"
501	"public void test(){for(int i=0;i<simplex.length;i++){ final RealPointValuePair vertex=simplex[i]; final double[] point=vertex.getPointRef();if(Double.isNaN(vertex.getValue())){simplex[i]=new RealPointValuePair(point,evaluationFunction.value(point),false);}}}"
502	"public void test(){if(Double.isNaN(vertex.getValue())){simplex[i]=new RealPointValuePair(point,evaluationFunction.value(point),false);}}"
503	"public void test(){for(int i=0;i<dimension;i++){if(comparator.compare(simplex[i],pointValuePair)>0){RealPointValuePair tmp=simplex[i];simplex[i]=pointValuePair;pointValuePair=tmp;}}}"
504	"public void test(){if(comparator.compare(simplex[i],pointValuePair)>0){RealPointValuePair tmp=simplex[i];simplex[i]=pointValuePair;pointValuePair=tmp;}}"
505	"public void test(){for(int i=0;i<n;i++){steps[i]=sideLength;}}"
506	"public void test(){for(int i=1;i<getSize();i++){ final double[] xOriginal=original[i].getPointRef(); final double[] xTransformed=new double[dim];for(int j=0;j<dim;j++){xTransformed[j]=xSmallest[j]+coeff*(xSmallest[j]-xOriginal[j]);}setPoint(i,new RealPointValuePair(xTransformed,Double.NaN,false));}}"
507	"public void test(){for(int i=0;i<n;i++){ final double[] x=getPoint(i).getPointRef();for(int j=0;j<n;j++){centroid[j]+=x[j];}}}"
508	"public void test(){for(int i=1;i<=n;i++){ final double[] x=getPoint(i).getPoint();for(int j=0;j<n;j++){x[j]=xSmallest[j]+sigma*(x[j]-xSmallest[j]);}setPoint(i,new RealPointValuePair(x,Double.NaN,false));}}"
509	"public void test(){for(int i=0;i<checkFeasableCount+1;i++){if(diagonalOnly<=0)arxk=xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));else arxk=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));if(i>=checkFeasableCount||fitfun.isFeasible(arxk.getColumn(0)))break;arz.setColumn(k,randn(dimension));}}"
510	"public void test(){for(int i=0;i<dimension;i++){if(sigma*(Math.max(Math.abs(pcCol[i]),sqrtDiagC[i]))>stopTolX)break;if(i>=dimension-1)break;}}"
511	"public void test(){for(int i=0;i<init.length;i++){if(boundaries[0][i]>init[i]||boundaries[1][i]<init[i])throw new OutOfRangeException(init[i],boundaries[0][i],boundaries[1][i]);}}"
512	"public void test(){for(int i=0;i<init.length;i++){if(inputSigma[i]<0)throw new NotPositiveException(inputSigma[i]);if(boundaries!=null){if(inputSigma[i]>1.0)throw new OutOfRangeException(inputSigma[i],0,1.0);}}}"
513	"public void test(){for(int i=0;i<mu;i++){double w=weights.getEntry(i,0);sumw+=w;sumwq+=w*w;}}"
514	"public void test(){for(int i=0;i<x.length;i++){double diff=boundaries[1][i]-boundaries[0][i];res[i]=(x[i]-boundaries[0][i])/diff;}}"
515	"public void test(){for(int i=0;i<x.length;i++){double diff=boundaries[1][i]-boundaries[0][i];res[i]=diff*x[i]+boundaries[0][i];}}"
516	"public void test(){for(int i=0;i<x.length;i++){if(x[i]<0)return false;if(x[i]>1.0)return false;}}"
517	"public void test(){for(int i=0;i<x.length;i++){if(x[i]<0)repaired[i]=0;else if(x[i]>1.0)repaired[i]=1.0;else repaired[i]=x[i];}}"
518	"public void test(){if(x[i]<0)repaired[i]=0;else if(x[i]>1.0)repaired[i]=1.0;else repaired[i]=x[i];}"
519	"public void test(){if(x[i]>1.0)repaired[i]=1.0;else repaired[i]=x[i];}"
520	"public void test(){for(int i=0;i<x.length;i++){double diff=Math.abs(x[i]-repaired[i]);penalty+=diff*valueRange;}}"
521	"public void test(){int size=(int)((end-start)/step+1);double[][] d=new double[size][1];double value=start;for(int r=0;r<size;r++){d[r][0]=value;value+=step;}return new Array2DRowRealMatrix(d,false);}"
522	"public void test(){for(int r=0;r<size;r++){d[r][0]=value;value+=step;}}"
523	"public void test(){double[] randn=new double[size];for(int i=0;i<size;i++)randn[i]=random.nextGaussian();return randn;}"
524	"public void test(){double[][] d=new double[size][popSize];for(int r=0;r<size;r++)for(int c=0;c<popSize;c++)d[r][c]=random.nextGaussian();return new Array2DRowRealMatrix(d,false);}"
525	"public void test(){for(int i=0;i<n;i++){direc[i][i]=1;}}"
526	"public void test(){for(int i=0;i<n;i++){ final double[] d=MathUtils.copyOf(direc[i]);fX2=fVal; final UnivariateRealPointValuePair optimum=line.search(x,d);fVal=optimum.getValue();alphaMin=optimum.getPoint(); final double[][] result=newPointAndDirection(x,d,alphaMin);x=result[0];if((fX2-fVal)>delta){delta=fX2-fVal;bigInd=i;}}}"
527	"public void test(){if((fX2-fVal)>delta){delta=fX2-fVal;bigInd=i;}}"
528	"public void test(){for(int i=0;i<n;i++){d[i]=x[i]-x1[i];x2[i]=2*x[i]-x1[i];}}"
529	"public void test(){for(int i=0;i<n;i++){nD[i]=d[i]*optimum;nP[i]=p[i]+nD[i];}}"
530	"public void test(){for(int i=0;i<starts;++i){try{optima[i]=optimizer.optimize(maxEval-totalEvaluations,f,goal,i==0?startPoint:generator.nextVector());}catch (MathUserException mue) {  lastException=mue;  optima[i]=null;}totalEvaluations+=optimizer.getEvaluations();}}"
531	"public void test(){for(int i=LANCZOS.length-1;i>0;--i){sum=sum+(LANCZOS[i]/(x+i));}}"
532	"public void test(){double b=hi;double fb=fHi;double c=a;double fc=fa;double d=b-a;double e=d; final double t=getAbsoluteAccuracy(); final double eps=getRelativeAccuracy();}"
533	"public void test(){{d=m;e=d;}}"
534	"public void test(){if(p>0){q=-q;}else {p=-p;}s=e;e=d;if(p>=1.5*m-FastMath.abs(tol*q)||p>=FastMath.abs(0.5*s)){d=m;e=d;}else {d=p/q;}}"
535	"public void test(){if(p>=1.5*m-FastMath.abs(tol*q)||p>=FastMath.abs(0.5*s)){d=m;e=d;}else {d=p/q;}}"
536	"public void test(){if(FastMath.abs(d)>tol){b+=d;}else if(m>0){b+=tol;}else {b-=tol;}}"
537	"public void test(){if((fb>0&&fc>0)||(fb<=0&&fc<=0)){c=a;fc=fa;d=b-a;e=d;}}"
538	"public void test(){for(int i=0;i<coefficients.length;i++){c[i]=new Complex(coefficients[i],0);}}"
539	"public void test(){for(int i=0;i<root.length;i++){if(complexSolver.isRoot(lo,hi,root[i])){r=root[i].getReal();break;}}}"
540	"public void test(){if(complexSolver.isRoot(lo,hi,root[i])){r=root[i].getReal();break;}}"
541	"public void test(){for(int i=0;i<c.length;i++){c[i]=new Complex(coefficients[i],0);}}"
542	"public void test(){for(int i=0;i<=n;i++){c[i]=coefficients[i];}}"
543	"public void test(){for(int i=0;i<n;i++){Complex subarray[]=new Complex[n-i+1];System.arraycopy(c,0,subarray,0,subarray.length);root[i]=solve(subarray,initial);Complex newc=c[n-i];Complex oldc=null;for(int j=n-i;j>=0;j--){oldc=c[j];c[j]=newc;newc=oldc.add(newc.multiply(root[i]));}}}"
544	"public void test(){for(int j=n-i;j>=0;j--){oldc=c[j];c[j]=newc;newc=oldc.add(newc.multiply(root[i]));}}"
545	"public void test(){ final int maxDegree=(int)FastMath.floor(FastMath.sqrt(2*coefficients.size()))-1;synchronized(PolynomialsUtils.class){if(degree>maxDegree){computeUpToDegree(degree,maxDegree,generator,coefficients);}} final int start=degree*(degree+1)/2; final double[] a=new double[degree+1];for(int i=0;i<=degree;++i){a[i]=coefficients.get(start+i).doubleValue();}return new PolynomialFunction(a);}"
546	"public void test(){for(int i=0;i<=degree;++i){a[i]=coefficients.get(start+i).doubleValue();}}"
547	"public void test(){int startKm1=startK;startK+=k;BigFraction[] ai=generator.generate(k);BigFraction ck=coefficients.get(startK);BigFraction ckm1=coefficients.get(startKm1);coefficients.add(ck.multiply(ai[0]).subtract(ckm1.multiply(ai[2])));for(int i=1;i<k;++i){ final BigFraction ckPrev=ck;ck=coefficients.get(startK+i);ckm1=coefficients.get(startKm1+i);coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));}}"
548	"public void test(){BigFraction[] ai=generator.generate(k);BigFraction ck=coefficients.get(startK);BigFraction ckm1=coefficients.get(startKm1);coefficients.add(ck.multiply(ai[0]).subtract(ckm1.multiply(ai[2])));for(int i=1;i<k;++i){ final BigFraction ckPrev=ck;ck=coefficients.get(startK+i);ckm1=coefficients.get(startKm1+i);coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));}}"
549	"public void test(){for(int i=1;i<k;++i){ final BigFraction ckPrev=ck;ck=coefficients.get(startK+i);ckm1=coefficients.get(startKm1+i);coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));}}"
550	"public void test(){for(int i=1;i<k;++i){ final BigFraction ckPrev=ck;ck=coefficients.get(startK+i);ckm1=coefficients.get(startKm1+i);coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));} final BigFraction ckPrev=ck;ck=coefficients.get(startK+k);coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])));coefficients.add(ck.multiply(ai[1]));}"
551	"public void test(){if(v<knots[0]||v>knots[n]){throw new OutOfRangeException(v,knots[0],knots[n]);}int i=Arrays.binarySearch(knots,v);if(i<0){i=-i-2;}if(i>=polynomials.length){i--;}return polynomials[i].value(v-knots[i]);}"
552	"public void test(){if(i<0){i=-i-2;}}"
553	"public void test(){if(i>=polynomials.length){i--;}}"
554	"public void test(){for(int i=0;i<n;i++){derivativePolynomials[i]=polynomials[i].polynomialDerivative();}}"
555	"public void test(){for(int i=0;i<lowLength;++i){newCoefficients[i]=coefficients[i]+p.coefficients[i];}}"
556	"public void test(){for(int i=0;i<lowLength;++i){newCoefficients[i]=coefficients[i]-p.coefficients[i];}}"
557	"public void test(){for(int i=lowLength;i<highLength;++i){newCoefficients[i]=-p.coefficients[i];}}"
558	"public void test(){for(int i=0;i<coefficients.length;++i){newCoefficients[i]=-coefficients[i];}}"
559	"public void test(){for(int i=0;i<newCoefficients.length;++i){newCoefficients[i]=0.0;for(int j=FastMath.max(0,i+1-p.coefficients.length);j<FastMath.min(coefficients.length,i+1);++j){newCoefficients[i]+=coefficients[j]*p.coefficients[i-j];}}}"
560	"public void test(){for(int j=FastMath.max(0,i+1-p.coefficients.length);j<FastMath.min(coefficients.length,i+1);++j){newCoefficients[i]+=coefficients[j]*p.coefficients[i-j];}}"
561	"public void test(){for(int i=n-1;i>0;i--){result[i-1]=i*coefficients[i];}}"
562	"public void test(){if(coefficients[i]<0){s.append("" - "");}else {s.append("" + "");}}"
563	"public void test(){if(coefficients[i]<0){s.append(""-"");}}"
564	"public void test(){if(s.length()>0){if(coefficients[i]<0){s.append("" - "");}else {s.append("" + "");}}else {if(coefficients[i]<0){s.append(""-"");}}double absAi=FastMath.abs(coefficients[i]);if((absAi-1)!=0){s.append(toString(absAi));s.append(' ');}}"
565	"public void test(){if(i>1){s.append('^');s.append(Integer.toString(i));}}"
566	"public void test(){for(int i=0;i<parameters.length;++i){gradient[i]=xn;xn*=x;}}"
567	"public void test(){for(int i=n-1;i>=0;i--){value=a[i]+(z-c[i])*value;}}"
568	"public void test(){for(int i=0;i<=n;i++){coefficients[i]=0.0;}}"
569	"public void test(){for(int i=n-1;i>=0;i--){for(int j=n-i;j>0;j--){coefficients[j]=coefficients[j-1]-c[i]*coefficients[j];}coefficients[0]=a[i]-c[i]*coefficients[0];}}"
570	"public void test(){for(int j=n-i;j>0;j--){coefficients[j]=coefficients[j-1]-c[i]*coefficients[j];}}"
571	"public void test(){for(int i=0;i<n;i++){c[i]=y[i];d[i]=y[i]; final double dist=FastMath.abs(z-x[i]);if(dist<min_dist){nearest=i;min_dist=dist;}}}"
572	"public void test(){if(dist<min_dist){nearest=i;min_dist=dist;}}"
573	"public void test(){for(int i=1;i<n;i++){for(int j=0;j<n-i;j++){ final double tc=x[j]-z; final double td=x[i+j]-z; final double divider=x[j]-x[i+j]; final double w=(c[j+1]-d[j])/divider;c[j]=tc*w;d[j]=td*w;}if(nearest<0.5*(n-i+1)){value+=c[nearest];}else {nearest--;value+=d[nearest];}}}"
574	"public void test(){for(int j=0;j<n-i;j++){ final double tc=x[j]-z; final double td=x[i+j]-z; final double divider=x[j]-x[i+j]; final double w=(c[j+1]-d[j])/divider;c[j]=tc*w;d[j]=td*w;}}"
575	"public void test(){if(nearest<0.5*(n-i+1)){value+=c[nearest];}else {nearest--;value+=d[nearest];}}"
576	"public void test(){for(int i=0;i<n;i++){coefficients[i]=0.0;}}"
577	"public void test(){for(int i=0;i<n;i++){for(int j=i;j>0;j--){c[j]=c[j-1]-c[j]*x[i];}c[0]*=-x[i];c[i+1]=1;}}"
578	"public void test(){for(int j=i;j>0;j--){c[j]=c[j-1]-c[j]*x[i];}}"
579	"public void test(){for(int i=0;i<n;i++){double d=1;for(int j=0;j<n;j++){if(i!=j){d*=x[i]-x[j];}} final double t=y[i]/d;tc[n-1]=c[n];coefficients[n-1]+=t*tc[n-1];for(int j=n-2;j>=0;j--){tc[j]=c[j+1]+tc[j+1]*x[i];coefficients[j]+=t*tc[j];}}}"
580	"public void test(){if(i!=j){d*=x[i]-x[j];}}"
581	"public void test(){for(int j=n-2;j>=0;j--){tc[j]=c[j+1]+tc[j+1]*x[i];coefficients[j]+=t*tc[j];}}"
582	"public void test(){previousRow=currentRow;currentRow=tmpRow;currentRow[0]=qtrap.stage(f,min,max,i);for(int j=1;j<=i;j++){ final double r=(1L<<(2*j))-1; final double tIJm1=currentRow[j-1];currentRow[j]=tIJm1+(tIJm1-previousRow[j-1])/r;} final double s=currentRow[i];}"
583	"public void test(){for(int j=1;j<=i;j++){ final double r=(1L<<(2*j))-1; final double tIJm1=currentRow[j-1];currentRow[j]=tIJm1+(tIJm1-previousRow[j-1])/r;}}"
584	"public void test(){for(int j=1;j<=i;j++){ final double r=(1L<<(2*j))-1; final double tIJm1=currentRow[j-1];currentRow[j]=tIJm1+(tIJm1-previousRow[j-1])/r;} final double s=currentRow[i];if(i>=minimalIterationCount){ final double delta=FastMath.abs(s-olds); final double rLimit=relativeAccuracy*(FastMath.abs(olds)+FastMath.abs(s));if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(s,i);return result;}}}"
585	"public void test(){if(i>=minimalIterationCount){ final double delta=FastMath.abs(s-olds); final double rLimit=relativeAccuracy*(FastMath.abs(olds)+FastMath.abs(s));if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(s,i);return result;}}}"
586	"public void test(){if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(s,i);return result;}}"
587	"public void test(){for(int i=0;i<maximalIterationCount;++i){ final double t=stage(f,min,max,n); final double delta=FastMath.abs(t-oldt); final double limit=FastMath.max(absoluteAccuracy,relativeAccuracy*(FastMath.abs(oldt)+FastMath.abs(t)));if((i+1>=minimalIterationCount)&&(delta<=limit)){setResult(t,i);return result;}double ratio=FastMath.min(4,FastMath.pow(delta/limit,0.5/abscissas.length));n=FastMath.max((int)(ratio*n),n+1);oldt=t;}}"
588	"public void test(){if((i+1>=minimalIterationCount)&&(delta<=limit)){setResult(t,i);return result;}}"
589	"public void test(){for(int i=0;i<n;++i){for(int j=0;j<abscissas.length;++j){sum+=weights[j]*f.value(midPoint+halfStep*abscissas[j]);}midPoint+=step;}}"
590	"public void test(){for(int i=1;i<=maximalIterationCount;++i){ final double t=stage(f,min,max,i);if(i>=minimalIterationCount){ final double delta=FastMath.abs(t-oldt); final double rLimit=relativeAccuracy*(FastMath.abs(oldt)+FastMath.abs(t));if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(t,i);return result;}}oldt=t;}}"
591	"public void test(){if(i>=minimalIterationCount){ final double delta=FastMath.abs(t-oldt); final double rLimit=relativeAccuracy*(FastMath.abs(oldt)+FastMath.abs(t));if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(t,i);return result;}}}"
592	"public void test(){if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(t,i);return result;}}"
593	"public void test(){for(int i=1;i<=maximalIterationCount;++i){ final double t=qtrap.stage(f,min,max,i); final double s=(4*t-oldt)/3.0;if(i>=minimalIterationCount){ final double delta=FastMath.abs(s-olds); final double rLimit=relativeAccuracy*(FastMath.abs(olds)+FastMath.abs(s));if((delta<=rLimit)||(delta<=absoluteAccuracy)){setResult(s,i);return result;}}olds=s;oldt=t;}}"
594	"public void test(){for(int i=0;i<n;i++){m[i]=(y[i+1]-y[i])/(x[i+1]-x[i]);}}"
595	"public void test(){for(int i=0;i<n;i++){coefficients[0]=y[i];coefficients[1]=m[i];polynomials[i]=new PolynomialFunction(coefficients);}}"
596	"public void test(){for(int i=1;i<n;i++){for(int j=0;j<n-i;j++){ final double denominator=x[j+i]-x[j];divdiff[j]=(divdiff[j+1]-divdiff[j])/denominator;}a[i]=divdiff[0];}}"
597	"public void test(){for(int j=0;j<n-i;j++){ final double denominator=x[j+i]-x[j];divdiff[j]=(divdiff[j+1]-divdiff[j])/denominator;}}"
598	"public void test(){for(int i=0;i<xLen;i++){if(fval[i].length!=yLen){throw new DimensionMismatchException(fval[i].length,yLen);}for(int j=0;j<yLen;j++){if(fval[i][j].length!=zLen){throw new DimensionMismatchException(fval[i][j].length,zLen);}for(int k=0;k<zLen;k++){ final double v=fval[i][j][k];fvalXY[k][i][j]=v;fvalZX[j][k][i]=v;}}}}"
599	"public void test(){if(fval[i].length!=yLen){throw new DimensionMismatchException(fval[i].length,yLen);}}"
600	"public void test(){if(fval[i][j].length!=zLen){throw new DimensionMismatchException(fval[i][j].length,zLen);}}"
601	"public void test(){for(int k=0;k<zLen;k++){ final double v=fval[i][j][k];fvalXY[k][i][j]=v;fvalZX[j][k][i]=v;}}"
602	"public void test(){for(int i=0;i<xLen;i++){xSplineYZ[i]=bsi.interpolate(yval,zval,fval[i]);}}"
603	"public void test(){for(int i=0;i<xLen;i++){ final double x=xval[i];for(int j=0;j<yLen;j++){ final double y=yval[j];dFdX[i][j][k]=f.partialDerivativeX(x,y);dFdY[i][j][k]=f.partialDerivativeY(x,y);d2FdXdY[i][j][k]=f.partialDerivativeXY(x,y);}}}"
604	"public void test(){for(int j=0;j<yLen;j++){ final double y=yval[j];dFdX[i][j][k]=f.partialDerivativeX(x,y);dFdY[i][j][k]=f.partialDerivativeY(x,y);d2FdXdY[i][j][k]=f.partialDerivativeXY(x,y);}}"
605	"public void test(){for(int i=0;i<xLen;i++){ final BicubicSplineInterpolatingFunction f=xSplineYZ[i];for(int j=0;j<yLen;j++){ final double y=yval[j];for(int k=0;k<zLen;k++){ final double z=zval[k];dFdZ[i][j][k]=f.partialDerivativeY(y,z);d2FdYdZ[i][j][k]=f.partialDerivativeXY(y,z);}}}}"
606	"public void test(){for(int k=0;k<zLen;k++){ final double z=zval[k];dFdZ[i][j][k]=f.partialDerivativeY(y,z);d2FdYdZ[i][j][k]=f.partialDerivativeXY(y,z);}}"
607	"public void test(){for(int i=0;i<xLen;i++){ final double x=xval[i];d2FdZdX[i][j][k]=f.partialDerivativeXY(z,x);}}"
608	"public void test(){for(int i=0;i<xLen;i++){ final int nI=nextIndex(i,xLen); final int pI=previousIndex(i);for(int j=0;j<yLen;j++){ final int nJ=nextIndex(j,yLen); final int pJ=previousIndex(j);for(int k=0;k<zLen;k++){ final int nK=nextIndex(k,zLen); final int pK=previousIndex(k);d3FdXdYdZ[i][j][k]=(fval[nI][nJ][nK]-fval[nI][pJ][nK]+fval[pI][pJ][nK]-fval[nI][nJ][pK]+fval[nI][pJ][pK]+fval[pI][nJ][pK]-fval[pI][pJ][pK])/((xval[nI]-xval[pI])*(yval[nJ]-yval[pJ]));}}}}"
609	"public void test(){for(int k=0;k<zLen;k++){ final int nK=nextIndex(k,zLen); final int pK=previousIndex(k);d3FdXdYdZ[i][j][k]=(fval[nI][nJ][nK]-fval[nI][pJ][nK]+fval[pI][pJ][nK]-fval[nI][nJ][pK]+fval[nI][pJ][pK]+fval[pI][nJ][pK]-fval[pI][pJ][pK])/((xval[nI]-xval[pI])*(yval[nJ]-yval[pJ]));}}"
610	"public void test(){ final int index=i+1;return index<max?index:index-1;}"
611	"public void test(){ final int index=i-1;return index>=0?index:0;}"
612	"public void test(){for(int i=0;i<n;i++){h[i]=x[i+1]-x[i];}}"
613	"public void test(){for(int i=1;i<n;i++){g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];mu[i]=h[i]/g;z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/g;}}"
614	"public void test(){for(int i=0;i<n;i++){coefficients[0]=y[i];coefficients[1]=b[i];coefficients[2]=c[i];coefficients[3]=d[i];polynomials[i]=new PolynomialFunction(coefficients);}}"
615	"public void test(){for(int i=0;i<lastI;i++){if(f[i].length!=yLen){throw new DimensionMismatchException(f[i].length,yLen);}if(dFdX[i].length!=yLen){throw new DimensionMismatchException(dFdX[i].length,yLen);}if(dFdY[i].length!=yLen){throw new DimensionMismatchException(dFdY[i].length,yLen);}if(d2FdXdY[i].length!=yLen){throw new DimensionMismatchException(d2FdXdY[i].length,yLen);} final int ip1=i+1;for(int j=0;j<lastJ;j++){ final int jp1=j+1; final double[] beta=new double[]{f[i][j],f[ip1][j],f[i][jp1],f[ip1][jp1],dFdX[i][j],dFdX[ip1][j],dFdX[i][jp1],dFdX[ip1][jp1],dFdY[i][j],dFdY[ip1][j],dFdY[i][jp1],dFdY[ip1][jp1],d2FdXdY[i][j],d2FdXdY[ip1][j],d2FdXdY[i][jp1],d2FdXdY[ip1][jp1]};splines[i][j]=new BicubicSplineFunction(computeSplineCoefficients(beta));}}}"
616	"public void test(){if(f[i].length!=yLen){throw new DimensionMismatchException(f[i].length,yLen);}}"
617	"public void test(){if(dFdX[i].length!=yLen){throw new DimensionMismatchException(dFdX[i].length,yLen);}}"
618	"public void test(){if(dFdY[i].length!=yLen){throw new DimensionMismatchException(dFdY[i].length,yLen);}}"
619	"public void test(){if(d2FdXdY[i].length!=yLen){throw new DimensionMismatchException(d2FdXdY[i].length,yLen);}}"
620	"public void test(){if(dFdY[i].length!=yLen){throw new DimensionMismatchException(dFdY[i].length,yLen);}if(d2FdXdY[i].length!=yLen){throw new DimensionMismatchException(d2FdXdY[i].length,yLen);} final int ip1=i+1;for(int j=0;j<lastJ;j++){ final int jp1=j+1; final double[] beta=new double[]{f[i][j],f[ip1][j],f[i][jp1],f[ip1][jp1],dFdX[i][j],dFdX[ip1][j],dFdX[i][jp1],dFdX[ip1][jp1],dFdY[i][j],dFdY[ip1][j],dFdY[i][jp1],dFdY[ip1][jp1],d2FdXdY[i][j],d2FdXdY[ip1][j],d2FdXdY[i][jp1],d2FdXdY[ip1][jp1]};splines[i][j]=new BicubicSplineFunction(computeSplineCoefficients(beta));}}"
621	"public void test(){for(int j=0;j<lastJ;j++){ final int jp1=j+1; final double[] beta=new double[]{f[i][j],f[ip1][j],f[i][jp1],f[ip1][jp1],dFdX[i][j],dFdX[ip1][j],dFdX[i][jp1],dFdX[ip1][jp1],dFdY[i][j],dFdY[ip1][j],dFdY[i][jp1],dFdY[ip1][jp1],d2FdXdY[i][j],d2FdXdY[ip1][j],d2FdXdY[i][jp1],d2FdXdY[ip1][jp1]};splines[i][j]=new BicubicSplineFunction(computeSplineCoefficients(beta));}}"
622	"public void test(){ final int i=searchIndex(x,xval);if(i==-1){throw new OutOfRangeException(x,xval[0],xval[xval.length-1]);} final int j=searchIndex(y,yval);if(j==-1){throw new OutOfRangeException(y,yval[0],yval[yval.length-1]);} final double xN=(x-xval[i])/(xval[i+1]-xval[i]); final double yN=(y-yval[j])/(yval[j+1]-yval[j]);return splines[i][j].value(xN,yN);}"
623	"public void test(){if(i==-1){throw new OutOfRangeException(x,xval[0],xval[xval.length-1]);}}"
624	"public void test(){if(partialDerivatives==null){computePartialDerivatives();} final int i=searchIndex(x,xval);if(i==-1){throw new OutOfRangeException(x,xval[0],xval[xval.length-1]);} final int j=searchIndex(y,yval);if(j==-1){throw new OutOfRangeException(y,yval[0],yval[yval.length-1]);} final double xN=(x-xval[i])/(xval[i+1]-xval[i]); final double yN=(y-yval[j])/(yval[j+1]-yval[j]);return partialDerivatives[which][i][j].value(xN,yN);}"
625	"public void test(){for(int i=0;i<lastI;i++){for(int j=0;j<lastJ;j++){ final BicubicSplineFunction f=splines[i][j];partialDerivatives[0][i][j]=f.partialDerivativeX();partialDerivatives[1][i][j]=f.partialDerivativeY();partialDerivatives[2][i][j]=f.partialDerivativeXX();partialDerivatives[3][i][j]=f.partialDerivativeYY();partialDerivatives[4][i][j]=f.partialDerivativeXY();}}}"
626	"public void test(){for(int j=0;j<lastJ;j++){ final BicubicSplineFunction f=splines[i][j];partialDerivatives[0][i][j]=f.partialDerivativeX();partialDerivatives[1][i][j]=f.partialDerivativeY();partialDerivatives[2][i][j]=f.partialDerivativeXX();partialDerivatives[3][i][j]=f.partialDerivativeYY();partialDerivatives[4][i][j]=f.partialDerivativeXY();}}"
627	"public void test(){for(int i=1;i<max;i++){if(c<=val[i]){return i-1;}}}"
628	"public void test(){if(c<=val[i]){return i-1;}}"
629	"public void test(){for(int i=0;i<16;i++){double result=0; final double[] row=AINV[i];for(int j=0;j<16;j++){result+=row[j]*beta[j];}a[i]=result;}}"
630	"public void test(){for(int i=0;i<N;i++){for(int j=0;j<N;j++){this.a[i][j]=a[i+N*j];}}}"
631	"public void test(){for(int j=0;j<N;j++){this.a[i][j]=a[i+N*j];}}"
632	"public void test(){for(int i=0;i<N;i++){for(int j=0;j<N;j++){result+=coeff[i][j]*pX[i];}}}"
633	"public void test(){for(int j=0;j<N;j++){result+=coeff[i][j]*pX[i];}}"
634	"public void test(){for(int i=0;i<N;i++){for(int j=0;j<N;j++){ final double c=a[i][j];aX[i][j]=i*c;aY[i][j]=j*c;aXX[i][j]=(i-1)*aX[i][j];aYY[i][j]=(j-1)*aY[i][j];aXY[i][j]=j*aX[i][j];}}}"
635	"public void test(){for(int j=0;j<N;j++){ final double c=a[i][j];aX[i][j]=i*c;aY[i][j]=j*c;aXX[i][j]=(i-1)*aX[i][j];aYY[i][j]=(j-1)*aY[i][j];aXY[i][j]=j*aX[i][j];}}"
636	"public void test(){for(int i=0;i<xLen;i++){if(fval[i].length!=yLen){throw new DimensionMismatchException(fval[i].length,yLen);}}}"
637	"public void test(){for(int i=0;i<xLen;i++){xFitter.addObservedPoint(1,xval[i],fval[i][j]);}}"
638	"public void test(){for(int i=0;i<xLen;i++){fval_1[i][j]=f.value(xval[i]);}}"
639	"public void test(){for(int i=0;i<xLen;i++){yFitter.clearObservations();for(int j=0;j<yLen;j++){yFitter.addObservedPoint(1,yval[j],fval_1[i][j]);}xPolyY[i]=new PolynomialFunction(yFitter.fit());}}"
640	"public void test(){for(int j=0;j<yLen;j++){yFitter.addObservedPoint(1,yval[j],fval_1[i][j]);}}"
641	"public void test(){for(int i=0;i<xLen;i++){ final PolynomialFunction f=xPolyY[i];for(int j=0;j<yLen;j++){fval_2[i][j]=f.value(yval[j]);}}}"
642	"public void test(){for(int j=0;j<yLen;j++){fval_2[i][j]=f.value(yval[j]);}}"
643	"public void test(){if(dFdZ[i].length!=yLen){throw new DimensionMismatchException(dFdZ[i].length,yLen);}}"
644	"public void test(){if(d2FdXdZ[i].length!=yLen){throw new DimensionMismatchException(d2FdXdZ[i].length,yLen);}}"
645	"public void test(){if(d2FdYdZ[i].length!=yLen){throw new DimensionMismatchException(d2FdYdZ[i].length,yLen);}}"
646	"public void test(){if(d3FdXdYdZ[i].length!=yLen){throw new DimensionMismatchException(d3FdXdYdZ[i].length,yLen);}}"
647	"public void test(){if(d2FdXdY[i].length!=yLen){throw new DimensionMismatchException(d2FdXdY[i].length,yLen);}if(d2FdXdZ[i].length!=yLen){throw new DimensionMismatchException(d2FdXdZ[i].length,yLen);}if(d2FdYdZ[i].length!=yLen){throw new DimensionMismatchException(d2FdYdZ[i].length,yLen);}if(d3FdXdYdZ[i].length!=yLen){throw new DimensionMismatchException(d3FdXdYdZ[i].length,yLen);} final int ip1=i+1;}"
648	"public void test(){if(f[i][j].length!=zLen){throw new DimensionMismatchException(f[i][j].length,zLen);}}"
649	"public void test(){if(dFdX[i][j].length!=zLen){throw new DimensionMismatchException(dFdX[i][j].length,zLen);}}"
650	"public void test(){if(dFdY[i][j].length!=zLen){throw new DimensionMismatchException(dFdY[i][j].length,zLen);}}"
651	"public void test(){if(dFdZ[i][j].length!=zLen){throw new DimensionMismatchException(dFdZ[i][j].length,zLen);}}"
652	"public void test(){if(d2FdXdY[i][j].length!=zLen){throw new DimensionMismatchException(d2FdXdY[i][j].length,zLen);}}"
653	"public void test(){if(d2FdXdZ[i][j].length!=zLen){throw new DimensionMismatchException(d2FdXdZ[i][j].length,zLen);}}"
654	"public void test(){if(d2FdYdZ[i][j].length!=zLen){throw new DimensionMismatchException(d2FdYdZ[i][j].length,zLen);}}"
655	"public void test(){if(d3FdXdYdZ[i][j].length!=zLen){throw new DimensionMismatchException(d3FdXdYdZ[i][j].length,zLen);}}"
656	"public void test(){for(int k=0;k<lastK;k++){ final int kp1=k+1; final double[] beta=new double[]{f[i][j][k],f[ip1][j][k],f[i][jp1][k],f[ip1][jp1][k],f[i][j][kp1],f[ip1][j][kp1],f[i][jp1][kp1],f[ip1][jp1][kp1],dFdX[i][j][k],dFdX[ip1][j][k],dFdX[i][jp1][k],dFdX[ip1][jp1][k],dFdX[i][j][kp1],dFdX[ip1][j][kp1],dFdX[i][jp1][kp1],dFdX[ip1][jp1][kp1],dFdY[i][j][k],dFdY[ip1][j][k],dFdY[i][jp1][k],dFdY[ip1][jp1][k],dFdY[i][j][kp1],dFdY[ip1][j][kp1],dFdY[i][jp1][kp1],dFdY[ip1][jp1][kp1],dFdZ[i][j][k],dFdZ[ip1][j][k],dFdZ[i][jp1][k],dFdZ[ip1][jp1][k],dFdZ[i][j][kp1],dFdZ[ip1][j][kp1],dFdZ[i][jp1][kp1],dFdZ[ip1][jp1][kp1],d2FdXdY[i][j][k],d2FdXdY[ip1][j][k],d2FdXdY[i][jp1][k],d2FdXdY[ip1][jp1][k],d2FdXdY[i][j][kp1],d2FdXdY[ip1][j][kp1],d2FdXdY[i][jp1][kp1],d2FdXdY[ip1][jp1][kp1],d2FdXdZ[i][j][k],d2FdXdZ[ip1][j][k],d2FdXdZ[i][jp1][k],d2FdXdZ[ip1][jp1][k],d2FdXdZ[i][j][kp1],d2FdXdZ[ip1][j][kp1],d2FdXdZ[i][jp1][kp1],d2FdXdZ[ip1][jp1][kp1],d2FdYdZ[i][j][k],d2FdYdZ[ip1][j][k],d2FdYdZ[i][jp1][k],d2FdYdZ[ip1][jp1][k],d2FdYdZ[i][j][kp1],d2FdYdZ[ip1][j][kp1],d2FdYdZ[i][jp1][kp1],d2FdYdZ[ip1][jp1][kp1],d3FdXdYdZ[i][j][k],d3FdXdYdZ[ip1][j][k],d3FdXdYdZ[i][jp1][k],d3FdXdYdZ[ip1][jp1][k],d3FdXdYdZ[i][j][kp1],d3FdXdYdZ[ip1][j][kp1],d3FdXdYdZ[i][jp1][kp1],d3FdXdYdZ[ip1][jp1][kp1]};splines[i][j][k]=new TricubicSplineFunction(computeSplineCoefficients(beta));}}"
657	"public void test(){ final int i=searchIndex(x,xval);if(i==-1){throw new OutOfRangeException(x,xval[0],xval[xval.length-1]);} final int j=searchIndex(y,yval);if(j==-1){throw new OutOfRangeException(y,yval[0],yval[yval.length-1]);} final int k=searchIndex(z,zval);if(k==-1){throw new OutOfRangeException(z,zval[0],zval[zval.length-1]);}}"
658	"public void test(){if(j==-1){throw new OutOfRangeException(y,yval[0],yval[yval.length-1]);} final int k=searchIndex(z,zval);if(k==-1){throw new OutOfRangeException(z,zval[0],zval[zval.length-1]);} final double xN=(x-xval[i])/(xval[i+1]-xval[i]); final double yN=(y-yval[j])/(yval[j+1]-yval[j]); final double zN=(z-zval[k])/(zval[k+1]-zval[k]);return splines[i][j][k].value(xN,yN,zN);}"
659	"public void test(){for(int i=0;i<sz;i++){double result=0; final double[] row=AINV[i];for(int j=0;j<sz;j++){result+=row[j]*beta[j];}a[i]=result;}}"
660	"public void test(){for(int i=0;i<N;i++){for(int j=0;j<N;j++){for(int k=0;k<N;k++){a[i][j][k]=aV[i+N*(j+N*k)];}}}}"
661	"public void test(){for(int k=0;k<N;k++){a[i][j][k]=aV[i+N*(j+N*k)];}}"
662	"public void test(){for(int i=0;i<N;i++){for(int j=0;j<N;j++){for(int k=0;k<N;k++){result+=a[i][j][k]*pX[i];}}}}"
663	"public void test(){for(int k=0;k<N;k++){result+=a[i][j][k]*pX[i];}}"
664	"public void test(){for(int i=0;i<xval.length;++i){ final double[] xvalI=xval[i];if(xvalI==null){throw new NullArgumentException();}if(xvalI.length!=dimension){throw new DimensionMismatchException(xvalI.length,dimension);}samples.put(new ArrayRealVector(xvalI),yval[i]);}}"
665	"public void test(){for(int i=0;i<microsphereElements;i++){microsphere.add(new MicrosphereSurfaceElement(rand.nextVector()));}}"
666	"public void test(){for(int i=0;i<xLen;i++){if(fval[i].length!=yLen){throw new DimensionMismatchException(fval[i].length,yLen);}for(int j=0;j<yLen;j++){fX[j][i]=fval[i][j];}}}"
667	"public void test(){for(int j=0;j<yLen;j++){fX[j][i]=fval[i][j];}}"
668	"public void test(){for(int i=0;i<xLen;i++){xSplineY[i]=spInterpolator.interpolate(yval,fval[i]);}}"
669	"public void test(){for(int i=0;i<xLen;i++){dFdX[i][j]=f.value(xval[i]);}}"
670	"public void test(){for(int i=0;i<xLen;i++){ final UnivariateRealFunction f=xSplineY[i].derivative();for(int j=0;j<yLen;j++){dFdY[i][j]=f.value(yval[j]);}}}"
671	"public void test(){for(int j=0;j<yLen;j++){dFdY[i][j]=f.value(yval[j]);}}"
672	"public void test(){for(int i=0;i<xLen;i++){ final int nI=nextIndex(i,xLen); final int pI=previousIndex(i);for(int j=0;j<yLen;j++){ final int nJ=nextIndex(j,yLen); final int pJ=previousIndex(j);d2FdXdY[i][j]=(fval[nI][nJ]-fval[nI][pJ]+fval[pI][pJ])/((xval[nI]-xval[pI])*(yval[nJ]-yval[pJ]));}}}"
673	"public void test(){for(int j=0;j<yLen;j++){ final int nJ=nextIndex(j,yLen); final int pJ=previousIndex(j);d2FdXdY[i][j]=(fval[nI][nJ]-fval[nI][pJ]+fval[pI][pJ])/((xval[nI]-xval[pI])*(yval[nJ]-yval[pJ]));}}"
674	"public void test(){ final double x=xval[i];if(i>0){updateBandwidthInterval(xval,weights,i,bandwidthInterval);} final int ileft=bandwidthInterval[0]; final int iright=bandwidthInterval[1]; final int edge;if(xval[i]-xval[ileft]>xval[iright]-xval[i]){edge=ileft;}else {edge=iright;}}"
675	"public void test(){if(i>0){updateBandwidthInterval(xval,weights,i,bandwidthInterval);}}"
676	"public void test(){if(xval[i]-xval[ileft]>xval[iright]-xval[i]){edge=ileft;}else {edge=iright;}}"
677	"public void test(){for(int k=ileft;k<=iright;++k){ final double xk=xval[k]; final double yk=yval[k]; final double dist=(k<i)?x-xk:xk-x; final double w=tricube(dist*denom)*robustnessWeights[k]; final double xkw=xk*w;sumWeights+=w;sumX+=xkw;sumXSquared+=xk*xkw;sumY+=yk*w;sumXY+=yk*xkw;}}"
678	"public void test(){ final double beta;if(FastMath.sqrt(FastMath.abs(meanXSquared-meanX*meanX))<accuracy){beta=0;}else {beta=(meanXY-meanX*meanY)/(meanXSquared-meanX*meanX);} final double alpha=meanY-beta*meanX;res[i]=beta*x+alpha;residuals[i]=FastMath.abs(yval[i]-res[i]);}"
679	"public void test(){for(int i=0;i<n;++i){ final double arg=residuals[i]/(6*medianResidual);if(arg>=1){robustnessWeights[i]=0;}else { final double w=1-arg*arg;robustnessWeights[i]=w*w;}}}"
680	"public void test(){if(arg>=1){robustnessWeights[i]=0;}else { final double w=1-arg*arg;robustnessWeights[i]=w*w;}}"
681	"public void test(){if(nextRight<xval.length&&xval[nextRight]-xval[i]<xval[i]-xval[left]){int nextLeft=nextNonzero(weights,bandwidthInterval[0]);bandwidthInterval[0]=nextLeft;bandwidthInterval[1]=nextRight;}}"
682	"public void test(){int j=i+1;while(j<weights.length&&weights[j]==0){++j;}return j;}"
683	"public void test(){for(int i=0;i<values.length;i++){MathUtils.checkFinite(values[i]);}}"
684	"public void test(){for(int i=0;i<array.length;++i){Arrays.fill(array[i],field.getZero());}}"
685	"public void test(){for(int i=0;i<nSum;++i){sum=sum.add(getEntry(row,i).multiply(m.getEntry(i,col)));}}"
686	"public void test(){for(int i=0;i<data.length;++i){ final T[] dataI=data[i];for(int j=0;j<dataI.length;++j){dataI[j]=getEntry(i,j);}}}"
687	"public void test(){for(int j=0;j<dataI.length;++j){dataI[j]=getEntry(i,j);}}"
688	"public void test(){for(int i=startRow;i<=endRow;++i){for(int j=startColumn;j<=endColumn;++j){subMatrix.setEntry(i-startRow,j-startColumn,getEntry(i,j));}}}"
689	"public void test(){for(int j=startColumn;j<=endColumn;++j){subMatrix.setEntry(i-startRow,j-startColumn,getEntry(i,j));}}"
690	"public void test(){for(int i=0;i<selectedRows.length;i++){ final T[] destinationI=destination[i];for(int j=0;j<selectedColumns.length;j++){destinationI[j]=getEntry(selectedRows[i],selectedColumns[j]);}}}"
691	"public void test(){for(int j=0;j<selectedColumns.length;j++){destinationI[j]=getEntry(selectedRows[i],selectedColumns[j]);}}"
692	"public void test(){for(int i=0;i<nRows;++i){for(int j=0;j<nCols;++j){setEntry(row+i,column+j,subMatrix[i][j]);}}}"
693	"public void test(){for(int j=0;j<nCols;++j){setEntry(row+i,column+j,subMatrix[i][j]);}}"
694	"public void test(){for(int i=0;i<nCols;++i){out.setEntry(0,i,getEntry(row,i));}}"
695	"public void test(){for(int i=0;i<nCols;++i){setEntry(row,i,matrix.getEntry(0,i));}}"
696	"public void test(){for(int i=0;i<nRows;++i){out.setEntry(i,0,getEntry(i,column));}}"
697	"public void test(){for(int i=0;i<nRows;++i){setEntry(i,column,matrix.getEntry(i,0));}}"
698	"public void test(){for(int i=0;i<nCols;++i){setEntry(row,i,vector.getEntry(i));}}"
699	"public void test(){for(int i=0;i<nRows;++i){setEntry(i,column,vector.getEntry(i));}}"
700	"public void test(){for(int i=0;i<nCols;++i){out[i]=getEntry(row,i);}}"
701	"public void test(){for(int i=0;i<nCols;++i){setEntry(row,i,array[i]);}}"
702	"public void test(){for(int i=0;i<nRows;++i){out[i]=getEntry(i,column);}}"
703	"public void test(){for(int i=0;i<nRows;++i){setEntry(i,column,array[i]);}}"
704	"public void test(){for(int i=0;i<nRows;++i){trace=trace.add(getEntry(i,i));}}"
705	"public void test(){for(int i=0;i<nCols;++i){sum=sum.add(getEntry(row,i).multiply(v[i]));}}"
706	"public void test(){for(int i=0;i<nCols;++i){sum=sum.add(getEntry(row,i).multiply(v.getEntry(i)));}}"
707	"public void test(){for(int i=0;i<nRows;++i){sum=sum.add(getEntry(i,col).multiply(v[i]));}}"
708	"public void test(){for(int i=0;i<nRows;++i){sum=sum.add(getEntry(i,col).multiply(v.getEntry(i)));}}"
709	"public void test(){for(int i=0;i<nRows;++i){if(i>0){res.append("","");}res.append(""{"");for(int j=0;j<nCols;++j){if(j>0){res.append("","");}res.append(getEntry(i,j));}res.append(""}"");}}"
710	"public void test(){if(i>0){res.append("","");}}"
711	"public void test(){for(int j=0;j<nCols;++j){if(j>0){res.append("","");}res.append(getEntry(i,j));}}"
712	"public void test(){checkVectorDimensions(v.getDimension());boolean copyThis=entries.size()>v.entries.size();OpenMapRealVector res=copyThis?this.copy():v.copy();Iterator iter=copyThis?v.entries.iterator():entries.iterator();OpenIntToDoubleHashMap randomAccess=copyThis?entries:v.entries;while(iter.hasNext()){iter.advance();int key=iter.key();if(randomAccess.containsKey(key)){res.setEntry(key,randomAccess.get(key)+iter.value());}else {res.setEntry(key,iter.value());}}}"
713	"public void test(){if(randomAccess.containsKey(key)){res.setEntry(key,randomAccess.get(key)+iter.value());}else {res.setEntry(key,iter.value());}}"
714	"public void test(){OpenMapRealVector res=new OpenMapRealVector(this,1);res.setEntry(virtualSize,d);return res;}"
715	"public void test(){for(int i=0;i<a.length;i++){res.setEntry(i+virtualSize,a[i]);}}"
716	"public void test(){checkVectorDimensions(v.getDimension());boolean thisIsSmaller=entries.size()<v.entries.size();Iterator iter=thisIsSmaller?entries.iterator():v.entries.iterator();OpenIntToDoubleHashMap larger=thisIsSmaller?v.entries:entries;double d=0;while(iter.hasNext()){iter.advance();d+=iter.value()*larger.get(iter.key());}return d;}"
717	"public void test(){while(iter.hasNext()){iter.advance();d+=iter.value()*larger.get(iter.key());}}"
718	"public void test(){for(int i=0;i<v.length;i++){double delta=entries.get(i)-v[i];res+=delta*delta;}}"
719	"public void test(){checkIndex(index);return entries.get(index);}"
720	"public void test(){for(int i=0;i<v.length;i++){double delta=FastMath.abs(getEntry(i)-v[i]);max+=delta;}}"
721	"public void test(){for(int i=0;i<v.length;i++){double delta=FastMath.abs(getEntry(i)-v[i]);if(delta>max){max=delta;}}}"
722	"public void test(){for(int i=0;i<virtualSize;i++){setEntry(i,getEntry(i)+d);}}"
723	"public void test(){for(int i=0;i<v.length;i++){setEntry(i+index,v[i]);}}"
724	"public void test(){for(int i=0;i<virtualSize;i++){setEntry(i,value);}}"
725	"public void test(){if(entries.containsKey(key)){res.setEntry(key,entries.get(key)-iter.value());}else {res.setEntry(key,-iter.value());}}"
726	"public void test(){for(int i=0;i<v.length;i++){if(entries.containsKey(i)){res.setEntry(i,entries.get(i)-v[i]);}else {res.setEntry(i,-v[i]);}}}"
727	"public void test(){if(entries.containsKey(i)){res.setEntry(i,entries.get(i)-v[i]);}else {res.setEntry(i,-v[i]);}}"
728	"public void test(){for(int i=0;i<rows;i++){for(int j=0;j<columns;j++){setEntry(i,j,other.getEntry(i,j));}}}"
729	"public void test(){for(int j=0;j<columns;j++){setEntry(i,j,other.getEntry(i,j));}}"
730	"public void test(){checkRowIndex(row);checkColumnIndex(column); final int key=computeKey(row,column); final T value=entries.get(key).add(increment);if(getField().getZero().equals(value)){entries.remove(key);}else {entries.put(key,value);}}"
731	"public void test(){checkRowIndex(row);checkColumnIndex(column);return entries.get(computeKey(row,column));}"
732	"public void test(){checkRowIndex(row);checkColumnIndex(column); final int key=computeKey(row,column); final T value=entries.get(key).multiply(factor);if(getField().getZero().equals(value)){entries.remove(key);}else {entries.put(key,value);}}"
733	"public void test(){for(int i=0;i<n;i++){for(int j=i;j<n;j++){matATA[i][j]=0.0;for(int k=0;k<m;k++){matATA[i][j]+=localcopy[k][i]*localcopy[k][j];}matATA[j][i]=matATA[i][j];}}}"
734	"public void test(){for(int j=i;j<n;j++){matATA[i][j]=0.0;for(int k=0;k<m;k++){matATA[i][j]+=localcopy[k][i]*localcopy[k][j];}matATA[j][i]=matATA[i][j];}}"
735	"public void test(){for(int k=0;k<m;k++){matATA[i][j]+=localcopy[k][i]*localcopy[k][j];}}"
736	"public void test(){for(int i=0;i<m;i++){for(int j=i;j<m;j++){matAAT[i][j]=0.0;for(int k=0;k<n;k++){matAAT[i][j]+=localcopy[i][k]*localcopy[j][k];}matAAT[j][i]=matAAT[i][j];}}}"
737	"public void test(){for(int j=i;j<m;j++){matAAT[i][j]=0.0;for(int k=0;k<n;k++){matAAT[i][j]+=localcopy[i][k]*localcopy[j][k];}matAAT[j][i]=matAAT[i][j];}}"
738	"public void test(){for(int k=0;k<n;k++){matAAT[i][j]+=localcopy[i][k]*localcopy[j][k];}}"
739	"public void test(){for(int i=0;i<p;i++){singularValues[i]=FastMath.sqrt(FastMath.abs(singularValues[i]));}}"
740	"public void test(){for(int i=0;i<p;i++){RealVector tmp=cachedU.getColumnVector(i);double product=matrix.operate(cachedV.getColumnVector(i)).dotProduct(tmp);if(product<0){cachedU.setColumnVector(i,tmp.mapMultiply(-1));}}}"
741	"public void test(){if(product<0){cachedU.setColumnVector(i,tmp.mapMultiply(-1));}}"
742	"public void test(){for(int i=singularValues.length-1;i>=0;--i){if(singularValues[i]>threshold){return i+1;}}}"
743	"public void test(){if(singularValues[i]>threshold){return i+1;}}"
744	"public void test(){for(int i=0;i<singularValues.length;++i){ final double a;if(singularValues[i]>0){a=1/singularValues[i];}else {a=0;} final double[] suTi=suT[i];for(int j=0;j<suTi.length;++j){suTi[j]*=a;}}}"
745	"public void test(){if(singularValues[i]>0){a=1/singularValues[i];}else {a=0;}}"
746	"public void test(){for(int i=0;i<order;++i){ final double[] lI=lTData[i];for(int j=i+1;j<order;++j){ final double[] lJ=lTData[j]; final double lIJ=lI[j]; final double lJI=lJ[i]; final double maxDelta=relativeSymmetryThreshold*FastMath.max(FastMath.abs(lIJ),FastMath.abs(lJI));if(FastMath.abs(lIJ-lJI)>maxDelta){throw new NonSymmetricMatrixException(i,j,relativeSymmetryThreshold);}lJ[i]=0;}}}"
747	"public void test(){for(int j=i+1;j<order;++j){ final double[] lJ=lTData[j]; final double lIJ=lI[j]; final double lJI=lJ[i]; final double maxDelta=relativeSymmetryThreshold*FastMath.max(FastMath.abs(lIJ),FastMath.abs(lJI));if(FastMath.abs(lIJ-lJI)>maxDelta){throw new NonSymmetricMatrixException(i,j,relativeSymmetryThreshold);}lJ[i]=0;}}"
748	"public void test(){if(FastMath.abs(lIJ-lJI)>maxDelta){throw new NonSymmetricMatrixException(i,j,relativeSymmetryThreshold);}}"
749	"public void test(){for(int i=0;i<order;++i){ final double[] ltI=lTData[i];if(ltI[i]<absolutePositivityThreshold){throw new NonPositiveDefiniteMatrixException(i,absolutePositivityThreshold);}ltI[i]=FastMath.sqrt(ltI[i]); final double inverse=1.0/ltI[i];for(int q=order-1;q>i;--q){ltI[q]*=inverse; final double[] ltQ=lTData[q];for(int p=q;p<order;++p){ltQ[p]-=ltI[q]*ltI[p];}}}}"
750	"public void test(){if(ltI[i]<absolutePositivityThreshold){throw new NonPositiveDefiniteMatrixException(i,absolutePositivityThreshold);}}"
751	"public void test(){for(int q=order-1;q>i;--q){ltI[q]*=inverse; final double[] ltQ=lTData[q];for(int p=q;p<order;++p){ltQ[p]-=ltI[q]*ltI[p];}}}"
752	"public void test(){for(int i=0;i<lTData.length;++i){double lTii=lTData[i][i];determinant*=lTii*lTii;}}"
753	"public void test(){for(int i=j+1;i<m;i++){x[i]-=xJ*lJ[i];}}"
754	"public void test(){for(int i=0;i<j;i++){x[i]-=xJ*lTData[i][j];}}"
755	"public void test(){for(int i=j+1;i<m;i++){ final double[] xI=x[i]; final double lJI=lJ[i];for(int k=0;k<nColB;++k){xI[k]-=xJ[k]*lJI;}}}"
756	"public void test(){for(int i=0;i<j;i++){ final double[] xI=x[i]; final double lIJ=lTData[i][j];for(int k=0;k<nColB;++k){xI[k]-=xJ[k]*lIJ;}}}"
757	"public void test(){for(int i=0;i<row;i++){sum-=luRow[i]*lu[i][col];}}"
758	"public void test(){for(int i=0;i<col;i++){sum-=luRow[i]*lu[i][col];}}"
759	"public void test(){for(int i=0;i<m;i++){tmp=luMax[i];luMax[i]=luCol[i];luCol[i]=tmp;}}"
760	"public void test(){for(int i=0;i<m;++i){ final double[] luI=lu[i];for(int j=0;j<i;++j){cachedL.setEntry(i,j,luI[j]);}cachedL.setEntry(i,i,1.0);}}"
761	"public void test(){for(int j=0;j<i;++j){cachedL.setEntry(i,j,luI[j]);}}"
762	"public void test(){for(int i=0;i<m;++i){ final double[] luI=lu[i];for(int j=i;j<m;++j){cachedU.setEntry(i,j,luI[j]);}}}"
763	"public void test(){for(int j=i;j<m;++j){cachedU.setEntry(i,j,luI[j]);}}"
764	"public void test(){for(int i=0;i<m;++i){cachedP.setEntry(i,pivot[i],1.0);}}"
765	"public void test(){for(int i=0;i<m;i++){determinant*=lu[i][i];}}"
766	"public void test(){for(int i=col+1;i<m;i++){bp[i]-=bpCol*lu[i][col];}}"
767	"public void test(){for(int i=0;i<col;i++){bp[i]-=bpCol*lu[i][col];}}"
768	"public void test(){for(int i=col+1;i<m;i++){ final double[] bpI=bp[i]; final double luICol=lu[i][col];for(int j=0;j<nColB;j++){bpI[j]-=bpCol[j]*luICol;}}}"
769	"public void test(){for(int i=0;i<col;i++){ final double[] bpI=bp[i]; final double luICol=lu[i][col];for(int j=0;j<nColB;j++){bpI[j]-=bpCol[j]*luICol;}}}"
770	"public void test(){this.main=main.clone();this.secondary=secondary.clone();transformer=null; final int size=main.length;double[][] z=new double[size][size];for(int i=0;i<size;i++){z[i][i]=1.0;}findEigenVectors(z);}"
771	"public void test(){for(int i=0;i<size;i++){z[i][i]=1.0;}}"
772	"public void test(){for(int i=0;i<rows;++i){for(int j=i+1;j<columns;++j){ final double mij=matrix.getEntry(i,j); final double mji=matrix.getEntry(j,i);if(FastMath.abs(mij-mji)>(FastMath.max(FastMath.abs(mij),FastMath.abs(mji))*eps)){if(raiseException){throw new NonSymmetricMatrixException(i,j,eps);}return false;}}}}"
773	"public void test(){for(int j=i+1;j<columns;++j){ final double mij=matrix.getEntry(i,j); final double mji=matrix.getEntry(j,i);if(FastMath.abs(mij-mji)>(FastMath.max(FastMath.abs(mij),FastMath.abs(mji))*eps)){if(raiseException){throw new NonSymmetricMatrixException(i,j,eps);}return false;}}}"
774	"public void test(){if(raiseException){throw new NonSymmetricMatrixException(i,j,eps);}}"
775	"public void test(){for(int i=0;i<m;++i){ final ArrayRealVector v=eigenvectors[i]; final double[] vData=v.getDataRef(); final double s=v.dotProduct(b)/realEigenvalues[i];for(int j=0;j<m;++j){bp[j]+=s*vData[j];}}}"
776	"public void test(){for(int i=0;i<m;++i){ final ArrayRealVector v=eigenvectors[i]; final double[] vData=v.getDataRef();double s=0;for(int j=0;j<m;++j){s+=v.getEntry(j)*b.getEntry(j,k);}s/=realEigenvalues[i];for(int j=0;j<m;++j){bp[j][k]+=s*vData[j];}}}"
777	"public void test(){for(int i=0;i<realEigenvalues.length;++i){if((realEigenvalues[i]==0)&&(imagEigenvalues[i]==0)){return false;}}}"
778	"public void test(){if((realEigenvalues[i]==0)&&(imagEigenvalues[i]==0)){return false;}}"
779	"public void test(){for(int i=0;i<m;++i){ final double[] invI=invData[i];for(int j=0;j<m;++j){double invIJ=0;for(int k=0;k<m;++k){ final double[] vK=eigenvectors[k].getDataRef();invIJ+=vK[i]*vK[j]/realEigenvalues[k];}invI[j]=invIJ;}}}"
780	"public void test(){for(int k=0;k<m;++k){ final double[] vK=eigenvectors[k].getDataRef();invIJ+=vK[i]*vK[j]/realEigenvalues[k];}}"
781	"public void test(){for(int i=0;i<n-1;i++){realEigenvalues[i]=main[i];e[i]=secondary[i];}}"
782	"public void test(){for(int i=0;i<n;i++){if(FastMath.abs(realEigenvalues[i])>maxAbsoluteValue){maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);}if(FastMath.abs(e[i])>maxAbsoluteValue){maxAbsoluteValue=FastMath.abs(e[i]);}}}"
783	"public void test(){if(FastMath.abs(realEigenvalues[i])>maxAbsoluteValue){maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);}}"
784	"public void test(){if(FastMath.abs(e[i])>maxAbsoluteValue){maxAbsoluteValue=FastMath.abs(e[i]);}}"
785	"public void test(){for(int i=0;i<n;i++){if(FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue){realEigenvalues[i]=0.0;}if(FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue){e[i]=0.0;}}}"
786	"public void test(){if(FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue){realEigenvalues[i]=0.0;}}"
787	"public void test(){if(FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue){e[i]=0.0;}}"
788	"public void test(){if(q<0.0){q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q-t);}else {q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);}double u=0.0;double s=1.0;double c=1.0;int i;}"
789	"public void test(){if(FastMath.abs(p)>=FastMath.abs(q)){c=q/p;t=FastMath.sqrt(c*c+1.0);e[i+1]=p*t;s=1.0/t;c=c*s;}else {s=p/q;t=FastMath.sqrt(s*s+1.0);e[i+1]=q*t;c=1.0/t;s=s*c;}}"
790	"public void test(){if(e[i+1]==0.0){realEigenvalues[i+1]-=u;e[m]=0.0;break;}}"
791	"public void test(){if(e[i+1]==0.0){realEigenvalues[i+1]-=u;e[m]=0.0;break;}q=realEigenvalues[i+1]-u;t=(realEigenvalues[i]-q)*s+2.0*c;u=s*t;realEigenvalues[i+1]=q+u;}"
792	"public void test(){t=(realEigenvalues[i]-q)*s+2.0*c;u=s*t;realEigenvalues[i+1]=q+u;q=c*t-h;for(int ia=0;ia<n;ia++){p=z[ia][i+1];z[ia][i+1]=s*z[ia][i]+c*p;z[ia][i]=c*z[ia][i]-s*p;}}"
793	"public void test(){for(int ia=0;ia<n;ia++){p=z[ia][i+1];z[ia][i+1]=s*z[ia][i]+c*p;z[ia][i]=c*z[ia][i]-s*p;}}"
794	"public void test(){for(int i=0;i<n;i++){int k=i;double p=realEigenvalues[i];for(int j=i+1;j<n;j++){if(realEigenvalues[j]>p){k=j;p=realEigenvalues[j];}}if(k!=i){realEigenvalues[k]=realEigenvalues[i];realEigenvalues[i]=p;for(int j=0;j<n;j++){p=z[j][i];z[j][i]=z[j][k];z[j][k]=p;}}}}"
795	"public void test(){{int k=i;double p=realEigenvalues[i];for(int j=i+1;j<n;j++){if(realEigenvalues[j]>p){k=j;p=realEigenvalues[j];}}if(k!=i){realEigenvalues[k]=realEigenvalues[i];realEigenvalues[i]=p;for(int j=0;j<n;j++){p=z[j][i];z[j][i]=z[j][k];z[j][k]=p;}}}}"
796	"public void test(){for(int j=i+1;j<n;j++){if(realEigenvalues[j]>p){k=j;p=realEigenvalues[j];}}}"
797	"public void test(){if(k!=i){realEigenvalues[k]=realEigenvalues[i];realEigenvalues[i]=p;for(int j=0;j<n;j++){p=z[j][i];z[j][i]=z[j][k];z[j][k]=p;}}}"
798	"public void test(){for(int j=0;j<n;j++){p=z[j][i];z[j][i]=z[j][k];z[j][k]=p;}}"
799	"public void test(){for(int i=0;i<n;i++){if(FastMath.abs(realEigenvalues[i])>maxAbsoluteValue){maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);}}}"
800	"public void test(){for(int i=0;i<n;i++){if(FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue){realEigenvalues[i]=0.0;}}}"
801	"public void test(){if(FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue){realEigenvalues[i]=0.0;}}"
802	"public void test(){for(int i=0;i<n;i++){for(int j=0;j<n;j++){tmp[j]=z[j][i];}eigenvectors[i]=new ArrayRealVector(tmp);}}"
803	"public void test(){for(int j=0;j<n;j++){tmp[j]=z[j][i];}}"
804	"public void test(){for(int i=0;i<nSum;i++){sum+=dataRow[i]*m.data[i][col];}}"
805	"public void test(){for(int i=0;i<data.length;++i){if(subMatrix[i].length!=nCols){throw new DimensionMismatchException(subMatrix[i].length,nCols);}System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);}}"
806	"public void test(){if(subMatrix[i].length!=nCols){throw new DimensionMismatchException(subMatrix[i].length,nCols);}}"
807	"public void test(){for(int i=0;i<nCols;i++){sum+=dataRow[i]*v[i];}}"
808	"public void test(){for(int i=0;i<nRows;++i){sum+=data[i][col]*v[i];}}"
809	"public void test(){for(int i=0;i<rows;++i){ final double[] rowI=data[i];for(int j=0;j<columns;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}}"
810	"public void test(){for(int j=0;j<columns;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}"
811	"public void test(){for(int i=0;i<rows;++i){ final double[] rowI=data[i];for(int j=0;j<columns;++j){visitor.visit(i,j,rowI[j]);}}}"
812	"public void test(){for(int j=0;j<columns;++j){visitor.visit(i,j,rowI[j]);}}"
813	"public void test(){for(int i=startRow;i<=endRow;++i){ final double[] rowI=data[i];for(int j=startColumn;j<=endColumn;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}}"
814	"public void test(){for(int j=startColumn;j<=endColumn;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}"
815	"public void test(){for(int i=startRow;i<=endRow;++i){ final double[] rowI=data[i];for(int j=startColumn;j<=endColumn;++j){visitor.visit(i,j,rowI[j]);}}}"
816	"public void test(){for(int j=startColumn;j<=endColumn;++j){visitor.visit(i,j,rowI[j]);}}"
817	"public void test(){for(int i=0;i<rows;++i){ final double[] rowI=data[i];rowI[j]=visitor.visit(i,j,rowI[j]);}}"
818	"public void test(){for(int i=0;i<rows;++i){visitor.visit(i,j,data[i][j]);}}"
819	"public void test(){for(int i=startRow;i<=endRow;++i){ final double[] rowI=data[i];rowI[j]=visitor.visit(i,j,rowI[j]);}}"
820	"public void test(){for(int i=startRow;i<=endRow;++i){visitor.visit(i,j,data[i][j]);}}"
821	"public void test(){for(int i=0;i<nRows;i++){System.arraycopy(data[i],0,out[i],0,data[i].length);}}"
822	"public void test(){for(int i=0;i<m;++i){for(int j=0;j<FastMath.min(i+1,n);++j){cachedH.setEntry(i,j,qrt[j][i]/-rDiag[j]);}}}"
823	"public void test(){for(int j=0;j<FastMath.min(i+1,n);++j){cachedH.setEntry(i,j,qrt[j][i]/-rDiag[j]);}}"
824	"public void test(){for(int i=0;i<row;i++){y[i]-=yRow*qrtRow[i];}}"
825	"public void test(){for(int row=minor;row<m;++row){ final double d=qrtMinor[row]; final double[] yRow=y[row];for(int k=0;k<kWidth;++k){alpha[k]+=d*yRow[k];}}}"
826	"public void test(){for(int k=0;k<kWidth;++k){alpha[k]+=d*yRow[k];}}"
827	"public void test(){for(int row=minor;row<m;++row){ final double d=qrtMinor[row]; final double[] yRow=y[row];for(int k=0;k<kWidth;++k){yRow[k]+=alpha[k]*d;}}}"
828	"public void test(){for(int k=0;k<kWidth;++k){yRow[k]+=alpha[k]*d;}}"
829	"public void test(){for(int i=0;i<j;++i){ final double rIJ=qrtJ[i]; final double[] yI=y[i];for(int k=0;k<kWidth;++k){yI[k]-=yJ[k]*rIJ;}}}"
830	"public void test(){for(int i=k+1;i<m;++i){cachedQt.setEntry(k,i,beta*hK[i]);}}"
831	"public void test(){for(int i=k+1;i<m;++i){beta+=cachedQt.getEntry(j,i)*hK[i];}}"
832	"public void test(){for(int i=k+1;i<m;++i){cachedQt.addToEntry(j,i,beta*hK[i]);}}"
833	"public void test(){for(int i=0;i<m;++i){cachedT.setEntry(i,i,main[i]);if(i>0){cachedT.setEntry(i,i-1,secondary[i-1]);}if(i<main.length-1){cachedT.setEntry(i,i+1,secondary[i]);}}}"
834	"public void test(){if(i>0){cachedT.setEntry(i,i-1,secondary[i-1]);}}"
835	"public void test(){if(i<main.length-1){cachedT.setEntry(i,i+1,secondary[i]);}}"
836	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i]; final double hKI=hK[i];double zI=hI[i]*hKI;for(int j=i+1;j<m;++j){ final double hIJ=hI[j];zI+=hIJ*hK[j];z[j]+=hIJ*hKI;}z[i]=beta*(z[i]+zI);}}"
837	"public void test(){for(int j=i+1;j<m;++j){ final double hIJ=hI[j];zI+=hIJ*hK[j];z[j]+=hIJ*hKI;}}"
838	"public void test(){for(int i=k+1;i<m;++i){gamma+=z[i]*hK[i];}}"
839	"public void test(){for(int i=k+1;i<m;++i){z[i]-=gamma*hK[i];}}"
840	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i];for(int j=i;j<m;++j){hI[j]-=hK[i]*z[j]+z[i]*hK[j];}}}"
841	"public void test(){for(int j=i;j<m;++j){hI[j]-=hK[i]*z[j]+z[i]*hK[j];}}"
842	"public void test(){for(int i=k;i<m;++i){alpha-=cachedU.getEntry(i,j)*householderVectors[i][k-diagOffset];}}"
843	"public void test(){for(int i=k;i<m;++i){cachedU.addToEntry(i,j,-alpha*householderVectors[i][k-diagOffset]);}}"
844	"public void test(){for(int i=0;i<main.length;++i){cachedB.setEntry(i,i,main[i]);if(m<n){if(i>0){cachedB.setEntry(i,i-1,secondary[i-1]);}}else {if(i<main.length-1){cachedB.setEntry(i,i+1,secondary[i]);}}}}"
845	"public void test(){if(i>0){cachedB.setEntry(i,i-1,secondary[i-1]);}}"
846	"public void test(){if(i<main.length-1){cachedB.setEntry(i,i+1,secondary[i]);}}"
847	"public void test(){for(int i=k;i<n;++i){beta-=cachedV.getEntry(i,j)*hK[i];}}"
848	"public void test(){for(int i=k;i<n;++i){cachedV.addToEntry(i,j,-beta*hK[i]);}}"
849	"public void test(){for(int i=k;i<m;++i){ final double c=householderVectors[i][k];xNormSqr+=c*c;}}"
850	"public void test(){for(int i=k;i<m;++i){ final double[] hI=householderVectors[i];alpha-=hI[j]*hI[k];}}"
851	"public void test(){for(int i=k;i<m;++i){ final double[] hI=householderVectors[i];hI[j]-=alpha*hI[k];}}"
852	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i];double beta=0;for(int j=k+1;j<n;++j){beta-=hI[j]*hK[j];}beta/=b*hK[k+1];for(int j=k+1;j<n;++j){hI[j]-=beta*hK[j];}}}"
853	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i];double alpha=0;for(int j=k;j<n;++j){alpha-=hI[j]*hK[j];}alpha/=a*householderVectors[k][k];for(int j=k;j<n;++j){hI[j]-=alpha*hK[j];}}}"
854	"public void test(){for(int i=k+1;i<m;++i){ final double c=householderVectors[i][k];xNormSqr+=c*c;}}"
855	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i];beta-=hI[j]*hI[k];}}"
856	"public void test(){for(int i=k+1;i<m;++i){ final double[] hI=householderVectors[i];hI[j]-=beta*hI[k];}}"
857	"public void test(){for(int i=0;i<rawData.length;++i){ final int length=rawData[i].length;if(length!=columns){throw new DimensionMismatchException(columns,length);}}}"
858	"public void test(){for(int i=0;i<blocks.length;++i){System.arraycopy(blocks[i],0,copied.blocks[i],0,blocks[i].length);}}"
859	"public void test(){for(int k=0;k<outBlock.length;++k){outBlock[k]=tBlock[k]+d;}}"
860	"public void test(){for(int k=0;k<outBlock.length;++k){outBlock[k]=tBlock[k]*d;}}"
861	"public void test(){for(int i=0;i<iHeight;++i){sum+=FastMath.abs(block[i*jWidth+j]);}}"
862	"public void test(){for(int i=iStart;i<iEnd;++i){System.arraycopy(subMatrix[i-row],jStart-column,block,(i-firstRow)*jWidth+(jStart-firstColumn),jLength);}}"
863	"public void test(){for(int i=0;i<iHeight;++i){if(outIndex>=outBlock.length){outBlock=out.blocks[++outBlockIndex];outIndex=0;}outBlock[outIndex++]=block[i*jWidth+jColumn];}}"
864	"public void test(){for(int i=0;i<iHeight;++i){if(mIndex>=mBlock.length){mBlock=matrix.blocks[++mBlockIndex];mIndex=0;}block[i*jWidth+jColumn]=mBlock[mIndex++];}}"
865	"public void test(){for(int i=0;i<iHeight;++i){outData[outIndex++]=block[i*jWidth+jColumn];}}"
866	"public void test(){for(int i=0;i<iHeight;++i){out[outIndex++]=block[i*jWidth+jColumn];}}"
867	"public void test(){for(int i=0;i<iHeight;++i){block[i*jWidth+jColumn]=array[outIndex++];}}"
868	"public void test(){this.field=field;data=buildArray(size);Arrays.fill(data,field.getZero());}"
869	"public void test(){this(preset.getField(),size);Arrays.fill(data,preset);}"
870	"public void test(){if(d.length<pos+size){throw new NumberIsTooLargeException(pos+size,d.length,true);}}"
871	"public void test(){if(d==null){throw new NullArgumentException();}if(d.length<pos+size){throw new NumberIsTooLargeException(pos+size,d.length,true);}field=d[0].getField();data=buildArray(size);System.arraycopy(d,pos,data,0,size);}"
872	"public void test(){for(int i=0;i<data.length;++i){data[i]=v.getEntry(i);}}"
873	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].add(v.getEntry(i));}}"
874	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].add(v[i]);}}"
875	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].subtract(v.getEntry(i));}}"
876	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].subtract(v[i]);}}"
877	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].add(d);}}"
878	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i].add(d);}}"
879	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].subtract(d);}}"
880	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i].subtract(d);}}"
881	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].multiply(d);}}"
882	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i].multiply(d);}}"
883	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].divide(d);}}"
884	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i].divide(d);}}"
885	"public void test(){for(int i=0;i<data.length;i++){out[i]=one.divide(data[i]);}}"
886	"public void test(){for(int i=0;i<data.length;i++){data[i]=one.divide(data[i]);}}"
887	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].multiply(v.getEntry(i));}}"
888	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].multiply(v[i]);}}"
889	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].divide(v.getEntry(i));}}"
890	"public void test(){for(int i=0;i<data.length;i++){out[i]=data[i].divide(v[i]);}}"
891	"public void test(){for(int i=0;i<data.length;i++){dot=dot.add(data[i].multiply(v.getEntry(i)));}}"
892	"public void test(){for(int i=0;i<data.length;i++){dot=dot.add(data[i].multiply(v[i]));}}"
893	"public void test(){for(int i=0;i<data.length;i++){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i].multiply(v.getEntry(j)));}}}"
894	"public void test(){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i].multiply(v.getEntry(j)));}}"
895	"public void test(){for(int i=0;i<data.length;i++){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i].multiply(v[j]));}}}"
896	"public void test(){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i].multiply(v[j]));}}"
897	"public void test(){for(int i=index;i<index+v.getDimension();++i){data[i]=v.getEntry(i-index);}}"
898	"public void test(){for(int i=0;i<data.length;++i){if(!data[i].equals(rhs.getEntry(i))){return false;}}}"
899	"public void test(){if(!data[i].equals(rhs.getEntry(i))){return false;}}"
900	"public void test(){data=new double[size];Arrays.fill(data,preset);}"
901	"public void test(){if(d==null){throw new NullArgumentException();}if(d.length<pos+size){throw new NumberIsTooLargeException(pos+size,d.length,true);}data=new double[size];System.arraycopy(d,pos,data,0,size);}"
902	"public void test(){for(int i=0;i<d.length;i++){data[i]=d[i].doubleValue();}}"
903	"public void test(){if(d==null){throw new NullArgumentException();}if(d.length<pos+size){throw new NumberIsTooLargeException(pos+size,d.length,true);}data=new double[size];for(int i=pos;i<pos+size;i++){data[i-pos]=d[i].doubleValue();}}"
904	"public void test(){for(int i=pos;i<pos+size;i++){data[i-pos]=d[i].doubleValue();}}"
905	"public void test(){for(int i=0;i<l2;++i){data[l1+i]=v2.getEntry(i);}}"
906	"public void test(){for(int i=0;i<l1;++i){data[i]=v1.getEntry(i);}}"
907	"public void test(){for(int i=0;i<data.length;i++){out[i]+=v[i];}}"
908	"public void test(){for(int i=0;i<data.length;i++){out[i]-=v[i];}}"
909	"public void test(){for(int i=0;i<data.length;i++){data[i]=function.value(data[i]);}}"
910	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i]+d;}}"
911	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i]-d;}}"
912	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i]*d;}}"
913	"public void test(){for(int i=0;i<data.length;i++){data[i]=data[i]/d;}}"
914	"public void test(){for(int i=0;i<data.length;i++){out[i]*=v.getEntry(i);}}"
915	"public void test(){for(int i=0;i<data.length;i++){out[i]*=v[i];}}"
916	"public void test(){for(int i=0;i<data.length;i++){out[i]/=v.getEntry(i);}}"
917	"public void test(){for(int i=0;i<data.length;i++){out[i]/=v[i];}}"
918	"public void test(){for(int i=0;i<data.length;i++){dot+=data[i]*v[i];}}"
919	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);sum+=delta*delta;}}"
920	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v[i];sum+=delta*delta;}}"
921	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);sum+=FastMath.abs(delta);}}"
922	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v[i];sum+=FastMath.abs(delta);}}"
923	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);max=FastMath.max(max,FastMath.abs(delta));}}"
924	"public void test(){for(int i=0;i<data.length;++i){ final double delta=data[i]-v[i];max=FastMath.max(max,FastMath.abs(delta));}}"
925	"public void test(){for(int i=0;i<data.length;i++){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i]*v.getEntry(j));}}}"
926	"public void test(){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i]*v.getEntry(j));}}"
927	"public void test(){for(int i=0;i<data.length;i++){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i]*v[j]);}}}"
928	"public void test(){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i]*v[j]);}}"
929	"public void test(){for(int i=0;i<data.length;++i){if(data[i]!=rhs.getEntry(i)){return false;}}}"
930	"public void test(){if(data[i]!=rhs.getEntry(i)){return false;}}"
931	"public void test(){for(int col=0;col<columnCount;++col){out.setEntry(row,col,getEntry(row,col)+d);}}"
932	"public void test(){for(int col=0;col<columnCount;++col){out.setEntry(row,col,getEntry(row,col)*d);}}"
933	"public void test(){for(int i=0;i<nSum;++i){sum+=getEntry(row,i)*m.getEntry(i,col);}}"
934	"public void test(){for(int i=0;i<data.length;++i){ final double[] dataI=data[i];for(int j=0;j<dataI.length;++j){dataI[j]=getEntry(i,j);}}}"
935	"public void test(){for(int i=0;i<selectedRows.length;i++){ final double[] destinationI=destination[i];for(int j=0;j<selectedColumns.length;j++){destinationI[j]=getEntry(selectedRows[i],selectedColumns[j]);}}}"
936	"public void test(){for(int i=0;i<nRows;++i){trace+=getEntry(i,i);}}"
937	"public void test(){for(int i=0;i<nCols;++i){sum+=getEntry(row,i)*v[i];}}"
938	"public void test(){for(int i=0;i<nCols;++i){sum+=getEntry(row,i)*v.getEntry(i);}}"
939	"public void test(){for(int i=0;i<nRows;++i){sum+=getEntry(i,col)*v[i];}}"
940	"public void test(){for(int i=0;i<nRows;++i){sum+=getEntry(i,col)*v.getEntry(i);}}"
941	"public void test(){for(int i=0;i<nSum;i++){sum=sum.add(dataRow[i].multiply(m.data[i][col]));}}"
942	"public void test(){for(int i=0;i<data.length;++i){if(subMatrix[i].length!=nCols){throw new DimensionMismatchException(nCols,subMatrix[i].length);}System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);}}"
943	"public void test(){if(subMatrix[i].length!=nCols){throw new DimensionMismatchException(nCols,subMatrix[i].length);}}"
944	"public void test(){for(int i=0;i<nCols;i++){sum=sum.add(dataRow[i].multiply(v[i]));}}"
945	"public void test(){for(int i=0;i<nRows;++i){sum=sum.add(data[i][col].multiply(v[i]));}}"
946	"public void test(){for(int i=0;i<rows;++i){ final T[] rowI=data[i];for(int j=0;j<columns;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}}"
947	"public void test(){for(int i=0;i<rows;++i){ final T[] rowI=data[i];for(int j=0;j<columns;++j){visitor.visit(i,j,rowI[j]);}}}"
948	"public void test(){for(int i=startRow;i<=endRow;++i){ final T[] rowI=data[i];for(int j=startColumn;j<=endColumn;++j){rowI[j]=visitor.visit(i,j,rowI[j]);}}}"
949	"public void test(){for(int i=startRow;i<=endRow;++i){ final T[] rowI=data[i];for(int j=startColumn;j<=endColumn;++j){visitor.visit(i,j,rowI[j]);}}}"
950	"public void test(){for(int i=0;i<rows;++i){ final T[] rowI=data[i];rowI[j]=visitor.visit(i,j,rowI[j]);}}"
951	"public void test(){for(int i=startRow;i<=endRow;++i){ final T[] rowI=data[i];rowI[j]=visitor.visit(i,j,rowI[j]);}}"
952	"public void test(){for(OpenIntToDoubleHashMap.Iterator iterator=entries.iterator();iterator.hasNext();){iterator.advance(); final double value=iterator.value(); final int key=iterator.key(); final int i=key/columns; final int k=key%columns;for(int j=0;j<outCols;++j){out.addToEntry(i,j,value*m.getEntry(k,j));}}}"
953	"public void test(){for(int j=0;j<outCols;++j){out.addToEntry(i,j,value*m.getEntry(k,j));}}"
954	"public void test(){{iterator.advance(); final double value=iterator.value(); final int key=iterator.key(); final int i=key/columns; final int k=key%columns;for(int j=0;j<outCols;++j){ final int rightKey=m.computeKey(k,j);if(m.entries.containsKey(rightKey)){ final int outKey=out.computeKey(i,j); final double outValue=out.entries.get(outKey)+value*m.entries.get(rightKey);if(outValue==0.0){out.entries.remove(outKey);}else {out.entries.put(outKey,outValue);}}}}}"
955	"public void test(){if(m.entries.containsKey(rightKey)){ final int outKey=out.computeKey(i,j); final double outValue=out.entries.get(outKey)+value*m.entries.get(rightKey);if(outValue==0.0){out.entries.remove(outKey);}else {out.entries.put(outKey,outValue);}}}"
956	"public void test(){MatrixUtils.checkRowIndex(this,row);MatrixUtils.checkColumnIndex(this,column);return entries.get(computeKey(row,column));}"
957	"public void test(){MatrixUtils.checkRowIndex(this,row);MatrixUtils.checkColumnIndex(this,column); final int key=computeKey(row,column); final double value=entries.get(key)+increment;if(value==0.0){entries.remove(key);}else {entries.put(key,value);}}"
958	"public void test(){MatrixUtils.checkRowIndex(this,row);MatrixUtils.checkColumnIndex(this,column); final int key=computeKey(row,column); final double value=entries.get(key)*factor;if(value==0.0){entries.remove(key);}else {entries.put(key,value);}}"
959	"public void test(){if(entries.containsKey(key)){res.setEntry(key,entries.get(key).add(value));}else {res.setEntry(key,value);}}"
960	"public void test(){for(int i=0;i<v.length;i++){res.setEntry(i,v[i].add(getEntry(i)));}}"
961	"public void test(){for(int i=0;i<virtualSize;i++){setEntry(i,getEntry(i).add(d));}}"
962	"public void test(){for(int i=0;i<virtualSize;i++){setEntry(i,field.getOne().divide(getEntry(i)));}}"
963	"public void test(){if(entries.containsKey(key)){res.setEntry(key,entries.get(key).subtract(iter.value()));}else {res.setEntry(key,field.getZero().subtract(iter.value()));}}"
964	"public void test(){for(int i=0;i<v.length;i++){if(entries.containsKey(i)){res.setEntry(i,entries.get(i).subtract(v[i]));}else {res.setEntry(i,field.getZero().subtract(v[i]));}}}"
965	"public void test(){if(entries.containsKey(i)){res.setEntry(i,entries.get(i).subtract(v[i]));}else {res.setEntry(i,field.getZero().subtract(v[i]));}}"
966	"public void test(){if(d!=0){return mapToSelf(FunctionUtils.fix2ndArgument(new Add(),d));}}"
967	"public void test(){checkVectorDimensions(v);double d=0;Iterator<Entry> it=sparseIterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){d+=e.getValue()*v.getEntry(e.getIndex());}return d;}"
968	"public void test(){while(it.hasNext()&&(e=it.next())!=null){d+=e.getValue()*v.getEntry(e.getIndex());}}"
969	"public void test(){checkVectorDimensions(v);double d=0;Iterator<Entry> it=iterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){ final double diff=e.getValue()-v.getEntry(e.getIndex());d+=diff*diff;}return FastMath.sqrt(d);}"
970	"public void test(){while(it.hasNext()&&(e=it.next())!=null){ final double diff=e.getValue()-v.getEntry(e.getIndex());d+=diff*diff;}}"
971	"public void test(){checkVectorDimensions(v);double d=0;Iterator<Entry> it=iterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){d+=FastMath.abs(e.getValue()-v.getEntry(e.getIndex()));}return d;}"
972	"public void test(){while(it.hasNext()&&(e=it.next())!=null){d+=FastMath.abs(e.getValue()-v.getEntry(e.getIndex()));}}"
973	"public void test(){checkVectorDimensions(v.length);double d=0;Iterator<Entry> it=iterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){d+=FastMath.abs(e.getValue()-v[e.getIndex()]);}return d;}"
974	"public void test(){while(it.hasNext()&&(e=it.next())!=null){d+=FastMath.abs(e.getValue()-v[e.getIndex()]);}}"
975	"public void test(){checkVectorDimensions(v);double d=0;Iterator<Entry> it=iterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){d=FastMath.max(FastMath.abs(e.getValue()-v.getEntry(e.getIndex())),d);}return d;}"
976	"public void test(){while(it.hasNext()&&(e=it.next())!=null){d=FastMath.max(FastMath.abs(e.getValue()-v.getEntry(e.getIndex())),d);}}"
977	"public void test(){checkVectorDimensions(v.length);double d=0;Iterator<Entry> it=iterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){d=FastMath.max(FastMath.abs(e.getValue()-v[e.getIndex()]),d);}return d;}"
978	"public void test(){while(it.hasNext()&&(e=it.next())!=null){d=FastMath.max(FastMath.abs(e.getValue()-v[e.getIndex()]),d);}}"
979	"public void test(){for(int i=0;i<dim;i++){values[i]=getEntry(i);}}"
980	"public void test(){for(int i=0;i<vector.getDimension();++i){if(i>0){toAppendTo.append(separator);}CompositeFormat.formatDouble(vector.getEntry(i),format,toAppendTo,pos);}}"
981	"public void test(){if(i>0){toAppendTo.append(separator);}}"
982	"public void test(){for(int i=0;i<data.length;++i){data[i]=components.get(i).doubleValue();}}"
983	"public void test(){for(int i=0;i<dimension;++i){m.setEntry(i,i,1.0);}}"
984	"public void test(){for(int i=0;i<diagonal.length;++i){m.setEntry(i,i,diagonal[i]);}}"
985	"public void test(){for(int i=0;i<nCols;++i){m.setEntry(0,i,rowData[i]);}}"
986	"public void test(){for(int i=0;i<nRows;++i){m.setEntry(i,0,columnData[i]);}}"
987	"public void test(){for(int i=0;i<n;++i){oos.writeDouble(vector.getEntry(i));}}"
988	"public void test(){for(int i=0;i<n;++i){data[i]=ois.readDouble();}}"
989	"public void test(){for(int i=0;i<n;++i){for(int j=0;j<m;++j){oos.writeDouble(matrix.getEntry(i,j));}}}"
990	"public void test(){for(int j=0;j<m;++j){oos.writeDouble(matrix.getEntry(i,j));}}"
991	"public void test(){for(int i=0;i<n;++i){ final double[] dataI=data[i];for(int j=0;j<m;++j){dataI[j]=ois.readDouble();}}}"
992	"public void test(){for(int i=0;i<row;i++){sum=sum.subtract(luRow[i].multiply(lu[i][col]));}}"
993	"public void test(){for(int i=0;i<col;i++){sum=sum.subtract(luRow[i].multiply(lu[i][col]));}}"
994	"public void test(){for(int i=0;i<m;i++){tmp=lu[nonZero][i];lu[nonZero][i]=lu[col][i];lu[col][i]=tmp;}}"
995	"public void test(){for(int i=0;i<m;++i){ final T[] luI=lu[i];for(int j=0;j<i;++j){cachedL.setEntry(i,j,luI[j]);}cachedL.setEntry(i,i,field.getOne());}}"
996	"public void test(){for(int i=0;i<m;++i){ final T[] luI=lu[i];for(int j=i;j<m;++j){cachedU.setEntry(i,j,luI[j]);}}}"
997	"public void test(){for(int i=0;i<m;++i){cachedP.setEntry(i,pivot[i],field.getOne());}}"
998	"public void test(){for(int i=0;i<m;i++){determinant=determinant.multiply(lu[i][i]);}}"
999	"public void test(){for(int i=col+1;i<m;i++){bp[i]=bp[i].subtract(bpCol.multiply(lu[i][col]));}}"
1000	"public void test(){for(int i=0;i<col;i++){bp[i]=bp[i].subtract(bpCol.multiply(lu[i][col]));}}"
1001	"public void test(){for(int i=col+1;i<m;i++){ final T[] bpI=bp[i]; final T luICol=lu[i][col];for(int j=0;j<nColB;j++){bpI[j]=bpI[j].subtract(bpCol[j].multiply(luICol));}}}"
1002	"public void test(){for(int i=0;i<col;i++){ final T[] bpI=bp[i]; final T luICol=lu[i][col];for(int j=0;j<nColB;j++){bpI[j]=bpI[j].subtract(bpCol[j].multiply(luICol));}}}"
1003	"public void test(){for(int i=0;i<m;++i){identity.setEntry(i,i,one);}}"
1004	"public void test(){for(int i=0;i<x.length;++i){sumRankX+=ranks[i];}}"
1005	"public void test(){for(int i=0;i<observed.length;i++){sumExpected+=expected[i];sumObserved+=observed[i];}}"
1006	"public void test(){for(int i=0;i<observed.length;i++){if(rescale){ final double dev=observed[i]-ratio*expected[i];sumSq+=dev*dev/(ratio*expected[i]);}else { final double dev=observed[i]-expected[i];sumSq+=dev*dev/expected[i];}}}"
1007	"public void test(){if(rescale){ final double dev=observed[i]-ratio*expected[i];sumSq+=dev*dev/(ratio*expected[i]);}else { final double dev=observed[i]-expected[i];sumSq+=dev*dev/expected[i];}}"
1008	"public void test(){for(int i=0;i<observed1.length;i++){countSum1+=observed1[i];countSum2+=observed2[i];}}"
1009	"public void test(){for(int i=0;i<observed1.length;i++){if(observed1[i]==0&&observed2[i]==0){throw new MathIllegalArgumentException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY,i);}else {obs1=observed1[i];obs2=observed2[i];if(unequalCounts){dev=obs1/weight-obs2*weight;}else {dev=obs1-obs2;}sumSq+=(dev*dev)/(obs1+obs2);}}}"
1010	"public void test(){if(observed1[i]==0&&observed2[i]==0){throw new MathIllegalArgumentException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY,i);}else {obs1=observed1[i];obs2=observed2[i];if(unequalCounts){dev=obs1/weight-obs2*weight;}else {dev=obs1-obs2;}sumSq+=(dev*dev)/(obs1+obs2);}}"
1011	"public void test(){for(int i=1;i<in.length;i++){if(in[i].length!=in[0].length){throw new DimensionMismatchException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,in[i].length,in[0].length);}}}"
1012	"public void test(){if(in[i].length!=in[0].length){throw new DimensionMismatchException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,in[i].length,in[0].length);}}"
1013	"public void test(){for(int i=0;i<in.length;i++){if(in[i]<=0){throw new NotStrictlyPositiveException(in[i]);}}}"
1014	"public void test(){if(in[i]<=0){throw new NotStrictlyPositiveException(in[i]);}}"
1015	"public void test(){for(int i=0;i<in.length;i++){if(in[i]<0){throw new NotPositiveException(in[i]);}}}"
1016	"public void test(){if(in[i]<0){throw new NotPositiveException(in[i]);}}"
1017	"public void test(){for(int i=0;i<in.length;i++){for(int j=0;j<in[i].length;j++){if(in[i][j]<0){throw new NotPositiveException(in[i][j]);}}}}"
1018	"public void test(){for(int j=0;j<in[i].length;j++){if(in[i][j]<0){throw new NotPositiveException(in[i][j]);}}}"
1019	"public void test(){if(in[i][j]<0){throw new NotPositiveException(in[i][j]);}}"
1020	"public void test(){if(categoryData.size()<2){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,categoryData.size());}}"
1021	"public void test(){for(int i=0;i<data.length;i++){double val=data[i];num++;sum.increment(val);sumsq.increment(val);totnum++;totsum.increment(val);totsumsq.increment(val);}}"
1022	"public void test(){for(int i=0;i<x.length;++i){z[i]=y[i]-x[i];}}"
1023	"public void test(){for(int i=0;i<z.length;++i){zAbs[i]=FastMath.abs(z[i]);}}"
1024	"public void test(){for(int i=0;i<z.length;++i){if(z[i]>0){Wplus+=ranks[i];}}}"
1025	"public void test(){if(z[i]>0){Wplus+=ranks[i];}}"
1026	"public void test(){for(int i=0;i<m;++i){int rankSum=0;for(int j=0;j<N;++j){if(((i>>j)&1)==1){rankSum+=j+1;}}if(rankSum>=Wmax){++largerRankSums;}}}"
1027	"public void test(){if(((i>>j)&1)==1){rankSum+=j+1;}}"
1028	"public void test(){{newCenter=cluster.getCenter().centroidOf(cluster.getPoints());if(!newCenter.equals(cluster.getCenter())){clusteringChanged=true;}}}"
1029	"public void test(){if(!newCenter.equals(cluster.getCenter())){clusteringChanged=true;}}"
1030	"public void test(){for(T p : points){Cluster<T> cluster=getNearestCluster(clusters,p);cluster.addPoint(p);}}"
1031	"public void test(){while(resultSet.size()<k){int sum=0;for(int i=0;i<pointSet.size();i++){ final T p=pointSet.get(i); final Cluster<T> nearest=getNearestCluster(resultSet,p); final double d=p.distanceFrom(nearest.getCenter());sum+=d*d;dx2[i]=sum;} final double r=random.nextDouble()*sum;for(int i=0;i<dx2.length;i++){if(dx2[i]>=r){ final T p=pointSet.remove(i);resultSet.add(new Cluster<T>(p));break;}}}}"
1032	"public void test(){int sum=0;for(int i=0;i<pointSet.size();i++){ final T p=pointSet.get(i); final Cluster<T> nearest=getNearestCluster(resultSet,p); final double d=p.distanceFrom(nearest.getCenter());sum+=d*d;dx2[i]=sum;} final double r=random.nextDouble()*sum;}"
1033	"public void test(){for(int i=0;i<pointSet.size();i++){ final T p=pointSet.get(i); final Cluster<T> nearest=getNearestCluster(resultSet,p); final double d=p.distanceFrom(nearest.getCenter());sum+=d*d;dx2[i]=sum;}}"
1034	"public void test(){for(int i=0;i<pointSet.size();i++){ final T p=pointSet.get(i); final Cluster<T> nearest=getNearestCluster(resultSet,p); final double d=p.distanceFrom(nearest.getCenter());sum+=d*d;dx2[i]=sum;} final double r=random.nextDouble()*sum;for(int i=0;i<dx2.length;i++){if(dx2[i]>=r){ final T p=pointSet.remove(i);resultSet.add(new Cluster<T>(p));break;}}}"
1035	"public void test(){for(int i=0;i<dx2.length;i++){if(dx2[i]>=r){ final T p=pointSet.remove(i);resultSet.add(new Cluster<T>(p));break;}}}"
1036	"public void test(){if(dx2[i]>=r){ final T p=pointSet.remove(i);resultSet.add(new Cluster<T>(p));break;}}"
1037	"public void test(){if(!cluster.getPoints().isEmpty()){ final T center=cluster.getCenter(); final Variance stat=new Variance();for(T point : cluster.getPoints()){stat.increment(point.distanceFrom(center));} final double variance=stat.getResult();if(variance>maxVariance){maxVariance=variance;selected=cluster;}}}"
1038	"public void test(){for(T point : cluster.getPoints()){stat.increment(point.distanceFrom(center));}}"
1039	"public void test(){for(Cluster<T> cluster : clusters){if(!cluster.getPoints().isEmpty()){ final T center=cluster.getCenter(); final Variance stat=new Variance();for(T point : cluster.getPoints()){stat.increment(point.distanceFrom(center));} final double variance=stat.getResult();if(variance>maxVariance){maxVariance=variance;selected=cluster;}}}if(selected==null){throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);} final List<T> selectedPoints=selected.getPoints();return selectedPoints.remove(random.nextInt(selectedPoints.size()));}"
1040	"public void test(){for(Cluster<T> cluster : clusters){ final int number=cluster.getPoints().size();if(number>maxNumber){maxNumber=number;selected=cluster;}}}"
1041	"public void test(){int maxNumber=0;Cluster<T> selected=null;for(Cluster<T> cluster : clusters){ final int number=cluster.getPoints().size();if(number>maxNumber){maxNumber=number;selected=cluster;}}if(selected==null){throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);} final List<T> selectedPoints=selected.getPoints();return selectedPoints.remove(random.nextInt(selectedPoints.size()));}"
1042	"public void test(){for(Cluster<T> cluster : clusters){ final T center=cluster.getCenter(); final List<T> points=cluster.getPoints();for(int i=0;i<points.size();++i){ final double distance=points.get(i).distanceFrom(center);if(distance>maxDistance){maxDistance=distance;selectedCluster=cluster;selectedPoint=i;}}}}"
1043	"public void test(){for(int i=0;i<points.size();++i){ final double distance=points.get(i).distanceFrom(center);if(distance>maxDistance){maxDistance=distance;selectedCluster=cluster;selectedPoint=i;}}}"
1044	"public void test(){if(distance>maxDistance){maxDistance=distance;selectedCluster=cluster;selectedPoint=i;}}"
1045	"public void test(){for(Cluster<T> c : clusters){ final double distance=point.distanceFrom(c.getCenter());if(distance<minDistance){minDistance=distance;minCluster=c;}}}"
1046	"public void test(){for(int i=0;i<centroid.length;i++){centroid[i]+=p.getPoint()[i];}}"
1047	"public void test(){for(int i=0;i<centroid.length;i++){centroid[i]/=points.size();}}"
1048	"public void test(){for(int i=0;i<point.length;i++){if(point[i]!=otherPoint[i]){return false;}}}"
1049	"public void test(){if(point[i]!=otherPoint[i]){return false;}}"
1050	"public void test(){for(int i=0;i<coordinates.length;i++){buff.append(coordinates[i]);if(i<coordinates.length-1){buff.append("","");}}}"
1051	"public void test(){if(i<coordinates.length-1){buff.append("","");}}"
1052	"public void test(){for(int i=0;i<nVars;i++){for(int j=0;j<nVars;j++){double r=correlationMatrix.getEntry(i,j);out[i][j]=FastMath.sqrt((1-r*r)/(nObs-2));}}}"
1053	"public void test(){for(int j=0;j<nVars;j++){double r=correlationMatrix.getEntry(i,j);out[i][j]=FastMath.sqrt((1-r*r)/(nObs-2));}}"
1054	"public void test(){for(int i=0;i<nVars;i++){for(int j=0;j<nVars;j++){if(i==j){out[i][j]=0.0;}else {double r=correlationMatrix.getEntry(i,j);double t=FastMath.abs(r*FastMath.sqrt((nObs-2)/(1-r*r)));out[i][j]=2*tDistribution.cumulativeProbability(-t);}}}}"
1055	"public void test(){if(i==j){out[i][j]=0.0;}else {double r=correlationMatrix.getEntry(i,j);double t=FastMath.abs(r*FastMath.sqrt((nObs-2)/(1-r*r)));out[i][j]=2*tDistribution.cumulativeProbability(-t);}}"
1056	"public void test(){for(int i=0;i<nVars;i++){for(int j=0;j<i;j++){double corr=correlation(matrix.getColumn(i),matrix.getColumn(j));outMatrix.setEntry(i,j,corr);outMatrix.setEntry(j,i,corr);}outMatrix.setEntry(i,i,1.0);}}"
1057	"public void test(){for(int j=0;j<i;j++){double corr=correlation(matrix.getColumn(i),matrix.getColumn(j));outMatrix.setEntry(i,j,corr);outMatrix.setEntry(j,i,corr);}}"
1058	"public void test(){for(int i=0;i<xArray.length;i++){regression.addData(xArray[i],yArray[i]);}}"
1059	"public void test(){for(int i=0;i<nVars;i++){double sigma=FastMath.sqrt(covarianceMatrix.getEntry(i,i));outMatrix.setEntry(i,i,1.0);for(int j=0;j<i;j++){double entry=covarianceMatrix.getEntry(i,j)/(sigma*FastMath.sqrt(covarianceMatrix.getEntry(j,j)));outMatrix.setEntry(i,j,entry);outMatrix.setEntry(j,i,entry);}}}"
1060	"public void test(){for(int j=0;j<i;j++){double entry=covarianceMatrix.getEntry(i,j)/(sigma*FastMath.sqrt(covarianceMatrix.getEntry(j,j)));outMatrix.setEntry(i,j,entry);outMatrix.setEntry(j,i,entry);}}"
1061	"public void test(){for(int i=0;i<dimension;i++){for(int j=0;j<i;j++){double cov=covariance(matrix.getColumn(i),matrix.getColumn(j),biasCorrected);outMatrix.setEntry(i,j,cov);outMatrix.setEntry(j,i,cov);}outMatrix.setEntry(i,i,variance.evaluate(matrix.getColumn(i)));}}"
1062	"public void test(){for(int j=0;j<i;j++){double cov=covariance(matrix.getColumn(i),matrix.getColumn(j),biasCorrected);outMatrix.setEntry(i,j,cov);outMatrix.setEntry(j,i,cov);}}"
1063	"public void test(){for(int i=0;i<length;i++){double xDev=xArray[i]-xMean;double yDev=yArray[i]-yMean;result+=(xDev*yDev-result)/(i+1);}}"
1064	"public void test(){for(int i=0;i<matrix.getColumnDimension();i++){matrix.setColumn(i,rankingAlgorithm.rank(matrix.getColumn(i)));}}"
1065	"public void test(){Comparable<?> obj=v;if(v instanceof Integer){obj=Long.valueOf(((Integer)v).longValue());}try{Long count=freqTable.get(obj);if(count==null){freqTable.put(obj,Long.valueOf(1));}else {freqTable.put(obj,Long.valueOf(count.longValue()+1));}}catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES,v.getClass().getName());}}"
1066	"public void test(){if(v instanceof Integer){return getCount(((Integer)v).longValue());}long result=0;try{Long count=freqTable.get(v);if(count!=null){result=count.longValue();}}catch (ClassCastException ex) {}return result;}"
1067	"public void test(){if(c==null){c=new NaturalComparator();}long result=0;try{Long value=freqTable.get(v);if(value!=null){result=value.longValue();}}catch (ClassCastException ex) {  return result;}if(c.compare(v,freqTable.firstKey())<0){return 0;}if(c.compare(v,freqTable.lastKey())>=0){return getSumFreq();}}"
1068	"public void test(){for(int i=0;i<n;i++){result+=sample1[i]-sample2[i];}}"
1069	"public void test(){for(int i=0;i<n;i++){diff=sample1[i]-sample2[i];sum1+=(diff-meanDifference)*(diff-meanDifference);sum2+=diff-meanDifference;}}"
1070	"public void test(){for(int i=0;i<sample.length;i++){stats.addValue(sample[i]);}}"
1071	"public void test(){for(int i=0;i<sample.length;i++){standardizedSample[i]=(sample[i]-mean)/standardDeviation;}}"
1072	"public void test(){for(int i=0;i<nobs;i++){y[i]=data[pointer++];if(!noIntercept){x[i][0]=1.0;}for(int j=noIntercept?0:1;j<cols;j++){x[i][j]=data[pointer++];}}}"
1073	"public void test(){if(!noIntercept){x[i][0]=1.0;}}"
1074	"public void test(){for(int j=noIntercept?0:1;j<cols;j++){x[i][j]=data[pointer++];}}"
1075	"public void test(){for(int i=0;i<x.length;i++){if(x[i].length!=nVars){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,x[i].length,nVars);}xAug[i][0]=1.0;System.arraycopy(x[i],0,xAug[i],1,nVars);}}"
1076	"public void test(){if(x[i].length!=nVars){throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,x[i].length,nVars);}}"
1077	"public void test(){for(int i=0;i<length;i++){result[i]=FastMath.sqrt(sigma*betaVariance[i][i]);}}"
1078	"public void test(){for(int i=0;i<n;i++){for(int j=0;j<n;j++){if(i==j&&i<p){augIData[i][j]=1.0;}else {augIData[i][j]=0.0;}}}}"
1079	"public void test(){if(i==j&&i<p){augIData[i][j]=1.0;}else {augIData[i][j]=0.0;}}"
1080	"public void test(){for(int i=0;i<data.length;i++){addData(data[i][0],data[i][1]);}}"
1081	"public void test(){for(int i=0;i<data.length&&n>0;i++){removeData(data[i][0],data[i][1]);}}"
1082	"public void test(){if(d<value||Double.isNaN(value)){value=d;}}"
1083	"public void test(){for(int i=begin;i<begin+length;i++){if(!Double.isNaN(values[i])){min=(min<values[i])?min:values[i];}}}"
1084	"public void test(){if(!Double.isNaN(values[i])){min=(min<values[i])?min:values[i];}}"
1085	"public void test(){while(i<j){while((i<j)&&(work[j]>=value)){--j;}while((i<j)&&(work[i]<=value)){++i;}if(i<j){ final double tmp=work[i];work[i++]=work[j];work[j--]=tmp;}}}"
1086	"public void test(){while((i<j)&&(work[j]>=value)){--j;}}"
1087	"public void test(){while((i<j)&&(work[i]<=value)){++i;}}"
1088	"public void test(){if(i<j){ final double tmp=work[i];work[i++]=work[j];work[j--]=tmp;}}"
1089	"public void test(){if((i>=end)||(work[i]>value)){--i;}}"
1090	"public void test(){while(i<j){while((i<j)&&(work[j]>=value)){--j;}while((i<j)&&(work[i]<=value)){++i;}if(i<j){ final double tmp=work[i];work[i++]=work[j];work[j--]=tmp;}}if((i>=end)||(work[i]>value)){--i;}work[begin]=work[i];work[i]=value;return i;}"
1091	"public void test(){for(int j=begin+1;j<end;j++){ final double saved=work[j];int i=j-1;while((i>=begin)&&(saved<work[i])){work[i+1]=work[i];i--;}work[i+1]=saved;}}"
1092	"public void test(){while((i>=begin)&&(saved<work[i])){work[i+1]=work[i];i--;}}"
1093	"public void test(){if(d>value||Double.isNaN(value)){value=d;}}"
1094	"public void test(){for(int i=begin;i<begin+length;i++){if(!Double.isNaN(values[i])){max=(max>values[i])?max:values[i];}}}"
1095	"public void test(){if(!Double.isNaN(values[i])){max=(max>values[i])?max:values[i];}}"
1096	"public void test(){for(int i=0;i<k;++i){sumImpl[i]=new Sum();sumSqImpl[i]=new SumOfSquares();minImpl[i]=new Min();maxImpl[i]=new Max();sumLogImpl[i]=new SumOfLogs();geoMeanImpl[i]=new GeometricMean();meanImpl[i]=new Mean();}}"
1097	"public void test(){for(int i=0;i<k;++i){double v=value[i];sumImpl[i].increment(v);sumSqImpl[i].increment(v);minImpl[i].increment(v);maxImpl[i].increment(v);sumLogImpl[i].increment(v);geoMeanImpl[i].increment(v);meanImpl[i].increment(v);}}"
1098	"public void test(){for(int i=0;i<results.length;++i){results[i]=stats[i].getResult();}}"
1099	"public void test(){for(int i=0;i<k;++i){stdDev[i]=FastMath.sqrt(matrix.getEntry(i,i));}}"
1100	"public void test(){for(int i=0;i<data.length;++i){if(i>0){buffer.append(separator);}buffer.append(data[i]);}}"
1101	"public void test(){if(i>0){buffer.append(separator);}}"
1102	"public void test(){for(int i=0;i<k;++i){minImpl[i].clear();maxImpl[i].clear();sumImpl[i].clear();sumLogImpl[i].clear();sumSqImpl[i].clear();geoMeanImpl[i].clear();meanImpl[i].clear();}}"
1103	"public void test(){if(n<1){m4=0.0;m3=0.0;m2=0.0;m1=0.0;}double prevM3=m3;double prevM2=m2;super.increment(d);double n0=n;m4=m4-4.0*nDev+6.0*nDevSq+((n0*n0)-3*(n0-1))*(nDevSq*nDevSq);}"
1104	"public void test(){if(n<1){m3=m2=m1=0.0;}double prevM2=m2;super.increment(d);nDevSq=nDev*nDev;double n0=n;m3=m3-3.0*nDev+(n0-1)*(n0-2);}"
1105	"public void test(){if(n==0){m1=0.0;}n++;double n0=n;dev=d-m1;nDev=dev/n0;m1+=nDev;}"
1106	"public void test(){if(incMoment){moment.increment(d);}}"
1107	"public void test(){for(int i=begin;i<begin+length;i++){dev=values[i]-mean;accum+=dev*dev;accum2+=dev;}}"
1108	"public void test(){for(int i=begin;i<begin+length;i++){dev=values[i]-mean;accum+=weights[i]*(dev*dev);accum2+=weights[i]*dev;}}"
1109	"public void test(){for(int i=0;i<weights.length;i++){sumWts+=weights[i];}}"
1110	"public void test(){for(int i=begin;i<begin+length;i++){correction+=values[i]-xbar;}}"
1111	"public void test(){for(int i=begin;i<begin+length;i++){correction+=weights[i]*(values[i]-xbarw);}}"
1112	"public void test(){for(int i=0;i<v.length;++i){sums[i]+=v[i];for(int j=0;j<=i;++j){productsSums[k++]+=v[i]*v[j];}}}"
1113	"public void test(){for(int j=0;j<=i;++j){productsSums[k++]+=v[i]*v[j];}}"
1114	"public void test(){for(int i=0;i<dimension;++i){for(int j=0;j<=i;++j){double e=c*(n*productsSums[k++]-sums[i]*sums[j]);result.setEntry(i,j,e);result.setEntry(j,i,e);}}}"
1115	"public void test(){for(int j=0;j<=i;++j){double e=c*(n*productsSums[k++]-sums[i]*sums[j]);result.setEntry(i,j,e);result.setEntry(j,i,e);}}"
1116	"public void test(){for(int i=0;i<dimension;++i){means[i]=new Mean();}}"
1117	"public void test(){for(int i=0;i<v.length;++i){means[i].increment(v[i]);}}"
1118	"public void test(){for(int i=0;i<result.length;++i){result[i]=means[i].getResult();}}"
1119	"public void test(){for(int i=start;i<length;i++){if((values[i]>cutoff)==booleanDirection){dev=values[i]-cutoff;sumsq+=dev*dev;}}}"
1120	"public void test(){if((values[i]>cutoff)==booleanDirection){dev=values[i]-cutoff;sumsq+=dev*dev;}}"
1121	"public void test(){if(incMoment){moment.increment(d);}else {throw MathRuntimeException.createIllegalStateException(LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS);}}"
1122	"public void test(){for(int i=begin;i<begin+length;i++){accum3+=FastMath.pow(values[i]-mean,4.0);}}"
1123	"public void test(){if(n<1){m1=m2=0.0;}super.increment(d);m2+=((double)n-1)*dev;}"
1124	"public void test(){for(int i=begin;i<begin+length;i++){ final double d=values[i]-m;accum+=d*d;accum2+=d;}}"
1125	"public void test(){for(int i=begin;i<begin+length;i++){ final double d=values[i]-m;accum3+=d*d;}}"
1126	"public void test(){for(int i=begin;i<k;i++){increment(values[i]);}}"
1127	"public void test(){value+=d*d;n++;}"
1128	"public void test(){for(int i=begin;i<begin+length;i++){sumSq+=values[i]*values[i];}}"
1129	"public void test(){value+=FastMath.log(d);n++;}"
1130	"public void test(){for(int i=begin;i<begin+length;i++){sumLog+=FastMath.log(values[i]);}}"
1131	"public void test(){value*=d;n++;}"
1132	"public void test(){for(int i=begin;i<begin+length;i++){product*=values[i];}}"
1133	"public void test(){for(int i=begin;i<begin+length;i++){product*=FastMath.pow(values[i],weights[i]);}}"
1134	"public void test(){value+=d;n++;}"
1135	"public void test(){for(int i=begin;i<begin+length;i++){sum+=values[i];}}"
1136	"public void test(){for(int i=begin;i<begin+length;i++){sum+=values[i]*weights[i];}}"
1137	"public void test(){for(int i=begin;i<begin+length;i++){if(Double.isNaN(weights[i])){throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);}if(Double.isInfinite(weights[i])){throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);}if(weights[i]<0){throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);}if(!containsPositiveWeight&&weights[i]>0.0){containsPositiveWeight=true;}}}"
1138	"public void test(){if(Double.isNaN(weights[i])){throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);}}"
1139	"public void test(){if(Double.isInfinite(weights[i])){throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);}}"
1140	"public void test(){if(weights[i]<0){throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);}}"
1141	"public void test(){if(!containsPositiveWeight&&weights[i]>0.0){containsPositiveWeight=true;}}"
1142	"public void test(){for(int i=0;i<data.length;i++){ranks[i]=new IntDoublePair(data[i],i);}}"
1143	"public void test(){for(int i=1;i<ranks.length;i++){if(Double.compare(ranks[i].getValue(),ranks[i-1].getValue())>0){pos=i+1;if(tiesTrace.size()>1){resolveTie(out,tiesTrace);}tiesTrace=new ArrayList<Integer>();tiesTrace.add(ranks[i].getPosition());}else {tiesTrace.add(ranks[i].getPosition());}out[ranks[i].getPosition()]=pos;}}"
1144	"public void test(){if(Double.compare(ranks[i].getValue(),ranks[i-1].getValue())>0){pos=i+1;if(tiesTrace.size()>1){resolveTie(out,tiesTrace);}tiesTrace=new ArrayList<Integer>();tiesTrace.add(ranks[i].getPosition());}else {tiesTrace.add(ranks[i].getPosition());}}"
1145	"public void test(){if(tiesTrace.size()>1){resolveTie(out,tiesTrace);}}"
1146	"public void test(){for(int i=0;i<ranks.length;i++){if(Double.isNaN(ranks[i].getValue())){for(int k=i+1;k<ranks.length;k++){ranks[k]=new IntDoublePair(ranks[k].getValue(),ranks[k].getPosition()-1);}}else {outRanks[j]=new IntDoublePair(ranks[i].getValue(),ranks[i].getPosition());j++;}}}"
1147	"public void test(){if(Double.isNaN(ranks[i].getValue())){for(int k=i+1;k<ranks.length;k++){ranks[k]=new IntDoublePair(ranks[k].getValue(),ranks[k].getPosition()-1);}}else {outRanks[j]=new IntDoublePair(ranks[i].getValue(),ranks[i].getPosition());j++;}}"
1148	"public void test(){for(int k=i+1;k<ranks.length;k++){ranks[k]=new IntDoublePair(ranks[k].getValue(),ranks[k].getPosition()-1);}}"
1149	"public void test(){for(int i=0;i<ranks.length;i++){if(Double.isNaN(ranks[i].getValue())){ranks[i]=new IntDoublePair(value,ranks[i].getPosition());}}}"
1150	"public void test(){if(Double.isNaN(ranks[i].getValue())){ranks[i]=new IntDoublePair(value,ranks[i].getPosition());}}"
1151	"public void test(){for(int i=0;i<ranks.length;i++){if(Double.isNaN(ranks[i].getValue())){return true;}}}"
1152	"public void test(){if(Double.isNaN(ranks[i].getValue())){return true;}}"
1153	"public void test(){while(iterator.hasNext()){ranks[iterator.next()]=f+i++;}}"
1154	"public void test(){if(nanPositions.size()==0){return ;}}"
1155	"public void test(){for(int i=0;i<ranks.length;i++){if(Double.isNaN(ranks[i].getValue())){out.add(Integer.valueOf(i));}}}"
1156	"public void test(){if(Double.isNaN(ranks[i].getValue())){out.add(Integer.valueOf(i));}}"
1157	"public void test(){ final StringBuilder sb=new StringBuilder();int count=0; final int len=messages.size();for(SerializablePair<Localizable,Object[]> pair : messages){ final MessageFormat fmt=new MessageFormat(pair.getKey().getLocalizedString(locale),locale);sb.append(fmt.format(pair.getValue()));if(++count<len){sb.append(separator);}}return sb.toString();}"
1158	"public void test(){{ final int len=messages.size();out.writeInt(len);for(int i=0;i<len;i++){SerializablePair<Localizable,Object[]> pair=messages.get(i);out.writeObject(pair.getKey()); final Object[] args=pair.getValue(); final int aLen=args.length;out.writeInt(aLen);for(int j=0;j<aLen;j++){if(args[j] instanceof Serializable){out.writeObject(args[j]);}else {out.writeObject(nonSerializableReplacement(args[j]));}}}}}"
1159	"public void test(){for(int i=0;i<len;i++){SerializablePair<Localizable,Object[]> pair=messages.get(i);out.writeObject(pair.getKey()); final Object[] args=pair.getValue(); final int aLen=args.length;out.writeInt(aLen);for(int j=0;j<aLen;j++){if(args[j] instanceof Serializable){out.writeObject(args[j]);}else {out.writeObject(nonSerializableReplacement(args[j]));}}}}"
1160	"public void test(){for(int i=0;i<len;i++){ final Localizable key=(Localizable)in.readObject(); final int aLen=in.readInt(); final Object[] args=new Object[aLen];for(int j=0;j<aLen;j++){args[j]=in.readObject();}messages.add(new SerializablePair<Localizable,Object[]>(key,args));}}"
1161	"public void test(){ final int len=context.keySet().size();out.writeInt(len);for(String key : context.keySet()){out.writeObject(key); final Object value=context.get(key);if(value instanceof Serializable){out.writeObject(value);}else {out.writeObject(nonSerializableReplacement(value));}}}"
1162	"public void test(){for(String key : context.keySet()){out.writeObject(key); final Object value=context.get(key);if(value instanceof Serializable){out.writeObject(value);}else {out.writeObject(nonSerializableReplacement(value));}}}"
1163	"public void test(){for(int i=0;i<len;i++){ final String key=(String)in.readObject(); final Object value=in.readObject();context.put(key,value);}}"