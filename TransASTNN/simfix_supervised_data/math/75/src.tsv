1	"public void test(){return getCumPct((Comparable<?>)v);}"
2	"public void test(){if(v==null){v=new double[7][];for(int k=0;k<7;++k){v[k]=new double[interpolatedState.length];}}}"
3	"public void test(){return new Vector3D(x+v.x,y+v.y,z+v.z);}"
4	"public void test(){return new Vector3D(x+factor*v.x,y+factor*v.y,z+factor*v.z);}"
5	"public void test(){return new Vector3D(x-v.x,y-v.y,z-v.z);}"
6	"public void test(){return new Vector3D(x-factor*v.x,y-factor*v.y,z-factor*v.z);}"
7	"public void test(){return getInstance().format(v);}"
8	"public void test(){if(v<-t&&a==0){y=lambda+y;break;}}"
9	"public void test(){if(v<qa){y=lambda+y;break;}}"
10	"public void test(){if(v>qr){continue;}}"
11	"public void test(){if(v<y*logLambda-MathUtils.factorialLog((int)(y+lambda))+logLambdaFactorial){y=lambda+y;break;}}"
12	"public void test(){if((u==0)||(v==0)){if((u==Integer.MIN_VALUE)||(v==Integer.MIN_VALUE)){throw MathRuntimeException.createArithmeticException(""overflow: gcd({0}, {1}) is 2^31"",p,q);}return Math.abs(u)+Math.abs(v);}}"
13	"public void test(){if((u==Integer.MIN_VALUE)||(v==Integer.MIN_VALUE)){throw MathRuntimeException.createArithmeticException(""overflow: gcd({0}, {1}) is 2^31"",p,q);}}"
14	"public void test(){if(v>0){v=-v;}}"
15	"public void test(){int t=((u&1)==1)?v:-(u/2);}"
16	"public void test(){if(t>0){u=-t;}else {v=t;}}"
17	"public void test(){if((u==0)||(v==0)){if((u==Long.MIN_VALUE)||(v==Long.MIN_VALUE)){throw MathRuntimeException.createArithmeticException(""overflow: gcd({0}, {1}) is 2^63"",p,q);}return (Math.abs(u)+Math.abs(v));}}"
18	"public void test(){if((u==Long.MIN_VALUE)||(v==Long.MIN_VALUE)){throw MathRuntimeException.createArithmeticException(""overflow: gcd({0}, {1}) is 2^63"",p,q);}}"
19	"public void test(){long t=((u&1)==1)?v:-(u/2);}"
20	"public void test(){if((fu<=fv)||(v==x)){v=u;fv=fu;}}"
21	"public void test(){if(v<knots[0]||v>knots[n]){throw new ArgumentOutsideDomainException(v,knots[0],knots[n]);}}"
22	"public void test(){return polynomials[i].value(v-knots[i]);}"
23	"public void test(){return v.dotProduct(w)/(v.getNorm()*w.getNorm());}"
24	"public void test(){if(v.length!=nCols){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.length,nCols);}}"
25	"public void test(){return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>)v).getDataRef()),false);}"
26	"public void test(){if(v.getDimension()!=nCols){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.getDimension(),nCols);}}"
27	"public void test(){if(v.length!=nRows){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.length,nRows);}}"
28	"public void test(){return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>)v).getDataRef()),false);}"
29	"public void test(){if(v.getDimension()!=nRows){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.getDimension(),nRows);}}"
30	"public void test(){for(int key=0;key<virtualSize;key++){double value=v.getEntry(key);if(!isDefaultValue(value)){entries.put(key,value);}}}"
31	"public void test(){checkVectorDimensions(v.getDimension());if(v instanceof OpenMapRealVector){return add((OpenMapRealVector)v);}else {return super.add(v);}}"
32	"public void test(){if(v instanceof OpenMapRealVector){return add((OpenMapRealVector)v);}else {return super.add(v);}}"
33	"public void test(){OpenMapRealVector res=copyThis?this.copy():v.copy();}"
34	"public void test(){Iterator iter=copyThis?v.entries.iterator():entries.iterator();}"
35	"public void test(){OpenIntToDoubleHashMap randomAccess=copyThis?entries:v.entries;}"
36	"public void test(){if(v instanceof OpenMapRealVector){return append((OpenMapRealVector)v);}}"
37	"public void test(){if(v instanceof OpenMapRealVector){return append((OpenMapRealVector)v);}return append(v.getData());}"
38	"public void test(){Iterator iter=thisIsSmaller?entries.iterator():v.entries.iterator();}"
39	"public void test(){OpenIntToDoubleHashMap larger=thisIsSmaller?v.entries:entries;}"
40	"public void test(){if(v instanceof OpenMapRealVector){return dotProduct((OpenMapRealVector)v);}else {return super.dotProduct(v);}}"
41	"public void test(){checkVectorDimensions(v.getDimension());if(v instanceof OpenMapRealVector){return getDistance((OpenMapRealVector)v);}return getDistance(v.getData());}"
42	"public void test(){if(v instanceof OpenMapRealVector){return getDistance((OpenMapRealVector)v);}}"
43	"public void test(){checkVectorDimensions(v.getDimension());if(v instanceof OpenMapRealVector){return getL1Distance((OpenMapRealVector)v);}return getL1Distance(v.getData());}"
44	"public void test(){if(v instanceof OpenMapRealVector){return getL1Distance((OpenMapRealVector)v);}}"
45	"public void test(){while(iter.hasNext()){iter.advance();double delta=Math.abs(iter.value()-v.getEntry(iter.key()));if(delta>max){max=delta;}}}"
46	"public void test(){checkVectorDimensions(v.getDimension());if(v instanceof OpenMapRealVector){return getLInfDistance((OpenMapRealVector)v);}return getLInfDistance(v.getData());}"
47	"public void test(){if(v instanceof OpenMapRealVector){return getLInfDistance((OpenMapRealVector)v);}}"
48	"public void test(){for(int i=0;i<v.length;i++){double delta=Math.abs(getEntry(i)-v[i]);if(delta>max){max=delta;}}}"
49	"public void test(){checkVectorDimensions(v.getDimension());return v.mapMultiply(dotProduct(v)/v.dotProduct(v));}"
50	"public void test(){checkVectorDimensions(v.length);return (OpenMapRealVector)projection(new OpenMapRealVector(v));}"
51	"public void test(){checkVectorDimensions(v.getDimension());if(v instanceof OpenMapRealVector){return subtract((OpenMapRealVector)v);}return subtract(v.getData());}"
52	"public void test(){if(v instanceof OpenMapRealVector){return subtract((OpenMapRealVector)v);}}"
53	"public void test(){for(int i=0;i<v.length;i++){if(entries.containsKey(i)){res.setEntry(i,entries.get(i)-v[i]);}else {res.setEntry(i,-v[i]);}}}"
54	"public void test(){if(entries.containsKey(i)){res.setEntry(i,entries.get(i)-v[i]);}else {res.setEntry(i,-v[i]);}}"
55	"public void test(){if(v.length!=getColumnDimension()){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.length,getColumnDimension());}}"
56	"public void test(){ final BigDecimal bd[]=new BigDecimal[v.length];for(int i=0;i<bd.length;i++){bd[i]=new BigDecimal(v[i]);}return operate(bd);}"
57	"public void test(){if(v.length!=nCols){throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,nCols);}}"
58	"public void test(){if(v.length!=nRows){throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,nRows);}}"
59	"public void test(){if(v.length!=columns){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.length,columns);}}"
60	"public void test(){if(v.length!=rows){throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch: got {0} but expected {1}"",v.length,rows);}}"
61	"public void test(){field=v.getField();data=deep?v.data.clone():v.data;}"
62	"public void test(){return add((ArrayFieldVector<T>)v);}"
63	"public void test(){checkVectorDimensions(v.length);T[] out=buildArray(data.length);for(int i=0;i<data.length;i++){out[i]=data[i].add(v[i]);}return new ArrayFieldVector<T>(out);}"
64	"public void test(){return (ArrayFieldVector<T>)add(v.data);}"
65	"public void test(){return subtract((ArrayFieldVector<T>)v);}"
66	"public void test(){checkVectorDimensions(v.length);T[] out=buildArray(data.length);for(int i=0;i<data.length;i++){out[i]=data[i].subtract(v[i]);}return new ArrayFieldVector<T>(out);}"
67	"public void test(){return (ArrayFieldVector<T>)subtract(v.data);}"
68	"public void test(){return ebeMultiply((ArrayFieldVector<T>)v);}"
69	"public void test(){checkVectorDimensions(v.length);T[] out=buildArray(data.length);for(int i=0;i<data.length;i++){out[i]=data[i].multiply(v[i]);}return new ArrayFieldVector<T>(out);}"
70	"public void test(){return (ArrayFieldVector<T>)ebeMultiply(v.data);}"
71	"public void test(){return ebeDivide((ArrayFieldVector<T>)v);}"
72	"public void test(){checkVectorDimensions(v.length);T[] out=buildArray(data.length);for(int i=0;i<data.length;i++){out[i]=data[i].divide(v[i]);}return new ArrayFieldVector<T>(out);}"
73	"public void test(){return (ArrayFieldVector<T>)ebeDivide(v.data);}"
74	"public void test(){return dotProduct((ArrayFieldVector<T>)v);}"
75	"public void test(){checkVectorDimensions(v.length);T dot=field.getZero();for(int i=0;i<data.length;i++){dot=dot.add(data[i].multiply(v[i]));}return dot;}"
76	"public void test(){return dotProduct(v.data);}"
77	"public void test(){return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));}"
78	"public void test(){return projection(new ArrayFieldVector<T>(v,false));}"
79	"public void test(){return (ArrayFieldVector<T>)v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));}"
80	"public void test(){return outerProduct((ArrayFieldVector<T>)v);}"
81	"public void test(){return outerProduct(v.data);}"
82	"public void test(){try{return append((ArrayFieldVector<T>)v);}catch (ClassCastException cce) {  return new ArrayFieldVector<T>(this,new ArrayFieldVector<T>(v));}}"
83	"public void test(){return new ArrayFieldVector<T>(this,v);}"
84	"public void test(){data=deep?v.data.clone():v.data;}"
85	"public void test(){if(v instanceof ArrayRealVector){return add((ArrayRealVector)v);}else {checkVectorDimensions(v);double[] out=data.clone();Iterator<Entry> it=v.sparseIterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){out[e.getIndex()]+=e.getValue();}return new ArrayRealVector(out,false);}}"
86	"public void test(){return add((ArrayRealVector)v);}"
87	"public void test(){checkVectorDimensions(v.length);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]+=v[i];}return new ArrayRealVector(out,false);}"
88	"public void test(){return (ArrayRealVector)add(v.data);}"
89	"public void test(){if(v instanceof ArrayRealVector){return subtract((ArrayRealVector)v);}else {checkVectorDimensions(v);double[] out=data.clone();Iterator<Entry> it=v.sparseIterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){out[e.getIndex()]-=e.getValue();}return new ArrayRealVector(out,false);}}"
90	"public void test(){return subtract((ArrayRealVector)v);}"
91	"public void test(){checkVectorDimensions(v.length);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]-=v[i];}return new ArrayRealVector(out,false);}"
92	"public void test(){return (ArrayRealVector)subtract(v.data);}"
93	"public void test(){if(v instanceof ArrayRealVector){return ebeMultiply((ArrayRealVector)v);}else {checkVectorDimensions(v);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]*=v.getEntry(i);}return new ArrayRealVector(out,false);}}"
94	"public void test(){return ebeMultiply((ArrayRealVector)v);}"
95	"public void test(){checkVectorDimensions(v.length);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]*=v[i];}return new ArrayRealVector(out,false);}"
96	"public void test(){return (ArrayRealVector)ebeMultiply(v.data);}"
97	"public void test(){if(v instanceof ArrayRealVector){return ebeDivide((ArrayRealVector)v);}else {checkVectorDimensions(v);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]/=v.getEntry(i);}return new ArrayRealVector(out,false);}}"
98	"public void test(){return ebeDivide((ArrayRealVector)v);}"
99	"public void test(){checkVectorDimensions(v.length);double[] out=data.clone();for(int i=0;i<data.length;i++){out[i]/=v[i];}return new ArrayRealVector(out,false);}"
100	"public void test(){return (ArrayRealVector)ebeDivide(v.data);}"
101	"public void test(){if(v instanceof ArrayRealVector){return dotProduct((ArrayRealVector)v);}else {checkVectorDimensions(v);double dot=0;Iterator<Entry> it=v.sparseIterator();Entry e;while(it.hasNext()&&(e=it.next())!=null){dot+=data[e.getIndex()]*e.getValue();}return dot;}}"
102	"public void test(){return dotProduct((ArrayRealVector)v);}"
103	"public void test(){checkVectorDimensions(v.length);double dot=0;for(int i=0;i<data.length;i++){dot+=data[i]*v[i];}return dot;}"
104	"public void test(){if(v instanceof ArrayRealVector){return getDistance((ArrayRealVector)v);}else {checkVectorDimensions(v);double sum=0;for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);sum+=delta*delta;}return Math.sqrt(sum);}}"
105	"public void test(){return getDistance((ArrayRealVector)v);}"
106	"public void test(){return getDistance(v.data);}"
107	"public void test(){if(v instanceof ArrayRealVector){return getL1Distance((ArrayRealVector)v);}else {checkVectorDimensions(v);double sum=0;for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);sum+=Math.abs(delta);}return sum;}}"
108	"public void test(){return getL1Distance((ArrayRealVector)v);}"
109	"public void test(){return getL1Distance(v.data);}"
110	"public void test(){if(v instanceof ArrayRealVector){return getLInfDistance((ArrayRealVector)v);}else {checkVectorDimensions(v);double max=0;for(int i=0;i<data.length;++i){ final double delta=data[i]-v.getEntry(i);max=Math.max(max,Math.abs(delta));}return max;}}"
111	"public void test(){return getLInfDistance((ArrayRealVector)v);}"
112	"public void test(){return getLInfDistance(v.data);}"
113	"public void test(){return v.mapMultiply(dotProduct(v)/v.dotProduct(v));}"
114	"public void test(){return projection(new ArrayRealVector(v,false));}"
115	"public void test(){return (ArrayRealVector)v.mapMultiply(dotProduct(v)/v.dotProduct(v));}"
116	"public void test(){if(v instanceof ArrayRealVector){return outerProduct((ArrayRealVector)v);}else {checkVectorDimensions(v); final int m=data.length; final RealMatrix out=MatrixUtils.createRealMatrix(m,m);for(int i=0;i<data.length;i++){for(int j=0;j<data.length;j++){out.setEntry(i,j,data[i]*v.getEntry(j));}}return out;}}"
117	"public void test(){return outerProduct((ArrayRealVector)v);}"
118	"public void test(){try{return new ArrayRealVector(this,(ArrayRealVector)v);}catch (ClassCastException cce) {  return new ArrayRealVector(this,v);}}"
119	"public void test(){return new ArrayRealVector(this,v);}"
120	"public void test(){for(double v : data){if(Double.isNaN(v)){return true;}}}"
121	"public void test(){if(Double.isNaN(v)){return true;}}"
122	"public void test(){for(double v : data){if(Double.isInfinite(v)){return true;}}}"
123	"public void test(){if(Double.isInfinite(v)){return true;}}"
124	"public void test(){return new ArrayRealVector(operate(((ArrayRealVector)v).getDataRef()),false);}"
125	"public void test(){return new ArrayRealVector(preMultiply(((ArrayRealVector)v).getDataRef()),false);}"
126	"public void test(){checkVectorDimensions(v.length);SparseFieldVector<T> res=new SparseFieldVector<T>(field,getDimension());for(int i=0;i<v.length;i++){res.setEntry(i,v[i].add(getEntry(i)));}return res;}"
127	"public void test(){if(v instanceof SparseFieldVector<?>){return append((SparseFieldVector<T>)v);}else {return append(v.toArray());}}"
128	"public void test(){if(idx<v.length){value=v[idx];}}"
129	"public void test(){if(v instanceof SparseFieldVector<?>)return outerProduct((SparseFieldVector<T>)v);else return outerProduct(v.toArray());}"
130	"public void test(){checkVectorDimensions(v.getDimension());return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));}"
131	"public void test(){checkVectorDimensions(v.length);return projection(new SparseFieldVector<T>(field,v));}"
132	"public void test(){if(v instanceof SparseFieldVector<?>)return subtract((SparseFieldVector<T>)v);else return subtract(v.toArray());}"
133	"public void test(){for(int i=0;i<v.length;i++){if(entries.containsKey(i)){res.setEntry(i,entries.get(i).subtract(v[i]));}else {res.setEntry(i,field.getZero().subtract(v[i]));}}}"
134	"public void test(){if(entries.containsKey(i)){res.setEntry(i,entries.get(i).subtract(v[i]));}else {res.setEntry(i,field.getZero().subtract(v[i]));}}"
135	"public void test(){if(v instanceof SparseFieldVector<?>){return add((SparseFieldVector<T>)v);}else {return add(v.toArray());}}"
136	"public void test(){if(v instanceof ArrayRealVector){double[] values=((ArrayRealVector)v).getDataRef();return add(values);}}"
137	"public void test(){return dotProduct(new ArrayRealVector(v,false));}"
138	"public void test(){return ebeDivide(new ArrayRealVector(v,false));}"
139	"public void test(){return ebeMultiply(new ArrayRealVector(v,false));}"
140	"public void test(){return getDistance(new ArrayRealVector(v,false));}"
141	"public void test(){if(v instanceof SparseRealVector||this instanceof SparseRealVector){product=new OpenMapRealMatrix(this.getDimension(),v.getDimension());}else {product=new Array2DRowRealMatrix(this.getDimension(),v.getDimension());}}"
142	"public void test(){return outerProduct(new ArrayRealVector(v,false));}"
143	"public void test(){return (m-mu)/Math.sqrt(v/n);}"
144	"public void test(){double t=Math.abs(t(m,mu,v,n));distribution.setDegreesOfFreedom(n-1);return 2.0*distribution.cumulativeProbability(-t);}"
145	"public void test(){if(v instanceof Comparable<?>){addValue((Comparable<?>)v);}else {throw MathRuntimeException.createIllegalArgumentException(""class ({0}) does not implement Comparable"",v.getClass().getName());}}"
146	"public void test(){if(v instanceof Integer){obj=Long.valueOf(((Integer)v).longValue());}}"
147	"public void test(){throw MathRuntimeException.createIllegalArgumentException(""instance of class {0} not comparable to existing values"",v.getClass().getName());}"
148	"public void test(){return getCount((Comparable<?>)v);}"
149	"public void test(){if(v instanceof Integer){return getCount(((Integer)v).longValue());}}"
150	"public void test(){return getCount(Long.valueOf(v));}"
151	"public void test(){return getCount(Character.valueOf(v));}"
152	"public void test(){return getCumPct((Comparable<?>)v);}"
153	"public void test(){ final long sumFreq=getSumFreq();if(sumFreq==0){return Double.NaN;}return (double)getCount(v)/(double)sumFreq;}"
154	"public void test(){return getPct(Long.valueOf(v));}"
155	"public void test(){return getPct(Character.valueOf(v));}"
156	"public void test(){return getCumFreq((Comparable<?>)v);}"
157	"public void test(){if(v instanceof Integer){return getCumFreq(((Integer)v).longValue());}}"
158	"public void test(){if(c.compare(v,freqTable.firstKey())<0){return 0;}}"
159	"public void test(){if(c.compare(v,freqTable.lastKey())>=0){return getSumFreq();}}"
160	"public void test(){if(c.compare(v,nextValue)>0){result+=getCount(nextValue);}else {return result;}}"
161	"public void test(){return getCumFreq(Long.valueOf(v));}"
162	"public void test(){return getCumFreq(Character.valueOf(v));}"
163	"public void test(){ final long sumFreq=getSumFreq();if(sumFreq==0){return Double.NaN;}return (double)getCumFreq(v)/(double)sumFreq;}"
164	"public void test(){return getCumPct(Long.valueOf(v));}"
165	"public void test(){return getCumPct(Character.valueOf(v));}"
166	"public void test(){if(v.length!=sums.length){throw new DimensionMismatchException(v.length,sums.length);}}"
167	"public void test(){if(v.length!=means.length){throw new DimensionMismatchException(v.length,means.length);}}"
168	"public void test(){if(getN()==windowSize){eDA.addElementRolling(v);}else if(getN()<windowSize){eDA.addElement(v);}}"
169	"public void test(){if(getN()<windowSize){eDA.addElement(v);}}"
170	"public void test(){return eDA.substituteMostRecentElement(v);}"