1	"public void test(){int len=length();if(destination==null||destination.length<len){destination=new char[len];}System.arraycopy(buffer,0,destination,0,len);return destination;}"
2	"public void test(){if(newLineStr==null){newLineStr=SystemUtils.LINE_SEPARATOR;}if(wrapLength<1){wrapLength=1;}int inputLineLength=str.length();int offset=0;StringBuffer wrappedLine=new StringBuffer(inputLineLength+32);}"
3	"public void test(){int delimLen=(delimiters==null?-1:delimiters.length);if(str==null||str.length()==0||delimLen==0){return str;}int strLen=str.length();StringBuffer buffer=new StringBuffer(strLen);boolean capitalizeNext=true;}"
4	"public void test(){if(str==null||str.length()==0||delimLen==0){return str;}}"
5	"public void test(){int delimLen=(delimiters==null?-1:delimiters.length);if(str==null||str.length()==0||delimLen==0){return str;}str=str.toLowerCase();return capitalize(str,delimiters);}"
6	"public void test(){int delimLen=(delimiters==null?-1:delimiters.length);if(str==null||str.length()==0||delimLen==0){return str;}int strLen=str.length();StringBuffer buffer=new StringBuffer(strLen);boolean uncapitalizeNext=true;}"
7	"public void test(){if(str==null||(strLen=str.length())==0){return str;}}"
8	"public void test(){if(str==null||str.length()==0){return str;}}"
9	"public void test(){if(delimiters!=null&&delimiters.length==0){return """";}}"
10	"public void test(){if(str==null||str.length()==0){return str;}if(delimiters!=null&&delimiters.length==0){return """";}int strLen=str.length();char[] buf=new char[strLen/2+1];int count=0;}"
11	"public void test(){for(int i=0,isize=delimiters.length;i<isize;i++){if(ch==delimiters[i]){return true;}}}"
12	"public void test(){if(className.length()==0){return StringUtils.EMPTY;}}"
13	"public void test(){for(int i=0;i<chars.length;i++){if(chars[i]==PACKAGE_SEPARATOR_CHAR){lastDot=i+1;}else if(chars[i]==INNER_CLASS_SEPARATOR_CHAR){chars[i]=PACKAGE_SEPARATOR_CHAR;}}}"
14	"public void test(){for(int i=0;i<chars.length;i++){if(chars[i]==PACKAGE_SEPARATOR_CHAR){lastDot=i+1;}else if(chars[i]==INNER_CLASS_SEPARATOR_CHAR){chars[i]=PACKAGE_SEPARATOR_CHAR;}}return new String(chars,lastDot,chars.length-lastDot);}"
15	"public void test(){for(int i=0;i<interfaces.length;i++){if(list.contains(interfaces[i])==false){list.add(interfaces[i]);}List superInterfaces=getAllInterfaces(interfaces[i]);for(Iterator it=superInterfaces.iterator();it.hasNext();){Class intface=(Class)it.next();if(list.contains(intface)==false){list.add(intface);}}}}"
16	"public void test(){for(int i=0;i<classArray.length;i++){if(isAssignable(classArray[i],toClassArray[i])==false){return false;}}}"
17	"public void test(){if(classes.length==0){return classes;}}"
18	"public void test(){if(classes==null){return null;}if(classes.length==0){return classes;}Class[] convertedClasses=new Class[classes.length];for(int i=0;i<classes.length;i++){convertedClasses[i]=primitiveToWrapper(classes[i]);}return convertedClasses;}"
19	"public void test(){if(array.length==0){throw new IllegalArgumentException(""Array is empty"");}}"
20	"public void test(){for(int i=0;i<array.length;i++){if(array[i]){if(trueCount<1){trueCount++;}else {return false;}}}}"
21	"public void test(){if(StringUtils.isEmpty(str)||ArrayUtils.isEmpty(set)){return str;}CharSet chars=evaluateSet(set);StringBuffer buffer=new StringBuffer(str.length());char[] chrs=str.toCharArray();int sz=chrs.length;}"
22	"public void test(){int count=0;char[] chrs=str.toCharArray();int sz=chrs.length;for(int i=0;i<sz;i++){if(chars.contains(chrs[i])){count++;}}return count;}"
23	"public void test(){if(str.length()==0||StringUtils.isEmpty(set)){return """";}}"
24	"public void test(){if(str.length()==0||ArrayUtils.isEmpty(set)){return """";}}"
25	"public void test(){CharSet chars=evaluateSet(set);StringBuffer buffer=new StringBuffer(str.length());char[] chrs=str.toCharArray();int sz=chrs.length;for(int i=0;i<sz;i++){if(chars.contains(chrs[i])==expect){buffer.append(chrs[i]);}}return buffer.toString();}"
26	"public void test(){if(StringUtils.isEmpty(str)){return str;}StringBuffer buffer=new StringBuffer(str.length());char[] chrs=str.toCharArray();char[] withChrs=replaceChars.toCharArray();int sz=chrs.length;}"
27	"public void test(){if(StringUtils.isEmpty(str)){return str;}StringBuffer buffer=new StringBuffer(str.length());char[] chrs=str.toCharArray();char[] withChrs=replaceChars.toCharArray();int sz=chrs.length;int withMax=replaceChars.length()-1;}"
28	"public void test(){int sz=chrs.length;int withMax=replaceChars.length()-1;for(int i=0;i<sz;i++){int idx=searchChars.indexOf(chrs[i]);if(idx!=-1){if(idx>withMax){idx=withMax;}buffer.append(withChrs[idx]);}else {buffer.append(chrs[i]);}}}"
29	"public void test(){if((start==0)&&(end==0)){end='z'+1;start=' ';if(!letters&&!numbers){start=0;end=Integer.MAX_VALUE;}}char[] buffer=new char[count];int gap=end-start;}"
30	"public void test(){if(count==0){count++;}else {buffer[count]=ch;count--;buffer[count]=(char)(55296+random.nextInt(128));}}"
31	"public void test(){if(count==0){count++;}else {buffer[count]=(char)(56320+random.nextInt(128));count--;buffer[count]=ch;}}"
32	"public void test(){if(ch>=56192&&ch<=56319){count++;}else {buffer[count]=ch;}}"
33	"public void test(){if(chars==null){return random(count,0,0,false,false,null,RANDOM);}return random(count,0,chars.length,false,false,chars,RANDOM);}"
34	"public void test(){if(val.length()==0){throw new NumberFormatException(""\""\"" is not a valid number."");}}"
35	"public void test(){if(val.startsWith(""--"")){return null;}if(val.startsWith(""0x"")||val.startsWith(""-0x"")){return createInteger(val);}char lastChar=val.charAt(val.length()-1);String mant;String dec;}"
36	"public void test(){if(expPos>-1&&expPos<val.length()-1){exp=val.substring(expPos+1,val.length()-1);}else {exp=null;}}"
37	"public void test(){if(expPos>-1&&expPos<val.length()-1){exp=val.substring(expPos+1,val.length()-1);}else {exp=null;}String numeric=val.substring(0,val.length()-1);boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);}"
38	"public void test(){if(expPos>-1&&expPos<val.length()-1){exp=val.substring(expPos+1,val.length());}else {exp=null;}}"
39	"public void test(){for(int i=s.length()-1;i>=0;i--){if(s.charAt(i)!='0'){return false;}}}"
40	"public void test(){if(s==null){return true;}for(int i=s.length()-1;i>=0;i--){if(s.charAt(i)!='0'){return false;}}return s.length()>0;}"
41	"public void test(){if((str==null)||(str.length()==0)){return false;}}"
42	"public void test(){for(int i=0;i<str.length();i++){if(!Character.isDigit(str.charAt(i))){return false;}}}"
43	"public void test(){if(StringUtils.isEmpty(str)){return false;}char[] chars=str.toCharArray();int sz=chars.length;boolean hasExp=false;boolean hasDecPoint=false;}"
44	"public void test(){for(;i<chars.length;i++){if((chars[i]<'0'||chars[i]>'9')&&(chars[i]<'a'||chars[i]>'f')){return false;}}}"
45	"public void test(){if(i<chars.length){if(chars[i]>='0'&&chars[i]<='9'){return true;}if(chars[i]=='e'||chars[i]=='E'){return false;}if(!allowSigns&&(chars[i]=='d'||chars[i]=='D'||chars[i]=='f'||chars[i]=='F')){return foundDigit;}if(chars[i]=='l'||chars[i]=='L'){return foundDigit&&!hasExp;}return false;}}"
46	"public void test(){if(str.startsWith(""--"")){return null;}if(str.startsWith(""0x"")||str.startsWith(""-0x"")){return createInteger(str);}char lastChar=str.charAt(str.length()-1);String mant;String dec;}"
47	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length()-1);}else {exp=null;}}"
48	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length()-1);}else {exp=null;}String numeric=str.substring(0,str.length()-1);boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);}"
49	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length());}else {exp=null;}}"
50	"public void test(){for(int i=str.length()-1;i>=0;i--){if(str.charAt(i)!='0'){return false;}}}"
51	"public void test(){if(str==null){return true;}for(int i=str.length()-1;i>=0;i--){if(str.charAt(i)!='0'){return false;}}return str.length()>0;}"
52	"public void test(){if(array1.length!=array2.length){return false;}}"
53	"public void test(){for(int i=0;i<array1.length;i++){if(array1[i]!=array2[i]){return false;}}}"
54	"public void test(){for(int i=0;i<array1.length;i++){if(compare(array1[i],array2[i])!=0){return false;}}}"
55	"public void test(){if(array.length==0){throw new IllegalArgumentException(""Array cannot be empty."");}}"
56	"public void test(){for(int i=1;i<array.length;i++){if(array[i]<min){min=array[i];}}}"
57	"public void test(){for(int j=1;j<array.length;j++){if(array[j]<min){min=array[j];}}}"
58	"public void test(){for(int j=1;j<array.length;j++){if(array[j]>max){max=array[j];}}}"
59	"public void test(){for(int i=1;i<array.length;i++){if(array[i]>max){max=array[i];}}}"
60	"public void test(){if(str==null||(strLen=str.length())==0){return true;}}"
61	"public void test(){if(str==null){return null;}str=strip(str,null);return str.length()==0?null:str;}"
62	"public void test(){if(stripChars.length()==0){return str;}else {while((start!=strLen)&&(stripChars.indexOf(str.charAt(start))!=-1)){start++;}}}"
63	"public void test(){if(str==null||(end=str.length())==0){return str;}}"
64	"public void test(){if(stripChars.length()==0){return str;}else {while((end!=0)&&(stripChars.indexOf(str.charAt(end-1))!=-1)){end--;}}}"
65	"public void test(){if(strs==null||(strsLen=strs.length)==0){return strs;}}"
66	"public void test(){if(searchStr.length()==0){return 0;}}"
67	"public void test(){if(searchStr.length()==0&&startPos>=str.length()){return str.length();}}"
68	"public void test(){for(int i=0;i<str.length();i++){char ch=str.charAt(i);for(int j=0;j<searchChars.length;j++){if(searchChars[j]==ch){return i;}}}}"
69	"public void test(){for(int j=0;j<searchChars.length;j++){if(searchChars[j]==ch){return i;}}}"
70	"public void test(){for(int i=0;i<str.length();i++){char ch=str.charAt(i);for(int j=0;j<searchChars.length;j++){if(searchChars[j]==ch){continue outer;}}return i;}}"
71	"public void test(){for(int j=0;j<searchChars.length;j++){if(searchChars[j]==ch){continue outer;}}}"
72	"public void test(){for(int i=0;i<str.length();i++){if(searchChars.indexOf(str.charAt(i))<0){return i;}}}"
73	"public void test(){if(str.length()==0){return true;}}"
74	"public void test(){if(valid.length==0){return false;}}"
75	"public void test(){if(str==null||invalidChars==null){return true;}int strSize=str.length();int validSize=invalidChars.length;for(int i=0;i<strSize;i++){char ch=str.charAt(i);for(int j=0;j<validSize;j++){if(invalidChars[j]==ch){return false;}}}}"
76	"public void test(){int strSize=str.length();int validSize=invalidChars.length;for(int i=0;i<strSize;i++){char ch=str.charAt(i);for(int j=0;j<validSize;j++){if(invalidChars[j]==ch){return false;}}}}"
77	"public void test(){{if((str==null)||(searchStrs==null)){return -1;}int sz=searchStrs.length;int ret=-1;int tmp=0;for(int i=0;i<sz;i++){String search=searchStrs[i];if(search==null){continue;}tmp=str.lastIndexOf(search);if(tmp>ret){ret=tmp;}}return ret;}}"
78	"public void test(){if(start<0){start=str.length()+start;}}"
79	"public void test(){if(start>str.length()){return EMPTY;}}"
80	"public void test(){if(end<0){end=str.length()+end;}}"
81	"public void test(){if(end>str.length()){end=str.length();}}"
82	"public void test(){if(len<0){return EMPTY;}}"
83	"public void test(){if(str.length()<=len){return str;}else {return str.substring(0,len);}}"
84	"public void test(){if(str.length()<=len){return str;}else {return str.substring(str.length()-len);}}"
85	"public void test(){if(len<0||pos>str.length()){return EMPTY;}}"
86	"public void test(){if(str.length()<=(pos+len)){return str.substring(pos);}else {return str.substring(pos,pos+len);}}"
87	"public void test(){if(separator.length()==0){return EMPTY;}}"
88	"public void test(){if(isEmpty(str)){return str;}if(separator==null){return EMPTY;}int pos=str.indexOf(separator);if(pos==-1){return EMPTY;}return str.substring(pos+separator.length());}"
89	"public void test(){if(pos==-1||pos==(str.length()-separator.length())){return EMPTY;}}"
90	"public void test(){if(isEmpty(str)){return str;}if(isEmpty(separator)){return EMPTY;}int pos=str.lastIndexOf(separator);if(pos==-1||pos==(str.length()-separator.length())){return EMPTY;}return str.substring(pos+separator.length());}"
91	"public void test(){if(start!=-1){int end=str.indexOf(close,start+open.length());if(end!=-1){return str.substring(start+open.length(),end);}}}"
92	"public void test(){if(end!=-1){return str.substring(start+open.length(),end);}}"
93	"public void test(){if(str==null){return null;}int len=str.length();if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}if((separator==null)||("""".equals(separator))){return split(str,null,max);}}"
94	"public void test(){if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}}"
95	"public void test(){if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}if((separator==null)||("""".equals(separator))){return split(str,null,max);}int separatorLength=separator.length();ArrayList substrings=new ArrayList();int numberOfSubstrings=0;}"
96	"public void test(){if(numberOfSubstrings==max){end=len;substrings.add(str.substring(beg));}else {substrings.add(str.substring(beg,end));beg=end+separatorLength;}}"
97	"public void test(){if(str==null){return null;}int len=str.length();if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}List list=new ArrayList();}"
98	"public void test(){while(i<len){if(str.charAt(i)==separatorChar){if(match||preserveAllTokens){list.add(str.substring(start,i));match=false;lastMatch=true;}start=++i;continue;}else {lastMatch=false;}match=true;i++;}}"
99	"public void test(){if(sizePlus1++==max){i=len;lastMatch=false;}}"
100	"public void test(){if(array==null){return null;}return join(array,separator,0,array.length);}"
101	"public void test(){int bufSize=(endIndex-startIndex);if(bufSize<=0){return EMPTY;}bufSize*=((array[startIndex]==null?16:array[startIndex].toString().length())+1);StringBuffer buf=new StringBuffer(bufSize);for(int i=startIndex;i<endIndex;i++){if(i>startIndex){buf.append(separator);}if(array[i]!=null){buf.append(array[i]);}}}"
102	"public void test(){int bufSize=(endIndex-startIndex);if(bufSize<=0){return EMPTY;}bufSize*=((array[startIndex]==null?16:array[startIndex].toString().length())+separator.length());StringBuffer buf=new StringBuffer(bufSize);for(int i=startIndex;i<endIndex;i++){if(i>startIndex){buf.append(separator);}if(array[i]!=null){buf.append(array[i]);}}}"
103	"public void test(){if(isEmpty(str)){return str;}int sz=str.length();char[] chs=new char[sz];int count=0;for(int i=0;i<sz;i++){if(!Character.isWhitespace(str.charAt(i))){chs[count++]=str.charAt(i);}}}"
104	"public void test(){if(str.startsWith(remove)){return str.substring(remove.length());}}"
105	"public void test(){if(str.endsWith(remove)){return str.substring(0,str.length()-remove.length());}}"
106	"public void test(){for(int i=0;i<chars.length;i++){if(chars[i]!=remove){chars[pos++]=chars[i];}}}"
107	"public void test(){int end=text.indexOf(repl,start);if(end==-1){return text;}int replLength=repl.length();int increase=with.length()-replLength;increase=(increase<0?0:increase);}"
108	"public void test(){if(end==-1){return text;}int replLength=repl.length();int increase=with.length()-replLength;increase=(increase<0?0:increase);increase*=(max<0?16:(max>64?64:max));}"
109	"public void test(){increase*=(max<0?16:(max>64?64:max));StringBuffer buf=new StringBuffer(text.length()+increase);while(end!=-1){buf.append(text.substring(start,end)).append(with);start=end+replLength;if(--max==0){break;}end=text.indexOf(repl,start);}}"
110	"public void test(){if(replaceChars==null){replaceChars="""";}boolean modified=false;int replaceCharsLength=replaceChars.length();int strLength=str.length();StringBuffer buf=new StringBuffer(strLength);}"
111	"public void test(){if(str==null){return null;}if(overlay==null){overlay=EMPTY;}int len=str.length();if(start<0){start=0;}if(start>len){start=len;}}"
112	"public void test(){if(start>len){start=len;}}"
113	"public void test(){if(end>len){end=len;}}"
114	"public void test(){if(end>len){end=len;}if(start>end){int temp=start;start=end;end=temp;}return new StringBuffer(len+start-end+overlay.length()+1).append(str.substring(0,start)).append(overlay).append(str.substring(end)).toString();}"
115	"public void test(){if(str.length()==1){char ch=str.charAt(0);if(ch==CharUtils.CR||ch==CharUtils.LF){return EMPTY;}else {return str;}}}"
116	"public void test(){if(str.length()==1){char ch=str.charAt(0);if(ch==CharUtils.CR||ch==CharUtils.LF){return EMPTY;}else {return str;}}int lastIdx=str.length()-1;char last=str.charAt(lastIdx);}"
117	"public void test(){if(str.endsWith(separator)){return str.substring(0,str.length()-separator.length());}}"
118	"public void test(){if(str.length()==0){return str;}}"
119	"public void test(){if(str.length()==0){return str;}String sub=str.substring(str.length()-sep.length());if(sep.equals(sub)){return str.substring(0,str.length()-sep.length());}else {return str;}}"
120	"public void test(){if(sep.equals(sub)){return str.substring(0,str.length()-sep.length());}else {return str;}}"
121	"public void test(){if(idx==str.length()-sep.length()){return sep;}else if(idx!=-1){return str.substring(idx);}else {return EMPTY;}}"
122	"public void test(){if(idx!=-1){return str.substring(idx+sep.length());}else {return str;}}"
123	"public void test(){if(idx!=-1){return str.substring(0,idx+sep.length());}else {return EMPTY;}}"
124	"public void test(){if(str==null){return null;}int strLen=str.length();if(strLen<2){return EMPTY;}int lastIdx=strLen-1;}"
125	"public void test(){int lastIdx=str.length()-1;if(lastIdx<=0){return EMPTY;}char last=str.charAt(lastIdx);if(last==CharUtils.LF){if(str.charAt(lastIdx-1)==CharUtils.CR){lastIdx--;}}else {lastIdx++;}}"
126	"public void test(){if(str==null){return null;}if(repeat<=0){return EMPTY;}int inputLength=str.length();if(repeat==1||inputLength==0){return str;}if(inputLength==1&&repeat<=PAD_LIMIT){return padding(repeat,str.charAt(0));}}"
127	"public void test(){if(str==null){return null;}int pads=size-str.length();if(pads<=0){return str;}if(pads>PAD_LIMIT){return rightPad(str,size,String.valueOf(padChar));}return str.concat(padding(pads,padChar));}"
128	"public void test(){if(str==null){return null;}if(isEmpty(padStr)){padStr="" "";}int padLen=padStr.length();int strLen=str.length();int pads=size-strLen;}"
129	"public void test(){if(isEmpty(padStr)){padStr="" "";}int padLen=padStr.length();int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}}"
130	"public void test(){if(str==null){return null;}int pads=size-str.length();if(pads<=0){return str;}if(pads>PAD_LIMIT){return leftPad(str,size,String.valueOf(padChar));}return padding(pads,padChar).concat(str);}"
131	"public void test(){if(str==null||size<=0){return str;}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padChar);str=rightPad(str,size,padChar);return str;}"
132	"public void test(){if(str==null||size<=0){return str;}if(isEmpty(padStr)){padStr="" "";}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}}"
133	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if(Character.isLetter(str.charAt(i))==false){return false;}}return true;}"
134	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if((Character.isLetter(str.charAt(i))==false)&&(str.charAt(i)!=' ')){return false;}}return true;}"
135	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if(Character.isLetterOrDigit(str.charAt(i))==false){return false;}}return true;}"
136	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if((Character.isLetterOrDigit(str.charAt(i))==false)&&(str.charAt(i)!=' ')){return false;}}return true;}"
137	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if(CharUtils.isAsciiPrintable(str.charAt(i))==false){return false;}}return true;}"
138	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if(Character.isDigit(str.charAt(i))==false){return false;}}return true;}"
139	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if((Character.isDigit(str.charAt(i))==false)&&(str.charAt(i)!=' ')){return false;}}return true;}"
140	"public void test(){if(str==null){return false;}int sz=str.length();for(int i=0;i<sz;i++){if((Character.isWhitespace(str.charAt(i))==false)){return false;}}return true;}"
141	"public void test(){if(str.length()<=maxWidth){return str;}}"
142	"public void test(){if(offset>str.length()){offset=str.length();}}"
143	"public void test(){if((str.length()-offset)<(maxWidth-3)){offset=str.length()-(maxWidth-3);}}"
144	"public void test(){if((offset+(maxWidth-3))<str.length()){return ""...""+abbreviate(str.substring(offset),maxWidth-3);}}"
145	"public void test(){if(offset<=4){return str.substring(0,maxWidth-3)+""..."";}if(maxWidth<7){throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");}if((offset+(maxWidth-3))<str.length()){return ""...""+abbreviate(str.substring(offset),maxWidth-3);}return ""...""+str.substring(str.length()-(maxWidth-3));}"
146	"public void test(){for(i=0;i<str1.length()&&i<str2.length();++i){if(str1.charAt(i)!=str2.charAt(i)){break;}}}"
147	"public void test(){if(i<str2.length()||i<str1.length()){return i;}}"
148	"public void test(){if(s==null||t==null){throw new IllegalArgumentException(""Strings must not be null"");}int n=s.length();int m=t.length();if(n==0){return m;}else if(m==0){return n;}}"
149	"public void test(){int n=s.length();int m=t.length();if(n==0){return m;}else if(m==0){return n;}}"
150	"public void test(){for(int i=0;i<array.length;i++){Object object=array[i];if(object instanceof Map.Entry){Map.Entry entry=(Map.Entry)object;map.put(entry.getKey(),entry.getValue());}else if(object instanceof Object[]){Object[] entry=(Object[])object;if(entry.length<2){throw new IllegalArgumentException(""Array element ""+i);}map.put(entry[0],entry[1]);}else {throw new IllegalArgumentException(""Array element ""+i);}}}"
151	"public void test(){if(entry.length<2){throw new IllegalArgumentException(""Array element ""+i);}}"
152	"public void test(){if(endIndexExclusive>array.length){endIndexExclusive=array.length;}}"
153	"public void test(){Class type=array.getClass().getComponentType();if(newSize<=0){return (Object[])Array.newInstance(type,0);}Object[] subarray=(Object[])Array.newInstance(type,newSize);System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
154	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_LONG_ARRAY;}long[] subarray=new long[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
155	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_INT_ARRAY;}int[] subarray=new int[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
156	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_SHORT_ARRAY;}short[] subarray=new short[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
157	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_CHAR_ARRAY;}char[] subarray=new char[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
158	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_BYTE_ARRAY;}byte[] subarray=new byte[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
159	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_DOUBLE_ARRAY;}double[] subarray=new double[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
160	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_FLOAT_ARRAY;}float[] subarray=new float[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
161	"public void test(){int newSize=endIndexExclusive-startIndexInclusive;if(newSize<=0){return EMPTY_BOOLEAN_ARRAY;}boolean[] subarray=new boolean[newSize];System.arraycopy(array,startIndexInclusive,subarray,0,newSize);return subarray;}"
162	"public void test(){if((array1==null&&array2!=null&&array2.length>0)||(array2==null&&array1!=null&&array1.length>0)){return false;}}"
163	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;Object tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
164	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;long tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
165	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;int tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
166	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;short tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
167	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;char tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
168	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;byte tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
169	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;double tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
170	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;float tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
171	"public void test(){{if(array==null){return ;}int i=0;int j=array.length-1;boolean tmp;while(j>i){tmp=array[j];array[j]=array[i];array[i]=tmp;j--;i++;}}}"
172	"public void test(){for(int i=startIndex;i<array.length;i++){if(array[i]==null){return i;}}}"
173	"public void test(){for(int i=startIndex;i<array.length;i++){if(objectToFind.equals(array[i])){return i;}}}"
174	"public void test(){if(startIndex>=array.length){startIndex=array.length-1;}}"
175	"public void test(){for(int i=startIndex;i<array.length;i++){if(valueToFind==array[i]){return i;}}}"
176	"public void test(){for(int i=startIndex;i<array.length;i++){if(array[i]>=min&&array[i]<=max){return i;}}}"
177	"public void test(){if(array.length==0){return EMPTY_CHAR_ARRAY;}}"
178	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHAR_ARRAY;} final char[] result=new char[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].charValue();}return result;}"
179	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHAR_ARRAY;} final char[] result=new char[array.length];for(int i=0;i<array.length;i++){Character b=array[i];result[i]=(b==null?valueForNull:b.charValue());}return result;}"
180	"public void test(){for(int i=0;i<array.length;i++){Character b=array[i];result[i]=(b==null?valueForNull:b.charValue());}}"
181	"public void test(){if(array.length==0){return EMPTY_CHARACTER_OBJECT_ARRAY;}}"
182	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHARACTER_OBJECT_ARRAY;} final Character[] result=new Character[array.length];for(int i=0;i<array.length;i++){result[i]=new Character(array[i]);}return result;}"
183	"public void test(){if(array.length==0){return EMPTY_LONG_ARRAY;}}"
184	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_ARRAY;} final long[] result=new long[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].longValue();}return result;}"
185	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_ARRAY;} final long[] result=new long[array.length];for(int i=0;i<array.length;i++){Long b=array[i];result[i]=(b==null?valueForNull:b.longValue());}return result;}"
186	"public void test(){for(int i=0;i<array.length;i++){Long b=array[i];result[i]=(b==null?valueForNull:b.longValue());}}"
187	"public void test(){if(array.length==0){return EMPTY_LONG_OBJECT_ARRAY;}}"
188	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_OBJECT_ARRAY;} final Long[] result=new Long[array.length];for(int i=0;i<array.length;i++){result[i]=new Long(array[i]);}return result;}"
189	"public void test(){if(array.length==0){return EMPTY_INT_ARRAY;}}"
190	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INT_ARRAY;} final int[] result=new int[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].intValue();}return result;}"
191	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INT_ARRAY;} final int[] result=new int[array.length];for(int i=0;i<array.length;i++){Integer b=array[i];result[i]=(b==null?valueForNull:b.intValue());}return result;}"
192	"public void test(){for(int i=0;i<array.length;i++){Integer b=array[i];result[i]=(b==null?valueForNull:b.intValue());}}"
193	"public void test(){if(array.length==0){return EMPTY_INTEGER_OBJECT_ARRAY;}}"
194	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INTEGER_OBJECT_ARRAY;} final Integer[] result=new Integer[array.length];for(int i=0;i<array.length;i++){result[i]=new Integer(array[i]);}return result;}"
195	"public void test(){if(array.length==0){return EMPTY_SHORT_ARRAY;}}"
196	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_ARRAY;} final short[] result=new short[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].shortValue();}return result;}"
197	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_ARRAY;} final short[] result=new short[array.length];for(int i=0;i<array.length;i++){Short b=array[i];result[i]=(b==null?valueForNull:b.shortValue());}return result;}"
198	"public void test(){for(int i=0;i<array.length;i++){Short b=array[i];result[i]=(b==null?valueForNull:b.shortValue());}}"
199	"public void test(){if(array.length==0){return EMPTY_SHORT_OBJECT_ARRAY;}}"
200	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_OBJECT_ARRAY;} final Short[] result=new Short[array.length];for(int i=0;i<array.length;i++){result[i]=new Short(array[i]);}return result;}"
201	"public void test(){if(array.length==0){return EMPTY_BYTE_ARRAY;}}"
202	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_ARRAY;} final byte[] result=new byte[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].byteValue();}return result;}"
203	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_ARRAY;} final byte[] result=new byte[array.length];for(int i=0;i<array.length;i++){Byte b=array[i];result[i]=(b==null?valueForNull:b.byteValue());}return result;}"
204	"public void test(){for(int i=0;i<array.length;i++){Byte b=array[i];result[i]=(b==null?valueForNull:b.byteValue());}}"
205	"public void test(){if(array.length==0){return EMPTY_BYTE_OBJECT_ARRAY;}}"
206	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_OBJECT_ARRAY;} final Byte[] result=new Byte[array.length];for(int i=0;i<array.length;i++){result[i]=new Byte(array[i]);}return result;}"
207	"public void test(){if(array.length==0){return EMPTY_DOUBLE_ARRAY;}}"
208	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_ARRAY;} final double[] result=new double[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].doubleValue();}return result;}"
209	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_ARRAY;} final double[] result=new double[array.length];for(int i=0;i<array.length;i++){Double b=array[i];result[i]=(b==null?valueForNull:b.doubleValue());}return result;}"
210	"public void test(){for(int i=0;i<array.length;i++){Double b=array[i];result[i]=(b==null?valueForNull:b.doubleValue());}}"
211	"public void test(){if(array.length==0){return EMPTY_DOUBLE_OBJECT_ARRAY;}}"
212	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_OBJECT_ARRAY;} final Double[] result=new Double[array.length];for(int i=0;i<array.length;i++){result[i]=new Double(array[i]);}return result;}"
213	"public void test(){if(array.length==0){return EMPTY_FLOAT_ARRAY;}}"
214	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_ARRAY;} final float[] result=new float[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].floatValue();}return result;}"
215	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_ARRAY;} final float[] result=new float[array.length];for(int i=0;i<array.length;i++){Float b=array[i];result[i]=(b==null?valueForNull:b.floatValue());}return result;}"
216	"public void test(){for(int i=0;i<array.length;i++){Float b=array[i];result[i]=(b==null?valueForNull:b.floatValue());}}"
217	"public void test(){if(array.length==0){return EMPTY_FLOAT_OBJECT_ARRAY;}}"
218	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_OBJECT_ARRAY;} final Float[] result=new Float[array.length];for(int i=0;i<array.length;i++){result[i]=new Float(array[i]);}return result;}"
219	"public void test(){if(array.length==0){return EMPTY_BOOLEAN_ARRAY;}}"
220	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_ARRAY;} final boolean[] result=new boolean[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].booleanValue();}return result;}"
221	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_ARRAY;} final boolean[] result=new boolean[array.length];for(int i=0;i<array.length;i++){Boolean b=array[i];result[i]=(b==null?valueForNull:b.booleanValue());}return result;}"
222	"public void test(){for(int i=0;i<array.length;i++){Boolean b=array[i];result[i]=(b==null?valueForNull:b.booleanValue());}}"
223	"public void test(){if(array.length==0){return EMPTY_BOOLEAN_OBJECT_ARRAY;}}"
224	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_OBJECT_ARRAY;} final Boolean[] result=new Boolean[array.length];for(int i=0;i<array.length;i++){result[i]=(array[i]?Boolean.TRUE:Boolean.FALSE);}return result;}"
225	"public void test(){for(int i=0;i<array.length;i++){result[i]=(array[i]?Boolean.TRUE:Boolean.FALSE);}}"
226	"public void test(){if(array==null||array.length==0){return true;}}"
227	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}Object[] joinedArray=(Object[])Array.newInstance(array1.getClass().getComponentType(),array1.length+array2.length);System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
228	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}boolean[] joinedArray=new boolean[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
229	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}char[] joinedArray=new char[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
230	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}byte[] joinedArray=new byte[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
231	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}short[] joinedArray=new short[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
232	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}int[] joinedArray=new int[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
233	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}long[] joinedArray=new long[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
234	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}float[] joinedArray=new float[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
235	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}double[] joinedArray=new double[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
236	"public void test(){Class type=(array!=null?array.getClass():(element!=null?element.getClass():Object.class));Object[] newArray=(Object[])copyArrayGrow1(array,type);newArray[newArray.length-1]=element;return newArray;}"
237	"public void test(){boolean[] newArray=(boolean[])copyArrayGrow1(array,Boolean.TYPE);newArray[newArray.length-1]=element;return newArray;}"
238	"public void test(){byte[] newArray=(byte[])copyArrayGrow1(array,Byte.TYPE);newArray[newArray.length-1]=element;return newArray;}"
239	"public void test(){char[] newArray=(char[])copyArrayGrow1(array,Character.TYPE);newArray[newArray.length-1]=element;return newArray;}"
240	"public void test(){double[] newArray=(double[])copyArrayGrow1(array,Double.TYPE);newArray[newArray.length-1]=element;return newArray;}"
241	"public void test(){float[] newArray=(float[])copyArrayGrow1(array,Float.TYPE);newArray[newArray.length-1]=element;return newArray;}"
242	"public void test(){int[] newArray=(int[])copyArrayGrow1(array,Integer.TYPE);newArray[newArray.length-1]=element;return newArray;}"
243	"public void test(){long[] newArray=(long[])copyArrayGrow1(array,Long.TYPE);newArray[newArray.length-1]=element;return newArray;}"
244	"public void test(){short[] newArray=(short[])copyArrayGrow1(array,Short.TYPE);newArray[newArray.length-1]=element;return newArray;}"
245	"public void test(){if(array!=null){int arrayLength=Array.getLength(array);Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength+1);System.arraycopy(array,0,newArray,0,arrayLength);return newArray;}}"
246	"public void test(){if(array==null){if(index!=0){throw new IndexOutOfBoundsException(""Index: ""+index);}Object joinedArray=Array.newInstance(clss,1);Array.set(joinedArray,0,element);return joinedArray;}int length=Array.getLength(array);if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
247	"public void test(){if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
248	"public void test(){int length=Array.getLength(array);if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}Object result=Array.newInstance(clss,length+1);System.arraycopy(array,0,result,0,index);Array.set(result,index,element);}"
249	"public void test(){if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}Object result=Array.newInstance(clss,length+1);System.arraycopy(array,0,result,0,index);Array.set(result,index,element);if(index<length){System.arraycopy(array,index,result,index+1,length-index);}}"
250	"public void test(){if(index<length){System.arraycopy(array,index,result,index+1,length-index);}}"
251	"public void test(){int length=getLength(array);if(index<0||index>=length){throw new IndexOutOfBoundsException(""Index: ""+index);}Object result=Array.newInstance(array.getClass().getComponentType(),length-1);System.arraycopy(array,0,result,0,index);if(index<length-1){System.arraycopy(array,index+1,result,index,length-index);}return result;}"
252	"public void test(){if(index<0||index>=length){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
253	"public void test(){if(index<length-1){System.arraycopy(array,index+1,result,index,length-index);}}"
254	"public void test(){if(array==null||array.length==0){throw new IllegalArgumentException(message);}}"
255	"public void test(){if(array==null||array.length==0){throw new IllegalArgumentException(""The validated array is empty"");}}"
256	"public void test(){if(string==null||string.length()==0){throw new IllegalArgumentException(message);}}"
257	"public void test(){if(string==null||string.length()==0){throw new IllegalArgumentException(""The validated string is empty"");}}"
258	"public void test(){for(int i=0;i<array.length;i++){if(array[i]==null){throw new IllegalArgumentException(message);}}}"
259	"public void test(){for(int i=0;i<array.length;i++){if(array[i]==null){throw new IllegalArgumentException(""The validated array contains null element at index: ""+i);}}}"
260	"public void test(){if(capacity>names.length){int newSize=Math.max(capacity,size+growBy);String[] newNames=new String[newSize];System.arraycopy(names,0,newNames,0,size);names=newNames;int[] newValues=new int[newSize];System.arraycopy(values,0,newValues,0,size);values=newValues;}}"
261	"public void test(){if(insertAt>0){return ;}insertAt=-(insertAt+1);System.arraycopy(values,insertAt,values,insertAt+1,size-insertAt);values[insertAt]=value;System.arraycopy(names,insertAt,names,insertAt+1,size-insertAt);}"
262	"public void test(){for(int i=0;i<len;i++){char c=str.charAt(i);String entityName=this.entityName(c);if(entityName==null){if(c>0x7f){writer.write(""&#"");writer.write(Integer.toString(c,10));writer.write(';');}else {writer.write(c);}}else {writer.write('&');writer.write(entityName);writer.write(';');}}}"
263	"public void test(){if(entityName.length()==1){entityValue=-1;}else {char charAt1=entityName.charAt(1);try{if(charAt1=='x'||charAt1=='X'){entityValue=Integer.valueOf(entityName.substring(2),16).intValue();}else {entityValue=Integer.parseInt(entityName.substring(1));}if(entityValue>0xffff){entityValue=-1;}}catch (NumberFormatException ex) {  entityValue=-1;}}}"
264	"public void test(){int firstAmp=string.indexOf('&');if(firstAmp<0){writer.write(string);return ;}writer.write(string,0,firstAmp);int len=string.length();}"
265	"public void test(){if(amphersandIdx!=-1&&amphersandIdx<semiColonIdx){writer.write(c);continue;}String entityContent=string.substring(nextIdx,semiColonIdx);int entityValue=-1;int entityContentLen=entityContent.length();}"
266	"public void test(){if(JAVA_VERSION_TRIMMED.length()>=5){str=str+JAVA_VERSION_TRIMMED.substring(4,5);}}"
267	"public void test(){if(JAVA_VERSION_TRIMMED.length()>=5){str=str+JAVA_VERSION_TRIMMED.substring(4,5);}else {str=str+""0"";}}"
268	"public void test(){for(int i=0;i<JAVA_VERSION.length();i++){char ch=JAVA_VERSION.charAt(i);if(ch>='0'&&ch<='9'){return JAVA_VERSION.substring(i);}}}"
269	"public void test(){if(str==null){return null;}try{StringWriter writer=new StringWriter(str.length()*2);escapeJavaStyleString(writer,str,escapeSingleQuotes);return writer.toString();}catch (IOException ioe) {  ioe.printStackTrace();  return null;}}"
270	"public void test(){if(out==null){throw new IllegalArgumentException(""The Writer must not be null"");}if(str==null){return ;}int sz;sz=str.length();}"
271	"public void test(){if(str==null){return null;}try{StringWriter writer=new StringWriter(str.length());unescapeJava(writer,str);return writer.toString();}catch (IOException ioe) {  ioe.printStackTrace();  return null;}}"
272	"public void test(){if(out==null){throw new IllegalArgumentException(""The Writer must not be null"");}if(str==null){return ;}int sz=str.length();StringBuffer unicode=new StringBuffer(4);boolean hadSlash=false;}"
273	"public void test(){if(unicode.length()==4){try{int value=Integer.parseInt(unicode.toString(),16);out.write((char)value);unicode.setLength(0);inUnicode=false;hadSlash=false;}catch (NumberFormatException nfe) {  throw new NestableRuntimeException(""Unable to parse unicode value: "" + unicode,nfe);}}}"
274	"public void test(){if(str==null){return null;}try{StringWriter writer=new StringWriter((int)(str.length()*1.5));escapeHtml(writer,str);return writer.toString();}catch (IOException e) {  e.printStackTrace();  return null;}}"
275	"public void test(){if(str==null){return null;}try{StringWriter writer=new StringWriter((int)(str.length()*1.5));unescapeHtml(writer,str);return writer.toString();}catch (IOException e) {  e.printStackTrace();  return null;}}"
276	"public void test(){for(int i=0;i<fields.length&&builder.comparison==0;i++){Field f=fields[i];if(!excludedFieldList.contains(f.getName())&&(f.getName().indexOf('$')==-1)){try{builder.append(f.get(lhs),f.get(rhs));}catch (IllegalAccessException e) {  throw new InternalError(""Unexpected IllegalAccessException"");}}}}"
277	"public void test(){if(lhs.length!=rhs.length){comparison=(lhs.length<rhs.length)?-1:+1;return this;}}"
278	"public void test(){ArrayList list=new ArrayList(array.length);for(int i=0;i<array.length;i++){Object e=array[i];if(e!=null){list.add(e.toString());}}return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);}"
279	"public void test(){for(int i=0;i<array.length;i++){Object e=array[i];if(e!=null){list.add(e.toString());}}}"
280	"public void test(){for(int i=0;i<fields.length&&builder.isEquals;i++){Field f=fields[i];if(!excludedFieldList.contains(f.getName())&&(f.getName().indexOf('$')==-1)){try{builder.append(f.get(lhs),f.get(rhs));}catch (IllegalAccessException e) {  throw new InternalError(""Unexpected IllegalAccessException"");}}}}"
281	"public void test(){if(lhs.length!=rhs.length){this.setEquals(false);return this;}}"
282	"public void test(){if(toString!=null){int pos1=toString.indexOf(contentStart)+contentStart.length();int pos2=toString.lastIndexOf(contentEnd);if(pos1!=pos2&&pos1>=0&&pos2>=0){String data=toString.substring(pos1,pos2);if(fieldSeparatorAtStart){removeLastFieldSeparator(buffer);}buffer.append(data);appendFieldSeparator(buffer);}}}"
283	"public void test(){int len=buffer.length();int sepLen=fieldSeparator.length();if(len>0&&sepLen>0&&len>=sepLen){boolean match=true;for(int i=0;i<sepLen;i++){if(buffer.charAt(len-1)!=fieldSeparator.charAt(sepLen-1)){match=false;break;}}if(match){buffer.setLength(len-sepLen);}}}"
284	"public void test(){if(len>0&&sepLen>0&&len>=sepLen){boolean match=true;for(int i=0;i<sepLen;i++){if(buffer.charAt(len-1)!=fieldSeparator.charAt(sepLen-1)){match=false;break;}}if(match){buffer.setLength(len-sepLen);}}}"
285	"public void test(){if(buffer.charAt(len-1)!=fieldSeparator.charAt(sepLen-1)){match=false;break;}}"
286	"public void test(){if(match){buffer.setLength(len-sepLen);}}"
287	"public void test(){for(int i=0;i<array.length;i++){Object item=array[i];if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}}"
288	"public void test(){buffer.append(arrayStart);int length=Array.getLength(array);for(int i=0;i<length;i++){Object item=Array.get(array,i);if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}}"
289	"public void test(){for(int i=0;i<length;i++){Object item=Array.get(array,i);if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}}"
290	"public void test(){for(int i=0;i<array.length;i++){if(i>0){buffer.append(arraySeparator);}appendDetail(buffer,fieldName,array[i]);}}"
291	"public void test(){for(int i=0;i<fields.length;i++){Field field=fields[i];if(!excludedFieldList.contains(field.getName())&&(field.getName().indexOf('$')==-1)){try{Object fieldValue=field.get(object);builder.append(fieldValue);}catch (IllegalAccessException e) {  throw new InternalError(""Unexpected IllegalAccessException"");}}}}"
292	"public void test(){if(str==null){return null;}int len=str.length();if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}char ch0=str.charAt(0);}"
293	"public void test(){if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
294	"public void test(){if(len==5){return new Locale(str.substring(0,2),str.substring(3,5));}else {if(str.charAt(5)!='_'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}return new Locale(str.substring(0,2),str.substring(3,5),str.substring(6));}}"
295	"public void test(){if(locale.getVariant().length()>0){list.add(new Locale(locale.getLanguage(),locale.getCountry()));}}"
296	"public void test(){if(locale.getCountry().length()>0){list.add(new Locale(locale.getLanguage(),""""));}}"
297	"public void test(){if(countryCode.equals(locale.getCountry())&&locale.getVariant().length()==0){langs.add(locale);}}"
298	"public void test(){if(languageCode.equals(locale.getLanguage())&&locale.getCountry().length()!=0&&locale.getVariant().length()==0){countries.add(locale);}}"
299	"public void test(){for(int i=tab.length;i-->0;){for(Entry e=tab[i];e!=null;e=e.next){if(e.value.equals(value)){return true;}}}}"
300	"public void test(){Entry tab[]=table;int hash=key;int index=(hash&0x7fffffff)%tab.length;for(Entry e=tab[index];e!=null;e=e.next){if(e.hash==hash){return true;}}return false;}"
301	"public void test(){Entry tab[]=table;int hash=key;int index=(hash&0x7fffffff)%tab.length;for(Entry e=tab[index];e!=null;e=e.next){if(e.hash==hash){return e.value;}}return null;}"
302	"public void test(){int hash=key;int index=(hash&0x7fffffff)%tab.length;for(Entry e=tab[index];e!=null;e=e.next){if(e.hash==hash){Object old=e.value;e.value=value;return old;}}}"
303	"public void test(){if(count>=threshold){rehash();tab=table;index=(hash&0x7fffffff)%tab.length;}}"
304	"public void test(){{Entry tab[]=table;int hash=key;int index=(hash&0x7fffffff)%tab.length;for(Entry e=tab[index],prev=null;e!=null;prev=e,e=e.next){if(e.hash==hash){if(prev!=null){prev.next=e.next;}else {tab[index]=e.next;}count--;Object oldValue=e.value;e.value=null;return oldValue;}}return null;}}"
305	"public void test(){while(pos<len){int remainder=(len-pos);if(remainder>=4&&str.charAt(pos)=='^'&&str.charAt(pos+2)=='-'){set.add(new CharRange(str.charAt(pos+1),str.charAt(pos+3),true));pos+=4;}else if(remainder>=3&&str.charAt(pos+1)=='-'){set.add(new CharRange(str.charAt(pos),str.charAt(pos+2)));pos+=3;}else if(remainder>=2&&str.charAt(pos)=='^'){set.add(new CharRange(str.charAt(pos+1),true));pos+=2;}else {set.add(new CharRange(str.charAt(pos)));pos+=1;}}}"
306	"public void test(){{int remainder=(len-pos);if(remainder>=4&&str.charAt(pos)=='^'&&str.charAt(pos+2)=='-'){set.add(new CharRange(str.charAt(pos+1),str.charAt(pos+3),true));pos+=4;}else if(remainder>=3&&str.charAt(pos+1)=='-'){set.add(new CharRange(str.charAt(pos),str.charAt(pos+2)));pos+=3;}else if(remainder>=2&&str.charAt(pos)=='^'){set.add(new CharRange(str.charAt(pos+1),true));pos+=2;}else {set.add(new CharRange(str.charAt(pos)));pos+=1;}}}"
307	"public void test(){if(ch<CHAR_ARRAY.length){return CHAR_ARRAY[ch];}}"
308	"public void test(){Throwable[] throwables=this.getThrowables();String[] msgs=new String[throwables.length];for(int i=0;i<throwables.length;i++){msgs[i]=(Nestable.class.isInstance(throwables[i])?((Nestable)throwables[i]).getMessage(0):throwables[i].getMessage());}return msgs;}"
309	"public void test(){for(int i=0;i<throwables.length;i++){msgs[i]=(Nestable.class.isInstance(throwables[i])?((Nestable)throwables[i]).getMessage(0):throwables[i].getMessage());}}"
310	"public void test(){if(fromIndex>=throwables.length){throw new IndexOutOfBoundsException(""The start index was out of bounds: ""+fromIndex);}}"
311	"public void test(){for(int i=fromIndex;i<throwables.length;i++){if(type.isAssignableFrom(throwables[i].getClass())){return i;}}}"
312	"public void test(){for(int i=fromIndex;i<throwables.length;i++){if(type.equals(throwables[i].getClass())){return i;}}}"
313	"public void test(){List nextList=new ArrayList(Arrays.asList(next));ExceptionUtils.removeCommonFrames(currList,nextList);int trimmed=curr.length-currList.size();if(trimmed>0){currList.add(""\t... ""+trimmed);stacks.set(i,currList.toArray(new String[currList.size()]));}}"
314	"public void test(){for(int i=0;i<methodNames.length;i++){String methodName=methodNames[i];if(methodName!=null){cause=getCauseUsingMethodName(throwable,methodName);if(cause!=null){break;}}}}"
315	"public void test(){for(int i=0,isize=CAUSE_METHOD_NAMES.length;i<isize;i++){try{Method method=cls.getMethod(CAUSE_METHOD_NAMES[i],null);if(method!=null&&Throwable.class.isAssignableFrom(method.getReturnType())){return true;}}catch (NoSuchMethodException ignored) {}catch (SecurityException ignored) {}}}"
316	"public void test(){if(fromIndex>=throwables.length){return -1;}}"
317	"public void test(){if(throwable==null){return ArrayUtils.EMPTY_STRING_ARRAY;}Throwable throwables[]=getThrowables(throwable);int count=throwables.length;ArrayList frames=new ArrayList();List nextTrace=getStackFrameList(throwables[count-1]);}"
318	"public void test(){for(int i=0;i<ts.length;i++){ts[i].printStackTrace(pw);if(isNestedThrowable(ts[i])){break;}}}"
319	"public void test(){if(at!=-1&&token.substring(0,at).trim().length()==0){traceStarted=true;list.add(token);}else if(traceStarted){break;}}"
320	"public void test(){if(substitute(buf,0,source.length())==false){return source;}}"
321	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);if(substitute(buf,0,length)==false){return source.substring(offset,offset+length);}return buf.toString();}"
322	"public void test(){if(substitute(buf,0,length)==false){return source.substring(offset,offset+length);}}"
323	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(source.length).append(source);substitute(buf,0,source.length);return buf.toString();}"
324	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);substitute(buf,0,length);return buf.toString();}"
325	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(source.length()).append(source);substitute(buf,0,buf.length());return buf.toString();}"
326	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder().append(source);substitute(buf,0,buf.length());return buf.toString();}"
327	"public void test(){if(source==null){return false;}return replaceIn(source,0,source.length());}"
328	"public void test(){if(source==null){return false;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);if(substitute(buf,0,length)==false){return false;}source.replace(offset,offset+length,buf.toString());return true;}"
329	"public void test(){if(substitute(buf,0,length)==false){return false;}}"
330	"public void test(){if(source==null){return false;}return substitute(source,0,source.length());}"
331	"public void test(){if(source==null){return false;}return substitute(source,offset,length);}"
332	"public void test(){if(priorVariables==null){priorVariables=new ArrayList();priorVariables.add(new String(chars,offset,length));}}"
333	"public void test(){checkTokenized();return tokens.length;}"
334	"public void test(){checkTokenized();List list=new ArrayList(tokens.length);for(int i=0;i<tokens.length;i++){list.add(tokens[i]);}return list;}"
335	"public void test(){checkTokenized();return tokenPos<tokens.length;}"
336	"public void test(){if(chars==null){List split=tokenize(null,0,0);tokens=(String[])split.toArray(new String[split.size()]);}else {List split=tokenize(chars,0,chars.length);tokens=(String[])split.toArray(new String[split.size()]);}}"
337	"public void test(){if(tok==null||tok.length()==0){if(isIgnoreEmptyTokens()){return ;}if(isEmptyTokenAsNull()){tok=null;}}}"
338	"public void test(){while(start<len){int removeLen=Math.max(getIgnoredMatcher().isMatch(chars,start,start,len),getTrimmerMatcher().isMatch(chars,start,start,len));if(removeLen==0||getDelimiterMatcher().isMatch(chars,start,start,len)>0||getQuoteMatcher().isMatch(chars,start,start,len)>0){break;}start+=removeLen;}}"
339	"public void test(){if(removeLen==0||getDelimiterMatcher().isMatch(chars,start,start,len)>0||getQuoteMatcher().isMatch(chars,start,start,len)>0){break;}}"
340	"public void test(){if(start>=len){addToken(tokens,"""");return -1;}}"
341	"public void test(){if(start>=len){addToken(tokens,"""");return -1;}int delimLen=getDelimiterMatcher().isMatch(chars,start,start,len);if(delimLen>0){addToken(tokens,"""");return start+delimLen;}}"
342	"public void test(){if(delimLen>0){addToken(tokens,"""");return start+delimLen;}int quoteLen=getQuoteMatcher().isMatch(chars,start,start,len);if(quoteLen>0){return readWithQuotes(chars,start+quoteLen,len,workArea,tokens,start,quoteLen);}}"
343	"public void test(){if(quoteLen>0){return readWithQuotes(chars,start+quoteLen,len,workArea,tokens,start,quoteLen);}}"
344	"public void test(){if(delimLen>0){addToken(tokens,"""");return start+delimLen;}int quoteLen=getQuoteMatcher().isMatch(chars,start,start,len);if(quoteLen>0){return readWithQuotes(chars,start+quoteLen,len,workArea,tokens,start,quoteLen);}return readWithQuotes(chars,start,len,workArea,tokens,0,0);}"
345	"public void test(){if(isQuote(chars,pos,len,quoteStart,quoteLen)){if(isQuote(chars,pos+quoteLen,len,quoteStart,quoteLen)){workArea.append(chars,pos,quoteLen);pos+=(quoteLen*2);trimStart=workArea.size();continue;}quoting=false;pos+=quoteLen;continue;}}"
346	"public void test(){if(isQuote(chars,pos+quoteLen,len,quoteStart,quoteLen)){workArea.append(chars,pos,quoteLen);pos+=(quoteLen*2);trimStart=workArea.size();continue;}}"
347	"public void test(){int delimLen=getDelimiterMatcher().isMatch(chars,pos,start,len);if(delimLen>0){addToken(tokens,workArea.substring(0,trimStart));return pos+delimLen;}if(quoteLen>0){if(isQuote(chars,pos,len,quoteStart,quoteLen)){quoting=true;pos+=quoteLen;continue;}}}"
348	"public void test(){if(isQuote(chars,pos,len,quoteStart,quoteLen)){quoting=true;pos+=quoteLen;continue;}}"
349	"public void test(){if(quoteLen>0){if(isQuote(chars,pos,len,quoteStart,quoteLen)){quoting=true;pos+=quoteLen;continue;}}int ignoredLen=getIgnoredMatcher().isMatch(chars,pos,start,len);if(ignoredLen>0){pos+=ignoredLen;continue;}}"
350	"public void test(){if(ignoredLen>0){pos+=ignoredLen;continue;}int trimmedLen=getTrimmerMatcher().isMatch(chars,pos,start,len);if(trimmedLen>0){workArea.append(chars,pos,trimmedLen);pos+=trimmedLen;continue;}}"
351	"public void test(){if((pos+i)>=len||chars[pos+i]!=chars[quoteStart+i]){return false;}}"
352	"public void test(){if(chars==null||chars.length==0){return NONE_MATCHER;}}"
353	"public void test(){if(chars.length==1){return new CharMatcher(chars[0]);}}"
354	"public void test(){if(chars==null||chars.length()==0){return NONE_MATCHER;}}"
355	"public void test(){if(chars.length()==1){return new CharMatcher(chars.charAt(0));}}"
356	"public void test(){if(str==null||str.length()==0){return NONE_MATCHER;}}"
357	"public void test(){int len=chars.length;if(pos+len>bufferEnd){return 0;}for(int i=0;i<chars.length;i++,pos++){if(chars[i]!=buffer[pos]){return 0;}}return len;}"
358	"public void test(){if(pos+len>bufferEnd){return 0;}}"
359	"public void test(){for(int i=0;i<chars.length;i++,pos++){if(chars[i]!=buffer[pos]){return 0;}}}"
360	"public void test(){if(chars[i]!=buffer[pos]){return 0;}}"
361	"public void test(){super();if(initialCapacity<=0){initialCapacity=CAPACITY;}buffer=new char[initialCapacity];}"
362	"public void test(){if(str==null){buffer=new char[CAPACITY];}else {buffer=new char[str.length()+CAPACITY];append(str);}}"
363	"public void test(){if(nullText!=null&&nullText.length()==0){nullText=null;}}"
364	"public void test(){if(length<0){throw new StringIndexOutOfBoundsException(length);}}"
365	"public void test(){if(length<size){size=length;}else if(length>size){ensureCapacity(length);int oldEnd=size;int newEnd=length;size=length;for(int i=oldEnd;i<newEnd;i++){buffer[i]='\0';}}}"
366	"public void test(){if(length>size){ensureCapacity(length);int oldEnd=size;int newEnd=length;size=length;for(int i=oldEnd;i<newEnd;i++){buffer[i]='\0';}}}"
367	"public void test(){if(capacity>buffer.length){char[] old=buffer;buffer=new char[capacity];System.arraycopy(old,0,buffer,0,size);}}"
368	"public void test(){if(buffer.length>length()){char[] old=buffer;buffer=new char[length()];System.arraycopy(old,0,buffer,0,size);}}"
369	"public void test(){if(index<0||index>=length()){throw new StringIndexOutOfBoundsException(index);}}"
370	"public void test(){if(index<0||index>=length()){throw new StringIndexOutOfBoundsException(index);}return buffer[index];}"
371	"public void test(){if(index<0||index>=length()){throw new StringIndexOutOfBoundsException(index);}buffer[index]=ch;return this;}"
372	"public void test(){if(size==0){return ArrayUtils.EMPTY_CHAR_ARRAY;}char chars[]=new char[size];System.arraycopy(buffer,0,chars,0,size);return chars;}"
373	"public void test(){endIndex=validateRange(startIndex,endIndex);int len=endIndex-startIndex;if(len==0){return ArrayUtils.EMPTY_CHAR_ARRAY;}char chars[]=new char[len];System.arraycopy(buffer,startIndex,chars,0,len);return chars;}"
374	"public void test(){if(len==0){return ArrayUtils.EMPTY_CHAR_ARRAY;}}"
375	"public void test(){int len=length();if(destination==null||destination.length<len){destination=new char[len];}System.arraycopy(buffer,0,destination,0,len);return destination;}"
376	"public void test(){if(destination==null||destination.length<len){destination=new char[len];}}"
377	"public void test(){if(endIndex<0||endIndex>length()){throw new StringIndexOutOfBoundsException(endIndex);}}"
378	"public void test(){if(startIndex<0){throw new StringIndexOutOfBoundsException(startIndex);}if(endIndex<0||endIndex>length()){throw new StringIndexOutOfBoundsException(endIndex);}if(startIndex>endIndex){throw new StringIndexOutOfBoundsException(""end < start"");}System.arraycopy(buffer,startIndex,destination,destinationIndex,endIndex-startIndex);}"
379	"public void test(){if(str==null){return appendNull();}int strLen=str.length();if(strLen>0){int len=length();ensureCapacity(len+strLen);str.getChars(0,strLen,buffer,len);size+=strLen;}return this;}"
380	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);str.getChars(0,strLen,buffer,len);size+=strLen;}}"
381	"public void test(){if(startIndex<0||startIndex>str.length()){throw new StringIndexOutOfBoundsException(""startIndex must be valid"");}}"
382	"public void test(){if(length<0||(startIndex+length)>str.length()){throw new StringIndexOutOfBoundsException(""length must be valid"");}}"
383	"public void test(){if(length>0){int len=length();ensureCapacity(len+length);str.getChars(startIndex,startIndex+length,buffer,len);size+=length;}}"
384	"public void test(){if(str==null){return appendNull();}int strLen=str.length();if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(str.buffer,0,buffer,len,strLen);size+=strLen;}return this;}"
385	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(str.buffer,0,buffer,len,strLen);size+=strLen;}}"
386	"public void test(){if(chars==null){return appendNull();}int strLen=chars.length;if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(chars,0,buffer,len,strLen);size+=strLen;}return this;}"
387	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(chars,0,buffer,len,strLen);size+=strLen;}}"
388	"public void test(){if(startIndex<0||startIndex>chars.length){throw new StringIndexOutOfBoundsException(""Invalid startIndex: ""+length);}}"
389	"public void test(){if(length<0||(startIndex+length)>chars.length){throw new StringIndexOutOfBoundsException(""Invalid length: ""+length);}}"
390	"public void test(){if(length>0){int len=length();ensureCapacity(len+length);System.arraycopy(chars,startIndex,buffer,len,length);size+=length;}}"
391	"public void test(){int len=length();ensureCapacity(len+1);buffer[size++]=ch;return this;}"
392	"public void test(){if(array!=null&&array.length>0){separator=(separator==null?"""":separator);append(array[0]);for(int i=1;i<array.length;i++){append(separator);append(array[i]);}}}"
393	"public void test(){if(length>=0){ensureCapacity(size+length);for(int i=0;i<length;i++){buffer[size++]=padChar;}}}"
394	"public void test(){String str=(obj==null?getNullText():obj.toString());int strLen=str.length();if(strLen>=width){str.getChars(strLen-width,strLen,buffer,size);}else {int padLen=width-strLen;for(int i=0;i<padLen;i++){buffer[size+i]=padChar;}str.getChars(0,strLen,buffer,size+padLen);}}"
395	"public void test(){if(strLen>=width){str.getChars(strLen-width,strLen,buffer,size);}else {int padLen=width-strLen;for(int i=0;i<padLen;i++){buffer[size+i]=padChar;}str.getChars(0,strLen,buffer,size+padLen);}}"
396	"public void test(){String str=(obj==null?getNullText():obj.toString());int strLen=str.length();if(strLen>=width){str.getChars(0,strLen,buffer,size);}else {int padLen=width-strLen;str.getChars(0,strLen,buffer,size);for(int i=0;i<padLen;i++){buffer[size+strLen]=padChar;}}}"
397	"public void test(){if(strLen>=width){str.getChars(0,strLen,buffer,size);}else {int padLen=width-strLen;str.getChars(0,strLen,buffer,size);for(int i=0;i<padLen;i++){buffer[size+strLen]=padChar;}}}"
398	"public void test(){if(str==null){str=nullText;}int strLen=(str==null?0:str.length());if(strLen>0){int newSize=size+strLen;ensureCapacity(newSize);System.arraycopy(buffer,index,buffer,index+strLen,size-index);size=newSize;str.getChars(0,strLen,buffer,index);}}"
399	"public void test(){if(strLen>0){int newSize=size+strLen;ensureCapacity(newSize);System.arraycopy(buffer,index,buffer,index+strLen,size-index);size=newSize;str.getChars(0,strLen,buffer,index);}}"
400	"public void test(){if(chars==null){return insert(index,nullText);}int len=chars.length;if(len>0){ensureCapacity(size+len);System.arraycopy(buffer,index,buffer,index+len,size-index);System.arraycopy(chars,0,buffer,index,len);size+=len;}}"
401	"public void test(){if(len>0){ensureCapacity(size+len);System.arraycopy(buffer,index,buffer,index+len,size-index);System.arraycopy(chars,0,buffer,index,len);size+=len;}}"
402	"public void test(){if(offset<0||offset>chars.length){throw new StringIndexOutOfBoundsException(""Invalid offset: ""+offset);}}"
403	"public void test(){if(length<0||offset+length>chars.length){throw new StringIndexOutOfBoundsException(""Invalid length: ""+length);}}"
404	"public void test(){if(length>0){ensureCapacity(size+length);System.arraycopy(buffer,index,buffer,index+length,size-index);System.arraycopy(chars,offset,buffer,index,length);size+=length;}}"
405	"public void test(){validateIndex(index);ensureCapacity(size+1);System.arraycopy(buffer,index,buffer,index+1,size-index);buffer[index]=value;size++;return this;}"
406	"public void test(){endIndex=validateRange(startIndex,endIndex);int len=endIndex-startIndex;if(len>0){deleteImpl(startIndex,endIndex,len);}return this;}"
407	"public void test(){if(len>0){deleteImpl(startIndex,endIndex,len);}}"
408	"public void test(){if(buffer[i]==ch){int start=i;while(++i<size){if(buffer[i]!=ch){break;}}int len=i-start;deleteImpl(start,i,len);i-=len;}}"
409	"public void test(){if(buffer[i]!=ch){break;}}"
410	"public void test(){if(buffer[i]==ch){deleteImpl(i,i+1,1);break;}}"
411	"public void test(){int len=(str==null?0:str.length());if(len>0){int index=indexOf(str,0);while(index>=0){deleteImpl(index,index+len,len);index=indexOf(str,index);}}return this;}"
412	"public void test(){if(len>0){int index=indexOf(str,0);while(index>=0){deleteImpl(index,index+len,len);index=indexOf(str,index);}}}"
413	"public void test(){int len=(str==null?0:str.length());if(len>0){int index=indexOf(str,0);if(index>=0){deleteImpl(index,index+len,len);}}return this;}"
414	"public void test(){if(len>0){int index=indexOf(str,0);if(index>=0){deleteImpl(index,index+len,len);}}}"
415	"public void test(){if(index>=0){deleteImpl(index,index+len,len);}}"
416	"public void test(){if(insertLen!=removeLen){ensureCapacity(newSize);System.arraycopy(buffer,endIndex,buffer,startIndex+insertLen,size-endIndex);size=newSize;}}"
417	"public void test(){if(insertLen>0){insertStr.getChars(0,insertLen,buffer,startIndex);}}"
418	"public void test(){endIndex=validateRange(startIndex,endIndex);int insertLen=(replaceStr==null?0:replaceStr.length());replaceImpl(startIndex,endIndex,endIndex-startIndex,replaceStr,insertLen);return this;}"
419	"public void test(){if(buffer[i]==search){buffer[i]=replace;}}"
420	"public void test(){if(buffer[i]==search){buffer[i]=replace;break;}}"
421	"public void test(){int searchLen=(searchStr==null?0:searchStr.length());if(searchLen>0){int replaceLen=(replaceStr==null?0:replaceStr.length());int index=indexOf(searchStr,0);while(index>=0){replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);index=indexOf(searchStr,index+replaceLen);}}return this;}"
422	"public void test(){if(searchLen>0){int replaceLen=(replaceStr==null?0:replaceStr.length());int index=indexOf(searchStr,0);while(index>=0){replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);index=indexOf(searchStr,index+replaceLen);}}}"
423	"public void test(){int searchLen=(searchStr==null?0:searchStr.length());if(searchLen>0){int index=indexOf(searchStr,0);if(index>=0){int replaceLen=(replaceStr==null?0:replaceStr.length());replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);}}return this;}"
424	"public void test(){if(index>=0){int replaceLen=(replaceStr==null?0:replaceStr.length());replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);}}"
425	"public void test(){{if(matcher==null||size==0){return this;}int replaceLen=(replaceStr==null?0:replaceStr.length());char[] buf=buffer;for(int i=from;i<to&&replaceCount!=0;i++){int removeLen=matcher.isMatch(buf,i,from,to);if(removeLen>0){replaceImpl(i,i+removeLen,removeLen,replaceStr,replaceLen);to=to-removeLen+replaceLen;i=i+replaceLen-1;if(replaceCount>0){replaceCount--;}}}return this;}}"
426	"public void test(){int replaceLen=(replaceStr==null?0:replaceStr.length());char[] buf=buffer;for(int i=from;i<to&&replaceCount!=0;i++){int removeLen=matcher.isMatch(buf,i,from,to);if(removeLen>0){replaceImpl(i,i+removeLen,removeLen,replaceStr,replaceLen);to=to-removeLen+replaceLen;i=i+replaceLen-1;if(replaceCount>0){replaceCount--;}}}}"
427	"public void test(){if(size==0){return this;}int half=size/2;char[] buf=buffer;for(int leftIdx=0,rightIdx=size-1;leftIdx<half;leftIdx++,rightIdx--){char swap=buf[leftIdx];buf[leftIdx]=buf[rightIdx];buf[rightIdx]=swap;}return this;}"
428	"public void test(){if(size==0){return this;}int len=size;char[] buf=buffer;int pos=0;while(pos<len&&buf[pos]<=' '){pos++;}}"
429	"public void test(){if(len<size){delete(len,size);}}"
430	"public void test(){if(str==null){return false;}int len=str.length();if(len==0){return true;}if(len>size){return false;}}"
431	"public void test(){if(len==0){return true;}}"
432	"public void test(){if(len>size){return false;}}"
433	"public void test(){for(int i=0;i<len;i++){if(buffer[i]!=str.charAt(i)){return false;}}}"
434	"public void test(){if(buffer[i]!=str.charAt(i)){return false;}}"
435	"public void test(){if(len>size){return false;}int pos=size-len;for(int i=0;i<len;i++,pos++){if(buffer[pos]!=str.charAt(i)){return false;}}}"
436	"public void test(){for(int i=0;i<len;i++,pos++){if(buffer[pos]!=str.charAt(i)){return false;}}}"
437	"public void test(){if(buffer[pos]!=str.charAt(i)){return false;}}"
438	"public void test(){endIndex=validateRange(startIndex,endIndex);return new String(buffer,startIndex,endIndex-startIndex);}"
439	"public void test(){if(length<=0){return """";}else if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,0,length);}}"
440	"public void test(){if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,0,length);}}"
441	"public void test(){if(length<=0){return """";}else if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,size-length,length);}}"
442	"public void test(){if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,size-length,length);}}"
443	"public void test(){if(length<=0||index>=size){return """";}}"
444	"public void test(){if(size<=index+length){return new String(buffer,index,size-index);}else {return new String(buffer,index,length);}}"
445	"public void test(){char[] thisBuf=buffer;for(int i=0;i<thisBuf.length;i++){if(thisBuf[i]==ch){return true;}}return false;}"
446	"public void test(){for(int i=0;i<thisBuf.length;i++){if(thisBuf[i]==ch){return true;}}}"
447	"public void test(){startIndex=(startIndex<0?0:startIndex);if(startIndex>=size){return -1;}char[] thisBuf=buffer;for(int i=startIndex;i<thisBuf.length;i++){if(thisBuf[i]==ch){return i;}}return -1;}"
448	"public void test(){for(int i=startIndex;i<thisBuf.length;i++){if(thisBuf[i]==ch){return i;}}}"
449	"public void test(){startIndex=(startIndex<0?0:startIndex);if(str==null||startIndex>=size){return -1;}int strLen=str.length();if(strLen==1){return indexOf(str.charAt(0),startIndex);}if(strLen==0){return startIndex;}}"
450	"public void test(){if(strLen==0){return startIndex;}if(strLen>size){return -1;}char[] thisBuf=buffer;int len=size-strLen+1;}"
451	"public void test(){for(int i=startIndex;i<len;i++){for(int j=0;j<strLen;j++){if(str.charAt(j)!=thisBuf[i+j]){continue outer;}}return i;}}"
452	"public void test(){startIndex=(startIndex<0?0:startIndex);if(matcher==null||startIndex>=size){return -1;}int len=size;char[] buf=buffer;for(int i=startIndex;i<len;i++){if(matcher.isMatch(buf,i,startIndex,len)>0){return i;}}return -1;}"
453	"public void test(){for(int i=startIndex;i<len;i++){if(matcher.isMatch(buf,i,startIndex,len)>0){return i;}}}"
454	"public void test(){if(matcher.isMatch(buf,i,startIndex,len)>0){return i;}}"
455	"public void test(){if(buffer[i]==ch){return i;}}"
456	"public void test(){if(str.charAt(j)!=buffer[i+j]){continue outer;}}"
457	"public void test(){startIndex=(startIndex>=size?size-1:startIndex);if(matcher==null||startIndex<0){return -1;}char[] buf=buffer;int endIndex=startIndex+1;for(int i=startIndex;i>=0;i--){if(matcher.isMatch(buf,i,0,endIndex)>0){return i;}}return -1;}"
458	"public void test(){if(this==other){return true;}if(this.size!=other.size){return false;}char thisBuf[]=this.buffer;char otherBuf[]=other.buffer;}"
459	"public void test(){char thisBuf[]=this.buffer;char otherBuf[]=other.buffer;for(int i=size-1;i>=0;i--){char c1=thisBuf[i];char c2=otherBuf[i];if(c1!=c2&&Character.toUpperCase(c1)!=Character.toUpperCase(c2)){return false;}}}"
460	"public void test(){if(this==other){return true;}if(this.size!=other.size){return false;}char thisBuf[]=this.buffer;char otherBuf[]=other.buffer;for(int i=size-1;i>=0;i--){if(thisBuf[i]!=otherBuf[i]){return false;}}}"
461	"public void test(){if(this.size!=other.size){return false;}char thisBuf[]=this.buffer;char otherBuf[]=other.buffer;for(int i=size-1;i>=0;i--){if(thisBuf[i]!=otherBuf[i]){return false;}}return true;}"
462	"public void test(){char buf[]=buffer;int hash=0;for(int i=size-1;i>=0;i--){hash=31*hash+buf[i];}return hash;}"
463	"public void test(){if(off<0||len<0||off>b.length||(off+len)>b.length||(off+len)<0){throw new IndexOutOfBoundsException();}}"
464	"public void test(){if(len==0){return 0;}}"
465	"public void test(){if(pos+len>size()){len=this.size()-pos;}}"
466	"public void test(){if(pos>=this.size()){return -1;}if(pos+len>size()){len=this.size()-pos;}this.getChars(pos,pos+len,b,off);pos+=len;return len;}"
467	"public void test(){{if(off<0||len<0||off>b.length||(off+len)>b.length||(off+len)<0){throw new IndexOutOfBoundsException();}if(len==0){return 0;}if(pos>=this.size()){return -1;}if(pos+len>size()){len=this.size()-pos;}this.getChars(pos,pos+len,b,off);pos+=len;return len;}}"
468	"public void test(){String token=parseToken(mPattern,indexRef);i=indexRef[0];int tokenLen=token.length();if(tokenLen==0){break;}Rule rule;}"
469	"public void test(){if(sub.length()==1){rule=new CharacterLiteral(sub.charAt(0));}else {rule=new StringLiteral(sub);}}"
470	"public void test(){while(i+1<length){char peek=pattern.charAt(i+1);if(peek==c){buf.append(c);i++;}else {break;}}}"
471	"public void test(){for(;i<length;i++){c=pattern.charAt(i);if(c=='\''){if(i+1<length&&pattern.charAt(i+1)=='\''){i++;buf.append(c);}else {inLiteral=!inLiteral;}}else if(!inLiteral&&(c>='A'&&c<='Z'||c>='a'&&c<='z')){i--;break;}else {buf.append(c);}}}"
472	"public void test(){if(i+1<length&&pattern.charAt(i+1)=='\''){i++;buf.append(c);}else {inLiteral=!inLiteral;}}"
473	"public void test(){Rule[] rules=mRules;int len=mRules.length;for(int i=0;i<len;i++){rules[i].appendTo(buf,calendar);}return buf;}"
474	"public void test(){for(int i=mValues.length;--i>=0;){int len=mValues[i].length();if(len>max){max=len;}}}"
475	"public void test(){if(len>max){max=len;}}"
476	"public void test(){if(value<1000){digits=3;}else {Validate.isTrue(value>-1,""Negative values should not be possible"",value);digits=Integer.toString(value).length();}}"
477	"public void test(){if(mTimeZoneForced){return Math.max(mStandard.length(),mDaylight.length());}else if(mStyle==TimeZone.SHORT){return 4;}else {return 40;}}"
478	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");duration=tmp;if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}}}"
479	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");duration=tmp;if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}}"
480	"public void test(){if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}"
481	"public void test(){if(duration.length()!=0){duration=duration.substring(1);}}"
482	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}}}"
483	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}}"
484	"public void test(){if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}"
485	"public void test(){int sz=tokens.length;for(int i=0;i<sz;i++){if(tokens[i].getValue()==value){return true;}}return false;}"
486	"public void test(){for(int i=0;i<parsePatterns.length;i++){if(i==0){parser=new SimpleDateFormat(parsePatterns[0]);}else {parser.applyPattern(parsePatterns[i]);}pos.setIndex(0);Date date=parser.parse(str,pos);if(date!=null&&pos.getIndex()==str.length()){return date;}}}"
487	"public void test(){if(date!=null&&pos.getIndex()==str.length()){return date;}}"
488	"public void test(){for(int j=0;j<fields[i].length;j++){if(fields[i][j]==field){if(round&&roundUp){if(field==DateUtils.SEMI_MONTH){if(val.get(Calendar.DATE)==1){val.add(Calendar.DATE,15);}else {val.add(Calendar.DATE,-15);val.add(Calendar.MONTH,1);}}else {val.add(fields[i][0],1);}}return ;}}}"