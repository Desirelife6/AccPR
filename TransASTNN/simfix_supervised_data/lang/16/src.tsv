1	"public void test(){if(str.startsWith(""0x"")||str.startsWith(""-0x"")){return createInteger(str);}char lastChar=str.charAt(str.length()-1);String mant;}"
2	"public void test(){HashMap<T,MutableInt> occurrences=new HashMap<T,MutableInt>(items.length);for(T t : items){MutableInt count=occurrences.get(t);if(count==null){occurrences.put(t,new MutableInt(1));}else {count.increment();}}}"
3	"public void test(){if(!componentType.isPrimitive()){result=((Object[])obj).clone();}else {int length=Array.getLength(obj);result=Array.newInstance(componentType,length);while(length-->0){Array.set(result,length,Array.get(obj,length));}}}"
4	"public void test(){Validate.notNull(enumClass,""EnumClass must be defined.""); final E[] constants=enumClass.getEnumConstants();Validate.isTrue(constants!=null,""%s does not seem to be an Enum type"",enumClass);Validate.isTrue(constants.length<=Long.SIZE,""Cannot store %s %s values in %s bits"",constants.length,enumClass.getSimpleName(),Long.SIZE);return enumClass;}"
5	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}Class<?> parameterTypes[]=new Class[args.length];for(int i=0;i<args.length;i++){parameterTypes[i]=args[i].getClass();}return invokeConstructor(cls,args,parameterTypes);}"
6	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}int arguments=args.length;Class<?> parameterTypes[]=new Class[arguments];for(int i=0;i<arguments;i++){parameterTypes[i]=args[i].getClass();}return invokeExactConstructor(cls,args,parameterTypes);}"
7	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}int arguments=args.length;Class<?>[] parameterTypes=new Class[arguments];for(int i=0;i<arguments;i++){parameterTypes[i]=args[i].getClass();}return invokeMethod(object,methodName,args,parameterTypes);}"
8	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}int arguments=args.length;Class<?>[] parameterTypes=new Class[arguments];for(int i=0;i<arguments;i++){parameterTypes[i]=args[i].getClass();}return invokeExactMethod(object,methodName,args,parameterTypes);}"
9	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}int arguments=args.length;Class<?>[] parameterTypes=new Class[arguments];for(int i=0;i<arguments;i++){parameterTypes[i]=args[i].getClass();}return invokeStaticMethod(cls,methodName,args,parameterTypes);}"
10	"public void test(){if(args==null){args=ArrayUtils.EMPTY_OBJECT_ARRAY;}int arguments=args.length;Class<?>[] parameterTypes=new Class[arguments];for(int i=0;i<arguments;i++){parameterTypes[i]=args[i].getClass();}return invokeExactStaticMethod(cls,methodName,args,parameterTypes);}"
11	"public void test(){for(int i=0;i<interfaces.length;i++){if(!Modifier.isPublic(interfaces[i].getModifiers())){continue;}try{method=interfaces[i].getDeclaredMethod(methodName,parameterTypes);}catch (NoSuchMethodException e) {}if(method!=null){break;}method=getAccessibleMethodFromInterfaceNest(interfaces[i],methodName,parameterTypes);if(method!=null){break;}}}"
12	"public void test(){if(cls.getTypeParameters().length>0||toClass.equals(cls)){return typeVarAssigns;}}"
13	"public void test(){for(int i=0;i<typeArgs.length;i++){TypeVariable<?> typeVar=typeVars[i];Type typeArg=typeArgs[i];if(typeVarList.contains(typeArg)&&typeVarAssigns.containsKey(typeVar)){typeVarAssigns.put((TypeVariable<?>)typeArg,typeVarAssigns.get(typeVar));}}}"
14	"public void test(){if(bounds.length<2){return bounds;}}"
15	"public void test(){{if(bounds.length<2){return bounds;}Set<Type> types=new HashSet<Type>(bounds.length);for(Type type1 : bounds){boolean subtypeFound=false;for(Type type2 : bounds){if(type1!=type2&&isAssignable(type2,type1,null)){subtypeFound=true;break;}}if(!subtypeFound){types.add(type1);}}return types.toArray(new Type[types.size()]);}}"
16	"public void test(){Type[] bounds=typeVariable.getBounds();return bounds.length==0?new Type[]{Object.class}:normalizeUpperBounds(bounds);}"
17	"public void test(){Type[] bounds=wildcardType.getUpperBounds();return bounds.length==0?new Type[]{Object.class}:normalizeUpperBounds(bounds);}"
18	"public void test(){Type[] bounds=wildcardType.getLowerBounds();return bounds.length==0?new Type[]{null}:bounds;}"
19	"public void test(){for(int i=0;cls!=destClass&&i<ORDERED_PRIMITIVE_TYPES.length;i++){if(cls==ORDERED_PRIMITIVE_TYPES[i]){cost+=0.1;if(i<ORDERED_PRIMITIVE_TYPES.length-1){cls=ORDERED_PRIMITIVE_TYPES[i+1];}}}}"
20	"public void test(){if(i<ORDERED_PRIMITIVE_TYPES.length-1){cls=ORDERED_PRIMITIVE_TYPES[i+1];}}"
21	"public void test(){if(className.length()==0){return StringUtils.EMPTY;}}"
22	"public void test(){if(className.startsWith(""["")){while(className.charAt(0)=='['){className=className.substring(1);arrayPrefix.append(""[]"");}if(className.charAt(0)=='L'&&className.charAt(className.length()-1)==';'){className=className.substring(1,className.length()-1);}}}"
23	"public void test(){if(className.charAt(0)=='L'&&className.charAt(className.length()-1)==';'){className=className.substring(1,className.length()-1);}}"
24	"public void test(){if(className==null||className.length()==0){return StringUtils.EMPTY;}}"
25	"public void test(){if(className.charAt(0)=='L'&&className.charAt(className.length()-1)==';'){className=className.substring(1);}}"
26	"public void test(){for(int i=0;i<classArray.length;i++){if(isAssignable(classArray[i],toClassArray[i],autoboxing)==false){return false;}}}"
27	"public void test(){if(classes.length==0){return classes;}}"
28	"public void test(){if(classes==null){return null;}if(classes.length==0){return classes;}Class<?>[] convertedClasses=new Class[classes.length];for(int i=0;i<classes.length;i++){convertedClasses[i]=primitiveToWrapper(classes[i]);}return convertedClasses;}"
29	"public void test(){if(classes==null){return null;}if(classes.length==0){return classes;}Class<?>[] convertedClasses=new Class[classes.length];for(int i=0;i<classes.length;i++){convertedClasses[i]=wrapperToPrimitive(classes[i]);}return convertedClasses;}"
30	"public void test(){if(array.length==0){return ArrayUtils.EMPTY_CLASS_ARRAY;}}"
31	"public void test(){if(array==null){return null;}else if(array.length==0){return ArrayUtils.EMPTY_CLASS_ARRAY;}Class<?>[] classes=new Class[array.length];for(int i=0;i<array.length;i++){classes[i]=array[i]==null?null:array[i].getClass();}return classes;}"
32	"public void test(){for(int i=0;i<array.length;i++){classes[i]=array[i]==null?null:array[i].getClass();}}"
33	"public void test(){if(className.startsWith(""L"")){className=className.substring(1,className.endsWith("";"")?className.length()-1:className.length());}else {if(className.length()>0){className=reverseAbbreviationMap.get(className.substring(0,1));}}}"
34	"public void test(){if(className.length()>0){className=reverseAbbreviationMap.get(className.substring(0,1));}}"
35	"public void test(){if(str==""true""){return Boolean.TRUE;}}"
36	"public void test(){if(str==null){return null;}}"
37	"public void test(){char ch0=str.charAt(0);if((ch0=='y'||ch0=='Y')||(ch0=='t'||ch0=='T')){return Boolean.TRUE;}if((ch0=='n'||ch0=='N')||(ch0=='f'||ch0=='F')){return Boolean.FALSE;}}"
38	"public void test(){char ch0=str.charAt(0);char ch1=str.charAt(1);if((ch0=='o'||ch0=='O')&&(ch1=='n'||ch1=='N')){return Boolean.TRUE;}if((ch0=='n'||ch0=='N')&&(ch1=='o'||ch1=='O')){return Boolean.FALSE;}}"
39	"public void test(){char ch0=str.charAt(0);char ch1=str.charAt(1);char ch2=str.charAt(2);if((ch0=='y'||ch0=='Y')&&(ch1=='e'||ch1=='E')){return Boolean.TRUE;}}"
40	"public void test(){char ch0=str.charAt(0);char ch1=str.charAt(1);char ch2=str.charAt(2);if((ch0=='y'||ch0=='Y')&&(ch1=='e'||ch1=='E')){return Boolean.TRUE;}if((ch0=='o'||ch0=='O')&&(ch1=='f'||ch1=='F')){return Boolean.FALSE;}}"
41	"public void test(){char ch0=str.charAt(0);char ch1=str.charAt(1);char ch2=str.charAt(2);char ch3=str.charAt(3);if((ch0=='t'||ch0=='T')&&(ch1=='r'||ch1=='R')){return Boolean.TRUE;}}"
42	"public void test(){char ch1=str.charAt(1);char ch2=str.charAt(2);char ch3=str.charAt(3);if((ch0=='t'||ch0=='T')&&(ch1=='r'||ch1=='R')){return Boolean.TRUE;}break;}"
43	"public void test(){char ch1=str.charAt(1);char ch2=str.charAt(2);char ch3=str.charAt(3);char ch4=str.charAt(4);if((ch0=='f'||ch0=='F')&&(ch1=='a'||ch1=='A')){return Boolean.FALSE;}}"
44	"public void test(){char ch2=str.charAt(2);char ch3=str.charAt(3);char ch4=str.charAt(4);if((ch0=='f'||ch0=='F')&&(ch1=='a'||ch1=='A')){return Boolean.FALSE;}break;}"
45	"public void test(){if(str==null){if(trueString==null){return Boolean.TRUE;}if(falseString==null){return Boolean.FALSE;}if(nullString==null){return null;}}else if(str.equals(trueString)){return Boolean.TRUE;}else if(str.equals(falseString)){return Boolean.FALSE;}else if(str.equals(nullString)){return null;}}"
46	"public void test(){if(str.equals(trueString)){return Boolean.TRUE;}else if(str.equals(falseString)){return Boolean.FALSE;}else if(str.equals(nullString)){return null;}}"
47	"public void test(){if(str.equals(falseString)){return Boolean.FALSE;}else if(str.equals(nullString)){return null;}}"
48	"public void test(){if(str.equals(nullString)){return null;}}"
49	"public void test(){if(str==trueString){return true;}else if(str==falseString){return false;}else if(str!=null){if(str.equals(trueString)){return true;}else if(str.equals(falseString)){return false;}}}"
50	"public void test(){if(str==falseString){return false;}else if(str!=null){if(str.equals(trueString)){return true;}else if(str.equals(falseString)){return false;}}}"
51	"public void test(){if(str!=null){if(str.equals(trueString)){return true;}else if(str.equals(falseString)){return false;}}}"
52	"public void test(){if(str.equals(trueString)){return true;}else if(str.equals(falseString)){return false;}}"
53	"public void test(){if(str.equals(falseString)){return false;}}"
54	"public void test(){if(array.length==0){throw new IllegalArgumentException(""Array is empty"");}}"
55	"public void test(){if(StringUtils.isEmpty(str)||deepEmpty(set)){return str;}}"
56	"public void test(){if(StringUtils.isEmpty(str)||deepEmpty(set)){return str;}CharSet chars=CharSet.getInstance(set);StringBuilder buffer=new StringBuilder(str.length());char[] chrs=str.toCharArray();int sz=chrs.length;}"
57	"public void test(){if(ch==lastChar&&i!=0&&chars.contains(ch)){continue;}}"
58	"public void test(){for(int i=0;i<sz;i++){ch=chrs[i];if(ch==lastChar&&i!=0&&chars.contains(ch)){continue;}buffer.append(ch);lastChar=ch;}}"
59	"public void test(){if(StringUtils.isEmpty(str)||deepEmpty(set)){return 0;}}"
60	"public void test(){for(char c : str.toCharArray()){if(chars.contains(c)){count++;}}}"
61	"public void test(){if(str.length()==0||deepEmpty(set)){return """";}}"
62	"public void test(){if(str==null){return null;}if(str.length()==0||deepEmpty(set)){return """";}return modify(str,set,true);}"
63	"public void test(){if(StringUtils.isEmpty(str)||deepEmpty(set)){return str;}return modify(str,set,false);}"
64	"public void test(){CharSet chars=CharSet.getInstance(set);StringBuilder buffer=new StringBuilder(str.length());char[] chrs=str.toCharArray();int sz=chrs.length;for(int i=0;i<sz;i++){if(chars.contains(chrs[i])==expect){buffer.append(chrs[i]);}}return buffer.toString();}"
65	"public void test(){if(chars==null){return random(count,0,0,false,false,null,RANDOM);}return random(count,0,chars.length,false,false,chars,RANDOM);}"
66	"public void test(){for(int i=0;i<comparators.length;i++){if(comparators[i]==null){throw new NullPointerException(""Comparator cannot be null"");}chain.addComparator(comparators[i]);}}"
67	"public void test(){if(str==null){return defaultValue;}}"
68	"public void test(){if(str==null){return defaultValue;}try{return Integer.parseInt(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
69	"public void test(){if(str==null){return defaultValue;}try{return Long.parseLong(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
70	"public void test(){if(str==null){return defaultValue;}try{return Float.parseFloat(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
71	"public void test(){if(str==null){return defaultValue;}try{return Double.parseDouble(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
72	"public void test(){if(str==null){return defaultValue;}try{return Byte.parseByte(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
73	"public void test(){if(str==null){return defaultValue;}try{return Short.parseShort(str);}catch (NumberFormatException nfe) {  return defaultValue;}}"
74	"public void test(){if(StringUtils.isBlank(str)){throw new NumberFormatException(""A blank string is not a valid number"");}}"
75	"public void test(){if(str.startsWith(""--"")){return null;}}"
76	"public void test(){if(str.startsWith(""0x"")||str.startsWith(""-0x"")){return createInteger(str);}}"
77	"public void test(){if(str.startsWith(""--"")){return null;}if(str.startsWith(""0x"")||str.startsWith(""-0x"")){return createInteger(str);}char lastChar=str.charAt(str.length()-1);String mant;String dec;}"
78	"public void test(){if(str.startsWith(""0x"")||str.startsWith(""-0x"")){return createInteger(str);}char lastChar=str.charAt(str.length()-1);String mant;String dec;String exp;}"
79	"public void test(){if(expPos<decPos||expPos>str.length()){throw new NumberFormatException(str+"" is not a valid number."");}}"
80	"public void test(){if(expPos>-1){if(expPos<decPos||expPos>str.length()){throw new NumberFormatException(str+"" is not a valid number."");}dec=str.substring(decPos+1,expPos);}else {dec=str.substring(decPos+1);}}"
81	"public void test(){if(expPos>-1){if(expPos<decPos||expPos>str.length()){throw new NumberFormatException(str+"" is not a valid number."");}dec=str.substring(decPos+1,expPos);}else {dec=str.substring(decPos+1);}mant=str.substring(0,decPos);}"
82	"public void test(){if(expPos>str.length()){throw new NumberFormatException(str+"" is not a valid number."");}}"
83	"public void test(){if(expPos>-1){if(expPos>str.length()){throw new NumberFormatException(str+"" is not a valid number."");}mant=str.substring(0,expPos);}else {mant=str;}}"
84	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length()-1);}else {exp=null;}}"
85	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length()-1);}else {exp=null;}String numeric=str.substring(0,str.length()-1);boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);}"
86	"public void test(){if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){try{return createLong(numeric);}catch (NumberFormatException nfe) {}return createBigInteger(numeric);}}"
87	"public void test(){default :throw new NumberFormatException(str+"" is not a valid number."");}"
88	"public void test(){if(expPos>-1&&expPos<str.length()-1){exp=str.substring(expPos+1,str.length());}else {exp=null;}}"
89	"public void test(){try{return createInteger(str);}catch (NumberFormatException nfe) {}try{return createLong(str);}catch (NumberFormatException nfe) {}return createBigInteger(str);}"
90	"public void test(){boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);try{Float f=createFloat(str);if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){return f;}}catch (NumberFormatException nfe) {}}"
91	"public void test(){try{Float f=createFloat(str);if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){return f;}}catch (NumberFormatException nfe) {}}"
92	"public void test(){try{Double d=createDouble(str);if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){return d;}}catch (NumberFormatException nfe) {}}"
93	"public void test(){try{Double d=createDouble(str);if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){return d;}}catch (NumberFormatException nfe) {}return createBigDecimal(str);}"
94	"public void test(){if(str==null){return true;}}"
95	"public void test(){for(int i=str.length()-1;i>=0;i--){if(str.charAt(i)!='0'){return false;}}}"
96	"public void test(){if(str.charAt(i)!='0'){return false;}}"
97	"public void test(){if(str==null){return true;}for(int i=str.length()-1;i>=0;i--){if(str.charAt(i)!='0'){return false;}}return str.length()>0;}"
98	"public void test(){if(str==null){return null;}return Float.valueOf(str);}"
99	"public void test(){if(str==null){return null;}return Double.valueOf(str);}"
100	"public void test(){if(str==null){return null;}return Integer.decode(str);}"
101	"public void test(){if(str==null){return null;}return Long.valueOf(str);}"
102	"public void test(){if(str==null){return null;}return new BigInteger(str);}"
103	"public void test(){if(str==null){return null;}if(StringUtils.isBlank(str)){throw new NumberFormatException(""A blank string is not a valid number"");}return new BigDecimal(str);}"
104	"public void test(){if(array.length==0){throw new IllegalArgumentException(""Array cannot be empty."");}}"
105	"public void test(){for(int i=1;i<array.length;i++){if(array[i]<min){min=array[i];}}}"
106	"public void test(){for(int j=1;j<array.length;j++){if(array[j]<min){min=array[j];}}}"
107	"public void test(){for(int i=1;i<array.length;i++){if(Double.isNaN(array[i])){return Double.NaN;}if(array[i]<min){min=array[i];}}}"
108	"public void test(){for(int i=1;i<array.length;i++){if(Float.isNaN(array[i])){return Float.NaN;}if(array[i]<min){min=array[i];}}}"
109	"public void test(){for(int j=1;j<array.length;j++){if(array[j]>max){max=array[j];}}}"
110	"public void test(){for(int i=1;i<array.length;i++){if(array[i]>max){max=array[i];}}}"
111	"public void test(){for(int j=1;j<array.length;j++){if(Double.isNaN(array[j])){return Double.NaN;}if(array[j]>max){max=array[j];}}}"
112	"public void test(){for(int j=1;j<array.length;j++){if(Float.isNaN(array[j])){return Float.NaN;}if(array[j]>max){max=array[j];}}}"
113	"public void test(){if(StringUtils.isEmpty(str)){return false;}}"
114	"public void test(){for(int i=0;i<str.length();i++){if(!Character.isDigit(str.charAt(i))){return false;}}}"
115	"public void test(){if(!Character.isDigit(str.charAt(i))){return false;}}"
116	"public void test(){if(StringUtils.isEmpty(str)){return false;}char[] chars=str.toCharArray();int sz=chars.length;boolean hasExp=false;}"
117	"public void test(){if(StringUtils.isEmpty(str)){return false;}char[] chars=str.toCharArray();int sz=chars.length;boolean hasExp=false;boolean hasDecPoint=false;}"
118	"public void test(){for(;i<chars.length;i++){if((chars[i]<'0'||chars[i]>'9')&&(chars[i]<'a'||chars[i]>'f')){return false;}}}"
119	"public void test(){if(str==null){throw new IllegalArgumentException(""The string must not be null"");}}"
120	"public void test(){if(str==null){throw new IllegalArgumentException(""The string must not be null"");}int pos=str.indexOf('.');if(pos>=0){return getFraction(Double.parseDouble(str));}}"
121	"public void test(){if(pos>=0){return getFraction(Double.parseDouble(str));}}"
122	"public void test(){if(str==null){throw new IllegalArgumentException(""The string must not be null"");}int pos=str.indexOf('.');if(pos>=0){return getFraction(Double.parseDouble(str));}pos=str.indexOf(' ');}"
123	"public void test(){int whole=Integer.parseInt(str.substring(0,pos));str=str.substring(pos+1);pos=str.indexOf('/');if(pos<0){throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");}else {int numer=Integer.parseInt(str.substring(0,pos));int denom=Integer.parseInt(str.substring(pos+1));return getFraction(whole,numer,denom);}}"
124	"public void test(){str=str.substring(pos+1);pos=str.indexOf('/');if(pos<0){throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");}else {int numer=Integer.parseInt(str.substring(0,pos));int denom=Integer.parseInt(str.substring(pos+1));return getFraction(whole,numer,denom);}}"
125	"public void test(){if(pos<0){throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");}else {int numer=Integer.parseInt(str.substring(0,pos));int denom=Integer.parseInt(str.substring(pos+1));return getFraction(whole,numer,denom);}}"
126	"public void test(){pos=str.indexOf('/');if(pos<0){return getFraction(Integer.parseInt(str),1);}else {int numer=Integer.parseInt(str.substring(0,pos));int denom=Integer.parseInt(str.substring(pos+1));return getFraction(numer,denom);}}"
127	"public void test(){if(pos<0){return getFraction(Integer.parseInt(str),1);}else {int numer=Integer.parseInt(str.substring(0,pos));int denom=Integer.parseInt(str.substring(pos+1));return getFraction(numer,denom);}}"
128	"public void test(){if(cs==null||(strLen=cs.length())==0){return true;}}"
129	"public void test(){if((Character.isWhitespace(cs.charAt(i))==false)){return false;}}"
130	"public void test(){String ts=trim(str);return isEmpty(ts)?null:ts;}"
131	"public void test(){if(str==null){return null;}str=strip(str,null);return str.length()==0?null:str;}"
132	"public void test(){if(isEmpty(str)){return str;}}"
133	"public void test(){if(isEmpty(str)){return str;}str=stripStart(str,stripChars);return stripEnd(str,stripChars);}"
134	"public void test(){if(str==null||(strLen=str.length())==0){return str;}}"
135	"public void test(){if(stripChars.length()==0){return str;}else {while((start!=strLen)&&(stripChars.indexOf(str.charAt(start))!=INDEX_NOT_FOUND)){start++;}}}"
136	"public void test(){if(stripChars==null){while((start!=strLen)&&Character.isWhitespace(str.charAt(start))){start++;}}else if(stripChars.length()==0){return str;}else {while((start!=strLen)&&(stripChars.indexOf(str.charAt(start))!=INDEX_NOT_FOUND)){start++;}}return str.substring(start);}"
137	"public void test(){if(str==null||(end=str.length())==0){return str;}}"
138	"public void test(){if(stripChars.length()==0){return str;}else {while((end!=0)&&(stripChars.indexOf(str.charAt(end-1))!=INDEX_NOT_FOUND)){end--;}}}"
139	"public void test(){if(stripChars==null){while((end!=0)&&Character.isWhitespace(str.charAt(end-1))){end--;}}else if(stripChars.length()==0){return str;}else {while((end!=0)&&(stripChars.indexOf(str.charAt(end-1))!=INDEX_NOT_FOUND)){end--;}}return str.substring(0,end);}"
140	"public void test(){if(strs==null||(strsLen=strs.length)==0){return strs;}}"
141	"public void test(){if(str1==null||str2==null){return str1==str2;}else {return CharSequenceUtils.regionMatches(str1,true,0,str2,0,Math.max(str1.length(),str2.length()));}}"
142	"public void test(){if(searchStr.length()==0){return lastIndex?str.length():0;}}"
143	"public void test(){if(str==null||searchStr==null||ordinal<=0){return INDEX_NOT_FOUND;}if(searchStr.length()==0){return lastIndex?str.length():0;}int found=0;int index=lastIndex?str.length():INDEX_NOT_FOUND;}"
144	"public void test(){if(startPos<0){startPos=0;}int endLimit=(str.length()-searchStr.length())+1;if(startPos>endLimit){return INDEX_NOT_FOUND;}}"
145	"public void test(){if(searchStr.length()==0){return startPos;}}"
146	"public void test(){if(CharSequenceUtils.regionMatches(str,true,i,searchStr,0,searchStr.length())){return i;}}"
147	"public void test(){if(isEmpty(seq)){return INDEX_NOT_FOUND;}return CharSequenceUtils.lastIndexOf(seq,searchChar,seq.length());}"
148	"public void test(){if(seq==null||searchSeq==null){return INDEX_NOT_FOUND;}return CharSequenceUtils.lastIndexOf(seq,searchSeq,seq.length());}"
149	"public void test(){if(str==null||searchStr==null){return INDEX_NOT_FOUND;}return lastIndexOfIgnoreCase(str,searchStr,str.length());}"
150	"public void test(){if(startPos>(str.length()-searchStr.length())){startPos=str.length()-searchStr.length();}}"
151	"public void test(){if(str==null||searchStr==null){return false;}int len=searchStr.length();int max=str.length()-len;for(int i=0;i<=max;i++){if(CharSequenceUtils.regionMatches(str,true,i,searchStr,0,len)){return true;}}return false;}"
152	"public void test(){if(isEmpty(seq)){return false;}int strLen=seq.length();for(int i=0;i<strLen;i++){if(Character.isWhitespace(seq.charAt(i))){return true;}}return false;}"
153	"public void test(){if(Character.isWhitespace(seq.charAt(i))){return true;}}"
154	"public void test(){if(isEmpty(cs)||ArrayUtils.isEmpty(searchChars)){return INDEX_NOT_FOUND;}int csLen=cs.length();int csLast=csLen-1;int searchLen=searchChars.length;}"
155	"public void test(){if(isEmpty(cs)||ArrayUtils.isEmpty(searchChars)){return INDEX_NOT_FOUND;}int csLen=cs.length();int csLast=csLen-1;int searchLen=searchChars.length;int searchLast=searchLen-1;}"
156	"public void test(){char ch=cs.charAt(i);for(int j=0;j<searchLen;j++){if(searchChars[j]==ch){if(i<csLast&&j<searchLast&&Character.isHighSurrogate(ch)){if(searchChars[j+1]==cs.charAt(i+1)){return i;}}else {return i;}}}}"
157	"public void test(){if(searchChars[j+1]==cs.charAt(i+1)){return i;}}"
158	"public void test(){if(isEmpty(cs)||ArrayUtils.isEmpty(searchChars)){return false;}int csLength=cs.length();int searchLength=searchChars.length;int csLast=csLength-1;}"
159	"public void test(){if(isEmpty(cs)||ArrayUtils.isEmpty(searchChars)){return false;}int csLength=cs.length();int searchLength=searchChars.length;int csLast=csLength-1;int searchLast=searchLength-1;}"
160	"public void test(){{char ch=cs.charAt(i);for(int j=0;j<searchLength;j++){if(searchChars[j]==ch){if(Character.isHighSurrogate(ch)){if(j==searchLast){return true;}if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){return true;}}else {return true;}}}}}"
161	"public void test(){if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){return true;}}"
162	"public void test(){char ch=cs.charAt(i);for(int j=0;j<searchLen;j++){if(searchChars[j]==ch){if(i<csLast&&j<searchLast&&Character.isHighSurrogate(ch)){if(searchChars[j+1]==cs.charAt(i+1)){continue outer;}}else {continue outer;}}}}"
163	"public void test(){if(searchChars[j+1]==cs.charAt(i+1)){continue outer;}}"
164	"public void test(){char ch=seq.charAt(i);boolean chFound=CharSequenceUtils.indexOf(searchChars,ch,0)>=0;if(i+1<strLen&&Character.isHighSurrogate(ch)){char ch2=seq.charAt(i+1);if(chFound&&CharSequenceUtils.indexOf(searchChars,ch2,0)<0){return i;}}else {if(!chFound){return i;}}}"
165	"public void test(){if(i+1<strLen&&Character.isHighSurrogate(ch)){char ch2=seq.charAt(i+1);if(chFound&&CharSequenceUtils.indexOf(searchChars,ch2,0)<0){return i;}}else {if(!chFound){return i;}}}"
166	"public void test(){if(cs.length()==0){return true;}}"
167	"public void test(){if(valid.length==0){return false;}}"
168	"public void test(){if(cs==null||searchChars==null){return true;}int csLen=cs.length();int csLast=csLen-1;int searchLen=searchChars.length;}"
169	"public void test(){if(cs==null||searchChars==null){return true;}int csLen=cs.length();int csLast=csLen-1;int searchLen=searchChars.length;int searchLast=searchLen-1;}"
170	"public void test(){{char ch=cs.charAt(i);for(int j=0;j<searchLen;j++){if(searchChars[j]==ch){if(Character.isHighSurrogate(ch)){if(j==searchLast){return false;}if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){return false;}}else {return false;}}}}}"
171	"public void test(){if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){return false;}}"
172	"public void test(){if(str==null||searchStrs==null){return INDEX_NOT_FOUND;}int sz=searchStrs.length;int ret=Integer.MAX_VALUE;int tmp=0;}"
173	"public void test(){if(str==null||searchStrs==null){return INDEX_NOT_FOUND;}int sz=searchStrs.length;int ret=INDEX_NOT_FOUND;int tmp=0;}"
174	"public void test(){for(int i=0;i<sz;i++){CharSequence search=searchStrs[i];if(search==null){continue;}tmp=CharSequenceUtils.lastIndexOf(str,search,str.length());if(tmp>ret){ret=tmp;}}}"
175	"public void test(){if(start<0){start=str.length()+start;}}"
176	"public void test(){if(start>str.length()){return EMPTY;}}"
177	"public void test(){if(start<0){start=0;}if(start>str.length()){return EMPTY;}return str.substring(start);}"
178	"public void test(){if(end<0){end=str.length()+end;}}"
179	"public void test(){if(end>str.length()){end=str.length();}}"
180	"public void test(){if(start<0){start=0;}if(end<0){end=0;}return str.substring(start,end);}"
181	"public void test(){if(str.length()<=len){return str;}}"
182	"public void test(){if(str==null){return null;}if(len<0){return EMPTY;}if(str.length()<=len){return str;}return str.substring(0,len);}"
183	"public void test(){if(str==null){return null;}if(len<0){return EMPTY;}if(str.length()<=len){return str;}return str.substring(str.length()-len);}"
184	"public void test(){if(len<0||pos>str.length()){return EMPTY;}}"
185	"public void test(){if(str.length()<=(pos+len)){return str.substring(pos);}}"
186	"public void test(){if(pos<0){pos=0;}if(str.length()<=(pos+len)){return str.substring(pos);}return str.substring(pos,pos+len);}"
187	"public void test(){if(isEmpty(str)||separator==null){return str;}}"
188	"public void test(){if(separator.length()==0){return EMPTY;}}"
189	"public void test(){if(isEmpty(str)||separator==null){return str;}if(separator.length()==0){return EMPTY;}int pos=str.indexOf(separator);if(pos==INDEX_NOT_FOUND){return str;}return str.substring(0,pos);}"
190	"public void test(){if(pos==INDEX_NOT_FOUND){return str;}}"
191	"public void test(){if(isEmpty(str)){return str;}if(separator==null){return EMPTY;}int pos=str.indexOf(separator);if(pos==INDEX_NOT_FOUND){return EMPTY;}return str.substring(pos+separator.length());}"
192	"public void test(){if(isEmpty(str)||isEmpty(separator)){return str;}}"
193	"public void test(){if(isEmpty(str)||isEmpty(separator)){return str;}int pos=str.lastIndexOf(separator);if(pos==INDEX_NOT_FOUND){return str;}return str.substring(0,pos);}"
194	"public void test(){if(isEmpty(str)){return str;}if(isEmpty(separator)){return EMPTY;}int pos=str.lastIndexOf(separator);if(pos==INDEX_NOT_FOUND||pos==(str.length()-separator.length())){return EMPTY;}return str.substring(pos+separator.length());}"
195	"public void test(){if(pos==INDEX_NOT_FOUND||pos==(str.length()-separator.length())){return EMPTY;}}"
196	"public void test(){if(str==null||open==null||close==null){return null;}}"
197	"public void test(){if(str==null||open==null||close==null){return null;}int start=str.indexOf(open);if(start!=INDEX_NOT_FOUND){int end=str.indexOf(close,start+open.length());if(end!=INDEX_NOT_FOUND){return str.substring(start+open.length(),end);}}return null;}"
198	"public void test(){if(start!=INDEX_NOT_FOUND){int end=str.indexOf(close,start+open.length());if(end!=INDEX_NOT_FOUND){return str.substring(start+open.length(),end);}}}"
199	"public void test(){if(end!=INDEX_NOT_FOUND){return str.substring(start+open.length(),end);}}"
200	"public void test(){if(str==null||isEmpty(open)||isEmpty(close)){return null;}}"
201	"public void test(){if(str==null||isEmpty(open)||isEmpty(close)){return null;}int strLen=str.length();if(strLen==0){return ArrayUtils.EMPTY_STRING_ARRAY;}}"
202	"public void test(){int strLen=str.length();if(strLen==0){return ArrayUtils.EMPTY_STRING_ARRAY;}int closeLen=close.length();int openLen=open.length();List<String> list=new ArrayList<String>();}"
203	"public void test(){if(strLen==0){return ArrayUtils.EMPTY_STRING_ARRAY;}int closeLen=close.length();int openLen=open.length();List<String> list=new ArrayList<String>();int pos=0;}"
204	"public void test(){int start=str.indexOf(open,pos);if(start<0){break;}start+=openLen;int end=str.indexOf(close,start);}"
205	"public void test(){if(start<0){break;}start+=openLen;int end=str.indexOf(close,start);if(end<0){break;}list.add(str.substring(start,end));}"
206	"public void test(){int end=str.indexOf(close,start);if(end<0){break;}list.add(str.substring(start,end));pos=end+closeLen;}"
207	"public void test(){if(str==null){return null;}int len=str.length();if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}}"
208	"public void test(){if((separator==null)||(EMPTY.equals(separator))){return splitWorker(str,null,max,preserveAllTokens);}}"
209	"public void test(){if(len==0){return ArrayUtils.EMPTY_STRING_ARRAY;}if((separator==null)||(EMPTY.equals(separator))){return splitWorker(str,null,max,preserveAllTokens);}int separatorLength=separator.length();ArrayList<String> substrings=new ArrayList<String>();int numberOfSubstrings=0;}"
210	"public void test(){if(numberOfSubstrings==max){end=len;substrings.add(str.substring(beg));}else {substrings.add(str.substring(beg,end));beg=end+separatorLength;}}"
211	"public void test(){if(numberOfSubstrings==max){end=len;substrings.add(str.substring(beg));}else {substrings.add(EMPTY);}}"
212	"public void test(){if(str.charAt(i)==separatorChar){if(match||preserveAllTokens){list.add(str.substring(start,i));match=false;lastMatch=true;}start=++i;continue;}}"
213	"public void test(){if(match||preserveAllTokens){list.add(str.substring(start,i));match=false;lastMatch=true;}}"
214	"public void test(){if(match||(preserveAllTokens&&lastMatch)){list.add(str.substring(start,i));}}"
215	"public void test(){if(Character.isWhitespace(str.charAt(i))){if(match||preserveAllTokens){lastMatch=true;if(sizePlus1++==max){i=len;lastMatch=false;}list.add(str.substring(start,i));match=false;}start=++i;continue;}}"
216	"public void test(){if(match||preserveAllTokens){lastMatch=true;if(sizePlus1++==max){i=len;lastMatch=false;}list.add(str.substring(start,i));match=false;}}"
217	"public void test(){if(str.charAt(i)==sep){if(match||preserveAllTokens){lastMatch=true;if(sizePlus1++==max){i=len;lastMatch=false;}list.add(str.substring(start,i));match=false;}start=++i;continue;}}"
218	"public void test(){if(separatorChars.indexOf(str.charAt(i))>=0){if(match||preserveAllTokens){lastMatch=true;if(sizePlus1++==max){i=len;lastMatch=false;}list.add(str.substring(start,i));match=false;}start=++i;continue;}}"
219	"public void test(){if(str.length()==0){return ArrayUtils.EMPTY_STRING_ARRAY;}}"
220	"public void test(){if(str==null){return null;}if(str.length()==0){return ArrayUtils.EMPTY_STRING_ARRAY;}char[] c=str.toCharArray();List<String> list=new ArrayList<String>();int tokenStart=0;}"
221	"public void test(){for(int pos=tokenStart+1;pos<c.length;pos++){int type=Character.getType(c[pos]);if(type==currentType){continue;}if(camelCase&&type==Character.LOWERCASE_LETTER&&currentType==Character.UPPERCASE_LETTER){int newTokenStart=pos-1;if(newTokenStart!=tokenStart){list.add(new String(c,tokenStart,newTokenStart-tokenStart));tokenStart=newTokenStart;}}else {list.add(new String(c,tokenStart,pos-tokenStart));tokenStart=pos;}currentType=type;}}"
222	"public void test(){if(array==null){return null;}return join(array,separator,0,array.length);}"
223	"public void test(){if(isEmpty(str)){return str;}int sz=str.length();char[] chs=new char[sz];int count=0;}"
224	"public void test(){if(!Character.isWhitespace(str.charAt(i))){chs[count++]=str.charAt(i);}}"
225	"public void test(){if(count==sz){return str;}}"
226	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}}"
227	"public void test(){if(str.startsWith(remove)){return str.substring(remove.length());}}"
228	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}if(str.startsWith(remove)){return str.substring(remove.length());}return str;}"
229	"public void test(){if(startsWithIgnoreCase(str,remove)){return str.substring(remove.length());}}"
230	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}if(startsWithIgnoreCase(str,remove)){return str.substring(remove.length());}return str;}"
231	"public void test(){if(str.endsWith(remove)){return str.substring(0,str.length()-remove.length());}}"
232	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}if(str.endsWith(remove)){return str.substring(0,str.length()-remove.length());}return str;}"
233	"public void test(){if(endsWithIgnoreCase(str,remove)){return str.substring(0,str.length()-remove.length());}}"
234	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}if(endsWithIgnoreCase(str,remove)){return str.substring(0,str.length()-remove.length());}return str;}"
235	"public void test(){if(isEmpty(str)||isEmpty(remove)){return str;}return replace(str,remove,EMPTY,-1);}"
236	"public void test(){if(isEmpty(str)||str.indexOf(remove)==INDEX_NOT_FOUND){return str;}}"
237	"public void test(){if(isEmpty(str)||str.indexOf(remove)==INDEX_NOT_FOUND){return str;}char[] chars=str.toCharArray();int pos=0;for(int i=0;i<chars.length;i++){if(chars[i]!=remove){chars[pos++]=chars[i];}}return new String(chars,0,pos);}"
238	"public void test(){for(int i=0;i<chars.length;i++){if(chars[i]!=remove){chars[pos++]=chars[i];}}}"
239	"public void test(){int end=text.indexOf(searchString,start);if(end==INDEX_NOT_FOUND){return text;}int replLength=searchString.length();int increase=replacement.length()-replLength;increase=(increase<0?0:increase);}"
240	"public void test(){if(end==INDEX_NOT_FOUND){return text;}int replLength=searchString.length();int increase=replacement.length()-replLength;increase=(increase<0?0:increase);increase*=(max<0?16:(max>64?64:max));}"
241	"public void test(){increase*=(max<0?16:(max>64?64:max));StringBuilder buf=new StringBuilder(text.length()+increase);while(end!=INDEX_NOT_FOUND){buf.append(text.substring(start,end)).append(replacement);start=end+replLength;if(--max==0){break;}end=text.indexOf(searchString,start);}}"
242	"public void test(){int timeToLive=searchList==null?0:searchList.length;return replaceEach(text,searchList,replacementList,true,timeToLive);}"
243	"public void test(){if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){return text;}}"
244	"public void test(){if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){return text;}if(timeToLive<0){throw new IllegalStateException(""Aborting to protect against StackOverflowError - ""+""output of one loop is the input of another"");}int searchLength=searchList.length;int replacementLength=replacementList.length;if(searchLength!=replacementLength){throw new IllegalArgumentException(""Search and Replace array lengths don\'t match: ""+searchLength);}}"
245	"public void test(){if(timeToLive<0){throw new IllegalStateException(""Aborting to protect against StackOverflowError - ""+""output of one loop is the input of another"");}int searchLength=searchList.length;int replacementLength=replacementList.length;if(searchLength!=replacementLength){throw new IllegalArgumentException(""Search and Replace array lengths don\'t match: ""+searchLength);}boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];}"
246	"public void test(){if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){continue;}}"
247	"public void test(){for(int i=0;i<searchList.length;i++){if(searchList[i]==null||replacementList[i]==null){continue;}int greater=replacementList[i].length()-searchList[i].length();if(greater>0){increase+=3*greater;}}}"
248	"public void test(){for(int i=0;i<searchList.length;i++){if(searchList[i]==null||replacementList[i]==null){continue;}int greater=replacementList[i].length()-searchList[i].length();if(greater>0){increase+=3*greater;}}increase=Math.min(increase,text.length()/5);StringBuilder buf=new StringBuilder(text.length()+increase);}"
249	"public void test(){int textLength=text.length();for(int i=start;i<textLength;i++){buf.append(text.charAt(i));}String result=buf.toString();if(!repeat){return result;}}"
250	"public void test(){if(str==null){return null;}return str.replace(searchChar,replaceChar);}"
251	"public void test(){if(isEmpty(str)||isEmpty(searchChars)){return str;}}"
252	"public void test(){if(replaceChars==null){replaceChars=EMPTY;}boolean modified=false;int replaceCharsLength=replaceChars.length();int strLength=str.length();StringBuilder buf=new StringBuilder(strLength);}"
253	"public void test(){char ch=str.charAt(i);int index=searchChars.indexOf(ch);if(index>=0){modified=true;if(index<replaceCharsLength){buf.append(replaceChars.charAt(index));}}else {buf.append(ch);}}"
254	"public void test(){if(index<replaceCharsLength){buf.append(replaceChars.charAt(index));}}"
255	"public void test(){if(overlay==null){overlay=EMPTY;}int len=str.length();if(start<0){start=0;}}"
256	"public void test(){if(start>end){int temp=start;start=end;end=temp;}return new StringBuilder(len+start-end+overlay.length()+1).append(str.substring(0,start)).append(overlay).append(str.substring(end)).toString();}"
257	"public void test(){if(str.length()==1){char ch=str.charAt(0);if(ch==CharUtils.CR||ch==CharUtils.LF){return EMPTY;}return str;}}"
258	"public void test(){if(str.length()==1){char ch=str.charAt(0);if(ch==CharUtils.CR||ch==CharUtils.LF){return EMPTY;}return str;}int lastIdx=str.length()-1;char last=str.charAt(lastIdx);}"
259	"public void test(){int lastIdx=str.length()-1;char last=str.charAt(lastIdx);if(last==CharUtils.LF){if(str.charAt(lastIdx-1)==CharUtils.CR){lastIdx--;}}else if(last!=CharUtils.CR){lastIdx++;}}"
260	"public void test(){if(str.charAt(lastIdx-1)==CharUtils.CR){lastIdx--;}}"
261	"public void test(){if(last==CharUtils.LF){if(str.charAt(lastIdx-1)==CharUtils.CR){lastIdx--;}}else if(last!=CharUtils.CR){lastIdx++;}return str.substring(0,lastIdx);}"
262	"public void test(){if(str.endsWith(separator)){return str.substring(0,str.length()-separator.length());}}"
263	"public void test(){if(isEmpty(str)||separator==null){return str;}if(str.endsWith(separator)){return str.substring(0,str.length()-separator.length());}return str;}"
264	"public void test(){if(str==null){return null;}int strLen=str.length();if(strLen<2){return EMPTY;}}"
265	"public void test(){if(strLen<2){return EMPTY;}int lastIdx=strLen-1;String ret=str.substring(0,lastIdx);char last=str.charAt(lastIdx);if(last==CharUtils.LF&&ret.charAt(lastIdx-1)==CharUtils.CR){return ret.substring(0,lastIdx-1);}}"
266	"public void test(){int lastIdx=strLen-1;String ret=str.substring(0,lastIdx);char last=str.charAt(lastIdx);if(last==CharUtils.LF&&ret.charAt(lastIdx-1)==CharUtils.CR){return ret.substring(0,lastIdx-1);}return ret;}"
267	"public void test(){if(last==CharUtils.LF&&ret.charAt(lastIdx-1)==CharUtils.CR){return ret.substring(0,lastIdx-1);}}"
268	"public void test(){if(repeat<=0){return EMPTY;}int inputLength=str.length();if(repeat==1||inputLength==0){return str;}}"
269	"public void test(){if(repeat==1||inputLength==0){return str;}}"
270	"public void test(){if(inputLength==1&&repeat<=PAD_LIMIT){return repeat(str.charAt(0),repeat);}}"
271	"public void test(){if(str==null||separator==null){return repeat(str,repeat);}else {String result=repeat(str+separator,repeat);return removeEnd(result,separator);}}"
272	"public void test(){if(str==null){return null;}int pads=size-str.length();if(pads<=0){return str;}if(pads>PAD_LIMIT){return rightPad(str,size,String.valueOf(padChar));}return str.concat(repeat(padChar,pads));}"
273	"public void test(){if(pads<=0){return str;}}"
274	"public void test(){if(pads>PAD_LIMIT){return rightPad(str,size,String.valueOf(padChar));}}"
275	"public void test(){if(str==null){return null;}if(isEmpty(padStr)){padStr="" "";}int padLen=padStr.length();int strLen=str.length();int pads=size-strLen;}"
276	"public void test(){if(isEmpty(padStr)){padStr="" "";}int padLen=padStr.length();int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}}"
277	"public void test(){if(padLen==1&&pads<=PAD_LIMIT){return rightPad(str,size,padStr.charAt(0));}}"
278	"public void test(){if(pads<padLen){return str.concat(padStr.substring(0,pads));}else {char[] padding=new char[pads];char[] padChars=padStr.toCharArray();for(int i=0;i<pads;i++){padding[i]=padChars[i%padLen];}return str.concat(new String(padding));}}"
279	"public void test(){if(str==null){return null;}int pads=size-str.length();if(pads<=0){return str;}if(pads>PAD_LIMIT){return leftPad(str,size,String.valueOf(padChar));}return repeat(padChar,pads).concat(str);}"
280	"public void test(){if(pads>PAD_LIMIT){return leftPad(str,size,String.valueOf(padChar));}}"
281	"public void test(){if(padLen==1&&pads<=PAD_LIMIT){return leftPad(str,size,padStr.charAt(0));}}"
282	"public void test(){if(pads<padLen){return padStr.substring(0,pads).concat(str);}else {char[] padding=new char[pads];char[] padChars=padStr.toCharArray();for(int i=0;i<pads;i++){padding[i]=padChars[i%padLen];}return new String(padding).concat(str);}}"
283	"public void test(){if(str==null||size<=0){return str;}}"
284	"public void test(){if(str==null||size<=0){return str;}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}}"
285	"public void test(){int pads=size-strLen;if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padChar);str=rightPad(str,size,padChar);return str;}"
286	"public void test(){if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padChar);str=rightPad(str,size,padChar);return str;}"
287	"public void test(){{if(str==null||size<=0){return str;}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padChar);str=rightPad(str,size,padChar);return str;}}"
288	"public void test(){if(str==null||size<=0){return str;}if(isEmpty(padStr)){padStr="" "";}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}}"
289	"public void test(){int pads=size-strLen;if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padStr);str=rightPad(str,size,padStr);return str;}"
290	"public void test(){if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padStr);str=rightPad(str,size,padStr);return str;}"
291	"public void test(){{if(str==null||size<=0){return str;}if(isEmpty(padStr)){padStr="" "";}int strLen=str.length();int pads=size-strLen;if(pads<=0){return str;}str=leftPad(str,strLen+pads/2,padStr);str=rightPad(str,size,padStr);return str;}}"
292	"public void test(){if(str==null){return null;}return str.toUpperCase();}"
293	"public void test(){if(str==null){return null;}return str.toUpperCase(locale);}"
294	"public void test(){if(str==null){return null;}return str.toLowerCase();}"
295	"public void test(){if(str==null){return null;}return str.toLowerCase(locale);}"
296	"public void test(){int strLen;if(str==null||(strLen=str.length())==0){return str;}return new StringBuilder(strLen).append(Character.toTitleCase(str.charAt(0))).append(str.substring(1)).toString();}"
297	"public void test(){int strLen;if(str==null||(strLen=str.length())==0){return str;}return new StringBuilder(strLen).append(Character.toLowerCase(str.charAt(0))).append(str.substring(1)).toString();}"
298	"public void test(){if(StringUtils.isEmpty(str)){return str;}}"
299	"public void test(){{if(StringUtils.isEmpty(str)){return str;}char[] buffer=str.toCharArray();for(int i=0;i<buffer.length;i++){char ch=buffer[i];if(Character.isUpperCase(ch)){buffer[i]=Character.toLowerCase(ch);}else if(Character.isTitleCase(ch)){buffer[i]=Character.toLowerCase(ch);}else if(Character.isLowerCase(ch)){buffer[i]=Character.toUpperCase(ch);}}return new String(buffer);}}"
300	"public void test(){for(int i=0;i<buffer.length;i++){char ch=buffer[i];if(Character.isUpperCase(ch)){buffer[i]=Character.toLowerCase(ch);}else if(Character.isTitleCase(ch)){buffer[i]=Character.toLowerCase(ch);}else if(Character.isLowerCase(ch)){buffer[i]=Character.toUpperCase(ch);}}}"
301	"public void test(){if(cs==null||cs.length()==0){return false;}}"
302	"public void test(){if(cs==null||cs.length()==0){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(Character.isLetter(cs.charAt(i))==false){return false;}}return true;}"
303	"public void test(){if(Character.isLetter(cs.charAt(i))==false){return false;}}"
304	"public void test(){if(cs==null){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if((Character.isLetter(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}return true;}"
305	"public void test(){if((Character.isLetter(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}"
306	"public void test(){if(cs==null||cs.length()==0){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(Character.isLetterOrDigit(cs.charAt(i))==false){return false;}}return true;}"
307	"public void test(){if(Character.isLetterOrDigit(cs.charAt(i))==false){return false;}}"
308	"public void test(){if(cs==null){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if((Character.isLetterOrDigit(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}return true;}"
309	"public void test(){if((Character.isLetterOrDigit(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}"
310	"public void test(){if(cs==null){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(CharUtils.isAsciiPrintable(cs.charAt(i))==false){return false;}}return true;}"
311	"public void test(){if(CharUtils.isAsciiPrintable(cs.charAt(i))==false){return false;}}"
312	"public void test(){if(cs==null||cs.length()==0){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(Character.isDigit(cs.charAt(i))==false){return false;}}return true;}"
313	"public void test(){if(Character.isDigit(cs.charAt(i))==false){return false;}}"
314	"public void test(){if(cs==null){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if((Character.isDigit(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}return true;}"
315	"public void test(){if((Character.isDigit(cs.charAt(i))==false)&&(cs.charAt(i)!=' ')){return false;}}"
316	"public void test(){if(cs==null){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if((Character.isWhitespace(cs.charAt(i))==false)){return false;}}return true;}"
317	"public void test(){if(cs==null||isEmpty(cs)){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(Character.isLowerCase(cs.charAt(i))==false){return false;}}return true;}"
318	"public void test(){if(Character.isLowerCase(cs.charAt(i))==false){return false;}}"
319	"public void test(){if(cs==null||isEmpty(cs)){return false;}int sz=cs.length();for(int i=0;i<sz;i++){if(Character.isUpperCase(cs.charAt(i))==false){return false;}}return true;}"
320	"public void test(){if(Character.isUpperCase(cs.charAt(i))==false){return false;}}"
321	"public void test(){if(str==null){return null;}return new StringBuilder(str).reverse().toString();}"
322	"public void test(){if(str==null){return null;}String[] strs=split(str,separatorChar);ArrayUtils.reverse(strs);return join(strs,separatorChar);}"
323	"public void test(){if(str.length()<=maxWidth){return str;}}"
324	"public void test(){if(offset>str.length()){offset=str.length();}}"
325	"public void test(){if((str.length()-offset)<(maxWidth-3)){offset=str.length()-(maxWidth-3);}}"
326	"public void test(){if(offset<=4){return str.substring(0,maxWidth-3)+abrevMarker;}}"
327	"public void test(){if((offset+(maxWidth-3))<str.length()){return abrevMarker+abbreviate(str.substring(offset),maxWidth-3);}}"
328	"public void test(){if(maxWidth<7){throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");}if((offset+(maxWidth-3))<str.length()){return abrevMarker+abbreviate(str.substring(offset),maxWidth-3);}return abrevMarker+str.substring(str.length()-(maxWidth-3));}"
329	"public void test(){if(isEmpty(str)||isEmpty(middle)){return str;}}"
330	"public void test(){if(length>=str.length()||length<(middle.length()+2)){return str;}}"
331	"public void test(){if(isEmpty(str)||isEmpty(middle)){return str;}if(length>=str.length()||length<(middle.length()+2)){return str;}int targetSting=length-middle.length();int startOffset=targetSting/2+targetSting%2;int endOffset=str.length()-targetSting/2;}"
332	"public void test(){StringBuilder builder=new StringBuilder(length);builder.append(str.substring(0,startOffset));builder.append(middle);builder.append(str.substring(endOffset));return builder.toString();}"
333	"public void test(){for(i=0;i<cs1.length()&&i<cs2.length();++i){if(cs1.charAt(i)!=cs2.charAt(i)){break;}}}"
334	"public void test(){if(cs1.charAt(i)!=cs2.charAt(i)){break;}}"
335	"public void test(){if(i<cs2.length()||i<cs1.length()){return i;}}"
336	"public void test(){if(css==null||css.length<=1){return INDEX_NOT_FOUND;}}"
337	"public void test(){if(css[i]==null){anyStringNull=true;shortestStrLen=0;}else {allStringsNull=false;shortestStrLen=Math.min(css[i].length(),shortestStrLen);longestStrLen=Math.max(css[i].length(),longestStrLen);}}"
338	"public void test(){for(int stringPos=0;stringPos<shortestStrLen;stringPos++){char comparisonChar=css[0].charAt(stringPos);for(int arrayPos=1;arrayPos<arrayLen;arrayPos++){if(css[arrayPos].charAt(stringPos)!=comparisonChar){firstDiff=stringPos;break;}}if(firstDiff!=-1){break;}}}"
339	"public void test(){if(css[arrayPos].charAt(stringPos)!=comparisonChar){firstDiff=stringPos;break;}}"
340	"public void test(){if(strs==null||strs.length==0){return EMPTY;}}"
341	"public void test(){if(s==null||t==null){throw new IllegalArgumentException(""Strings must not be null"");}int n=s.length();int m=t.length();if(n==0){return m;}else if(m==0){return n;}}"
342	"public void test(){int n=s.length();int m=t.length();if(n==0){return m;}else if(m==0){return n;}}"
343	"public void test(){if(n>m){CharSequence tmp=s;s=t;t=tmp;n=m;m=t.length();}}"
344	"public void test(){t_j=t.charAt(j-1);d[0]=j;for(i=1;i<=n;i++){cost=s.charAt(i-1)==t_j?0:1;d[i]=Math.min(Math.min(d[i-1]+1,p[i]+1),p[i-1]+cost);}}"
345	"public void test(){for(i=1;i<=n;i++){cost=s.charAt(i-1)==t_j?0:1;d[i]=Math.min(Math.min(d[i-1]+1,p[i]+1),p[i-1]+cost);}}"
346	"public void test(){if(s==null||t==null){throw new IllegalArgumentException(""Strings must not be null"");}if(threshold<0){throw new IllegalArgumentException(""Threshold must not be negative"");}int n=s.length();int m=t.length();}"
347	"public void test(){int n=s.length();int m=t.length();if(n==0){return m<=threshold?m:-1;}else if(m==0){return n<=threshold?n:-1;}}"
348	"public void test(){char t_j=t.charAt(j-1);d[0]=j;int min=Math.max(1,j-threshold);int max=Math.min(n,j+threshold);if(min>max){return -1;}}"
349	"public void test(){if(s.charAt(i-1)==t_j){d[i]=p[i-1];}else {d[i]=1+Math.min(Math.min(d[i-1],p[i]),p[i-1]);}}"
350	"public void test(){if(prefix.length()>str.length()){return false;}}"
351	"public void test(){if(str==null||prefix==null){return (str==null&&prefix==null);}if(prefix.length()>str.length()){return false;}return CharSequenceUtils.regionMatches(str,ignoreCase,0,prefix,0,prefix.length());}"
352	"public void test(){if(StringUtils.startsWith(string,searchString)){return true;}}"
353	"public void test(){if(suffix.length()>str.length()){return false;}}"
354	"public void test(){if(str==null||suffix==null){return str==null&&suffix==null;}if(suffix.length()>str.length()){return false;}int strOffset=str.length()-suffix.length();return CharSequenceUtils.regionMatches(str,ignoreCase,strOffset,suffix,0,suffix.length());}"
355	"public void test(){if(str==null){return null;}return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll("" "");}"
356	"public void test(){for(int i=0;i<array.length;i++){Object object=array[i];if(object instanceof Map.Entry<?,?>){Map.Entry<?,?> entry=(Map.Entry<?,?>)object;map.put(entry.getKey(),entry.getValue());}else if(object instanceof Object[]){Object[] entry=(Object[])object;if(entry.length<2){throw new IllegalArgumentException(""Array element ""+i);}map.put(entry[0],entry[1]);}else {throw new IllegalArgumentException(""Array element ""+i);}}}"
357	"public void test(){if(entry.length<2){throw new IllegalArgumentException(""Array element ""+i);}}"
358	"public void test(){if(array==null||array.length==0){return EMPTY_OBJECT_ARRAY;}}"
359	"public void test(){if(array==null||array.length==0){return EMPTY_STRING_ARRAY;}}"
360	"public void test(){if(array==null||array.length==0){return EMPTY_LONG_ARRAY;}}"
361	"public void test(){if(array==null||array.length==0){return EMPTY_INT_ARRAY;}}"
362	"public void test(){if(array==null||array.length==0){return EMPTY_SHORT_ARRAY;}}"
363	"public void test(){if(array==null||array.length==0){return EMPTY_CHAR_ARRAY;}}"
364	"public void test(){if(array==null||array.length==0){return EMPTY_BYTE_ARRAY;}}"
365	"public void test(){if(array==null||array.length==0){return EMPTY_DOUBLE_ARRAY;}}"
366	"public void test(){if(array==null||array.length==0){return EMPTY_FLOAT_ARRAY;}}"
367	"public void test(){if(array==null||array.length==0){return EMPTY_BOOLEAN_ARRAY;}}"
368	"public void test(){if(array==null||array.length==0){return EMPTY_LONG_OBJECT_ARRAY;}}"
369	"public void test(){if(array==null||array.length==0){return EMPTY_INTEGER_OBJECT_ARRAY;}}"
370	"public void test(){if(array==null||array.length==0){return EMPTY_SHORT_OBJECT_ARRAY;}}"
371	"public void test(){if(array==null||array.length==0){return EMPTY_CHARACTER_OBJECT_ARRAY;}}"
372	"public void test(){if(array==null||array.length==0){return EMPTY_BYTE_OBJECT_ARRAY;}}"
373	"public void test(){if(array==null||array.length==0){return EMPTY_DOUBLE_OBJECT_ARRAY;}}"
374	"public void test(){if(array==null||array.length==0){return EMPTY_FLOAT_OBJECT_ARRAY;}}"
375	"public void test(){if(array==null||array.length==0){return EMPTY_BOOLEAN_OBJECT_ARRAY;}}"
376	"public void test(){if(endIndexExclusive>array.length){endIndexExclusive=array.length;}}"
377	"public void test(){if((array1==null&&array2!=null&&array2.length>0)||(array2==null&&array1!=null&&array1.length>0)){return false;}}"
378	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;Object tmp;}"
379	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;long tmp;}"
380	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;int tmp;}"
381	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;short tmp;}"
382	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;char tmp;}"
383	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;byte tmp;}"
384	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;double tmp;}"
385	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;float tmp;}"
386	"public void test(){if(array==null){return ;}int i=0;int j=array.length-1;boolean tmp;}"
387	"public void test(){for(int i=startIndex;i<array.length;i++){if(array[i]==null){return i;}}}"
388	"public void test(){for(int i=startIndex;i<array.length;i++){if(objectToFind.equals(array[i])){return i;}}}"
389	"public void test(){if(startIndex>=array.length){startIndex=array.length-1;}}"
390	"public void test(){for(int i=startIndex;i<array.length;i++){if(valueToFind==array[i]){return i;}}}"
391	"public void test(){for(int i=startIndex;i<array.length;i++){if(array[i]>=min&&array[i]<=max){return i;}}}"
392	"public void test(){if(array.length==0){return EMPTY_CHAR_ARRAY;}}"
393	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHAR_ARRAY;} final char[] result=new char[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].charValue();}return result;}"
394	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHAR_ARRAY;} final char[] result=new char[array.length];for(int i=0;i<array.length;i++){Character b=array[i];result[i]=(b==null?valueForNull:b.charValue());}}"
395	"public void test(){for(int i=0;i<array.length;i++){Character b=array[i];result[i]=(b==null?valueForNull:b.charValue());}}"
396	"public void test(){if(array.length==0){return EMPTY_CHARACTER_OBJECT_ARRAY;}}"
397	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_CHARACTER_OBJECT_ARRAY;} final Character[] result=new Character[array.length];for(int i=0;i<array.length;i++){result[i]=Character.valueOf(array[i]);}return result;}"
398	"public void test(){if(array.length==0){return EMPTY_LONG_ARRAY;}}"
399	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_ARRAY;} final long[] result=new long[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].longValue();}return result;}"
400	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_ARRAY;} final long[] result=new long[array.length];for(int i=0;i<array.length;i++){Long b=array[i];result[i]=(b==null?valueForNull:b.longValue());}}"
401	"public void test(){for(int i=0;i<array.length;i++){Long b=array[i];result[i]=(b==null?valueForNull:b.longValue());}}"
402	"public void test(){if(array.length==0){return EMPTY_LONG_OBJECT_ARRAY;}}"
403	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_LONG_OBJECT_ARRAY;} final Long[] result=new Long[array.length];for(int i=0;i<array.length;i++){result[i]=Long.valueOf(array[i]);}return result;}"
404	"public void test(){if(array.length==0){return EMPTY_INT_ARRAY;}}"
405	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INT_ARRAY;} final int[] result=new int[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].intValue();}return result;}"
406	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INT_ARRAY;} final int[] result=new int[array.length];for(int i=0;i<array.length;i++){Integer b=array[i];result[i]=(b==null?valueForNull:b.intValue());}}"
407	"public void test(){for(int i=0;i<array.length;i++){Integer b=array[i];result[i]=(b==null?valueForNull:b.intValue());}}"
408	"public void test(){if(array.length==0){return EMPTY_INTEGER_OBJECT_ARRAY;}}"
409	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_INTEGER_OBJECT_ARRAY;} final Integer[] result=new Integer[array.length];for(int i=0;i<array.length;i++){result[i]=Integer.valueOf(array[i]);}return result;}"
410	"public void test(){if(array.length==0){return EMPTY_SHORT_ARRAY;}}"
411	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_ARRAY;} final short[] result=new short[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].shortValue();}return result;}"
412	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_ARRAY;} final short[] result=new short[array.length];for(int i=0;i<array.length;i++){Short b=array[i];result[i]=(b==null?valueForNull:b.shortValue());}}"
413	"public void test(){for(int i=0;i<array.length;i++){Short b=array[i];result[i]=(b==null?valueForNull:b.shortValue());}}"
414	"public void test(){if(array.length==0){return EMPTY_SHORT_OBJECT_ARRAY;}}"
415	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_SHORT_OBJECT_ARRAY;} final Short[] result=new Short[array.length];for(int i=0;i<array.length;i++){result[i]=Short.valueOf(array[i]);}return result;}"
416	"public void test(){if(array.length==0){return EMPTY_BYTE_ARRAY;}}"
417	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_ARRAY;} final byte[] result=new byte[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].byteValue();}return result;}"
418	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_ARRAY;} final byte[] result=new byte[array.length];for(int i=0;i<array.length;i++){Byte b=array[i];result[i]=(b==null?valueForNull:b.byteValue());}}"
419	"public void test(){for(int i=0;i<array.length;i++){Byte b=array[i];result[i]=(b==null?valueForNull:b.byteValue());}}"
420	"public void test(){if(array.length==0){return EMPTY_BYTE_OBJECT_ARRAY;}}"
421	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BYTE_OBJECT_ARRAY;} final Byte[] result=new Byte[array.length];for(int i=0;i<array.length;i++){result[i]=Byte.valueOf(array[i]);}return result;}"
422	"public void test(){if(array.length==0){return EMPTY_DOUBLE_ARRAY;}}"
423	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_ARRAY;} final double[] result=new double[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].doubleValue();}return result;}"
424	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_ARRAY;} final double[] result=new double[array.length];for(int i=0;i<array.length;i++){Double b=array[i];result[i]=(b==null?valueForNull:b.doubleValue());}}"
425	"public void test(){for(int i=0;i<array.length;i++){Double b=array[i];result[i]=(b==null?valueForNull:b.doubleValue());}}"
426	"public void test(){if(array.length==0){return EMPTY_DOUBLE_OBJECT_ARRAY;}}"
427	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_DOUBLE_OBJECT_ARRAY;} final Double[] result=new Double[array.length];for(int i=0;i<array.length;i++){result[i]=Double.valueOf(array[i]);}return result;}"
428	"public void test(){if(array.length==0){return EMPTY_FLOAT_ARRAY;}}"
429	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_ARRAY;} final float[] result=new float[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].floatValue();}return result;}"
430	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_ARRAY;} final float[] result=new float[array.length];for(int i=0;i<array.length;i++){Float b=array[i];result[i]=(b==null?valueForNull:b.floatValue());}}"
431	"public void test(){for(int i=0;i<array.length;i++){Float b=array[i];result[i]=(b==null?valueForNull:b.floatValue());}}"
432	"public void test(){if(array.length==0){return EMPTY_FLOAT_OBJECT_ARRAY;}}"
433	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_FLOAT_OBJECT_ARRAY;} final Float[] result=new Float[array.length];for(int i=0;i<array.length;i++){result[i]=Float.valueOf(array[i]);}return result;}"
434	"public void test(){if(array.length==0){return EMPTY_BOOLEAN_ARRAY;}}"
435	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_ARRAY;} final boolean[] result=new boolean[array.length];for(int i=0;i<array.length;i++){result[i]=array[i].booleanValue();}return result;}"
436	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_ARRAY;} final boolean[] result=new boolean[array.length];for(int i=0;i<array.length;i++){Boolean b=array[i];result[i]=(b==null?valueForNull:b.booleanValue());}}"
437	"public void test(){for(int i=0;i<array.length;i++){Boolean b=array[i];result[i]=(b==null?valueForNull:b.booleanValue());}}"
438	"public void test(){if(array.length==0){return EMPTY_BOOLEAN_OBJECT_ARRAY;}}"
439	"public void test(){if(array==null){return null;}else if(array.length==0){return EMPTY_BOOLEAN_OBJECT_ARRAY;} final Boolean[] result=new Boolean[array.length];for(int i=0;i<array.length;i++){result[i]=(array[i]?Boolean.TRUE:Boolean.FALSE);}return result;}"
440	"public void test(){for(int i=0;i<array.length;i++){result[i]=(array[i]?Boolean.TRUE:Boolean.FALSE);}}"
441	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);} final Class<?> type1=array1.getClass().getComponentType(); @SuppressWarnings(""unchecked"") T[] joinedArray=(T[])Array.newInstance(type1,array1.length+array2.length);System.arraycopy(array1,0,joinedArray,0,array1.length);}"
442	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}boolean[] joinedArray=new boolean[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
443	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}char[] joinedArray=new char[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
444	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}byte[] joinedArray=new byte[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
445	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}short[] joinedArray=new short[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
446	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}int[] joinedArray=new int[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
447	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}long[] joinedArray=new long[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
448	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}float[] joinedArray=new float[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
449	"public void test(){if(array1==null){return clone(array2);}else if(array2==null){return clone(array1);}double[] joinedArray=new double[array1.length+array2.length];System.arraycopy(array1,0,joinedArray,0,array1.length);System.arraycopy(array2,0,joinedArray,array1.length,array2.length);return joinedArray;}"
450	"public void test(){if(array!=null){type=array.getClass();}else if(element!=null){type=element.getClass();}else {throw new IllegalArgumentException(""Arguments cannot both be null"");} @SuppressWarnings(""unchecked"") T[] newArray=(T[])copyArrayGrow1(array,type);newArray[newArray.length-1]=element;return newArray;}"
451	"public void test(){boolean[] newArray=(boolean[])copyArrayGrow1(array,Boolean.TYPE);newArray[newArray.length-1]=element;return newArray;}"
452	"public void test(){byte[] newArray=(byte[])copyArrayGrow1(array,Byte.TYPE);newArray[newArray.length-1]=element;return newArray;}"
453	"public void test(){char[] newArray=(char[])copyArrayGrow1(array,Character.TYPE);newArray[newArray.length-1]=element;return newArray;}"
454	"public void test(){double[] newArray=(double[])copyArrayGrow1(array,Double.TYPE);newArray[newArray.length-1]=element;return newArray;}"
455	"public void test(){float[] newArray=(float[])copyArrayGrow1(array,Float.TYPE);newArray[newArray.length-1]=element;return newArray;}"
456	"public void test(){int[] newArray=(int[])copyArrayGrow1(array,Integer.TYPE);newArray[newArray.length-1]=element;return newArray;}"
457	"public void test(){long[] newArray=(long[])copyArrayGrow1(array,Long.TYPE);newArray[newArray.length-1]=element;return newArray;}"
458	"public void test(){short[] newArray=(short[])copyArrayGrow1(array,Short.TYPE);newArray[newArray.length-1]=element;return newArray;}"
459	"public void test(){if(array==null){if(index!=0){throw new IndexOutOfBoundsException(""Index: ""+index);}Object joinedArray=Array.newInstance(clss,1);Array.set(joinedArray,0,element);return joinedArray;}int length=Array.getLength(array);if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
460	"public void test(){if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
461	"public void test(){int length=Array.getLength(array);if(index>length||index<0){throw new IndexOutOfBoundsException(""Index: ""+index);}Object result=Array.newInstance(clss,length+1);System.arraycopy(array,0,result,0,index);Array.set(result,index,element);}"
462	"public void test(){if(index<length){System.arraycopy(array,index,result,index+1,length-index);}}"
463	"public void test(){int length=getLength(array);if(index<0||index>=length){throw new IndexOutOfBoundsException(""Index: ""+index);}Object result=Array.newInstance(array.getClass().getComponentType(),length-1);System.arraycopy(array,0,result,0,index);if(index<length-1){System.arraycopy(array,index+1,result,index,length-index);}return result;}"
464	"public void test(){if(index<0||index>=length){throw new IndexOutOfBoundsException(""Index: ""+index);}}"
465	"public void test(){if(index<length-1){System.arraycopy(array,index+1,result,index,length-index);}}"
466	"public void test(){if(isEmpty(array)||isEmpty(values)){return clone(array);}HashMap<T,MutableInt> occurrences=new HashMap<T,MutableInt>(values.length);for(T v : values){MutableInt count=occurrences.get(v);if(count==null){occurrences.put(v,new MutableInt(1));}else {count.increment();}}}"
467	"public void test(){{Arrays.sort(indices);int i=indices.length;int prevIndex=length;while(--i>=0){int index=indices[i];if(index<0||index>=length){throw new IndexOutOfBoundsException(""Index: ""+index);}if(index>=prevIndex){continue;}diff++;prevIndex=index;}}}"
468	"public void test(){if(diff<length){int end=length;int dest=length-diff;for(int i=indices.length-1;i>=0;i--){int index=indices[i];if(end-index>1){int cp=end-index;dest-=cp;System.arraycopy(array,index+1,result,dest,cp);}end=index;}if(end>0){System.arraycopy(array,0,result,0,end);}}}"
469	"public void test(){int end=length;int dest=length-diff;for(int i=indices.length-1;i>=0;i--){int index=indices[i];if(end-index>1){int cp=end-index;dest-=cp;System.arraycopy(array,index+1,result,dest,cp);}end=index;}}"
470	"public void test(){for(int i=indices.length-1;i>=0;i--){int index=indices[i];if(end-index>1){int cp=end-index;dest-=cp;System.arraycopy(array,index+1,result,dest,cp);}end=index;}}"
471	"public void test(){if(array.length==0){throw new IllegalArgumentException(String.format(message,values));}}"
472	"public void test(){if(chars.length()==0){throw new IllegalArgumentException(String.format(message,values));}}"
473	"public void test(){for(int i=0;i<array.length;i++){if(array[i]==null){Object[] values2=ArrayUtils.add(values,Integer.valueOf(i));throw new IllegalArgumentException(String.format(message,values2));}}}"
474	"public void test(){if(index<0||index>=array.length){throw new IndexOutOfBoundsException(String.format(message,values));}}"
475	"public void test(){if(index<0||index>=chars.length()){throw new IndexOutOfBoundsException(String.format(message,values));}}"
476	"public void test(){if(version==null){return false;}return version.startsWith(versionPrefix);}"
477	"public void test(){if(osName==null||osVersion==null){return false;}return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);}"
478	"public void test(){if(osName==null){return false;}return osName.startsWith(osNamePrefix);}"
479	"public void test(){if(StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)){out.write(input.toString());}else {out.write(CSV_QUOTE);out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR+CSV_QUOTE_STR));out.write(CSV_QUOTE);}return input.length();}"
480	"public void test(){if(input.charAt(0)!=CSV_QUOTE||input.charAt(input.length()-1)!=CSV_QUOTE){out.write(input.toString());return input.length();}}"
481	"public void test(){if(input.charAt(0)!=CSV_QUOTE||input.charAt(input.length()-1)!=CSV_QUOTE){out.write(input.toString());return input.length();}String quoteless=input.subSequence(1,input.length()-1).toString();if(StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)){out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR+CSV_QUOTE_STR,CSV_QUOTE_STR));}else {out.write(input.toString());}}"
482	"public void test(){if(StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)){out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR+CSV_QUOTE_STR,CSV_QUOTE_STR));}else {out.write(input.toString());}return input.length();}"
483	"public void test(){for(int i=0;i<fields.length&&builder.comparison==0;i++){Field f=fields[i];if(!ArrayUtils.contains(excludeFields,f.getName())&&(f.getName().indexOf('$')==-1)){try{builder.append(f.get(lhs),f.get(rhs));}catch (IllegalAccessException e) {  throw new InternalError(""Unexpected IllegalAccessException"");}}}}"
484	"public void test(){if(lhs.length!=rhs.length){comparison=(lhs.length<rhs.length)?-1:+1;return this;}}"
485	"public void test(){List<String> list=new ArrayList<String>(array.length);for(Object e : array){if(e!=null){list.add(e.toString());}}return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);}"
486	"public void test(){for(int i=0;i<fields.length&&builder.isEquals;i++){Field f=fields[i];if(!ArrayUtils.contains(excludeFields,f.getName())&&(f.getName().indexOf('$')==-1)){try{builder.append(f.get(lhs),f.get(rhs));}catch (IllegalAccessException e) {  throw new InternalError(""Unexpected IllegalAccessException"");}}}}"
487	"public void test(){if(lhs.length!=rhs.length){this.setEquals(false);return this;}}"
488	"public void test(){int pos1=toString.indexOf(contentStart)+contentStart.length();int pos2=toString.lastIndexOf(contentEnd);if(pos1!=pos2&&pos1>=0&&pos2>=0){String data=toString.substring(pos1,pos2);if(fieldSeparatorAtStart){removeLastFieldSeparator(buffer);}buffer.append(data);appendFieldSeparator(buffer);}}"
489	"public void test(){{int len=buffer.length();int sepLen=fieldSeparator.length();if(len>0&&sepLen>0&&len>=sepLen){boolean match=true;for(int i=0;i<sepLen;i++){if(buffer.charAt(len-1)!=fieldSeparator.charAt(sepLen-1)){match=false;break;}}if(match){buffer.setLength(len-sepLen);}}}}"
490	"public void test(){if(buffer.charAt(len-1)!=fieldSeparator.charAt(sepLen-1)){match=false;break;}}"
491	"public void test(){for(int i=0;i<array.length;i++){Object item=array[i];if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}}"
492	"public void test(){{buffer.append(arrayStart);int length=Array.getLength(array);for(int i=0;i<length;i++){Object item=Array.get(array,i);if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}buffer.append(arrayEnd);}}"
493	"public void test(){for(int i=0;i<length;i++){Object item=Array.get(array,i);if(i>0){buffer.append(arraySeparator);}if(item==null){appendNullText(buffer,fieldName);}else {appendInternal(buffer,fieldName,item,arrayContentDetail);}}}"
494	"public void test(){for(int i=0;i<array.length;i++){if(i>0){buffer.append(arraySeparator);}appendDetail(buffer,fieldName,array[i]);}}"
495	"public void test(){if(str==null){return null;}int len=str.length();if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
496	"public void test(){if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
497	"public void test(){int len=str.length();if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}char ch0=str.charAt(0);char ch1=str.charAt(1);if(ch0<'a'||ch0>'z'||ch1<'a'||ch1>'z'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
498	"public void test(){if(len!=2&&len!=5&&len<7){throw new IllegalArgumentException(""Invalid locale format: ""+str);}char ch0=str.charAt(0);char ch1=str.charAt(1);if(ch0<'a'||ch0>'z'||ch1<'a'||ch1>'z'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
499	"public void test(){if(ch0<'a'||ch0>'z'||ch1<'a'||ch1>'z'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
500	"public void test(){if(str.charAt(2)!='_'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
501	"public void test(){if(str.charAt(2)!='_'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}char ch3=str.charAt(3);if(ch3=='_'){return new Locale(str.substring(0,2),"""",str.substring(4));}}"
502	"public void test(){if(ch3=='_'){return new Locale(str.substring(0,2),"""",str.substring(4));}}"
503	"public void test(){if(ch3=='_'){return new Locale(str.substring(0,2),"""",str.substring(4));}char ch4=str.charAt(4);if(ch3<'A'||ch3>'Z'||ch4<'A'||ch4>'Z'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
504	"public void test(){if(ch3<'A'||ch3>'Z'||ch4<'A'||ch4>'Z'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
505	"public void test(){if(len==5){return new Locale(str.substring(0,2),str.substring(3,5));}else {if(str.charAt(5)!='_'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}return new Locale(str.substring(0,2),str.substring(3,5),str.substring(6));}}"
506	"public void test(){if(str.charAt(5)!='_'){throw new IllegalArgumentException(""Invalid locale format: ""+str);}}"
507	"public void test(){if(locale.getVariant().length()>0){list.add(new Locale(locale.getLanguage(),locale.getCountry()));}}"
508	"public void test(){if(locale.getCountry().length()>0){list.add(new Locale(locale.getLanguage(),""""));}}"
509	"public void test(){if(countryCode.equals(locale.getCountry())&&locale.getVariant().length()==0){langs.add(locale);}}"
510	"public void test(){if(languageCode.equals(locale.getLanguage())&&locale.getCountry().length()!=0&&locale.getVariant().length()==0){countries.add(locale);}}"
511	"public void test(){int sz=cs.length();if(start<0){start=0;}for(int i=start;i<sz;i++){if(cs.charAt(i)==searchChar){return i;}}}"
512	"public void test(){if(cs.charAt(i)==searchChar){return i;}}"
513	"public void test(){int sz=cs.length();if(start<0){return -1;}if(start>=sz){start=sz-1;}}"
514	"public void test(){if(cs instanceof String){return ((String)cs).toCharArray();}else {int sz=cs.length();char[] array=new char[cs.length()];for(int i=0;i<sz;i++){array[i]=cs.charAt(i);}return array;}}"
515	"public void test(){if(cs instanceof String&&substring instanceof String){return ((String)cs).regionMatches(ignoreCase,thisStart,((String)substring),start,length);}else {return cs.toString().regionMatches(ignoreCase,thisStart,substring.toString(),start,length);}}"
516	"public void test(){if(setStrs.length==1){CharSet common=COMMON.get(setStrs[0]);if(common!=null){return common;}}}"
517	"public void test(){if(str==null){return ;}}"
518	"public void test(){if(remainder>=4&&str.charAt(pos)=='^'&&str.charAt(pos+2)=='-'){set.add(CharRange.isNotIn(str.charAt(pos+1),str.charAt(pos+3)));pos+=4;}else if(remainder>=3&&str.charAt(pos+1)=='-'){set.add(CharRange.isIn(str.charAt(pos),str.charAt(pos+2)));pos+=3;}else if(remainder>=2&&str.charAt(pos)=='^'){set.add(CharRange.isNot(str.charAt(pos+1)));pos+=2;}else {set.add(CharRange.is(str.charAt(pos)));pos+=1;}}"
519	"public void test(){if(remainder>=3&&str.charAt(pos+1)=='-'){set.add(CharRange.isIn(str.charAt(pos),str.charAt(pos+2)));pos+=3;}else if(remainder>=2&&str.charAt(pos)=='^'){set.add(CharRange.isNot(str.charAt(pos+1)));pos+=2;}else {set.add(CharRange.is(str.charAt(pos)));pos+=1;}}"
520	"public void test(){if(remainder>=2&&str.charAt(pos)=='^'){set.add(CharRange.isNot(str.charAt(pos+1)));pos+=2;}else {set.add(CharRange.is(str.charAt(pos)));pos+=1;}}"
521	"public void test(){if(StringUtils.isEmpty(str)){return null;}}"
522	"public void test(){if(StringUtils.isEmpty(str)){return null;}return Character.valueOf(str.charAt(0));}"
523	"public void test(){if(StringUtils.isEmpty(str)){throw new IllegalArgumentException(""The String must not be empty"");}}"
524	"public void test(){if(StringUtils.isEmpty(str)){throw new IllegalArgumentException(""The String must not be empty"");}return str.charAt(0);}"
525	"public void test(){if(StringUtils.isEmpty(str)){return defaultValue;}}"
526	"public void test(){if(StringUtils.isEmpty(str)){return defaultValue;}return str.charAt(0);}"
527	"public void test(){if(buffer.length()>0){buffer.append('\n');}}"
528	"public void test(){if(fromIndex>=throwables.length){return -1;}}"
529	"public void test(){for(int i=fromIndex;i<throwables.length;i++){if(type.isAssignableFrom(throwables[i].getClass())){return i;}}}"
530	"public void test(){for(int i=fromIndex;i<throwables.length;i++){if(type.equals(throwables[i].getClass())){return i;}}}"
531	"public void test(){if(throwable==null){return ArrayUtils.EMPTY_STRING_ARRAY;}Throwable throwables[]=getThrowables(throwable);int count=throwables.length;List<String> frames=new ArrayList<String>();List<String> nextTrace=getStackFrameList(throwables[count-1]);}"
532	"public void test(){if(at!=-1&&token.substring(0,at).trim().length()==0){traceStarted=true;list.add(token);}else if(traceStarted){break;}}"
533	"public void test(){if(m.getParameterTypes().length==0&&isValidAnnotationMemberType(m.getReturnType())){Object v1=m.invoke(a1);Object v2=m.invoke(a2);if(!memberEquals(m.getReturnType(),v1,v2)){return false;}}}"
534	"public void test(){if(m.getParameterTypes().length>0){continue;}}"
535	"public void test(){if(a1.length!=a2.length){return false;}}"
536	"public void test(){for(int i=0;i<a1.length;i++){if(!equals(a1[i],a2[i])){return false;}}}"
537	"public void test(){if(newLineStr==null){newLineStr=SystemUtils.LINE_SEPARATOR;}if(wrapLength<1){wrapLength=1;}int inputLineLength=str.length();int offset=0;StringBuilder wrappedLine=new StringBuilder(inputLineLength+32);}"
538	"public void test(){if(str.charAt(offset)==' '){offset++;continue;}}"
539	"public void test(){spaceToWrapAt=str.indexOf(' ',wrapLength+offset);if(spaceToWrapAt>=0){wrappedLine.append(str.substring(offset,spaceToWrapAt));wrappedLine.append(newLineStr);offset=spaceToWrapAt+1;}else {wrappedLine.append(str.substring(offset));offset=inputLineLength;}}"
540	"public void test(){if(spaceToWrapAt>=0){wrappedLine.append(str.substring(offset,spaceToWrapAt));wrappedLine.append(newLineStr);offset=spaceToWrapAt+1;}else {wrappedLine.append(str.substring(offset));offset=inputLineLength;}}"
541	"public void test(){int delimLen=delimiters==null?-1:delimiters.length;if(StringUtils.isEmpty(str)||delimLen==0){return str;}char[] buffer=str.toCharArray();boolean capitalizeNext=true;}"
542	"public void test(){if(StringUtils.isEmpty(str)||delimLen==0){return str;}}"
543	"public void test(){for(int i=0;i<buffer.length;i++){char ch=buffer[i];if(isDelimiter(ch,delimiters)){capitalizeNext=true;}else if(capitalizeNext){buffer[i]=Character.toTitleCase(ch);capitalizeNext=false;}}}"
544	"public void test(){int delimLen=(delimiters==null?-1:delimiters.length);if(StringUtils.isEmpty(str)||delimLen==0){return str;}str=str.toLowerCase();return capitalize(str,delimiters);}"
545	"public void test(){int delimLen=(delimiters==null?-1:delimiters.length);if(StringUtils.isEmpty(str)||delimLen==0){return str;}char[] buffer=str.toCharArray();boolean uncapitalizeNext=true;}"
546	"public void test(){for(int i=0;i<buffer.length;i++){char ch=buffer[i];if(isDelimiter(ch,delimiters)){uncapitalizeNext=true;}else if(uncapitalizeNext){buffer[i]=Character.toLowerCase(ch);uncapitalizeNext=false;}}}"
547	"public void test(){if(delimiters!=null&&delimiters.length==0){return """";}}"
548	"public void test(){if(StringUtils.isEmpty(str)){return str;}if(delimiters!=null&&delimiters.length==0){return """";}int strLen=str.length();char[] buf=new char[strLen/2+1];int count=0;}"
549	"public void test(){char ch=str.charAt(i);if(isDelimiter(ch,delimiters)){lastWasGap=true;}else if(lastWasGap){buf[count++]=ch;lastWasGap=false;}else {continue;}}"
550	"public void test(){if(substitute(buf,0,source.length())==false){return source;}}"
551	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);if(substitute(buf,0,length)==false){return source.substring(offset,offset+length);}return buf.toString();}"
552	"public void test(){if(substitute(buf,0,length)==false){return source.substring(offset,offset+length);}}"
553	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(source.length).append(source);substitute(buf,0,source.length);return buf.toString();}"
554	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);substitute(buf,0,length);return buf.toString();}"
555	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder(source.length()).append(source);substitute(buf,0,buf.length());return buf.toString();}"
556	"public void test(){if(source==null){return null;}StrBuilder buf=new StrBuilder().append(source);substitute(buf,0,buf.length());return buf.toString();}"
557	"public void test(){if(source==null){return false;}return replaceIn(source,0,source.length());}"
558	"public void test(){if(source==null){return false;}StrBuilder buf=new StrBuilder(length).append(source,offset,length);if(substitute(buf,0,length)==false){return false;}source.replace(offset,offset+length,buf.toString());return true;}"
559	"public void test(){if(substitute(buf,0,length)==false){return false;}}"
560	"public void test(){if(source==null){return false;}return substitute(source,0,source.length());}"
561	"public void test(){if(source==null){return false;}return substitute(source,offset,length);}"
562	"public void test(){if(isEnableSubstitutionInVariables()){StrBuilder bufName=new StrBuilder(varName);substitute(bufName,0,bufName.length());varName=bufName.toString();}}"
563	"public void test(){if(priorVariables==null){priorVariables=new ArrayList<String>();priorVariables.add(new String(chars,offset,length));}}"
564	"public void test(){checkTokenized();return tokens.length;}"
565	"public void test(){checkTokenized();List<String> list=new ArrayList<String>(tokens.length);for(String element : tokens){list.add(element);}return list;}"
566	"public void test(){checkTokenized();return tokenPos<tokens.length;}"
567	"public void test(){if(chars==null){List<String> split=tokenize(null,0,0);tokens=split.toArray(new String[split.size()]);}else {List<String> split=tokenize(chars,0,chars.length);tokens=split.toArray(new String[split.size()]);}}"
568	"public void test(){if(tok==null||tok.length()==0){if(isIgnoreEmptyTokens()){return ;}if(isEmptyTokenAsNull()){tok=null;}}}"
569	"public void test(){if(chars==null||chars.length==0){return NONE_MATCHER;}}"
570	"public void test(){if(chars.length==1){return new CharMatcher(chars[0]);}}"
571	"public void test(){if(chars==null||chars.length()==0){return NONE_MATCHER;}}"
572	"public void test(){if(chars.length()==1){return new CharMatcher(chars.charAt(0));}}"
573	"public void test(){if(StringUtils.isEmpty(str)){return NONE_MATCHER;}}"
574	"public void test(){if(StringUtils.isEmpty(str)){return NONE_MATCHER;}return new StringMatcher(str);}"
575	"public void test(){int len=chars.length;if(pos+len>bufferEnd){return 0;}for(int i=0;i<chars.length;i++,pos++){if(chars[i]!=buffer[pos]){return 0;}}return len;}"
576	"public void test(){for(int i=0;i<chars.length;i++,pos++){if(chars[i]!=buffer[pos]){return 0;}}}"
577	"public void test(){Validate.isTrue(ellipsis==null||precision<0||ellipsis.length()<=precision,""Specified ellipsis \'%1$s\' exceeds precision of %2$s"",ellipsis,Integer.valueOf(precision));StringBuilder buf=new StringBuilder(seq);if(precision>=0&&precision<seq.length()){CharSequence _ellipsis=ObjectUtils.defaultIfNull(ellipsis,StringUtils.EMPTY);buf.replace(precision-_ellipsis.length(),seq.length(),_ellipsis.toString());}}"
578	"public void test(){if(precision>=0&&precision<seq.length()){CharSequence _ellipsis=ObjectUtils.defaultIfNull(ellipsis,StringUtils.EMPTY);buf.replace(precision-_ellipsis.length(),seq.length(),_ellipsis.toString());}}"
579	"public void test(){if(input==null){return null;}try{StringWriter writer=new StringWriter(input.length()*2);translate(input,writer);return writer.toString();}catch (IOException ioe) {  throw new RuntimeException(ioe);}}"
580	"public void test(){if(out==null){throw new IllegalArgumentException(""The Writer must not be null"");}if(input==null){return ;}int pos=0;int len=input.length();}"
581	"public void test(){if(consumed==0){char[] c=Character.toChars(Character.codePointAt(input,pos));out.write(c);pos+=c.length;continue;}}"
582	"public void test(){CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length+1];newArray[0]=this;System.arraycopy(translators,0,newArray,1,translators.length);return new AggregateTranslator(newArray);}"
583	"public void test(){String[][] newarray=new String[array.length][2];for(int i=0;i<array.length;i++){newarray[i][0]=array[i][1];newarray[i][1]=array[i][0];}return newarray;}"
584	"public void test(){for(CharSequence[] seq : lookup){this.lookupMap.put(seq[0],seq[1]);int sz=seq[0].length();if(sz<_shortest){_shortest=sz;}if(sz>_longest){_longest=sz;}}}"
585	"public void test(){if(index+longest>input.length()){max=input.length()-index;}}"
586	"public void test(){if(input.charAt(index)=='\\'&&index<(input.length()-1)&&Character.isDigit(input.charAt(index+1))){int start=index+1;int end=index+2;while(end<input.length()&&Character.isDigit(input.charAt(end))){end++;if(Integer.parseInt(input.subSequence(start,end).toString(),10)>OCTAL_MAX){end--;break;}}out.write(Integer.parseInt(input.subSequence(start,end).toString(),8));return 1+end-start;}}"
587	"public void test(){while(end<input.length()&&Character.isDigit(input.charAt(end))){end++;if(Integer.parseInt(input.subSequence(start,end).toString(),10)>OCTAL_MAX){end--;break;}}}"
588	"public void test(){if((index+i<input.length())&&(input.charAt(index+i)=='+')){i++;}}"
589	"public void test(){if((index+i<=input.length())){CharSequence unicode=input.subSequence(index+i,index+i);try{int value=Integer.parseInt(unicode.toString(),16);out.write((char)value);}catch (NumberFormatException nfe) {  throw new IllegalArgumentException(""Unable to parse unicode value: "" + unicode,nfe);}return i+4;}else {throw new IllegalArgumentException(""Less than 4 hex digits in unicode value: \'""+input.subSequence(index,input.length()));}}"
590	"public void test(){if(options.length>0){this.options=EnumSet.copyOf(Arrays.asList(options));}else {this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));}}"
591	"public void test(){boolean isHex=false;char firstChar=input.charAt(start);if(firstChar=='x'||firstChar=='X'){start++;isHex=true;if(start==seqEnd){return 0;}}}"
592	"public void test(){while(end<seqEnd&&((input.charAt(end)>='0'&&input.charAt(end)<='9')||(input.charAt(end)>='a'&&input.charAt(end)<='f'))){end++;}boolean semiNext=(end!=seqEnd)&&(input.charAt(end)==';');if(!semiNext){if(isSet(OPTION.semiColonRequired)){return 0;}else if(isSet(OPTION.errorIfNoSemiColon)){throw new IllegalArgumentException(""Semi-colon required at end of numeric entity"");}}}"
593	"public void test(){if(str==null){buffer=new char[CAPACITY];}else {buffer=new char[str.length()+CAPACITY];append(str);}}"
594	"public void test(){if(nullText!=null&&nullText.length()==0){nullText=null;}}"
595	"public void test(){if(length<0){throw new StringIndexOutOfBoundsException(length);}}"
596	"public void test(){if(length<size){size=length;}else if(length>size){ensureCapacity(length);int oldEnd=size;int newEnd=length;size=length;for(int i=oldEnd;i<newEnd;i++){buffer[i]='\0';}}}"
597	"public void test(){if(length>size){ensureCapacity(length);int oldEnd=size;int newEnd=length;size=length;for(int i=oldEnd;i<newEnd;i++){buffer[i]='\0';}}}"
598	"public void test(){if(capacity>buffer.length){char[] old=buffer;buffer=new char[capacity*2];System.arraycopy(old,0,buffer,0,size);}}"
599	"public void test(){if(buffer.length>length()){char[] old=buffer;buffer=new char[length()];System.arraycopy(old,0,buffer,0,size);}}"
600	"public void test(){if(index<0||index>=length()){throw new StringIndexOutOfBoundsException(index);}}"
601	"public void test(){int len=length();if(destination==null||destination.length<len){destination=new char[len];}System.arraycopy(buffer,0,destination,0,len);return destination;}"
602	"public void test(){if(destination==null||destination.length<len){destination=new char[len];}}"
603	"public void test(){if(endIndex<0||endIndex>length()){throw new StringIndexOutOfBoundsException(endIndex);}}"
604	"public void test(){if(seq==null){return appendNull();}return append(seq.toString(),startIndex,length);}"
605	"public void test(){if(str==null){return appendNull();}}"
606	"public void test(){if(str==null){return appendNull();}int strLen=str.length();if(strLen>0){int len=length();ensureCapacity(len+strLen);str.getChars(0,strLen,buffer,len);size+=strLen;}}"
607	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);str.getChars(0,strLen,buffer,len);size+=strLen;}}"
608	"public void test(){if(startIndex<0||startIndex>str.length()){throw new StringIndexOutOfBoundsException(""startIndex must be valid"");}}"
609	"public void test(){if(length<0||(startIndex+length)>str.length()){throw new StringIndexOutOfBoundsException(""length must be valid"");}}"
610	"public void test(){if(length>0){int len=length();ensureCapacity(len+length);str.getChars(startIndex,startIndex+length,buffer,len);size+=length;}}"
611	"public void test(){if(str==null){return appendNull();}int strLen=str.length();if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(str.buffer,0,buffer,len,strLen);size+=strLen;}}"
612	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(str.buffer,0,buffer,len,strLen);size+=strLen;}}"
613	"public void test(){if(chars==null){return appendNull();}int strLen=chars.length;if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(chars,0,buffer,len,strLen);size+=strLen;}}"
614	"public void test(){if(strLen>0){int len=length();ensureCapacity(len+strLen);System.arraycopy(chars,0,buffer,len,strLen);size+=strLen;}}"
615	"public void test(){if(startIndex<0||startIndex>chars.length){throw new StringIndexOutOfBoundsException(""Invalid startIndex: ""+length);}}"
616	"public void test(){if(length<0||(startIndex+length)>chars.length){throw new StringIndexOutOfBoundsException(""Invalid length: ""+length);}}"
617	"public void test(){if(length>0){int len=length();ensureCapacity(len+length);System.arraycopy(chars,startIndex,buffer,len,length);size+=length;}}"
618	"public void test(){int len=length();ensureCapacity(len+1);buffer[size++]=ch;return this;}"
619	"public void test(){if(array!=null&&array.length>0){for(Object element : array){append(element);}}}"
620	"public void test(){if(array!=null&&array.length>0){separator=(separator==null?"""":separator);append(array[0]);for(int i=1;i<array.length;i++){append(separator);append(array[i]);}}}"
621	"public void test(){String str=isEmpty()?defaultIfEmpty:standard;if(str!=null){append(str);}return this;}"
622	"public void test(){if(str!=null){append(str);}}"
623	"public void test(){if(length>=0){ensureCapacity(size+length);for(int i=0;i<length;i++){buffer[size++]=padChar;}}}"
624	"public void test(){ensureCapacity(size+width);String str=(obj==null?getNullText():obj.toString());if(str==null){str="""";}int strLen=str.length();}"
625	"public void test(){if(str==null){str="""";}}"
626	"public void test(){if(strLen>=width){str.getChars(strLen-width,strLen,buffer,size);}else {int padLen=width-strLen;for(int i=0;i<padLen;i++){buffer[size+i]=padChar;}str.getChars(0,strLen,buffer,size+padLen);}}"
627	"public void test(){if(strLen>=width){str.getChars(0,width,buffer,size);}else {int padLen=width-strLen;str.getChars(0,strLen,buffer,size);for(int i=0;i<padLen;i++){buffer[size+strLen]=padChar;}}}"
628	"public void test(){if(str==null){str=nullText;}}"
629	"public void test(){if(str==null){str=nullText;}int strLen=(str==null?0:str.length());if(strLen>0){int newSize=size+strLen;ensureCapacity(newSize);System.arraycopy(buffer,index,buffer,index+strLen,size-index);size=newSize;str.getChars(0,strLen,buffer,index);}}"
630	"public void test(){if(strLen>0){int newSize=size+strLen;ensureCapacity(newSize);System.arraycopy(buffer,index,buffer,index+strLen,size-index);size=newSize;str.getChars(0,strLen,buffer,index);}}"
631	"public void test(){if(chars==null){return insert(index,nullText);}int len=chars.length;if(len>0){ensureCapacity(size+len);System.arraycopy(buffer,index,buffer,index+len,size-index);System.arraycopy(chars,0,buffer,index,len);size+=len;}}"
632	"public void test(){if(offset<0||offset>chars.length){throw new StringIndexOutOfBoundsException(""Invalid offset: ""+offset);}}"
633	"public void test(){if(length<0||offset+length>chars.length){throw new StringIndexOutOfBoundsException(""Invalid length: ""+length);}}"
634	"public void test(){if(length>0){ensureCapacity(size+length);System.arraycopy(buffer,index,buffer,index+length,size-index);System.arraycopy(chars,offset,buffer,index,length);size+=length;}}"
635	"public void test(){int len=(str==null?0:str.length());if(len>0){int index=indexOf(str,0);while(index>=0){deleteImpl(index,index+len,len);index=indexOf(str,index);}}return this;}"
636	"public void test(){if(len>0){int index=indexOf(str,0);while(index>=0){deleteImpl(index,index+len,len);index=indexOf(str,index);}}}"
637	"public void test(){int len=(str==null?0:str.length());if(len>0){int index=indexOf(str,0);if(index>=0){deleteImpl(index,index+len,len);}}return this;}"
638	"public void test(){if(len>0){int index=indexOf(str,0);if(index>=0){deleteImpl(index,index+len,len);}}}"
639	"public void test(){endIndex=validateRange(startIndex,endIndex);int insertLen=(replaceStr==null?0:replaceStr.length());replaceImpl(startIndex,endIndex,endIndex-startIndex,replaceStr,insertLen);return this;}"
640	"public void test(){int searchLen=(searchStr==null?0:searchStr.length());if(searchLen>0){int replaceLen=(replaceStr==null?0:replaceStr.length());int index=indexOf(searchStr,0);while(index>=0){replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);index=indexOf(searchStr,index+replaceLen);}}return this;}"
641	"public void test(){if(searchLen>0){int replaceLen=(replaceStr==null?0:replaceStr.length());int index=indexOf(searchStr,0);while(index>=0){replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);index=indexOf(searchStr,index+replaceLen);}}}"
642	"public void test(){int searchLen=(searchStr==null?0:searchStr.length());if(searchLen>0){int index=indexOf(searchStr,0);if(index>=0){int replaceLen=(replaceStr==null?0:replaceStr.length());replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);}}return this;}"
643	"public void test(){if(index>=0){int replaceLen=(replaceStr==null?0:replaceStr.length());replaceImpl(index,index+searchLen,searchLen,replaceStr,replaceLen);}}"
644	"public void test(){{if(matcher==null||size==0){return this;}int replaceLen=(replaceStr==null?0:replaceStr.length());char[] buf=buffer;for(int i=from;i<to&&replaceCount!=0;i++){int removeLen=matcher.isMatch(buf,i,from,to);if(removeLen>0){replaceImpl(i,i+removeLen,removeLen,replaceStr,replaceLen);to=to-removeLen+replaceLen;i=i+replaceLen-1;if(replaceCount>0){replaceCount--;}}}return this;}}"
645	"public void test(){if(str==null){return false;}}"
646	"public void test(){if(str==null){return false;}int len=str.length();if(len==0){return true;}}"
647	"public void test(){if(buffer[i]!=str.charAt(i)){return false;}}"
648	"public void test(){if(buffer[pos]!=str.charAt(i)){return false;}}"
649	"public void test(){if(length<=0){return """";}else if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,0,length);}}"
650	"public void test(){if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,0,length);}}"
651	"public void test(){if(length<=0){return """";}else if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,size-length,length);}}"
652	"public void test(){if(length>=size){return new String(buffer,0,size);}else {return new String(buffer,size-length,length);}}"
653	"public void test(){if(length<=0||index>=size){return """";}}"
654	"public void test(){if(size<=index+length){return new String(buffer,index,size-index);}else {return new String(buffer,index,length);}}"
655	"public void test(){if(str==null||startIndex>=size){return -1;}}"
656	"public void test(){if(str==null||startIndex>=size){return -1;}int strLen=str.length();if(strLen==1){return indexOf(str.charAt(0),startIndex);}}"
657	"public void test(){if(strLen==1){return indexOf(str.charAt(0),startIndex);}}"
658	"public void test(){if(str.charAt(j)!=thisBuf[i+j]){continue outer;}}"
659	"public void test(){if(str==null||startIndex<0){return -1;}}"
660	"public void test(){if(strLen==1){return lastIndexOf(str.charAt(0),startIndex);}}"
661	"public void test(){if(str.charAt(j)!=buffer[i+j]){continue outer;}}"
662	"public void test(){String str=super.getContent();if(str==null){return this.toString();}else {return str;}}"
663	"public void test(){if(str==null){return this.toString();}else {return str;}}"
664	"public void test(){if(ready()==false){return -1;}return this.charAt(pos++);}"
665	"public void test(){if(off<0||len<0||off>b.length||(off+len)>b.length||(off+len)<0){throw new IndexOutOfBoundsException();}}"
666	"public void test(){char c=pattern.charAt(pos.getIndex());if(Character.isWhitespace(c)){seekNonWs(pattern,pos);c=pattern.charAt(pos.getIndex());if(c!=START_FMT&&c!=END_FE){error=true;continue;}}}"
667	"public void test(){if(Character.isWhitespace(c)){seekNonWs(pattern,pos);c=pattern.charAt(pos.getIndex());if(c!=START_FMT&&c!=END_FE){error=true;continue;}}}"
668	"public void test(){if((c==START_FMT||c==END_FE)&&result.length()>0){try{return Integer.parseInt(result.toString());}catch (NumberFormatException e) {}}}"
669	"public void test(){for(;pos.getIndex()<pattern.length();next(pos)){swtich (pattern.charAt(pos.getIndex())){case START_FE :depth++;break;case END_FE :depth--;if(depth==0){return pattern.substring(text,pos.getIndex());}break;case QUOTE :getQuotedString(pattern,pos,false);break;}}}"
670	"public void test(){swtich (pattern.charAt(pos.getIndex())){case START_FE :depth++;break;case END_FE :depth--;if(depth==0){return pattern.substring(text,pos.getIndex());}break;case QUOTE :getQuotedString(pattern,pos,false);break;}}"
671	"public void test(){if(!containsElements(customPatterns)){return pattern;}StringBuilder sb=new StringBuilder(pattern.length()*2);ParsePosition pos=new ParsePosition(0);int fe=-1;}"
672	"public void test(){for(int i=pos.getIndex();i<pattern.length();i++){if(escapingOn&&pattern.substring(i).startsWith(ESCAPED_QUOTE)){appendTo.append(c,lastHold,pos.getIndex()-lastHold).append(QUOTE);pos.setIndex(i+ESCAPED_QUOTE.length());lastHold=pos.getIndex();continue;}swtich (c[pos.getIndex()]){case QUOTE :next(pos);return appendTo==null?null:appendTo.append(c,lastHold,pos.getIndex()-lastHold);default :next(pos);}}}"
673	"public void test(){if(escapingOn&&pattern.substring(i).startsWith(ESCAPED_QUOTE)){appendTo.append(c,lastHold,pos.getIndex()-lastHold).append(QUOTE);pos.setIndex(i+ESCAPED_QUOTE.length());lastHold=pos.getIndex();continue;}}"
674	"public void test(){String token=parseToken(mPattern,indexRef);i=indexRef[0];int tokenLen=token.length();if(tokenLen==0){break;}Rule rule;}"
675	"public void test(){int tokenLen=token.length();if(tokenLen==0){break;}Rule rule;char c=token.charAt(0);}"
676	"public void test(){if(sub.length()==1){rule=new CharacterLiteral(sub.charAt(0));}else {rule=new StringLiteral(sub);}}"
677	"public void test(){while(i+1<length){char peek=pattern.charAt(i+1);if(peek==c){buf.append(c);i++;}else {break;}}}"
678	"public void test(){for(;i<length;i++){c=pattern.charAt(i);if(c=='\''){if(i+1<length&&pattern.charAt(i+1)=='\''){i++;buf.append(c);}else {inLiteral=!inLiteral;}}else if(!inLiteral&&(c>='A'&&c<='Z'||c>='a'&&c<='z')){i--;break;}else {buf.append(c);}}}"
679	"public void test(){{c=pattern.charAt(i);if(c=='\''){if(i+1<length&&pattern.charAt(i+1)=='\''){i++;buf.append(c);}else {inLiteral=!inLiteral;}}else if(!inLiteral&&(c>='A'&&c<='Z'||c>='a'&&c<='z')){i--;break;}else {buf.append(c);}}}"
680	"public void test(){if(i+1<length&&pattern.charAt(i+1)=='\''){i++;buf.append(c);}else {inLiteral=!inLiteral;}}"
681	"public void test(){for(int i=mValues.length;--i>=0;){int len=mValues[i].length();if(len>max){max=len;}}}"
682	"public void test(){if(value<1000){digits=3;}else {Validate.isTrue(value>-1,""Negative values should not be possible"",value);digits=Integer.toString(value).length();}}"
683	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");duration=tmp;if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}}}"
684	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");duration=tmp;if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}}"
685	"public void test(){if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 seconds"","""");}}"
686	"public void test(){if(duration.length()!=0){duration=duration.substring(1);}}"
687	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 minutes"","""");if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}}}"
688	"public void test(){if(tmp.length()!=duration.length()){duration=tmp;tmp=StringUtils.replaceOnce(duration,"" 0 hours"","""");if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}}"
689	"public void test(){if(tmp.length()!=duration.length()){duration=StringUtils.replaceOnce(tmp,"" 0 days"","""");}}"
690	"public void test(){if(lastOutputSeconds){milliseconds+=1000;String str=padWithZeros?StringUtils.leftPad(Integer.toString(milliseconds),count,'0'):Integer.toString(milliseconds);buffer.append(str.substring(1));}else {buffer.append(padWithZeros?StringUtils.leftPad(Integer.toString(milliseconds),count,'0'):Integer.toString(milliseconds));}}"
691	"public void test(){int sz=tokens.length;for(int i=0;i<sz;i++){if(tokens[i].getValue()==value){return true;}}return false;}"
692	"public void test(){if(str==null||parsePatterns==null){throw new IllegalArgumentException(""Date and Patterns must not be null"");}}"
693	"public void test(){if(parsePattern.endsWith(""ZZ"")){pattern=pattern.substring(0,pattern.length()-1);}}"
694	"public void test(){parser.applyPattern(pattern);pos.setIndex(0);String str2=str;if(parsePattern.endsWith(""ZZ"")){str2=str.replaceAll(""([-+][0-9][0-9]):([0-9][0-9])$"",""$1$2"");}Date date=parser.parse(str2,pos);}"
695	"public void test(){if(parsePattern.endsWith(""ZZ"")){str2=str.replaceAll(""([-+][0-9][0-9]):([0-9][0-9])$"",""$1$2"");}}"
696	"public void test(){if(date!=null&&pos.getIndex()==str2.length()){return date;}}"
697	"public void test(){for(String parsePattern : parsePatterns){String pattern=parsePattern;if(parsePattern.endsWith(""ZZ"")){pattern=pattern.substring(0,pattern.length()-1);}parser.applyPattern(pattern);pos.setIndex(0);String str2=str;if(parsePattern.endsWith(""ZZ"")){str2=str.replaceAll(""([-+][0-9][0-9]):([0-9][0-9])$"",""$1$2"");}Date date=parser.parse(str2,pos);if(date!=null&&pos.getIndex()==str2.length()){return date;}}throw new ParseException(""Unable to parse the date: ""+str,-1);}"