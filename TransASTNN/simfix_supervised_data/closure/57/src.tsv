1	"public void test(){if(target!=null){className=target.getString();}}"
2	"public void test(){String name=child.getString();if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}else if(name.equals(""With"")){type=Node.SPECIALCALL_WITH;}}"
3	"public void test(){if(child.getType()==Token.GETPROP){String name=child.getLastChild().getString();if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}}}"
4	"public void test(){if(target==null){return createName(name,nameLineno,nameCharno);}}"
5	"public void test(){if(ScriptRuntime.isSpecialProperty(name)){Node ref=new Node(Token.REF_SPECIAL,target);ref.putProp(Node.NAME_PROP,name);return new Node(Token.GET_REF,ref,dotLineno,dotCharno);}}"
6	"public void test(){if(ScriptRuntime.isSpecialProperty(name)){Node ref=new Node(Token.REF_SPECIAL,target);ref.putProp(Node.NAME_PROP,name);return new Node(Token.GET_REF,ref,dotLineno,dotCharno);}return new Node(Token.GETPROP,target,createString(name,nameLineno,nameCharno),dotLineno,dotCharno);}"
7	"public void test(){Node elem=createString(name);memberTypeFlags|=Node.PROPERTY_FLAG;return createMemberRefGet(target,namespace,elem,memberTypeFlags,dotLineno,dotCharno);}"
8	"public void test(){if(namespace==null&&memberTypeFlags==0){if(target==null)throw Kit.codeBug();return new Node(Token.GETELEM,target,elem,lineno,charno);}}"
9	"public void test(){if(namespace==null&&memberTypeFlags==0){if(target==null)throw Kit.codeBug();return new Node(Token.GETELEM,target,elem,lineno,charno);}return createMemberRefGet(target,namespace,elem,memberTypeFlags,lineno,charno);}"
10	"public void test(){if(target==null){if(namespace==null){ref=new Node(Token.REF_NAME,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_NAME,nsNode,elem,lineno,charno);}}else {if(namespace==null){ref=new Node(Token.REF_MEMBER,target,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_MEMBER,target,nsNode,elem,lineno,charno);}}}"
11	"public void test(){if(namespace==null){ref=new Node(Token.REF_MEMBER,target,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_MEMBER,target,nsNode,elem,lineno,charno);}}"
12	"public void test(){try{return Class.forName(className);}catch (ClassNotFoundException ex) {}catch (SecurityException ex) {}catch (LinkageError ex) {}catch (IllegalArgumentException e) {}}"
13	"public void test(){try{return loader.loadClass(className);}catch (ClassNotFoundException ex) {}catch (SecurityException ex) {}catch (LinkageError ex) {}catch (IllegalArgumentException e) {}}"
14	"public void test(){if(matchToken(Token.NAME)){decompiler.addName(ts.getString());if(ts.getString().equals(""each"")){isForEach=true;}else {reportError(""msg.no.paren.for"");}}}"
15	"public void test(){if(ts.getString().equals(""each"")){isForEach=true;}else {reportError(""msg.no.paren.for"");}}"
16	"public void test(){if(!(matchToken(Token.NAME)&&ts.getString().equals(""xml""))){reportError(""msg.bad.namespace"");}}"
17	"public void test(){if(!(matchToken(Token.NAME)&&ts.getString().equals(""namespace""))){reportError(""msg.bad.namespace"");}}"
18	"public void test(){if(!compilerEnv.isXmlAvailable()){mustMatchToken(Token.NAME,""msg.no.name.after.dot"");s=ts.getString();decompiler.addName(s);pn=nf.createPropertyGet(pn,null,s,memberTypeFlags,lineno,charno,ts.getLineno(),ts.getCharno());break;}}"
19	"public void test(){if(className!=null){return className;}else {return null;}}"
20	"public void test(){if((namedType instanceof ObjectType)&&!(nonNullableTypeNames.contains(n.getString()))){Node typeList=n.getFirstChild();if(typeList!=null&&(""Array"".equals(n.getString())||""Object"".equals(n.getString()))){JSType parameterType=createFromTypeNodesInternal(typeList.getLastChild(),sourceName,scope);namedType=new ParameterizedType(this,(ObjectType)namedType,parameterType);if(typeList.hasMoreThanOneChild()){JSType indexType=createFromTypeNodesInternal(typeList.getFirstChild(),sourceName,scope);namedType=new IndexedType(this,(ObjectType)namedType,indexType);}}return createDefaultObjectUnion(namedType);}else {return namedType;}}"
21	"public void test(){if(typeList!=null&&(""Array"".equals(n.getString())||""Object"".equals(n.getString()))){JSType parameterType=createFromTypeNodesInternal(typeList.getLastChild(),sourceName,scope);namedType=new ParameterizedType(this,(ObjectType)namedType,parameterType);if(typeList.hasMoreThanOneChild()){JSType indexType=createFromTypeNodesInternal(typeList.getFirstChild(),sourceName,scope);namedType=new IndexedType(this,(ObjectType)namedType,indexType);}}}"
22	"public void test(){if(fieldTypeNode.getType()==Token.COLON){fieldNameNode=fieldTypeNode.getFirstChild();hasType=true;}String fieldName=fieldNameNode.getString();if(fieldName.startsWith(""\'"")||fieldName.startsWith(""\"""")){fieldName=fieldName.substring(1,fieldName.length()-1);}}"
23	"public void test(){if(first==null||first.getType()!=Token.NAME){sb.append(""<invalid>"");}else {sb.append(first.getString());}}"
24	"public void test(){if(left==null){return null;}return left+""."";}"
25	"public void test(){if(NodeUtil.isFunctionDeclaration(n)){var=scope.getVar(n.getFirstChild().getString());}}"
26	"public void test(){var=scope.getVar(maybeAssign.nameNode.getString());if(var!=null){assignsByVar.put(var,maybeAssign);assignsByNode.put(maybeAssign.nameNode,maybeAssign);if(isRemovableVar(var)&&!maybeAssign.mayHaveSecondarySideEffects){continuations.put(var,new Continuation(n,scope));return ;}}}"
27	"public void test(){if(""arguments"".equals(n.getString())&&scope.isLocal()){Node lp=scope.getRootNode().getFirstChild().getNext();for(Node a=lp.getFirstChild();a!=null;a=a.getNext()){markReferencedVar(scope.getVar(a.getString()));}}}"
28	"public void test(){Var var=fnScope.getVar(lastArg.getString());if(!referenced.contains(var)){Preconditions.checkNotNull(var==null);argList.removeChild(lastArg);compiler.reportCodeChange();}else {break;}}"
29	"public void test(){if(current.getType()==Token.GETPROP&&current.getLastChild().getString().equals(""prototype"")){current=current.getFirstChild();}}"
30	"public void test(){if(NodeUtil.isVar(n)){name=n.getFirstChild().getString();}else if(NodeUtil.isFunction(n)){name=n.getFirstChild().getString();if(name.isEmpty()){return ;}}}"
31	"public void test(){if(NodeUtil.isFunction(n)){name=n.getFirstChild().getString();if(name.isEmpty()){return ;}}}"
32	"public void test(){Map<String,String> entry=consistNameMap.get(callName);rename=entry.get(id.getString());if(rename==null){rename=nameGenerator.generateNextName();entry.put(id.getString(),rename);}}"
33	"public void test(){if(rename==null){rename=nameGenerator.generateNextName();entry.put(id.getString(),rename);}}"
34	"public void test(){if(curNode.getType()==Token.NAME&&varName.equals(curNode.getString())){lookAhead=null;return ;}}"
35	"public void test(){if(n.getType()!=Token.NAME){return ;}String varName=n.getString();}"
36	"public void test(){if(n==parent.getFirstChild()){Scope scope=t.getScope();Scope.Var var=scope.getVar(n.getString());if(var==null){t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());varsToDeclareInExterns.add(n.getString());}}}"
37	"public void test(){if(var==null){t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());varsToDeclareInExterns.add(n.getString());}}"
38	"public void test(){default :t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());Scope scope=t.getScope();}"
39	"public void test(){Scope scope=t.getScope();Scope.Var var=scope.getVar(n.getString());if(var==null){varsToDeclareInExterns.add(n.getString());}}"
40	"public void test(){if(var==null){varsToDeclareInExterns.add(n.getString());}}"
41	"public void test(){if(operandType!=null){boolean resultEqualsValue=operatorToken==Token.EQ||operatorToken==Token.SHEQ||operatorToken==Token.CASE;if(!outcome){resultEqualsValue=!resultEqualsValue;}return caseTypeOf(operandNode,operandType,stringNode.getString(),resultEqualsValue,blindScope);}}"
42	"public void test(){if(outcome&&condition.getFirstChild().getType()==Token.STRING){return caseIn(condition.getLastChild(),condition.getFirstChild().getString(),blindScope);}}"
43	"public void test(){if(!canCollapseChildNames){return ;}Ref ref=n.getDeclaration();String fnName=ref.node.getString();addStubsForUndeclaredProperties(n,fnName,ref.node.getAncestor(2),ref.node.getParent());}"
44	"public void test(){if(key.getType()==Token.GET||key.getType()==Token.SET){continue;}boolean isJsIdentifier=key.getType()!=Token.NUMBER&&TokenStream.isJSIdentifier(key.getString());String propName=isJsIdentifier?key.getString():String.valueOf(++arbitraryNameCounter);}"
45	"public void test(){boolean isJsIdentifier=key.getType()!=Token.NUMBER&&TokenStream.isJSIdentifier(key.getString());String propName=isJsIdentifier?key.getString():String.valueOf(++arbitraryNameCounter);String qName=objlitName.getFullName()+'.';}"
46	"public void test(){if(NodeUtil.isName(node)&&ARGUMENTS.equals(node.getString())){currentArgumentsAccess.add(node);}}"
47	"public void test(){{String s=n.getString();for(blacklist.reset(s);blacklist.find();){if(insideGetCssNameCall(n,parent)){continue;}if(insideGetUniqueIdCall(n,parent)){continue;}if(insideAssignmentToIdConstant(n,parent)){continue;}compiler.report(t.makeError(n,level,MISSING_GETCSSNAME,blacklist.group()));}}}"
48	"public void test(){if(grandParent!=null&&grandParent.getType()==Token.VAR){String name=parent.getString();return isIdName(name);}else {return false;}}"
49	"public void test(){{Node propNameNode=getPropNode.getLastChild();String propName=propNameNode.getString();if(props.get(propName).aliasAccessor){Node propSrc=getPropNode.getFirstChild();getPropNode.removeChild(propSrc);Node newNameNode=Node.newString(Token.NAME,getArrayNotationNameFor(propName));Node elemNode=new Node(Token.GETELEM,propSrc,newNameNode);replaceNode(getPropNode.getParent(),getPropNode,elemNode);compiler.reportCodeChange();}}}"
50	"public void test(){if(dest.getType()==Token.STRING&&(whitelist.isEmpty()||whitelist.contains(dest.getString()))){props.put(dest.getString(),newSymbolForProperty(dest.getString()));}}"
51	"public void test(){if(canReplaceWithGetProp(propNameNode,n,parent)){String name=propNameNode.getString();props.get(name).recordAccessor(t);accessors.add(n);}}"
52	"public void test(){if(canReplaceWithSetProp(propNameNode,n,parent)){String name=propNameNode.getString();props.get(name).recordMutator(t);mutators.add(n);}}"
53	"public void test(){boolean isCallTarget=(parent.getType()==Token.CALL)&&(parent.getFirstChild()==getPropNode);boolean isAssignTarget=NodeUtil.isAssignmentOp(parent)&&(parent.getFirstChild()==getPropNode);boolean isIncOrDec=(parent.getType()==Token.INC)||(parent.getType()==Token.DEC);return (propNameNode.getType()==Token.STRING)&&!isAssignTarget;}"
54	"public void test(){boolean isAssignTarget=(parent.getType()==Token.ASSIGN)&&(parent.getFirstChild()==getPropNode);return (propNameNode.getType()==Token.STRING)&&isAssignTarget;}"
55	"public void test(){JSDocInfo docInfo=dest.getJSDocInfo()==null?parent.getJSDocInfo():dest.getJSDocInfo();boolean aliasable=!unaliasableGlobals.contains(dest.getString())&&(docInfo==null||!docInfo.isNoAlias());if(aliasable){String name=dest.getString();Scope.Var var=t.getScope().getVar(name);if(var!=null&&!var.isLocal()){globals.put(name,newSymbolForGlobalVar(dest));}}}"
56	"public void test(){if(aliasable){String name=dest.getString();Scope.Var var=t.getScope().getVar(name);if(var!=null&&!var.isLocal()){globals.put(name,newSymbolForGlobalVar(dest));}}}"
57	"public void test(){String name=n.getString();Scope.Var var=t.getScope().getVar(name);if(var!=null&&var.isLocal()){return ;}}"
58	"public void test(){String globalName=globalUse.getString();if(globals.get(globalName).aliasAccessor){globalUse.setString(""GLOBAL_""+globalName);globalUse.putBooleanProp(Node.IS_CONSTANT_NAME,false);compiler.reportCodeChange();}}"
59	"public void test(){Preconditions.checkArgument(node.getType()==Token.GETPROP);return node.getLastChild().getString();}"
60	"public void test(){if(arg.getType()==Token.STRING){int dot=arg.getString().indexOf('.');if(dot==-1){exportedVariables.add(arg.getString());}else {exportedVariables.add(arg.getString().substring(0,dot));}}}"
61	"public void test(){if(dot==-1){exportedVariables.add(arg.getString());}else {exportedVariables.add(arg.getString().substring(0,dot));}}"
62	"public void test(){if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){String name=n.getFirstChild().getString();ProvidedName pn=providedNames.get(name);if(pn!=null){compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));}}}"
63	"public void test(){if(n.getType()==Token.NAME&&parent.getType()==Token.VAR){name=n.getString();}else if(n.getType()==Token.ASSIGN&&parent.getType()==Token.EXPR_RESULT){name=n.getFirstChild().getQualifiedName();}}"
64	"public void test(){if(methodNameNode==null||methodNameNode.getType()!=Token.STRING){reportBadBaseClassUse(t,n,""Second argument must name a method."");return ;}String methodName=methodNameNode.getString();String ending="".prototype.""+methodName;}"
65	"public void test(){for(Node key=arg.getFirstChild();key!=null;key=key.getNext()){Node value=key.getFirstChild();if(key.getType()!=Token.STRING||value==null||value.getType()!=Token.STRING){compiler.report(t.makeError(n,NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));return ;}cssNames.put(key.getString(),value.getString());}}"
66	"public void test(){if(arg.getNext()!=null){styleStr=arg.getNext().getString();}}"
67	"public void test(){if(!NodeUtil.isName(date)||!""Date"".equals(date.getString())){return ;}}"
68	"public void test(){for(String part : arg.getString().split(""\\."")){if(!NodeUtil.isValidPropertyName(part)){compiler.report(t.makeError(arg,INVALID_PROVIDE_ERROR,part));return false;}}}"
69	"public void test(){if(preprocessorSymbolTable==null){return ;}String name=n.getString();Node syntheticRef=NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),name,n,name);}"
70	"public void test(){String name=n.getString();if(name.equals(""RegExp"")&&t.getScope().getVar(name)==null){int parentType=parent.getType();boolean first=(n==parent.getFirstChild());if(!((parentType==Token.NEW&&first)||(parentType==Token.CALL&&first))){t.report(n,REGEXP_REFERENCE);globalRegExpPropertiesUsed=true;}}}"
71	"public void test(){String pattern=n.getFirstChild().getString();String flags=n.getChildCount()==2?n.getLastChild().getString():"""";try{RegExpTree.parseRegExp(pattern,flags);}catch (IllegalArgumentException ex) {  t.report(n,MALFORMED_REGEXP,ex.getMessage());}}"
72	"public void test(){String str=n.getString();if(""undefined"".equals(str)){return ;}}"
73	"public void test(){Node functionNameNode=valueNode.getFirstChild();String functionName=functionNameNode.getString();if(functionName.isEmpty()){namer.setFunctionName(name,valueNode);}}"
74	"public void test(){if(isPrototypePropertyAssign(n)){symbolStack.push(new NameContext(getNameInfoForName(n.getFirstChild().getLastChild().getString(),PROPERTY)));}else if(isGlobalFunctionDeclaration(t,n)){String name=parent.getType()==Token.NAME?parent.getString():n.getFirstChild().getString();symbolStack.push(new NameContext(getNameInfoForName(name,VAR)));}else if(NodeUtil.isFunction(n)){symbolStack.push(new NameContext(anonymousNode));}}"
75	"public void test(){if(isGlobalFunctionDeclaration(t,n)){String name=parent.getType()==Token.NAME?parent.getString():n.getFirstChild().getString();symbolStack.push(new NameContext(getNameInfoForName(name,VAR)));}else if(NodeUtil.isFunction(n)){symbolStack.push(new NameContext(anonymousNode));}}"
76	"public void test(){String propName=n.getFirstChild().getNext().getString();if(propName.equals(""prototype"")){processPrototypeParent(t,parent);}else if(compiler.getCodingConvention().isExported(propName)){addGlobalUseOfSymbol(propName,t.getModule(),PROPERTY);}else {addSymbolUse(propName,t.getModule(),PROPERTY);}}"
77	"public void test(){if(!propNameNode.isQuotedString()){addSymbolUse(propNameNode.getString(),t.getModule(),PROPERTY);}}"
78	"public void test(){if(child.getType()==Token.STRING&&child.getString().equals(""prototype"")){return true;}}"
79	"public void test(){if(isGlobalFunctionDeclaration(t,parent)||firstChild!=null&&isGlobalFunctionDeclaration(t,firstChild)){String name=nameNode.getString();getNameInfoForName(name,VAR).getDeclarations().add(new GlobalFunction(nameNode,parent,gramps,t.getModule()));if(compiler.getCodingConvention().isExported(name)||anchorUnusedVars){addGlobalUseOfSymbol(name,t.getModule(),VAR);}return true;}}"
80	"public void test(){if(dest.getType()==Token.STRING&&NodeUtil.isExprAssign(grandParent)&&NodeUtil.isVarOrSimpleAssignLhs(n,parent)){String name=dest.getString();Property prop=new AssignmentProperty(grandParent,t.getModule());getNameInfoForName(name,PROPERTY).getDeclarations().add(prop);}}"
81	"public void test(){if(n.getType()==Token.GETPROP){symbolGraph.connect(externNode,firstModule,getNameInfoForName(n.getLastChild().getString(),PROPERTY));}}"
82	"public void test(){if(n==parent.getFirstChild()&&parent.getChildCount()==2&&n.getNext().getType()==Token.NAME&&""eval"".equals(n.getNext().getString())){return ;}}"
83	"public void test(){if(removable.contains(n.getString())){parent.removeChild(n);if(!parent.hasChildren()){parent.getParent().removeChild(parent);}}}"
84	"public void test(){if(n.getType()==Token.FUNCTION){Node functionNameNode=n.getFirstChild();String functionName=functionNameNode.getString();Node enclosingFunction=t.getEnclosingFunction();functionMap.put(n,new FunctionRecord(nextId,enclosingFunction,functionName));nextId++;}}"
85	"public void test(){if(!NodeUtil.isGetProp(node)){return false;}Node nameNode=node.getFirstChild();return NodeUtil.isGetProp(nameNode)&&nameNode.getLastChild().getString().equals(""prototype"");}"
86	"public void test(){for(Node ancestor=node.getParent();ancestor!=null;ancestor=ancestor.getParent()){if(NodeUtil.isControlStructure(ancestor)){return ;}}String newMethodName=getRewrittenMethodName(node.getLastChild().getString());rewriteDefinition(node,newMethodName);}"
87	"public void test(){if(codingConvention.isExported(lValue.getLastChild().getString())){return false;}}"
88	"public void test(){if(callName.getType()==Token.GETPROP){methodName=callName.getLastChild().getString();}else if(callName.getType()==Token.NAME){String name=callName.getString();int dollarIndex=name.lastIndexOf('$');if(dollarIndex!=-1){methodName=name.substring(dollarIndex+1);}}}"
89	"public void test(){if(callName.getType()==Token.NAME){String name=callName.getString();int dollarIndex=name.lastIndexOf('$');if(dollarIndex!=-1){methodName=name.substring(dollarIndex+1);}}}"
90	"public void test(){{String className=null;if(NodeUtil.isExprCall(parent)){Node callee=node.getFirstChild();if(callee!=null&&callee.getType()==Token.GETPROP){String qualifiedName=callee.getQualifiedName();if(functionName.equals(qualifiedName)){Node target=callee.getNext();if(target!=null){className=target.getString();}}}}return className;}}"
91	"public void test(){if(functionName.equals(qualifiedName)){Node target=callee.getNext();if(target!=null){className=target.getString();}}}"
92	"public void test(){if(target!=null){className=target.getString();}}"
93	"public void test(){if(name.getType()==Token.STRING){typeNames.add(name.getString());}}"
94	"public void test(){if(NodeUtil.isFunctionDeclaration(n)){Node nameNode=n.getFirstChild();NameInformation ns=createNameInformation(t,nameNode,n);Preconditions.checkNotNull(ns,""NameInformation is null"");createName(nameNode.getString());}}"
95	"public void test(){if(ns!=null){JsName nameInfo=getName(nameNode.getString(),true);recordSet(nameInfo.name,nameNode);}}"
96	"public void test(){JsName name=getName(className,false);if(name!=null){name.prototypeNames.add(prototypeProperty);refNodes.add(new PrototypeSetNode(name,node));recordWriteOnProperties(className);}}"
97	"public void test(){if(name!=null){name.prototypeNames.add(prototypeProperty);refNodes.add(new PrototypeSetNode(name,node));recordWriteOnProperties(className);}}"
98	"public void test(){if(rootNameNode.getType()==Token.GETPROP){name="".""+prop.getString();}else {bNameWasShortened=true;name="""";}}"
99	"public void test(){if(!bNameWasShortened&&n.getType()==Token.GETPROP&&parent.getType()==Token.ASSIGN&&""prototype"".equals(n.getLastChild().getString())){if(createNameInformation(t,n.getFirstChild(),n)!=null){name=rootNameNode.getString()+name;name=name.substring(0,name.length()-PROTOTYPE_SUFFIX_LEN);NameInformation nameInfo=new NameInformation();nameInfo.name=name;return nameInfo;}else {return null;}}}"
100	"public void test(){if(!NodeUtil.isName(lhs)){return ;}String name=lhs.getString();if(!scope.isDeclared(name,false)){return ;}}"
101	"public void test(){if(rhs!=null&&NodeUtil.isName(rhs)&&rhs.getString().equals(var.name)&&NodeUtil.isAssign(n)){n.removeChild(rhs);n.getParent().replaceChild(n,rhs);compiler.reportCodeChange();return ;}}"
102	"public void test(){if(NodeUtil.isName(n)&&variable.equals(n.getString())){if(NodeUtil.isVarOrSimpleAssignLhs(n,n.getParent())){Preconditions.checkState(n.getParent().getType()==Token.ASSIGN);Node rhs=n.getNext();VariableLiveness state=isVariableReadBeforeKill(rhs,variable);if(state==VariableLiveness.READ){return state;}return VariableLiveness.KILL;}else {return VariableLiveness.READ;}}}"
103	"public void test(){if(n.getString().equals(""arguments"")){return false;}else {Var v=s.getVar(n.getString());if(v!=null&&(v.isLocal()||v.nameNode.getParent().getType()==Token.CATCH)){return false;}}}"
104	"public void test(){if(count++==index){return n.getString();}}"
105	"public void test(){String propName=getprop.getLastChild().getString();String qName=getprop.getQualifiedName();if(qName!=null){Var var=syntacticScope.getVar(qName);if(var!=null&&!var.isTypeInferred()){if(propName.equals(""prototype"")||(!objectType.hasOwnProperty(propName)&&(!objectType.isInstanceType()||(var.isExtern()&&!objectType.isNativeObjectType())))){return objectType.defineDeclaredProperty(propName,var.getType(),getprop);}}}}"
106	"public void test(){Node objNode=n.getFirstChild();Node property=n.getLastChild();scope=traverseChildren(n,scope);n.setJSType(getPropertyType(objNode.getJSType(),property.getString(),n,scope));return dereferencePointer(n.getFirstChild(),scope);}"
107	"public void test(){Preconditions.checkState(nameNode.getType()==Token.NAME);String varName=nameNode.getString();if(varType==null){varType=getNativeType(JSTypeNative.UNKNOWN_TYPE);}}"
108	"public void test(){if(NodeUtil.mayEffectMutableState(cArg)&&NodeUtil.getNameReferenceCount(block,fnParam.getString())>1){return CanInlineResult.NO;}}"
109	"public void test(){if(type==Token.NAME&&NodeUtil.isAssignmentOp(parent)&&n==parent.getFirstChild()){report(t,n,GOOG_SCOPE_ALIAS_REDEFINED,n.getString());}}"
110	"public void test(){if(n.getType()==Token.NAME){String name=n.getString();Var aliasVar=aliases.get(name);if(aliasVar!=null&&t.getScope().getVar(name)==aliasVar){Node aliasedNode=aliasVar.getInitialValue();aliasUsages.add(new AliasedNode(n,aliasedNode));}}}"
111	"public void test(){String name=typeNode.getString();int endIndex=name.indexOf('.');if(endIndex==-1){endIndex=name.length();}}"
112	"public void test(){if(colorings.isEmpty()||!NodeUtil.isName(n)){return ;}Var var=t.getScope().getVar(n.getString());GraphNode<Var,?> vNode=colorings.peek().getGraph().getNode(var);}"
113	"public void test(){if(NodeUtil.isName(n)&&var.getName().equals(n.getString())){if(parent.getType()==Token.LP){return true;}else if(NodeUtil.isVar(parent)){return n.hasChildren();}return false;}else {Node name=n.getFirstChild();return name!=null&&NodeUtil.isName(name)&&var.getName().equals(name.getString())&&NodeUtil.isAssignmentOp(n);}}"
114	"public void test(){{Node name=n.getFirstChild();return name!=null&&NodeUtil.isName(name)&&var.getName().equals(name.getString())&&NodeUtil.isAssignmentOp(n);}}"
115	"public void test(){if(n.getType()!=Token.NAME){return ;}String name=n.getString();if(name.length()==0){return ;}}"
116	"public void test(){{String oldName=n.getString();Assignment a=assignments.get(oldName);if(a.newName!=null&&!a.newName.equals(oldName)){if(pseudoNameMap!=null){return pseudoNameMap.get(n);}return a.newName;}else {return null;}}}"
117	"public void test(){String oldTempName=n.getString();Assignment a=assignments.get(oldTempName);if(!a.newName.equals(oldTempName)){if(pseudoNameMap!=null){return pseudoNameMap.get(n);}return a.newName;}}"
118	"public void test(){if(nameArg.getType()!=Token.STRING){return ;}this.exports.add(new SymbolExport(nameArg.getString(),valueArg));}"
119	"public void test(){if(nameArg.getType()!=Token.STRING){return ;}this.exports.add(new PropertyExport(objectArg.getQualifiedName(),nameArg.getString(),valueArg));}"
120	"public void test(){if(fnIdentifingNode.getType()==Token.NAME){name=fnIdentifingNode.getString();}else if(fnIdentifingNode.getType()==Token.FUNCTION){name=anonFunctionMap.get(fnIdentifingNode);}}"
121	"public void test(){if(NodeUtil.isGet(parent)&&name==parent.getFirstChild()&&name.getNext().getType()==Token.STRING&&name.getNext().getString().equals(""call"")){Node gramps=name.getAncestor(2);if(gramps.getType()==Token.CALL&&gramps.getFirstChild()==parent){return true;}}}"
122	"public void test(){if(isCandidateUsage(n)){return ;}String name=n.getString();FunctionState fs=fns.get(name);}"
123	"public void test(){if(parent.getType()==Token.NEW){Node target=parent.getFirstChild();if(target.getType()==Token.NAME&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){fs.setInline(false);}}}"
124	"public void test(){if(target.getType()==Token.NAME&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){fs.setInline(false);}}"
125	"public void test(){if(isCandidateUsage(node)){changed.add(node.getString());}}"
126	"public void test(){if(dest.getType()!=Token.STRING){return ;}String name=dest.getString();}"
127	"public void test(){Node value=key.getFirstChild();String name=key.getString();if(key.getType()==Token.STRING&&value.getType()==Token.FUNCTION){addSignature(name,value,t.getSourceName());}else {getSignatureStore().removeSignature(name);externMethodsWithoutSignatures.add(name);}}"
128	"public void test(){if(dest.getString().equals(""prototype"")){processPrototypeParent(t,parent);}else {if(parent.getType()==Token.ASSIGN&&parent.getFirstChild()==n){addPossibleSignature(dest.getString(),n.getNext(),t);}}}"
129	"public void test(){if(parent.getType()==Token.ASSIGN&&parent.getFirstChild()==n){addPossibleSignature(dest.getString(),n.getNext(),t);}}"
130	"public void test(){if(dest.getType()==Token.STRING&&parent.getType()==Token.ASSIGN){Node assignee=parent.getFirstChild().getNext();addPossibleSignature(dest.getString(),assignee,t);}}"
131	"public void test(){if(left.getType()==NAME&&""goog"".equals(left.getString())&&right.getType()==STRING){Function<TypeRestriction,JSType> restricter=restricters.get(right.getString());if(restricter!=null){return restrictParameter(param,paramType,blindScope,restricter,outcome);}}}"
132	"public void test(){{String methodName=rhs.getString();Collection<String> classes=methods.get(methodName);if(classes!=null){Node lhs=calledFn.getFirstChild();if(lhs.getJSType()!=null){JSType type=lhs.getJSType().restrictByNotNullOrUndefined();Config config=findMatchingClass(type,classes);if(config!=null){doSubstitutions(t,config,n);return ;}}}}}"
133	"public void test(){for(String declarationName : declarationNames){String className=getClassFromDeclarationName(declarationName);JSType methodClassType=registry.getType(className);if(methodClassType!=null&&callClassType.isSubtype(methodClassType)){return functions.get(declarationName);}}}"
134	"public void test(){if(value!=null&&value.getType()==Token.STRING){key=value.getString();replacementString=getReplacement(key);replacement=Node.newString(replacementString);break;}}"
135	"public void test(){String name=n.getString();Scope.Var var=t.getScope().getVar(name);if(isConstant(var)){if(initializedConstants.contains(var)){reportError(t,n,name);}else {initializedConstants.add(var);}}}"
136	"public void test(){String name=lhs.getString();Scope.Var var=t.getScope().getVar(name);if(isConstant(var)){if(initializedConstants.contains(var)){reportError(t,n,name);}else {initializedConstants.add(var);}}}"
137	"public void test(){if(lhs.getType()==Token.NAME){String name=lhs.getString();Scope.Var var=t.getScope().getVar(name);if(isConstant(var)){reportError(t,n,name);}}}"
138	"public void test(){if(lhs.getType()==Token.GETPROP&&lhs.getLastChild().getString().equals(""prototype"")){return false;}}"
139	"public void test(){if(llhs.getType()==Token.GETPROP&&llhs.getLastChild().getString().equals(""prototype"")){return false;}}"
140	"public void test(){if(NodeUtil.isName(lhs)&&!conditional){removeFromUseIfLocal(lhs.getString(),output);}}"
141	"public void test(){if(!conditional){removeFromUseIfLocal(varName.getString(),output);}}"
142	"public void test(){if(!conditional){removeFromUseIfLocal(name.getString(),output);}}"
143	"public void test(){if(!NodeUtil.isAssign(n)){addToUseIfLocal(name.getString(),cfgNode,output);}}"
144	"public void test(){String name=nameNode.getString();if(isStripName(name)||isCallWhoseReturnValueShouldBeStripped(nameNode.getFirstChild())){Scope scope=t.getScope();varsToRemove.add(scope.getVar(name));n.removeChild(nameNode);compiler.reportCodeChange();}}"
145	"public void test(){if(isStripName(key.getString())){Node value=key.getFirstChild();Node next=key.getNext();n.removeChild(key);key=next;compiler.reportCodeChange();}else {key=key.getNext();}}"
146	"public void test(){String name=n.getString();Scope scope=t.getScope();Scope.Var var=scope.getVar(name);return varsToRemove.contains(var);}"
147	"public void test(){if(n!=null&&n.getType()==Token.GETPROP){Node propNode=n.getLastChild();return propNode!=null&&propNode.getType()==Token.STRING&&isStripName(propNode.getString());}}"
148	"public void test(){if(callTarget.getType()==Token.GETPROP&&callTarget.getLastChild().getString().equals(""bind"")&&callTarget.getFirstChild().getType()==Token.FUNCTION){Node fn=callTarget.getFirstChild();Node thisValue=callTarget.getNext();Node parameters=safeNext(thisValue);return new Bind(fn,thisValue,parameters);}}"
149	"public void test(){{String functionName=parent.getString();info=(JSDocInfo)parent.getProp(Node.JSDOC_INFO_PROP);if(info!=null&&info.isConstructor()){constructors.add(functionName);}else {Node gramps=parent.getParent();Preconditions.checkState(gramps!=null&&gramps.getType()==Token.VAR);info=(JSDocInfo)gramps.getProp(Node.JSDOC_INFO_PROP);if(info!=null&&info.isConstructor()){constructors.add(functionName);}}}}"
150	"public void test(){if(info!=null&&info.isConstructor()){String functionName=n.getFirstChild().getString();constructors.add(functionName);}}"
151	"public void test(){for(Node node : newNodes){String className=node.getFirstChild().getQualifiedName();if((constructors==null||!constructors.contains(className))&&(requires==null||!requires.contains(className))){compiler.report(t.makeError(node,level,MISSING_REQUIRE_WARNING,className));classNames.add(className);}}}"
152	"public void test(){if((constructors==null||!constructors.contains(className))&&(requires==null||!requires.contains(className))){compiler.report(t.makeError(node,level,MISSING_REQUIRE_WARNING,className));classNames.add(className);}}"
153	"public void test(){if(nameNode.getType()!=Token.NAME){return ;}String name=nameNode.getString();Scope.Var var=t.getScope().getVar(name);}"
154	"public void test(){if(NodeUtil.isObjectLitKey(n,parent)&&NodeUtil.isValidPropertyName(n.getString())){n.putBooleanProp(Node.QUOTED_PROP,false);}}"
155	"public void test(){if(right.getType()==Token.STRING&&NodeUtil.isValidPropertyName(right.getString())){n.removeChild(left);n.removeChild(right);parent.replaceChild(n,new Node(Token.GETPROP,left,right));compiler.reportCodeChange();}}"
156	"public void test(){if(n.getString().isEmpty()){violation(""Expected non-empty string."",n);}}"
157	"public void test(){if(n.getString()==null){violation(""Expected non-null string."",n);}}"
158	"public void test(){if(!function.getFirstChild().getString().isEmpty()){violation(""Expected unnamed function expression."",n);}}"
159	"public void test(){if(n.getString().isEmpty()){return ;}}"
160	"public void test(){JSDocInfo info=null;Var var=t.getScope().getVar(n.getString());if(var!=null){info=var.getJSDocInfo();}}"
161	"public void test(){if(assertOnChange){String name=n.getString();throw new IllegalStateException(""Unexpected const change.\n""+""  name: ""+name);}}"
162	"public void test(){String name=n.getString();if(n.getString().isEmpty()){return ;}}"
163	"public void test(){if(child.getString().equals(""eval"")){element=new JsonML(TagType.EvalExpr);}else {element=new JsonML(TagType.IdExpr);element.setAttribute(TagAttr.NAME,child.getString());element=new JsonML(TagType.CallExpr,element);}}"
164	"public void test(){if(child!=null){element.setAttribute(TagAttr.LABEL,child.getString());}}"
165	"public void test(){if(child!=null){flags=child.getString();}}"
166	"public void test(){if(!collectProperty(propertyCandidate,name.getString(),value)){break;}}"
167	"public void test(){if(!name.equals(lhs.getFirstChild().getString())){return false;}}"
168	"public void test(){if(property.getType()==Token.NUMBER){propertyName=NodeUtil.getStringValue(property);}else {propertyName=property.getString();}}"
169	"public void test(){if(node.getType()==Token.NAME){return varName.equals(node.getString());}}"
170	"public void test(){if(t.inGlobalScope()){return ;}Var var=t.getScope().getVar(n.getString());if(var==null){return ;}}"
171	"public void test(){if(n.getType()!=Token.CALL||n.getFirstChild().getType()!=Token.NAME){return ;}Node callTarget=n.getFirstChild();String callName=callTarget.getString();}"
172	"public void test(){if(nameNode.getType()!=Token.STRING){return ;}visit(t,n,parent,nameNode.getString());}"
173	"public void test(){if(n.getChildCount()==1&&n.getFirstChild().getType()==Token.NAME&&n.getFirstChild().getString().equals(""Infinity"")){return Double.NEGATIVE_INFINITY;}}"
174	"public void test(){{Node parent=n.getParent();String name=n.getFirstChild().getString();swtich (parent.getType()){case Token.NAME :return parent.getString();case Token.ASSIGN :return parent.getFirstChild().getQualifiedName();default :return name!=null&&name.length()!=0?name:null;}}}"
175	"public void test(){if(nameNode.getType()==Token.NAME&&CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())){return false;}}"
176	"public void test(){String name=nameNode.getString();if(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)){return false;}}"
177	"public void test(){if(callNode.hasOneChild()&&OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())){return false;}}"
178	"public void test(){if(nameNode.getFirstChild().getType()==Token.REGEXP&&REGEXP_METHODS.contains(nameNode.getLastChild().getString())){return false;}else if(nameNode.getFirstChild().getType()==Token.STRING&&STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())){Node param=nameNode.getNext();if(param!=null&&(param.getType()==Token.STRING||param.getType()==Token.REGEXP))return false;}}"
179	"public void test(){if(nameNode.getFirstChild().getType()==Token.STRING&&STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())){Node param=nameNode.getNext();if(param!=null&&(param.getType()==Token.STRING||param.getType()==Token.REGEXP))return false;}}"
180	"public void test(){swtich (n.getType()){case Token.VOID :return true;case Token.NAME :return n.getString().equals(""undefined"");}return false;}"
181	"public void test(){if(last!=null&&last.getType()==Token.STRING){String propName=last.getString();return (propName.equals(methodName));}}"
182	"public void test(){swtich (key.getType()){case Token.STRING :case Token.GET :case Token.SET :return key.getString();}throw new IllegalStateException(""Unexpected node type: ""+key);}"
183	"public void test(){if(parent!=null&&parent.getType()==Token.VAR){String name=n.getString();if(!vars.containsKey(name)){vars.put(name,n);}}}"
184	"public void test(){if(cur.getLastChild().getString().equals(""prototype"")){return cur.getFirstChild();}else {cur=cur.getFirstChild();}}"
185	"public void test(){String name=node.getString();if(parent.getType()==Token.GETPROP&&node==parent.getLastChild()){return convention.isConstantKey(name);}else if(isObjectLitKey(node,parent)){return convention.isConstantKey(name);}else {return convention.isConstant(name);}}"
186	"public void test(){if(isGet(getNode)){Node propNode=getNode.getLastChild();return isString(propNode)&&""toString"".equals(propNode.getString());}}"
187	"public void test(){if((parent!=null)&&(parent.getType()==Token.VAR)){messageKey=node.getString();isVar=true;}else {return ;}}"
188	"public void test(){{Node nameNode=sibling.getFirstChild();String name=nameNode.getString();if(name.equals(builder.getKey()+DESC_SUFFIX)){Node valueNode=nameNode.getFirstChild();String desc=extractStringFromStringExprNode(valueNode);if(desc.startsWith(HIDDEN_DESC_PREFIX)){builder.setDesc(desc.substring(HIDDEN_DESC_PREFIX.length()).trim());builder.setIsHidden(true);}else {builder.setDesc(desc);}return true;}}}"
189	"public void test(){if(argumentNode.getType()==Token.NAME){String phName=argumentNode.getString();if(phNames.contains(phName)){throw new MalformedException(""Duplicate placeholder name: ""+phName,argumentNode);}else {phNames.add(phName);}}}"
190	"public void test(){if(aNode.getType()!=Token.STRING){throw new MalformedException(""STRING node expected as OBJLIT key"",aNode);}String phName=aNode.getString();if(!isLowerCamelCaseWithNumericSuffixes(phName)){throw new MalformedException(""Placeholder name not in lowerCamelCase: ""+phName,aNode);}}"
191	"public void test(){if(parent.getType()==Token.FUNCTION||parent.getType()==Token.VAR||parent.getType()==Token.NEW){return ;}Scope.Var var=t.getScope().getVar(n.getString());JSDocInfo docInfo=var==null?null:var.getJSDocInfo();}"
192	"public void test(){if(docInfo.getDeprecationReason()!=null){compiler.report(t.makeError(n,DEPRECATED_NAME_REASON,n.getString(),docInfo.getDeprecationReason()));}else {compiler.report(t.makeError(n,DEPRECATED_NAME,n.getString()));}}"
193	"public void test(){if(parent.getType()==Token.NEW){return ;}ObjectType objectType=ObjectType.cast(dereference(n.getFirstChild().getJSType()));String propertyName=n.getLastChild().getString();}"
194	"public void test(){if(varSrc!=null&&refSrc!=null&&!varSrc.getName().equals(refSrc.getName())){if(docInfo.isConstructor()&&isValidPrivateConstructorAccess(parent)){return ;}compiler.report(t.makeError(name,BAD_PRIVATE_GLOBAL_ACCESS,name.getString(),varSrc.getName()));}}"
195	"public void test(){Node assign=processInfixExpression(assignmentNode);Node target=assign.getFirstChild();if(!validAssignmentTarget(target)){errorReporter.error(""invalid assignment target"",sourceName,target.getLineno(),"""",0);}return assign;}"
196	"public void test(){if(!validAssignmentTarget(target)){errorReporter.error(""invalid assignment target"",sourceName,target.getLineno(),"""",0);}}"
197	"public void test(){while(isDirective(node.getFirstChild())){String directive=node.removeFirstChild().getFirstChild().getString();if(directives==null){directives=Sets.newHashSet(directive);}else {directives.add(directive);}}}"
198	"public void test(){if(n==null)return false;int nType=n.getType();return (nType==Token.EXPR_RESULT||nType==Token.EXPR_VOID)&&n.getFirstChild().getType()==Token.STRING&&ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());}"
199	"public void test(){swtich (target.getType()){case Token.NAME :case Token.GETPROP :case Token.GETELEM :return true;}return false;}"
200	"public void test(){if(!jsdocBuilder.recordLends(stream.getString())){parser.addTypeWarning(""msg.jsdoc.lends.incompatible"",stream.getLineno(),stream.getCharno());}}"
201	"public void test(){String name=stream.getString();if(!suppressionNames.contains(name)){parser.addParserWarning(""msg.jsdoc.suppress.unknown"",name,stream.getLineno(),stream.getCharno());}}"
202	"public void test(){if(!suppressionNames.contains(name)){parser.addParserWarning(""msg.jsdoc.suppress.unknown"",name,stream.getLineno(),stream.getCharno());}suppressions.add(stream.getString());token=next();}"
203	"public void test(){String name=stream.getString();if(!modifiesAnnotationKeywords.contains(name)&&!jsdocBuilder.hasParameter(name)){parser.addParserWarning(""msg.jsdoc.modifies.unknown"",name,stream.getLineno(),stream.getCharno());}}"
204	"public void test(){if(!modifiesAnnotationKeywords.contains(name)&&!jsdocBuilder.hasParameter(name)){parser.addParserWarning(""msg.jsdoc.modifies.unknown"",name,stream.getLineno(),stream.getCharno());}modifies.add(stream.getString());token=next();}"
205	"public void test(){{String string=stream.getString();if(""function"".equals(string)){skipEOLs();return parseFunctionType(next());}else if(""null"".equals(string)||""undefined"".equals(string)){return newStringNode(string);}else {return parseTypeName(token);}}}"
206	"public void test(){if(token!=JsDocToken.STRING){return reportGenericTypeSyntaxWarning();}String typeName=stream.getString();}"
207	"public void test(){if(match(JsDocToken.STRING)){next();typeName+=stream.getString();}}"
208	"public void test(){if(match(JsDocToken.STRING)&&""void"".equals(stream.getString())){next();return newNode(Token.VOID);}else {return parseTypeExpression(next());}}"
209	"public void test(){swtich (token){case STRING :String string=stream.getString();return newStringNode(string);default :return null;}}"
210	"public void test(){if(annotationNames!=null){return ;}ResourceBundle config=ResourceBundle.getBundle(configResource);annotationNames=extractList(config.getString(""jsdoc.annotations""));suppressionNames=extractList(config.getString(""jsdoc.suppressions""));}"
211	"public void test(){if(NodeUtil.isName(n)){Var v=t.getScope().getVar(n.getString());return v!=null&&v.isLocal();}}"
212	"public void test(){if(constructor instanceof FunctionType&&constructor.isConstructor()){classType=(FunctionType)constructor;className=classType.getReferenceName();}else {classType=compiler.getTypeRegistry().getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);className=NodeUtil.getPrototypeClassName(qName).getQualifiedName();}}"
213	"public void test(){if(constructor instanceof FunctionType&&constructor.isConstructor()){classType=(FunctionType)constructor;className=classType.getReferenceName();}else {classType=compiler.getTypeRegistry().getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);className=NodeUtil.getPrototypeClassName(qName).getQualifiedName();}recordClassConstructorOrInterface(className,classType,null,null,null,null);}"
214	"public void test(){String propName=n.getLastChild().getString();if(!constructor.getPrototype().hasOwnProperty(propName)){recordSuperClassPrototypePropUse(constructor,propName,ref);}}"
215	"public void test(){if(NodeUtil.isName(lhs)){addToDefIfLocal(lhs.getString(),cfgNode,rhs,output);}}"
216	"public void test(){if(c.hasChildren()){computeMustDef(c.getFirstChild(),cfgNode,output,conditional);addToDefIfLocal(c.getString(),conditional?null:cfgNode,c.getFirstChild(),output);}}"
217	"public void test(){computeMustDef(name.getNext(),cfgNode,output,conditional);addToDefIfLocal(name.getString(),conditional?null:cfgNode,n.getLastChild(),output);return ;}"
218	"public void test(){if(NodeUtil.isName(obj)&&""arguments"".equals(obj.getString())){escapeParameters(output);}}"
219	"public void test(){if(NodeUtil.isName(n)&&""arguments"".equals(n.getString())){escapeParameters(output);}}"
220	"public void test(){if(n.getType()==Token.DEC||n.getType()==Token.INC){Node target=n.getFirstChild();if(NodeUtil.isName(target)){addToDefIfLocal(target.getString(),conditional?null:cfgNode,null,output);return ;}}}"
221	"public void test(){if(NodeUtil.isName(target)){addToDefIfLocal(target.getString(),conditional?null:cfgNode,null,output);return ;}}"
222	"public void test(){if(node.hasChildren()){label=node.getFirstChild().getString();}}"
223	"public void test(){while(target.getType()==Token.LABEL){if(target.getFirstChild().getString().equals(label)){return true;}target=target.getParent();}}"
224	"public void test(){if(target.getFirstChild().getString().equals(label)){return true;}}"
225	"public void test(){{Node target=definition.getRValue();if(target!=null&&NodeUtil.isFunction(target)){Function targetFunction=functionsByNode.get(target);if(targetFunction==null){targetFunction=createFunction(target);}if(computeForwardGraph){callsite.addPossibleTarget(targetFunction);}if(computeBackwardGraph){targetFunction.addCallsitePossiblyTargetingFunction(callsite);}}else {callsite.hasUnknownTarget=true;}}}"
226	"public void test(){if(target!=null&&NodeUtil.isFunction(target)){Function targetFunction=functionsByNode.get(target);if(targetFunction==null){targetFunction=createFunction(target);}if(computeForwardGraph){callsite.addPossibleTarget(targetFunction);}if(computeBackwardGraph){targetFunction.addCallsitePossiblyTargetingFunction(callsite);}}else {callsite.hasUnknownTarget=true;}}"
227	"public void test(){Function targetFunction=functionsByNode.get(target);if(targetFunction==null){targetFunction=createFunction(target);}}"
228	"public void test(){if(targetFunction==null){targetFunction=createFunction(target);}}"
229	"public void test(){if(""undefined"".equals(argumentNode.getString())){typeNameString=""undefined"";}}"
230	"public void test(){if(left.getString().equals(""Infinity"")){return n;}else if(left.getString().equals(""NaN"")){n.removeChild(left);parent.replaceChild(n,left);reportCodeChange();return left;}}"
231	"public void test(){if(left.getString().equals(""NaN"")){n.removeChild(left);parent.replaceChild(n,left);reportCodeChange();return left;}}"
232	"public void test(){if(right.getType()==Token.NAME&&""Object"".equals(right.getString())){replacementNode=new Node(Token.TRUE);}}"
233	"public void test(){if(rightLiteral){boolean undefinedLeft=(left.getString().equals(""undefined""));if(undefinedLeft){result=compareToUndefined(right,op);break;}}}"
234	"public void test(){if(Token.NAME!=right.getType()){return n;}String ln=left.getString();String rn=right.getString();}"
235	"public void test(){String ln=left.getString();String rn=right.getString();if(!ln.equals(rn)){return n;}}"
236	"public void test(){ final FunctionType functionType=(FunctionType)n.getJSType(); final String functionPrivateName=n.getFirstChild().getString();if(functionPrivateName!=null&&functionPrivateName.length()>0&&outerScope.isDeclared(functionPrivateName,false)&&!(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)){report(t,n,FUNCTION_MASKS_VARIABLE,functionPrivateName);}}"
237	"public void test(){JSType objectJsType=getJSType(object);String property=lvalue.getLastChild().getString();if(object.getType()==Token.GETPROP){JSType jsType=getJSType(object.getFirstChild());if(jsType.isInterface()&&object.getLastChild().getString().equals(""prototype"")){visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);}}}"
238	"public void test(){if(jsType.isInterface()&&object.getLastChild().getString().equals(""prototype"")){visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);}}"
239	"public void test(){if(lvalue.getType()==Token.NAME){JSType rvalueType=getJSType(assign.getLastChild());Var var=t.getScope().getVar(lvalue.getString());if(var!=null){if(var.isTypeInferred()){return ;}}}}"
240	"public void test(){type=getNativeType(UNKNOWN_TYPE);Var var=t.getScope().getVar(n.getString());if(var!=null){JSType varType=var.getType();if(varType!=null){type=varType;}}}"
241	"public void test(){if(!validator.expectNotNullOrUndefined(t,n,childType,childType+"" has no properties"",getNativeType(OBJECT_TYPE))){ensureTyped(t,n);return ;}checkPropertyAccess(childType,property.getString(),t,n);ensureTyped(t,n);}"
242	"public void test(){if(info.isImplicitCast()&&!inExterns){String propName=n.getType()==Token.GETPROP?n.getLastChild().getString():""(missing)"";compiler.report(t.makeError(n,ILLEGAL_IMPLICIT_CAST,propName));}}"
243	"public void test(){if(tweakIdNode.getType()!=Token.STRING){compiler.report(t.makeError(tweakIdNode,NON_LITERAL_TWEAK_ID_ERROR));return ;}String tweakId=tweakIdNode.getString();TweakInfo tweakInfo=allTweaks.get(tweakId);}"
244	"public void test(){if(!isAliasName(n.getString())){return false;}}"
245	"public void test(){for(Node child=val.getFirstChild();child!=null;child=child.getNext()){String varname=child.getString();if(varmap.containsKey(varname)){continue;}String var=VAR_PREFIX+varname;varmap.put(varname,var);}}"
246	"public void test(){Preconditions.checkState(getprop.getType()==Token.GETPROP);String varname=getprop.getLastChild().getString();if(varmap.containsKey(varname)){continue;}}"
247	"public void test(){if(owner.getType()==Token.NAME&&owner.getString().equals(name)){recursive=true;break;}}"
248	"public void test(){if(n.getType()!=Token.NAME){return ;}String name=n.getString();if(name.isEmpty()||compiler.getCodingConvention().isExported(name)){return ;}}"
249	"public void test(){if(relationship!=null&&name.getString().equals(relationship.subclassName)){return info.addDeclaration(new Declaration(t.getModule(),parent,gramps,gramps.getParent()));}}"
250	"public void test(){{Node functionName=n.getFirstChild();return functionName.getType()==Token.NAME&&(functionName.getString().equals(CrossModuleMethodMotion.STUB_METHOD_NAME)||functionName.getString().equals(CrossModuleMethodMotion.UNSTUB_METHOD_NAME));}}"
251	"public void test(){if(ownerType!=null){String propName=lvalueNode.getLastChild().getString();overriddenPropType=findOverriddenFunction(ownerType,propName);}}"
252	"public void test(){if(objNode.getType()==Token.GETPROP&&objNode.getLastChild().getString().equals(""prototype"")){builder.inferThisType(info,objNode.getFirstChild());searchedForThisType=true;}else if(objNode.getType()==Token.THIS){builder.inferThisType(info,objNode.getJSType());searchedForThisType=true;}}"
253	"public void test(){if(root.getType()==Token.NAME){Var var=scope.getVar(root.getString());if(var!=null){return var.isGlobal();}}}"
254	"public void test(){if(rValue.getType()==Token.OR){Node firstClause=rValue.getFirstChild();Node secondClause=firstClause.getNext();boolean namesMatch=firstClause.getType()==Token.NAME&&lValue.getType()==Token.NAME&&firstClause.getString().equals(lValue.getString());if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){return secondClause.getJSType();}}}"
255	"public void test(){if(jsType!=null&&(name.getType()==Token.NAME||name.getType()==Token.STRING)){thisType.defineDeclaredProperty(name.getString(),jsType,member);}}"
256	"public void test(){Node fnNameNode=fnNode.getFirstChild();String fnName=fnNameNode.getString();if(!fnName.isEmpty()){Scope.Var fnVar=scope.getVar(fnName);if(fnVar==null||(fnVar.getNameNode()!=null&&fnVar.getInitialValue()!=fnNode)){defineSlot(fnNameNode,fnNode,fnNode.getJSType(),false);}}}"
257	"public void test(){if(childCount==2){add(regexp+last.getString());}else {Preconditions.checkState(childCount==1);add(regexp);}}"
258	"public void test(){if(type==Token.GET){Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());add(""get "");}else {Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());add(""set "");}String name=n.getString();}"
259	"public void test(){if(!Double.isNaN(d)){cc.addNumber(d);}else {addJsString(n.getString());}}"
260	"public void test(){add(""."");addIdentifier(last.getString());break;}"
261	"public void test(){Node replacementTemplate=replacements.get(node.getString());if(replacementTemplate!=null){Preconditions.checkState(parent.getType()!=Token.FUNCTION||parent.getType()!=Token.VAR||parent.getType()!=Token.CATCH);Node replacement=replacementTemplate.cloneTree();parent.replaceChild(node,replacement);return replacement;}}"
262	"public void test(){if(cArg!=null){argMap.put(fnArg.getString(),cArg);cArg=cArg.getNext();}else {Node srcLocation=callNode;argMap.put(fnArg.getString(),NodeUtil.newUndefinedNode(srcLocation));}}"
263	"public void test(){if(names.contains(n.getString())){if(canNameValueChange(n,parent)){unsafe.add(n.getString());}}}"
264	"public void test(){if(canNameValueChange(n,parent)){unsafe.add(n.getString());}}"
265	"public void test(){if(n.getType()==Token.NAME){String name=n.getString();if(parameters.contains(name)){parametersReferenced.add(name);}}else if(n.getType()==Token.THIS){parametersReferenced.add(THIS_MARKER);}}"
266	"public void test(){if(NodeUtil.isName(node)){String name=node.getString();return locals.contains(name);}}"
267	"public void test(){if(NodeUtil.isFunctionDeclaration(n)){names.add(n.getFirstChild().getString());}}"
268	"public void test(){if(n.getType()==Token.NAME){swtich (n.getParent().getType()){case Token.VAR :case Token.CATCH :names.add(n.getString());}}}"
269	"public void test(){if(inExterns){scope.declareSlot(name.getString(),n,createType(name,scope));}else {scope.declareSlot(name.getString(),n);if(name.getFirstChild()!=null){addActions(createAssignmentActions(name,name.getFirstChild(),n));}}}"
270	"public void test(){if(!n.getJSType().isNoObjectType()){ConcreteFunctionType type=createConcreteFunction(n,scope);scope.declareSlot(n.getFirstChild().getString(),n,type);if(inExterns&&type.getInstanceType()!=null){allInstantiatedTypes.add(type.getInstanceType());}}}"
271	"public void test(){if(type.isFunction()){if(lhs.getJSType()==null||!(lhs.getJSType() instanceof FunctionType)){break;}ConcreteType retType=createType(((FunctionType)lhs.getJSType().restrictByNotNullOrUndefined()).getReturnType());retType=createUnionWithSubTypes(retType);ConcreteType newret=type.toFunction().getReturnSlot().getType().unionWith(retType);((ConcreteScope)type.getScope()).declareSlot(ConcreteFunctionType.RETURN_SLOT_NAME,n,newret);}scope.declareSlot(lhs.getLastChild().getString(),n,type);}"
272	"public void test(){if(""call"".equals(first.getNext().getString())){if(first.getType()==Token.GETPROP){addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getFirstChild().getNext().getString()).setIsCallFunction().build());}else {addAction(new FunctionCallBuilder(first,receiver.getNext()).setIsCallFunction().build());}}else {addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getNext().getString()).build());}}"
273	"public void test(){if(first.getType()==Token.GETPROP){addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getFirstChild().getNext().getString()).setIsCallFunction().build());}else {addAction(new FunctionCallBuilder(first,receiver.getNext()).setIsCallFunction().build());}}"
274	"public void test(){if(parent.getType()==Token.CATCH&&parent.getFirstChild()==n){scope.declareSlot(n.getString(),n,createUnionWithSubTypes(createType(getTypeRegistry().getType(""Error"")).toInstance()));}}"
275	"public void test(){if(!inExterns&&lhs.getType()==Token.GETPROP){return getImplicitActionsFromProp(lhs.getFirstChild().getJSType(),lhs.getLastChild().getString(),n.getLastChild());}}"
276	"public void test(){if(recvType instanceof UnionType){List<Action> actions=Lists.newArrayList();for(JSType alt : ((UnionType)recvType).getAlternates()){actions.addAll(getImplicitActionsFromCall(n,alt));}return actions;}else if(!(recvType instanceof FunctionType)){return Lists.newArrayList();}ObjectType objType=ObjectType.cast(getJSType(receiver.getFirstChild()).restrictByNotNullOrUndefined());String prop=receiver.getLastChild().getString();}"
277	"public void test(){if(isGlobalThisObject(t,n)){exportedVariables.add(sibling.getString());}}"
278	"public void test(){if(n.getType()==Token.NAME){String varName=n.getString();if(varName.equals(GLOBAL_THIS_NAME)){return true;}}}"
279	"public void test(){if(objType==null||objType.getJSDocInfo()!=null){return ;}attachJSDocInfoToNominalTypeOrShape(objType,docInfo,n.getString());break;}"
280	"public void test(){String propName=n.getLastChild().getString();if(lhsType.hasOwnProperty(propName)){lhsType.setPropertyJSDocInfo(propName,docInfo);}}"
281	"public void test(){String oldName=n.getString();Property p=propertyMap.get(oldName);if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));if(!p.newName.equals(oldName)){n.setString(p.newName);compiler.reportCodeChange();}}}"
282	"public void test(){if(!key.isQuotedString()){JSType jstype=getJSType(n.getFirstChild());maybeMarkCandidate(key,jstype,t);}else {quotedNames.add(key.getString());}}"
283	"public void test(){if(child.getType()==Token.STRING){quotedNames.add(child.getString());}}"
284	"public void test(){String name=n.getString();if(!externedNames.contains(name)){stringNodesToRename.add(n);recordProperty(name,type);}}"
285	"public void test(){String oldName=n.getString();Property p=propertyMap.get(oldName);if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));n.setString(p.newName);changed=changed||!p.newName.equals(oldName);}}"
286	"public void test(){for(String oldName : firstArg.getString().split(""[.]"")){Property p=propertyMap.get(oldName);String replacement;if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));replacement=p.newName;}else {replacement=oldName;}if(sb.length()>0){sb.append('.');}sb.append(replacement);}}"
287	"public void test(){if(dest.getType()==Token.STRING){externedNames.add(dest.getString());}}"
288	"public void test(){if(!key.isQuotedString()){maybeMarkCandidate(key);}else {quotedNames.add(key.getString());}}"
289	"public void test(){if(child!=null&&child.getType()==Token.STRING){quotedNames.add(child.getString());}}"
290	"public void test(){if(fnName.getType()==Token.NAME&&RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())){callNodeToParentMap.put(n,parent);countCallCandidates(t,n);}}"
291	"public void test(){String name=n.getFirstChild().getString();if(RENAME_PROPERTY_FUNCTION_NAME.equals(name)){if(NodeUtil.isExpressionNode(parent)){parent.detachFromParent();}else {parent.removeChild(n);}compiler.reportCodeChange();}}"
292	"public void test(){if(parent.getType()==Token.NAME&&RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())){Node varNode=parent.getParent();if(varNode.getType()==Token.VAR){varNode.removeChild(parent);if(!varNode.hasChildren()){varNode.detachFromParent();}compiler.reportCodeChange();}}}"
293	"public void test(){String name=n.getString();if(!externedNames.contains(name)){stringNodesToRename.add(n);countPropertyOccurrence(name);}}"
294	"public void test(){for(String name : firstArg.getString().split(""[.]"")){if(!TokenStream.isJSIdentifier(name)){t.report(callNode,BAD_ARG,name);continue;}if(!externedNames.contains(name)){countPropertyOccurrence(name);}}}"
295	"public void test(){if(first.getType()==Token.NAME&&""eval"".equals(first.getString())){first.putBooleanProp(Node.DIRECT_EVAL,true);}}"
296	"public void test(){String argName=arg.getString();JSTypeExpression typeExpr=fnInfo==null?null:fnInfo.getParameterType(argName);if(convention.isOptionalParameter(arg)||typeExpr!=null&&typeExpr.isOptionalArg()){arg.putBooleanProp(Node.IS_OPTIONAL_PARAM,true);}}"
297	"public void test(){Preconditions.checkState(NodeUtil.isName(node));String name=node.getString();if(!jsScope.isDeclared(name,false)){return ;}}"
298	"public void test(){if(n.getType()!=Token.NAME||!n.getString().equals(ARGUMENT_ARRAY_ALIAS)||jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS,false)){return false;}else {return true;}}"
299	"public void test(){if(!n.getString().equals("""")){return new FunctionExpressionDefinition(parent,isExtern);}}"
300	"public void test(){if(!n.getString().equals("""")){return true;}}"
301	"public void test(){if(name1.hasChildren()&&maybeName2.getType()==Token.NAME&&name1.getString().equals(maybeName2.getString())){Node thenExpr=name1.removeChildren();Node elseExpr=elseAssign.getLastChild().detachFromParent();cond.detachFromParent();Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);var.detachFromParent();name1.addChildrenToBack(hookNode);parent.replaceChild(n,var);reportCodeChange();return var;}}"
302	"public void test(){if(name2.hasChildren()&&maybeName1.getType()==Token.NAME&&maybeName1.getString().equals(name2.getString())){Node thenExpr=thenAssign.getLastChild().detachFromParent();Node elseExpr=name2.removeChildren();cond.detachFromParent();Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);var.detachFromParent();name2.addChildrenToBack(hookNode);parent.replaceChild(n,var);reportCodeChange();return var;}}"
303	"public void test(){if(calledFn.getType()==Token.GETPROP&&calledFn.getLastChild().getString().startsWith(""on"")){return false;}}"
304	"public void test(){if(n.getFirstChild().getType()==Token.NAME){String className=n.getFirstChild().getString();if(STANDARD_OBJECT_CONSTRUCTORS.contains(className)){n.setType(Token.CALL);n.putBooleanProp(Node.FREE_CALL,true);reportCodeChange();}}}"
305	"public void test(){if(STANDARD_OBJECT_CONSTRUCTORS.contains(className)){n.setType(Token.CALL);n.putBooleanProp(Node.FREE_CALL,true);reportCodeChange();}}"
306	"public void test(){if(""Object"".equals(className)&&!constructorHasArgs){newLiteralNode=new Node(Token.OBJECTLIT);}else if(""Array"".equals(className)){Node arg0=constructorNameNode.getNext();FoldArrayAction action=isSafeToFoldArrayConstructor(arg0);if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS||action==FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS){newLiteralNode=new Node(Token.ARRAYLIT);n.removeChildren();if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS){newLiteralNode.addChildrenToFront(arg0);}}}}"
307	"public void test(){if(""Array"".equals(className)){Node arg0=constructorNameNode.getNext();FoldArrayAction action=isSafeToFoldArrayConstructor(arg0);if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS||action==FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS){newLiteralNode=new Node(Token.ARRAYLIT);n.removeChildren();if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS){newLiteralNode.addChildrenToFront(arg0);}}}}"
308	"public void test(){if(null==flags||"""".equals(flags.getString())){regexLiteral=new Node(Token.REGEXP,pattern);}else {if(!areValidRegexpFlags(flags.getString())){error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);return n;}if(!areSafeFlagsToFold(flags.getString())){return n;}n.removeChild(flags);regexLiteral=new Node(Token.REGEXP,pattern,flags);}}"
309	"public void test(){if(!areValidRegexpFlags(flags.getString())){error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);return n;}}"
310	"public void test(){if(!areSafeFlagsToFold(flags.getString())){return n;}}"
311	"public void test(){Renamer renamer=nameStack.peek().forChildScope();String name=n.getFirstChild().getString();if(name!=null&&!name.isEmpty()&&parent!=null&&!NodeUtil.isFunctionDeclaration(n)){renamer.addDeclaredName(name);}}"
312	"public void test(){if(NodeUtil.isVarDeclaration(n)){renamer.addDeclaredName(n.getString());}else if(NodeUtil.isFunctionDeclaration(n)){Node nameNode=n.getFirstChild();renamer.addDeclaredName(nameNode.getString());}}"
313	"public void test(){if(NodeUtil.isFunctionDeclaration(n)){Node nameNode=n.getFirstChild();renamer.addDeclaredName(nameNode.getString());}}"
314	"public void test(){if(NodeUtil.isReferenceName(node)){String name=node.getString();referencedNames.add(name);if(containsSeparator(name)){addCandidateNameReference(name,node);}}}"
315	"public void test(){name=n.getString();break;case Token.GETPROP :}"
316	"public void test(){if(name!=null){String key=n.getString();if(TokenStream.isJSIdentifier(key)){return name+'.';}}}"
317	"public void test(){if(!name.equals(anc.getString())){return Ref.Type.ALIASING_GET;}}"
318	"public void test(){if(left.getType()==Token.NAME&&right.getType()==Token.NAME&&left.getString().equals(right.getString())){subtree.getParent().replaceChild(subtree,right.detachFromParent());reportCodeChange();return right;}}"
319	"public void test(){if(NodeUtil.isName(lhsAssign)&&NodeUtil.isName(condition)){Node rhsAssign=getSimpleAssignmentValue(n);TernaryValue value=NodeUtil.getImpureBooleanValue(rhsAssign);if(value!=TernaryValue.UNKNOWN){int replacementConditionNodeType=(value.toBoolean(true))?Token.TRUE:Token.FALSE;condition.getParent().replaceChild(condition,new Node(replacementConditionNodeType));reportCodeChange();}}}"
320	"public void test(){ final Node body=args.getNext();String fnName=fnNameNode.getString();if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){declareVar(fnNameNode);}}"
321	"public void test(){CompilerInput input=compiler.getInput(inputId);String name=n.getString();if(scope.isDeclared(name,false)||(scope.isLocal()&&name.equals(ARGUMENTS))){redeclarationHandler.onRedeclaration(scope,name,n,input);}else {scope.declare(name,n,null,input);}}"
322	"public void test(){if(funType.getSource()==null){return nodeToInsertAfter;}String className=NodeUtil.getFunctionName(funType.getSource());if(className==null){return nodeToInsertAfter;}}"
323	"public void test(){if(className==null){return nodeToInsertAfter;}}"
324	"public void test(){if(className==null){return nodeToInsertAfter;}Node classNode=NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),className,-1,-1);Node marker=Node.newString(interfaceType==null?""instance_of__""+className:""implements__""+interfaceType.getReferenceName());}"
325	"public void test(){if(node.getType()==Token.NAME){String arg=node.getString();if(arg.equalsIgnoreCase(phRef.getName())){partNode=Node.newString(Token.NAME,arg);}}}"
326	"public void test(){if(key.getString().equals(phRef.getName())){Node valueNode=key.getFirstChild();partNode=valueNode.cloneTree();}}"
327	"public void test(){if(child.getFirstChild()==null){blacklistedVars.add(t.getScope().getVar(child.getString()));}}"
328	"public void test(){if(!NodeUtil.isName(lhs)){return false;}Var var=s.getVar(lhs.getString());return var!=null&&var.getScope()==s&&!blacklistedVars.contains(var);}"
329	"public void test(){swtich (node.getType()){case Token.NAME :case Token.STRING :return node.getString();default :return new CodePrinter.Builder(node).build();}}"
330	"public void test(){String pattern=subtree.getFirstChild().getString();String flags=subtree.getChildCount()==2?subtree.getLastChild().getString():"""";RegExpTree regexTree;}"
331	"public void test(){Var v=t.getScope().getVar(n.getString());if(v==null){if(!noVarCheck){t.report(n,UNKNOWN_VARIABLE,n.getString());}}}"
332	"public void test(){if(!noVarCheck){t.report(n,UNKNOWN_VARIABLE,n.getString());}}"
333	"public void test(){if(""eval"".equals(n.getString())){t.report(n,EVAL_USE);}else if(n.getString().endsWith(""__"")){t.report(n,ILLEGAL_NAME);}}"
334	"public void test(){if(n.getString().endsWith(""__"")){t.report(n,ILLEGAL_NAME);}}"
335	"public void test(){if(""arguments"".equals(n.getFirstChild().getString())){t.report(n,ARGUMENTS_ASSIGNMENT);}else if(""eval"".equals(n.getFirstChild().getString())){if(noCajaChecks){t.report(n,EVAL_ASSIGNMENT);}}}"
336	"public void test(){if(""eval"".equals(n.getFirstChild().getString())){if(noCajaChecks){t.report(n,EVAL_ASSIGNMENT);}}}"
337	"public void test(){if(n.getFirstChild().getType()==Token.NAME){Var v=t.getScope().getVar(n.getFirstChild().getString());if(v!=null){t.report(n,DELETE_VARIABLE);}}}"
338	"public void test(){if(!noCajaChecks&&key.getString().endsWith(""__"")){t.report(key,ILLEGAL_NAME);}}"
339	"public void test(){if(getters.contains(key.getString())){t.report(key,DUPLICATE_OBJECT_KEY);}else {getters.add(key.getString());}}"
340	"public void test(){if(setters.contains(key.getString())){t.report(key,DUPLICATE_OBJECT_KEY);}else {setters.add(key.getString());}}"
341	"public void test(){if(n.getFirstChild().getString().endsWith(""__"")){if(!noCajaChecks){t.report(n.getFirstChild(),ILLEGAL_NAME);}}}"
342	"public void test(){if(""eval"".equals(n.getString())){t.report(n,EVAL_DECLARATION);}else if(""arguments"".equals(n.getString())){t.report(n,ARGUMENTS_DECLARATION);}else if(n.getString().endsWith(""__"")){if(!noCajaChecks){t.report(n,ILLEGAL_NAME);}}}"
343	"public void test(){if(""arguments"".equals(n.getString())){t.report(n,ARGUMENTS_DECLARATION);}else if(n.getString().endsWith(""__"")){if(!noCajaChecks){t.report(n,ILLEGAL_NAME);}}}"
344	"public void test(){if(n.getString().endsWith(""__"")){if(!noCajaChecks){t.report(n,ILLEGAL_NAME);}}}"
345	"public void test(){if(n.getLastChild().getString().endsWith(""__"")){if(!noCajaChecks){t.report(n.getLastChild(),ILLEGAL_NAME);}}}"
346	"public void test(){if(root.getType()==Token.NAME){staleVars.add(scope.getVar(root.getString()));}}"
347	"public void test(){if(!inlineAllStrings&&!var.isDefine()){int len=var.getInitialValue().getString().length()+""\'\'"".length();int noInlineBytes=""var xx=;"".length()+len;int inlineBytes=(len-1)*(refs.size()-1);return noInlineBytes>=inlineBytes;}}"
348	"public void test(){if(n.getString().equals(""arguments"")){v=t.getScope().getArgumentsVar();}else {v=t.getScope().getVar(n.getString());}}"
349	"public void test(){if(flags.version){ResourceBundle config=ResourceBundle.getBundle(configResource);err.println(""Closure Compiler (http://code.google.com/closure/compiler)\n""+""Version: ""+config.getString(""compiler.version""));err.flush();}}"
350	"public void test(){if(n.getFirstChild().hasChildren()&&n.getFirstChild().getFirstChild().getType()!=Token.ASSIGN){export=n.getFirstChild().getString();context=new GenerateNodeContext(n,parent,n);}}"
351	"public void test(){if(!key.isQuotedString()){setOriginalName(key,key.getString());}}"
352	"public void test(){if(codingConvention.isOptionalParameter(param)){return true;}String paramName=param.getString();return info!=null&&info.hasParameterType(paramName)&&info.getParameterType(paramName).isOptionalArg();}"
353	"public void test(){if(codingConvention.isVarArgsParameter(param)){return true;}String paramName=param.getString();return info!=null&&info.hasParameterType(paramName)&&info.getParameterType(paramName).isVarArgs();}"
354	"public void test(){if(NodeUtil.isFunction(n)&&isConstructor(n)){func=n;funcName=n.getFirstChild().getString();}else if(NodeUtil.isAssign(n)&&NodeUtil.isFunction(n.getFirstChild().getNext())){func=n.getFirstChild().getNext();funcName=n.getFirstChild().getQualifiedName();}}"
355	"public void test(){if((llhs.getType()==Token.THIS)&&(lrhs.getType()==Token.STRING)){return flowThrough(rhs,input.copyAndAdd(lrhs.getString()));}}"
356	"public void test(){if((stringNode.getType()!=Token.STRING)||(functionName.getType()!=Token.STRING)){return subtree;}String functionNameString=functionName.getString();Node firstArg=callTarget.getNext();}"
357	"public void test(){if(!NodeUtil.isName(callTarget)){return subtree;}String functionNameString=callTarget.getString();Node firstArgument=callTarget.getNext();}"
358	"public void test(){String lowered=stringNode.getString().toLowerCase(ROOT_LOCALE);Node replacement=Node.newString(lowered);subtree.getParent().replaceChild(subtree,replacement);reportCodeChange();return replacement;}"
359	"public void test(){String uppered=stringNode.getString().toUpperCase(ROOT_LOCALE);Node replacement=Node.newString(uppered);subtree.getParent().replaceChild(subtree,replacement);reportCodeChange();return replacement;}"
360	"public void test(){if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals(""join"")){return n;}}"
361	"public void test(){int start,length;String stringAsString=stringNode.getString();if(arg1!=null&&arg1.getType()==Token.NUMBER){start=(int)arg1.getDouble();}else {return n;}}"
362	"public void test(){int start,end;String stringAsString=stringNode.getString();if(arg1!=null&&arg1.getType()==Token.NUMBER){start=(int)arg1.getDouble();}else {return n;}}"
363	"public void test(){if(value!=null&&!NodeUtil.evaluatesToLocalValue(value)){Scope scope=traversal.getScope();Var var=scope.getVar(node.getString());sideEffectInfo.blacklistLocal(var);}}"
364	"public void test(){Var var=scope.getVar(lhs.getString());if(var==null||var.scope!=scope){sideEffectInfo.setTaintsGlobalState();}else {Preconditions.checkState(NodeUtil.isAssignmentOp(op)||isIncDec(op));if(rhs!=null&&NodeUtil.isAssign(op)&&!NodeUtil.evaluatesToLocalValue(rhs)){sideEffectInfo.blacklistLocal(var);}}}"
365	"public void test(){if(NodeUtil.isName(objectNode)){var=scope.getVar(objectNode.getString());}}"
366	"public void test(){String name=objectNode.getString();if(!caller.mutatesGlobalState()){caller.setTaintsGlobalState();changed=true;}}"
367	"public void test(){if(!NodeUtil.isGet(callTarget)){return null;}String propString=callTarget.getLastChild().getString();if(propString.equals(""call"")||propString.equals(""apply"")){return callTarget.getNext();}else {return callTarget.getFirstChild();}}"
368	"public void test(){if(NodeUtil.isGet(callTarget)){String propString=callTarget.getLastChild().getString();if(propString.equals(""call"")||propString.equals(""apply"")){return true;}}}"
369	"public void test(){if(NodeUtil.isAssign(parent)&&NodeUtil.isName(parent.getFirstChild())){reassign=true;break;}else if(NodeUtil.isAssignmentOp(parent)&&parent.getLastChild()==prevParent){if(lastAssign==null){nested=true;}lastAssign=parent;}}"
370	"public void test(){if(!name.hasChildren()&&forVar.getString().equals(name.getString())){parent.removeChild(n);forNode.replaceChild(forVar,n);compiler.reportCodeChange();}}"
371	"public void test(){if(name.getType()==Token.NAME&&isNameAssignedTo(name.getString(),replacement)){return false;}}"
372	"public void test(){if(name.equals(node.getString())){return true;}}"
373	"public void test(){String propName=n.getLastChild().getString();if(objectType.getConstructor()!=null&&objectType.getConstructor().isInterface()){objectType=FunctionType.getTopDefiningInterface(objectType,propName);}else {while(objectType!=null&&!objectType.hasOwnProperty(propName)){objectType=objectType.getImplicitPrototype();}}}"
374	"public void test(){if(name.getString().isEmpty()){return false;}}"
375	"public void test(){Node name=function.getFirstChild();if(name.getString().isEmpty()){return false;}Node args=name.getNext();Node body=args.getNext();return containsName(body,name.getString());}"
376	"public void test(){if(n.getType()==Token.NAME&&n.getString().equals(name)){return true;}}"
377	"public void test(){if(value!=null&&NodeUtil.isName(value)&&value.getString().equals(paramNode.getString())){return true;}}"
378	"public void test(){if(NodeUtil.isName(rhs)&&rhs.getString().equals(paramNode.getString())){Node propertyName=lhs.getLastChild();return propertyName;}}"
379	"public void test(){Object originalName=accessNode.getProp(Node.ORIGINALNAME_PROP);String className=""?"";if(originalName!=null){className=originalName.toString();}}"
380	"public void test(){if(originalName!=null){className=originalName.toString();}}"
381	"public void test(){if(originalName!=null){className=originalName.toString();}NodeUtil.setDebugInformation(name.getFirstChild(),lhs,className+"".prototype"");assignment.replaceChild(lhs,name);}"
382	"public void test(){if(NodeUtil.isGetProp(useSite)){String propName=useSite.getLastChild().getString();if(propName.equals(""apply"")||propName.equals(""call"")){useSite=useSite.getFirstChild();}}}"
383	"public void test(){String name=node.getString();if(name!=null&&!name.isEmpty()){return name;}else {return null;}}"
384	"public void test(){if(NodeUtil.isGetProp(node)){return ""this.""+node.getLastChild().getString();}}"
385	"public void test(){if(NodeUtil.isGetProp(lValue)){partialName=lValue.getLastChild().getString();}else if(NodeUtil.isName(lValue)){partialName=lValue.getString();}else {return true;}}"
386	"public void test(){if(NodeUtil.isName(lValue)){partialName=lValue.getString();}else {return true;}}"
387	"public void test(){if(nameNode!=null&&NodeUtil.isName(nameNode)){String name=nameNode.getString();if(name.equals(NodeUtil.JSC_PROPERTY_NAME_FN)||name.equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){return false;}}}"
388	"public void test(){if(fn.getFirstChild().getString().isEmpty()&&(NodeUtil.isExprAssign(gramps)||NodeUtil.isName(parent))){return true;}}"
389	"public void test(){if(labelName==null){return !n.hasChildren();}else {return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());}}"
390	"public void test(){for(Node n : stringNodes){String oldName=n.getString();Property a=properties.get(oldName);if(a!=null&&a.newName!=null){n.setString(a.newName);changed=changed||!a.newName.equals(oldName);}}}"
391	"public void test(){if(dest.getType()==Token.STRING){reservedNames.add(dest.getString());}}"
392	"public void test(){if(dest.getType()==Token.STRING){String s=dest.getString();if(s.equals(""prototype"")){processPrototypeParent(parent,t.getInput());}else {markPropertyAccessCandidate(dest,t.getInput());}}}"
393	"public void test(){if(TokenStream.isJSIdentifier(child.getString())){markObjLitPropertyCandidate(child,t.getInput());}}"
394	"public void test(){if(TokenStream.isJSIdentifier(key.getString())){markPrototypePropertyCandidate(key,input);}}"
395	"public void test(){if(grandparent.getType()==Token.NAME&&grandparent.getString()==v.name){continue;}}"
396	"public void test(){if(version!=2){throw new SourceMapParseException(""Unknown version: ""+version);}String file=sourceMapRoot.getString(""file"");if(file.isEmpty()){throw new SourceMapParseException(""File entry is missing or empty"");}}"
397	"public void test(){if(names!=null){try{int nameIndex=entry.getInt(3);name=names.getString(nameIndex);}catch (JSONException e) {}}}"
398	"public void test(){if(names!=null){try{int nameIndex=entry.getInt(3);name=names.getString(nameIndex);}catch (JSONException e) {}}String sourceFile=sources.getString(entry.getInt(0));int lineNumber=entry.getInt(1);}"
399	"public void test(){if(!characterMap.containsKey(lineNumber)){try{characterMap.put(lineNumber,SourceMapLineDecoder.decodeLine(lineMaps.getString(lineNumber)));}catch (JSONException jse) {  throw new IllegalStateException(""JSON exception when retrieving line map"",jse);}}}"
400	"public void test(){if(mapArray.length()<3){parser.fail(""Invalid mapping array"");}String myFile=mapArray.getString(0);int line=mapArray.getInt(1);}"
401	"public void test(){if(version!=3){throw new SourceMapParseException(""Unknown version: ""+version);}String file=sourceMapRoot.getString(""file"");if(file.isEmpty()){throw new SourceMapParseException(""File entry is missing or empty"");}}"
402	"public void test(){String url=section.getString(""url"");mapSectionContents=sectionSupplier.getSourceMap(url);if(mapSectionContents==null){throw new SourceMapParseException(""Unable to retrieve: ""+url);}}"
403	"public void test(){if(section.has(""map"")){mapSectionContents=section.getString(""map"");}else {throw new SourceMapParseException(""Invalid map format: section must have either \'map\' or \'url\'"");}}"