1	"public void test(){if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){for(int i=0;i<charno;i++){char c=sourceExcerpt.charAt(i);if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}b.append(""^\n"");}}"
2	"public void test(){if(errors!=null&&errorsIndex<errors.length){assertEquals(errors[errorsIndex++],message);}else {fail(""extra error: ""+message);}}"
3	"public void test(){if(warnings!=null&&warningsIndex<warnings.length){assertEquals(warnings[warningsIndex++],message);}else {fail(""extra warning: ""+message);}}"
4	"public void test(){if(keyCountHint<0)Kit.codeBug();int minimalCapacity=keyCountHint*4/3;int i;for(i=2;(1<<i)<minimalCapacity;++i){}power=i;if(check&&power<2)Kit.codeBug();}"
5	"public void test(){for(int i=0;count!=0;++i){Object key=keys[i];if(key!=null&&key!=DELETED){if(key==UniqueTag.NULL_VALUE){key=null;}array[offset]=key;++offset;--count;}}}"
6	"public void test(){if(test==key||(values[N+index]==hash&&test.equals(key))){return index;}}"
7	"public void test(){if(keyCount*2>=occupiedCount){++power;}int N=1<<power;Object[] oldKeys=keys;int[] oldValues=values;int oldN=oldKeys.length;keys=new Object[N];values=new int[2*N];int remaining=keyCount;occupiedCount=keyCount=0;}"
8	"public void test(){for(int i=0;remaining!=0;++i){Object key=oldKeys[i];if(key!=null&&key!=DELETED){int keyHash=oldValues[oldN+i];int index=insertNewKey(key,keyHash);values[index]=oldValues[i];--remaining;}}}"
9	"public void test(){if(key!=null&&key!=DELETED){int keyHash=oldValues[oldN+i];int index=insertNewKey(key,keyHash);values[index]=oldValues[i];--remaining;}}"
10	"public void test(){for(int i=0;count!=0;++i){Object key=keys[i];if(key!=null&&key!=DELETED){--count;out.writeObject(key);out.writeInt(values[i]);}}}"
11	"public void test(){if(key!=null&&key!=DELETED){--count;out.writeObject(key);out.writeInt(values[i]);}}"
12	"public void test(){if(caseExpression!=null){caseNode=new Node(Token.CASE,caseExpression,lineno,charno);}else {caseNode=new Node(Token.DEFAULT,lineno,charno);}}"
13	"public void test(){int type;if(parser.insideFunction()){type=Token.EXPR_VOID;}else {type=Token.EXPR_RESULT;}return new Node(type,expr,lineno,charno);}"
14	"public void test(){setRequiresActivation();Node n=createUnary(Token.DEFAULTNAMESPACE,expr,lineno,charno);Node result=createExprStatement(n,lineno,charno);return result;}"
15	"public void test(){checkActivationName(name,Token.NAME);return Node.newString(Token.NAME,name,lineno,charno);}"
16	"public void test(){Node n=createName(name,lineno,charno);if(info!=null){n.setJSDocInfo(info);}return n;}"
17	"public void test(){Node result=new Node(Token.BREAK,lineno,charno);if(label==null){return result;}else {Node name=Node.newString(Token.NAME,label,lineno,charno);result.addChildToBack(name);return result;}}"
18	"public void test(){if(label==null){return result;}else {Node name=Node.newString(Token.NAME,label,lineno,charno);result.addChildToBack(name);return result;}}"
19	"public void test(){Node result=new Node(Token.CONTINUE,lineno,charno);if(label==null){return result;}else {Node name=Node.newString(Token.NAME,label,lineno,charno);result.addChildToBack(name);return result;}}"
20	"public void test(){FunctionNode fnNode=new FunctionNode(name,lineno,charno);fnNode.addChildToBack(createName(name,lineno,charno));return fnNode;}"
21	"public void test(){for(int i=0;i!=functionCount;++i){FunctionNode fn=fnNode.getFunctionNode(i);if(fn.getFunctionType()==FunctionNode.FUNCTION_EXPRESSION_STATEMENT){String name=fn.getFunctionName();if(name!=null&&name.length()!=0){fnNode.removeParamOrVar(name);}}}}"
22	"public void test(){if(name!=null&&name.length()!=0){fnNode.removeParamOrVar(name);}}"
23	"public void test(){if(finallyBlock==null){return new Node(Token.TRY,tryBlock,catchBlocks,lineno,charno);}}"
24	"public void test(){if(finallyBlock==null){return new Node(Token.TRY,tryBlock,catchBlocks,lineno,charno);}return new Node(Token.TRY,tryBlock,catchBlocks,finallyBlock,lineno,charno);}"
25	"public void test(){setRequiresActivation();Node result=new Node(Token.DOTQUERY,obj,body,lineno,charno);return result;}"
26	"public void test(){int length=elems.size();int[] skipIndexes=null;if(skipCount!=0){skipIndexes=new int[skipCount];}Node array=new Node(Token.ARRAYLIT,lineno,charno);for(int i=0,j=0;i!=length;++i){Node elem=(Node)elems.get(i);if(elem!=null){array.addChildToBack(elem);}else {skipIndexes[j]=i;++j;}}}"
27	"public void test(){if(skipCount!=0){skipIndexes=new int[skipCount];}Node array=new Node(Token.ARRAYLIT,lineno,charno);for(int i=0,j=0;i!=length;++i){Node elem=(Node)elems.get(i);if(elem!=null){array.addChildToBack(elem);}else {skipIndexes[j]=i;++j;}}}"
28	"public void test(){for(int i=0,j=0;i!=length;++i){Node elem=(Node)elems.get(i);if(elem!=null){array.addChildToBack(elem);}else {skipIndexes[j]=i;++j;}}}"
29	"public void test(){if(elem!=null){array.addChildToBack(elem);}else {skipIndexes[j]=i;++j;}}"
30	"public void test(){Node object=new Node(Token.OBJECTLIT,lineno,charno);for(int i=0;i<obj.size();i+=2){Node n=(Node)obj.get(i);object.addChildToBack(n);n=(Node)obj.get(i+1);object.addChildToBack(n);}return object;}"
31	"public void test(){if(ifFalse==null)return new Node(Token.IF,cond,ifTrue,lineno,charno);return new Node(Token.IF,cond,ifTrue,ifFalse,lineno,charno);}"
32	"public void test(){if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}else if(name.equals(""With"")){type=Node.SPECIALCALL_WITH;}}"
33	"public void test(){if(name.equals(""With"")){type=Node.SPECIALCALL_WITH;}}"
34	"public void test(){if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}}"
35	"public void test(){if(child.getType()==Token.NAME){String name=child.getString();if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}else if(name.equals(""With"")){type=Node.SPECIALCALL_WITH;}}else if(child.getType()==Token.GETPROP){String name=child.getLastChild().getString();if(name.equals(""eval"")){type=Node.SPECIALCALL_EVAL;}}Node node=new Node(nodeType,child,lineno,charno);}"
36	"public void test(){if(namespace==null&&memberTypeFlags==0){if(target==null)throw Kit.codeBug();return new Node(Token.GETELEM,target,elem,lineno,charno);}}"
37	"public void test(){if(namespace==null&&memberTypeFlags==0){if(target==null)throw Kit.codeBug();return new Node(Token.GETELEM,target,elem,lineno,charno);}return createMemberRefGet(target,namespace,elem,memberTypeFlags,lineno,charno);}"
38	"public void test(){if(namespace.equals(""*"")){nsNode=new Node(Token.NULL,lineno,charno);}else {nsNode=createName(namespace,lineno,charno);}}"
39	"public void test(){if(namespace==null){ref=new Node(Token.REF_NAME,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_NAME,nsNode,elem,lineno,charno);}}"
40	"public void test(){if(namespace==null){ref=new Node(Token.REF_MEMBER,target,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_MEMBER,target,nsNode,elem,lineno,charno);}}"
41	"public void test(){if(target==null){if(namespace==null){ref=new Node(Token.REF_NAME,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_NAME,nsNode,elem,lineno,charno);}}else {if(namespace==null){ref=new Node(Token.REF_MEMBER,target,elem,lineno,charno);}else {ref=new Node(Token.REF_NS_MEMBER,target,nsNode,elem,lineno,charno);}}if(memberTypeFlags!=0){ref.putIntProp(Node.MEMBER_TYPE_PROP,memberTypeFlags);}return new Node(Token.GET_REF,ref,lineno,charno);}"
42	"public void test(){Node temp;swtich (nodeType){case Token.DOT :nodeType=Token.GETPROP;Node idNode=right;idNode.setType(Token.STRING);break;case Token.LB :nodeType=Token.GETELEM;break;}return new Node(nodeType,left,right,lineno,charno);}"
43	"public void test(){int nodeType=left.getType();swtich (nodeType){case Token.NAME :case Token.GETPROP :case Token.GETELEM :break;default :parser.reportError(""msg.bad.assign.left"");}return new Node(Token.ASSIGN,left,right,lineno,charno);}"
44	"public void test(){if(""arguments"".equals(name)||(parser.compilerEnv.activationNames!=null&&parser.compilerEnv.activationNames.containsKey(name))){activation=true;}else if(""length"".equals(name)){if(token==Token.GETPROP&&parser.compilerEnv.getLanguageVersion()==Context.VERSION_1_2){activation=true;}}}"
45	"public void test(){if(""length"".equals(name)){if(token==Token.GETPROP&&parser.compilerEnv.getLanguageVersion()==Context.VERSION_1_2){activation=true;}}}"
46	"public void test(){for(int i=0;i!=N;++i){Object current=getImpl(i);if(current==obj||(current!=null&&current.equals(obj))){return i;}}}"
47	"public void test(){if(current==obj||(current!=null&&current.equals(obj))){return i;}}"
48	"public void test(){for(int i=size;i!=0;){--i;Object current=getImpl(i);if(current==obj||(current!=null&&current.equals(obj))){return i;}}}"
49	"public void test(){int alloc=data.length;if(alloc<required){if(alloc<=FIELDS_STORE_SIZE){alloc=FIELDS_STORE_SIZE*2;}else {alloc*=2;}if(alloc<required){alloc=required;}Object[] tmp=new Object[alloc];if(size>FIELDS_STORE_SIZE){System.arraycopy(data,0,tmp,0,size-FIELDS_STORE_SIZE);}data=tmp;}}"
50	"public void test(){int i=itsVariableNames.get(name,-1);if(i!=-1){itsVariables.remove(i);itsVariableNames.remove(name);ObjToIntMap.Iterator iter=itsVariableNames.newIterator();for(iter.start();!iter.done();iter.next()){int v=iter.getValue();if(v>i){iter.setValue(v-1);}}}}"
51	"public void test(){if(i!=-1){itsVariables.remove(i);itsVariableNames.remove(name);ObjToIntMap.Iterator iter=itsVariableNames.newIterator();for(iter.start();!iter.done();iter.next()){int v=iter.getValue();if(v>i){iter.setValue(v-1);}}}}"
52	"public void test(){if(v>i){iter.setValue(v-1);}}"
53	"public void test(){if(marker!=null){marker.annotation=new JSDocInfo.StringPosition();marker.annotation.setItem(annotation);marker.annotation.setPositionInformation(lineno,charno,lineno,charno+annotation.length());}}"
54	"public void test(){if(currentMarker!=null){currentMarker.name=new JSDocInfo.StringPosition();currentMarker.name.setItem(name);currentMarker.name.setPositionInformation(lineno,charno,lineno,charno+name.length());}}"
55	"public void test(){int savedOffset=getCurrentOffset();addToken(Token.FUNCTION);append((char)functionType);return savedOffset;}"
56	"public void test(){int offset=getCurrentOffset();append((char)FUNCTION_END);return offset;}"
57	"public void test(){if(!(0<=token&&token<=Token.LAST_TOKEN))throw new IllegalArgumentException();append((char)token);}"
58	"public void test(){if(!(0<=token&&token<=Token.LAST_TOKEN))throw new IllegalArgumentException();append((char)token);append((char)Token.EOL);}"
59	"public void test(){if(lbits<=Character.MAX_VALUE){append('S');append((char)lbits);}else {append('J');append((char)(lbits>>48));append((char)(lbits>>32));append((char)(lbits>>16));append((char)lbits);}}"
60	"public void test(){int L=str.length();int lengthEncodingSize=1;if(L>=0x8000){lengthEncodingSize=2;}int nextTop=sourceTop+lengthEncodingSize;if(nextTop>sourceBuffer.length){increaseSourceCapacity(nextTop);}if(L>=0x8000){sourceBuffer[sourceTop]=(char)(0x8000|(L>>>16));++sourceTop;}}"
61	"public void test(){if(nextTop>sourceBuffer.length){increaseSourceCapacity(nextTop);}}"
62	"public void test(){if(sourceTop==sourceBuffer.length){increaseSourceCapacity(sourceTop+1);}}"
63	"public void test(){if(sourceTop==sourceBuffer.length){increaseSourceCapacity(sourceTop+1);}sourceBuffer[sourceTop]=c;++sourceTop;}"
64	"public void test(){if(minimalCapacity<=sourceBuffer.length)Kit.codeBug();int newCapacity=sourceBuffer.length*2;if(newCapacity<minimalCapacity){newCapacity=minimalCapacity;}char[] tmp=new char[newCapacity];System.arraycopy(sourceBuffer,0,tmp,0,sourceTop);sourceBuffer=tmp;}"
65	"public void test(){int length=source.length();if(length==0){return """";}int indent=properties.getInt(INITIAL_INDENT_PROP,0);if(indent<0)throw new IllegalArgumentException();int indentGap=properties.getInt(INDENT_GAP_PROP,4);if(indentGap<0)throw new IllegalArgumentException();int caseGap=properties.getInt(CASE_GAP_PROP,2);if(caseGap<0)throw new IllegalArgumentException();}"
66	"public void test(){if(length==0){return """";}}"
67	"public void test(){if(printSource){System.err.println(""length:""+length);for(int i=0;i<length;++i){String tokenname=null;if(Token.printNames){tokenname=Token.name(source.charAt(i));}if(tokenname==null){tokenname=""---"";}String pad=tokenname.length()>7?""\t"":""\t\t"";System.err.println(tokenname+pad);}System.err.println();}}"
68	"public void test(){for(int i=0;i<length;++i){String tokenname=null;if(Token.printNames){tokenname=Token.name(source.charAt(i));}if(tokenname==null){tokenname=""---"";}String pad=tokenname.length()>7?""\t"":""\t\t"";System.err.println(tokenname+pad);}}"
69	"public void test(){if(Token.printNames){tokenname=Token.name(source.charAt(i));}}"
70	"public void test(){int braceNesting=0;boolean afterFirstEOL=false;int i=0;int topFunctionType;if(source.charAt(i)==Token.SCRIPT){++i;topFunctionType=-1;}else {topFunctionType=source.charAt(i+1);}}"
71	"public void test(){if(source.charAt(i)==Token.SCRIPT){++i;topFunctionType=-1;}else {topFunctionType=source.charAt(i+1);}}"
72	"public void test(){if(!toSource){result.append('\n');for(int j=0;j<indent;j++)result.append(' ');}else {if(topFunctionType==FunctionNode.FUNCTION_EXPRESSION){result.append('(');}}}"
73	"public void test(){if(topFunctionType==FunctionNode.FUNCTION_EXPRESSION){result.append('(');}}"
74	"public void test(){if(justFunctionBody&&braceNesting==0)break;result.append('}');swtich (getNext(source,length,i)){case Token.EOL :case FUNCTION_END :indent-=indentGap;break;case Token.WHILE :case Token.ELSE :indent-=indentGap;result.append(' ');break;}}"
75	"public void test(){swtich (getNext(source,length,i)){case Token.EOL :case FUNCTION_END :indent-=indentGap;break;case Token.WHILE :case Token.ELSE :indent-=indentGap;result.append(' ');break;}}"
76	"public void test(){if(newLine){result.append('\n');}}"
77	"public void test(){if(i+1<length){int less=0;int nextToken=source.charAt(i+1);if(nextToken==Token.CASE||nextToken==Token.DEFAULT){less=indentGap-caseGap;}else if(nextToken==Token.RC){less=indentGap;}else if(nextToken==Token.NAME){int afterName=getSourceStringEnd(source,i+2);if(source.charAt(afterName)==Token.COLON)less=indentGap;}for(;less<indent;less++)result.append(' ');}}"
78	"public void test(){if(nextToken==Token.NAME){int afterName=getSourceStringEnd(source,i+2);if(source.charAt(afterName)==Token.COLON)less=indentGap;}}"
79	"public void test(){if(Token.EOL!=getNext(source,length,i)){result.append(' ');}}"
80	"public void test(){if(Token.EOL==getNext(source,length,i))result.append(':');else result.append("" : "");}"
81	"public void test(){default :throw new RuntimeException(""Token: ""+Token.name(source.charAt(i)));}"
82	"public void test(){if(topFunctionType==FunctionNode.FUNCTION_EXPRESSION){result.append(')');}}"
83	"public void test(){int length=source.charAt(offset);++offset;if((0x8000&length)!=0){length=((0x7fff&length)<<16)|source.charAt(offset);++offset;}if(sb!=null){String str=source.substring(offset,offset+length);if(!asQuotedString){sb.append(str);}else {sb.append('\""');sb.append(ScriptRuntime.escapeString(str));sb.append('\""');}}}"
84	"public void test(){if((0x8000&length)!=0){length=((0x7fff&length)<<16)|source.charAt(offset);++offset;}}"
85	"public void test(){if(sb!=null){String str=source.substring(offset,offset+length);if(!asQuotedString){sb.append(str);}else {sb.append('\""');sb.append(ScriptRuntime.escapeString(str));sb.append('\""');}}}"
86	"public void test(){if(!asQuotedString){sb.append(str);}else {sb.append('\""');sb.append(ScriptRuntime.escapeString(str));sb.append('\""');}}"
87	"public void test(){if(sb!=null){String str=source.substring(offset,offset+length);if(!asQuotedString){sb.append(str);}else {sb.append('\""');sb.append(ScriptRuntime.escapeString(str));sb.append('\""');}}return offset+length;}"
88	"public void test(){if(sb!=null){int ival=source.charAt(offset);number=ival;}}"
89	"public void test(){if(sb!=null){long lbits;lbits=(long)source.charAt(offset)<<48;lbits|=(long)source.charAt(offset+1)<<32;lbits|=(long)source.charAt(offset+2)<<16;lbits|=source.charAt(offset+3);if(type=='J'){number=lbits;}else {number=Double.longBitsToDouble(lbits);}}}"
90	"public void test(){if(sb!=null){sb.append(ScriptRuntime.numberToString(number,10));}}"
91	"public void test(){if(sourceReader!=null){if(sourceString!=null)Kit.codeBug();this.sourceReader=sourceReader;this.sourceBuffer=new char[512];this.sourceEnd=0;}else {if(sourceString==null)Kit.codeBug();this.sourceString=sourceString;this.sourceEnd=sourceString.length();}}"
92	"public void test(){if(s.charAt(0)=='i'){id=Id_if;break;}}"
93	"public void test(){if(s.charAt(0)=='i'){id=Id_in;break;}}"
94	"public void test(){if(s.charAt(0)=='d'){id=Id_do;break;}}"
95	"public void test(){if(s.charAt(2)=='r'&&s.charAt(1)=='o'){id=Id_for;break;}}"
96	"public void test(){if(s.charAt(2)=='t'&&s.charAt(1)=='n'){id=Id_int;break;}}"
97	"public void test(){if(s.charAt(2)=='w'&&s.charAt(1)=='e'){id=Id_new;break;}}"
98	"public void test(){if(s.charAt(2)=='y'&&s.charAt(1)=='r'){id=Id_try;break;}}"
99	"public void test(){if(s.charAt(2)=='r'&&s.charAt(1)=='a'){id=Id_var;break;}}"
100	"public void test(){if(s.charAt(2)=='s'&&s.charAt(1)=='a'){id=Id_case;break;}}"
101	"public void test(){if(s.charAt(2)=='a'&&s.charAt(1)=='h'){id=Id_char;break;}}"
102	"public void test(){if(s.charAt(2)=='s'&&s.charAt(1)=='l'){id=Id_else;break;}}"
103	"public void test(){if(s.charAt(2)=='u'&&s.charAt(1)=='n'){id=Id_enum;break;}}"
104	"public void test(){if(s.charAt(2)=='u'&&s.charAt(1)=='r'){id=Id_true;break;}}"
105	"public void test(){if(s.charAt(2)=='i'&&s.charAt(1)=='h'){id=Id_this;break;}}"
106	"public void test(){int length=s.length();if(length==0||!Character.isJavaIdentifierStart(s.charAt(0)))return false;for(int i=1;i<length;i++){char c=s.charAt(i);if(!Character.isJavaIdentifierPart(c)){if(c=='\\'){if(!((i+5)<length)&&(s.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){return true;}}return false;}}return true;}"
107	"public void test(){for(int i=1;i<length;i++){char c=s.charAt(i);if(!Character.isJavaIdentifierPart(c)){if(c=='\\'){if(!((i+5)<length)&&(s.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){return true;}}return false;}}}"
108	"public void test(){if(!Character.isJavaIdentifierPart(c)){if(c=='\\'){if(!((i+5)<length)&&(s.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){return true;}}return false;}}"
109	"public void test(){if(c=='\\'){if(!((i+5)<length)&&(s.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){return true;}}}"
110	"public void test(){if(!((i+5)<length)&&(s.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){return true;}}"
111	"public void test(){for(;;){charno=-1;c=getChar();if(c==EOF_CHAR){return Token.EOF;}else if(c=='\n'){dirtyLine=false;return Token.EOL;}else if(!isJSSpace(c)){if(c!='-'){dirtyLine=true;}break;}}}"
112	"public void test(){for(int i=0;i!=4;++i){c=getChar();escapeVal=Kit.xDigitToInt(c,escapeVal);if(escapeVal<0){break;}}}"
113	"public void test(){for(int i=0;i!=4;++i){c=getChar();escapeVal=Kit.xDigitToInt(c,escapeVal);if(escapeVal<0){continue strLoop;}addToString(c);}}"
114	"public void test(){for(;;){charno=-1;c=getChar();if(c==EOF_CHAR){return Token.EOF;}else if(c=='\n'){return Token.EOL;}else if(!isJSSpace(c)){break;}}}"
115	"public void test(){if(N==stringBuffer.length){char[] tmp=new char[stringBuffer.length*2];System.arraycopy(stringBuffer,0,tmp,0,N);stringBuffer=tmp;}}"
116	"public void test(){if(charno==-1){charno=getOffset();}}"
117	"public void test(){{if(sourceCursor==sourceEnd){hitEOF=true;if(charno==-1){charno=getOffset();}return EOF_CHAR;}c=sourceString.charAt(sourceCursor++);}}"
118	"public void test(){for(;lineEnd!=sourceEnd;++lineEnd){int c=sourceString.charAt(lineEnd);if(ScriptRuntime.isJSLineTerminator(c)){break;}}}"
119	"public void test(){for(;;++lineLength){int i=lineStart+lineLength;if(i==sourceEnd){try{if(!fillSourceBuffer()){break;}}catch (IOException ioe) {  break;}i=lineStart+lineLength;}int c=sourceBuffer[i];if(ScriptRuntime.isJSLineTerminator(c)){break;}}}"
120	"public void test(){if(i==sourceEnd){try{if(!fillSourceBuffer()){break;}}catch (IOException ioe) {  break;}i=lineStart+lineLength;}}"
121	"public void test(){if(sourceEnd==sourceBuffer.length){if(lineStart!=0){System.arraycopy(sourceBuffer,lineStart,sourceBuffer,0,sourceEnd-lineStart);sourceEnd-=lineStart;sourceCursor-=lineStart;lineStart=0;}else {char[] tmp=new char[sourceBuffer.length*2];System.arraycopy(sourceBuffer,0,tmp,0,sourceEnd);sourceBuffer=tmp;}}}"
122	"public void test(){if(lineStart!=0){System.arraycopy(sourceBuffer,lineStart,sourceBuffer,0,sourceEnd-lineStart);sourceEnd-=lineStart;sourceCursor-=lineStart;lineStart=0;}else {char[] tmp=new char[sourceBuffer.length*2];System.arraycopy(sourceBuffer,0,tmp,0,sourceEnd);sourceBuffer=tmp;}}"
123	"public void test(){if(sourceEnd==sourceBuffer.length){if(lineStart!=0){System.arraycopy(sourceBuffer,lineStart,sourceBuffer,0,sourceEnd-lineStart);sourceEnd-=lineStart;sourceCursor-=lineStart;lineStart=0;}else {char[] tmp=new char[sourceBuffer.length*2];System.arraycopy(sourceBuffer,0,tmp,0,sourceEnd);sourceBuffer=tmp;}}int n=sourceReader.read(sourceBuffer,sourceEnd,sourceBuffer.length-sourceEnd);if(n<0){return false;}}"
124	"public void test(){if(!(bag instanceof Object[])){bag=new Object[]{bag,listener};}else {Object[] array=(Object[])bag;int L=array.length;if(L<2)throw new IllegalArgumentException();Object[] tmp=new Object[L+1];System.arraycopy(array,0,tmp,0,L);tmp[L]=listener;bag=tmp;}}"
125	"public void test(){int i=L;do {--i;if(array[i]==listener){Object[] tmp=new Object[L-1];System.arraycopy(array,0,tmp,0,i);System.arraycopy(array,i+1,tmp,i,L-(i+1));bag=tmp;break;}} while(i!=0);}"
126	"public void test(){do {--i;if(array[i]==listener){Object[] tmp=new Object[L-1];System.arraycopy(array,0,tmp,0,i);System.arraycopy(array,i+1,tmp,i,L-(i+1));bag=tmp;break;}} while(i!=0);}"
127	"public void test(){if(array[i]==listener){Object[] tmp=new Object[L-1];System.arraycopy(array,0,tmp,0,i);System.arraycopy(array,i+1,tmp,i,L-(i+1));bag=tmp;break;}}"
128	"public void test(){if(index==1){if(!(bag instanceof Object[])){if(bag==null)throw new IllegalArgumentException();return null;}Object[] array=(Object[])bag;return array[1];}else {Object[] array=(Object[])bag;int L=array.length;if(L<2)throw new IllegalArgumentException();if(index==L)return null;return array[index];}}"
129	"public void test(){if(!(anotherObj instanceof ComplexKey))return false;ComplexKey another=(ComplexKey)anotherObj;return key1.equals(another.key1)&&key2.equals(another.key2);}"
130	"public void test(){for(;;){int n=r.read(buffer,cursor,buffer.length-cursor);if(n<0){break;}cursor+=n;if(cursor==buffer.length){char[] tmp=new char[buffer.length*2];System.arraycopy(buffer,0,tmp,0,cursor);buffer=tmp;}}}"
131	"public void test(){if(cursor==buffer.length){char[] tmp=new char[buffer.length*2];System.arraycopy(buffer,0,tmp,0,cursor);buffer=tmp;}}"
132	"public void test(){for(;;){int n=is.read(buffer,cursor,buffer.length-cursor);if(n<0){break;}cursor+=n;if(cursor==buffer.length){byte[] tmp=new byte[buffer.length*2];System.arraycopy(buffer,0,tmp,0,cursor);buffer=tmp;}}}"
133	"public void test(){if(cursor==buffer.length){byte[] tmp=new byte[buffer.length*2];System.arraycopy(buffer,0,tmp,0,cursor);buffer=tmp;}}"
134	"public void test(){if(cursor!=buffer.length){byte[] tmp=new byte[cursor];System.arraycopy(buffer,0,tmp,0,cursor);buffer=tmp;}}"
135	"public void test(){dbl_bits=new byte[8];k=lo0bits(y);y>>>=k;if(k!=0){stuffBits(dbl_bits,4,y|z<<(32-k));z>>=k;}else stuffBits(dbl_bits,4,y);stuffBits(dbl_bits,0,z);i=(z!=0)?2:1;}"
136	"public void test(){if(de!=0){e[0]=de-Bias+k;bits[0]=P-k;}else {e[0]=de-Bias+1+k;bits[0]=32*i-hi0bits(z);}}"
137	"public void test(){long dBits=Double.doubleToLongBits(d);dBits=((long)i<<32)|(dBits&0x0ffffffffL);return Double.longBitsToDouble(dBits);}"
138	"public void test(){int i=buf.length();while(i!=0){--i;char c=buf.charAt(i);if(c!='9'){buf.setCharAt(i,(char)(c+1));buf.setLength(i+1);return false;}}buf.setLength(0);return true;}"
139	"public void test(){while(i!=0){--i;char c=buf.charAt(i);if(c!='9'){buf.setCharAt(i,(char)(c+1));buf.setLength(i+1);return false;}}}"
140	"public void test(){if(c!='9'){buf.setCharAt(i,(char)(c+1));buf.setLength(i+1);return false;}}"
141	"public void test(){if((word0(d)&Exp_mask)==Exp_mask){buf.append(((word1(d)==0)&&((word0(d)&Frac_mask)==0))?""Infinity"":""NaN"");return 9999;}}"
142	"public void test(){if(d==0){buf.setLength(0);buf.append('0');return 1;}}"
143	"public void test(){if((i=(word0(d)>>>Exp_shift1&(Exp_mask>>Exp_shift1)))!=0){d2=setWord0(d,(word0(d)&Frac_mask1)|Exp_11);i-=Bias;denorm=false;}else {i=bbits[0]+be[0];x=(i>32)?word0(d)<<(64-i)|word1(d)>>>(i-32):word1(d)<<(32-i);d2=setWord0(x,word0(x)-31*Exp_msk1);i-=(Bias+(P-1)-1)+1;denorm=true;}}"
144	"public void test(){if((i=(word0(d)>>>Exp_shift1&(Exp_mask>>Exp_shift1)))!=0){d2=setWord0(d,(word0(d)&Frac_mask1)|Exp_11);i-=Bias;denorm=false;}else {i=bbits[0]+be[0];x=(i>32)?word0(d)<<(64-i)|word1(d)>>>(i-32):word1(d)<<(32-i);d2=setWord0(x,word0(x)-31*Exp_msk1);i-=(Bias+(P-1)-1)+1;denorm=true;}ds=(d2-1.5)*0.28952965+0.17609125+i*0.30103;k=(int)ds;}"
145	"public void test(){if(k>=0&&k<=Ten_pmax){if(d<tens[k])k--;k_check=false;}j=bbits[0]-i;if(j>=0){b2=0;s2=j;}else {b2=-j;s2=0;}}"
146	"public void test(){for(;(j!=0);j>>=1,i++)if((j&1)!=0){ieps++;ds*=bigtens[i];}}"
147	"public void test(){if((j&1)!=0){ieps++;ds*=bigtens[i];}}"
148	"public void test(){for(j=j1>>4;(j!=0);j>>=1,i++)if((j&1)!=0){ieps++;d*=bigtens[i];}}"
149	"public void test(){if((j&1)!=0){ieps++;d*=bigtens[i];}}"
150	"public void test(){if(d>eps){buf.append('1');k++;return k+1;}}"
151	"public void test(){if(d<-eps){buf.setLength(0);buf.append('0');return 1;}}"
152	"public void test(){while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}}"
153	"public void test(){if(buf.length()==0){k++;lastCh='0';break;}}"
154	"public void test(){if(1.0-d<eps){char lastCh;while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}buf.append((char)(lastCh+1));return k+1;}}"
155	"public void test(){if(i==ilim){if(d>0.5+eps){char lastCh;while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}buf.append((char)(lastCh+1));return k+1;}else if(d<0.5-eps){stripTrailingZeroes(buf);return k+1;}break;}}"
156	"public void test(){while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}buf.append((char)(lastCh+1));return k+1;}"
157	"public void test(){if(ilim<0||d<5*ds||(!biasUp&&d==5*ds)){buf.setLength(0);buf.append('0');return 1;}}"
158	"public void test(){if(ndigits<0&&ilim<=0){S=mhi=null;if(ilim<0||d<5*ds||(!biasUp&&d==5*ds)){buf.setLength(0);buf.append('0');return 1;}buf.append('1');k++;return k+1;}}"
159	"public void test(){if(i==ilim){d+=d;if((d>ds)||(d==ds&&(((L&1)!=0)||biasUp))){char lastCh;while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}buf.append((char)(lastCh+1));}break;}}"
160	"public void test(){if((d>ds)||(d==ds&&(((L&1)!=0)||biasUp))){char lastCh;while(true){lastCh=buf.charAt(buf.length()-1);buf.setLength(buf.length()-1);if(lastCh!='9')break;if(buf.length()==0){k++;lastCh='0';break;}}buf.append((char)(lastCh+1));}}"
161	"public void test(){if(mode<2){i=(denorm)?be[0]+(Bias+(P-1)-1+1):1+P-bbits[0];}else {j=ilim-1;if(m5>=j)m5-=j;else {s5+=j-=m5;b5+=j;m5=0;}if((i=ilim)<0){m2-=i;i=0;}}}"
162	"public void test(){if((i=ilim)<0){m2-=i;i=0;}}"
163	"public void test(){if(mode<2){i=(denorm)?be[0]+(Bias+(P-1)-1+1):1+P-bbits[0];}else {j=ilim-1;if(m5>=j)m5-=j;else {s5+=j-=m5;b5+=j;m5=0;}if((i=ilim)<0){m2-=i;i=0;}}b2+=i;}"
164	"public void test(){if(mode<2){i=(denorm)?be[0]+(Bias+(P-1)-1+1):1+P-bbits[0];}else {j=ilim-1;if(m5>=j)m5-=j;else {s5+=j-=m5;b5+=j;m5=0;}if((i=ilim)<0){m2-=i;i=0;}}b2+=i;s2+=i;mhi=BigInteger.valueOf(1);}"
165	"public void test(){if(m2>0&&s2>0){i=(m2<s2)?m2:s2;b2-=i;m2-=i;s2-=i;}}"
166	"public void test(){if(i>4){i-=4;b2+=i;m2+=i;s2+=i;}else if(i<4){i+=28;b2+=i;m2+=i;s2+=i;}}"
167	"public void test(){if(i<4){i+=28;b2+=i;m2+=i;s2+=i;}}"
168	"public void test(){if((ilim<0)||((i=b.compareTo(S=S.multiply(BigInteger.valueOf(5))))<0)){buf.setLength(0);buf.append('0');return 1;}}"
169	"public void test(){if(ilim<=0&&mode>2){if((ilim<0)||((i=b.compareTo(S=S.multiply(BigInteger.valueOf(5))))<0)){buf.setLength(0);buf.append('0');return 1;}buf.append('1');k++;return k+1;}}"
170	"public void test(){if(dig=='9'){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}}"
171	"public void test(){if(roundOff(buf)){k++;buf.append('1');}}"
172	"public void test(){if((j1==0)&&(mode==0)){if(dig=='9'){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}if(j>0)dig++;buf.append(dig);return k+1;}}"
173	"public void test(){if(((j1>0)||(j1==0&&(((dig&1)==1)||biasUp)))&&(dig++=='9')){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}}"
174	"public void test(){if((j<0)||((j==0)&&(mode==0))){if(j1>0){b=b.shiftLeft(1);j1=b.compareTo(S);if(((j1>0)||(j1==0&&(((dig&1)==1)||biasUp)))&&(dig++=='9')){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}}buf.append(dig);return k+1;}}"
175	"public void test(){if(j1>0){if(dig=='9'){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}buf.append((char)(dig+1));return k+1;}}"
176	"public void test(){if(j1>0){if(dig=='9'){buf.append('9');if(roundOff(buf)){k++;buf.append('1');}return k+1;}buf.append((char)(dig+1));return k+1;}buf.append(dig);if(i==ilim)break;}"
177	"public void test(){for(i=1;;i++){BigInteger[] divResult=b.divideAndRemainder(S);b=divResult[1];dig=(char)(divResult[0].intValue()+'0');buf.append(dig);if(i>=ilim)break;b=b.multiply(BigInteger.valueOf(10));}}"
178	"public void test(){if(roundOff(buf)){k++;buf.append('1');return k+1;}}"
179	"public void test(){if(exponentialNotation){if(nDigits!=1){buffer.insert(1,'.');}buffer.append('e');if((decPt-1)>=0)buffer.append('+');buffer.append(decPt-1);}else if(decPt!=nDigits){if(decPt>0){buffer.insert(decPt,'.');}else {for(int i=0;i<1-decPt;i++)buffer.insert(0,'0');buffer.insert(1,'.');}}}"
180	"public void test(){if(message.length()>0){message.append('\n');}}"
181	"public void test(){for(String error : errors){if(message.length()>0){message.append('\n');}message.append(error);}}"
182	"public void test(){if(compilerEnv.reportWarningAsError()){++syntaxErrorCount;errorReporter.error(message,sourceURI,lineno,code,charno);}else errorReporter.warning(message,sourceURI,lineno,code,charno);}"
183	"public void test(){Node switchNode=nf.createSwitch(lineno,charno);switchNode.addChildToBack(switchSelector);if(loopAndSwitchSet==null){loopAndSwitchSet=new ObjArray();}loopAndSwitchSet.push(switchNode);return switchNode;}"
184	"public void test(){guessingStatementEnd: for (; ; ) {  int tt=peekTokenOrEOL();  consumeToken();switch (tt) {case Token.ERROR:case Token.EOF:case Token.EOL:case Token.SEMI:    break guessingStatementEnd;}}return nf.createExprStatement(nf.createErrorName(),lineno,charno);}"
185	"public void test(){consumeToken();decompiler.addToken(Token.IF);int lineno=ts.getLineno();int charno=ts.getCharno();Node cond=condition();decompiler.addEOL(Token.LC);Node ifTrue=statement();Node ifFalse=null;if(matchToken(Token.ELSE)){decompiler.addToken(Token.RC);decompiler.addToken(Token.ELSE);decompiler.addEOL(Token.LC);ifFalse=statement();}}"
186	"public void test(){Node ifFalse=null;if(matchToken(Token.ELSE)){decompiler.addToken(Token.RC);decompiler.addToken(Token.ELSE);decompiler.addEOL(Token.LC);ifFalse=statement();}decompiler.addEOL(Token.RC);pn=nf.createIf(cond,ifTrue,ifFalse,lineno,charno);return pn;}"
187	"public void test(){decompiler.addToken(Token.WHILE);int lineno=ts.getLineno();int charno=ts.getCharno();Node cond=condition();decompiler.addEOL(Token.LC);Node body=statement();decompiler.addEOL(Token.RC);pn=nf.createWhile(cond,body,lineno,charno);return pn;}"
188	"public void test(){Node body=statement();decompiler.addToken(Token.RC);mustMatchToken(Token.WHILE,""msg.no.while.do"");decompiler.addToken(Token.WHILE);Node cond=condition();pn=nf.createDoWhile(body,cond,lineno,charno);matchToken(Token.SEMI);decompiler.addEOL(Token.SEMI);return pn;}"
189	"public void test(){if(ts.getString().equals(""each"")){isForEach=true;}else {reportError(""msg.no.paren.for"");}}"
190	"public void test(){if(incr==null){pn=nf.createForIn(init,cond,body,lineno,charno);}else {pn=nf.createFor(init,cond,incr,body,lineno,charno);}}"
191	"public void test(){if(matchToken(Token.FINALLY)){decompiler.addToken(Token.FINALLY);decompiler.addEOL(Token.LC);finallyblock=statement();decompiler.addEOL(Token.RC);}pn=nf.createTryCatchFinally(tryblock,catchblocks,finallyblock,lineno,charno);if(info!=null){pn.setJSDocInfo(info);}return pn;}"
192	"public void test(){consumeToken();int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.BREAK);String label=matchLabel();if(label!=null){decompiler.addToken(Token.NAME);decompiler.addName(label);}pn=nf.createBreak(label,lineno,charno);}"
193	"public void test(){int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.BREAK);String label=matchLabel();if(label!=null){decompiler.addToken(Token.NAME);decompiler.addName(label);}pn=nf.createBreak(label,lineno,charno);break;}"
194	"public void test(){consumeToken();int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.CONTINUE);String label=matchLabel();if(label!=null){decompiler.addToken(Token.NAME);decompiler.addName(label);}pn=nf.createContinue(label,lineno,charno);}"
195	"public void test(){int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.CONTINUE);String label=matchLabel();if(label!=null){decompiler.addToken(Token.NAME);decompiler.addName(label);}pn=nf.createContinue(label,lineno,charno);break;}"
196	"public void test(){++nestingOfWith;Node body;try{body=statement();}finally{  --nestingOfWith;}decompiler.addEOL(Token.RC);pn=nf.createWith(obj,body,lineno,charno);return pn;}"
197	"public void test(){swtich (tt){case Token.SEMI :case Token.RC :case Token.EOF :case Token.EOL :case Token.ERROR :retExpr=null;break;default :retExpr=expr(false);hasReturnValue=true;}pn=nf.createReturn(retExpr,lineno,charno);break;}"
198	"public void test(){mustHaveXML();decompiler.addToken(Token.DEFAULT);int lineno=ts.getLineno();int charno=ts.getCharno();if(!(matchToken(Token.NAME)&&ts.getString().equals(""xml""))){reportError(""msg.bad.namespace"");}decompiler.addName("" xml"");if(!(matchToken(Token.NAME)&&ts.getString().equals(""namespace""))){reportError(""msg.bad.namespace"");}}"
199	"public void test(){if(!(matchToken(Token.NAME)&&ts.getString().equals(""xml""))){reportError(""msg.bad.namespace"");}}"
200	"public void test(){if(!(matchToken(Token.NAME)&&ts.getString().equals(""namespace""))){reportError(""msg.bad.namespace"");}}"
201	"public void test(){if(!(matchToken(Token.NAME)&&ts.getString().equals(""namespace""))){reportError(""msg.bad.namespace"");}decompiler.addName("" namespace"");if(!matchToken(Token.ASSIGN)){reportError(""msg.bad.namespace"");}decompiler.addToken(Token.ASSIGN);Node expr=expr(false);pn=nf.createDefaultNamespace(expr,lineno,charno);break;}"
202	"public void test(){if(labelSet==null){labelSet=new Hashtable<String,Node>();}else if(labelSet.containsKey(name)){reportError(""msg.dup.label"");}labelSet.put(name,pn);pn=nf.createLabel(name,lineno,charno);try{nf.addChildToBack(pn,statementHelper(pn));}finally{  labelSet.remove(name);}return pn;}"
203	"public void test(){default :{int lineno=ts.getLineno();int charno=ts.getCharno();pn=expr(false);pn=nf.createExprStatement(pn,lineno,charno);break;}}"
204	"public void test(){Node init;mustMatchToken(Token.NAME,""msg.bad.var"");String s=ts.getString();int lineno=ts.getLineno();int charno=ts.getCharno();JSDocInfo info=ts.getAndResetJSDocInfo();if(!first)decompiler.addToken(Token.COMMA);first=false;decompiler.addName(s);}"
205	"public void test(){if(context==Token.CONST){if(!currentScriptOrFn.addConst(s)){if(currentScriptOrFn.addVar(s)!=ScriptOrFnNode.DUPLICATE_CONST)addError(""msg.var.redecl"",s);else addError(""msg.const.redecl"",s);}}else {int dupState=currentScriptOrFn.addVar(s);if(dupState==ScriptOrFnNode.DUPLICATE_CONST)addError(""msg.const.redecl"",s);else if(dupState==ScriptOrFnNode.DUPLICATE_PARAMETER)addStrictWarning(""msg.var.hides.arg"",s);else if(dupState==ScriptOrFnNode.DUPLICATE_VAR)addStrictWarning(""msg.var.redecl"",s);}name=nf.createTaggedName(s,info,lineno,charno);}"
206	"public void test(){Node pn=assignExpr(inForInit);int lineno=ts.getLineno();int charno=ts.getCharno();while(matchToken(Token.COMMA)){decompiler.addToken(Token.COMMA);if(compilerEnv.isStrictMode()&&!pn.hasSideEffects())addStrictWarning(""msg.no.side.effects"","""");pn=nf.createBinary(Token.COMMA,pn,assignExpr(inForInit),lineno,charno);}return pn;}"
207	"public void test(){while(matchToken(Token.COMMA)){decompiler.addToken(Token.COMMA);if(compilerEnv.isStrictMode()&&!pn.hasSideEffects())addStrictWarning(""msg.no.side.effects"","""");pn=nf.createBinary(Token.COMMA,pn,assignExpr(inForInit),lineno,charno);}}"
208	"public void test(){int lineno=ts.getLineno();int charno=ts.getCharno();if(Token.FIRST_ASSIGN<=tt&&tt<=Token.LAST_ASSIGN){consumeToken();JSDocInfo info=ts.getAndResetJSDocInfo();decompiler.addToken(tt);Node right=assignExpr(inForInit);pn=nf.createBinary(tt,pn,right,lineno,charno);if(info!=null){pn.setJSDocInfo(info);}}else if(tt==Token.SEMI&&pn.getType()==Token.GETPROP){if(ts.isPopulated()){pn.setJSDocInfo(ts.getAndResetJSDocInfo());}}}"
209	"public void test(){if(Token.FIRST_ASSIGN<=tt&&tt<=Token.LAST_ASSIGN){consumeToken();JSDocInfo info=ts.getAndResetJSDocInfo();decompiler.addToken(tt);Node right=assignExpr(inForInit);pn=nf.createBinary(tt,pn,right,lineno,charno);if(info!=null){pn.setJSDocInfo(info);}}else if(tt==Token.SEMI&&pn.getType()==Token.GETPROP){if(ts.isPopulated()){pn.setJSDocInfo(ts.getAndResetJSDocInfo());}}}"
210	"public void test(){if(matchToken(Token.HOOK)){int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.HOOK);Node ifTrue=assignExpr(false);mustMatchToken(Token.COLON,""msg.no.colon.cond"");decompiler.addToken(Token.COLON);Node ifFalse=assignExpr(inForInit);return nf.createCondExpr(pn,ifTrue,ifFalse,lineno,charno);}}"
211	"public void test(){if(matchToken(Token.OR)){int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.OR);pn=nf.createBinary(Token.OR,pn,orExpr(inForInit),lineno,charno);}}"
212	"public void test(){if(matchToken(Token.AND)){int lineno=ts.getLineno();int charno=ts.getCharno();decompiler.addToken(Token.AND);pn=nf.createBinary(Token.AND,pn,andExpr(inForInit),lineno,charno);}}"
213	"public void test(){if(compilerEnv.getLanguageVersion()==Context.VERSION_1_2){swtich (tt){case Token.EQ :parseToken=Token.SHEQ;break;case Token.NE :parseToken=Token.SHNE;break;case Token.SHEQ :decompilerToken=Token.EQ;break;case Token.SHNE :decompilerToken=Token.NE;break;}}decompiler.addToken(decompilerToken);pn=nf.createBinary(parseToken,pn,relExpr(inForInit),lineno,charno);continue;}"
214	"public void test(){{int tt=peekToken();lineno=ts.getLineno();charno=ts.getCharno();swtich (tt){case Token.IN :if(inForInit)break;case Token.INSTANCEOF :case Token.LE :case Token.LT :case Token.GE :case Token.GT :consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,shiftExpr(),lineno,charno);continue;}break;}}"
215	"public void test(){{Node pn=addExpr();int lineno;int charno;for(;;){int tt=peekToken();lineno=ts.getLineno();charno=ts.getCharno();swtich (tt){case Token.LSH :case Token.URSH :case Token.RSH :consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,addExpr(),lineno,charno);continue;}break;}return pn;}}"
216	"public void test(){lineno=ts.getLineno();charno=ts.getCharno();swtich (tt){case Token.LSH :case Token.URSH :case Token.RSH :consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,addExpr(),lineno,charno);continue;}}"
217	"public void test(){int lineno;int charno;for(;;){int tt=peekToken();lineno=ts.getLineno();charno=ts.getCharno();if(tt==Token.ADD||tt==Token.SUB){consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,mulExpr(),lineno,charno);continue;}break;}}"
218	"public void test(){for(;;){int tt=peekToken();lineno=ts.getLineno();charno=ts.getCharno();if(tt==Token.ADD||tt==Token.SUB){consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,mulExpr(),lineno,charno);continue;}break;}}"
219	"public void test(){if(tt==Token.ADD||tt==Token.SUB){consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,mulExpr(),lineno,charno);continue;}}"
220	"public void test(){{Node pn=unaryExpr();int lineno;int charno;for(;;){int tt=peekToken();lineno=ts.getLineno();charno=ts.getCharno();swtich (tt){case Token.MUL :case Token.DIV :case Token.MOD :consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,unaryExpr(),lineno,charno);continue;}break;}return pn;}}"
221	"public void test(){lineno=ts.getLineno();charno=ts.getCharno();swtich (tt){case Token.MUL :case Token.DIV :case Token.MOD :consumeToken();decompiler.addToken(tt);pn=nf.createBinary(tt,pn,unaryExpr(),lineno,charno);continue;}}"
222	"public void test(){if(tt==Token.INC||tt==Token.DEC){consumeToken();decompiler.addToken(tt);return nf.createIncDec(tt,true,pn,lineno,charno);}}"
223	"public void test(){int tt=ts.getFirstXMLToken();int lineno=ts.getLineno();int charno=ts.getCharno();if(tt!=Token.XML&&tt!=Token.XMLEND){reportError(""msg.syntax"");return null;}Node pnXML=nf.createLeaf(Token.NEW,lineno,charno);String xml=ts.getString();lineno=ts.getLineno();}"
224	"public void test(){int lineno=ts.getLineno();int charno=ts.getCharno();if(tt!=Token.XML&&tt!=Token.XMLEND){reportError(""msg.syntax"");return null;}Node pnXML=nf.createLeaf(Token.NEW,lineno,charno);String xml=ts.getString();lineno=ts.getLineno();charno=ts.getCharno();}"
225	"public void test(){if(tt!=Token.XML&&tt!=Token.XMLEND){reportError(""msg.syntax"");return null;}Node pnXML=nf.createLeaf(Token.NEW,lineno,charno);String xml=ts.getString();lineno=ts.getLineno();charno=ts.getCharno();boolean fAnonymous=xml.trim().startsWith(""<>"");Node pn=nf.createName(fAnonymous?""XMLList"":""XML"",lineno,charno);nf.addChildToBack(pnXML,pn);pn=null;}"
226	"public void test(){decompiler.addName(xml);mustMatchToken(Token.LC,""msg.syntax"");decompiler.addToken(Token.LC);expr=(peekToken()==Token.RC)?nf.createString("""",lineno,charno):expr(false);mustMatchToken(Token.RC,""msg.syntax"");decompiler.addToken(Token.RC);if(pn==null){pn=nf.createString(xml,lineno,charno);}else {pn=nf.createBinary(Token.ADD,pn,nf.createString(xml,lineno,charno),lineno,charno);}}"
227	"public void test(){if(pn==null){pn=nf.createString(xml,lineno,charno);}else {pn=nf.createBinary(Token.ADD,pn,nf.createString(xml,lineno,charno),lineno,charno);}}"
228	"public void test(){if(pn==null){pn=nf.createString(xml,lineno,charno);}else {pn=nf.createBinary(Token.ADD,pn,nf.createString(xml,lineno,charno),lineno,charno);}int nodeType;if(ts.isXMLAttribute()){nodeType=Token.ESCXMLATTR;}else {nodeType=Token.ESCXMLTEXT;}expr=nf.createUnary(nodeType,expr,lineno,charno);pn=nf.createBinary(Token.ADD,pn,expr,lineno,charno);break;case Token.XMLEND :}"
229	"public void test(){int nodeType;if(ts.isXMLAttribute()){nodeType=Token.ESCXMLATTR;}else {nodeType=Token.ESCXMLTEXT;}expr=nf.createUnary(nodeType,expr,lineno,charno);pn=nf.createBinary(Token.ADD,pn,expr,lineno,charno);break;case Token.XMLEND :}"
230	"public void test(){consumeToken();decompiler.addToken(Token.NEW);pn=nf.createLeaf(Token.NEW,lineno,charno);nf.addChildToBack(pn,memberExpr(false));if(matchToken(Token.LP)){decompiler.addToken(Token.LP);argumentList(pn);}tt=peekToken();if(tt==Token.LC){nf.addChildToBack(pn,primaryExpr());}}"
231	"public void test(){if(!compilerEnv.isXmlAvailable()){mustMatchToken(Token.NAME,""msg.no.name.after.dot"");s=ts.getString();decompiler.addName(s);pn=nf.createPropertyGet(pn,null,s,memberTypeFlags,lineno,charno,ts.getLineno(),ts.getCharno());break;}}"
232	"public void test(){if(s.equals(""get"")&&peekToken()==Token.NAME){decompiler.addToken(Token.GET);consumeToken();s=ts.getString();decompiler.addName(s);if(!getterSetterProperty(elems,s,true,linenoName,charnoName)){break;}break;}else if(s.equals(""set"")&&peekToken()==Token.NAME){decompiler.addToken(Token.SET);consumeToken();s=ts.getString();decompiler.addName(s);if(!getterSetterProperty(elems,s,false,linenoName,charnoName)){break;}break;}}"
233	"public void test(){if(s.equals(""set"")&&peekToken()==Token.NAME){decompiler.addToken(Token.SET);consumeToken();s=ts.getString();decompiler.addName(s);if(!getterSetterProperty(elems,s,false,linenoName,charnoName)){break;}break;}}"
234	"public void test(){String name=ts.getString();int lineno=ts.getLineno();int charno=ts.getCharno();if((ttFlagged&TI_CHECK_LABEL)!=0){if(peekToken()==Token.COLON){return nf.createLabel(name,lineno,charno);}}decompiler.addName(name);if(compilerEnv.isXmlAvailable()){pn=propertyName(null,name,0,lineno,charno);}else {pn=nf.createName(name,lineno,charno);}}"
235	"public void test(){if(peekToken()==Token.COLON){return nf.createLabel(name,lineno,charno);}}"
236	"public void test(){if(compilerEnv.isXmlAvailable()){pn=propertyName(null,name,0,lineno,charno);}else {pn=nf.createName(name,lineno,charno);}}"
237	"public void test(){if(fn.getFunctionName().length()!=0){reportError(""msg.bad.prop"");return false;}}"
238	"public void test(){FunctionNode fn=currentScriptOrFn.getFunctionNode(fnIndex);if(fn.getFunctionName().length()!=0){reportError(""msg.bad.prop"");return false;}elems.add(nf.createName(property,lineno,charno));if(isGetter){elems.add(nf.createUnary(Token.GET,f,lineno,charno));}else {elems.add(nf.createUnary(Token.SET,f,lineno,charno));}return true;}"
239	"public void test(){if(isGetter){elems.add(nf.createUnary(Token.GET,f,lineno,charno));}else {elems.add(nf.createUnary(Token.SET,f,lineno,charno));}}"
240	"public void test(){if(initialCapacity<0)Kit.codeBug();int minimalCapacity=initialCapacity*4/3;int i;for(i=2;(1<<i)<minimalCapacity;++i){}power=i;if(check&&power<2)Kit.codeBug();}"
241	"public void test(){if(keys.length!=N*2){int[] tmp=new int[N*2];System.arraycopy(keys,0,tmp,0,N);keys=tmp;}}"
242	"public void test(){for(int i=0;n!=0;++i){int entry=keys[i];if(entry!=EMPTY&&entry!=DELETED){result[--n]=entry;}}}"
243	"public void test(){for(int i=0,remaining=oldCount;remaining!=0;++i){int key=old[i];if(key!=EMPTY&&key!=DELETED){int index=insertNewKey(key);if(oldValues!=null){values[index]=oldValues[i];}if(oldShift!=0){keys[ivaluesShift+index]=old[oldShift+i];}--remaining;}}}"
244	"public void test(){if(oldValues!=null){values[index]=oldValues[i];}}"
245	"public void test(){if(oldShift!=0){keys[ivaluesShift+index]=old[oldShift+i];}}"
246	"public void test(){for(int i=0;count!=0;++i){int key=keys[i];if(key!=EMPTY&&key!=DELETED){--count;out.writeInt(key);if(hasIntValues){out.writeInt(keys[ivaluesShift+i]);}if(hasObjectValues){out.writeObject(values[i]);}}}}"
247	"public void test(){if(hasIntValues){out.writeInt(keys[ivaluesShift+i]);}}"
248	"public void test(){if(hasObjectValues){out.writeObject(values[i]);}}"
249	"public void test(){for(int i=0;i!=writtenKeyCount;++i){int key=in.readInt();int index=insertNewKey(key);if(hasIntValues){int ivalue=in.readInt();keys[ivaluesShift+index]=ivalue;}if(hasObjectValues){values[index]=in.readObject();}}}"
250	"public void test(){for(int i=0;;++i){Object l=Kit.getListener(listeners,i);if(l==null)break;if(l instanceof PropertyChangeListener){PropertyChangeListener pcl=(PropertyChangeListener)l;pcl.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));}}}"
251	"public void test(){for(int i=0;i<s.length();i++){char c=s.charAt(i);if(c==':')colon=i;else if(c=='(')open=i;else if(c==')')close=i;else if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}}"
252	"public void test(){{char c=s.charAt(i);if(c==':')colon=i;else if(c=='(')open=i;else if(c==')')close=i;else if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}}"
253	"public void test(){if(c==':')colon=i;else if(c=='(')open=i;else if(c==')')close=i;else if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}"
254	"public void test(){if(c=='(')open=i;else if(c==')')close=i;else if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}"
255	"public void test(){if(c==')')close=i;else if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}"
256	"public void test(){if(c=='\n'&&open!=-1&&close!=-1&&colon!=-1&&open<colon&&colon<close){String fileStr=s.substring(open+1,colon);if(!fileStr.endsWith("".java"")){String lineStr=s.substring(colon+1,close);try{linep[0]=Integer.parseInt(lineStr);if(linep[0]<0){linep[0]=0;}return fileStr;}catch (NumberFormatException e) {}}open=close=colon=-1;}}"
257	"public void test(){String details=details();if(sourceName==null||lineNumber<=0){return details;}StringBuilder buf=new StringBuilder(details);buf.append("" ("");if(sourceName!=null){buf.append(sourceName);}if(lineNumber>0){buf.append('#');buf.append(lineNumber);}buf.append(')');return buf.toString();}"
258	"public void test(){if(sourceName!=null){buf.append(sourceName);}}"
259	"public void test(){if(lineNumber>0){buf.append('#');buf.append(lineNumber);}}"
260	"public void test(){char digitMax='9';char lowerCaseBound='a';char upperCaseBound='A';int len=s.length();if(radix<10){digitMax=(char)('0'+radix-1);}if(radix>10){lowerCaseBound=(char)('a'+radix-10);upperCaseBound=(char)('A'+radix-10);}int end;}"
261	"public void test(){for(end=start;end<len;end++){char c=s.charAt(end);int newDigit;if('0'<=c&&c<=digitMax)newDigit=c-'0';else if('a'<=c&&c<lowerCaseBound)newDigit=c-'a'+10;else if('A'<=c&&c<upperCaseBound)newDigit=c-'A'+10;else break;sum=sum*radix+newDigit;}}"
262	"public void test(){if('0'<=c&&c<=digitMax)newDigit=c-'0';else if('a'<=c&&c<lowerCaseBound)newDigit=c-'a'+10;else if('A'<=c&&c<upperCaseBound)newDigit=c-'A'+10;else break;}"
263	"public void test(){if('a'<=c&&c<lowerCaseBound)newDigit=c-'a'+10;else if('A'<=c&&c<upperCaseBound)newDigit=c-'A'+10;else break;}"
264	"public void test(){if('A'<=c&&c<upperCaseBound)newDigit=c-'A'+10;else break;}"
265	"public void test(){if(bitShiftInChar==1){if(start==end)break;digit=s.charAt(start++);if('0'<=digit&&digit<='9')digit-='0';else if('a'<=digit&&digit<='z')digit-='a'-10;else digit-='A'-10;bitShiftInChar=radix;}}"
266	"public void test(){int c=s.charAt(i);if(' '<=c&&c<='~'&&c!=escapeQuote&&c!='\\'){if(sb!=null){sb.append((char)c);}continue;}if(sb==null){sb=new StringBuffer(L+3);sb.append(s);sb.setLength(i);}}"
267	"public void test(){if(sb!=null){sb.append((char)c);}}"
268	"public void test(){if(sb==null){sb=new StringBuffer(L+3);sb.append(s);sb.setLength(i);}}"
269	"public void test(){if(c<256){sb.append(""\\x"");hexSize=2;}else {sb.append(""\\u"");hexSize=4;}}"
270	"public void test(){for(int shift=(hexSize-1)*4;shift>=0;shift-=4){int digit=0xf&(c>>shift);int hc=(digit<10)?'0'+digit:'a'-10+digit;sb.append((char)hc);}}"
271	"public void test(){int L=s.length();if(L==0)return false;if(!Character.isJavaIdentifierStart(s.charAt(0)))return false;for(int i=1;i!=L;++i){if(!Character.isJavaIdentifierPart(s.charAt(i)))return false;}return !TokenStream.isKeyword(s);}"
272	"public void test(){for(int i=1;i!=L;++i){if(!Character.isJavaIdentifierPart(s.charAt(i)))return false;}}"
273	"public void test(){{ final int MAX_VALUE_LENGTH=10;int len=str.length();if(1<=len&&len<=MAX_VALUE_LENGTH){int c=str.charAt(0);c-='0';if(c==0){return (len==1)?0L:-1L;}if(1<=c&&c<=9){long v=c;for(int i=1;i!=len;++i){c=str.charAt(i)-'0';if(!(0<=c&&c<=9)){return -1;}v=10*v+c;}if((v>>>32)==0){return v;}}}return -1;}}"
274	"public void test(){int c=str.charAt(0);c-='0';if(c==0){return (len==1)?0L:-1L;}if(1<=c&&c<=9){long v=c;for(int i=1;i!=len;++i){c=str.charAt(i)-'0';if(!(0<=c&&c<=9)){return -1;}v=10*v+c;}if((v>>>32)==0){return v;}}}"
275	"public void test(){for(int i=1;i!=len;++i){c=str.charAt(i)-'0';if(!(0<=c&&c<=9)){return -1;}v=10*v+c;}}"
276	"public void test(){if(thatObj!=null&&thatObj.isNominalType()){return getReferenceName().equals(thatObj.getReferenceName());}}"
277	"public void test(){if(objType!=null){return objType.isNominalType()&&reference.equals(objType.getReferenceName());}}"
278	"public void test(){if(componentNames[0].length()==0){return null;}}"
279	"public void test(){for(int i=1;i<componentNames.length;i++){ObjectType parentClass=ObjectType.cast(value);if(parentClass==null){return null;}if(componentNames[i].length()==0){return null;}value=parentClass.getPropertyType(componentNames[i]);}}"
280	"public void test(){if(componentNames[i].length()==0){return null;}}"
281	"public void test(){if(!isForwardDeclared&&registry.isLastGeneration()){t.warning(""Bad type annotation. Unknown type ""+reference,sourceName,lineno,null,charno);}else {setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));if(registry.isLastGeneration()&&validator!=null){validator.apply(getReferencedType());}}}"
282	"public void test(){int i=0;int min=0;for(Node n : getParameters()){i++;if(!n.isOptionalArg()&&!n.isVarArgs()){min=i;}}return min;}"
283	"public void test(){for(Node n : getParameters()){i++;if(!n.isOptionalArg()&&!n.isVarArgs()){min=i;}}}"
284	"public void test(){if(!n.isOptionalArg()&&!n.isVarArgs()){min=i;}}"
285	"public void test(){if(""call"".equals(name)){Node params=getParametersNode();if(params==null){defineDeclaredProperty(name,new FunctionBuilder(registry).withReturnType(getReturnType()).build(),false,source);}else {params=params.cloneTree();Node thisTypeNode=Node.newString(Token.NAME,""thisType"");thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));params.addChildToFront(thisTypeNode);thisTypeNode.setOptionalArg(true);defineDeclaredProperty(name,new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(),false,source);}}else if(""apply"".equals(name)){FunctionParamBuilder builder=new FunctionParamBuilder(registry);builder.addOptionalParams(registry.createNullableType(getTypeOfThis()),registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));defineDeclaredProperty(name,new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(),false,source);}}"
286	"public void test(){if(""apply"".equals(name)){FunctionParamBuilder builder=new FunctionParamBuilder(registry);builder.addOptionalParams(registry.createNullableType(getTypeOfThis()),registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));defineDeclaredProperty(name,new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(),false,source);}}"
287	"public void test(){if(""prototype"".equals(name)){ObjectType objType=type.toObjectType();if(objType!=null){if(objType.isEquivalentTo(prototype)){return true;}return setPrototype(new FunctionPrototypeType(registry,this,objType,isNativeObjectType()));}else {return false;}}}"
288	"public void test(){if(that.isInterface()){return this.getReferenceName().equals(that.getReferenceName());}}"
289	"public void test(){if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){return ""Function"";}StringBuilder b=new StringBuilder(32);b.append(""function ("");int paramNum=call.parameters.getChildCount();boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();if(hasKnownTypeOfThis){if(isConstructor()){b.append(""new:"");}else {b.append(""this:"");}b.append(typeOfThis.toString());}}"
290	"public void test(){if(isConstructor()){b.append(""new:"");}else {b.append(""this:"");}}"
291	"public void test(){if(hasKnownTypeOfThis){if(isConstructor()){b.append(""new:"");}else {b.append(""this:"");}b.append(typeOfThis.toString());}}"
292	"public void test(){if(hasKnownTypeOfThis){b.append("", "");}}"
293	"public void test(){if(p.isVarArgs()){appendVarArgsString(b,p.getJSType());}else {b.append(p.getJSType().toString());}}"
294	"public void test(){while(p!=null){b.append("", "");if(p.isVarArgs()){appendVarArgsString(b,p.getJSType());}else {b.append(p.getJSType().toString());}p=p.getNext();}}"
295	"public void test(){if(paramType.isUnionType()){paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));}builder.append(""...["").append(paramType.toString()).append(""]"");}"
296	"public void test(){if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){return super.toDebugHashCodeString();}StringBuilder b=new StringBuilder(32);b.append(""function ("");int paramNum=call.parameters.getChildCount();boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();if(hasKnownTypeOfThis){b.append(""this:"");b.append(getDebugHashCodeStringOf(typeOfThis));}}"
297	"public void test(){if(hasKnownTypeOfThis){b.append(""this:"");b.append(getDebugHashCodeStringOf(typeOfThis));}}"
298	"public void test(){if(paramNum>0){if(hasKnownTypeOfThis){b.append("", "");}Node p=call.parameters.getFirstChild();b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();while(p!=null){b.append("", "");b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();}}}"
299	"public void test(){if(paramNum>0){if(hasKnownTypeOfThis){b.append("", "");}Node p=call.parameters.getFirstChild();b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();while(p!=null){b.append("", "");b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();}}b.append("")"");b.append("": "");}"
300	"public void test(){if(paramNum>0){if(hasKnownTypeOfThis){b.append("", "");}Node p=call.parameters.getFirstChild();b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();while(p!=null){b.append("", "");b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();}}b.append("")"");b.append("": "");b.append(getDebugHashCodeStringOf(call.returnType));}"
301	"public void test(){if(paramNum>0){if(hasKnownTypeOfThis){b.append("", "");}Node p=call.parameters.getFirstChild();b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();while(p!=null){b.append("", "");b.append(getDebugHashCodeStringOf(p.getJSType()));p=p.getNext();}}b.append("")"");b.append("": "");b.append(getDebugHashCodeStringOf(call.returnType));return b.toString();}"
302	"public void test(){if(!otherProps.keySet().equals(keySet)){return false;}}"
303	"public void test(){StringBuilder sb=new StringBuilder();sb.append(""{"");int i=0;for(String property : properties.keySet()){if(i>0){sb.append("", "");}sb.append(property);sb.append("": "");sb.append(properties.get(property).toString());++i;}sb.append(""}"");return sb.toString();}"
304	"public void test(){if(i>0){sb.append("", "");}}"
305	"public void test(){for(String property : properties.keySet()){if(i>0){sb.append("", "");}sb.append(property);sb.append("": "");sb.append(properties.get(property).toString());++i;}}"
306	"public void test(){if(UNKNOWN.equals(super.testForEquality(that))){return UNKNOWN;}}"
307	"public void test(){if(!result.equals(test)){return UNKNOWN;}}"
308	"public void test(){StringBuilder result=new StringBuilder();boolean firstAlternate=true;result.append(""("");SortedSet<JSType> sorted=new TreeSet<JSType>(ALPHA);sorted.addAll(alternates);for(JSType t : sorted){if(!firstAlternate){result.append(""|"");}result.append(t.toString());firstAlternate=false;}result.append("")"");return result.toString();}"
309	"public void test(){if(!firstAlternate){result.append(""|"");}}"
310	"public void test(){for(JSType t : sorted){if(!firstAlternate){result.append(""|"");}result.append(t.toString());firstAlternate=false;}}"
311	"public void test(){sb.append(""{"");int i=0;for(String property : propertyNames){if(i>0){sb.append("", "");}sb.append(property);sb.append("": "");sb.append(getPropertyType(property).toString());++i;if(i==MAX_PRETTY_PRINTED_PROPERTIES){sb.append("", ..."");break;}}}"
312	"public void test(){for(String property : propertyNames){if(i>0){sb.append("", "");}sb.append(property);sb.append("": "");sb.append(getPropertyType(property).toString());++i;if(i==MAX_PRETTY_PRINTED_PROPERTIES){sb.append("", ..."");break;}}}"
313	"public void test(){if(i==MAX_PRETTY_PRINTED_PROPERTIES){sb.append("", ..."");break;}}"
314	"public void test(){for(String property : propertyNames){if(i>0){sb.append("", "");}sb.append(property);sb.append("": "");sb.append(getPropertyType(property).toString());++i;if(i==MAX_PRETTY_PRINTED_PROPERTIES){sb.append("", ..."");break;}}sb.append(""}"");return sb.toString();}"
315	"public void test(){if(jsTypeName.equals(templateTypeName)){return templateType;}}"
316	"public void test(){if(type==null){NamedType namedType=new NamedType(this,jsTypeName,sourceName,lineno,charno);unresolvedNamedTypes.put(scope,namedType);type=namedType;}}"
317	"public void test(){FunctionParamBuilder builder=new FunctionParamBuilder(this);int max=parameterTypes.length-1;for(int i=0;i<=max;i++){if(lastVarArgs&&i==max){builder.addVarArgs(parameterTypes[i]);}else {builder.addRequiredParams(parameterTypes[i]);}}return builder.build();}"
318	"public void test(){for(int i=0;i<=max;i++){if(lastVarArgs&&i==max){builder.addVarArgs(parameterTypes[i]);}else {builder.addRequiredParams(parameterTypes[i]);}}}"
319	"public void test(){if(lastVarArgs&&i==max){builder.addVarArgs(parameterTypes[i]);}else {builder.addRequiredParams(parameterTypes[i]);}}"
320	"public void test(){if(typeList!=null&&(""Array"".equals(n.getString())||""Object"".equals(n.getString()))){JSType parameterType=createFromTypeNodesInternal(typeList.getLastChild(),sourceName,scope);namedType=new ParameterizedType(this,(ObjectType)namedType,parameterType);if(typeList.hasMoreThanOneChild()){JSType indexType=createFromTypeNodesInternal(typeList.getFirstChild(),sourceName,scope);namedType=new IndexedType(this,(ObjectType)namedType,indexType);}}}"
321	"public void test(){if(fieldName.startsWith(""\'"")||fieldName.startsWith(""\"""")){fieldName=fieldName.substring(1,fieldName.length()-1);}}"
322	"public void test(){super(type,lineno,charno);if(null==str){throw new IllegalArgumentException(""StringNode: str is null"");}this.str=str;}"
323	"public void test(){if(children.length!=0){this.first=children[0];this.last=children[children.length-1];for(int i=1;i<children.length;i++){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}children[i-1].next=children[i];Preconditions.checkArgument(children[i-1].parent==null);children[i-1].parent=this;}Preconditions.checkArgument(children[children.length-1].parent==null);children[children.length-1].parent=this;if(null!=this.last.next){throw new IllegalArgumentException(""duplicate child"");}}}"
324	"public void test(){this.first=children[0];this.last=children[children.length-1];for(int i=1;i<children.length;i++){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}children[i-1].next=children[i];Preconditions.checkArgument(children[i-1].parent==null);children[i-1].parent=this;}Preconditions.checkArgument(children[children.length-1].parent==null);}"
325	"public void test(){for(int i=1;i<children.length;i++){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}children[i-1].next=children[i];Preconditions.checkArgument(children[i-1].parent==null);children[i-1].parent=this;}}"
326	"public void test(){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}}"
327	"public void test(){this.last=children[children.length-1];for(int i=1;i<children.length;i++){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}children[i-1].next=children[i];Preconditions.checkArgument(children[i-1].parent==null);children[i-1].parent=this;}Preconditions.checkArgument(children[children.length-1].parent==null);children[children.length-1].parent=this;if(null!=this.last.next){throw new IllegalArgumentException(""duplicate child"");}}"
328	"public void test(){for(int i=1;i<children.length;i++){if(null!=children[i-1].next){throw new IllegalArgumentException(""duplicate child"");}children[i-1].next=children[i];Preconditions.checkArgument(children[i-1].parent==null);children[i-1].parent=this;}Preconditions.checkArgument(children[children.length-1].parent==null);children[children.length-1].parent=this;if(null!=this.last.next){throw new IllegalArgumentException(""duplicate child"");}}"
329	"public void test(){{sb.append(' ');if(first==null||first.getType()!=Token.NAME){sb.append(""<invalid>"");}else {sb.append(first.getString());}}}"
330	"public void test(){if(first==null||first.getType()!=Token.NAME){sb.append(""<invalid>"");}else {sb.append(first.getString());}}"
331	"public void test(){if(this instanceof FunctionNode){FunctionNode fn=(FunctionNode)this;sb.append(' ');sb.append(fn.getFunctionName());}}"
332	"public void test(){if(printSource){sb.append("" [source name: "");sb.append(sof.getSourceName());sb.append(""] [encoded source length: "");sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());sb.append(""] [base line: "");sb.append(sof.getBaseLineno());sb.append(""] [end line: "");sb.append(sof.getEndLineno());sb.append(']');}}"
333	"public void test(){if(type==Token.NUMBER){sb.append(' ');sb.append(getDouble());}}"
334	"public void test(){if(lineno!=-1){sb.append(' ');sb.append(lineno);}}"
335	"public void test(){if(jsTypeString!=null){sb.append("" : "");sb.append(jsTypeString);}}"
336	"public void test(){if(Token.printTrees){for(int i=0;i!=level;++i){sb.append(""    "");}sb.append(n.toString());sb.append('\n');for(Node cursor=n.getFirstChild();cursor!=null;cursor=cursor.getNext()){toStringTreeHelper(cursor,level+1,sb);}}}"
337	"public void test(){int charno=getCharno();if(charno==-1){charno=0;}sourcePosition=mergeLineCharNo(lineno,charno);}"
338	"public void test(){if(charno==-1){charno=0;}}"
339	"public void test(){if(lineno<0||charno<0){return -1;}else if((charno&~COLUMN_MASK)!=0){return lineno<<COLUMN_BITS|COLUMN_MASK;}else {return lineno<<COLUMN_BITS|(charno&COLUMN_MASK);}}"
340	"public void test(){if((charno&~COLUMN_MASK)!=0){return lineno<<COLUMN_BITS|COLUMN_MASK;}else {return lineno<<COLUMN_BITS|(charno&COLUMN_MASK);}}"
341	"public void test(){if(indices1.length!=indices2.length){return false;}else {for(int i=0;i<indices1.length;i++){if(indices1[i]!=indices2[i]){return false;}}}}"
342	"public void test(){for(int i=0;i<indices1.length;i++){if(indices1[i]!=indices2[i]){return false;}}}"
343	"public void test(){if(indices1[i]!=indices2[i]){return false;}}"
344	"public void test(){if(object instanceof NodeMismatch){NodeMismatch that=(NodeMismatch)object;return that.nodeA.equals(this.nodeA)&&that.nodeB.equals(this.nodeB);}}"
345	"public void test(){builder.append(""<ul>"");if(outEdges.size()>0){builder.append(""<li>REFERS TO:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : outEdges){generateEdgeReport(builder,edge.getDestination().getValue(),edge);}builder.append(""</ul>\n"");}if(inEdges.size()>0){builder.append(""<li>REFERENCED BY:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : inEdges){generateEdgeReport(builder,edge.getSource().getValue(),edge);}builder.append(""</ul>"");}}"
346	"public void test(){if(outEdges.size()>0){builder.append(""<li>REFERS TO:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : outEdges){generateEdgeReport(builder,edge.getDestination().getValue(),edge);}builder.append(""</ul>\n"");}}"
347	"public void test(){if(inEdges.size()>0){builder.append(""<li>REFERENCED BY:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : inEdges){generateEdgeReport(builder,edge.getSource().getValue(),edge);}builder.append(""</ul>"");}}"
348	"public void test(){if(outEdges.size()>0){builder.append(""<li>REFERS TO:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : outEdges){generateEdgeReport(builder,edge.getDestination().getValue(),edge);}builder.append(""</ul>\n"");}if(inEdges.size()>0){builder.append(""<li>REFERENCED BY:<br>\n"");builder.append(""<ul>"");for(DiGraphEdge<Name,Reference> edge : inEdges){generateEdgeReport(builder,edge.getSource().getValue(),edge);}builder.append(""</ul>"");}builder.append(""</ul>\n"");}"
349	"public void test(){if(defs.size()==0){builder.append(""<br>No definitions found<br>"");}else {builder.append(""<ul>"");for(DefinitionsRemover.Definition def : defs){Node fnDef=def.getRValue();String sourceFileName=getSourceFile(fnDef);builder.append(""<li> Defined: "");generateSourceReferenceLink(builder,sourceFileName,fnDef.getLineno(),fnDef.getCharno());}builder.append(""</ul>"");}}"
350	"public void test(){if(defType==null){builder.append("" (type: null) "");}else if(defType.isUnknownType()){builder.append("" (type: unknown) "");}else {builder.append("" (type: ""+defType.toString());}}"
351	"public void test(){if(defType.isUnknownType()){builder.append("" (type: unknown) "");}else {builder.append("" (type: ""+defType.toString());}}"
352	"public void test(){if(""arguments"".equals(n.getString())&&scope.isLocal()){Node lp=scope.getRootNode().getFirstChild().getNext();for(Node a=lp.getFirstChild();a!=null;a=a.getNext()){markReferencedVar(scope.getVar(a.getString()));}}}"
353	"public void test(){if(current.getType()==Token.GETPROP&&current.getLastChild().getString().equals(""prototype"")){current=current.getFirstChild();}}"
354	"public void test(){if(!source.equals(source2)){compiler.report(JSError.make(GENERATED_BAD_CODE,source,source2));throw new IllegalStateException(""Sanity Check failed"");}}"
355	"public void test(){if(OBJECT_PROPERTY_STRING.equals(n.getQualifiedName())){Node newName=Node.newString(Token.NAME,EXTERN_OBJECT_PROPERTY_STRING);newName.copyInformationFrom(n);parent.replaceChild(n,newName);compiler.reportCodeChange();return ;}}"
356	"public void test(){if(!EXTERN_OBJECT_PROPERTY_STRING.equals(objectName.getQualifiedName())){return ;}}"
357	"public void test(){Preconditions.checkArgument(ancestors.length>0);for(Node n : ancestors){if(n.getType()==Token.FUNCTION){break;}this.ancestors.add(0,n);}}"
358	"public void test(){if(curNode.getType()==Token.NAME&&varName.equals(curNode.getString())){lookAhead=null;return ;}}"
359	"public void test(){if(type==Token.NAME&&!varName.equals(nextNode.getString())){boolean blocked=false;if(nextParent==null){blocked=true;}else {boolean assignsName=(nextParent.getType()==Token.ASSIGN&&nextNode==nextParent.getFirstChild());boolean isVarDeclaration=(nextParent.getType()==Token.VAR);if(!assignsName&&!isVarDeclaration){blocked=true;}}if(blocked){lookAhead=null;return ;}}}"
360	"public void test(){if(""{...}"".equals(typeName)){newName=name;}else {newName=typeName.replaceAll(""[^\\w$]"",""_"")+""$"";}}"
361	"public void test(){if(""prototype"".equals(field)){return null;}}"
362	"public void test(){if(""prototype"".equals(field)||codingConvention.isSuperClassReference(field)){return type;}}"
363	"public void test(){if(rightVar==null||!leftVar.getName().equals(rightVar.getName())){return blindScope;}}"
364	"public void test(){if(restrictedLeftType!=null&&!restrictedLeftType.equals(leftType)){FlowScope informed=blindScope.createChildFlowScope();declareNameInScope(informed,left,restrictedLeftType);return informed;}}"
365	"public void test(){if(NodeUtil.isName(node)&&ARGUMENTS.equals(node.getString())){currentArgumentsAccess.add(node);}}"
366	"public void test(){if(prop.name.length()>=MIN_PROP_SIZE){if(prop.accessorCount>=requiredUsage){prop.aliasAccessor=true;}if(prop.mutatorCount>=requiredUsage){prop.aliasMutator=true;}}}"
367	"public void test(){boolean isCallTarget=(parent.getType()==Token.CALL)&&(parent.getFirstChild()==getPropNode);boolean isAssignTarget=NodeUtil.isAssignmentOp(parent)&&(parent.getFirstChild()==getPropNode);boolean isIncOrDec=(parent.getType()==Token.INC)||(parent.getType()==Token.DEC);return (propNameNode.getType()==Token.STRING)&&!isAssignTarget;}"
368	"public void test(){for(Symbol global : globals.values()){if(global.mutatorCount>0){continue;}int currentBytes=global.name.length()*global.accessorCount;int aliasedBytes=8+global.name.length();if(aliasedBytes<currentBytes){global.aliasAccessor=true;}}}"
369	"public void test(){if(node.getFirstChild().getType()==Token.GETPROP&&getPropertyName(node.getFirstChild()).equals(PROTOTYPE_PROPERTY)){grandparent=node.getFirstChild().getFirstChild().getQualifiedName();}}"
370	"public void test(){if(""addDependency"".equals(methodName)){CodingConvention convention=compiler.getCodingConvention();List<String> typeDecls=convention.identifyTypeDeclarationCall(n);if(typeDecls!=null){for(String typeDecl : typeDecls){compiler.getTypeRegistry().forwardDeclareType(typeDecl);}}parent.replaceChild(n,Node.newNumber(0));compiler.reportCodeChange();}else if(""setCssNameMapping"".equals(methodName)){processSetCssNameMapping(t,n,parent);}}"
371	"public void test(){if(""setCssNameMapping"".equals(methodName)){processSetCssNameMapping(t,n,parent);}}"
372	"public void test(){if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&""goog.base"".equals(n.getQualifiedName())){reportBadBaseClassUse(t,n,""May only be called directly."");}}"
373	"public void test(){if(""goog.inherits"".equals(callNode.getFirstChild().getQualifiedName())&&callNode.getLastChild().isQualifiedName()){baseClassNode=callNode.getLastChild();}}"
374	"public void test(){if(combined!=null&&!combined.equals(a.getValue()+""-"")){errors.add(""map(""+a.getKey());}}"
375	"public void test(){if(!NodeUtil.isName(date)||!""Date"".equals(date.getString())){return ;}}"
376	"public void test(){if(googNowQName==null||!""goog.now"".equals(googNowQName)||googNow.getNext()!=null){return ;}}"
377	"public void test(){if(name.equals(""RegExp"")&&t.getScope().getVar(name)==null){int parentType=parent.getType();boolean first=(n==parent.getFirstChild());if(!((parentType==Token.NEW&&first)||(parentType==Token.CALL&&first))){t.report(n,REGEXP_REFERENCE);globalRegExpPropertiesUsed=true;}}}"
378	"public void test(){if(blacklistRegex.length()!=0){this.blacklist=Pattern.compile(blacklistRegex).matcher("""");}else {this.blacklist=null;}}"
379	"public void test(){if(""undefined"".equals(str)){return ;}}"
380	"public void test(){if(info.numOccurrences>info.numOccurrencesInfrequentlyExecuted){return true;}int sizeOfLiteral=2+str.length();int sizeOfStrings=info.numOccurrences*sizeOfLiteral;int sizeOfVariable=3;int sizeOfAliases=6+sizeOfVariable;return sizeOfAliases<sizeOfStrings;}"
381	"public void test(){if(info.numOccurrences>1){sb.append(info.numOccurrences);sb.append("": "");sb.append(str);sb.append('\n');}}"
382	"public void test(){for(int i=0;i<limit;i++){char ch=s.charAt(i);if(protectHex){if((ch>='0'&&ch<='9')||(ch>='a'&&ch<='f')){sb.append('_');}protectHex=false;}if((ch>='0'&&ch<='9')||(ch>='A'&&ch<='Z')){sb.append(ch);}else {sb.append('$');sb.append(Integer.toHexString(ch));protectHex=true;}}}"
383	"public void test(){if((ch>='0'&&ch<='9')||(ch>='a'&&ch<='f')){sb.append('_');}}"
384	"public void test(){if((ch>='0'&&ch<='9')||(ch>='A'&&ch<='Z')){sb.append(ch);}else {sb.append('$');sb.append(Integer.toHexString(ch));protectHex=true;}}"
385	"public void test(){if(length==limit){return sb.toString();}}"
386	"public void test(){if(length==limit){return sb.toString();}CRC32 crc32=new CRC32();crc32.update(s.getBytes());long hash=crc32.getValue()&unitTestHashReductionMask;sb.append('_');sb.append(Long.toHexString(hash));String encoded=sb.toString();if(!usedHashedAliases.add(encoded)){encoded+=""_""+id;}return encoded;}"
387	"public void test(){CRC32 crc32=new CRC32();crc32.update(s.getBytes());long hash=crc32.getValue()&unitTestHashReductionMask;sb.append('_');sb.append(Long.toHexString(hash));String encoded=sb.toString();if(!usedHashedAliases.add(encoded)){encoded+=""_""+id;}return encoded;}"
388	"public void test(){this.type=type;this.node=node;this.description=type.format.format(arguments);this.lineNumber=lineno;this.charno=charno;this.sourceName=sourceName;this.level=level==null?type.level:level;}"
389	"public void test(){if(charno!=jsError.charno){return false;}}"
390	"public void test(){if(!description.equals(jsError.description)){return false;}}"
391	"public void test(){if(sourceName!=null?!sourceName.equals(jsError.sourceName):jsError.sourceName!=null){return false;}}"
392	"public void test(){if(!type.equals(jsError.type)){return false;}}"
393	"public void test(){int result=type.hashCode();result=31*result+description.hashCode();result=31*result+(sourceName!=null?sourceName.hashCode():0);result=31*result+lineNumber;result=31*result+level.hashCode();result=31*result+charno;return result;}"
394	"public void test(){if(!visibility.equals(JSDocInfo.Visibility.PRIVATE)){ctors.put(qualifiedName,name);}}"
395	"public void test(){if(functionName.length()==0){if(parent.getType()==Token.ASSIGN){Node lhs=parent.getFirstChild();String name=namer.getName(lhs);namer.setFunctionName(name,n);}else if(parent.getType()==Token.NAME){String name=namer.getName(parent);namer.setFunctionName(name,n);}}}"
396	"public void test(){if(propName.equals(""prototype"")){processPrototypeParent(t,parent);}else if(compiler.getCodingConvention().isExported(propName)){addGlobalUseOfSymbol(propName,t.getModule(),PROPERTY);}else {addSymbolUse(propName,t.getModule(),PROPERTY);}}"
397	"public void test(){for(int i=symbolStack.size()-1;i>=0;i--){NameContext context=symbolStack.get(i);context.name.readClosureVariables=true;if(context.scope==var.getScope()){break;}}}"
398	"public void test(){for(int i=symbolStack.size()-1;i>=0;i--){def=symbolStack.get(i).name;if(def!=anonymousNode){break;}}}"
399	"public void test(){if(!def.equals(info)){symbolGraph.connect(def,module,info);}}"
400	"public void test(){if(child.getType()==Token.STRING&&child.getString().equals(""prototype"")){return true;}}"
401	"public void test(){if(n==parent.getFirstChild()&&parent.getChildCount()==2&&n.getNext().getType()==Token.NAME&&""eval"".equals(n.getNext().getString())){return ;}}"
402	"public void test(){if((gramp==null)||(parent.getFirstChild()!=node)){return false;}Node functionNode=parent.getLastChild();if((functionNode==null)||!NodeUtil.isFunction(functionNode)){return false;}if(!NodeUtil.isGetProp(node)){return false;}Node nameNode=node.getFirstChild();return NodeUtil.isGetProp(nameNode)&&nameNode.getLastChild().getString().equals(""prototype"");}"
403	"public void test(){if(n.getType()!=Token.FUNCTION){return ;}int id=functionNames.getFunctionId(n);if(id<0){return ;}String compiledSource=compiler.toSource(n);JSModule module=t.getModule();mapBuilder.addEntry(FunctionInformationMap.Entry.newBuilder().setId(id).setSourceName(NodeUtil.getSourceName(n)).setLineNumber(n.getLineno()).setModuleName(moduleGraph==null?"""":module.getName()).setSize(compiledSource.length()).setName(functionNames.getFunctionName(n)).setCompiledSource(compiledSource).build());}"
404	"public void test(){if(methodName.equals(""inherits"")){return SubclassType.INHERITS;}else if(methodName.equals(""mixin"")){return SubclassType.MIXIN;}}"
405	"public void test(){if(methodName.equals(""mixin"")){return SubclassType.MIXIN;}}"
406	"public void test(){if((functionName).equals(qualifiedName)){className=callee.getNext().getString();}}"
407	"public void test(){if(""goog.addDependency"".equals(callName.getQualifiedName())&&n.getChildCount()>=3){Node typeArray=callName.getNext().getNext();if(typeArray.getType()==Token.ARRAYLIT){List<String> typeNames=Lists.newArrayList();for(Node name=typeArray.getFirstChild();name!=null;name=name.getNext()){if(name.getType()==Token.STRING){typeNames.add(name.getString());}}return typeNames;}}}"
408	"public void test(){if(!(""goog.addSingletonGetter"".equals(callName)||""goog$addSingletonGetter"".equals(callName))||callNode.getChildCount()!=2){return null;}}"
409	"public void test(){if(!""goog.reflect.object"".equals(callName.getQualifiedName())||callNode.getChildCount()!=3){return null;}}"
410	"public void test(){if(name.equals(""goog.bind"")||name.equals(""goog$bind"")){Node fn=callTarget.getNext();Node thisValue=safeNext(fn);Node parameters=safeNext(thisValue);return new Bind(fn,thisValue,parameters);}}"
411	"public void test(){if(name.equals(""goog.partial"")||name.equals(""goog$partial"")){Node fn=callTarget.getNext();Node thisValue=null;Node parameters=safeNext(fn);return new Bind(fn,thisValue,parameters);}}"
412	"public void test(){if(callTarget.getType()==Token.GETPROP&&callTarget.getLastChild().getString().equals(""bind"")&&callTarget.getFirstChild().getType()==Token.FUNCTION){Node fn=callTarget.getFirstChild();Node thisValue=callTarget.getNext();Node parameters=safeNext(thisValue);return new Bind(fn,thisValue,parameters);}}"
413	"public void test(){if(part.length()>0){return false;}}"
414	"public void test(){if(o==this)return true;if(!(o instanceof JsMessage))return false;JsMessage m=(JsMessage)o;return id.equals(m.id)&&key.equals(m.key)&&parts.equals(m.parts)&&(meaning==null?m.meaning==null:meaning.equals(m.meaning))&&placeholders.equals(m.placeholders)&&(desc==null?m.desc==null:desc.equals(m.desc))&&(sourceName==null?m.sourceName==null:sourceName.equals(m.sourceName))&&hidden==m.hidden;}"
415	"public void test(){if(part instanceof JsMessage.PlaceholderReference){sb.append(part.toString());}else {sb.append(part);}}"
416	"public void test(){StringBuilder out=new StringBuilder();out.append(name);if(prototypeNames.size()>0){out.append("" (CLASS)\n"");out.append("" - FUNCTIONS: "");Iterator<String> pIter=prototypeNames.iterator();while(pIter.hasNext()){out.append(pIter.next());if(pIter.hasNext()){out.append("", "");}}}return out.toString();}"
417	"public void test(){if(prototypeNames.size()>0){out.append("" (CLASS)\n"");out.append("" - FUNCTIONS: "");Iterator<String> pIter=prototypeNames.iterator();while(pIter.hasNext()){out.append(pIter.next());if(pIter.hasNext()){out.append("", "");}}}}"
418	"public void test(){while(pIter.hasNext()){out.append(pIter.next());if(pIter.hasNext()){out.append("", "");}}}"
419	"public void test(){if(pIter.hasNext()){out.append("", "");}}"
420	"public void test(){if(fromName.equals(toName)){return ;}}"
421	"public void test(){if(node.prototypeNames.size()>0){sb.append(""<li>PROTOTYPES: "");Iterator<String> protoIter=node.prototypeNames.iterator();while(protoIter.hasNext()){sb.append(protoIter.next());if(protoIter.hasNext()){sb.append("", "");}}}}"
422	"public void test(){while(protoIter.hasNext()){sb.append(protoIter.next());if(protoIter.hasNext()){sb.append("", "");}}}"
423	"public void test(){if(protoIter.hasNext()){sb.append("", "");}}"
424	"public void test(){if(refersTo.size()>0){sb.append(""<li>REFERS TO: "");Iterator<DiGraphEdge<JsName,RefType>> toIter=refersTo.iterator();while(toIter.hasNext()){sb.append(nameLink(toIter.next().getDestination().getValue().name));if(toIter.hasNext()){sb.append("", "");}}}}"
425	"public void test(){while(toIter.hasNext()){sb.append(nameLink(toIter.next().getDestination().getValue().name));if(toIter.hasNext()){sb.append("", "");}}}"
426	"public void test(){if(toIter.hasNext()){sb.append("", "");}}"
427	"public void test(){if(referencedBy.size()>0){sb.append(""<li>REFERENCED BY: "");Iterator<DiGraphEdge<JsName,RefType>> fromIter=refersTo.iterator();while(fromIter.hasNext()){sb.append(nameLink(fromIter.next().getDestination().getValue().name));if(fromIter.hasNext()){sb.append("", "");}}}}"
428	"public void test(){while(fromIter.hasNext()){sb.append(nameLink(fromIter.next().getDestination().getValue().name));if(fromIter.hasNext()){sb.append("", "");}}}"
429	"public void test(){if(fromIter.hasNext()){sb.append("", "");}}"
430	"public void test(){if(!bNameWasShortened&&n.getType()==Token.GETPROP&&parent.getType()==Token.ASSIGN&&""prototype"".equals(n.getLastChild().getString())){if(createNameInformation(t,n.getFirstChild(),n)!=null){name=rootNameNode.getString()+name;name=name.substring(0,name.length()-PROTOTYPE_SUFFIX_LEN);NameInformation nameInfo=new NameInformation();nameInfo.name=name;return nameInfo;}else {return null;}}}"
431	"public void test(){if(createNameInformation(t,n.getFirstChild(),n)!=null){name=rootNameNode.getString()+name;name=name.substring(0,name.length()-PROTOTYPE_SUFFIX_LEN);NameInformation nameInfo=new NameInformation();nameInfo.name=name;return nameInfo;}else {return null;}}"
432	"public void test(){String rootName=rootNameNode.getString();Var v=scope.getVar(rootName);boolean isExtern=(v==null&&externalNames.contains(rootName));boolean isGlobalRef=(v!=null&&v.isGlobal())||isExtern;if(!isGlobalRef){return null;}NameInformation nameInfo=new NameInformation();int idx=name.indexOf(PROTOTYPE_SUBSTRING);if(idx!=-1){nameInfo.isPrototype=true;nameInfo.prototypeClass=name.substring(0,idx);nameInfo.prototypeProperty=name.substring(idx+PROTOTYPE_SUBSTRING_LEN);}}"
433	"public void test(){if(rhs!=null&&NodeUtil.isName(rhs)&&rhs.getString().equals(var.name)&&NodeUtil.isAssign(n)){n.removeChild(rhs);n.getParent().replaceChild(n,rhs);compiler.reportCodeChange();return ;}}"
434	"public void test(){if(NodeUtil.isName(n)&&variable.equals(n.getString())){if(NodeUtil.isVarOrSimpleAssignLhs(n,n.getParent())){Preconditions.checkState(n.getParent().getType()==Token.ASSIGN);Node rhs=n.getNext();VariableLiveness state=isVariableReadBeforeKill(rhs,variable);if(state==VariableLiveness.READ){return state;}return VariableLiveness.KILL;}else {return VariableLiveness.READ;}}}"
435	"public void test(){for(int i=parameters.size()-1;i>=0;i--){Parameter current=parameters.get(i);if(current.shouldRemove&&((seenUnmovableSideEffects&&current.canBeSideEffected())||(seenUnmoveableSideEfffected&&current.hasSideEffects()))){current.shouldRemove=false;}if(current.shouldRemove){anyMovable=true;}else {if(current.canBeSideEffected){seenUnmoveableSideEfffected=true;}if(current.hasSideEffects){seenUnmovableSideEffects=true;}}}}"
436	"public void test(){if(n.getString().equals(""arguments"")){return false;}else {Var v=s.getVar(n.getString());if(v!=null&&v.isLocal()){return false;}}}"
437	"public void test(){if(!passName.equals(currentPassName)){throw new RuntimeException(passName+"" is not running."");}}"
438	"public void test(){int len=str.length();if(len>0){size+=len;lastChar=str.charAt(len-1);if(trackGzippedSize){try{stream.write(str.getBytes());}catch (IOException e) {  throw new RuntimeException(e);}}}}"
439	"public void test(){if(len>0){size+=len;lastChar=str.charAt(len-1);if(trackGzippedSize){try{stream.write(str.getBytes());}catch (IOException e) {  throw new RuntimeException(e);}}}}"
440	"public void test(){if(equals(other)){return this;}else {return new ConcreteUnionType(this,other);}}"
441	"public void test(){if(equals(other)){return this;}else {return NONE;}}"
442	"public void test(){StringBuilder b=new StringBuilder(32);b.append(""function ("");boolean hasKnownTypeOfThis=!getThisSlot().getType().isNone();if(hasKnownTypeOfThis){b.append(""this:"");b.append(getThisSlot().getType().toString());}Node n=getFirstParameter();if(hasKnownTypeOfThis&&n!=null){b.append("", "");}}"
443	"public void test(){if(hasKnownTypeOfThis){b.append(""this:"");b.append(getThisSlot().getType().toString());}}"
444	"public void test(){if(hasKnownTypeOfThis&&n!=null){b.append("", "");}}"
445	"public void test(){for(int i=0;n!=null;++i,n=n.getNext()){String paramName=n.getString();StaticSlot<ConcreteType> var=getScope().getOwnSlot(paramName);b.append(var.getType());getParameterSlot(i).getType();if(n.getNext()!=null){b.append("", "");}}}"
446	"public void test(){if(n.getNext()!=null){b.append("", "");}}"
447	"public void test(){for(int i=0;n!=null;++i,n=n.getNext()){String paramName=n.getString();StaticSlot<ConcreteType> var=getScope().getOwnSlot(paramName);b.append(var.getType());getParameterSlot(i).getType();if(n.getNext()!=null){b.append("", "");}}b.append("")"");if(getReturnSlot().getType()!=null){b.append("": "");b.append(getReturnSlot().getType().toString());}}"
448	"public void test(){if(getReturnSlot().getType()!=null){b.append("": "");b.append(getReturnSlot().getType().toString());}}"
449	"public void test(){for(int i=0;n!=null;++i,n=n.getNext()){String paramName=n.getString();StaticSlot<ConcreteType> var=getScope().getOwnSlot(paramName);b.append(var.getType());getParameterSlot(i).getType();if(n.getNext()!=null){b.append("", "");}}b.append("")"");if(getReturnSlot().getType()!=null){b.append("": "");b.append(getReturnSlot().getType().toString());}return b.toString();}"
450	"public void test(){if(""prototype"".equals(propName)){objectType.defineDeclaredProperty(propName,rightType,false,getprop);}else {objectType.defineInferredProperty(propName,rightType,false,getprop);}}"
451	"public void test(){if(propName.equals(""prototype"")||(!objectType.hasOwnProperty(propName)&&(!objectType.isInstanceType()||(var.isExtern()&&!objectType.isNativeObjectType())))){return objectType.defineDeclaredProperty(propName,var.getType(),var.isExtern(),getprop);}}"
452	"public void test(){if(functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))){n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));}}"
453	"public void test(){{int i=0;int childCount=n.getChildCount();for(Node iParameter : fnType.getParameters()){if(i+1>=childCount){return ;}JSType iParameterType=iParameter.getJSType();Node iArgument=n.getChildAtIndex(i+1);JSType iArgumentType=getJSType(iArgument);inferPropertyTypesToMatchConstraint(iArgumentType,iParameterType);if(iParameterType instanceof FunctionType){FunctionType iParameterFnType=(FunctionType)iParameterType;if(iArgument.getType()==Token.FUNCTION&&iArgumentType instanceof FunctionType&&iArgument.getJSDocInfo()==null){iArgument.setJSType(iParameterFnType);}}i++;}}}"
454	"public void test(){if(i+1>=childCount){return ;}}"
455	"public void test(){for(Node iParameter : fnType.getParameters()){if(i+1>=childCount){return ;}JSType iParameterType=iParameter.getJSType();Node iArgument=n.getChildAtIndex(i+1);JSType iArgumentType=getJSType(iArgument);inferPropertyTypesToMatchConstraint(iArgumentType,iParameterType);if(iParameterType instanceof FunctionType){FunctionType iParameterFnType=(FunctionType)iParameterType;if(iArgument.getType()==Token.FUNCTION&&iArgumentType instanceof FunctionType&&iArgument.getJSDocInfo()==null){iArgument.setJSType(iParameterFnType);}}i++;}}"
456	"public void test(){if(i+1<childCount){Node iArgument=n.getChildAtIndex(i+1);iArgumentType=getJSType(iArgument).restrictByNotNullOrUndefined();if(!(iArgumentType instanceof ObjectType)){compiler.report(JSError.make(NodeUtil.getSourceName(iArgument),iArgument,TEMPLATE_TYPE_NOT_OBJECT_TYPE));return ;}}}"
457	"public void test(){if(jParameterFnType.getTypeOfThis().equals(iParameterType)){foundTemplateTypeOfThisParameter=true;if(j+1>=childCount){return ;}Node jArgument=n.getChildAtIndex(j+1);JSType jArgumentType=getJSType(jArgument);if(jArgument.getType()==Token.FUNCTION&&jArgumentType instanceof FunctionType){if(iArgumentType!=null&&!iArgumentType.isNoType()){FunctionType jArgumentFnType=(FunctionType)jArgumentType;if(jArgumentFnType.getTypeOfThis().isUnknownType()){jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType,(ObjectType)iArgumentType));}if(!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))){compiler.report(JSError.make(NodeUtil.getSourceName(n),n,FUNCTION_LITERAL_UNREAD_THIS));}}else {if(NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))){compiler.report(JSError.make(NodeUtil.getSourceName(n),n,FUNCTION_LITERAL_UNDEFINED_THIS));}}}}}"
458	"public void test(){if(varType.equals(getNativeType(UNKNOWN_TYPE))&&var!=syntacticScope.getSlot(qualifiedName)){return getNativeType(CHECKED_UNKNOWN_TYPE);}else {return varType;}}"
459	"public void test(){if(endIndex==-1){endIndex=name.length();}}"
460	"public void test(){if(vNode.getValue().equals(coalescedVar)){return ;}}"
461	"public void test(){if(colorings.peek().getGraph().getNode(iVar)!=null&&coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))){allMergedNames.add(iVar.name);}}"
462	"public void test(){if(!vNode.getValue().equals(coalescedVar)&&NodeUtil.isVar(parent)){removeVarDeclaration(n);}}"
463	"public void test(){if(NodeUtil.isName(n)&&var.getName().equals(n.getString())){if(parent.getType()==Token.LP){return true;}else if(NodeUtil.isVar(parent)){return n.hasChildren();}return false;}else {Node name=n.getFirstChild();return name!=null&&NodeUtil.isName(name)&&var.getName().equals(name.getString())&&NodeUtil.isAssignmentOp(n);}}"
464	"public void test(){if(name.length()==0){return ;}}"
465	"public void test(){if(!newName.equals(name)){n.setString(newName);}}"
466	"public void test(){if(a.newName!=null&&!a.newName.equals(oldName)){if(pseudoNameMap!=null){return pseudoNameMap.get(n);}return a.newName;}else {return null;}}"
467	"public void test(){if(!a.newName.equals(oldTempName)){if(pseudoNameMap!=null){return pseudoNameMap.get(n);}return a.newName;}}"
468	"public void test(){for(int i=0;i<pathPrefixes.size();++i){String pathPrefix=pathPrefixes.get(i);boolean isCompletePathPrefix=(i==pathPrefixes.size()-1);boolean skipPathPrefix=pathPrefix.endsWith("".prototype"")||(alreadyExportedPaths.contains(pathPrefix)&&!isCompletePathPrefix);if(!skipPathPrefix){Node initializer;if(isCompletePathPrefix&&functionToExport!=null){initializer=createExternFunction(functionToExport);}else {initializer=new Node(Token.OBJECTLIT);}appendPathDefinition(pathPrefix,initializer);}}}"
469	"public void test(){for(int i=pieces.size();i>0;i--){String cPath=Joiner.on(""."").join(Iterables.limit(pieces,i));if(mappedPaths.containsKey(cPath)){String newPath=mappedPaths.get(cPath);if(i<pieces.size()){newPath+="".""+Joiner.on(""."").join(Iterables.skip(pieces,i));}return newPath+""."";}}}"
470	"public void test(){if(i<pieces.size()){newPath+="".""+Joiner.on(""."").join(Iterables.skip(pieces,i));}}"
471	"public void test(){if(RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)){return false;}}"
472	"public void test(){if(NodeUtil.isGet(parent)&&name==parent.getFirstChild()&&name.getNext().getType()==Token.STRING&&name.getNext().getString().equals(""call"")){Node gramps=name.getAncestor(2);if(gramps.getType()==Token.CALL&&gramps.getFirstChild()==parent){return true;}}}"
473	"public void test(){if(target.getType()==Token.NAME&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){fs.setInline(false);}}"
474	"public void test(){if(options.closurePass){interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();}}"
475	"public void test(){sb.append(str);int index=-1;int lastIndex=index;while((index=str.indexOf('\n',index+1))>=0){++lineCount;lastIndex=index;}if(lastIndex==-1){colCount+=str.length();}else {colCount=str.length()-(lastIndex+1);}return this;}"
476	"public void test(){if(lastIndex==-1){colCount+=str.length();}else {colCount=str.length()-(lastIndex+1);}}"
477	"public void test(){last=str.charAt(str.length()-1);cost+=str.length();if(maxCost<=cost){continueProcessing=false;}}"
478	"public void test(){if(dest.getString().equals(""prototype"")){processPrototypeParent(t,parent);}else {if(parent.getType()==Token.ASSIGN&&parent.getFirstChild()==n){addPossibleSignature(dest.getString(),n.getNext(),t);}}}"
479	"public void test(){if(config.jsOutputFile.length()>0){if(config.skipNormalOutputs){throw new FlagUsageException(""skip_normal_outputs and js_output_file""+"" cannot be used together."");}else {options.jsOutputFile=config.jsOutputFile;}}}"
480	"public void test(){if(config.createSourceMap.length()>0){options.sourceMapOutputPath=config.createSourceMap;}}"
481	"public void test(){if(!config.variableMapInputFile.equals("""")){options.inputVariableMapSerialized=VariableMap.load(config.variableMapInputFile).toBytes();}}"
482	"public void test(){if(!config.propertyMapInputFile.equals("""")){options.inputPropertyMapSerialized=VariableMap.load(config.propertyMapInputFile).toBytes();}}"
483	"public void test(){if(config.languageIn.length()>0){if(config.languageIn.equals(""ECMASCRIPT5_STRICT"")||config.languageIn.equals(""ES5_STRICT"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);}else if(config.languageIn.equals(""ECMASCRIPT5"")||config.languageIn.equals(""ES5"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);}else if(config.languageIn.equals(""ECMASCRIPT3"")||config.languageIn.equals(""ES3"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);}else {throw new FlagUsageException(""Unknown language `""+config.languageIn);}}}"
484	"public void test(){if(config.languageIn.equals(""ECMASCRIPT5_STRICT"")||config.languageIn.equals(""ES5_STRICT"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);}else if(config.languageIn.equals(""ECMASCRIPT5"")||config.languageIn.equals(""ES5"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);}else if(config.languageIn.equals(""ECMASCRIPT3"")||config.languageIn.equals(""ES3"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);}else {throw new FlagUsageException(""Unknown language `""+config.languageIn);}}"
485	"public void test(){if(config.languageIn.equals(""ECMASCRIPT5"")||config.languageIn.equals(""ES5"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);}else if(config.languageIn.equals(""ECMASCRIPT3"")||config.languageIn.equals(""ES3"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);}else {throw new FlagUsageException(""Unknown language `""+config.languageIn);}}"
486	"public void test(){if(config.languageIn.equals(""ECMASCRIPT3"")||config.languageIn.equals(""ES3"")){options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);}else {throw new FlagUsageException(""Unknown language `""+config.languageIn);}}"
487	"public void test(){if(!""-"".equals(filename)){JSSourceFile newFile=JSSourceFile.fromFile(filename,inputCharset);inputs.add(newFile);}else {if(!allowStdIn){throw new FlagUsageException(""Can\'t specify stdin."");}if(usingStdin){throw new FlagUsageException(""Can\'t specify stdin twice."");}inputs.add(JSSourceFile.fromInputStream(""stdin"",System.in));usingStdin=true;}}"
488	"public void test(){if(parts.length<2||parts.length>4){throw new FlagUsageException(""Expected 2-4 colon-delimited parts in ""+""module spec: "");}}"
489	"public void test(){if(parts.length>2){String depList=parts[2];if(depList.length()>0){String[] deps=depList.split("","");for(String dep : deps){JSModule other=modulesByName.get(dep);if(other==null){throw new FlagUsageException(""Module \'""+name);}module.addDependency(other);}}}}"
490	"public void test(){if(depList.length()>0){String[] deps=depList.split("","");for(String dep : deps){JSModule other=modulesByName.get(dep);if(other==null){throw new FlagUsageException(""Module \'""+name);}module.addDependency(other);}}}"
491	"public void test(){if(pos>0){prefix=wrapper.substring(0,pos);out.append(prefix);}}"
492	"public void test(){String prefix="""";if(pos>0){prefix=wrapper.substring(0,pos);out.append(prefix);}out.append(code);int suffixStart=pos+codePlaceholder.length();if(suffixStart!=wrapper.length()){out.append(wrapper.substring(suffixStart));}out.append('\n');}"
493	"public void test(){String prefix="""";if(pos>0){prefix=wrapper.substring(0,pos);out.append(prefix);}out.append(code);int suffixStart=pos+codePlaceholder.length();if(suffixStart!=wrapper.length()){out.append(wrapper.substring(suffixStart));}out.append('\n');if(compiler!=null&&compiler.getSourceMap()!=null){compiler.getSourceMap().setWrapperPrefix(prefix);}}"
494	"public void test(){if(suffixStart!=wrapper.length()){out.append(wrapper.substring(suffixStart));}}"
495	"public void test(){if(pos>0){prefix=wrapper.substring(0,pos);out.append(prefix);}out.append(code);int suffixStart=pos+codePlaceholder.length();if(suffixStart!=wrapper.length()){out.append(wrapper.substring(suffixStart));}out.append('\n');if(compiler!=null&&compiler.getSourceMap()!=null){compiler.getSourceMap().setWrapperPrefix(prefix);}}"
496	"public void test(){if(pathPrefix.length()>0){String dirName=pathPrefix.charAt(pathPrefix.length()-1)==File.separatorChar?pathPrefix.substring(0,pathPrefix.length()-1):new File(pathPrefix).getParent();if(dirName!=null){new File(dirName).mkdirs();}}}"
497	"public void test(){if(compiler.getRoot()==null){return 1;}else {jsOutput.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));jsOutput.append('\n');return 0;}}"
498	"public void test(){if(compiler.getRoot()==null){return 1;}else {ControlFlowGraph<Node> cfg=compiler.computeCFG();DotFormatter.appendDot(compiler.getRoot().getLastChild(),cfg,jsOutput);jsOutput.append('\n');return 0;}}"
499	"public void test(){if(compiler.getRoot()==null){jsOutput.append(""Code contains errors; no tree was generated.\n"");return 1;}else {compiler.getRoot().appendStringTree(jsOutput);jsOutput.append(""\n"");return 0;}}"
500	"public void test(){if(options.externExportsPath!=null){Writer eeOut=openExternExportsStream(options,options.jsOutputFile);eeOut.append(result.externExport);eeOut.close();}}"
501	"public void test(){if(outputFile.equals("""")){if(!config.moduleOutputPathPrefix.equals("""")){basePath=config.moduleOutputPathPrefix;}else {basePath=""jscompiler"";}}else {File file=new File(outputFile);String outputFileName=file.getName();if(outputFileName.endsWith("".js"")){outputFileName=outputFileName.substring(0,outputFileName.length()-3);}basePath=file.getParent()+File.separatorChar;}}"
502	"public void test(){if(!config.moduleOutputPathPrefix.equals("""")){basePath=config.moduleOutputPathPrefix;}else {basePath=""jscompiler"";}}"
503	"public void test(){if(outputFileName.endsWith("".js"")){outputFileName=outputFileName.substring(0,outputFileName.length()-3);}}"
504	"public void test(){if(!config.variableMapOutputFile.equals("""")){if(variableMapOutputPath!=null){throw new FlagUsageException(""The flags variable_map_output_file and ""+""create_name_map_files cannot both be used simultaniously."");}variableMapOutputPath=config.variableMapOutputFile;}}"
505	"public void test(){if(!config.propertyMapOutputFile.equals("""")){if(propertyMapOutputPath!=null){throw new FlagUsageException(""The flags property_map_output_file and ""+""create_name_map_files cannot both be used simultaniously."");}propertyMapOutputPath=config.propertyMapOutputFile;}}"
506	"public void test(){if(defValue.length()>1&&((defValue.charAt(0)=='\''&&defValue.charAt(defValue.length()-1)=='\'')||(defValue.charAt(0)=='\""'&&defValue.charAt(defValue.length()-1)=='\""'))){String maybeStringVal=defValue.substring(1,defValue.length()-1);if(maybeStringVal.indexOf(defValue.charAt(0))==-1){if(tweaks){options.setTweakToStringLiteral(defName,maybeStringVal);}else {options.setDefineToStringLiteral(defName,maybeStringVal);}continue;}}else {try{double value=Double.parseDouble(defValue);if(tweaks){options.setTweakToDoubleLiteral(defName,value);}else {options.setDefineToDoubleLiteral(defName,value);}continue;}catch (NumberFormatException e) {}}}"
507	"public void test(){{String maybeStringVal=defValue.substring(1,defValue.length()-1);if(maybeStringVal.indexOf(defValue.charAt(0))==-1){if(tweaks){options.setTweakToStringLiteral(defName,maybeStringVal);}else {options.setDefineToStringLiteral(defName,maybeStringVal);}continue;}}}"
508	"public void test(){if(maybeStringVal.indexOf(defValue.charAt(0))==-1){if(tweaks){options.setTweakToStringLiteral(defName,maybeStringVal);}else {options.setDefineToStringLiteral(defName,maybeStringVal);}continue;}}"
509	"public void test(){if(requiresNewline){out.append(""\n"");}}"
510	"public void test(){if(isManifest){String dependencies=commas.join(module.getSortedDependencyNames());out.append(String.format(""{%s%s}\n"",module.getName(),dependencies.isEmpty()?"""":"":""+dependencies));printManifestTo(module.getInputs(),out);}else {printBundleTo(module.getInputs(),out);}}"
511	"public void test(){long endTime=System.currentTimeMillis();long length=endTime-lastStartTime;worstRunTime=Math.max(length,worstRunTime);if(length<bestRunTime){loopedPassesInBestRun=PhaseOptimizer.getLoopsRun();bestRunTime=length;}}"
512	"public void test(){if(length<bestRunTime){loopedPassesInBestRun=PhaseOptimizer.getLoopsRun();bestRunTime=length;}}"
513	"public void test(){if(name.length()<=1){return false;}}"
514	"public void test(){if(name.length()==0){return false;}}"
515	"public void test(){if(name.isEmpty()||!Character.isUpperCase(name.charAt(0))){return false;}}"
516	"public void test(){if(name.isEmpty()||!Character.isUpperCase(name.charAt(0))){return false;}return name.toUpperCase().equals(name);}"
517	"public void test(){if(pos<=0||pos==line.length()-1){throw new ParseException(""Bad line: ""+line,0);}}"
518	"public void test(){if(!extraTracingStatistics.isEmpty()){int size=extraTracingStatistics.size();extraTracingValues=new long[size];int i=0;for(TracingStatistic tracingStatistic : extraTracingStatistics){extraTracingValues[i]=tracingStatistic.start(startThread);i++;}}}"
519	"public void test(){int digit_width=numDigits(v);StringBuilder sb=new StringBuilder();appendSpaces(sb,digits_column_width-digit_width);sb.append(v);return sb.toString();}"
520	"public void test(){int i=0;do {i++;n=n/10;} while(n>0);return i;}"
521	"public void test(){if(prevEventTime==-1){appendSpaces(sb,digitsColWidth);}else {sb.append(longToPaddedString(eventTime()-prevEventTime,digitsColWidth));}}"
522	"public void test(){sb.append("" Done "");long delta=tracer.stopTimeMs-tracer.startTimeMs;sb.append(longToPaddedString(delta,digitsColWidth));sb.append("" ms "");if(tracer.extraTracingValues!=null){for(int i=0;i<tracer.extraTracingValues.length;i++){delta=tracer.extraTracingValues[i];sb.append(String.format(""%4d"",delta));sb.append(extraTracingStatistics.get(i).getUnits());sb.append("";  "");}}}"
523	"public void test(){long delta=tracer.stopTimeMs-tracer.startTimeMs;sb.append(longToPaddedString(delta,digitsColWidth));sb.append("" ms "");if(tracer.extraTracingValues!=null){for(int i=0;i<tracer.extraTracingValues.length;i++){delta=tracer.extraTracingValues[i];sb.append(String.format(""%4d"",delta));sb.append(extraTracingStatistics.get(i).getUnits());sb.append("";  "");}}}"
524	"public void test(){for(int i=0;i<events.size();i++){Event e=events.get(i);if(e.tracer==t){Preconditions.checkState(e.isStart);events.remove(i);removed=true;break;}}}"
525	"public void test(){if(e.tracer==t){Preconditions.checkState(e.isStart);events.remove(i);removed=true;break;}}"
526	"public void test(){if(stat.extraInfo!=null&&t.extraTracingValues!=null){int overlapLength=Math.min(stat.extraInfo.length,t.extraTracingValues.length);for(int i=0;i<overlapLength;i++){stat.extraInfo[i]+=t.extraTracingValues[i];AtomicTracerStatMap map=extraTracingStatistics.get(i).getTracingStat();if(map!=null){map.incrementBy(t.type,t.extraTracingValues[i]);}}}}"
527	"public void test(){for(int i=0;i<overlapLength;i++){stat.extraInfo[i]+=t.extraTracingValues[i];AtomicTracerStatMap map=extraTracingStatistics.get(i).getTracingStat();if(map!=null){map.incrementBy(t.type,t.extraTracingValues[i]);}}}"
528	"public void test(){if(map!=null){map.incrementBy(t.type,t.extraTracingValues[i]);}}"
529	"public void test(){for(Event e : events){if(prettyPrint&&!e.isStart){indent.pop();}sb.append("" "");if(prettyPrint){sb.append(e.toString(etime,Joiner.on("""").join(indent),numDigits));}else {sb.append(e.toString(etime,"""",4));}etime=e.eventTime();sb.append('\n');if(prettyPrint&&e.isStart){indent.push(""|  "");}}}"
530	"public void test(){if(prettyPrint){sb.append(e.toString(etime,Joiner.on("""").join(indent),numDigits));}else {sb.append(e.toString(etime,"""",4));}}"
531	"public void test(){if(outstandingEvents.size()!=0){long now=clock.currentTimeMillis();sb.append("" Unstopped timers:\n"");for(Tracer t : outstandingEvents){sb.append(""  "").append(t).append("" ("").append(now-t.startTimeMs).append("" ms, started at "").append(formatTime(t.startTimeMs)).append("")\n"");}}}"
532	"public void test(){if(stat.count>1){sb.append("" TOTAL "").append(key).append("" "").append(stat.count).append("" ("").append(stat.clockTime).append("" ms"");if(stat.extraInfo!=null){for(int i=0;i<stat.extraInfo.length;i++){sb.append(""; "");sb.append(stat.extraInfo[i]).append(' ').append(extraTracingStatistics.get(i).getUnits());}}sb.append("")\n"");}}"
533	"public void test(){if(left.getType()==NAME&&""goog"".equals(left.getString())&&right.getType()==STRING){Function<TypeRestriction,JSType> restricter=restricters.get(right.getString());if(restricter!=null){return restrictParameter(param,paramType,blindScope,restricter,outcome);}}}"
534	"public void test(){default :keyBuilder.append(placeholderToken);prefix=new Node(Token.ADD,prefix,Node.newString(placeholderToken));return new Node(Token.ADD,prefix,expr.cloneTree());}"
535	"public void test(){String[] parts=fullDeclarationName.split(""\\.prototype\\."");Preconditions.checkState(parts.length==1||parts.length==2);if(parts.length==2){return parts[1];}return null;}"
536	"public void test(){if(parts.length==2){return parts[1];}}"
537	"public void test(){String[] parts=fullDeclarationName.split(""\\.prototype\\."");Preconditions.checkState(parts.length==1||parts.length==2);if(parts.length==2){return parts[0];}return null;}"
538	"public void test(){if(parts.length==2){return parts[0];}}"
539	"public void test(){if(param.equals(REPLACE_ALL_MARKER)){Preconditions.checkState(paramCount==1&&parts.length==1);replacementParameter=Config.REPLACE_ALL_VALUE;}else if(param.equals(REPLACE_ONE_MARKER)){Preconditions.checkState(replacementParameter==-1);replacementParameter=paramCount;}else {Preconditions.checkState(param.isEmpty(),""Unknown marker"",param);}}"
540	"public void test(){if(param.equals(REPLACE_ONE_MARKER)){Preconditions.checkState(replacementParameter==-1);replacementParameter=paramCount;}else {Preconditions.checkState(param.isEmpty(),""Unknown marker"",param);}}"
541	"public void test(){for(Node n : funType.getParameters()){if(paramNode==null){break;}sb.append("" * @param {""+getParameterNodeJSDocType(n));sb.append(paramNode.getString());sb.append(""\n"");paramNode=paramNode.getNext();}}"
542	"public void test(){if(retType!=null&&!retType.isUnknownType()&&!retType.isEmptyType()){sb.append("" * @return {""+retType);}}"
543	"public void test(){if(!superInstance.toString().equals(""Object"")){sb.append("" * @extends {""+superInstance);}}"
544	"public void test(){if(funType.isConstructor()){sb.append("" * @constructor\n"");}else if(funType.isInterface()){sb.append("" * @interface\n"");}}"
545	"public void test(){if(funType.isInterface()){sb.append("" * @interface\n"");}}"
546	"public void test(){if(fnNode!=null&&fnNode.getBooleanProp(Node.IS_DISPATCHER)){sb.append("" * @javadispatch\n"");}}"
547	"public void test(){if(name.equals(THIS_MARKER)){boolean referencesThis=NodeUtil.referencesThis(fnTemplateRoot);Node value=entry.getValue();if(value.getType()!=Token.THIS&&(referencesThis||NodeUtil.mayHaveSideEffects(value,compiler))){String newName=getUniqueThisName();Node newValue=entry.getValue().cloneTree();Node newNode=NodeUtil.newVarNode(newName,newValue).copyInformationFromForTree(newValue);newVars.add(0,newNode);newArgMap.put(THIS_MARKER,Node.newString(Token.NAME,newName).copyInformationFromForTree(newValue));}}else {Node newValue=entry.getValue().cloneTree();Node newNode=NodeUtil.newVarNode(name,newValue).copyInformationFromForTree(newValue);newVars.add(0,newNode);newArgMap.remove(name);}}"
548	"public void test(){if(lhs.getType()==Token.GETPROP&&lhs.getLastChild().getString().equals(""prototype"")){return false;}}"
549	"public void test(){if(llhs.getType()==Token.GETPROP&&llhs.getLastChild().getString().equals(""prototype"")){return false;}}"
550	"public void test(){StringBuilder sb=new StringBuilder(""(?:^|;)\\s*("");for(String function : functions){sb.append(Pattern.quote(function)+""|"");}sb.deleteCharAt(sb.length()-1);sb.append("")\\s*\\((.*?)\\)"");return Pattern.compile(sb.toString());}"
551	"public void test(){if(fragment.equals("".."")){if(!dstFragments.isEmpty()){dstFragments.remove(dstFragments.size()-1);}}else if(!fragment.equals(""."")){dstFragments.add(fragment);}}"
552	"public void test(){if(!fragment.equals(""."")){dstFragments.add(fragment);}}"
553	"public void test(){String[] targetFragments=targetPath.split(""/"");int i=-1;do {i+=1;if(i==baseFragments.length&&i==targetFragments.length){return ""."";}else if(i==baseFragments.length){return Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}else if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}} while(baseFragments[i].equals(targetFragments[i]));}"
554	"public void test(){do {i+=1;if(i==baseFragments.length&&i==targetFragments.length){return ""."";}else if(i==baseFragments.length){return Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}else if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}} while(baseFragments[i].equals(targetFragments[i]));}"
555	"public void test(){if(i==baseFragments.length&&i==targetFragments.length){return ""."";}else if(i==baseFragments.length){return Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}else if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}}"
556	"public void test(){if(i==baseFragments.length){return Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}else if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}}"
557	"public void test(){if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}}"
558	"public void test(){do {i+=1;if(i==baseFragments.length&&i==targetFragments.length){return ""."";}else if(i==baseFragments.length){return Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}else if(i==targetFragments.length){return Strings.repeat(""../"",baseFragments.length-i)+"".."";}} while(baseFragments[i].equals(targetFragments[i]));return Strings.repeat(""../"",baseFragments.length-i)+Joiner.on(""/"").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i)));}"
559	"public void test(){for(int i=0,l=requires.size();i<l;++i){String namespace=requires.get(i);if(requires.subList(i+1,l).contains(namespace)){reportDuplicateRequire(namespace,depInfo);}DependencyInfo provider=providesMap.get(namespace);if(provider==null){reportUndefinedNamespace(namespace,depInfo);}else if(provider==depInfo){reportSameFile(namespace,depInfo);}}}"
560	"public void test(){if(requires.subList(i+1,l).contains(namespace)){reportDuplicateRequire(namespace,depInfo);}}"
561	"public void test(){if(innerValues.charAt(valueMatcher.end())!=','){throw new ParseException(""Missing comma in string array"",true);}}"
562	"public void test(){while(googMatcher.find()){hasProvidesOrRequires=true;boolean isRequire=googMatcher.group(1).charAt(0)=='r';String arg=parseJsString(googMatcher.group(2));if(isRequire){if(!""goog"".equals(arg)){requires.add(arg);}}else {provides.add(arg);}}}"
563	"public void test(){if(!""goog"".equals(arg)){requires.add(arg);}}"
564	"public void test(){if(name.equals(type)||name.startsWith(type+""."")){return true;}}"
565	"public void test(){if((name.length()==0)||Character.isUpperCase(name.charAt(0))){return false;}}"
566	"public void test(){if(end==-1){int last=js.length()-1;if(js.charAt(last)=='\n'){return new SimpleRegion(startLine,endLine,js.substring(pos,last));}else {return new SimpleRegion(startLine,endLine,js.substring(pos));}}else {return new SimpleRegion(startLine,endLine,js.substring(pos,end));}}"
567	"public void test(){if(js.charAt(last)=='\n'){return new SimpleRegion(startLine,endLine,js.substring(pos,last));}else {return new SimpleRegion(startLine,endLine,js.substring(pos));}}"
568	"public void test(){if(errors.length>0){StringBuilder msg=new StringBuilder(""JSCompiler errors\n"");MessageFormatter formatter=new LightweightMessageFormatter(compiler);for(JSError e : errors){msg.append(formatter.formatError(e));}throw new RuntimeException(msg.toString());}}"
569	"public void test(){if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(objectName.getQualifiedName())){return ;}}"
570	"public void test(){if(i==0){valid=!n.hasChildren();}else if(i==1){valid=n.hasOneChild();}else {valid=(n.getChildCount()==i);}}"
571	"public void test(){if(i==1){valid=n.hasOneChild();}else {valid=(n.getChildCount()==i);}}"
572	"public void test(){if(!valid){violation(""Expected ""+i,n);}}"
573	"public void test(){if(i==1){valid=n.hasChildren();}else if(i==2){valid=n.hasMoreThanOneChild();}else {valid=n.getChildCount()>=i;}}"
574	"public void test(){if(i==2){valid=n.hasMoreThanOneChild();}else {valid=n.getChildCount()>=i;}}"
575	"public void test(){if(!valid){violation(""Expected at least ""+i,n);}}"
576	"public void test(){if(i==1){valid=!n.hasMoreThanOneChild();}else {valid=n.getChildCount()<=i;}}"
577	"public void test(){if(!valid){violation(""Expected no more than ""+i,n);}}"
578	"public void test(){for(int i=0;i<edgeList.length;i++){DiGraphEdge<Node,ControlFlowGraph.Branch> edge=outEdges.get(i);DiGraphNode<Node,Branch> succ=edge.getDestination();String toNode=null;if(succ==cfg.getImplicitReturn()){toNode=""RETURN"";}else {int keySucc=key(succ.getValue());toNode=formatNodeName(keySucc);}edgeList[i]=formatNodeName(keyParent)+ARROW;}}"
579	"public void test(){key=keyCount++;assignments.put(n,key);builder.append(INDENT);builder.append(formatNodeName(key));builder.append("" [label=\"""");builder.append(name(n));JSType type=n.getJSType();if(type!=null){builder.append("" : "");builder.append(type.toString());}}"
580	"public void test(){assignments.put(n,key);builder.append(INDENT);builder.append(formatNodeName(key));builder.append("" [label=\"""");builder.append(name(n));JSType type=n.getJSType();if(type!=null){builder.append("" : "");builder.append(type.toString());}}"
581	"public void test(){builder.append(INDENT);builder.append(formatNodeName(key));builder.append("" [label=\"""");builder.append(name(n));JSType type=n.getJSType();if(type!=null){builder.append("" : "");builder.append(type.toString());}if(printAnnotations&&cfg!=null&&cfg.hasNode(n)){Object annotation=cfg.getNode(n).getAnnotation();if(annotation!=null){builder.append(""\\n"");builder.append(annotation.toString());}}}"
582	"public void test(){if(type!=null){builder.append("" : "");builder.append(type.toString());}}"
583	"public void test(){if(annotation!=null){builder.append(""\\n"");builder.append(annotation.toString());}}"
584	"public void test(){if(type!=null){builder.append("" : "");builder.append(type.toString());}if(printAnnotations&&cfg!=null&&cfg.hasNode(n)){Object annotation=cfg.getNode(n).getAnnotation();if(annotation!=null){builder.append(""\\n"");builder.append(annotation.toString());}}builder.append(""\"""");if(n.getJSDocInfo()!=null){builder.append("" color=\""green\"""");}builder.append(""];\n"");}"
585	"public void test(){if(n.getJSDocInfo()!=null){builder.append("" color=\""green\"""");}}"
586	"public void test(){if(printAnnotations&&cfg!=null&&cfg.hasNode(n)){Object annotation=cfg.getNode(n).getAnnotation();if(annotation!=null){builder.append(""\\n"");builder.append(annotation.toString());}}builder.append(""\"""");if(n.getJSDocInfo()!=null){builder.append("" color=\""green\"""");}builder.append(""];\n"");}"
587	"public void test(){StringBuilder builder=new StringBuilder();builder.append(graph.isDirected()?""digraph"":""graph"");builder.append(INDENT);builder.append(graph.getName());builder.append("" {\n"");builder.append(INDENT);builder.append(""node [color=lightblue2, style=filled];\n""); final String edgeSymbol=graph.isDirected()?ARROW:LINE;List<GraphvizNode> nodes=graph.getGraphvizNodes();}"
588	"public void test(){builder.append(graph.isDirected()?""digraph"":""graph"");builder.append(INDENT);builder.append(graph.getName());builder.append("" {\n"");builder.append(INDENT);builder.append(""node [color=lightblue2, style=filled];\n""); final String edgeSymbol=graph.isDirected()?ARROW:LINE;List<GraphvizNode> nodes=graph.getGraphvizNodes();String[] nodeNames=new String[nodes.size()];}"
589	"public void test(){builder.append(INDENT);builder.append(graph.getName());builder.append("" {\n"");builder.append(INDENT);builder.append(""node [color=lightblue2, style=filled];\n""); final String edgeSymbol=graph.isDirected()?ARROW:LINE;List<GraphvizNode> nodes=graph.getGraphvizNodes();String[] nodeNames=new String[nodes.size()];for(int i=0;i<nodeNames.length;i++){GraphvizNode gNode=nodes.get(i);nodeNames[i]=gNode.getId()+"" [label=\"""";}}"
590	"public void test(){for(int i=0;i<edgeNames.length;i++){GraphvizEdge edge=edges.get(i);edgeNames[i]=edge.getNode1Id()+edgeSymbol;}Arrays.sort(edgeNames);for(String edgeName : edgeNames){builder.append(INDENT);builder.append(edgeName);builder.append("";\n"");}builder.append(""}\n"");return builder.toString();}"
591	"public void test(){if(first){first=false;}else {sb.append("", "");}}"
592	"public void test(){{if(first){first=false;}else {sb.append("", "");}sb.append('\""');escapeStringOnto(entry.getKey().toString(),sb);sb.append(""\"": "");Object value=entry.getValue();if(value==null){sb.append(""null"");}else if(value instanceof String){sb.append('\""');escapeStringOnto((String)value,sb);sb.append('\""');}else {sb.append(value);}}}"
593	"public void test(){sb.append('\""');escapeStringOnto(entry.getKey().toString(),sb);sb.append(""\"": "");Object value=entry.getValue();if(value==null){sb.append(""null"");}else if(value instanceof String){sb.append('\""');escapeStringOnto((String)value,sb);sb.append('\""');}else {sb.append(value);}}"
594	"public void test(){if(value==null){sb.append(""null"");}else if(value instanceof String){sb.append('\""');escapeStringOnto((String)value,sb);sb.append('\""');}else {sb.append(value);}}"
595	"public void test(){if(value instanceof String){sb.append('\""');escapeStringOnto((String)value,sb);sb.append('\""');}else {sb.append(value);}}"
596	"public void test(){{int pos=0,n=s.length();for(int i=0;i<n;++i){char ch=s.charAt(i);swtich (ch){case '\r' :case '\n' :case '\""' :case '\\' :case ' ' :case ' ' :String hex=Integer.toString(ch,16);sb.append(s,pos,i).append(""\\u"").append(""0000"",hex.length(),4).append(hex);pos=i+1;break;}}sb.append(s,pos,n);}}"
597	"public void test(){for(int i=0;i<n;++i){char ch=s.charAt(i);swtich (ch){case '\r' :case '\n' :case '\""' :case '\\' :case ' ' :case ' ' :String hex=Integer.toString(ch,16);sb.append(s,pos,i).append(""\\u"").append(""0000"",hex.length(),4).append(hex);pos=i+1;break;}}}"
598	"public void test(){char ch=s.charAt(i);swtich (ch){case '\r' :case '\n' :case '\""' :case '\\' :case ' ' :case ' ' :String hex=Integer.toString(ch,16);sb.append(s,pos,i).append(""\\u"").append(""0000"",hex.length(),4).append(hex);pos=i+1;break;}}"
599	"public void test(){for(int i=0;i<n;++i){char ch=s.charAt(i);swtich (ch){case '\r' :case '\n' :case '\""' :case '\\' :case ' ' :case ' ' :String hex=Integer.toString(ch,16);sb.append(s,pos,i).append(""\\u"").append(""0000"",hex.length(),4).append(hex);pos=i+1;break;}}sb.append(s,pos,n);}"
600	"public void test(){stack.push(new WalkHelper(jsonml,0));int i=0;while(i<=n&&!stack.isEmpty()){WalkHelper current=stack.pop();JsonML element=current.element;Integer childno=current.childno;if(childno<element.childrenSize()){stack.push(new WalkHelper(element,childno+1));i++;element=element.getChild(childno);if(i==n){return element;}stack.push(new WalkHelper(element,0));}}}"
601	"public void test(){while(i<=n&&!stack.isEmpty()){WalkHelper current=stack.pop();JsonML element=current.element;Integer childno=current.childno;if(childno<element.childrenSize()){stack.push(new WalkHelper(element,childno+1));i++;element=element.getChild(childno);if(i==n){return element;}stack.push(new WalkHelper(element,0));}}}"
602	"public void test(){if(childno<element.childrenSize()){stack.push(new WalkHelper(element,childno+1));i++;element=element.getChild(childno);if(i==n){return element;}stack.push(new WalkHelper(element,0));}}"
603	"public void test(){if(i==n){return element;}}"
604	"public void test(){for(int i=1;i<element.childrenSize();++i){if(!defaultStmt){validateChildType(element,new TagType[]{TagType.Case,TagType.DefaultCase},i);}else {validateChildType(element,TagType.Case,i);}if(error){break;}if(element.getChild(i).getType()==TagType.DefaultCase){defaultStmt=true;}}}"
605	"public void test(){if(!defaultStmt){validateChildType(element,new TagType[]{TagType.Case,TagType.DefaultCase},i);}else {validateChildType(element,TagType.Case,i);}}"
606	"public void test(){if(element.getChild(i).getType()==TagType.DefaultCase){defaultStmt=true;}}"
607	"public void test(){if((type=(String)element.getAttribute(TagAttr.TYPE))!=null&&type.equals(""null"")){return ;}}"
608	"public void test(){if(list.length==1){builder.append(list[0].toString());}else if(list.length>1){builder.append('[');for(int i=0;i<list.length;++i){builder.append(list[i].toString());if(i<list.length-1){builder.append("", "");}}builder.append(""]"");}}"
609	"public void test(){if(list.length>1){builder.append('[');for(int i=0;i<list.length;++i){builder.append(list[i].toString());if(i<list.length-1){builder.append("", "");}}builder.append(""]"");}}"
610	"public void test(){for(int i=0;i<list.length;++i){builder.append(list[i].toString());if(i<list.length-1){builder.append("", "");}}}"
611	"public void test(){if(i<list.length-1){builder.append("", "");}}"
612	"public void test(){if(type.equals(Double.class)){if(value instanceof Number){return type.cast(((Number)value).doubleValue());}if(value instanceof String){return type.cast(Double.valueOf((String)value));}throw new JsonMLException(""Wrong type of ""+attr.name());}}"
613	"public void test(){for(int i=0;i<childno;++i){child=element.getChild(i);if(child.getType()==TagType.EmptyStmt||child.getType()==TagType.Empty){nodeIndex++;node.addChildToBack(new Node(Token.EMPTY));}else {transformElement(child,node);}}}"
614	"public void test(){if(op.equals(""."")){type=Token.GETPROP;}else if(op.equals(""[]"")){type=Token.GETELEM;}else {throw new JsonMLException(""Invalid OP argument: ""+op);}}"
615	"public void test(){if(op.equals(""[]"")){type=Token.GETELEM;}else {throw new JsonMLException(""Invalid OP argument: ""+op);}}"
616	"public void test(){if(!(flags.equals(""""))){node.addChildToBack(Node.newString(Token.STRING,flags));}}"
617	"public void test(){if(name.equals(""+"")||name.equals(""-"")){realName+=""_unary"";}}"
618	"public void test(){if(child.getString().equals(""eval"")){element=new JsonML(TagType.EvalExpr);}else {element=new JsonML(TagType.IdExpr);element.setAttribute(TagAttr.NAME,child.getString());element=new JsonML(TagType.CallExpr,element);}}"
619	"public void test(){if(!name.equals("""")){JsonML nameElement=new JsonML(TagType.IdPatt);nameElement.setAttribute(TagAttr.NAME,name);element.appendChild(nameElement);}else {element.appendChild(new JsonML(TagType.Empty));}}"
620	"public void test(){if(op.equals(""++"")){element.setAttribute(TagAttr.OP,""++"");}else {element.setAttribute(TagAttr.OP,""--"");}}"
621	"public void test(){if(op.equals(""||"")){processTwoArgExpr(node,currentParent,TagType.LogicalOrExpr);}else if(op.endsWith(""&&"")){processTwoArgExpr(node,currentParent,TagType.LogicalAndExpr);}else {throw new IllegalArgumentException(""Unsupported value of op argument."");}}"
622	"public void test(){if(value!=null&&value.equals(null)){value=null;}}"
623	"public void test(){if(!(valueA.equals(valueB))){Double doubleA=null,doubleB=null;if(valueA instanceof Number){doubleA=((Number)valueA).doubleValue();}else if(valueA instanceof String){doubleA=Double.valueOf((String)valueA);}else {return false;}if(valueB instanceof Number){doubleB=((Number)valueB).doubleValue();}else if(valueB instanceof String){doubleB=Double.valueOf((String)valueB);}else {return false;}if(!doubleA.equals(doubleB)){return false;}}}"
624	"public void test(){if(!doubleA.equals(doubleB)){return false;}}"
625	"public void test(){if(!name.equals(lhs.getFirstChild().getString())){return false;}}"
626	"public void test(){if(node.getType()==Token.NAME){return varName.equals(node.getString());}}"
627	"public void test(){if(startMarkerName.equals(callName)){if(parent.getType()!=Token.EXPR_RESULT){compiler.report(t.makeError(n,INVALID_MARKER_USAGE,startMarkerName));return ;}markerStack.push(parent);return ;}}"
628	"public void test(){if(!endMarkerName.equals(callName)){return ;}}"
629	"public void test(){if(trueValue.equals(falseValue)){return trueValue;}else {return TernaryValue.UNKNOWN;}}"
630	"public void test(){if(""undefined"".equals(name)||""NaN"".equals(name)){return TernaryValue.FALSE;}else if(""Infinity"".equals(name)){return TernaryValue.TRUE;}}"
631	"public void test(){if(""Infinity"".equals(name)){return TernaryValue.TRUE;}}"
632	"public void test(){if(""undefined"".equals(name)||""Infinity"".equals(name)){return name;}}"
633	"public void test(){if(n!=first){result.append(',');}}"
634	"public void test(){for(Node n=first;n!=null;n=n.getNext()){String childValue=getArrayElementStringValue(n);if(childValue==null){return null;}if(n!=first){result.append(',');}result.append(childValue);nextSlot++;}}"
635	"public void test(){if(name.equals(""undefined"")){return Double.NaN;}}"
636	"public void test(){if(name.equals(""NaN"")){return Double.NaN;}}"
637	"public void test(){if(name.equals(""Infinity"")){return Double.POSITIVE_INFINITY;}}"
638	"public void test(){if(n.getChildCount()==1&&n.getFirstChild().getType()==Token.NAME&&n.getFirstChild().getString().equals(""Infinity"")){return Double.NEGATIVE_INFINITY;}}"
639	"public void test(){if(s.length()==0){return 0.0;}}"
640	"public void test(){if(s.length()>2&&s.charAt(0)=='0'&&(s.charAt(1)=='x'||s.charAt(1)=='X')){try{return Double.valueOf(Integer.parseInt(s.substring(2),16));}catch (NumberFormatException e) {  return Double.NaN;}}}"
641	"public void test(){if(s.length()>3&&(s.charAt(0)=='-'||s.charAt(0)=='+')&&s.charAt(1)=='0'&&(s.charAt(2)=='x'||s.charAt(2)=='X')){return null;}}"
642	"public void test(){if(s.equals(""infinity"")||s.equals(""-infinity"")){return null;}}"
643	"public void test(){int start=0;int end=s.length();while(end>0&&isStrWhiteSpaceChar(s.charAt(end-1))==TernaryValue.TRUE){end--;}while(start<end&&isStrWhiteSpaceChar(s.charAt(start))==TernaryValue.TRUE){start++;}return s.substring(start,end);}"
644	"public void test(){Node parent=n.getParent();String name=n.getFirstChild().getString();swtich (parent.getType()){case Token.NAME :return parent.getString();case Token.ASSIGN :return parent.getFirstChild().getQualifiedName();default :return name!=null&&name.length()!=0?name:null;}}"
645	"public void test(){if(namespaceName.equals(""Math"")){return false;}}"
646	"public void test(){if(name.equals(""NaN"")){return true;}}"
647	"public void test(){if(name.equals(""Infinity"")){return true;}}"
648	"public void test(){swtich (n.getType()){case Token.VOID :return true;case Token.NAME :return n.getString().equals(""undefined"");}return false;}"
649	"public void test(){if(last!=null&&last.getType()==Token.STRING){String propName=last.getString();return (propName.equals(methodName));}}"
650	"public void test(){Node parameterParen=new Node(Token.LP,lineno,charno);for(Node param : params){parameterParen.addChildToBack(param);}Node function=new Node(Token.FUNCTION,lineno,charno);function.addChildrenToBack(Node.newString(Token.NAME,name,lineno,charno));function.addChildToBack(parameterParen);function.addChildToBack(body);return function;}"
651	"public void test(){if(endPos==-1){return newName(convention,name,lineno,charno);}}"
652	"public void test(){{int endPos=name.indexOf('.');if(endPos==-1){return newName(convention,name,lineno,charno);}Node node=newName(convention,name.substring(0,endPos),lineno,charno);int startPos;do {startPos=endPos+1;endPos=name.indexOf('.',startPos);String part=(endPos==-1?name.substring(startPos):name.substring(startPos,endPos));Node propNode=Node.newString(Token.STRING,part,lineno,charno);if(convention.isConstantKey(part)){propNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);}node=new Node(Token.GETPROP,node,propNode,lineno,charno);} while(endPos!=-1);return node;}}"
653	"public void test(){do {startPos=endPos+1;endPos=name.indexOf('.',startPos);String part=(endPos==-1?name.substring(startPos):name.substring(startPos,endPos));Node propNode=Node.newString(Token.STRING,part,lineno,charno);if(convention.isConstantKey(part)){propNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);}node=new Node(Token.GETPROP,node,propNode,lineno,charno);} while(endPos!=-1);}"
654	"public void test(){Node nameNode=Node.newString(Token.NAME,name,lineno,charno);if(convention.isConstant(name)){nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);}return nameNode;}"
655	"public void test(){char LARGEST_BASIC_LATIN=0x7f;int len=s.length();for(int index=0;index<len;index++){char c=s.charAt(index);if(c>LARGEST_BASIC_LATIN){return false;}}return true;}"
656	"public void test(){for(int index=0;index<len;index++){char c=s.charAt(index);if(c>LARGEST_BASIC_LATIN){return false;}}}"
657	"public void test(){if(c>LARGEST_BASIC_LATIN){return false;}}"
658	"public void test(){if(cur.getLastChild().getString().equals(""prototype"")){return cur.getFirstChild();}else {cur=cur.getFirstChild();}}"
659	"public void test(){String qNameStr=qName.getQualifiedName();int prototypeIdx=qNameStr.lastIndexOf("".prototype."");int memberIndex=prototypeIdx+"".prototype"".length();return qNameStr.substring(memberIndex);}"
660	"public void test(){if(isGet(getNode)){Node propNode=getNode.getLastChild();return isString(propNode)&&""toString"".equals(propNode.getString());}}"
661	"public void test(){if(MSG_FUNCTION_NAME.equals(node.getFirstChild().getQualifiedName())){googMsgNodes.put(node,traversal.getSourceName());}}"
662	"public void test(){if(name.equals(builder.getKey()+DESC_SUFFIX)){Node valueNode=nameNode.getFirstChild();String desc=extractStringFromStringExprNode(valueNode);if(desc.startsWith(HIDDEN_DESC_PREFIX)){builder.setDesc(desc.substring(HIDDEN_DESC_PREFIX.length()).trim());builder.setIsHidden(true);}else {builder.setDesc(desc);}return true;}}"
663	"public void test(){if(desc.startsWith(HIDDEN_DESC_PREFIX)){builder.setDesc(desc.substring(HIDDEN_DESC_PREFIX.length()).trim());builder.setIsHidden(true);}else {builder.setDesc(desc);}}"
664	"public void test(){if(!MSG_FUNCTION_NAME.equals(fnNameNode.getQualifiedName())){throw new MalformedException(""Message initialized using unrecognized function. ""+""Please use ""+MSG_FUNCTION_NAME,fnNameNode);}}"
665	"public void test(){if(phBegin>0){builder.appendStringPart(value.substring(0,phBegin));}int phEnd=value.indexOf(PH_JS_SUFFIX,phBegin);if(phEnd<0){throw new MalformedException(""Placeholder incorrectly formatted in: ""+builder.getKey(),node);}String phName=value.substring(phBegin+PH_JS_PREFIX.length(),phEnd);builder.appendPlaceholderReference(phName);int nextPos=phEnd+PH_JS_SUFFIX.length();if(nextPos<value.length()){value=value.substring(nextPos);}else {return ;}}"
666	"public void test(){if(phEnd<0){throw new MalformedException(""Placeholder incorrectly formatted in: ""+builder.getKey(),node);}String phName=value.substring(phBegin+PH_JS_PREFIX.length(),phEnd);builder.appendPlaceholderReference(phName);int nextPos=phEnd+PH_JS_SUFFIX.length();if(nextPos<value.length()){value=value.substring(nextPos);}else {return ;}}"
667	"public void test(){if(nextPos<value.length()){value=value.substring(nextPos);}else {return ;}}"
668	"public void test(){while(numberStart>0){ch=input.charAt(numberStart-1);if(Character.isDigit(ch)){numberStart--;}else {break;}}}"
669	"public void test(){if(suffixStart==input.length()){return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input);}else {return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input.substring(0,suffixStart))+input.substring(suffixStart);}}"
670	"public void test(){if(visibility==Visibility.PRIVATE&&!t.getInput().getName().equals(docInfo.getSourceName())){if(docInfo.isConstructor()&&isValidPrivateConstructorAccess(parent)){return ;}compiler.report(t.makeError(name,BAD_PRIVATE_GLOBAL_ACCESS,name.getString(),docInfo.getSourceName()));}}"
671	"public void test(){for(;objectType!=null;objectType=objectType.getImplicitPrototype()){docInfo=objectType.getOwnPropertyJSDocInfo(propertyName);if(docInfo!=null&&docInfo.getVisibility()!=Visibility.INHERITED){break;}}if(objectType==null){return ;}boolean sameInput=t.getInput().getName().equals(docInfo.getSourceName());Visibility visibility=docInfo.getVisibility();JSType ownerType=normalizeClassType(objectType);}"
672	"public void test(){if(irNode.getLineno()==-1){int lineno=node.getLineno();irNode.setLineno(lineno);int charno=position2charno(node.getAbsolutePosition());irNode.setCharno(charno);}}"
673	"public void test(){if(author.length()==0){parser.addParserWarning(""msg.jsdoc.authormissing"",stream.getLineno(),stream.getCharno());}else {jsdocBuilder.addAuthor(author);}}"
674	"public void test(){if(reason.length()>0){jsdocBuilder.recordDeprecationReason(reason);}}"
675	"public void test(){if(preserve.length()>0){if(fileLevelJsDocBuilder!=null){fileLevelJsDocBuilder.append(preserve);}}}"
676	"public void test(){if(fileLevelJsDocBuilder!=null){fileLevelJsDocBuilder.append(preserve);}}"
677	"public void test(){if(!jsdocBuilder.recordEnumParameterType(type)){parser.addTypeWarning(""msg.jsdoc.incompat.type"",lineno,charno);}}"
678	"public void test(){Node typeNode=parseAndRecordTypeNameNode(token,lineno,charno,matchingRc);lineno=stream.getLineno();charno=stream.getCharno();typeNode=wrapNode(Token.BANG,typeNode);if(typeNode!=null&&!matchingRc){typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);}type=createJSTypeExpression(typeNode);if(annotation==Annotation.EXTENDS){extendedTypes.add(new ExtendedTypeInfo(type,stream.getLineno(),stream.getCharno()));}else {Preconditions.checkState(annotation==Annotation.IMPLEMENTS);if(!jsdocBuilder.recordImplementedInterface(type)){parser.addTypeWarning(""msg.jsdoc.implements.duplicate"",lineno,charno);}}}"
679	"public void test(){if(!jsdocBuilder.recordImplementedInterface(type)){parser.addTypeWarning(""msg.jsdoc.implements.duplicate"",lineno,charno);}}"
680	"public void test(){token=next();lineno=stream.getLineno();charno=stream.getCharno();type=null;if(token==JsDocToken.LC){type=createJSTypeExpression(parseAndRecordTypeNode(token));if(type==null){token=eatTokensUntilEOL();continue retry;}}}"
681	"public void test(){if(description.length()>0){jsdocBuilder.recordThrowDescription(type,description);}}"
682	"public void test(){token=next();lineno=stream.getLineno();charno=stream.getCharno();type=null;if(token==JsDocToken.LC){type=createJSTypeExpression(parseAndRecordParamTypeNode(token));if(type==null){token=eatTokensUntilEOL();continue retry;}skipEOLs();token=next();lineno=stream.getLineno();charno=stream.getCharno();}}"
683	"public void test(){if(token==JsDocToken.LC){type=createJSTypeExpression(parseAndRecordParamTypeNode(token));if(type==null){token=eatTokensUntilEOL();continue retry;}skipEOLs();token=next();lineno=stream.getLineno();charno=stream.getCharno();}}"
684	"public void test(){if(jsdocBuilder.hasParameter(name)){parser.addTypeWarning(""msg.dup.variable.name"",name,lineno,charno);}else {parser.addTypeWarning(""msg.jsdoc.incompat.type"",name,lineno,charno);}}"
685	"public void test(){if(name==null){token=eatTokensUntilEOL(token);continue retry;}jsdocBuilder.markName(name,lineno,charno);if(jsdocBuilder.shouldParseDocumentation()){ExtractionInfo paramDescriptionInfo=extractMultilineTextualBlock(token);String paramDescription=paramDescriptionInfo.string;if(paramDescription.length()>0){jsdocBuilder.recordParameterDescription(name,paramDescription);}token=paramDescriptionInfo.token;}else {token=eatTokensUntilEOL(token);}}"
686	"public void test(){if(paramDescription.length()>0){jsdocBuilder.recordParameterDescription(name,paramDescription);}}"
687	"public void test(){if(reference.length()==0){parser.addParserWarning(""msg.jsdoc.seemissing"",stream.getLineno(),stream.getCharno());}else {jsdocBuilder.addReference(reference);}}"
688	"public void test(){if(templateTypeName.length()==0){parser.addTypeWarning(""msg.jsdoc.templatemissing"",stream.getLineno(),stream.getCharno());}else if(!jsdocBuilder.recordTemplateTypeName(templateTypeName)){parser.addTypeWarning(""msg.jsdoc.template.at.most.once"",stream.getLineno(),stream.getCharno());}}"
689	"public void test(){if(version.length()==0){parser.addParserWarning(""msg.jsdoc.versionmissing"",stream.getLineno(),stream.getCharno());}else {if(!jsdocBuilder.recordVersion(version)){parser.addParserWarning(""msg.jsdoc.extraversion"",stream.getLineno(),stream.getCharno());}}}"
690	"public void test(){if(!jsdocBuilder.recordDefineType(type)){parser.addParserWarning(""msg.jsdoc.define"",lineno,charno);}}"
691	"public void test(){if(!jsdocBuilder.recordReturnType(type)){parser.addTypeWarning(""msg.jsdoc.incompat.type"",lineno,charno);break;}}"
692	"public void test(){if(returnDescription.length()>0){jsdocBuilder.recordReturnDescription(returnDescription);}}"
693	"public void test(){if(!jsdocBuilder.recordThisType(type)){parser.addTypeWarning(""msg.jsdoc.incompat.type"",lineno,charno);}}"
694	"public void test(){if(!jsdocBuilder.recordType(type)){parser.addTypeWarning(""msg.jsdoc.incompat.type"",lineno,charno);}}"
695	"public void test(){if(!jsdocBuilder.recordTypedef(type)){parser.addTypeWarning(""msg.jsdoc.incompat.type"",lineno,charno);}}"
696	"public void test(){stream.update();int lineno=stream.getLineno();int charno=stream.getCharno()+1;String line=stream.getRemainingJSDocLine().trim();if(line.length()>0){jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());}return new ExtractionInfo(line,next());}"
697	"public void test(){if(line.length()>0){jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());}}"
698	"public void test(){int startCharno=stream.getCharno()+1;String line=stream.getRemainingJSDocLine();if(option!=WhitespaceOption.PRESERVE){line=line.trim();}StringBuilder builder=new StringBuilder();builder.append(line);state=State.SEARCHING_ANNOTATION;token=next();boolean ignoreStar=false;}"
699	"public void test(){if(builder.length()>0){builder.append(' ');}}"
700	"public void test(){if(!ignoreStar){if(builder.length()>0){builder.append(' ');}builder.append('*');}}"
701	"public void test(){if(option!=WhitespaceOption.SINGLE_LINE){builder.append(""\n"");}}"
702	"public void test(){if(multilineText.length()>0){jsdocBuilder.markText(multilineText,startLineno,startCharno,endLineno,endCharno);}}"
703	"public void test(){default :ignoreStar=false;state=State.SEARCHING_ANNOTATION;if(builder.length()>0){builder.append(' ');}builder.append(toString(token));line=stream.getRemainingJSDocLine();if(option!=WhitespaceOption.PRESERVE){line=trimEnd(line);}builder.append(line);}"
704	"public void test(){state=State.SEARCHING_ANNOTATION;if(builder.length()>0){builder.append(' ');}builder.append(toString(token));line=stream.getRemainingJSDocLine();if(option!=WhitespaceOption.PRESERVE){line=trimEnd(line);}builder.append(line);token=next();}"
705	"public void test(){if(!ignoreStar&&builder.length()>0){builder.append(' ');}}"
706	"public void test(){default :if(!ignoreStar&&builder.length()>0){builder.append(' ');}ignoreStar=false;builder.append(toString(token));String line=stream.getRemainingJSDocLine();line=trimEnd(line);builder.append(line);token=next();}"
707	"public void test(){while(trimCount<s.length()){char ch=s.charAt(s.length()-trimCount);if(Character.isWhitespace(ch)){trimCount++;}else {break;}}}"
708	"public void test(){if(Character.isWhitespace(ch)){trimCount++;}else {break;}}"
709	"public void test(){int trimCount=0;while(trimCount<s.length()){char ch=s.charAt(s.length()-trimCount);if(Character.isWhitespace(ch)){trimCount++;}else {break;}}if(trimCount==0){return s;}return s.substring(0,s.length()-trimCount);}"
710	"public void test(){if(""function"".equals(string)){skipEOLs();return parseFunctionType(next());}else if(""null"".equals(string)||""undefined"".equals(string)){return newStringNode(string);}else {return parseTypeName(token);}}"
711	"public void test(){if(""null"".equals(string)||""undefined"".equals(string)){return newStringNode(string);}else {return parseTypeName(token);}}"
712	"public void test(){while(match(JsDocToken.EOL)&&typeName.charAt(typeName.length()-1)=='.'){skipEOLs();if(match(JsDocToken.STRING)){next();typeName+=stream.getString();}}}"
713	"public void test(){if(match(JsDocToken.STRING)&&""void"".equals(stream.getString())){next();return newNode(Token.VOID);}else {return parseTypeExpression(next());}}"
714	"public void test(){for(;;){charno=-1;c=getChar();if(c==EOF_CHAR){return JsDocToken.EOF;}else if(c=='\n'){return JsDocToken.EOL;}else if(!isJSSpace(c)){break;}}}"
715	"public void test(){cursor++;c=sourceString.charAt(sourceCursor++);if(lineEndChar>=0){if(lineEndChar=='\r'&&c=='\n'){lineEndChar='\n';continue;}lineEndChar=-1;lineStart=sourceCursor-1;lineno++;}}"
716	"public void test(){cursor++;c=sourceString.charAt(sourceCursor++);if(c<=127){if(c=='\n'||c=='\r'){lineEndChar=c;c='\n';}}else {if(isJSFormatChar(c)){continue;}if(ScriptRuntime.isJSLineTerminator(c)){lineEndChar=c;c='\n';}}}"
717	"public void test(){for(int i=0;i<parts.length;i++){String part=symbolMap.get(parts[i]);if(part==null){compiler.report(t.makeError(n,UNKNOWN_SYMBOL_WARNING,parts[i],name));return ;}replaced[i]=part;}}"
718	"public void test(){if(part==null){compiler.report(t.makeError(n,UNKNOWN_SYMBOL_WARNING,parts[i],name));return ;}}"
719	"public void test(){for(int i=0;i<parts.length;i++){Integer count=cssNames.get(parts[i]);if(count==null){count=Integer.valueOf(0);}cssNames.put(parts[i],count.intValue()+1);}}"
720	"public void test(){if(!""goog.exportSymbol"".equals(propQName)){return ;}}"
721	"public void test(){if(aDef.equals(bDef)){resultMap.put(var,aDef);}else {resultMap.put(var,null);}}"
722	"public void test(){if(NodeUtil.isName(obj)&&""arguments"".equals(obj.getString())){escapeParameters(output);}}"
723	"public void test(){if(NodeUtil.isName(n)&&""arguments"".equals(n.getString())){escapeParameters(output);}}"
724	"public void test(){if(target.getFirstChild().getString().equals(label)){return true;}}"
725	"public void test(){if(""undefined"".equals(argumentNode.getString())){typeNameString=""undefined"";}}"
726	"public void test(){if(left.getString().equals(""Infinity"")){return n;}else if(left.getString().equals(""NaN"")){n.removeChild(left);parent.replaceChild(n,left);reportCodeChange();return left;}}"
727	"public void test(){if(left.getString().equals(""NaN"")){n.removeChild(left);parent.replaceChild(n,left);reportCodeChange();return left;}}"
728	"public void test(){if(right.getType()==Token.NAME&&""Object"".equals(right.getString())){replacementNode=new Node(Token.TRUE);}}"
729	"public void test(){if(String.valueOf(result).length()<=String.valueOf(lval).length()+String.valueOf(rval).length()&&Math.abs(result)<=MAX_FOLD_NUMBER){Node newNumber=Node.newNumber(result);return newNumber;}else if(Double.isNaN(result)){return Node.newString(Token.NAME,""NaN"");}else if(result==Double.POSITIVE_INFINITY){return Node.newString(Token.NAME,""Infinity"");}else if(result==Double.NEGATIVE_INFINITY){return new Node(Token.NEG,Node.newString(Token.NAME,""Infinity""));}}"
730	"public void test(){if(!NodeUtil.isLiteralValue(left,false)||!NodeUtil.isLiteralValue(right,false)){if(n.getType()!=Token.GT&&n.getType()!=Token.LT){return n;}}int op=n.getType();boolean result;boolean rightLiteral=NodeUtil.isLiteralValue(right,false);boolean undefinedRight=((Token.NAME==right.getType()&&right.getString().equals(""undefined""))||(Token.VOID==right.getType()&&NodeUtil.isLiteralValue(right.getFirstChild(),false)));int lhType=getNormalizedNodeType(left);int rhType=getNormalizedNodeType(right);}"
731	"public void test(){if(rightLiteral){boolean undefinedLeft=(left.getString().equals(""undefined""));if(undefinedLeft){result=compareToUndefined(right,op);break;}}}"
732	"public void test(){if(!ln.equals(rn)){return n;}}"
733	"public void test(){if(objectType.getString().equals(""String"")){Node value=objectType.getNext();String stringValue=null;if(value==null){stringValue="""";}else {if(!NodeUtil.isImmutableValue(value)){return n;}stringValue=NodeUtil.getStringValue(value);}if(stringValue==null){return n;}Node parent=n.getParent();Node newString=Node.newString(stringValue);parent.replaceChild(n,newString);newString.copyInformationFrom(parent);reportCodeChange();return newString;}}"
734	"public void test(){if(c.getString().equals(right.getString())){swtich (c.getType()){case Token.SET :continue;case Token.GET :case Token.STRING :if(value!=null&&mayHaveSideEffects(value)){return n;}key=c;value=key.getFirstChild();break;default :throw new IllegalStateException();}}else if(mayHaveSideEffects(c.getFirstChild())){return n;}}"
735	"public void test(){if(functionPrivateName!=null&&functionPrivateName.length()>0&&outerScope.isDeclared(functionPrivateName,false)&&!(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)){report(t,n,FUNCTION_MASKS_VARIABLE,functionPrivateName);}}"
736	"public void test(){if(jsType.isInterface()&&object.getLastChild().getString().equals(""prototype"")){visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);}}"
737	"public void test(){if(property.equals(""prototype"")){if(objectJsType instanceof FunctionType){FunctionType functionType=(FunctionType)objectJsType;if(functionType.isConstructor()){JSType rvalueType=rvalue.getJSType();validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);}}else {}return ;}}"
738	"public void test(){if(""prototype"".equals(property2)){JSType jsType=object2.getJSType();if(jsType instanceof FunctionType){FunctionType functionType=(FunctionType)jsType;if(functionType.isConstructor()||functionType.isInterface()){checkDeclaredPropertyInheritance(t,assign,functionType,property,info,getJSType(rvalue));}}else {}return ;}}"
739	"public void test(){if(!rvalueType.isOrdinaryFunction()&&!(rvalue.isQualifiedName()&&rvalue.getQualifiedName().equals(abstractMethodName))){String abstractMethodMessage=(abstractMethodName!=null)?"", or ""+abstractMethodName:"""";compiler.report(t.makeError(object,INVALID_INTERFACE_MEMBER_DECLARATION,abstractMethodMessage));}}"
740	"public void test(){if((!objectType.hasProperty(propName)||objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))&&propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))){if(objectType instanceof EnumType){report(t,n,INEXISTENT_ENUM_ELEMENT,propName);}else if(!objectType.isEmptyType()&&reportMissingProperties){if(!typeRegistry.canPropertyBeDefined(objectType,propName)){report(t,n,INEXISTENT_PROPERTY,propName,validator.getReadableJSTypeName(n.getFirstChild(),true));}}}}"
741	"public void test(){if(slot.getName().equals(name)){return slot;}}"
742	"public void test(){if(!currentSlot.getName().equals(result.getName())){return null;}}"
743	"public void test(){if(""prototype"".equals(rhsOfDotName)){return lhsOfDotName+delimiter;}else error}"
744	"public void test(){if(""prototype"".equals(nameInsideBrackets)){return nameOutsideBrackets+delimiter;}else error}"
745	"public void test(){if(sb.length()>0){sb.append(delimiter);}}"
746	"public void test(){for(Node child=node.getFirstChild();child!=null;child=child.getNext()){if(sb.length()>0){sb.append(delimiter);}sb.append(getName(child));}}"
747	"public void test(){if(lineLength==0){for(int i=0;i<indent;i++){code.append(INDENT);lineLength+=INDENT.length();}}code.append(str);lineLength+=str.length();}"
748	"public void test(){if(lineLength>0){code.append('\n');lineIndex++;lineLength=0;}}"
749	"public void test(){if(getLastChar()!=' '){append("" "");}}"
750	"public void test(){if(binOp){if(getLastChar()!=' '){append("" "");}append(op);append("" "");}else {append(op);}}"
751	"public void test(){if(lineLength>0){code.append('\n');lineLength=0;lineIndex++;lineStartPosition=code.length();}}"
752	"public void test(){if(lineBreak){if(sawFunction){startNewLine();sawFunction=false;}}int len=code.length();if(preferredBreakPosition==len-1){char ch=code.charAt(len-1);if(ch==';'){preferredBreakPosition=len;}}maybeCutLine();}"
753	"public void test(){if(preferredBreakPosition==len-1){char ch=code.charAt(len-1);if(ch==';'){preferredBreakPosition=len;}}}"
754	"public void test(){if(scopeFuncName.equals(name)){recursive=true;}else if(scopeFuncParent.getType()==Token.NAME&&scopeFuncParent.getString().equals(name)){recursive=true;}else {for(Scope s=t.getScope();s.getParent()!=null;s=s.getParent()){Node curRoot=s.getRootNode();if(curRoot.getParent().getType()==Token.ASSIGN){Node owner=curRoot.getParent().getFirstChild();while(owner.getType()==Token.GETPROP){owner=owner.getFirstChild();}if(owner.getType()==Token.NAME&&owner.getString().equals(name)){recursive=true;break;}}}}}"
755	"public void test(){if(scopeFuncParent.getType()==Token.NAME&&scopeFuncParent.getString().equals(name)){recursive=true;}else {for(Scope s=t.getScope();s.getParent()!=null;s=s.getParent()){Node curRoot=s.getRootNode();if(curRoot.getParent().getType()==Token.ASSIGN){Node owner=curRoot.getParent().getFirstChild();while(owner.getType()==Token.GETPROP){owner=owner.getFirstChild();}if(owner.getType()==Token.NAME&&owner.getString().equals(name)){recursive=true;break;}}}}}"
756	"public void test(){if(owner.getType()==Token.NAME&&owner.getString().equals(name)){recursive=true;break;}}"
757	"public void test(){if(relationship!=null&&name.getString().equals(relationship.subclassName)){return info.addDeclaration(new Declaration(t.getModule(),parent,gramps,gramps.getParent()));}}"
758	"public void test(){if(n.getType()==Token.CALL){Node functionName=n.getFirstChild();return functionName.getType()==Token.NAME&&(functionName.getString().equals(CrossModuleMethodMotion.STUB_METHOD_NAME)||functionName.getString().equals(CrossModuleMethodMotion.UNSTUB_METHOD_NAME));}else if(n.getType()==Token.ARRAYLIT||n.getType()==Token.OBJECTLIT){boolean isObjectLit=n.getType()==Token.OBJECTLIT;for(Node child=n.getFirstChild();child!=null;child=child.getNext()){if(!canMoveValue(isObjectLit?child.getFirstChild():child)){return false;}}return true;}}"
759	"public void test(){SourceExcerptProvider source=getSource();String sourceExcerpt=source==null?null:excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter);StringBuilder b=new StringBuilder();if(error.sourceName!=null){b.append(error.sourceName);if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}b.append("": "");}}"
760	"public void test(){SourceExcerptProvider source=getSource();String sourceExcerpt=source==null?null:excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter);StringBuilder b=new StringBuilder();if(error.sourceName!=null){b.append(error.sourceName);if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}b.append("": "");}b.append(getLevelName(warning?CheckLevel.WARNING:CheckLevel.ERROR));}"
761	"public void test(){if(error.sourceName!=null){b.append(error.sourceName);if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}b.append("": "");}}"
762	"public void test(){if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}}"
763	"public void test(){StringBuilder b=new StringBuilder();if(error.sourceName!=null){b.append(error.sourceName);if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}b.append("": "");}b.append(getLevelName(warning?CheckLevel.WARNING:CheckLevel.ERROR));b.append("" - "");b.append(error.description);}"
764	"public void test(){if(error.sourceName!=null){b.append(error.sourceName);if(error.lineNumber>0){b.append(':');b.append(error.lineNumber);}b.append("": "");}b.append(getLevelName(warning?CheckLevel.WARNING:CheckLevel.ERROR));b.append("" - "");b.append(error.description);b.append('\n');}"
765	"public void test(){if(sourceExcerpt!=null){b.append(sourceExcerpt);b.append('\n');int charno=error.getCharno();if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){for(int i=0;i<charno;i++){char c=sourceExcerpt.charAt(i);if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}b.append(""^\n"");}}}"
766	"public void test(){if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){for(int i=0;i<charno;i++){char c=sourceExcerpt.charAt(i);if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}b.append(""^\n"");}}"
767	"public void test(){for(int i=0;i<charno;i++){char c=sourceExcerpt.charAt(i);if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}}"
768	"public void test(){if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}"
769	"public void test(){if(sourceExcerpt!=null){b.append(sourceExcerpt);b.append('\n');int charno=error.getCharno();if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){for(int i=0;i<charno;i++){char c=sourceExcerpt.charAt(i);if(Character.isWhitespace(c)){b.append(c);}else {b.append(' ');}}b.append(""^\n"");}}return b.toString();}"
770	"public void test(){if(code.length()==0){return null;}}"
771	"public void test(){if(region==null){return null;}String code=region.getSourceExcerpt();if(code.length()==0){return null;}int numberLength=Integer.toString(region.getEndingLineNumber()).length();StringBuilder builder=new StringBuilder(code.length()*2);int start=0;int end=code.indexOf('\n',start);}"
772	"public void test(){if(region==null){return null;}String code=region.getSourceExcerpt();if(code.length()==0){return null;}int numberLength=Integer.toString(region.getEndingLineNumber()).length();StringBuilder builder=new StringBuilder(code.length()*2);int start=0;int end=code.indexOf('\n',start);int lineNumber=region.getBeginningLineNumber();}"
773	"public void test(){if(line.length()==0){return builder.substring(0,builder.length()-1);}}"
774	"public void test(){String line;if(end<0){line=code.substring(start);if(line.length()==0){return builder.substring(0,builder.length()-1);}}else {line=code.substring(start,end);}builder.append(""  "");int spaces=numberLength-Integer.toString(lineNumber).length();builder.append(Strings.repeat("" "",spaces));}"
775	"public void test(){if(end<0){line=code.substring(start);if(line.length()==0){return builder.substring(0,builder.length()-1);}}else {line=code.substring(start,end);}builder.append(""  "");int spaces=numberLength-Integer.toString(lineNumber).length();builder.append(Strings.repeat("" "",spaces));builder.append(lineNumber);}"
776	"public void test(){if(end<0){line=code.substring(start);if(line.length()==0){return builder.substring(0,builder.length()-1);}}else {line=code.substring(start,end);}builder.append(""  "");int spaces=numberLength-Integer.toString(lineNumber).length();builder.append(Strings.repeat("" "",spaces));builder.append(lineNumber);builder.append(""| "");}"
777	"public void test(){int spaces=numberLength-Integer.toString(lineNumber).length();builder.append(Strings.repeat("" "",spaces));builder.append(lineNumber);builder.append(""| "");if(end<0){builder.append(line);start=-1;}else {builder.append(line);builder.append('\n');start=end+1;end=code.indexOf('\n',start);lineNumber++;}}"
778	"public void test(){builder.append(lineNumber);builder.append(""| "");if(end<0){builder.append(line);start=-1;}else {builder.append(line);builder.append('\n');start=end+1;end=code.indexOf('\n',start);lineNumber++;}}"
779	"public void test(){if(end<0){builder.append(line);start=-1;}else {builder.append(line);builder.append('\n');start=end+1;end=code.indexOf('\n',start);lineNumber++;}}"
780	"public void test(){if(scriptName.equals(oldVar.getInputName())){varsToRemove.add(oldVar);}}"
781	"public void test(){if(firstChild.getType()==Token.GETPROP&&firstChild.getLastChild().getString().equals(""prototype"")){Node maybeOwner=firstChild.getFirstChild();if(maybeOwner.isQualifiedName()){return maybeOwner;}}}"
782	"public void test(){if(objNode.getType()==Token.GETPROP&&objNode.getLastChild().getString().equals(""prototype"")){builder.inferThisType(info,objNode.getFirstChild());searchedForThisType=true;}else if(objNode.getType()==Token.THIS){builder.inferThisType(info,objNode.getJSType());searchedForThisType=true;}}"
783	"public void test(){if((fnType.isConstructor()||fnType.isInterface())&&!fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))){FunctionType superClassCtor=fnType.getSuperClassConstructor();scopeToDeclareIn.declare(variableName+"".prototype"",n,fnType.getPrototype(),input,superClassCtor==null||superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));if(newVar.getInitialValue()==null&&!isExtern&&variableName.equals(fnType.getInstanceType().getReferenceName())){compiler.report(JSError.make(sourceName,n,fnType.isConstructor()?CTOR_INITIALIZER:IFACE_INITIALIZER,variableName));}}}"
784	"public void test(){if(newVar.getInitialValue()==null&&!isExtern&&variableName.equals(fnType.getInstanceType().getReferenceName())){compiler.report(JSError.make(sourceName,n,fnType.isConstructor()?CTOR_INITIALIZER:IFACE_INITIALIZER,variableName));}}"
785	"public void test(){if(isGlobalVar&&""Window"".equals(variableName)){FunctionType globalThisCtor=typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();globalThisCtor.getInstanceType().clearCachedValues();globalThisCtor.getPrototype().clearCachedValues();globalThisCtor.setPrototypeBasedOn(((FunctionType)type).getInstanceType());}}"
786	"public void test(){if(rValue.getType()==Token.OR){Node firstClause=rValue.getFirstChild();Node secondClause=firstClause.getNext();boolean namesMatch=firstClause.getType()==Token.NAME&&lValue.getType()==Token.NAME&&firstClause.getString().equals(lValue.getString());if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){return secondClause.getJSType();}}}"
787	"public void test(){if(""prototype"".equals(propName)){Var qVar=scope.getVar(qName);if(qVar!=null){if(!qVar.isTypeInferred()){return ;}if(qVar.getScope()==scope){scope.undeclare(qVar);}}}}"
788	"public void test(){int len=s.length();for(int index=0;index<len;index++){char c=s.charAt(index);if(c<'0'||c>'9'){return false;}}return len>0;}"
789	"public void test(){for(int index=0;index<len;index++){char c=s.charAt(index);if(c<'0'||c>'9'){return false;}}}"
790	"public void test(){if(c<'0'||c>'9'){return false;}}"
791	"public void test(){for(int i=0;i<s.length();i++){swtich (s.charAt(i)){case '\""' :doubleq++;break;case '\'' :singleq++;break;}}}"
792	"public void test(){if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){sb.append(""\\>"");}else {sb.append(c);}}"
793	"public void test(){if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){sb.append(""<\\"");}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){sb.append(""<\\"");}else {sb.append(c);}}"
794	"public void test(){if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){sb.append(""<\\"");}else {sb.append(c);}}"
795	"public void test(){if(outputCharsetEncoder.canEncode(c)){sb.append(c);}else {appendHexJavaScriptRepresentation(sb,c);}}"
796	"public void test(){if(c>0x1f&&c<0x7f){sb.append(c);}else {appendHexJavaScriptRepresentation(sb,c);}}"
797	"public void test(){for(int i=0;i<s.length();i++){char c=s.charAt(i);if(c>0x1f&&c<0x7f){sb.append(c);}else {appendHexJavaScriptRepresentation(sb,c);}}}"
798	"public void test(){int i=0;Node c=n.getFirstChild();for(;c!=null&&i<maxCount;c=c.getNext()){if(c.getType()==Token.BLOCK){i+=getNonEmptyChildCount(c,maxCount-i);}else if(c.getType()!=Token.EMPTY){i++;}}return i;}"
799	"public void test(){for(;c!=null&&i<maxCount;c=c.getNext()){if(c.getType()==Token.BLOCK){i+=getNonEmptyChildCount(c,maxCount-i);}else if(c.getType()!=Token.EMPTY){i++;}}}"
800	"public void test(){if(c.getType()==Token.BLOCK){i+=getNonEmptyChildCount(c,maxCount-i);}else if(c.getType()!=Token.EMPTY){i++;}}"
801	"public void test(){if(c.getType()!=Token.EMPTY){i++;}}"
802	"public void test(){if(Character.isSupplementaryCodePoint(codePoint)){char[] surrogates=Character.toChars(codePoint);appendHexJavaScriptRepresentation(surrogates[0],out);appendHexJavaScriptRepresentation(surrogates[1],out);return ;}out.append(""\\u"").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);}"
803	"public void test(){for(int i=0;i<workList.size();++i){ConcreteScope scope=workList.get(i);for(Action action : scope.getActions()){for(Assignment assign : action.getAssignments(scope)){if(assign.slot.addConcreteType(assign.type)){changed=true;ConcreteScope varScope=assign.slot.getScope();if((varScope!=scope)&&!workSet.contains(varScope)){workSet.add(varScope);workList.add(varScope);}}}}}}"
804	"public void test(){ConcreteType origType=this.type;this.type=origType.unionWith(type);return !this.type.equals(origType);}"
805	"public void test(){for(int i=0;i<argTypes.size();++i){ConcreteSlot variable=(ConcreteSlot)fType.getParameterSlot(i);if(variable!=null){assigns.add(new Assignment(variable,argTypes.get(i)));}}}"
806	"public void test(){if(variable!=null){assigns.add(new Assignment(variable,argTypes.get(i)));}}"
807	"public void test(){if(""call"".equals(first.getNext().getString())){if(first.getType()==Token.GETPROP){addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getFirstChild().getNext().getString()).setIsCallFunction().build());}else {addAction(new FunctionCallBuilder(first,receiver.getNext()).setIsCallFunction().build());}}else {addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getNext().getString()).build());}}"
808	"public void test(){if(""prototype"".equals(propName)){for(ConcreteFunctionType funType : recvType.getFunctions()){type=type.unionWith(funType.getPrototypeType());}}else if(compiler.getCodingConvention().isSuperClassReference(propName)){for(ConcreteFunctionType superType : recvType.getSuperclassTypes()){type=type.unionWith(superType.getPrototypeType());}}else if(""call"".equals(propName)){type=recvType;}}"
809	"public void test(){if(""call"".equals(propName)){type=recvType;}}"
810	"public void test(){if(jsType==null||jstype==null){return jstype==jsType;}else {return jsType.equals(this.jstype);}}"
811	"public void test(){if((pair.concrete.equals(this.concrete)&&equalsJSType(pair.jstype))){return true;}}"
812	"public void test(){if(varName.equals(GLOBAL_THIS_NAME)){return true;}}"
813	"public void test(){if(objType.hasReferenceName()&&objType.getReferenceName().equals(qName)){objType.setJSDocInfo(docInfo);if(objType.isConstructor()||objType.isInterface()){((FunctionType)objType).getInstanceType().setJSDocInfo(docInfo);}else if(objType instanceof EnumType){((EnumType)objType).getElementsType().setJSDocInfo(docInfo);}}}"
814	"public void test(){if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));if(!p.newName.equals(oldName)){n.setString(p.newName);compiler.reportCodeChange();}}}"
815	"public void test(){if(!p.newName.equals(oldName)){n.setString(p.newName);compiler.reportCodeChange();}}"
816	"public void test(){if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));n.setString(p.newName);changed=changed||!p.newName.equals(oldName);}}"
817	"public void test(){if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));replacement=p.newName;}else {replacement=oldName;}}"
818	"public void test(){if(sb.length()>0){sb.append('.');}}"
819	"public void test(){for(String oldName : firstArg.getString().split(""[.]"")){Property p=propertyMap.get(oldName);String replacement;if(p!=null&&p.newName!=null){Preconditions.checkState(oldName.equals(p.oldName));replacement=p.newName;}else {replacement=oldName;}if(sb.length()>0){sb.append('.');}sb.append(replacement);}}"
820	"public void test(){if(fnName.getType()==Token.NAME&&RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())){callNodeToParentMap.put(n,parent);countCallCandidates(t,n);}}"
821	"public void test(){if(RENAME_PROPERTY_FUNCTION_NAME.equals(name)){if(NodeUtil.isExpressionNode(parent)){parent.detachFromParent();}else {parent.removeChild(n);}compiler.reportCodeChange();}}"
822	"public void test(){if(parent.getType()==Token.NAME&&RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())){Node varNode=parent.getParent();if(varNode.getType()==Token.VAR){varNode.removeChild(parent);if(!varNode.hasChildren()){varNode.detachFromParent();}compiler.reportCodeChange();}}}"
823	"public void test(){if(first.getType()==Token.NAME&&""eval"".equals(first.getString())){first.putBooleanProp(Node.DIRECT_EVAL,true);}}"
824	"public void test(){Preconditions.checkNotNull(other);return (other instanceof LiveVariableLattice)&&this.liveSet.equals(((LiveVariableLattice)other).liveSet);}"
825	"public void test(){if(Branch.ON_EX.equals(edge.getValue())){conditional=true;}}"
826	"public void test(){if(n.getType()!=Token.NAME||!n.getString().equals(ARGUMENT_ARRAY_ALIAS)||jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS,false)){return false;}else {return true;}}"
827	"public void test(){if(!n.getString().equals("""")){return new FunctionExpressionDefinition(parent,isExtern);}}"
828	"public void test(){if(!n.getString().equals("""")){return true;}}"
829	"public void test(){if(name.equals(""undefined"")){n.removeFirstChild();reportCodeChange();}}"
830	"public void test(){if(name1.hasChildren()&&maybeName2.getType()==Token.NAME&&name1.getString().equals(maybeName2.getString())){Node thenExpr=name1.removeChildren();Node elseExpr=elseAssign.getLastChild().detachFromParent();cond.detachFromParent();Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);var.detachFromParent();name1.addChildrenToBack(hookNode);parent.replaceChild(n,var);reportCodeChange();return var;}}"
831	"public void test(){if(name2.hasChildren()&&maybeName1.getType()==Token.NAME&&maybeName1.getString().equals(name2.getString())){Node thenExpr=thenAssign.getLastChild().detachFromParent();Node elseExpr=name2.removeChildren();cond.detachFromParent();Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);var.detachFromParent();name2.addChildrenToBack(hookNode);parent.replaceChild(n,var);reportCodeChange();return var;}}"
832	"public void test(){if(""Object"".equals(className)&&!constructorHasArgs){newLiteralNode=new Node(Token.OBJECTLIT);}else if(""Array"".equals(className)){Node arg0=constructorNameNode.getNext();FoldArrayAction action=isSafeToFoldArrayConstructor(arg0);if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS||action==FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS){newLiteralNode=new Node(Token.ARRAYLIT);n.removeChildren();if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS){newLiteralNode.addChildrenToFront(arg0);}}}}"
833	"public void test(){if(""Array"".equals(className)){Node arg0=constructorNameNode.getNext();FoldArrayAction action=isSafeToFoldArrayConstructor(arg0);if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS||action==FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS){newLiteralNode=new Node(Token.ARRAYLIT);n.removeChildren();if(action==FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS){newLiteralNode.addChildrenToFront(arg0);}}}}"
834	"public void test(){if(pattern.getType()==Token.STRING&&!"""".equals(pattern.getString())&&pattern.getString().length()<100&&(null==flags||flags.getType()==Token.STRING)&&(isEcmaScript5OrGreater()||!containsUnicodeEscape(pattern.getString()))){pattern=makeForwardSlashBracketSafe(pattern);Node regexLiteral;if(null==flags||"""".equals(flags.getString())){regexLiteral=new Node(Token.REGEXP,pattern);}else {if(!areValidRegexpFlags(flags.getString())){error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);return n;}if(!areSafeFlagsToFold(flags.getString())){return n;}n.removeChild(flags);regexLiteral=new Node(Token.REGEXP,pattern,flags);}parent.replaceChild(n,regexLiteral);reportCodeChange();return regexLiteral;}}"
835	"public void test(){if(null==flags||"""".equals(flags.getString())){regexLiteral=new Node(Token.REGEXP,pattern);}else {if(!areValidRegexpFlags(flags.getString())){error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);return n;}if(!areSafeFlagsToFold(flags.getString())){return n;}n.removeChild(flags);regexLiteral=new Node(Token.REGEXP,pattern,flags);}}"
836	"public void test(){if(null==sb){sb=new StringBuilder(s.length()+16);}}"
837	"public void test(){if(!isEscaped&&!inCharset){if(null==sb){sb=new StringBuilder(s.length()+16);}sb.append(s,pos,i).append('\\');pos=i;}}"
838	"public void test(){if(isEscaped){sb.append(s,pos,i-1);}else {sb.append(s,pos,i);}}"
839	"public void test(){swtich (ch){case '\r' :sb.append(""\\r"");break;case '\n' :sb.append(""\\n"");break;case ' ' :sb.append(""\\u2028"");break;case ' ' :sb.append(""\\u2029"");break;}pos=i+1;break;}"
840	"public void test(){for(int i=-1;(i=esc.indexOf(""\\u"",i+1))>=0;){int nSlashes=0;while(i-nSlashes>0&&'\\'==esc.charAt(i-nSlashes)){++nSlashes;}if(0==(nSlashes&1)){return true;}}}"
841	"public void test(){if(""goog$object$create"".equals(fnName)||""goog.object.create"".equals(fnName)){callNodes.add(n);}}"
842	"public void test(){if(nameNode.isQualifiedName()&&valueNode.isQualifiedName()){abstractMethodAssignmentNodes.add(new RemovableAssignment(n.getFirstChild(),n,t));}}"
843	"public void test(){String original=getOrginalName(name);String newName=original;int i=0;while(!isValidName(newName)){newName=original+ContextualRenamer.UNIQUE_ID_SEPARATOR;}return newName;}"
844	"public void test(){if(TokenStream.isJSIdentifier(name)&&!referencedNames.contains(name)){return true;}}"
845	"public void test(){if(!name.equals(ARGUMENTS)){if(global){reserveName(name);}else {if(!declarations.containsKey(name)){int id=incrementNameCount(name);String newName=null;if(id!=0){newName=getUniqueName(name,id);}declarations.put(name,newName);}}}}"
846	"public void test(){Preconditions.checkState(!name.equals(ARGUMENTS));if(!declarations.containsKey(name)){declarations.put(name,getUniqueName(name));}}"
847	"public void test(){if(lineno<1||lineno>lineOffsets.length){throw new IllegalArgumentException(""Expected line number between 1 and ""+lineOffsets.length);}}"
848	"public void test(){if(lineOffsets==null){findLineOffsets();}return lineOffsets.length;}"
849	"public void test(){String passName=pass.getName();int i=1;while(graph.hasNode(passName)){passName=pass.getName()+(i++);}graph.createNode(passName);if(loopStart==null&&!pass.isOneTimePass()){loopStart=passName;}else if(loopStart!=null&&pass.isOneTimePass()){graph.connect(lastPass,""loop"",loopStart);loopStart=null;}}"
850	"public void test(){for(int i=0;i<factoryList.size();i++){if(factoryList.get(i).getName().equals(name)){return i;}}}"
851	"public void test(){if(factoryList.get(i).getName().equals(name)){return i;}}"
852	"public void test(){StringBuilder sb=new StringBuilder();sb.append('/');appendSourceCode(sb);if(sb.length()==1){sb.append(""(?:)"");}sb.append('/');return sb.toString();}"
853	"public void test(){if(sb.length()==1){sb.append(""(?:)"");}}"
854	"public void test(){sb.append('(').append(getClass().getSimpleName());int len=sb.length();sb.append(' ');appendDebugInfo(sb);if(sb.length()==len+1){sb.setLength(len);}for(RegExpTree child : children()){sb.append(' ');child.appendDebugString(sb);}sb.append(')');}"
855	"public void test(){if(sb.length()==len+1){sb.setLength(len);}}"
856	"public void test(){if(end+1>=limit||!isRepetitionStart(pattern.charAt(end+1))){++end;}else {break;}}"
857	"public void test(){if(pos<limit&&isRepetitionStart(pattern.charAt(pos))){atom=parseRepetition(atom);}}"
858	"public void test(){if(pos<limit&&pattern.charAt(pos)=='|'){if(alternatives==null){alternatives=ImmutableList.builder();}alternatives.add(preceder);preceder=null;++pos;}}"
859	"public void test(){if(pos<limit&&pattern.charAt(pos)=='?'){if(pos+1<limit){capturing=false;char ch=pattern.charAt(pos+1);swtich (ch){case ':' :pos+=2;break;case '!' :case '=' :pos+=2;type=ch;break;default :throw new IllegalArgumentException(""Malformed parenthetical: ""+pattern.substring(start));}}}}"
860	"public void test(){capturing=false;char ch=pattern.charAt(pos+1);swtich (ch){case ':' :pos+=2;break;case '!' :case '=' :pos+=2;type=ch;break;default :throw new IllegalArgumentException(""Malformed parenthetical: ""+pattern.substring(start));}}"
861	"public void test(){if(pos<limit&&pattern.charAt(pos)==')'){++pos;}else {throw new IllegalArgumentException(""Unclosed parenthetical group: ""+pattern.substring(start));}}"
862	"public void test(){if(ch=='\\'){++pos;char possibleGroupName=pattern.charAt(pos);CharRanges group=NAMED_CHAR_GROUPS.get(possibleGroupName);if(group!=null){++pos;ranges=ranges.union(group);continue;}start=parseEscapeChar();}else {start=ch;++pos;}}"
863	"public void test(){if(pos+1<limit&&pattern.charAt(pos)=='-'&&pattern.charAt(pos+1)!=']'){++pos;ch=pattern.charAt(pos);if(ch=='\\'){++pos;end=parseEscapeChar();}else {end=ch;++pos;}}}"
864	"public void test(){while(pos<octLimit){ch=pattern.charAt(pos);if('0'<=ch&&ch<='7'){codeUnit=(char)((codeUnit<<3)+(ch-'0'));++pos;}else {break;}}}"
865	"public void test(){if(pos<limit){char next=pattern.charAt(pos);if('0'<=next&&next<='9'){int twoDigitGroupIndex=possibleGroupIndex*10+(next-'0');if(numCapturingGroups>=twoDigitGroupIndex){++pos;possibleGroupIndex=twoDigitGroupIndex;}}}}"
866	"public void test(){char ch=pattern.charAt(pos);int digit;if('0'<=ch&&ch<='9'){digit=ch-'0';}else if('a'<=ch&&ch<='f'){digit=ch+(10-'a');}else if('A'<=ch&&ch<='F'){digit=ch+(10-'A');}else {throw new IllegalArgumentException(pattern.substring(pos));}}"
867	"public void test(){String counts=pattern.substring(start,end);pos=end+1;int comma=counts.indexOf(',');try{min=Integer.parseInt(comma>=0?counts.substring(0,comma):counts);max=comma>=0?comma+1!=counts.length()?Integer.parseInt(counts.substring(comma+1)):Integer.MAX_VALUE:min;}catch (NumberFormatException ex) {  min=max=-1;}if(min<0||min>max){pos=start-1;return body;}break;default :}"
868	"public void test(){if(pos<limit&&pattern.charAt(pos)=='?'){greedy=false;++pos;}}"
869	"public void test(){if('0'<=next&&next<='9'){sb.append('\\');}}"
870	"public void test(){int n=text.length();if(n==0){return Empty.INSTANCE;}if(flags.indexOf('i')>=0){String canonicalized=CaseCanonicalize.caseCanonicalize(text);if(text!=canonicalized){return new Text(canonicalized);}}return this;}"
871	"public void test(){for(int i=0,n=text.length();i<n;++i){if(CaseCanonicalize.CASE_SENSITIVE.contains(text.charAt(i))){return true;}}}"
872	"public void test(){if(CaseCanonicalize.CASE_SENSITIVE.contains(text.charAt(i))){return true;}}"
873	"public void test(){if(body instanceof Empty||NEVER_MATCHES.equals(body)){return body;}}"
874	"public void test(){if(body instanceof Repetition){Repetition rbody=(Repetition)body;if(rbody.greedy==greedy){long lmin=((long)min)*rbody.min;long lmax=((long)max)*rbody.max;if(lmin<Integer.MAX_VALUE){body=rbody.body;min=(int)lmin;max=lmax>=Integer.MAX_VALUE?Integer.MAX_VALUE:(int)lmax;}}}if(min==1&&max==1){return body;}boolean greedy=this.greedy||min==max;return body.equals(this.body)&&min==this.min&&max==this.max&&greedy==this.greedy?this:new Repetition(body,min,max,greedy).simplify(flags);}"
875	"public void test(){if(body instanceof Alternation||body instanceof Concatenation){sb.append(""(?:"");body.appendSourceCode(sb);sb.append(')');}else {body.appendSourceCode(sb);}}"
876	"public void test(){default :sb.append('{').append(min).append("",}"");}"
877	"public void test(){if(min==0&&max==1){sb.append('?');}else if(min==max){if(min!=1){sb.append('{').append(min).append('}');}}else {sb.append('{').append(min).append(',').append(max).append('}');}}"
878	"public void test(){if(min!=1){sb.append('{').append(min).append('}');}}"
879	"public void test(){if(min==max){if(min!=1){sb.append('{').append(min).append('}');}}else {sb.append('{').append(min).append(',').append(max).append('}');}}"
880	"public void test(){if(!greedy){sb.append('?');}}"
881	"public void test(){sb.append("" min="").append(min).append("", max="").append(max);if(!greedy){sb.append(""  not_greedy"");}}"
882	"public void test(){if(!greedy){sb.append(""  not_greedy"");}}"
883	"public void test(){if(!(o instanceof Repetition)){return false;}Repetition that=(Repetition)o;return this.body.equals(that.body)&&this.min==that.min&&this.max==that.max&&this.greedy==that.greedy;}"
884	"public void test(){if(alternative.equals(NEVER_MATCHES)){continue;}}"
885	"public void test(){if(alternative.equals(last)&&!alternative.hasCapturingGroup()){it.remove();}else {last=alternative;}}"
886	"public void test(){int end=i;int nCharsets=0;while(end<n){RegExpTree follower=alternatives.get(end);if(follower instanceof Charset){++nCharsets;}else if(!(follower instanceof Text&&((Text)follower).text.length()==1)){break;}++end;}}"
887	"public void test(){if(!(follower instanceof Text&&((Text)follower).text.length()==1)){break;}}"
888	"public void test(){CharRanges ieExplicits=CharRanges.EMPTY;List<RegExpTree> charAlternatives=alternatives.subList(i,end);for(RegExpTree charAlternative : charAlternatives){if(charAlternative instanceof Text){char ch=((Text)charAlternative).text.charAt(0);members[memberIdx++]=ch;if(IE_SPEC_ERRORS.contains(ch)){ieExplicits=ieExplicits.union(CharRanges.inclusive(ch,ch));}}else if(charAlternative instanceof Charset){Charset cs=(Charset)charAlternative;chars=chars.union(cs.ranges);ieExplicits=ieExplicits.union(cs.ieExplicits);}}}"
889	"public void test(){if(charAlternative instanceof Text){char ch=((Text)charAlternative).text.charAt(0);members[memberIdx++]=ch;if(IE_SPEC_ERRORS.contains(ch)){ieExplicits=ieExplicits.union(CharRanges.inclusive(ch,ch));}}else if(charAlternative instanceof Charset){Charset cs=(Charset)charAlternative;chars=chars.union(cs.ranges);ieExplicits=ieExplicits.union(cs.ieExplicits);}}"
890	"public void test(){swtich (alternatives.size()){case 0 :return Empty.INSTANCE;case 1 :return alternatives.get(0);case 2 :if(alternatives.get(1) instanceof Empty){return new Repetition(alternatives.get(0),0,1,true);}else if(alternatives.get(0) instanceof Empty){return new Repetition(alternatives.get(1),0,1,false);}break;}return alternatives.equals(this.alternatives)?this:new Alternation(alternatives);}"
891	"public void test(){for(int i=0,n=alternatives.size();i<n;++i){if(i!=0){sb.append('|');}alternatives.get(i).appendSourceCode(sb);}}"
892	"public void test(){if(i!=0){sb.append('|');}}"
893	"public void test(){if(!(o instanceof LookaheadAssertion)){return false;}LookaheadAssertion that=(LookaheadAssertion)o;return this.positive==that.positive&&this.body.equals(that.body);}"
894	"public void test(){if(!best.equals(ranges)){return new Charset(best,ieExplicits);}}"
895	"public void test(){CharRanges withoutNamedGroups=decompose().ranges;return !withoutNamedGroups.equals(CaseCanonicalize.expandToAllMatched(withoutNamedGroups));}"
896	"public void test(){if(simplest!=null){namedGroups.append('\\').append(groupName);ranges=simplest;}else {break;}}"
897	"public void test(){if(DOT_CHARSET.ranges.equals(ranges)){sb.append('.');return ;}}"
898	"public void test(){if(!inverted&&namedGroups.length()==2){sb.append(namedGroups);return ;}else if(ranges.isEmpty()&&namedGroups.length()==0){sb.append(inverted?""[\\S\\s]"":""(?!)"");return ;}}"
899	"public void test(){if(ranges.isEmpty()&&namedGroups.length()==0){sb.append(inverted?""[\\S\\s]"":""(?!)"");return ;}}"
900	"public void test(){if(ranges.isEmpty()){if(!inverted&&namedGroups.length()==2){sb.append(namedGroups);return ;}else if(ranges.isEmpty()&&namedGroups.length()==0){sb.append(inverted?""[\\S\\s]"":""(?!)"");return ;}}sb.append('[');if(inverted){sb.append('^');}}"
901	"public void test(){if(inverted){sb.append('^');}}"
902	"public void test(){if(ranges.isEmpty()){if(!inverted&&namedGroups.length()==2){sb.append(namedGroups);return ;}else if(ranges.isEmpty()&&namedGroups.length()==0){sb.append(inverted?""[\\S\\s]"":""(?!)"");return ;}}sb.append('[');if(inverted){sb.append('^');}sb.append(namedGroups);boolean rangesStartCharset=!inverted&&namedGroups.length()==0;boolean emitDashAtEnd=false;}"
903	"public void test(){if(start=='-'){emitDashAtEnd=true;}else {escapeRangeCharOnto(start,rangesStartCharset,i==0,i+1==n,sb);}}"
904	"public void test(){default :escapeRangeCharOnto(start,rangesStartCharset,i==0,false,sb);sb.append('-');escapeRangeCharOnto(end,rangesStartCharset,false,true,sb);break;}"
905	"public void test(){if(emitDashAtEnd){sb.append('-');}}"
906	"public void test(){int start=ranges.start(i);int end=ranges.end(i)-1;if(start<0x20||start>=0x7f){complexity+=start>=0x100?6:4;}else {++complexity;}swtich (end-start){case 0 :continue;case 1 :break;default :complexity+=1;}}"
907	"public void test(){if(!(o instanceof DecomposedCharset)){return false;}DecomposedCharset that=(DecomposedCharset)o;return this.inverted=that.inverted&&this.ranges.equals(that.ranges);}"
908	"public void test(){if(beforeBody.equals(afterBody)&&!beforeBody.hasCapturingGroup()){long lmin=((long)beforeMin)+afterMin;long lmax=((long)beforeMax)+afterMax;if(lmin<Integer.MAX_VALUE){int min=(int)lmin;int max=lmax>=Integer.MAX_VALUE?Integer.MAX_VALUE:(int)lmax;return new Repetition(beforeBody,min,max,beforeGreedy||afterGreedy);}}}"
909	"public void test(){int start=sb.length();element.appendSourceCode(sb);if(digitsMightBleed&&sb.length()>start){char firstChar=sb.charAt(start);if('0'<=firstChar&&firstChar<='9'){if(sb.charAt(start-1)=='{'){sb.insert(start-1,'\\');}else {sb.insert(start,""(?:"").append(')');}}}}"
910	"public void test(){if(digitsMightBleed&&sb.length()>start){char firstChar=sb.charAt(start);if('0'<=firstChar&&firstChar<='9'){if(sb.charAt(start-1)=='{'){sb.insert(start-1,'\\');}else {sb.insert(start,""(?:"").append(')');}}}}"
911	"public void test(){if(sb.charAt(start-1)=='{'){sb.insert(start-1,'\\');}else {sb.insert(start,""(?:"").append(')');}}"
912	"public void test(){if(ch>=0x100){sb.append(""\\u"");sb.append(""0123456789abcdef"".charAt((ch>>12)&0xf));sb.append(""0123456789abcdef"".charAt((ch>>8)&0xf));sb.append(""0123456789abcdef"".charAt((ch>>4)&0xf));sb.append(""0123456789abcdef"".charAt((ch)&0xf));}else {sb.append(""\\x"");sb.append(""0123456789abcdef"".charAt((ch>>4)&0xf));sb.append(""0123456789abcdef"".charAt((ch)&0xf));}}"
913	"public void test(){if(ch<0x20||ch>=0x7f){if(ch>=0x100){sb.append(""\\u"");sb.append(""0123456789abcdef"".charAt((ch>>12)&0xf));sb.append(""0123456789abcdef"".charAt((ch>>8)&0xf));sb.append(""0123456789abcdef"".charAt((ch>>4)&0xf));sb.append(""0123456789abcdef"".charAt((ch)&0xf));}else {sb.append(""\\x"");sb.append(""0123456789abcdef"".charAt((ch>>4)&0xf));sb.append(""0123456789abcdef"".charAt((ch)&0xf));}}else {sb.append(ch);}}"
914	"public void test(){if((ranges.length&1)!=0){throw new IllegalArgumentException();}}"
915	"public void test(){for(int i=1;i<ranges.length;++i){if(ranges[i]<=ranges[i-1]){throw new IllegalArgumentException(ranges[i]+"" > "");}}}"
916	"public void test(){if(ranges[i]<=ranges[i-1]){throw new IllegalArgumentException(ranges[i]+"" > "");}}"
917	"public void test(){int nMembers=members.length;if(nMembers==0){return new int[0];}Arrays.sort(members);int nRuns=1;for(int i=1;i<nMembers;++i){int current=members[i],last=members[i-1];if(current==last){continue;}if(current!=last+1){++nRuns;}}}"
918	"public void test(){for(int i=1;i<nMembers;++i){int current=members[i],last=members[i-1];if(current==last){continue;}if(current!=last+1){++nRuns;}}}"
919	"public void test(){for(int i=1;k+2<ranges.length;++i){int current=members[i],last=members[i-1];if(current==last){continue;}if(current!=last+1){ranges[++k]=last+1;ranges[++k]=current;}}}"
920	"public void test(){int start=Math.min(a0,b0);int end=Math.max(a1,b1);i+=2;j+=2;while(i<m||j<n){if(i<m&&q[i]<=end){end=Math.max(end,q[i+1]);i+=2;}else if(j<n&&r[j]<=end){end=Math.max(end,r[j+1]);j+=2;}else {break;}}}"
921	"public void test(){while(i<m||j<n){if(i<m&&q[i]<=end){end=Math.max(end,q[i+1]);i+=2;}else if(j<n&&r[j]<=end){end=Math.max(end,r[j+1]);j+=2;}else {break;}}}"
922	"public void test(){if(i<m&&q[i]<=end){end=Math.max(end,q[i+1]);i+=2;}else if(j<n&&r[j]<=end){end=Math.max(end,r[j+1]);j+=2;}else {break;}}"
923	"public void test(){if(i<m){System.arraycopy(q,i,out,k,m-i);k+=m-i;}else if(j<n){System.arraycopy(r,j,out,k,n-j);k+=n-j;}}"
924	"public void test(){if(k!=out.length){int[] clipped=new int[k];System.arraycopy(out,0,clipped,0,k);out=clipped;}}"
925	"public void test(){int[] aRanges=ranges,bRanges=other.ranges;int aLen=aRanges.length,bLen=bRanges.length;if(aLen==0){return this;}if(bLen==0){return other;}int aIdx=0,bIdx=0;int[] intersection=new int[Math.min(aLen,bLen)];int intersectionIdx=0;}"
926	"public void test(){if(intersectionIdx==intersection.length){int[] newArr=new int[intersectionIdx*2];System.arraycopy(intersection,0,newArr,0,intersectionIdx);intersection=newArr;}}"
927	"public void test(){if(intersectionIdx!=intersection.length){int[] newArr=new int[intersectionIdx];System.arraycopy(intersection,0,newArr,0,intersectionIdx);intersection=newArr;}}"
928	"public void test(){if(dIdx==difference.length){int[] newArr=new int[dIdx*2];System.arraycopy(difference,0,newArr,0,dIdx);difference=newArr;}}"
929	"public void test(){if(dIdx!=difference.length){int[] newArr=new int[dIdx];System.arraycopy(difference,0,newArr,0,dIdx);difference=newArr;}}"
930	"public void test(){int superIdx=0,subIdx=0;int superLen=superRanges.length,subLen=subRanges.length;while(subIdx<subLen){if(superIdx==superLen){return false;}if(superRanges[superIdx+1]<=subRanges[subIdx]){superIdx+=2;}else if(superRanges[superIdx]>subRanges[subIdx]){return false;}else if(superRanges[superIdx+1]>=subRanges[subIdx+1]){subIdx+=2;}else {return false;}}}"
931	"public void test(){int n=ranges.length;if(delta==0||n==0){return this;}if(delta<0){long lmin=ranges[0]+delta;if(lmin<Integer.MIN_VALUE){throw new IndexOutOfBoundsException();}}else {long lmax=ranges[n-1]+delta;if(lmax>Integer.MAX_VALUE){throw new IndexOutOfBoundsException();}}}"
932	"public void test(){StringBuilder sb=new StringBuilder();sb.append('[');for(int i=0;i<ranges.length;++i){if((i&1)!=0&&ranges[i]==ranges[i-1]+1){continue;}if(i!=0){sb.append((i&1)==0?' ':'-');}sb.append(""0x"").append(Integer.toString(ranges[i]-(i&1),16));}sb.append(']');return sb.toString();}"
933	"public void test(){for(int i=0;i<ranges.length;++i){if((i&1)!=0&&ranges[i]==ranges[i-1]+1){continue;}if(i!=0){sb.append((i&1)==0?' ':'-');}sb.append(""0x"").append(Integer.toString(ranges[i]-(i&1),16));}}"
934	"public void test(){if((i&1)!=0&&ranges[i]==ranges[i-1]+1){continue;}}"
935	"public void test(){if(i!=0){sb.append((i&1)==0?' ':'-');}}"
936	"public void test(){if(!(o instanceof CharRanges)){return false;}return Arrays.equals(this.ranges,((CharRanges)o).ranges);}"
937	"public void test(){for(int i=0,n=s.length();i<n;++i){char ch=s.charAt(i);char cu=caseCanonicalize(ch);if(cu!=ch){StringBuilder sb=new StringBuilder(s);sb.setCharAt(i,cu);while(++i<n){sb.setCharAt(i,caseCanonicalize(s.charAt(i)));}return sb.toString();}}}"
938	"public void test(){if(cu!=ch){StringBuilder sb=new StringBuilder(s);sb.setCharAt(i,cu);while(++i<n){sb.setCharAt(i,caseCanonicalize(s.charAt(i)));}return sb.toString();}}"
939	"public void test(){if(!name.equals(anc.getFirstChild().getQualifiedName())){return Ref.Type.ALIASING_GET;}}"
940	"public void test(){if(!name.equals(anc.getString())){return Ref.Type.ALIASING_GET;}}"
941	"public void test(){if(name.endsWith("".prototype"")){numLevelsToRemove=1;prefix=name.substring(0,name.length()-10);}else {int i=name.indexOf("".prototype."");if(i==-1){return false;}prefix=name.substring(0,i);numLevelsToRemove=2;i=name.indexOf('.',i+11);while(i>=0){numLevelsToRemove++;i=name.indexOf('.',i+1);}}}"
942	"public void test(){int i=name.indexOf("".prototype."");if(i==-1){return false;}prefix=name.substring(0,i);numLevelsToRemove=2;i=name.indexOf('.',i+11);while(i>=0){numLevelsToRemove++;i=name.indexOf('.',i+1);}}"
943	"public void test(){if(i==-1){return false;}}"
944	"public void test(){if(node==null){int i=name.lastIndexOf('.');if(i>=0){String parentName=name.substring(0,i);Name parent=getOrCreateName(parentName);node=parent.addProperty(name.substring(i+1),inExterns);}else {node=new Name(name,null,inExterns);globalNames.add(node);}nameMap.put(name,node);}}"
945	"public void test(){if(i>=0){String parentName=name.substring(0,i);Name parent=getOrCreateName(parentName);node=parent.addProperty(name.substring(i+1),inExterns);}else {node=new Name(name,null,inExterns);globalNames.add(node);}}"
946	"public void test(){if(left.getType()==Token.NAME&&right.getType()==Token.NAME&&left.getString().equals(right.getString())){subtree.getParent().replaceChild(subtree,right.detachFromParent());reportCodeChange();return right;}}"
947	"public void test(){if(NodeUtil.isName(lhsAssign)&&NodeUtil.isName(condition)){Node rhsAssign=getSimpleAssignmentValue(n);TernaryValue value=NodeUtil.getImpureBooleanValue(rhsAssign);if(value!=TernaryValue.UNKNOWN){int replacementConditionNodeType=(value.toBoolean(true))?Token.TRUE:Token.FALSE;condition.getParent().replaceChild(condition,new Node(replacementConditionNodeType));reportCodeChange();}}}"
948	"public void test(){if(name.equals(ARGUMENTS)&&!NodeUtil.isVarDeclaration(n)){compiler.report(JSError.make(sourceName,n,VAR_ARGUMENTS_SHADOWED_ERROR));}}"
949	"public void test(){if(scope.isDeclared(name,false)||(scope.isLocal()&&name.equals(ARGUMENTS))){redeclarationHandler.onRedeclaration(scope,name,n,input);}else {scope.declare(name,n,null,input);}}"
950	"public void test(){if(key.getString().equals(phRef.getName())){Node valueNode=key.getFirstChild();partNode=valueNode.cloneTree();}}"
951	"public void test(){Preconditions.checkState(name!=null&&name.length()>0);Preconditions.checkState(vars.get(name)==null);JSDocInfo info=NodeUtil.getInfoForNameNode(nameNode);Var var=new Var(inferred,name,nameNode,type,this,vars.size(),input,info!=null&&info.isDefine(),info);vars.put(name,var);return var;}"
952	"public void test(){Node fnNameNode=fnNode.getFirstChild();String newName=renameMap.get(name);if(newName==null){newName=nameGenerator.generateNextName();renameMap.put(name,newName);}fnNameNode.setString(newName);namedCount++;bytesUsed+=newName.length();}"
953	"public void test(){regexTree=regexTree.simplify(flags);String literal=regexTree.toString();String newPattern=literal.substring(1,literal.length()-1);String newFlags=((flags.contains(""g"")&&(!RegExpTree.matchesWholeInput(regexTree,flags)||regexTree.hasCapturingGroup())?""g"":"""")+(flags.contains(""i"")&&regexTree.isCaseSensitive()?""i"":""""));if(!(newPattern.equals(pattern)&&newFlags.equals(flags))){subtree.getFirstChild().setString(newPattern);if(!"""".equals(newFlags)){subtree.getLastChild().setString(newFlags);}else if(subtree.getChildCount()==2){subtree.getLastChild().detachFromParent();}reportCodeChange();}}"
954	"public void test(){if(!(newPattern.equals(pattern)&&newFlags.equals(flags))){subtree.getFirstChild().setString(newPattern);if(!"""".equals(newFlags)){subtree.getLastChild().setString(newFlags);}else if(subtree.getChildCount()==2){subtree.getLastChild().detachFromParent();}reportCodeChange();}}"
955	"public void test(){if(!"""".equals(newFlags)){subtree.getLastChild().setString(newFlags);}else if(subtree.getChildCount()==2){subtree.getLastChild().detachFromParent();}}"
956	"public void test(){if(""eval"".equals(n.getString())){t.report(n,EVAL_USE);}else if(n.getString().endsWith(""__"")){t.report(n,ILLEGAL_NAME);}}"
957	"public void test(){if(""arguments"".equals(n.getFirstChild().getString())){t.report(n,ARGUMENTS_ASSIGNMENT);}else if(""eval"".equals(n.getFirstChild().getString())){if(noCajaChecks){t.report(n,EVAL_ASSIGNMENT);}}}"
958	"public void test(){if(""eval"".equals(n.getFirstChild().getString())){if(noCajaChecks){t.report(n,EVAL_ASSIGNMENT);}}}"
959	"public void test(){if(""eval"".equals(n.getString())){t.report(n,EVAL_DECLARATION);}else if(""arguments"".equals(n.getString())){t.report(n,ARGUMENTS_DECLARATION);}else if(n.getString().endsWith(""__"")){if(!noCajaChecks){t.report(n,ILLEGAL_NAME);}}}"
960	"public void test(){if(""arguments"".equals(n.getString())){t.report(n,ARGUMENTS_DECLARATION);}else if(n.getString().endsWith(""__"")){if(!noCajaChecks){t.report(n,ILLEGAL_NAME);}}}"
961	"public void test(){for(int i=1;i<refs.size();i++){Node nameNode=refs.get(i).getNode();if(aliasCandidates.containsKey(nameNode)){AliasCandidate candidate=aliasCandidates.get(nameNode);if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){Reference aliasInit;aliasInit=candidate.refInfo.getInitializingReference();Node value=aliasInit.getAssignedValue();Preconditions.checkNotNull(value);inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);staleVars.add(candidate.alias);}}}}"
962	"public void test(){if(!inlineAllStrings&&!var.isDefine()){int len=var.getInitialValue().getString().length()+""\'\'"".length();int noInlineBytes=""var xx=;"".length()+len;int inlineBytes=(len-1)*(refs.size()-1);return noInlineBytes>=inlineBytes;}}"
963	"public void test(){for(int i=startingReadRef;i<refSet.size();i++){Reference ref=refSet.get(i);if(!isValidReference(ref)){return false;}}}"
964	"public void test(){if(n.getString().equals(""arguments"")){v=t.getScope().getArgumentsVar();}else {v=t.getScope().getVar(n.getString());}}"
965	"public void test(){for(int i=1;i<size;i++){if(!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())){return false;}}}"
966	"public void test(){if(!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())){return false;}}"
967	"public void test(){for(int i=0;i<size;i++){if(isInitializingDeclarationAt(i)||isInitializingAssignmentAt(i)){return references.get(i);}}}"
968	"public void test(){if(isInitializingDeclarationAt(i)||isInitializingAssignmentAt(i)){return references.get(i);}}"
969	"public void test(){for(int i=0;i<size;i++){Reference ref=references.get(i);if(ref.isLvalue()||ref.isInitializingDeclaration()){if(assignment==null){assignment=ref;}else {return null;}}}}"
970	"public void test(){for(int i=0;i<size;i++){Reference ref=references.get(i);if(ref.isLvalue()||ref.isInitializingDeclaration()){return false;}}}"
971	"public void test(){if(type!=null&&enumElementType.getPrimitiveType().equals(type)){return enumElementType;}else {return type;}}"
972	"public void test(){if(value.equals(""function"")){JSType ctorType=getNativeType(U2U_CONSTRUCTOR_TYPE);return resultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;}}"
973	"public void test(){if(value.equals(""number"")){return getNativeType(NUMBER_TYPE);}else if(value.equals(""boolean"")){return getNativeType(BOOLEAN_TYPE);}else if(value.equals(""string"")){return getNativeType(STRING_TYPE);}else if(value.equals(""undefined"")){return getNativeType(VOID_TYPE);}else if(value.equals(""function"")){return getNativeType(U2U_CONSTRUCTOR_TYPE);}else {return null;}}"
974	"public void test(){if(value.equals(""boolean"")){return getNativeType(BOOLEAN_TYPE);}else if(value.equals(""string"")){return getNativeType(STRING_TYPE);}else if(value.equals(""undefined"")){return getNativeType(VOID_TYPE);}else if(value.equals(""function"")){return getNativeType(U2U_CONSTRUCTOR_TYPE);}else {return null;}}"
975	"public void test(){if(value.equals(""string"")){return getNativeType(STRING_TYPE);}else if(value.equals(""undefined"")){return getNativeType(VOID_TYPE);}else if(value.equals(""function"")){return getNativeType(U2U_CONSTRUCTOR_TYPE);}else {return null;}}"
976	"public void test(){if(value.equals(""undefined"")){return getNativeType(VOID_TYPE);}else if(value.equals(""function"")){return getNativeType(U2U_CONSTRUCTOR_TYPE);}else {return null;}}"
977	"public void test(){if(value.equals(""function"")){return getNativeType(U2U_CONSTRUCTOR_TYPE);}else {return null;}}"
978	"public void test(){if(isStale()){log(""Compiling ""+sources.length);Result result=compiler.compile(externs,sources,options);if(result.success){writeResult(compiler.toSource());}else {throw new BuildException(""Compilation failed."");}}else {log(""None of the files changed. Compilation skipped."");}}"
979	"public void test(){if(this.outputFile.getParentFile().mkdirs()){log(""Created missing parent directory ""+this.outputFile.getParentFile(),Project.MSG_DEBUG);}try{OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(this.outputFile),outputEncoding);out.append(source);out.flush();out.close();}catch (IOException e) {  throw new BuildException(e);}log(""Compiled javascript written to ""+this.outputFile.getAbsolutePath(),Project.MSG_DEBUG);}"
980	"public void test(){if(!flags.flag_file.equals("""")){err.println(""ERROR - Arguments in the file cannot contain ""+""--flagfile option."");isConfigValid=false;}}"
981	"public void test(){if(!flags.flag_file.equals("""")){processFlagFile(err);}}"
982	"public void test(){InputStream input=CommandLineRunner.class.getResourceAsStream(""/externs.zip"");ZipInputStream zip=new ZipInputStream(input);Map<String,JSSourceFile> externsMap=Maps.newHashMap();for(ZipEntry entry=null;(entry=zip.getNextEntry())!=null;){LimitInputStream entryStream=new LimitInputStream(zip,entry.getSize());externsMap.put(entry.getName(),JSSourceFile.fromInputStream(""externs.zip//""+entry.getName(),entryStream));}Preconditions.checkState(externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),""Externs zip must match our hard-coded list of externs."");List<JSSourceFile> externs=Lists.newArrayList();for(String key : DEFAULT_EXTERNS_NAMES){externs.add(externsMap.get(key));}return externs;}"
983	"public void test(){if(nameNode!=null){String name=nameNode.getString();Preconditions.checkState(name.length()!=0);LabelInfo li=getLabelInfo(name);if(li!=null){String newName=getNameForId(li.id);li.referenced=true;if(!name.equals(newName)){nameNode.setString(newName);compiler.reportCodeChange();}}}}"
984	"public void test(){if(!name.equals(newName)){nameNode.setString(newName);compiler.reportCodeChange();}}"
985	"public void test(){if(reservedCharacters==null||reservedCharacters.length==0){return chars;}}"
986	"public void test(){if(prefix.length()>0){if(!contains(firstChars,prefix.charAt(0))){throw new IllegalArgumentException(""prefix must start with one of: ""+Arrays.toString(firstChars));}for(int pos=1;pos<prefix.length();++pos){if(!contains(nonFirstChars,prefix.charAt(pos))){throw new IllegalArgumentException(""prefix has invalid characters, ""+""must be one of: "");}}}}"
987	"public void test(){if(!contains(firstChars,prefix.charAt(0))){throw new IllegalArgumentException(""prefix must start with one of: ""+Arrays.toString(firstChars));}}"
988	"public void test(){for(int pos=1;pos<prefix.length();++pos){if(!contains(nonFirstChars,prefix.charAt(pos))){throw new IllegalArgumentException(""prefix has invalid characters, ""+""must be one of: "");}}}"
989	"public void test(){if(!contains(nonFirstChars,prefix.charAt(pos))){throw new IllegalArgumentException(""prefix has invalid characters, ""+""must be one of: "");}}"
990	"public void test(){for(int i=0;i<arr.length;i++){if(arr[i]==c){return true;}}}"
991	"public void test(){if(arr[i]==c){return true;}}"
992	"public void test(){String name=prefix;int i=nameCount;if(name.isEmpty()){int pos=i%firstChars.length;name+=firstChars[pos];i/=firstChars.length;}while(i>0){i--;int pos=i%nonFirstChars.length;name+=nonFirstChars[pos];i/=nonFirstChars.length;}}"
993	"public void test(){if(name.isEmpty()){int pos=i%firstChars.length;name+=firstChars[pos];i/=firstChars.length;}}"
994	"public void test(){if(doSanityChecks&&sourceFile!=null){Preconditions.checkState(sourceFile.equals(n.getProp(Node.SOURCENAME_PROP)));}}"
995	"public void test(){if(isInstanceObject||fnName.equals(""Function"")){FunctionType existingFn=isInstanceObject?((InstanceObjectType)existingType).getConstructor():typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);if(existingFn.getSource()==null){existingFn.setSource(sourceNode);}if(!existingFn.hasEqualCallType(fnType)){reportWarning(TYPE_REDEFINITION,fnName,fnType.toString(),existingFn.toString());}return existingFn;}else {}}"
996	"public void test(){if(orders.length==0){throw new AssertionError(""no paths through constructor ""+funcName);}}"
997	"public void test(){if(orders.length>1){report(sourceName,func,UNEQUAL_PROPERTIES,reverse(orders[0]).toString(),reverse(orders[1]).toString());}}"
998	"public void test(){if(!(other instanceof PropertyOrders)){return false;}return orders.equals(((PropertyOrders)other).orders);}"
999	"public void test(){for(int i=1;i<list.size();i++){if(!compiler.areNodesEqualForInlining(list.get(i),node0)){return false;}}}"
1000	"public void test(){if(!compiler.areNodesEqualForInlining(list.get(i),node0)){return false;}}"
1001	"public void test(){if(functionNameString.equals(""toLowerCase"")){subtree=tryFoldStringToLowerCase(subtree,stringNode);}else if(functionNameString.equals(""toUpperCase"")){subtree=tryFoldStringToUpperCase(subtree,stringNode);}}"
1002	"public void test(){if(functionNameString.equals(""toUpperCase"")){subtree=tryFoldStringToUpperCase(subtree,stringNode);}}"
1003	"public void test(){if(functionNameString.equals(""indexOf"")||functionNameString.equals(""lastIndexOf"")){subtree=tryFoldStringIndexOf(subtree,functionNameString,stringNode,firstArg);}else if(functionNameString.equals(""substr"")){subtree=tryFoldStringSubstr(subtree,stringNode,firstArg);}else if(functionNameString.equals(""substring"")){subtree=tryFoldStringSubstring(subtree,stringNode,firstArg);}}"
1004	"public void test(){if(functionNameString.equals(""substr"")){subtree=tryFoldStringSubstr(subtree,stringNode,firstArg);}else if(functionNameString.equals(""substring"")){subtree=tryFoldStringSubstring(subtree,stringNode,firstArg);}}"
1005	"public void test(){if(functionNameString.equals(""substring"")){subtree=tryFoldStringSubstring(subtree,stringNode,firstArg);}}"
1006	"public void test(){if(functionNameString.equals(""parseInt"")||functionNameString.equals(""parseFloat"")){subtree=tryFoldParseNumber(subtree,functionNameString,firstArgument);}}"
1007	"public void test(){if(input==null||input.length()==0){return input;}}"
1008	"public void test(){if(input==null||input.length()==0){return input;}int startIndex=0,endIndex=input.length()-1;while(startIndex<input.length()&&input.charAt(startIndex)=='0'){startIndex++;}while(endIndex>=0&&input.charAt(endIndex)=='0'){endIndex--;}if(startIndex>=endIndex){return input;}return input.substring(startIndex,endIndex+1);}"
1009	"public void test(){if(stringVal.length()>1&&stringVal.substring(0,2).equalsIgnoreCase(""0x"")){radix=16;stringVal=stringVal.substring(2);}else if(radix==0){if(!isEcmaScript5OrGreater()&&stringVal.substring(0,1).equals(""0"")){return n;}radix=10;}}"
1010	"public void test(){if(!isEcmaScript5OrGreater()&&stringVal.substring(0,1).equals(""0"")){return n;}}"
1011	"public void test(){if(!normalizeNumericString(stringVal).equals(normalizedNewVal)){return n;}}"
1012	"public void test(){Preconditions.checkArgument(n.getType()==Token.CALL);Preconditions.checkArgument(lstringNode.getType()==Token.STRING);String lstring=NodeUtil.getStringValue(lstringNode);boolean isIndexOf=functionName.equals(""indexOf"");Node secondArg=firstArg.getNext();String searchValue=NodeUtil.getStringValue(firstArg);if(searchValue==null){return n;}int fromIndex=isIndexOf?0:lstring.length();}"
1013	"public void test(){String searchValue=NodeUtil.getStringValue(firstArg);if(searchValue==null){return n;}int fromIndex=isIndexOf?0:lstring.length();if(secondArg!=null){if((secondArg.getNext()!=null)||(secondArg.getType()!=Token.NUMBER)){return n;}else {fromIndex=(int)secondArg.getDouble();}}int indexVal=isIndexOf?lstring.indexOf(searchValue,fromIndex):lstring.lastIndexOf(searchValue,fromIndex);}"
1014	"public void test(){if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals(""join"")){return n;}}"
1015	"public void test(){if(sb==null){sb=new StringBuilder();}else {sb.append(joinString);}}"
1016	"public void test(){{if(sb==null){sb=new StringBuilder();}else {sb.append(joinString);}sb.append(NodeUtil.getArrayElementStringValue(elem));}}"
1017	"public void test(){if(sb!=null){Preconditions.checkNotNull(prev);foldedSize+=sb.length()+2;arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));sb=null;}}"
1018	"public void test(){if(sb!=null){Preconditions.checkNotNull(prev);foldedSize+=sb.length()+2;arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));}}"
1019	"public void test(){default :if(arrayFoldedChildren.size()==arrayNode.getChildCount()){return n;}int kJoinOverhead=""[].join()"".length();foldedSize+=kJoinOverhead;foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;if(foldedSize>originalSize){return n;}arrayNode.detachChildren();}"
1020	"public void test(){Preconditions.checkArgument(n.getType()==Token.CALL);Preconditions.checkArgument(stringNode.getType()==Token.STRING);int start,length;String stringAsString=stringNode.getString();if(arg1!=null&&arg1.getType()==Token.NUMBER){start=(int)arg1.getDouble();}else {return n;}Node arg2=arg1.getNext();}"
1021	"public void test(){if(arg2.getType()==Token.NUMBER){length=(int)arg2.getDouble();}else {return n;}}"
1022	"public void test(){if(arg2!=null){if(arg2.getType()==Token.NUMBER){length=(int)arg2.getDouble();}else {return n;}if(arg2.getNext()!=null){return n;}}else {length=stringAsString.length()-start;}}"
1023	"public void test(){if((start+length)>stringAsString.length()||(length<0)||(start<0)){return n;}}"
1024	"public void test(){if(arg2!=null){if(arg2.getType()==Token.NUMBER){length=(int)arg2.getDouble();}else {return n;}if(arg2.getNext()!=null){return n;}}else {length=stringAsString.length()-start;}if((start+length)>stringAsString.length()||(length<0)||(start<0)){return n;}String result=stringAsString.substring(start,start+length);Node resultNode=Node.newString(result);}"
1025	"public void test(){if(arg2!=null){if(arg2.getType()==Token.NUMBER){end=(int)arg2.getDouble();}else {return n;}if(arg2.getNext()!=null){return n;}}else {end=stringAsString.length();}}"
1026	"public void test(){if((end>stringAsString.length())||(start>stringAsString.length())){return n;}}"
1027	"public void test(){functionNames.process(null,externs);functionNames.process(null,root);sb.append(""Pure functions:\n"");for(Map.Entry<Node,FunctionInformation> entry : functionSideEffectMap.entrySet()){Node function=entry.getKey();FunctionInformation functionInfo=entry.getValue();boolean isPure=functionInfo.mayBePure()&&!functionInfo.mayHaveSideEffects();if(isPure){sb.append(""  ""+functionNames.getFunctionName(function));}}sb.append(""\n"");}"
1028	"public void test(){if(isPure){sb.append(""  ""+functionNames.getFunctionName(function));}}"
1029	"public void test(){functionNames.process(null,root);sb.append(""Pure functions:\n"");for(Map.Entry<Node,FunctionInformation> entry : functionSideEffectMap.entrySet()){Node function=entry.getKey();FunctionInformation functionInfo=entry.getValue();boolean isPure=functionInfo.mayBePure()&&!functionInfo.mayHaveSideEffects();if(isPure){sb.append(""  ""+functionNames.getFunctionName(function));}}sb.append(""\n"");}"
1030	"public void test(){for(Map.Entry<Node,FunctionInformation> entry : functionSideEffectMap.entrySet()){Node function=entry.getKey();FunctionInformation functionInfo=entry.getValue();Set<String> depFunctionNames=Sets.newHashSet();for(Node callSite : functionInfo.getCallsInFunctionBody()){Collection<Definition> defs=getCallableDefinitions(definitionProvider,callSite.getFirstChild());if(defs==null){depFunctionNames.add(""<null def list>"");continue;}for(Definition def : defs){depFunctionNames.add(functionNames.getFunctionName(def.getRValue()));}}sb.append(functionNames.getFunctionName(function)+"" "");}}"
1031	"public void test(){if(propString.equals(""call"")||propString.equals(""apply"")){return callTarget.getNext();}else {return callTarget.getFirstChild();}}"
1032	"public void test(){if(propString.equals(""call"")||propString.equals(""apply"")){return true;}}"
1033	"public void test(){int i=0;while(DecompositionType.DECOMPOSABLE==canExposeExpression(expression)){exposeExpression(expression);i++;if(i>MAX_INTERATIONS){throw new IllegalStateException(""DecomposeExpression depth exceeded on :\n""+expression.toStringTree());}}}"
1034	"public void test(){while(DecompositionType.DECOMPOSABLE==canExposeExpression(expression)){exposeExpression(expression);i++;if(i>MAX_INTERATIONS){throw new IllegalStateException(""DecomposeExpression depth exceeded on :\n""+expression.toStringTree());}}}"
1035	"public void test(){if(i>MAX_INTERATIONS){throw new IllegalStateException(""DecomposeExpression depth exceeded on :\n""+expression.toStringTree());}}"
1036	"public void test(){if(NodeUtil.isAssign(parent)&&NodeUtil.isName(parent.getFirstChild())){reassign=true;break;}else if(NodeUtil.isAssignmentOp(parent)&&parent.getLastChild()==prevParent){if(lastAssign==null){nested=true;}lastAssign=parent;}}"
1037	"public void test(){if(!name.hasChildren()&&forVar.getString().equals(name.getString())){parent.removeChild(n);forNode.replaceChild(forVar,n);compiler.reportCodeChange();}}"
1038	"public void test(){if(value.isQualifiedName()&&nextName.equals(value.getQualifiedName())){if(!isSafeReplacement(next,assign)){return false;}exprParent.removeChild(expr);expr.removeChild(assign);parent.replaceChild(next,assign);return true;}}"
1039	"public void test(){if(name.equals(node.getString())){return true;}}"
1040	"public void test(){if(statementNeedsEnded){append("";"");maybeLineBreak();}}"
1041	"public void test(){if(needSemiColon){append("";"");maybeLineBreak();statementNeedsEnded=false;}else if(statementStarted){statementNeedsEnded=true;}}"
1042	"public void test(){if(statementNeedsEnded){append("";"");maybeLineBreak();endLine();statementNeedsEnded=false;}}"
1043	"public void test(){if(newcode.length()==0){return ;}}"
1044	"public void test(){maybeEndStatement();if(newcode.length()==0){return ;}char c=newcode.charAt(0);if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){append("" "");}append(newcode);}"
1045	"public void test(){if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){append("" "");}}"
1046	"public void test(){maybeEndStatement();char first=op.charAt(0);char prev=getLastChar();if((first=='+'||first=='-')&&prev==first){append("" "");}else if(Character.isLetter(first)&&isWordChar(prev)){append("" "");}else if(prev=='-'&&first=='>'){append("" "");}appendOp(op,binOp);if(binOp){maybeCutLine();}}"
1047	"public void test(){if((first=='+'||first=='-')&&prev==first){append("" "");}else if(Character.isLetter(first)&&isWordChar(prev)){append("" "");}else if(prev=='-'&&first=='>'){append("" "");}}"
1048	"public void test(){if(Character.isLetter(first)&&isWordChar(prev)){append("" "");}else if(prev=='-'&&first=='>'){append("" "");}}"
1049	"public void test(){if(prev=='-'&&first=='>'){append("" "");}}"
1050	"public void test(){if(!declaredSuper.equals(superObject)){if(declaredSuper.equals(getNativeType(OBJECT_TYPE))){if(shouldReport){compiler.report(t.makeError(n,MISSING_EXTENDS_TAG_WARNING,subObject.toString()));}registerMismatch(superObject,declaredSuper);}else {mismatch(t.getSourceName(),n,""mismatch in declaration of superclass type"",superObject,declaredSuper);}if(!subCtor.hasCachedValues()){subCtor.setPrototypeBasedOn(superObject);}}}"
1051	"public void test(){if(declaredSuper.equals(getNativeType(OBJECT_TYPE))){if(shouldReport){compiler.report(t.makeError(n,MISSING_EXTENDS_TAG_WARNING,subObject.toString()));}registerMismatch(superObject,declaredSuper);}else {mismatch(t.getSourceName(),n,""mismatch in declaration of superclass type"",superObject,declaredSuper);}}"
1052	"public void test(){if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){if(shouldReport){compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));}}}"
1053	"public void test(){if(object instanceof TypeMismatch){TypeMismatch that=(TypeMismatch)object;return (that.typeA.equals(this.typeA)&&that.typeB.equals(this.typeB))||(that.typeB.equals(this.typeA)&&that.typeA.equals(this.typeB));}}"
1054	"public void test(){if(n.getType()==Token.NAME&&n.getString().equals(name)){return true;}}"
1055	"public void test(){Node call=new Node(Token.CALL,lineno,charno);call.putBooleanProp(Node.FREE_CALL,true);call.addChildToBack(Node.newString(Token.NAME,methodName));if(argumentNode!=null){call.addChildToBack(argumentNode.cloneTree());}return call;}"
1056	"public void test(){if(value!=null&&NodeUtil.isName(value)&&value.getString().equals(paramNode.getString())){return true;}}"
1057	"public void test(){if(NodeUtil.isName(rhs)&&rhs.getString().equals(paramNode.getString())){Node propertyName=lhs.getLastChild();return propertyName;}}"
1058	"public void test(){if(propName.equals(""apply"")||propName.equals(""call"")){useSite=useSite.getFirstChild();}}"
1059	"public void test(){if(qualifiedName.equals(prevName)){stubsToRemove.add(prevDef);}}"
1060	"public void test(){if(qualifiedName.equals(prevName)){dropStub=true;break;}}"
1061	"public void test(){if(name.equals(NodeUtil.JSC_PROPERTY_NAME_FN)||name.equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){return false;}}"
1062	"public void test(){if(pass.name.equals(passName)){optimalPasses.add(pass);break;}}"
1063	"public void test(){if(name.equals(input.getName())){return input;}}"
1064	"public void test(){if(name.equals(file.getName())){iter.remove();file.setModule(null);found=true;}}"
1065	"public void test(){if(labelName==null){return !n.hasChildren();}else {return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());}}"
1066	"public void test(){if(isForward()){L outBefore=state.out;state.out=flowThrough(node.getValue(),state.in);return !outBefore.equals(state.out);}else {L inBefore=state.in;state.in=flowThrough(node.getValue(),state.out);return !inBefore.equals(state.in);}}"
1067	"public void test(){for(int i=0;i<outBefore.size();i++){if(!outBefore.get(i).equals(state.out.get(i))){return true;}}}"
1068	"public void test(){if(!outBefore.get(i).equals(state.out.get(i))){return true;}}"
1069	"public void test(){for(int i=0,n=oldName.length();i<n;i++){char ch=oldName.charAt(i);if(Character.isUpperCase(ch)||!Character.isLetter(ch)){return true;}}}"
1070	"public void test(){for(Property a : propsByFrequency){if(a.newName==null){a.newName=nameGen.generateNextName();reservedNames.add(a.newName);}debug.append(a.oldName).append("" => "").append(a.newName).append('\n');}}"
1071	"public void test(){if(a!=null&&a.newName!=null){n.setString(a.newName);changed=changed||!a.newName.equals(oldName);}}"
1072	"public void test(){if(s.equals(""prototype"")){processPrototypeParent(parent,t.getInput());}else {markPropertyAccessCandidate(dest,t.getInput());}}"
1073	"public void test(){StringBuilder builder=new StringBuilder(string.length()*count);for(int i=0;i<count;i++){builder.append(string);}return builder.toString();}"
1074	"public void test(){if(source.length()<=maxLength){return source;}}"
1075	"public void test(){if(index>0&&index<str.length()){if(Character.isHighSurrogate(str.charAt(index-1))&&Character.isLowSurrogate(str.charAt(index))){return index-1;}}}"
1076	"public void test(){if(Character.isHighSurrogate(str.charAt(index-1))&&Character.isLowSurrogate(str.charAt(index))){return index-1;}}"
1077	"public void test(){for(int i=modulesAtDepth.size()-1;i>=0;i--){JSModule m=modulesAtDepth.get(i);if(dependsOn(m1,m)&&dependsOn(m2,m)){return m;}}}"
1078	"public void test(){if(lineCount!=lineMaps.length()){throw new SourceMapParseException(""lineMaps length does not match lineCount"");}}"
1079	"public void test(){for(int i=0;i<jsonMappings.length();i++){JSONArray entry=jsonMappings.getJSONArray(i);String name=entry.optString(3,"""");if(names!=null){try{int nameIndex=entry.getInt(3);name=names.getString(nameIndex);}catch (JSONException e) {}}String sourceFile=sources.getString(entry.getInt(0));int lineNumber=entry.getInt(1);int column=entry.getInt(2);OriginalMapping.Builder builder=OriginalMapping.newBuilder().setOriginalFile(sourceFile).setLineNumber(lineNumber).setColumnPosition(column).setIdentifier(name);mappings.add(builder.build());}}"
1080	"public void test(){JSONArray entry=jsonMappings.getJSONArray(i);String name=entry.optString(3,"""");if(names!=null){try{int nameIndex=entry.getInt(3);name=names.getString(nameIndex);}catch (JSONException e) {}}String sourceFile=sources.getString(entry.getInt(0));int lineNumber=entry.getInt(1);}"
1081	"public void test(){if(lineNumber>=lineMaps.length()){return null;}}"
1082	"public void test(){for(int i=0;i<prefix.length();++i){if(prefix.charAt(i)=='\n'){prefixLine++;prefixIndex=0;}else {prefixIndex++;}}}"
1083	"public void test(){if(prefix.charAt(i)=='\n'){prefixLine++;prefixIndex=0;}else {prefixIndex++;}}"
1084	"public void test(){int i=0;for(Entry<String,Integer> entry : map.entrySet()){String key=entry.getKey();if(i!=0){out.append("","");}out.append(escapeString(key));i++;}}"
1085	"public void test(){if(i!=0){out.append("","");}}"
1086	"public void test(){for(Entry<String,Integer> entry : map.entrySet()){String key=entry.getKey();if(i!=0){out.append("","");}out.append(escapeString(key));i++;}}"
1087	"public void test(){out.append(""["");out.append(String.valueOf(m.sourceFile));out.append("","");int line=m.originalPosition.getLine();if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;out.append(lineValue);out.append("","");}"
1088	"public void test(){int line=m.originalPosition.getLine();if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;out.append(lineValue);out.append("","");out.append(String.valueOf(m.originalPosition.getColumn()));if(m.originalName!=null){out.append("","");out.append(String.valueOf(getNameId(m.originalName)));}}"
1089	"public void test(){if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;out.append(lineValue);out.append("","");out.append(String.valueOf(m.originalPosition.getColumn()));if(m.originalName!=null){out.append("","");out.append(String.valueOf(getNameId(m.originalName)));}out.append(""],\n"");}"
1090	"public void test(){if(m.originalName!=null){out.append("","");out.append(String.valueOf(getNameId(m.originalName)));}}"
1091	"public void test(){for(int i=line;i<=nextLine;i++){if(i==nextLine){closeEntry(id,nextCol-col);break;}closeLine(false);openLine();col=0;}}"
1092	"public void test(){if(i==nextLine){closeEntry(id,nextCol-col);break;}}"
1093	"public void test(){if(finalEntry){out.append(""\"""");}else {out.append(""\"",\n"");}}"
1094	"public void test(){if(reps==0){return ;}StringBuilder sb=new StringBuilder();LineMapEncoder.encodeEntry(sb,id,lastId,reps);if(validate){SourceMapLineDecoder.LineEntry entry=SourceMapLineDecoder.decodeLineEntry(sb.toString(),lastId);Preconditions.checkState(entry.id==id&&entry.reps==reps,""expected (%s,%s) but got (%s,%s)"",id,reps,entry.id,entry.reps);}out.append(sb);lastId=id;}"
1095	"public void test(){if(reps>16||relativeIdLength>4){String repsString=valueToBase64(reps-1,1);for(int i=0;i<repsString.length();i++){out.append('!');}String sizeId=valueToBase64(relativeIdString.length()-1,1);out.append(sizeId);out.append(repsString);}else {int prefix=((reps-1)<<2)+(relativeIdString.length()-1);Preconditions.checkState(prefix<64&&prefix>=0,""prefix (%s) reps(%s) map id size(%s)"",prefix,reps,relativeIdString.length());out.append(valueToBase64(prefix,1));}}"
1096	"public void test(){if(reps>16||relativeIdLength>4){String repsString=valueToBase64(reps-1,1);for(int i=0;i<repsString.length();i++){out.append('!');}String sizeId=valueToBase64(relativeIdString.length()-1,1);out.append(sizeId);out.append(repsString);}else {int prefix=((reps-1)<<2)+(relativeIdString.length()-1);Preconditions.checkState(prefix<64&&prefix>=0,""prefix (%s) reps(%s) map id size(%s)"",prefix,reps,relativeIdString.length());out.append(valueToBase64(prefix,1));}out.append(relativeIdString);}"
1097	"public void test(){assert (value <= 63 && value >= 0) : ""value out of range:"" + value;return BASE64_MAP.charAt(value);}"
1098	"public void test(){int result=BASE64_DECODE_MAP[c];assert (result != -1) : ""invalid char"";return BASE64_DECODE_MAP[c];}"
1099	"public void test(){if(first){first=false;}else {out.append("",\n"");}}"
1100	"public void test(){for(SourceMapSection section : sections){if(first){first=false;}else {out.append("",\n"");}out.append(""{\n"");appendFirstField(out,""offset"",offsetValue(section.getLine(),section.getColumn()));appendField(out,""url"",escapeString(section.getSectionUrl()));out.append(""\n}"");}}"
1101	"public void test(){for(SourceMapSection section : sections){if(first){first=false;}else {out.append("",\n"");}out.append(""{\n"");appendFirstField(out,""offset"",offsetValue(section.getLine(),section.getColumn()));appendField(out,""url"",escapeString(section.getSectionUrl()));out.append(""\n}"");}out.append(""\n]"");appendFieldEnd(out);}"
1102	"public void test(){for(SourceMapSection section : sections){if(first){first=false;}else {out.append("",\n"");}out.append(""{\n"");appendFirstField(out,""offset"",offsetValue(section.getLine(),section.getColumn()));appendField(out,""url"",escapeString(section.getSectionUrl()));out.append(""\n}"");}out.append(""\n]"");appendFieldEnd(out);out.append(""\n}\n"");}"
1103	"public void test(){StringBuilder out=new StringBuilder();out.append(""{\n"");appendFirstField(out,""line"",String.valueOf(line));appendField(out,""column"",String.valueOf(column));out.append(""\n}"");return out;}"
1104	"public void test(){if(previousLine==line){out.append(',');}}"
1105	"public void test(){for(int i=line;i<=nextLine;i++){if(i==nextLine){break;}closeLine(false);openLine(false);}}"
1106	"public void test(){if(i==nextLine){break;}}"
1107	"public void test(){if(firstEntry){out.append('\""');}}"
1108	"public void test(){out.append(';');if(finalEntry){out.append('\""');}}"
1109	"public void test(){if(finalEntry){out.append('\""');}}"
1110	"public void test(){out.append(""["");String sourceFile=m.sourceFile;String escapedSourceFile;if(lastSourceFile!=sourceFile){lastSourceFile=sourceFile;lastSourceFileEscaped=escapeString(sourceFile);}escapedSourceFile=lastSourceFileEscaped;out.append(escapedSourceFile);out.append("","");}"
1111	"public void test(){String escapedSourceFile;if(lastSourceFile!=sourceFile){lastSourceFile=sourceFile;lastSourceFileEscaped=escapeString(sourceFile);}escapedSourceFile=lastSourceFileEscaped;out.append(escapedSourceFile);out.append("","");int line=m.originalPosition.getLine();if(line!=lastLine){lastLineString=String.valueOf(line);}}"
1112	"public void test(){if(lastSourceFile!=sourceFile){lastSourceFile=sourceFile;lastSourceFileEscaped=escapeString(sourceFile);}escapedSourceFile=lastSourceFileEscaped;out.append(escapedSourceFile);out.append("","");int line=m.originalPosition.getLine();if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;}"
1113	"public void test(){int line=m.originalPosition.getLine();if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;out.append(lineValue);out.append("","");out.append(String.valueOf(m.originalPosition.getColumn()));if(m.originalName!=null){out.append("","");out.append(escapeString(m.originalName));}}"
1114	"public void test(){if(line!=lastLine){lastLineString=String.valueOf(line);}String lineValue=lastLineString;out.append(lineValue);out.append("","");out.append(String.valueOf(m.originalPosition.getColumn()));if(m.originalName!=null){out.append("","");out.append(escapeString(m.originalName));}out.append(""]\n"");}"
1115	"public void test(){if(m.originalName!=null){out.append("","");out.append(escapeString(m.originalName));}}"
1116	"public void test(){for(int i=line;i<=nextLine;i++){if(i==nextLine){for(int j=col;j<nextCol;j++){addCharEntry(idString);}break;}closeLine();openLine();col=0;}}"
1117	"public void test(){if(i==nextLine){for(int j=col;j<nextCol;j++){addCharEntry(idString);}break;}}"
1118	"public void test(){if(out!=null){out.append(""["");this.firstChar=true;}}"
1119	"public void test(){if(out!=null){out.append(""]\n"");}}"
1120	"public void test(){if(firstChar){firstChar=false;}else {out.append("","");}}"
1121	"public void test(){if(out!=null){if(firstChar){firstChar=false;}else {out.append("","");}out.append(id);}}"
1122	"public void test(){if(outputCharsetEncoder.canEncode(c)){sb.append(c);}else {appendCharAsHex(sb,c);}}"
1123	"public void test(){if(c>0x1f&&c<=0x7f){sb.append(c);}else {appendCharAsHex(sb,c);}}"
1124	"public void test(){if(Character.isSupplementaryCodePoint(codePoint)){char[] surrogates=Character.toChars(codePoint);appendHexJavaScriptRepresentation(out,surrogates[0]);appendHexJavaScriptRepresentation(out,surrogates[1]);return ;}out.append(""\\u"").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);}"
1125	"public void test(){if(currentPosition>=contents.length()){return null;}}"
1126	"public void test(){if(index<0){index=contents.length();}}"
1127	"public void test(){if(!expect.equals(line)){fail(""Expected ""+expect);}}"
1128	"public void test(){if(currentLine.isEmpty()){continue;}ImmutableList.Builder<LineFragment> fragmentList=ImmutableList.builder();LineFragment myLineFragment=null;JSONArray charArray=new JSONArray(currentLine);int numOffsets=charArray.length();int lastID=-1;int startID=Integer.MIN_VALUE;List<Byte> currentOffsets=Lists.newArrayList();}"
1129	"public void test(){for(int j=0;j<charArray.length();++j){int mappingID=lastID;if(!charArray.isNull(j)){mappingID=charArray.optInt(j);if(mappingID>maxID){maxID=mappingID;}}if(startID==Integer.MIN_VALUE){startID=mappingID;}else {if(mappingID-lastID>Byte.MAX_VALUE||mappingID-lastID<Byte.MIN_VALUE){myLineFragment=new LineFragment(startID,Bytes.toArray(currentOffsets));currentOffsets.clear();fragmentList.add(myLineFragment);startID=mappingID;}else {currentOffsets.add((byte)(mappingID-lastID));}}lastID=mappingID;}}"
1130	"public void test(){if(mapArray.length()<3){parser.fail(""Invalid mapping array"");}}"
1131	"public void test(){if(!myFile.equals(currentFile)||(line-lastLine)>Byte.MAX_VALUE||(line-lastLine)<Byte.MIN_VALUE){if(currentFile!=null){FileName dirFile=splitFileName(interner,currentFile);SourceFile.Builder builder=SourceFile.newBuilder().setDir(dirFile.dir).setFileName(dirFile.name).setStartLine(startLine).setStartMapId(startMapId).setLineOffsets(lineOffsets).setColumns(columns).setIdentifiers(identifiers);mappingsBuilder.add(builder.build());}currentFile=myFile;startLine=line;lastLine=line;startMapId=mappingId;columns.clear();lineOffsets.clear();identifiers.clear();}}"
1132	"public void test(){String headerCount=parser.readLine();Preconditions.checkArgument(headerCount.startsWith(LINEMAP_HEADER),""Expected %s"",LINEMAP_HEADER);JSONObject countObject=new JSONObject(headerCount.substring(LINEMAP_HEADER.length()));if(!countObject.has(""count"")){parser.fail(""Missing \'count\'"");}int lineCount=countObject.getInt(""count"");if(lineCount<=0){parser.fail(""Count must be >= 1"");}ImmutableList.Builder<ImmutableList<LineFragment>> characterMapBuilder=ImmutableList.builder();}"
1133	"public void test(){int columnOffset=0;LineFragment lastFragment=lineFragments.get(lineFragments.size()-1);int mapId=lastFragment.valueAtColumn(lastFragment.length());for(LineFragment lineFragment : lineFragments){int columnPosition=columnIndex-columnOffset;if(columnPosition<=lineFragment.length()){mapId=lineFragment.valueAtColumn(columnPosition);break;}columnOffset+=lineFragment.length();}if(mapId<0){return null;}}"
1134	"public void test(){if(columnPosition<=lineFragment.length()){mapId=lineFragment.valueAtColumn(columnPosition);break;}}"
1135	"public void test(){for(LineFragment lineFragment : lineFragments){int columnPosition=columnIndex-columnOffset;if(columnPosition<=lineFragment.length()){mapId=lineFragment.valueAtColumn(columnPosition);break;}columnOffset+=lineFragment.length();}}"
1136	"public void test(){for(int i=0,count=sections.length();i<count;i++){JSONObject section=sections.getJSONObject(i);String url=section.getString(""url"");JSONObject offset=section.getJSONObject(""offset"");int line=offset.getInt(""line"");int column=offset.getInt(""column"");String mapSectionContents=sectionSupplier.getSourceMap(url);if(mapSectionContents==null){throw new SourceMapParseException(""Unable to retrieve: ""+url);}generator.mergeMapSection(line,column,mapSectionContents);}}"
1137	"public void test(){int len=array.length();String[] result=new String[len];for(int i=0;i<len;i++){result[i]=array.getString(i);}return result;}"
1138	"public void test(){if(!content.hasNext()){return true;}char c=content.peek();return (c==';'||c==',');}"
1139	"public void test(){for(int i=0;i<lineCount;i++){ArrayList<Entry> line=lines.get(i);if(line!=null){ final int entryCount=line.size();for(int j=0;j<entryCount;j++){Entry entry=line.get(j);if(pending){FilePosition endPosition=new FilePosition(i,entry.getGeneratedColumn());visitor.visit(sourceName,symbolName,sourceStartPosition,startPosition,endPosition);pending=false;}if(entry.getSourceFileId()!=UNMAPPED){pending=true;sourceName=sources[entry.getSourceFileId()];symbolName=(entry.getNameId()!=UNMAPPED)?names[entry.getNameId()]:null;sourceStartPosition=new FilePosition(entry.getSourceLine(),entry.getSourceColumn());startPosition=new FilePosition(i,entry.getGeneratedColumn());}}}}}"
1140	"public void test(){{ArrayList<Entry> line=lines.get(i);if(line!=null){ final int entryCount=line.size();for(int j=0;j<entryCount;j++){Entry entry=line.get(j);if(pending){FilePosition endPosition=new FilePosition(i,entry.getGeneratedColumn());visitor.visit(sourceName,symbolName,sourceStartPosition,startPosition,endPosition);pending=false;}if(entry.getSourceFileId()!=UNMAPPED){pending=true;sourceName=sources[entry.getSourceFileId()];symbolName=(entry.getNameId()!=UNMAPPED)?names[entry.getNameId()]:null;sourceStartPosition=new FilePosition(entry.getSourceLine(),entry.getSourceColumn());startPosition=new FilePosition(i,entry.getGeneratedColumn());}}}}}"
1141	"public void test(){if(pending){FilePosition endPosition=new FilePosition(i,entry.getGeneratedColumn());visitor.visit(sourceName,symbolName,sourceStartPosition,startPosition,endPosition);pending=false;}}"
1142	"public void test(){if(entry.getSourceFileId()!=UNMAPPED){pending=true;sourceName=sources[entry.getSourceFileId()];symbolName=(entry.getNameId()!=UNMAPPED)?names[entry.getNameId()]:null;sourceStartPosition=new FilePosition(entry.getSourceLine(),entry.getSourceColumn());startPosition=new FilePosition(i,entry.getGeneratedColumn());}}"
1143	"public void test(){do {int digit=value&VLQ_BASE_MASK;value>>>=VLQ_BASE_SHIFT;if(value>0){digit|=VLQ_CONTINUATION_BIT;}out.append(Base64.toBase64(digit));} while(value>0);}"